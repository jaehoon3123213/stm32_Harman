
20250701_StopWatch_TimeWatch_RTOS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080c0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08008260  08008260  00009260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008380  08008380  0000a0e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008380  08008380  00009380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008388  08008388  0000a0e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008388  08008388  00009388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800838c  0800838c  0000938c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  08008390  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004458  200000e4  08008474  0000a0e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000453c  08008474  0000a53c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca70  00000000  00000000  0000a114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000506c  00000000  00000000  00026b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  0002bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000130f  00000000  00000000  0002d4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cab5  00000000  00000000  0002e7df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002322a  00000000  00000000  0004b294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c23e  00000000  00000000  0006e4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a6fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006acc  00000000  00000000  0010a740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0011120c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e4 	.word	0x200000e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008248 	.word	0x08008248

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e8 	.word	0x200000e8
 80001dc:	08008248 	.word	0x08008248

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000110 	.word	0x20000110
 80005dc:	200001b0 	.word	0x200001b0

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b09c      	sub	sp, #112	@ 0x70
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	Model_Init();
 80005e6:	f001 f83f 	bl	8001668 <Model_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ea:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <MX_FREERTOS_Init+0xa8>)
 80005ec:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80005f0:	461d      	mov	r5, r3
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f005 fc0e 	bl	8005e26 <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a1f      	ldr	r2, [pc, #124]	@ (800068c <MX_FREERTOS_Init+0xac>)
 800060e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ListenerTask */
  osThreadDef(ListenerTask, ListenerThread, osPriorityNormal, 0, 128);
 8000610:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <MX_FREERTOS_Init+0xb0>)
 8000612:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ListenerTaskHandle = osThreadCreate(osThread(ListenerTask), NULL);
 8000624:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f005 fbfb 	bl	8005e26 <osThreadCreate>
 8000630:	4603      	mov	r3, r0
 8000632:	4a18      	ldr	r2, [pc, #96]	@ (8000694 <MX_FREERTOS_Init+0xb4>)
 8000634:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControllerTask */
  osThreadDef(ControllerTask, ControllerThread, osPriorityNormal, 0, 128);
 8000636:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <MX_FREERTOS_Init+0xb8>)
 8000638:	f107 041c 	add.w	r4, r7, #28
 800063c:	461d      	mov	r5, r3
 800063e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControllerTaskHandle = osThreadCreate(osThread(ControllerTask), NULL);
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f005 fbe8 	bl	8005e26 <osThreadCreate>
 8000656:	4603      	mov	r3, r0
 8000658:	4a10      	ldr	r2, [pc, #64]	@ (800069c <MX_FREERTOS_Init+0xbc>)
 800065a:	6013      	str	r3, [r2, #0]

  /* definition and creation of PresenterTask */
  osThreadDef(PresenterTask, PresenterThread, osPriorityNormal, 0, 128);
 800065c:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_FREERTOS_Init+0xc0>)
 800065e:	463c      	mov	r4, r7
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PresenterTaskHandle = osThreadCreate(osThread(PresenterTask), NULL);
 800066e:	463b      	mov	r3, r7
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f005 fbd7 	bl	8005e26 <osThreadCreate>
 8000678:	4603      	mov	r3, r0
 800067a:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <MX_FREERTOS_Init+0xc4>)
 800067c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800067e:	bf00      	nop
 8000680:	3770      	adds	r7, #112	@ 0x70
 8000682:	46bd      	mov	sp, r7
 8000684:	bdb0      	pop	{r4, r5, r7, pc}
 8000686:	bf00      	nop
 8000688:	0800826c 	.word	0x0800826c
 800068c:	20000100 	.word	0x20000100
 8000690:	08008298 	.word	0x08008298
 8000694:	20000104 	.word	0x20000104
 8000698:	080082c4 	.word	0x080082c4
 800069c:	20000108 	.word	0x20000108
 80006a0:	080082f0 	.word	0x080082f0
 80006a4:	2000010c 	.word	0x2000010c

080006a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f005 fc04 	bl	8005ebe <osDelay>
 80006b6:	e7fb      	b.n	80006b0 <StartDefaultTask+0x8>

080006b8 <ListenerThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ListenerThread */
void ListenerThread(void const * argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ListenerThread */
  /* Infinite loop */
	Listener_Init();
 80006c0:	f000 ff64 	bl	800158c <Listener_Init>
  for(;;)
  {
	  Listener_Excute();
 80006c4:	f000 ff80 	bl	80015c8 <Listener_Excute>
    osDelay(1);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f005 fbf8 	bl	8005ebe <osDelay>
  {
 80006ce:	bf00      	nop
 80006d0:	e7f8      	b.n	80006c4 <ListenerThread+0xc>

080006d2 <ControllerThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ControllerThread */
void ControllerThread(void const * argument)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControllerThread */

  /* Infinite loop */
  for(;;)
  {
	Controller_Excute();
 80006da:	f000 ff16 	bl	800150a <Controller_Excute>
    osDelay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f005 fbed 	bl	8005ebe <osDelay>
  {
 80006e4:	bf00      	nop
 80006e6:	e7f8      	b.n	80006da <ControllerThread+0x8>

080006e8 <PresenterThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PresenterThread */
void PresenterThread(void const * argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PresenterThread */
  /* Infinite loop */
	Presenter_Init();
 80006f0:	f000 ffca 	bl	8001688 <Presenter_Init>
  for(;;)
  {
	Presenter_Excute();
 80006f4:	f000 ffd6 	bl	80016a4 <Presenter_Excute>
    osDelay(1);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f005 fbe0 	bl	8005ebe <osDelay>
  {
 80006fe:	bf00      	nop
 8000700:	e7f8      	b.n	80006f4 <PresenterThread+0xc>
	...

08000704 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	@ 0x28
 8000708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	4b54      	ldr	r3, [pc, #336]	@ (8000870 <MX_GPIO_Init+0x16c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a53      	ldr	r2, [pc, #332]	@ (8000870 <MX_GPIO_Init+0x16c>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b51      	ldr	r3, [pc, #324]	@ (8000870 <MX_GPIO_Init+0x16c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	4b4d      	ldr	r3, [pc, #308]	@ (8000870 <MX_GPIO_Init+0x16c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a4c      	ldr	r2, [pc, #304]	@ (8000870 <MX_GPIO_Init+0x16c>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b4a      	ldr	r3, [pc, #296]	@ (8000870 <MX_GPIO_Init+0x16c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	4b46      	ldr	r3, [pc, #280]	@ (8000870 <MX_GPIO_Init+0x16c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a45      	ldr	r2, [pc, #276]	@ (8000870 <MX_GPIO_Init+0x16c>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b43      	ldr	r3, [pc, #268]	@ (8000870 <MX_GPIO_Init+0x16c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b3f      	ldr	r3, [pc, #252]	@ (8000870 <MX_GPIO_Init+0x16c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a3e      	ldr	r2, [pc, #248]	@ (8000870 <MX_GPIO_Init+0x16c>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b3c      	ldr	r3, [pc, #240]	@ (8000870 <MX_GPIO_Init+0x16c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 51c2 	mov.w	r1, #6208	@ 0x1840
 8000790:	4838      	ldr	r0, [pc, #224]	@ (8000874 <MX_GPIO_Init+0x170>)
 8000792:	f002 f9f3 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 800079c:	4836      	ldr	r0, [pc, #216]	@ (8000878 <MX_GPIO_Init+0x174>)
 800079e:	f002 f9ed 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80007a2:	2200      	movs	r2, #0
 80007a4:	f24f 0106 	movw	r1, #61446	@ 0xf006
 80007a8:	4834      	ldr	r0, [pc, #208]	@ (800087c <MX_GPIO_Init+0x178>)
 80007aa:	f002 f9e7 	bl	8002b7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA6 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 80007ae:	f44f 53c2 	mov.w	r3, #6208	@ 0x1840
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	482b      	ldr	r0, [pc, #172]	@ (8000874 <MX_GPIO_Init+0x170>)
 80007c8:	f002 f83c 	bl	8002844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80007cc:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4824      	ldr	r0, [pc, #144]	@ (8000878 <MX_GPIO_Init+0x174>)
 80007e6:	f002 f82d 	bl	8002844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80007ea:	f24f 0306 	movw	r3, #61446	@ 0xf006
 80007ee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	481e      	ldr	r0, [pc, #120]	@ (800087c <MX_GPIO_Init+0x178>)
 8000804:	f002 f81e 	bl	8002844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800080e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4817      	ldr	r0, [pc, #92]	@ (800087c <MX_GPIO_Init+0x178>)
 8000820:	f002 f810 	bl	8002844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000824:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	480e      	ldr	r0, [pc, #56]	@ (8000874 <MX_GPIO_Init+0x170>)
 800083a:	f002 f803 	bl	8002844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800083e:	2328      	movs	r3, #40	@ 0x28
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	480a      	ldr	r0, [pc, #40]	@ (800087c <MX_GPIO_Init+0x178>)
 8000852:	f001 fff7 	bl	8002844 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2105      	movs	r1, #5
 800085a:	2028      	movs	r0, #40	@ 0x28
 800085c:	f001 ff28 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000860:	2028      	movs	r0, #40	@ 0x28
 8000862:	f001 ff41 	bl	80026e8 <HAL_NVIC_EnableIRQ>

}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	@ 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40020000 	.word	0x40020000
 8000878:	40020800 	.word	0x40020800
 800087c:	40020400 	.word	0x40020400

08000880 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <MX_I2C1_Init+0x50>)
 8000886:	4a13      	ldr	r2, [pc, #76]	@ (80008d4 <MX_I2C1_Init+0x54>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800088a:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_I2C1_Init+0x50>)
 800088c:	4a12      	ldr	r2, [pc, #72]	@ (80008d8 <MX_I2C1_Init+0x58>)
 800088e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <MX_I2C1_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_I2C1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_I2C1_Init+0x50>)
 800089e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	@ (80008d0 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b0:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <MX_I2C1_Init+0x50>)
 80008be:	f002 f99b 	bl	8002bf8 <HAL_I2C_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008c8:	f000 f8f4 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200003b0 	.word	0x200003b0
 80008d4:	40005400 	.word	0x40005400
 80008d8:	000186a0 	.word	0x000186a0

080008dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	@ 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a19      	ldr	r2, [pc, #100]	@ (8000960 <HAL_I2C_MspInit+0x84>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d12c      	bne.n	8000958 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <HAL_I2C_MspInit+0x88>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a17      	ldr	r2, [pc, #92]	@ (8000964 <HAL_I2C_MspInit+0x88>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <HAL_I2C_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800091a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000920:	2312      	movs	r3, #18
 8000922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800092c:	2304      	movs	r3, #4
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	480c      	ldr	r0, [pc, #48]	@ (8000968 <HAL_I2C_MspInit+0x8c>)
 8000938:	f001 ff84 	bl	8002844 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <HAL_I2C_MspInit+0x88>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	4a07      	ldr	r2, [pc, #28]	@ (8000964 <HAL_I2C_MspInit+0x88>)
 8000946:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800094a:	6413      	str	r3, [r2, #64]	@ 0x40
 800094c:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <HAL_I2C_MspInit+0x88>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	@ 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40005400 	.word	0x40005400
 8000964:	40023800 	.word	0x40023800
 8000968:	40020400 	.word	0x40020400

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000970:	f001 fd5c 	bl	800242c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000974:	f000 f81a 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000978:	f7ff fec4 	bl	8000704 <MX_GPIO_Init>
  MX_TIM2_Init();
 800097c:	f000 faca 	bl	8000f14 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000980:	f000 fd20 	bl	80013c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000984:	f7ff ff7c 	bl	8000880 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000988:	f000 fb10 	bl	8000fac <MX_TIM3_Init>
  MX_TIM1_Init();
 800098c:	f000 fa3e 	bl	8000e0c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000990:	f000 fb82 	bl	8001098 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000994:	f000 fbce 	bl	8001134 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 8000998:	f000 ff54 	bl	8001844 <ap_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800099c:	f7ff fe20 	bl	80005e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009a0:	f005 fa3a 	bl	8005e18 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 80009a4:	f000 ff44 	bl	8001830 <ap_main>
 80009a8:	e7fc      	b.n	80009a4 <main+0x38>
	...

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b094      	sub	sp, #80	@ 0x50
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	2230      	movs	r2, #48	@ 0x30
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f006 fe6f 	bl	800769e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <SystemClock_Config+0xc8>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d8:	4a26      	ldr	r2, [pc, #152]	@ (8000a74 <SystemClock_Config+0xc8>)
 80009da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009de:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e0:	4b24      	ldr	r3, [pc, #144]	@ (8000a74 <SystemClock_Config+0xc8>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ec:	2300      	movs	r3, #0
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	4b21      	ldr	r3, [pc, #132]	@ (8000a78 <SystemClock_Config+0xcc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a20      	ldr	r2, [pc, #128]	@ (8000a78 <SystemClock_Config+0xcc>)
 80009f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a78 <SystemClock_Config+0xcc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a12:	2302      	movs	r3, #2
 8000a14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a20:	2364      	movs	r3, #100	@ 0x64
 8000a22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2c:	f107 0320 	add.w	r3, r7, #32
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 fd7f 	bl	8003534 <HAL_RCC_OscConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a3c:	f000 f83a 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	230f      	movs	r3, #15
 8000a42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a44:	2302      	movs	r3, #2
 8000a46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	2103      	movs	r1, #3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 ffe1 	bl	8003a24 <HAL_RCC_ClockConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a68:	f000 f824 	bl	8000ab4 <Error_Handler>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3750      	adds	r7, #80	@ 0x50
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40007000 	.word	0x40007000

08000a7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a09      	ldr	r2, [pc, #36]	@ (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d101      	bne.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a8e:	f001 fcef 	bl	8002470 <HAL_IncTick>
  }

  if(htim->Instance == TIM2) {
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a9a:	d105      	bne.n	8000aa8 <HAL_TIM_PeriodElapsedCallback+0x2c>
     FND_DispDataCallBack();
 8000a9c:	f001 f9bc 	bl	8001e18 <FND_DispDataCallBack>

     TimeWatch_IncTimeCallBack();
 8000aa0:	f001 f87c 	bl	8001b9c <TimeWatch_IncTimeCallBack>
     StopWatch_IncTimeCallBack();
 8000aa4:	f000 ffb8 	bl	8001a18 <StopWatch_IncTimeCallBack>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40014800 	.word	0x40014800

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <Error_Handler+0x8>

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <HAL_MspInit+0x54>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ace:	4a11      	ldr	r2, [pc, #68]	@ (8000b14 <HAL_MspInit+0x54>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <HAL_MspInit+0x54>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <HAL_MspInit+0x54>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <HAL_MspInit+0x54>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af2:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <HAL_MspInit+0x54>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	210f      	movs	r1, #15
 8000b02:	f06f 0001 	mvn.w	r0, #1
 8000b06:	f001 fdd3 	bl	80026b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800

08000b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	@ 0x30
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000be8 <HAL_InitTick+0xd0>)
 8000b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b30:	4a2d      	ldr	r2, [pc, #180]	@ (8000be8 <HAL_InitTick+0xd0>)
 8000b32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b36:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b38:	4b2b      	ldr	r3, [pc, #172]	@ (8000be8 <HAL_InitTick+0xd0>)
 8000b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b44:	f107 020c 	add.w	r2, r7, #12
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f003 f988 	bl	8003e64 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b54:	f003 f972 	bl	8003e3c <HAL_RCC_GetPCLK2Freq>
 8000b58:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b5c:	4a23      	ldr	r2, [pc, #140]	@ (8000bec <HAL_InitTick+0xd4>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	0c9b      	lsrs	r3, r3, #18
 8000b64:	3b01      	subs	r3, #1
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000b68:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000b6a:	4a22      	ldr	r2, [pc, #136]	@ (8000bf4 <HAL_InitTick+0xdc>)
 8000b6c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000b70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b74:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000b76:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000b8e:	4818      	ldr	r0, [pc, #96]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000b90:	f003 f99a 	bl	8003ec8 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d11b      	bne.n	8000bda <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000ba2:	4813      	ldr	r0, [pc, #76]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000ba4:	f003 f9e0 	bl	8003f68 <HAL_TIM_Base_Start_IT>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d111      	bne.n	8000bda <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000bb6:	201a      	movs	r0, #26
 8000bb8:	f001 fd96 	bl	80026e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d808      	bhi.n	8000bd4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	201a      	movs	r0, #26
 8000bc8:	f001 fd72 	bl	80026b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <HAL_InitTick+0xe0>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	e002      	b.n	8000bda <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3730      	adds	r7, #48	@ 0x30
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	431bde83 	.word	0x431bde83
 8000bf0:	20000404 	.word	0x20000404
 8000bf4:	40014800 	.word	0x40014800
 8000bf8:	2000007c 	.word	0x2000007c

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <NMI_Handler+0x4>

08000c04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <MemManage_Handler+0x4>

08000c14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c38:	4803      	ldr	r0, [pc, #12]	@ (8000c48 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000c3a:	f003 fb5b 	bl	80042f4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8000c3e:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000c40:	f003 fb58 	bl	80042f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000450 	.word	0x20000450
 8000c4c:	20000404 	.word	0x20000404

08000c50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c54:	4802      	ldr	r0, [pc, #8]	@ (8000c60 <TIM2_IRQHandler+0x10>)
 8000c56:	f003 fb4d 	bl	80042f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000498 	.word	0x20000498

08000c64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <TIM4_IRQHandler+0x10>)
 8000c6a:	f003 fb43 	bl	80042f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000528 	.word	0x20000528

08000c78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c7c:	4802      	ldr	r0, [pc, #8]	@ (8000c88 <USART2_IRQHandler+0x10>)
 8000c7e:	f004 f9d1 	bl	8005024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200005b8 	.word	0x200005b8

08000c8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000c90:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000c94:	f001 ff8c 	bl	8002bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  DHT11_EXTI_Callback();
 8000c98:	f001 f816 	bl	8001cc8 <DHT11_EXTI_Callback>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e00a      	b.n	8000cc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb2:	f3af 8000 	nop.w
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60ba      	str	r2, [r7, #8]
 8000cbe:	b2ca      	uxtb	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbf0      	blt.n	8000cb2 <_read+0x12>
  }

  return len;
 8000cd0:	687b      	ldr	r3, [r7, #4]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	60f8      	str	r0, [r7, #12]
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e009      	b.n	8000d00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	60ba      	str	r2, [r7, #8]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dbf1      	blt.n	8000cec <_write+0x12>
  }
  return len;
 8000d08:	687b      	ldr	r3, [r7, #4]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <_close>:

int _close(int file)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <_isatty>:

int _isatty(int file)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f006 fd34 	bl	8007818 <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20020000 	.word	0x20020000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	2000044c 	.word	0x2000044c
 8000de4:	20004540 	.word	0x20004540

08000de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <SystemInit+0x20>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000df2:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <SystemInit+0x20>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b092      	sub	sp, #72	@ 0x48
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e12:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
 8000e2c:	615a      	str	r2, [r3, #20]
 8000e2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2220      	movs	r2, #32
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f006 fc31 	bl	800769e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e3c:	4b33      	ldr	r3, [pc, #204]	@ (8000f0c <MX_TIM1_Init+0x100>)
 8000e3e:	4a34      	ldr	r2, [pc, #208]	@ (8000f10 <MX_TIM1_Init+0x104>)
 8000e40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8000e42:	4b32      	ldr	r3, [pc, #200]	@ (8000f0c <MX_TIM1_Init+0x100>)
 8000e44:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4a:	4b30      	ldr	r3, [pc, #192]	@ (8000f0c <MX_TIM1_Init+0x100>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000e50:	4b2e      	ldr	r3, [pc, #184]	@ (8000f0c <MX_TIM1_Init+0x100>)
 8000e52:	2263      	movs	r2, #99	@ 0x63
 8000e54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e56:	4b2d      	ldr	r3, [pc, #180]	@ (8000f0c <MX_TIM1_Init+0x100>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f0c <MX_TIM1_Init+0x100>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e62:	4b2a      	ldr	r3, [pc, #168]	@ (8000f0c <MX_TIM1_Init+0x100>)
 8000e64:	2280      	movs	r2, #128	@ 0x80
 8000e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e68:	4828      	ldr	r0, [pc, #160]	@ (8000f0c <MX_TIM1_Init+0x100>)
 8000e6a:	f003 f8df 	bl	800402c <HAL_TIM_PWM_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000e74:	f7ff fe1e 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e80:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e84:	4619      	mov	r1, r3
 8000e86:	4821      	ldr	r0, [pc, #132]	@ (8000f0c <MX_TIM1_Init+0x100>)
 8000e88:	f003 ffa8 	bl	8004ddc <HAL_TIMEx_MasterConfigSynchronization>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000e92:	f7ff fe0f 	bl	8000ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e96:	2360      	movs	r3, #96	@ 0x60
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 50-1;
 8000e9a:	2331      	movs	r3, #49	@ 0x31
 8000e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4814      	ldr	r0, [pc, #80]	@ (8000f0c <MX_TIM1_Init+0x100>)
 8000ebc:	f003 fb0a 	bl	80044d4 <HAL_TIM_PWM_ConfigChannel>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000ec6:	f7ff fdf5 	bl	8000ab4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ede:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ee2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	4619      	mov	r1, r3
 8000eec:	4807      	ldr	r0, [pc, #28]	@ (8000f0c <MX_TIM1_Init+0x100>)
 8000eee:	f003 ffe3 	bl	8004eb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000ef8:	f7ff fddc 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000efc:	4803      	ldr	r0, [pc, #12]	@ (8000f0c <MX_TIM1_Init+0x100>)
 8000efe:	f000 f9ff 	bl	8001300 <HAL_TIM_MspPostInit>

}
 8000f02:	bf00      	nop
 8000f04:	3748      	adds	r7, #72	@ 0x48
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000450 	.word	0x20000450
 8000f10:	40010000 	.word	0x40010000

08000f14 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f3a:	2263      	movs	r2, #99	@ 0x63
 8000f3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f58:	4813      	ldr	r0, [pc, #76]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f5a:	f002 ffb5 	bl	8003ec8 <HAL_TIM_Base_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f64:	f7ff fda6 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	4619      	mov	r1, r3
 8000f74:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f76:	f003 fb6f 	bl	8004658 <HAL_TIM_ConfigClockSource>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f80:	f7ff fd98 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f92:	f003 ff23 	bl	8004ddc <HAL_TIMEx_MasterConfigSynchronization>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f9c:	f7ff fd8a 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000498 	.word	0x20000498

08000fac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08e      	sub	sp, #56	@ 0x38
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc0:	f107 0320 	add.w	r3, r7, #32
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	615a      	str	r2, [r3, #20]
 8000fda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	@ (8001090 <MX_TIM3_Init+0xe4>)
 8000fde:	4a2d      	ldr	r2, [pc, #180]	@ (8001094 <MX_TIM3_Init+0xe8>)
 8000fe0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8001090 <MX_TIM3_Init+0xe4>)
 8000fe4:	2263      	movs	r2, #99	@ 0x63
 8000fe6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <MX_TIM3_Init+0xe4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000fee:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <MX_TIM3_Init+0xe4>)
 8000ff0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ff4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <MX_TIM3_Init+0xe4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ffc:	4b24      	ldr	r3, [pc, #144]	@ (8001090 <MX_TIM3_Init+0xe4>)
 8000ffe:	2280      	movs	r2, #128	@ 0x80
 8001000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001002:	4823      	ldr	r0, [pc, #140]	@ (8001090 <MX_TIM3_Init+0xe4>)
 8001004:	f002 ff60 	bl	8003ec8 <HAL_TIM_Base_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800100e:	f7ff fd51 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001012:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001016:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001018:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800101c:	4619      	mov	r1, r3
 800101e:	481c      	ldr	r0, [pc, #112]	@ (8001090 <MX_TIM3_Init+0xe4>)
 8001020:	f003 fb1a 	bl	8004658 <HAL_TIM_ConfigClockSource>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800102a:	f7ff fd43 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800102e:	4818      	ldr	r0, [pc, #96]	@ (8001090 <MX_TIM3_Init+0xe4>)
 8001030:	f002 fffc 	bl	800402c <HAL_TIM_PWM_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800103a:	f7ff fd3b 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	4619      	mov	r1, r3
 800104c:	4810      	ldr	r0, [pc, #64]	@ (8001090 <MX_TIM3_Init+0xe4>)
 800104e:	f003 fec5 	bl	8004ddc <HAL_TIMEx_MasterConfigSynchronization>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001058:	f7ff fd2c 	bl	8000ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105c:	2360      	movs	r3, #96	@ 0x60
 800105e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2200      	movs	r2, #0
 8001070:	4619      	mov	r1, r3
 8001072:	4807      	ldr	r0, [pc, #28]	@ (8001090 <MX_TIM3_Init+0xe4>)
 8001074:	f003 fa2e 	bl	80044d4 <HAL_TIM_PWM_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800107e:	f7ff fd19 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001082:	4803      	ldr	r0, [pc, #12]	@ (8001090 <MX_TIM3_Init+0xe4>)
 8001084:	f000 f93c 	bl	8001300 <HAL_TIM_MspPostInit>

}
 8001088:	bf00      	nop
 800108a:	3738      	adds	r7, #56	@ 0x38
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200004e0 	.word	0x200004e0
 8001094:	40000400 	.word	0x40000400

08001098 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <MX_TIM4_Init+0x94>)
 80010b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001130 <MX_TIM4_Init+0x98>)
 80010b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <MX_TIM4_Init+0x94>)
 80010bc:	2263      	movs	r2, #99	@ 0x63
 80010be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <MX_TIM4_Init+0x94>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <MX_TIM4_Init+0x94>)
 80010c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <MX_TIM4_Init+0x94>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010d4:	4b15      	ldr	r3, [pc, #84]	@ (800112c <MX_TIM4_Init+0x94>)
 80010d6:	2280      	movs	r2, #128	@ 0x80
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010da:	4814      	ldr	r0, [pc, #80]	@ (800112c <MX_TIM4_Init+0x94>)
 80010dc:	f002 fef4 	bl	8003ec8 <HAL_TIM_Base_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80010e6:	f7ff fce5 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	4619      	mov	r1, r3
 80010f6:	480d      	ldr	r0, [pc, #52]	@ (800112c <MX_TIM4_Init+0x94>)
 80010f8:	f003 faae 	bl	8004658 <HAL_TIM_ConfigClockSource>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001102:	f7ff fcd7 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	@ (800112c <MX_TIM4_Init+0x94>)
 8001114:	f003 fe62 	bl	8004ddc <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800111e:	f7ff fcc9 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000528 	.word	0x20000528
 8001130:	40000800 	.word	0x40000800

08001134 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001150:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <MX_TIM5_Init+0x94>)
 8001152:	4a1e      	ldr	r2, [pc, #120]	@ (80011cc <MX_TIM5_Init+0x98>)
 8001154:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8001156:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <MX_TIM5_Init+0x94>)
 8001158:	2263      	movs	r2, #99	@ 0x63
 800115a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115c:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <MX_TIM5_Init+0x94>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001162:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <MX_TIM5_Init+0x94>)
 8001164:	f04f 32ff 	mov.w	r2, #4294967295
 8001168:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116a:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <MX_TIM5_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <MX_TIM5_Init+0x94>)
 8001172:	2280      	movs	r2, #128	@ 0x80
 8001174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001176:	4814      	ldr	r0, [pc, #80]	@ (80011c8 <MX_TIM5_Init+0x94>)
 8001178:	f002 fea6 	bl	8003ec8 <HAL_TIM_Base_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001182:	f7ff fc97 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001186:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800118a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	@ (80011c8 <MX_TIM5_Init+0x94>)
 8001194:	f003 fa60 	bl	8004658 <HAL_TIM_ConfigClockSource>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800119e:	f7ff fc89 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	@ (80011c8 <MX_TIM5_Init+0x94>)
 80011b0:	f003 fe14 	bl	8004ddc <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80011ba:	f7ff fc7b 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000570 	.word	0x20000570
 80011cc:	40000c00 	.word	0x40000c00

080011d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001218 <HAL_TIM_PWM_MspInit+0x48>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d115      	bne.n	800120e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <HAL_TIM_PWM_MspInit+0x4c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	4a0c      	ldr	r2, [pc, #48]	@ (800121c <HAL_TIM_PWM_MspInit+0x4c>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <HAL_TIM_PWM_MspInit+0x4c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	210f      	movs	r1, #15
 8001202:	201a      	movs	r0, #26
 8001204:	f001 fa54 	bl	80026b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001208:	201a      	movs	r0, #26
 800120a:	f001 fa6d 	bl	80026e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40010000 	.word	0x40010000
 800121c:	40023800 	.word	0x40023800

08001220 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001230:	d116      	bne.n	8001260 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <HAL_TIM_Base_MspInit+0xd0>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	4a2d      	ldr	r2, [pc, #180]	@ (80012f0 <HAL_TIM_Base_MspInit+0xd0>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6413      	str	r3, [r2, #64]	@ 0x40
 8001242:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <HAL_TIM_Base_MspInit+0xd0>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2105      	movs	r1, #5
 8001252:	201c      	movs	r0, #28
 8001254:	f001 fa2c 	bl	80026b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001258:	201c      	movs	r0, #28
 800125a:	f001 fa45 	bl	80026e8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800125e:	e042      	b.n	80012e6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a23      	ldr	r2, [pc, #140]	@ (80012f4 <HAL_TIM_Base_MspInit+0xd4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10e      	bne.n	8001288 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <HAL_TIM_Base_MspInit+0xd0>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	4a1f      	ldr	r2, [pc, #124]	@ (80012f0 <HAL_TIM_Base_MspInit+0xd0>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6413      	str	r3, [r2, #64]	@ 0x40
 800127a:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <HAL_TIM_Base_MspInit+0xd0>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
}
 8001286:	e02e      	b.n	80012e6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1a      	ldr	r2, [pc, #104]	@ (80012f8 <HAL_TIM_Base_MspInit+0xd8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d116      	bne.n	80012c0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <HAL_TIM_Base_MspInit+0xd0>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	4a15      	ldr	r2, [pc, #84]	@ (80012f0 <HAL_TIM_Base_MspInit+0xd0>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a2:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <HAL_TIM_Base_MspInit+0xd0>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2105      	movs	r1, #5
 80012b2:	201e      	movs	r0, #30
 80012b4:	f001 f9fc 	bl	80026b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012b8:	201e      	movs	r0, #30
 80012ba:	f001 fa15 	bl	80026e8 <HAL_NVIC_EnableIRQ>
}
 80012be:	e012      	b.n	80012e6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM5)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <HAL_TIM_Base_MspInit+0xdc>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d10d      	bne.n	80012e6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <HAL_TIM_Base_MspInit+0xd0>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	4a07      	ldr	r2, [pc, #28]	@ (80012f0 <HAL_TIM_Base_MspInit+0xd0>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012da:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <HAL_TIM_Base_MspInit+0xd0>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40000400 	.word	0x40000400
 80012f8:	40000800 	.word	0x40000800
 80012fc:	40000c00 	.word	0x40000c00

08001300 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a24      	ldr	r2, [pc, #144]	@ (80013b0 <HAL_TIM_MspPostInit+0xb0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d11f      	bne.n	8001362 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b23      	ldr	r3, [pc, #140]	@ (80013b4 <HAL_TIM_MspPostInit+0xb4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a22      	ldr	r2, [pc, #136]	@ (80013b4 <HAL_TIM_MspPostInit+0xb4>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b20      	ldr	r3, [pc, #128]	@ (80013b4 <HAL_TIM_MspPostInit+0xb4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800133e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001350:	2301      	movs	r3, #1
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4817      	ldr	r0, [pc, #92]	@ (80013b8 <HAL_TIM_MspPostInit+0xb8>)
 800135c:	f001 fa72 	bl	8002844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001360:	e022      	b.n	80013a8 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a15      	ldr	r2, [pc, #84]	@ (80013bc <HAL_TIM_MspPostInit+0xbc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d11d      	bne.n	80013a8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <HAL_TIM_MspPostInit+0xb4>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001374:	4a0f      	ldr	r2, [pc, #60]	@ (80013b4 <HAL_TIM_MspPostInit+0xb4>)
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	6313      	str	r3, [r2, #48]	@ 0x30
 800137c:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <HAL_TIM_MspPostInit+0xb4>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001388:	2310      	movs	r3, #16
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001398:	2302      	movs	r3, #2
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <HAL_TIM_MspPostInit+0xc0>)
 80013a4:	f001 fa4e 	bl	8002844 <HAL_GPIO_Init>
}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	@ 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40010000 	.word	0x40010000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40000400 	.word	0x40000400
 80013c0:	40020400 	.word	0x40020400

080013c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <MX_USART2_UART_Init+0x50>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013fa:	4805      	ldr	r0, [pc, #20]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013fc:	f003 fdc2 	bl	8004f84 <HAL_UART_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001406:	f7ff fb55 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200005b8 	.word	0x200005b8
 8001414:	40004400 	.word	0x40004400

08001418 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a1d      	ldr	r2, [pc, #116]	@ (80014ac <HAL_UART_MspInit+0x94>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d133      	bne.n	80014a2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b1c      	ldr	r3, [pc, #112]	@ (80014b0 <HAL_UART_MspInit+0x98>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	4a1b      	ldr	r2, [pc, #108]	@ (80014b0 <HAL_UART_MspInit+0x98>)
 8001444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001448:	6413      	str	r3, [r2, #64]	@ 0x40
 800144a:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <HAL_UART_MspInit+0x98>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <HAL_UART_MspInit+0x98>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a14      	ldr	r2, [pc, #80]	@ (80014b0 <HAL_UART_MspInit+0x98>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_UART_MspInit+0x98>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001472:	230c      	movs	r3, #12
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001482:	2307      	movs	r3, #7
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4809      	ldr	r0, [pc, #36]	@ (80014b4 <HAL_UART_MspInit+0x9c>)
 800148e:	f001 f9d9 	bl	8002844 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2105      	movs	r1, #5
 8001496:	2026      	movs	r0, #38	@ 0x26
 8001498:	f001 f90a 	bl	80026b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800149c:	2026      	movs	r0, #38	@ 0x26
 800149e:	f001 f923 	bl	80026e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	@ 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40004400 	.word	0x40004400
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020000 	.word	0x40020000

080014b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014bc:	f7ff fc94 	bl	8000de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c0:	480c      	ldr	r0, [pc, #48]	@ (80014f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014c2:	490d      	ldr	r1, [pc, #52]	@ (80014f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c4:	4a0d      	ldr	r2, [pc, #52]	@ (80014fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001504 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e6:	f006 f99d 	bl	8007824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ea:	f7ff fa3f 	bl	800096c <main>
  bx  lr    
 80014ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f8:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 80014fc:	08008390 	.word	0x08008390
  ldr r2, =_sbss
 8001500:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8001504:	2000453c 	.word	0x2000453c

08001508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC_IRQHandler>

0800150a <Controller_Excute>:
static watchModeState_t modeState = TIME_WATCH;
static button_t btnWatch;


void Controller_Excute()
{
 800150a:	b580      	push	{r7, lr}
 800150c:	af00      	add	r7, sp, #0
	Controller_Mode();
 800150e:	f000 f803 	bl	8001518 <Controller_Mode>
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <Controller_Mode>:
//		controlData.data = STOPWATCH_ACT;
//	}
//}

void Controller_Mode()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	if(!isQueEmpty(&btnQue))
 800151c:	4818      	ldr	r0, [pc, #96]	@ (8001580 <Controller_Mode+0x68>)
 800151e:	f000 f9e3 	bl	80018e8 <isQueEmpty>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d103      	bne.n	8001530 <Controller_Mode+0x18>
	{
	deQue(&btnQue, &btnWatch);
 8001528:	4916      	ldr	r1, [pc, #88]	@ (8001584 <Controller_Mode+0x6c>)
 800152a:	4815      	ldr	r0, [pc, #84]	@ (8001580 <Controller_Mode+0x68>)
 800152c:	f000 fa1a 	bl	8001964 <deQue>
	}
	switch(modeState)
 8001530:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <Controller_Mode+0x70>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <Controller_Mode+0x26>
 8001538:	2b01      	cmp	r3, #1
 800153a:	d00d      	beq.n	8001558 <Controller_Mode+0x40>
		}
		StopWatch_Excute(btnWatch);
		btnWatch.id = NOT;
		break;
	}
}
 800153c:	e01e      	b.n	800157c <Controller_Mode+0x64>
		if (btnWatch.id == BTN_MODE) {
 800153e:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <Controller_Mode+0x6c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d105      	bne.n	8001552 <Controller_Mode+0x3a>
			btnWatch.id = NOT;
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <Controller_Mode+0x6c>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
			modeState = S_STOP_WATCH;
 800154c:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <Controller_Mode+0x70>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
		TimeWatch_Excute();
 8001552:	f000 fb65 	bl	8001c20 <TimeWatch_Excute>
		break;
 8001556:	e011      	b.n	800157c <Controller_Mode+0x64>
		if (btnWatch.id == BTN_MODE) {
 8001558:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <Controller_Mode+0x6c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <Controller_Mode+0x54>
			btnWatch.id = NOT;
 8001560:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <Controller_Mode+0x6c>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
			modeState = S_TIME_WATCH;
 8001566:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <Controller_Mode+0x70>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
		StopWatch_Excute(btnWatch);
 800156c:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <Controller_Mode+0x6c>)
 800156e:	7818      	ldrb	r0, [r3, #0]
 8001570:	f000 faa0 	bl	8001ab4 <StopWatch_Excute>
		btnWatch.id = NOT;
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <Controller_Mode+0x6c>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
		break;
 800157a:	bf00      	nop
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000610 	.word	0x20000610
 8001584:	20000604 	.word	0x20000604
 8001588:	20000600 	.word	0x20000600

0800158c <Listener_Init>:

static button_t btnWatch = {0};


void Listener_Init()
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	Button_Init(&hBtnMode, GPIOB, GPIO_PIN_5);
 8001590:	2220      	movs	r2, #32
 8001592:	4908      	ldr	r1, [pc, #32]	@ (80015b4 <Listener_Init+0x28>)
 8001594:	4808      	ldr	r0, [pc, #32]	@ (80015b8 <Listener_Init+0x2c>)
 8001596:	f000 fb4f 	bl	8001c38 <Button_Init>
	Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_3);
 800159a:	2208      	movs	r2, #8
 800159c:	4905      	ldr	r1, [pc, #20]	@ (80015b4 <Listener_Init+0x28>)
 800159e:	4807      	ldr	r0, [pc, #28]	@ (80015bc <Listener_Init+0x30>)
 80015a0:	f000 fb4a 	bl	8001c38 <Button_Init>
	Button_Init(&hBtnClear, GPIOA, GPIO_PIN_10);
 80015a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015a8:	4905      	ldr	r1, [pc, #20]	@ (80015c0 <Listener_Init+0x34>)
 80015aa:	4806      	ldr	r0, [pc, #24]	@ (80015c4 <Listener_Init+0x38>)
 80015ac:	f000 fb44 	bl	8001c38 <Button_Init>

//	Que_Init(&uartRxQue);
//	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40020400 	.word	0x40020400
 80015b8:	2000064c 	.word	0x2000064c
 80015bc:	20000658 	.word	0x20000658
 80015c0:	40020000 	.word	0x40020000
 80015c4:	20000664 	.word	0x20000664

080015c8 <Listener_Excute>:

void Listener_Excute()
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	Listener_CheckButton();
 80015cc:	f000 f802 	bl	80015d4 <Listener_CheckButton>
//	Listener_CheckUart();
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <Listener_CheckButton>:

void Listener_CheckButton()
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	static uint32_t prevChkBtnTime = 0;
	uint32_t curTick = HAL_GetTick();
 80015da:	f000 ff5d 	bl	8002498 <HAL_GetTick>
 80015de:	6078      	str	r0, [r7, #4]
	if (curTick - prevChkBtnTime < 100) {
 80015e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <Listener_CheckButton+0x7c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b63      	cmp	r3, #99	@ 0x63
 80015ea:	d92c      	bls.n	8001646 <Listener_CheckButton+0x72>
		return;
	}
	prevChkBtnTime = curTick;
 80015ec:	4a18      	ldr	r2, [pc, #96]	@ (8001650 <Listener_CheckButton+0x7c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]



	if (Button_GetState(&hBtnMode) == ACT_RELEASED) {
 80015f2:	4818      	ldr	r0, [pc, #96]	@ (8001654 <Listener_CheckButton+0x80>)
 80015f4:	f000 fb36 	bl	8001c64 <Button_GetState>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d107      	bne.n	800160e <Listener_CheckButton+0x3a>
		btnWatch.id = BTN_MODE;
 80015fe:	4b16      	ldr	r3, [pc, #88]	@ (8001658 <Listener_CheckButton+0x84>)
 8001600:	2201      	movs	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
		enQue(&btnQue, &btnWatch);
 8001604:	4914      	ldr	r1, [pc, #80]	@ (8001658 <Listener_CheckButton+0x84>)
 8001606:	4815      	ldr	r0, [pc, #84]	@ (800165c <Listener_CheckButton+0x88>)
 8001608:	f000 f981 	bl	800190e <enQue>
 800160c:	e01c      	b.n	8001648 <Listener_CheckButton+0x74>
	}
	else if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) {
 800160e:	4814      	ldr	r0, [pc, #80]	@ (8001660 <Listener_CheckButton+0x8c>)
 8001610:	f000 fb28 	bl	8001c64 <Button_GetState>
 8001614:	4603      	mov	r3, r0
 8001616:	2b01      	cmp	r3, #1
 8001618:	d107      	bne.n	800162a <Listener_CheckButton+0x56>
		btnWatch.id = BTN_RUN_STOP;
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <Listener_CheckButton+0x84>)
 800161c:	2202      	movs	r2, #2
 800161e:	701a      	strb	r2, [r3, #0]
		enQue(&btnQue, &btnWatch);
 8001620:	490d      	ldr	r1, [pc, #52]	@ (8001658 <Listener_CheckButton+0x84>)
 8001622:	480e      	ldr	r0, [pc, #56]	@ (800165c <Listener_CheckButton+0x88>)
 8001624:	f000 f973 	bl	800190e <enQue>
 8001628:	e00e      	b.n	8001648 <Listener_CheckButton+0x74>
	}
	else if (Button_GetState(&hBtnClear) == ACT_PUSHED) {
 800162a:	480e      	ldr	r0, [pc, #56]	@ (8001664 <Listener_CheckButton+0x90>)
 800162c:	f000 fb1a 	bl	8001c64 <Button_GetState>
 8001630:	4603      	mov	r3, r0
 8001632:	2b01      	cmp	r3, #1
 8001634:	d108      	bne.n	8001648 <Listener_CheckButton+0x74>
		btnWatch.id = BTN_CLEAR;
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <Listener_CheckButton+0x84>)
 8001638:	2203      	movs	r2, #3
 800163a:	701a      	strb	r2, [r3, #0]
		enQue(&btnQue, &btnWatch);
 800163c:	4906      	ldr	r1, [pc, #24]	@ (8001658 <Listener_CheckButton+0x84>)
 800163e:	4807      	ldr	r0, [pc, #28]	@ (800165c <Listener_CheckButton+0x88>)
 8001640:	f000 f965 	bl	800190e <enQue>
 8001644:	e000      	b.n	8001648 <Listener_CheckButton+0x74>
		return;
 8001646:	bf00      	nop
	}
}
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000060c 	.word	0x2000060c
 8001654:	2000064c 	.word	0x2000064c
 8001658:	20000608 	.word	0x20000608
 800165c:	20000610 	.word	0x20000610
 8001660:	20000658 	.word	0x20000658
 8001664:	20000664 	.word	0x20000664

08001668 <Model_Init>:

Que_TypeDef btnQue;
Que_TypeDef stopWatchQue;

void Model_Init()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	Que_Init(&btnQue, sizeof(button_t));
 800166c:	2101      	movs	r1, #1
 800166e:	4804      	ldr	r0, [pc, #16]	@ (8001680 <Model_Init+0x18>)
 8001670:	f000 f8f6 	bl	8001860 <Que_Init>
	Que_Init(&stopWatchQue,sizeof(watch_t));
 8001674:	2106      	movs	r1, #6
 8001676:	4803      	ldr	r0, [pc, #12]	@ (8001684 <Model_Init+0x1c>)
 8001678:	f000 f8f2 	bl	8001860 <Que_Init>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000610 	.word	0x20000610
 8001684:	2000062c 	.word	0x2000062c

08001688 <Presenter_Init>:


static watch_t dispData = {TIME_WATCH, 12, 0, 0, 0};

void Presenter_Init()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 800168c:	4803      	ldr	r0, [pc, #12]	@ (800169c <Presenter_Init+0x14>)
 800168e:	f000 fd55 	bl	800213c <LCD_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8001692:	4803      	ldr	r0, [pc, #12]	@ (80016a0 <Presenter_Init+0x18>)
 8001694:	f002 fc68 	bl	8003f68 <HAL_TIM_Base_Start_IT>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200003b0 	.word	0x200003b0
 80016a0:	20000498 	.word	0x20000498

080016a4 <Presenter_Excute>:
{
	memcpy(&dispData, &watchData, sizeof(watch_t));
}

void Presenter_Excute()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	if(!isQueEmpty(&stopWatchQue))
 80016a8:	480d      	ldr	r0, [pc, #52]	@ (80016e0 <Presenter_Excute+0x3c>)
 80016aa:	f000 f91d 	bl	80018e8 <isQueEmpty>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d103      	bne.n	80016bc <Presenter_Excute+0x18>
	{

	deQue(&stopWatchQue, &dispData);
 80016b4:	490b      	ldr	r1, [pc, #44]	@ (80016e4 <Presenter_Excute+0x40>)
 80016b6:	480a      	ldr	r0, [pc, #40]	@ (80016e0 <Presenter_Excute+0x3c>)
 80016b8:	f000 f954 	bl	8001964 <deQue>
	}

	if (dispData.id == TIME_WATCH){
 80016bc:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <Presenter_Excute+0x40>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d105      	bne.n	80016d0 <Presenter_Excute+0x2c>
		Presenter_DispTimeWatch(dispData);
 80016c4:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <Presenter_Excute+0x40>)
 80016c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016ca:	f000 f80d 	bl	80016e8 <Presenter_DispTimeWatch>
	}
	else { // STOP_WATCH
		Presenter_DispStopWatch(dispData);
	}
}
 80016ce:	e004      	b.n	80016da <Presenter_Excute+0x36>
		Presenter_DispStopWatch(dispData);
 80016d0:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <Presenter_Excute+0x40>)
 80016d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016d6:	f000 f816 	bl	8001706 <Presenter_DispStopWatch>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000062c 	.word	0x2000062c
 80016e4:	20000004 	.word	0x20000004

080016e8 <Presenter_DispTimeWatch>:

void Presenter_DispTimeWatch(watch_t watchData)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	463b      	mov	r3, r7
 80016f0:	e883 0003 	stmia.w	r3, {r0, r1}
	Presenter_DispFndTimeWatch(watchData);
 80016f4:	463b      	mov	r3, r7
 80016f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016fa:	f000 f813 	bl	8001724 <Presenter_DispFndTimeWatch>
//	Presenter_DispMonitorTimeWatch(watchData);
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <Presenter_DispStopWatch>:

void Presenter_DispStopWatch(watch_t watchData)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	463b      	mov	r3, r7
 800170e:	e883 0003 	stmia.w	r3, {r0, r1}
	Presenter_DispFndStopWatch(watchData);
 8001712:	463b      	mov	r3, r7
 8001714:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001718:	f000 f830 	bl	800177c <Presenter_DispFndStopWatch>
//	Presenter_DispMonitorStopWatch(watchData);
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <Presenter_DispFndTimeWatch>:



void Presenter_DispFndTimeWatch(watch_t watchData)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	463b      	mov	r3, r7
 800172c:	e883 0003 	stmia.w	r3, {r0, r1}
	FND_WriteData(watchData.hour*100 + watchData.min);
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	461a      	mov	r2, r3
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	4413      	add	r3, r2
 8001738:	461a      	mov	r2, r3
 800173a:	0091      	lsls	r1, r2, #2
 800173c:	461a      	mov	r2, r3
 800173e:	460b      	mov	r3, r1
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	b29b      	uxth	r3, r3
 8001746:	78ba      	ldrb	r2, [r7, #2]
 8001748:	4413      	add	r3, r2
 800174a:	b29b      	uxth	r3, r3
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fb53 	bl	8001df8 <FND_WriteData>

	FND_WriteDp(FND_DP_1000|FND_DP_10|FND_DP_1, FND_DP_OFF);
 8001752:	2100      	movs	r1, #0
 8001754:	200b      	movs	r0, #11
 8001756:	f000 fb27 	bl	8001da8 <FND_WriteDp>

	if (watchData.msec < 500) {
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001760:	d204      	bcs.n	800176c <Presenter_DispFndTimeWatch+0x48>
		FND_WriteDp(FND_DP_100, FND_DP_ON);
 8001762:	2101      	movs	r1, #1
 8001764:	2004      	movs	r0, #4
 8001766:	f000 fb1f 	bl	8001da8 <FND_WriteDp>
	}
	else {
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
	}
}
 800176a:	e003      	b.n	8001774 <Presenter_DispFndTimeWatch+0x50>
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
 800176c:	2100      	movs	r1, #0
 800176e:	2004      	movs	r0, #4
 8001770:	f000 fb1a 	bl	8001da8 <FND_WriteDp>
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <Presenter_DispFndStopWatch>:

void Presenter_DispFndStopWatch(watch_t watchData)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	463b      	mov	r3, r7
 8001784:	e883 0003 	stmia.w	r3, {r0, r1}
	FND_WriteData((watchData.min % 10 * 1000) + (watchData.sec * 10) + (watchData.msec/100));
 8001788:	78ba      	ldrb	r2, [r7, #2]
 800178a:	4b27      	ldr	r3, [pc, #156]	@ (8001828 <Presenter_DispFndStopWatch+0xac>)
 800178c:	fba3 1302 	umull	r1, r3, r3, r2
 8001790:	08d9      	lsrs	r1, r3, #3
 8001792:	460b      	mov	r3, r1
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	0152      	lsls	r2, r2, #5
 80017a2:	1ad2      	subs	r2, r2, r3
 80017a4:	0092      	lsls	r2, r2, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	4619      	mov	r1, r3
 80017b0:	0089      	lsls	r1, r1, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	88bb      	ldrh	r3, [r7, #4]
 80017be:	491b      	ldr	r1, [pc, #108]	@ (800182c <Presenter_DispFndStopWatch+0xb0>)
 80017c0:	fba1 1303 	umull	r1, r3, r1, r3
 80017c4:	095b      	lsrs	r3, r3, #5
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fb13 	bl	8001df8 <FND_WriteData>

	FND_WriteDp(FND_DP_100|FND_DP_1, FND_DP_OFF);
 80017d2:	2100      	movs	r1, #0
 80017d4:	2005      	movs	r0, #5
 80017d6:	f000 fae7 	bl	8001da8 <FND_WriteDp>

	if (watchData.msec%100 < 50) {
 80017da:	88bb      	ldrh	r3, [r7, #4]
 80017dc:	4a13      	ldr	r2, [pc, #76]	@ (800182c <Presenter_DispFndStopWatch+0xb0>)
 80017de:	fba2 1203 	umull	r1, r2, r2, r3
 80017e2:	0952      	lsrs	r2, r2, #5
 80017e4:	2164      	movs	r1, #100	@ 0x64
 80017e6:	fb01 f202 	mul.w	r2, r1, r2
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	2b31      	cmp	r3, #49	@ 0x31
 80017f0:	d804      	bhi.n	80017fc <Presenter_DispFndStopWatch+0x80>
		FND_WriteDp(FND_DP_10, FND_DP_ON);
 80017f2:	2101      	movs	r1, #1
 80017f4:	2002      	movs	r0, #2
 80017f6:	f000 fad7 	bl	8001da8 <FND_WriteDp>
 80017fa:	e003      	b.n	8001804 <Presenter_DispFndStopWatch+0x88>
	}
	else {
		FND_WriteDp(FND_DP_10, FND_DP_OFF);
 80017fc:	2100      	movs	r1, #0
 80017fe:	2002      	movs	r0, #2
 8001800:	f000 fad2 	bl	8001da8 <FND_WriteDp>
	}

	if (watchData.msec < 500) {
 8001804:	88bb      	ldrh	r3, [r7, #4]
 8001806:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800180a:	d204      	bcs.n	8001816 <Presenter_DispFndStopWatch+0x9a>
		FND_WriteDp(FND_DP_1000, FND_DP_ON);
 800180c:	2101      	movs	r1, #1
 800180e:	2008      	movs	r0, #8
 8001810:	f000 faca 	bl	8001da8 <FND_WriteDp>
	}
	else {
		FND_WriteDp(FND_DP_1000, FND_DP_OFF);
	}
}
 8001814:	e003      	b.n	800181e <Presenter_DispFndStopWatch+0xa2>
		FND_WriteDp(FND_DP_1000, FND_DP_OFF);
 8001816:	2100      	movs	r1, #0
 8001818:	2008      	movs	r0, #8
 800181a:	f000 fac5 	bl	8001da8 <FND_WriteDp>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	cccccccd 	.word	0xcccccccd
 800182c:	51eb851f 	.word	0x51eb851f

08001830 <ap_main>:




int ap_main()
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
   HAL_TIM_Base_Start_IT(&htim2);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <ap_main+0x10>)
 8001836:	f002 fb97 	bl	8003f68 <HAL_TIM_Base_Start_IT>


   while(1)
 800183a:	bf00      	nop
 800183c:	e7fd      	b.n	800183a <ap_main+0xa>
 800183e:	bf00      	nop
 8001840:	20000498 	.word	0x20000498

08001844 <ap_init>:

   return 0;
}

void ap_init()
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
   MX_TIM4_Init();
 8001848:	f7ff fc26 	bl	8001098 <MX_TIM4_Init>
   Listener_Init();
 800184c:	f7ff fe9e 	bl	800158c <Listener_Init>
   Presenter_Init();
 8001850:	f7ff ff1a 	bl	8001688 <Presenter_Init>
   Sound_Init();
 8001854:	f000 f8b2 	bl	80019bc <Sound_Init>
   Sound_PowerOn();
 8001858:	f000 f8ba 	bl	80019d0 <Sound_PowerOn>

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <Que_Init>:




void Que_Init(Que_TypeDef *q, int size)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
	q->front = 0;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
	q -> typeSize = size;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	609a      	str	r2, [r3, #8]
	for (int i=0; i < QUE_SIZE; i++)
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	e00f      	b.n	80018a2 <Que_Init+0x42>
	{
		q -> queData[i] = malloc(q->typeSize);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	4618      	mov	r0, r3
 8001888:	f005 fd3c 	bl	8007304 <malloc>
 800188c:	4603      	mov	r3, r0
 800188e:	4619      	mov	r1, r3
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3302      	adds	r3, #2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	6059      	str	r1, [r3, #4]
	for (int i=0; i < QUE_SIZE; i++)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3301      	adds	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	ddec      	ble.n	8001882 <Que_Init+0x22>
	}
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <isQueFull>:
	{
		free(q->queData[i]);
	}
}

int isQueFull(Que_TypeDef *q) {
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]

	return q-> front == ((q->rear +1) % QUE_SIZE);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	3301      	adds	r3, #1
 80018c4:	4259      	negs	r1, r3
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	f001 0103 	and.w	r1, r1, #3
 80018ce:	bf58      	it	pl
 80018d0:	424b      	negpl	r3, r1
 80018d2:	429a      	cmp	r2, r3
 80018d4:	bf0c      	ite	eq
 80018d6:	2301      	moveq	r3, #1
 80018d8:	2300      	movne	r3, #0
 80018da:	b2db      	uxtb	r3, r3
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <isQueEmpty>:


int isQueEmpty(Que_TypeDef *q)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	return q-> front == q-> rear;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	bf0c      	ite	eq
 80018fc:	2301      	moveq	r3, #1
 80018fe:	2300      	movne	r3, #0
 8001900:	b2db      	uxtb	r3, r3
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <enQue>:

bool enQue(Que_TypeDef *q, void* pData)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
	if(isQueFull(q))
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ffca 	bl	80018b2 <isQueFull>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <enQue+0x1a>
	{
		return false;
 8001924:	2300      	movs	r3, #0
 8001926:	e019      	b.n	800195c <enQue+0x4e>
	}
	memcpy(q->queData[q->rear], pData, q->typeSize);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	3302      	adds	r3, #2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	6858      	ldr	r0, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	461a      	mov	r2, r3
 800193c:	6839      	ldr	r1, [r7, #0]
 800193e:	f005 ff98 	bl	8007872 <memcpy>
	q-> rear = (q->rear+1) % QUE_SIZE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	3301      	adds	r3, #1
 8001948:	425a      	negs	r2, r3
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	f002 0203 	and.w	r2, r2, #3
 8001952:	bf58      	it	pl
 8001954:	4253      	negpl	r3, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6053      	str	r3, [r2, #4]
	return true;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <deQue>:

bool deQue(Que_TypeDef *q, void *pData)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	if(isQueEmpty(q))
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffba 	bl	80018e8 <isQueEmpty>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <deQue+0x1a>
	{
		return false;
 800197a:	2300      	movs	r3, #0
 800197c:	e019      	b.n	80019b2 <deQue+0x4e>
	}
	memcpy(pData, q->queData[ q-> front], q->typeSize);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	3302      	adds	r3, #2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	461a      	mov	r2, r3
 8001992:	6838      	ldr	r0, [r7, #0]
 8001994:	f005 ff6d 	bl	8007872 <memcpy>

q-> front = (q-> front+1) % QUE_SIZE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	425a      	negs	r2, r3
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	f002 0203 	and.w	r2, r2, #3
 80019a8:	bf58      	it	pl
 80019aa:	4253      	negpl	r3, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6013      	str	r3, [r2, #0]
return true;
 80019b0:	2301      	movs	r3, #1
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <Sound_Init>:
 */

#include "sound.h"

void Sound_Init()
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
 Buzzer_Init(&htim3, TIM_CHANNEL_1);
 80019c0:	2100      	movs	r1, #0
 80019c2:	4802      	ldr	r0, [pc, #8]	@ (80019cc <Sound_Init+0x10>)
 80019c4:	f000 fc98 	bl	80022f8 <Buzzer_Init>
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200004e0 	.word	0x200004e0

080019d0 <Sound_PowerOn>:

void Sound_PowerOn()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	Buzzer_SetFreq(1047);
 80019d4:	f240 4017 	movw	r0, #1047	@ 0x417
 80019d8:	f000 fca4 	bl	8002324 <Buzzer_SetFreq>
	Buzzer_Start();
 80019dc:	f000 fd06 	bl	80023ec <Buzzer_Start>
	HAL_Delay(100);
 80019e0:	2064      	movs	r0, #100	@ 0x64
 80019e2:	f000 fd65 	bl	80024b0 <HAL_Delay>
	Buzzer_SetFreq(1319);
 80019e6:	f240 5027 	movw	r0, #1319	@ 0x527
 80019ea:	f000 fc9b 	bl	8002324 <Buzzer_SetFreq>
	HAL_Delay(100);
 80019ee:	2064      	movs	r0, #100	@ 0x64
 80019f0:	f000 fd5e 	bl	80024b0 <HAL_Delay>
	Buzzer_SetFreq(1568);
 80019f4:	f44f 60c4 	mov.w	r0, #1568	@ 0x620
 80019f8:	f000 fc94 	bl	8002324 <Buzzer_SetFreq>
	HAL_Delay(100);
 80019fc:	2064      	movs	r0, #100	@ 0x64
 80019fe:	f000 fd57 	bl	80024b0 <HAL_Delay>
	Buzzer_SetFreq(2039);
 8001a02:	f240 70f7 	movw	r0, #2039	@ 0x7f7
 8001a06:	f000 fc8d 	bl	8002324 <Buzzer_SetFreq>
	HAL_Delay(100);
 8001a0a:	2064      	movs	r0, #100	@ 0x64
 8001a0c:	f000 fd50 	bl	80024b0 <HAL_Delay>
	Buzzer_Stop();
 8001a10:	f000 fcfc 	bl	800240c <Buzzer_Stop>
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <StopWatch_IncTimeCallBack>:
extern inputData_TypeDef controlData;
static stopWatchState_t stopWatchState = STOP;
static watch_t stopWatch = {STOP_WATCH, 12, 0, 0, 0};

void StopWatch_IncTimeCallBack()
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	if (stopWatchState == RUN) {
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <StopWatch_IncTimeCallBack+0x14>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <StopWatch_IncTimeCallBack+0x10>
		StopWatch_IncTime();
 8001a24:	f000 f804 	bl	8001a30 <StopWatch_IncTime>
	}
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000648 	.word	0x20000648

08001a30 <StopWatch_IncTime>:

void StopWatch_IncTime()
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
	if (stopWatch.msec < 1000-1) {
 8001a34:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001a36:	889b      	ldrh	r3, [r3, #4]
 8001a38:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d806      	bhi.n	8001a4e <StopWatch_IncTime+0x1e>
		stopWatch.msec++;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001a42:	889b      	ldrh	r3, [r3, #4]
 8001a44:	3301      	adds	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001a4a:	809a      	strh	r2, [r3, #4]
		return;
 8001a4c:	e02c      	b.n	8001aa8 <StopWatch_IncTime+0x78>
	}
	stopWatch.msec = 0;
 8001a4e:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	809a      	strh	r2, [r3, #4]

	if (stopWatch.sec < 60-1) {
 8001a54:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001a56:	78db      	ldrb	r3, [r3, #3]
 8001a58:	2b3a      	cmp	r3, #58	@ 0x3a
 8001a5a:	d806      	bhi.n	8001a6a <StopWatch_IncTime+0x3a>
		stopWatch.sec++;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001a5e:	78db      	ldrb	r3, [r3, #3]
 8001a60:	3301      	adds	r3, #1
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001a66:	70da      	strb	r2, [r3, #3]
		return;
 8001a68:	e01e      	b.n	8001aa8 <StopWatch_IncTime+0x78>
	}
	stopWatch.sec = 0;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	70da      	strb	r2, [r3, #3]

	if (stopWatch.min < 60-1) {
 8001a70:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001a72:	789b      	ldrb	r3, [r3, #2]
 8001a74:	2b3a      	cmp	r3, #58	@ 0x3a
 8001a76:	d806      	bhi.n	8001a86 <StopWatch_IncTime+0x56>
		stopWatch.min++;
 8001a78:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001a7a:	789b      	ldrb	r3, [r3, #2]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001a82:	709a      	strb	r2, [r3, #2]
		return;
 8001a84:	e010      	b.n	8001aa8 <StopWatch_IncTime+0x78>
	}
	stopWatch.min = 0;
 8001a86:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	709a      	strb	r2, [r3, #2]

	if (stopWatch.hour < 24-1) {
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001a8e:	785b      	ldrb	r3, [r3, #1]
 8001a90:	2b16      	cmp	r3, #22
 8001a92:	d806      	bhi.n	8001aa2 <StopWatch_IncTime+0x72>
		stopWatch.hour++;
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001a96:	785b      	ldrb	r3, [r3, #1]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001a9e:	705a      	strb	r2, [r3, #1]
		return;
 8001aa0:	e002      	b.n	8001aa8 <StopWatch_IncTime+0x78>
	}
	stopWatch.hour = 0;
 8001aa2:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <StopWatch_IncTime+0x80>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	705a      	strb	r2, [r3, #1]
}
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	2000000c 	.word	0x2000000c

08001ab4 <StopWatch_Excute>:

void StopWatch_Excute(button_t watch)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	7138      	strb	r0, [r7, #4]
	switch (stopWatchState)
 8001abc:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <StopWatch_Excute+0x44>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d00e      	beq.n	8001ae2 <StopWatch_Excute+0x2e>
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	dc0f      	bgt.n	8001ae8 <StopWatch_Excute+0x34>
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <StopWatch_Excute+0x1e>
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d004      	beq.n	8001ada <StopWatch_Excute+0x26>
 8001ad0:	e00a      	b.n	8001ae8 <StopWatch_Excute+0x34>
	{
	case STOP:
		StopWatch_Stop(watch);
 8001ad2:	7938      	ldrb	r0, [r7, #4]
 8001ad4:	f000 f816 	bl	8001b04 <StopWatch_Stop>
		break;
 8001ad8:	e006      	b.n	8001ae8 <StopWatch_Excute+0x34>
	case RUN:
		StopWatch_Run(watch);
 8001ada:	7938      	ldrb	r0, [r7, #4]
 8001adc:	f000 f830 	bl	8001b40 <StopWatch_Run>
		break;
 8001ae0:	e002      	b.n	8001ae8 <StopWatch_Excute+0x34>
	case CLEAR:
		StopWatch_Clear();
 8001ae2:	f000 f841 	bl	8001b68 <StopWatch_Clear>
		break;
 8001ae6:	bf00      	nop
	}
    enQue(&stopWatchQue, &stopWatch);
 8001ae8:	4904      	ldr	r1, [pc, #16]	@ (8001afc <StopWatch_Excute+0x48>)
 8001aea:	4805      	ldr	r0, [pc, #20]	@ (8001b00 <StopWatch_Excute+0x4c>)
 8001aec:	f7ff ff0f 	bl	800190e <enQue>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000648 	.word	0x20000648
 8001afc:	2000000c 	.word	0x2000000c
 8001b00:	2000062c 	.word	0x2000062c

08001b04 <StopWatch_Stop>:

void StopWatch_Stop(button_t watch)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	7138      	strb	r0, [r7, #4]
	if (watch.id == BTN_RUN_STOP) {
 8001b0c:	793b      	ldrb	r3, [r7, #4]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d105      	bne.n	8001b1e <StopWatch_Stop+0x1a>
		watch.id = NOT;
 8001b12:	2300      	movs	r3, #0
 8001b14:	713b      	strb	r3, [r7, #4]
		stopWatchState = RUN;
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <StopWatch_Stop+0x38>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
	else if (watch.id == BTN_CLEAR) {
		watch.id = NOT;
		stopWatchState = CLEAR;
	}
	//FND_WriteData((stopWatch.min % 10 * 1000) + (stopWatch.sec * 10) + (stopWatch.msec/100));
}
 8001b1c:	e007      	b.n	8001b2e <StopWatch_Stop+0x2a>
	else if (watch.id == BTN_CLEAR) {
 8001b1e:	793b      	ldrb	r3, [r7, #4]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d104      	bne.n	8001b2e <StopWatch_Stop+0x2a>
		watch.id = NOT;
 8001b24:	2300      	movs	r3, #0
 8001b26:	713b      	strb	r3, [r7, #4]
		stopWatchState = CLEAR;
 8001b28:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <StopWatch_Stop+0x38>)
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	701a      	strb	r2, [r3, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000648 	.word	0x20000648

08001b40 <StopWatch_Run>:

void StopWatch_Run(button_t watch)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	7138      	strb	r0, [r7, #4]
	if (watch.id == STOPWATCH_RUN_STOP) {
 8001b48:	793b      	ldrb	r3, [r7, #4]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d104      	bne.n	8001b58 <StopWatch_Run+0x18>
		watch.id = NOT;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	713b      	strb	r3, [r7, #4]
		stopWatchState = STOP;
 8001b52:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <StopWatch_Run+0x24>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
	}

}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	20000648 	.word	0x20000648

08001b68 <StopWatch_Clear>:

void StopWatch_Clear()
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
	stopWatchState = STOP;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <StopWatch_Clear+0x2c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
	stopWatch.msec = 0;
 8001b72:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <StopWatch_Clear+0x30>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	809a      	strh	r2, [r3, #4]
	stopWatch.sec = 0;
 8001b78:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <StopWatch_Clear+0x30>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	70da      	strb	r2, [r3, #3]
	stopWatch.min = 0;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <StopWatch_Clear+0x30>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	709a      	strb	r2, [r3, #2]
	stopWatch.hour = 0;
 8001b84:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <StopWatch_Clear+0x30>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	705a      	strb	r2, [r3, #1]

	//FND_WriteData((stopWatch.min % 10 * 1000) + (stopWatch.sec * 10) + (stopWatch.msec/100));
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	20000648 	.word	0x20000648
 8001b98:	2000000c 	.word	0x2000000c

08001b9c <TimeWatch_IncTimeCallBack>:
#include "my_queue.h"

static watch_t timeWatch = {TIME_WATCH, 12,0,0,0};

void TimeWatch_IncTimeCallBack()
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
	if (timeWatch.msec < 1000-1) {
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001ba2:	889b      	ldrh	r3, [r3, #4]
 8001ba4:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d806      	bhi.n	8001bba <TimeWatch_IncTimeCallBack+0x1e>
		timeWatch.msec++;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001bae:	889b      	ldrh	r3, [r3, #4]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001bb6:	809a      	strh	r2, [r3, #4]
		return;
 8001bb8:	e02c      	b.n	8001c14 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.msec = 0;
 8001bba:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	809a      	strh	r2, [r3, #4]

	if (timeWatch.sec < 60-1) {
 8001bc0:	4b16      	ldr	r3, [pc, #88]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001bc2:	78db      	ldrb	r3, [r3, #3]
 8001bc4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001bc6:	d806      	bhi.n	8001bd6 <TimeWatch_IncTimeCallBack+0x3a>
		timeWatch.sec++;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001bca:	78db      	ldrb	r3, [r3, #3]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001bd2:	70da      	strb	r2, [r3, #3]
		return;
 8001bd4:	e01e      	b.n	8001c14 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.sec = 0;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	70da      	strb	r2, [r3, #3]

	if (timeWatch.min < 60-1) {
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001bde:	789b      	ldrb	r3, [r3, #2]
 8001be0:	2b3a      	cmp	r3, #58	@ 0x3a
 8001be2:	d806      	bhi.n	8001bf2 <TimeWatch_IncTimeCallBack+0x56>
		timeWatch.min++;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001be6:	789b      	ldrb	r3, [r3, #2]
 8001be8:	3301      	adds	r3, #1
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001bee:	709a      	strb	r2, [r3, #2]
		return;
 8001bf0:	e010      	b.n	8001c14 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.min = 0;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	709a      	strb	r2, [r3, #2]

	if (timeWatch.hour < 24-1) {
 8001bf8:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001bfa:	785b      	ldrb	r3, [r3, #1]
 8001bfc:	2b16      	cmp	r3, #22
 8001bfe:	d806      	bhi.n	8001c0e <TimeWatch_IncTimeCallBack+0x72>
		timeWatch.hour++;
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	3301      	adds	r3, #1
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001c0a:	705a      	strb	r2, [r3, #1]
		return;
 8001c0c:	e002      	b.n	8001c14 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.hour = 0;
 8001c0e:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <TimeWatch_IncTimeCallBack+0x80>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	705a      	strb	r2, [r3, #1]
}
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	20000014 	.word	0x20000014

08001c20 <TimeWatch_Excute>:

void TimeWatch_Excute()
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	enQue(&stopWatchQue, &timeWatch);
 8001c24:	4902      	ldr	r1, [pc, #8]	@ (8001c30 <TimeWatch_Excute+0x10>)
 8001c26:	4803      	ldr	r0, [pc, #12]	@ (8001c34 <TimeWatch_Excute+0x14>)
 8001c28:	f7ff fe71 	bl	800190e <enQue>
//		FND_WriteDp(FND_DP_100, FND_DP_ON);
//	}
//	else {
//		FND_WriteDp(FND_DP_100, FND_DP_OFF);
//	}
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000014 	.word	0x20000014
 8001c34:	2000062c 	.word	0x2000062c

08001c38 <Button_Init>:
Button_Handler_t hBtnRunStop;
Button_Handler_t hBtnClear;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	4613      	mov	r3, r2
 8001c44:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	88fa      	ldrh	r2, [r7, #6]
 8001c50:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	609a      	str	r2, [r3, #8]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); // normal state is high.
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	889b      	ldrh	r3, [r3, #4]
 8001c74:	4619      	mov	r1, r3
 8001c76:	4610      	mov	r0, r2
 8001c78:	f000 ff68 	bl	8002b4c <HAL_GPIO_ReadPin>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60fb      	str	r3, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d10a      	bne.n	8001c9e <Button_GetState+0x3a>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d107      	bne.n	8001c9e <Button_GetState+0x3a>
		HAL_Delay(2); // debounce
 8001c8e:	2002      	movs	r0, #2
 8001c90:	f000 fc0e 	bl	80024b0 <HAL_Delay>
		hbtn->prevState = PUSHED;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00f      	b.n	8001cbe <Button_GetState+0x5a>
	}
	else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10a      	bne.n	8001cbc <Button_GetState+0x58>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d107      	bne.n	8001cbc <Button_GetState+0x58>
		HAL_Delay(2); // debounce
 8001cac:	2002      	movs	r0, #2
 8001cae:	f000 fbff 	bl	80024b0 <HAL_Delay>
		hbtn->prevState = RELEASED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e000      	b.n	8001cbe <Button_GetState+0x5a>
	}
	return NO_ACT;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <DHT11_EXTI_Callback>:
//   }
//   return 0;
}

void DHT11_EXTI_Callback()
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
   uint32_t now = __HAL_TIM_GET_COUNTER(&htim4);
 8001cce:	4b30      	ldr	r3, [pc, #192]	@ (8001d90 <DHT11_EXTI_Callback+0xc8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	60fb      	str	r3, [r7, #12]
   uint32_t duration = now - last_time;
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001d94 <DHT11_EXTI_Callback+0xcc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	60bb      	str	r3, [r7, #8]
   last_time = now;
 8001ce0:	4a2c      	ldr	r2, [pc, #176]	@ (8001d94 <DHT11_EXTI_Callback+0xcc>)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6013      	str	r3, [r2, #0]

   if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET)
 8001ce6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cea:	482b      	ldr	r0, [pc, #172]	@ (8001d98 <DHT11_EXTI_Callback+0xd0>)
 8001cec:	f000 ff2e 	bl	8002b4c <HAL_GPIO_ReadPin>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d047      	beq.n	8001d86 <DHT11_EXTI_Callback+0xbe>
      // Rising edge
   }
   else
   {
      // Falling edge (bit 해석)
      if (bit_index == 0) {
 8001cf6:	4b29      	ldr	r3, [pc, #164]	@ (8001d9c <DHT11_EXTI_Callback+0xd4>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10a      	bne.n	8001d16 <DHT11_EXTI_Callback+0x4e>
         if (duration < 70 || duration > 90) {
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b45      	cmp	r3, #69	@ 0x45
 8001d04:	d902      	bls.n	8001d0c <DHT11_EXTI_Callback+0x44>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b5a      	cmp	r3, #90	@ 0x5a
 8001d0a:	d92d      	bls.n	8001d68 <DHT11_EXTI_Callback+0xa0>
            printf("DHT11 LOW : %lu\n", duration);
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	4824      	ldr	r0, [pc, #144]	@ (8001da0 <DHT11_EXTI_Callback+0xd8>)
 8001d10:	f005 fc70 	bl	80075f4 <iprintf>
 8001d14:	e028      	b.n	8001d68 <DHT11_EXTI_Callback+0xa0>
         }
//      } else if (bit_index == 1) {
//         if (duration < 70 || duration > 90) {
//            printf("DHT11 HIGH : %lu \n", duration);
//         }
      } else if (bit_index >= 1 && bit_index <= 40) {
 8001d16:	4b21      	ldr	r3, [pc, #132]	@ (8001d9c <DHT11_EXTI_Callback+0xd4>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d023      	beq.n	8001d68 <DHT11_EXTI_Callback+0xa0>
 8001d20:	4b1e      	ldr	r3, [pc, #120]	@ (8001d9c <DHT11_EXTI_Callback+0xd4>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b28      	cmp	r3, #40	@ 0x28
 8001d28:	d81e      	bhi.n	8001d68 <DHT11_EXTI_Callback+0xa0>
         // bit_index 1~40 이 실제 40bit 데이터
         uint8_t byte_idx = (bit_index - 1) / 8;
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d9c <DHT11_EXTI_Callback+0xd4>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da00      	bge.n	8001d38 <DHT11_EXTI_Callback+0x70>
 8001d36:	3307      	adds	r3, #7
 8001d38:	10db      	asrs	r3, r3, #3
 8001d3a:	71fb      	strb	r3, [r7, #7]

         data[byte_idx] <<= 1;
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	4a19      	ldr	r2, [pc, #100]	@ (8001da4 <DHT11_EXTI_Callback+0xdc>)
 8001d40:	5cd3      	ldrb	r3, [r2, r3]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	0052      	lsls	r2, r2, #1
 8001d48:	b2d1      	uxtb	r1, r2
 8001d4a:	4a16      	ldr	r2, [pc, #88]	@ (8001da4 <DHT11_EXTI_Callback+0xdc>)
 8001d4c:	54d1      	strb	r1, [r2, r3]

         if (duration > 40)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b28      	cmp	r3, #40	@ 0x28
 8001d52:	d909      	bls.n	8001d68 <DHT11_EXTI_Callback+0xa0>
            data[byte_idx] |= 1;
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	4a13      	ldr	r2, [pc, #76]	@ (8001da4 <DHT11_EXTI_Callback+0xdc>)
 8001d58:	5cd3      	ldrb	r3, [r2, r3]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	b2d1      	uxtb	r1, r2
 8001d64:	4a0f      	ldr	r2, [pc, #60]	@ (8001da4 <DHT11_EXTI_Callback+0xdc>)
 8001d66:	54d1      	strb	r1, [r2, r3]

      }
      bit_index++;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <DHT11_EXTI_Callback+0xd4>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <DHT11_EXTI_Callback+0xd4>)
 8001d74:	701a      	strb	r2, [r3, #0]

      //40비트 수신 완료후 외부 인터럽트 비활성화
      if (bit_index > 40)
 8001d76:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <DHT11_EXTI_Callback+0xd4>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b28      	cmp	r3, #40	@ 0x28
 8001d7e:	d902      	bls.n	8001d86 <DHT11_EXTI_Callback+0xbe>
      {
         HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001d80:	2028      	movs	r0, #40	@ 0x28
 8001d82:	f000 fcbf 	bl	8002704 <HAL_NVIC_DisableIRQ>
      }
   }
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000528 	.word	0x20000528
 8001d94:	20000670 	.word	0x20000670
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	20000674 	.word	0x20000674
 8001da0:	0800830c 	.word	0x0800830c
 8001da4:	20000678 	.word	0x20000678

08001da8 <FND_WriteDp>:
static uint8_t fndDispDp = 0;   // fnd dp data, xxxx1111 -> xxxx_dp1000_dp100_dp10_dp1



void FND_WriteDp(uint8_t dpData, uint8_t dpState)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	460a      	mov	r2, r1
 8001db2:	71fb      	strb	r3, [r7, #7]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71bb      	strb	r3, [r7, #6]
	if (dpState == FND_DP_ON)
 8001db8:	79bb      	ldrb	r3, [r7, #6]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d107      	bne.n	8001dce <FND_WriteDp+0x26>
		fndDispDp |= dpData;
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <FND_WriteDp+0x4c>)
 8001dc0:	781a      	ldrb	r2, [r3, #0]
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001df4 <FND_WriteDp+0x4c>)
 8001dca:	701a      	strb	r2, [r3, #0]
	else
		fndDispDp &= ~dpData;
}
 8001dcc:	e00b      	b.n	8001de6 <FND_WriteDp+0x3e>
		fndDispDp &= ~dpData;
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	b25a      	sxtb	r2, r3
 8001dd6:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <FND_WriteDp+0x4c>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <FND_WriteDp+0x4c>)
 8001de4:	701a      	strb	r2, [r3, #0]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000680 	.word	0x20000680

08001df8 <FND_WriteData>:

// write fndDispNum
void FND_WriteData(uint16_t data)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 8001e02:	4a04      	ldr	r2, [pc, #16]	@ (8001e14 <FND_WriteData+0x1c>)
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	8013      	strh	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	2000067e 	.word	0x2000067e

08001e18 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 8001e1c:	4b80      	ldr	r3, [pc, #512]	@ (8002020 <FND_DispDataCallBack+0x208>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	425a      	negs	r2, r3
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	f002 0207 	and.w	r2, r2, #7
 8001e2c:	bf58      	it	pl
 8001e2e:	4253      	negpl	r3, r2
 8001e30:	4a7b      	ldr	r2, [pc, #492]	@ (8002020 <FND_DispDataCallBack+0x208>)
 8001e32:	6013      	str	r3, [r2, #0]

	switch(digitPos)
 8001e34:	4b7a      	ldr	r3, [pc, #488]	@ (8002020 <FND_DispDataCallBack+0x208>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b07      	cmp	r3, #7
 8001e3a:	f200 80ee 	bhi.w	800201a <FND_DispDataCallBack+0x202>
 8001e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e44 <FND_DispDataCallBack+0x2c>)
 8001e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e44:	08001e65 	.word	0x08001e65
 8001e48:	08001e93 	.word	0x08001e93
 8001e4c:	08001ecb 	.word	0x08001ecb
 8001e50:	08001f03 	.word	0x08001f03
 8001e54:	08001f3b 	.word	0x08001f3b
 8001e58:	08001f73 	.word	0x08001f73
 8001e5c:	08001fab 	.word	0x08001fab
 8001e60:	08001fe3 	.word	0x08001fe3
	{
	case DIGIT_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001e64:	f000 f900 	bl	8002068 <FND_DispOffAll>
		FND_DispDigit(fndDispNum%10);
 8001e68:	4b6e      	ldr	r3, [pc, #440]	@ (8002024 <FND_DispDataCallBack+0x20c>)
 8001e6a:	881a      	ldrh	r2, [r3, #0]
 8001e6c:	4b6e      	ldr	r3, [pc, #440]	@ (8002028 <FND_DispDataCallBack+0x210>)
 8001e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e72:	08d9      	lsrs	r1, r3, #3
 8001e74:	460b      	mov	r3, r1
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 f913 	bl	80020ac <FND_DispDigit>
		FND_DispOn(digitPos);
 8001e86:	4b66      	ldr	r3, [pc, #408]	@ (8002020 <FND_DispDataCallBack+0x208>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f8d4 	bl	8002038 <FND_DispOn>
		break;
 8001e90:	e0c3      	b.n	800201a <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001e92:	f000 f8e9 	bl	8002068 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/10%10);
 8001e96:	4b63      	ldr	r3, [pc, #396]	@ (8002024 <FND_DispDataCallBack+0x20c>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	4a63      	ldr	r2, [pc, #396]	@ (8002028 <FND_DispDataCallBack+0x210>)
 8001e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea0:	08db      	lsrs	r3, r3, #3
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	4b60      	ldr	r3, [pc, #384]	@ (8002028 <FND_DispDataCallBack+0x210>)
 8001ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8001eaa:	08d9      	lsrs	r1, r3, #3
 8001eac:	460b      	mov	r3, r1
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 f8f7 	bl	80020ac <FND_DispDigit>
		FND_DispOn(digitPos);
 8001ebe:	4b58      	ldr	r3, [pc, #352]	@ (8002020 <FND_DispDataCallBack+0x208>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f8b8 	bl	8002038 <FND_DispOn>
		break;
 8001ec8:	e0a7      	b.n	800201a <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001eca:	f000 f8cd 	bl	8002068 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/100%10);
 8001ece:	4b55      	ldr	r3, [pc, #340]	@ (8002024 <FND_DispDataCallBack+0x20c>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	4a56      	ldr	r2, [pc, #344]	@ (800202c <FND_DispDataCallBack+0x214>)
 8001ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed8:	095b      	lsrs	r3, r3, #5
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	4b52      	ldr	r3, [pc, #328]	@ (8002028 <FND_DispDataCallBack+0x210>)
 8001ede:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee2:	08d9      	lsrs	r1, r3, #3
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 f8db 	bl	80020ac <FND_DispDigit>
		FND_DispOn(digitPos);
 8001ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8002020 <FND_DispDataCallBack+0x208>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f89c 	bl	8002038 <FND_DispOn>
		break;
 8001f00:	e08b      	b.n	800201a <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001f02:	f000 f8b1 	bl	8002068 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/1000%10);
 8001f06:	4b47      	ldr	r3, [pc, #284]	@ (8002024 <FND_DispDataCallBack+0x20c>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	4a49      	ldr	r2, [pc, #292]	@ (8002030 <FND_DispDataCallBack+0x218>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	099b      	lsrs	r3, r3, #6
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b44      	ldr	r3, [pc, #272]	@ (8002028 <FND_DispDataCallBack+0x210>)
 8001f16:	fba3 1302 	umull	r1, r3, r3, r2
 8001f1a:	08d9      	lsrs	r1, r3, #3
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f8bf 	bl	80020ac <FND_DispDigit>
		FND_DispOn(digitPos);
 8001f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8002020 <FND_DispDataCallBack+0x208>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f880 	bl	8002038 <FND_DispOn>
		break;
 8001f38:	e06f      	b.n	800201a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001f3a:	f000 f895 	bl	8002068 <FND_DispOffAll>
		if (fndDispDp & (1<<0)){
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002034 <FND_DispDataCallBack+0x21c>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 8001f4a:	200a      	movs	r0, #10
 8001f4c:	f000 f8ae 	bl	80020ac <FND_DispDigit>
 8001f50:	e002      	b.n	8001f58 <FND_DispDataCallBack+0x140>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8001f52:	200b      	movs	r0, #11
 8001f54:	f000 f8aa 	bl	80020ac <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001f58:	4b31      	ldr	r3, [pc, #196]	@ (8002020 <FND_DispDataCallBack+0x208>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	425a      	negs	r2, r3
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	f002 0203 	and.w	r2, r2, #3
 8001f66:	bf58      	it	pl
 8001f68:	4253      	negpl	r3, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f864 	bl	8002038 <FND_DispOn>
		break;
 8001f70:	e053      	b.n	800201a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001f72:	f000 f879 	bl	8002068 <FND_DispOffAll>
		if (fndDispDp & (1<<1)){
 8001f76:	4b2f      	ldr	r3, [pc, #188]	@ (8002034 <FND_DispDataCallBack+0x21c>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 8001f82:	200a      	movs	r0, #10
 8001f84:	f000 f892 	bl	80020ac <FND_DispDigit>
 8001f88:	e002      	b.n	8001f90 <FND_DispDataCallBack+0x178>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8001f8a:	200b      	movs	r0, #11
 8001f8c:	f000 f88e 	bl	80020ac <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001f90:	4b23      	ldr	r3, [pc, #140]	@ (8002020 <FND_DispDataCallBack+0x208>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	425a      	negs	r2, r3
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	f002 0203 	and.w	r2, r2, #3
 8001f9e:	bf58      	it	pl
 8001fa0:	4253      	negpl	r3, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f848 	bl	8002038 <FND_DispOn>
		break;
 8001fa8:	e037      	b.n	800201a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001faa:	f000 f85d 	bl	8002068 <FND_DispOffAll>
		if (fndDispDp & (1<<2)){
 8001fae:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <FND_DispDataCallBack+0x21c>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 8001fba:	200a      	movs	r0, #10
 8001fbc:	f000 f876 	bl	80020ac <FND_DispDigit>
 8001fc0:	e002      	b.n	8001fc8 <FND_DispDataCallBack+0x1b0>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8001fc2:	200b      	movs	r0, #11
 8001fc4:	f000 f872 	bl	80020ac <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001fc8:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <FND_DispDataCallBack+0x208>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	425a      	negs	r2, r3
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	f002 0203 	and.w	r2, r2, #3
 8001fd6:	bf58      	it	pl
 8001fd8:	4253      	negpl	r3, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f82c 	bl	8002038 <FND_DispOn>
		break;
 8001fe0:	e01b      	b.n	800201a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001fe2:	f000 f841 	bl	8002068 <FND_DispOffAll>
		if (fndDispDp & (1<<3)){
 8001fe6:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <FND_DispDataCallBack+0x21c>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 8001ff2:	200a      	movs	r0, #10
 8001ff4:	f000 f85a 	bl	80020ac <FND_DispDigit>
 8001ff8:	e002      	b.n	8002000 <FND_DispDataCallBack+0x1e8>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8001ffa:	200b      	movs	r0, #11
 8001ffc:	f000 f856 	bl	80020ac <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002000:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <FND_DispDataCallBack+0x208>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	425a      	negs	r2, r3
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	bf58      	it	pl
 8002010:	4253      	negpl	r3, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f810 	bl	8002038 <FND_DispOn>
		break;
 8002018:	bf00      	nop
	}
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000684 	.word	0x20000684
 8002024:	2000067e 	.word	0x2000067e
 8002028:	cccccccd 	.word	0xcccccccd
 800202c:	51eb851f 	.word	0x51eb851f
 8002030:	10624dd3 	.word	0x10624dd3
 8002034:	20000680 	.word	0x20000680

08002038 <FND_DispOn>:
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
}
*/

void FND_DispOn(int fndPos)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, RESET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8002040:	4a08      	ldr	r2, [pc, #32]	@ (8002064 <FND_DispOn+0x2c>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002048:	4a06      	ldr	r2, [pc, #24]	@ (8002064 <FND_DispOn+0x2c>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	b29b      	uxth	r3, r3
 8002054:	2200      	movs	r2, #0
 8002056:	4619      	mov	r1, r3
 8002058:	f000 fd90 	bl	8002b7c <HAL_GPIO_WritePin>
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	2000001c 	.word	0x2000001c

08002068 <FND_DispOffAll>:

void FND_DispOffAll()
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++) {
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	e010      	b.n	8002096 <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 8002074:	4a0c      	ldr	r2, [pc, #48]	@ (80020a8 <FND_DispOffAll+0x40>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800207c:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <FND_DispOffAll+0x40>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	b29b      	uxth	r3, r3
 8002088:	2201      	movs	r2, #1
 800208a:	4619      	mov	r1, r3
 800208c:	f000 fd76 	bl	8002b7c <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3301      	adds	r3, #1
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b03      	cmp	r3, #3
 800209a:	ddeb      	ble.n	8002074 <FND_DispOffAll+0xc>
	}
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000001c 	.word	0x2000001c

080020ac <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 80020b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002134 <FND_DispDigit+0x88>)
 80020b8:	f107 0308 	add.w	r3, r7, #8
 80020bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80020be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    0x6F,  // 9 => 01101111
	    0x80,  // 10(dp) => 10000000
	    0x00,  // 11(off)=> 00000000
	};

	for (int i=0; i<8; i++) {
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	e02c      	b.n	8002122 <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	3318      	adds	r3, #24
 80020cc:	443b      	add	r3, r7
 80020ce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80020d2:	461a      	mov	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa42 f303 	asr.w	r3, r2, r3
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10e      	bne.n	8002100 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 80020e2:	4a15      	ldr	r2, [pc, #84]	@ (8002138 <FND_DispDigit+0x8c>)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80020ea:	4a13      	ldr	r2, [pc, #76]	@ (8002138 <FND_DispDigit+0x8c>)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2200      	movs	r2, #0
 80020f8:	4619      	mov	r1, r3
 80020fa:	f000 fd3f 	bl	8002b7c <HAL_GPIO_WritePin>
 80020fe:	e00d      	b.n	800211c <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 8002100:	4a0d      	ldr	r2, [pc, #52]	@ (8002138 <FND_DispDigit+0x8c>)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002108:	4a0b      	ldr	r2, [pc, #44]	@ (8002138 <FND_DispDigit+0x8c>)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	b29b      	uxth	r3, r3
 8002114:	2201      	movs	r2, #1
 8002116:	4619      	mov	r1, r3
 8002118:	f000 fd30 	bl	8002b7c <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b07      	cmp	r3, #7
 8002126:	ddcf      	ble.n	80020c8 <FND_DispDigit+0x1c>
		}
	}
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	08008320 	.word	0x08008320
 8002138:	2000003c 	.word	0x2000003c

0800213c <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8002144:	4a18      	ldr	r2, [pc, #96]	@ (80021a8 <LCD_Init+0x6c>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 800214a:	2032      	movs	r0, #50	@ 0x32
 800214c:	f000 f9b0 	bl	80024b0 <HAL_Delay>
	LCD_cmdMode();
 8002150:	f000 f852 	bl	80021f8 <LCD_cmdMode>
	LCD_writeMode();
 8002154:	f000 f862 	bl	800221c <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 8002158:	2030      	movs	r0, #48	@ 0x30
 800215a:	f000 f895 	bl	8002288 <LCD_sendNibbleData>
	HAL_Delay(5);
 800215e:	2005      	movs	r0, #5
 8002160:	f000 f9a6 	bl	80024b0 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8002164:	2030      	movs	r0, #48	@ 0x30
 8002166:	f000 f88f 	bl	8002288 <LCD_sendNibbleData>
	HAL_Delay(1);
 800216a:	2001      	movs	r0, #1
 800216c:	f000 f9a0 	bl	80024b0 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8002170:	2030      	movs	r0, #48	@ 0x30
 8002172:	f000 f889 	bl	8002288 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 8002176:	2020      	movs	r0, #32
 8002178:	f000 f886 	bl	8002288 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 800217c:	2028      	movs	r0, #40	@ 0x28
 800217e:	f000 f8a7 	bl	80022d0 <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 8002182:	2008      	movs	r0, #8
 8002184:	f000 f8a4 	bl	80022d0 <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 8002188:	2001      	movs	r0, #1
 800218a:	f000 f8a1 	bl	80022d0 <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 800218e:	2006      	movs	r0, #6
 8002190:	f000 f89e 	bl	80022d0 <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 8002194:	200c      	movs	r0, #12
 8002196:	f000 f89b 	bl	80022d0 <LCD_sendData>
	LCD_backLightOn();
 800219a:	f000 f81d 	bl	80021d8 <LCD_backLightOn>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000068c 	.word	0x2000068c

080021ac <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 80021b6:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <LCD_sendI2C+0x28>)
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	1dfa      	adds	r2, r7, #7
 80021bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2301      	movs	r3, #1
 80021c4:	214e      	movs	r1, #78	@ 0x4e
 80021c6:	f000 fe5b 	bl	8002e80 <HAL_I2C_Master_Transmit>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000068c 	.word	0x2000068c

080021d8 <LCD_backLightOn>:

void LCD_backLightOn()
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <LCD_backLightOn+0x1c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b03      	ldr	r3, [pc, #12]	@ (80021f4 <LCD_backLightOn+0x1c>)
 80021e8:	701a      	strb	r2, [r3, #0]
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	20000688 	.word	0x20000688

080021f8 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <LCD_cmdMode+0x20>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <LCD_cmdMode+0x20>)
 8002208:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800220a:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <LCD_cmdMode+0x20>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ffcc 	bl	80021ac <LCD_sendI2C>
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000688 	.word	0x20000688

0800221c <LCD_writeMode>:
	lcdData |= (1<<LCD_RS);
	LCD_sendI2C(lcdData);
}

void LCD_writeMode()
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <LCD_writeMode+0x20>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	f023 0302 	bic.w	r3, r3, #2
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4b04      	ldr	r3, [pc, #16]	@ (800223c <LCD_writeMode+0x20>)
 800222c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800222e:	4b03      	ldr	r3, [pc, #12]	@ (800223c <LCD_writeMode+0x20>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ffba 	bl	80021ac <LCD_sendI2C>
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000688 	.word	0x20000688

08002240 <LCD_E_High>:

void LCD_E_High()
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <LCD_E_High+0x20>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <LCD_E_High+0x20>)
 8002250:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002252:	4b03      	ldr	r3, [pc, #12]	@ (8002260 <LCD_E_High+0x20>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ffa8 	bl	80021ac <LCD_sendI2C>
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000688 	.word	0x20000688

08002264 <LCD_E_Low>:

void LCD_E_Low()
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <LCD_E_Low+0x20>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	f023 0304 	bic.w	r3, r3, #4
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <LCD_E_Low+0x20>)
 8002274:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002276:	4b03      	ldr	r3, [pc, #12]	@ (8002284 <LCD_E_Low+0x20>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff ff96 	bl	80021ac <LCD_sendI2C>
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000688 	.word	0x20000688

08002288 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8002292:	f7ff ffd5 	bl	8002240 <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	f023 030f 	bic.w	r3, r3, #15
 800229e:	b25a      	sxtb	r2, r3
 80022a0:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <LCD_sendNibbleData+0x44>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b25b      	sxtb	r3, r3
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <LCD_sendNibbleData+0x44>)
 80022b4:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80022b6:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <LCD_sendNibbleData+0x44>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ff76 	bl	80021ac <LCD_sendI2C>
	LCD_E_Low();
 80022c0:	f7ff ffd0 	bl	8002264 <LCD_E_Low>
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000688 	.word	0x20000688

080022d0 <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ffd3 	bl	8002288 <LCD_sendNibbleData>

	data = data << 4;
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ffcc 	bl	8002288 <LCD_sendNibbleData>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <Buzzer_Init>:

static TIM_HandleTypeDef *hbuzzerTim;
static uint32_t hbuzzerTimChannel;

void Buzzer_Init(TIM_HandleTypeDef *hTim,uint32_t Channel)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
	hbuzzerTim = hTim;
 8002302:	4a06      	ldr	r2, [pc, #24]	@ (800231c <Buzzer_Init+0x24>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6013      	str	r3, [r2, #0]
	hbuzzerTimChannel = Channel;
 8002308:	4a05      	ldr	r2, [pc, #20]	@ (8002320 <Buzzer_Init+0x28>)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6013      	str	r3, [r2, #0]
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000690 	.word	0x20000690
 8002320:	20000694 	.word	0x20000694

08002324 <Buzzer_SetFreq>:


void Buzzer_SetFreq(uint32_t freq)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	if(freq < 100) freq = 100;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b63      	cmp	r3, #99	@ 0x63
 8002330:	d802      	bhi.n	8002338 <Buzzer_SetFreq+0x14>
 8002332:	2364      	movs	r3, #100	@ 0x64
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	e007      	b.n	8002348 <Buzzer_SetFreq+0x24>
	else if (freq > 10000) freq = 10000;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800233e:	4293      	cmp	r3, r2
 8002340:	d902      	bls.n	8002348 <Buzzer_SetFreq+0x24>
 8002342:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002346:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(hbuzzerTim,1000000/freq-1);
 8002348:	4a24      	ldr	r2, [pc, #144]	@ (80023dc <Buzzer_SetFreq+0xb8>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002350:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <Buzzer_SetFreq+0xbc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3a01      	subs	r2, #1
 8002358:	62da      	str	r2, [r3, #44]	@ 0x2c
 800235a:	4a20      	ldr	r2, [pc, #128]	@ (80023dc <Buzzer_SetFreq+0xb8>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002362:	4b1f      	ldr	r3, [pc, #124]	@ (80023e0 <Buzzer_SetFreq+0xbc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3a01      	subs	r2, #1
 8002368:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(hbuzzerTim,hbuzzerTimChannel,1000000/freq/2-1);
 800236a:	4b1e      	ldr	r3, [pc, #120]	@ (80023e4 <Buzzer_SetFreq+0xc0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <Buzzer_SetFreq+0x62>
 8002372:	4a1d      	ldr	r2, [pc, #116]	@ (80023e8 <Buzzer_SetFreq+0xc4>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	fbb2 f2f3 	udiv	r2, r2, r3
 800237a:	4b19      	ldr	r3, [pc, #100]	@ (80023e0 <Buzzer_SetFreq+0xbc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3a01      	subs	r2, #1
 8002382:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002384:	e024      	b.n	80023d0 <Buzzer_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hbuzzerTim,hbuzzerTimChannel,1000000/freq/2-1);
 8002386:	4b17      	ldr	r3, [pc, #92]	@ (80023e4 <Buzzer_SetFreq+0xc0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b04      	cmp	r3, #4
 800238c:	d109      	bne.n	80023a2 <Buzzer_SetFreq+0x7e>
 800238e:	4a16      	ldr	r2, [pc, #88]	@ (80023e8 <Buzzer_SetFreq+0xc4>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	4a12      	ldr	r2, [pc, #72]	@ (80023e0 <Buzzer_SetFreq+0xbc>)
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	3b01      	subs	r3, #1
 800239e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80023a0:	e016      	b.n	80023d0 <Buzzer_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hbuzzerTim,hbuzzerTimChannel,1000000/freq/2-1);
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <Buzzer_SetFreq+0xc0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d109      	bne.n	80023be <Buzzer_SetFreq+0x9a>
 80023aa:	4a0f      	ldr	r2, [pc, #60]	@ (80023e8 <Buzzer_SetFreq+0xc4>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	4a0b      	ldr	r2, [pc, #44]	@ (80023e0 <Buzzer_SetFreq+0xbc>)
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80023bc:	e008      	b.n	80023d0 <Buzzer_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hbuzzerTim,hbuzzerTimChannel,1000000/freq/2-1);
 80023be:	4a0a      	ldr	r2, [pc, #40]	@ (80023e8 <Buzzer_SetFreq+0xc4>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c6:	4a06      	ldr	r2, [pc, #24]	@ (80023e0 <Buzzer_SetFreq+0xbc>)
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	000f4240 	.word	0x000f4240
 80023e0:	20000690 	.word	0x20000690
 80023e4:	20000694 	.word	0x20000694
 80023e8:	0007a120 	.word	0x0007a120

080023ec <Buzzer_Start>:

void Buzzer_Start()
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hbuzzerTim, hbuzzerTimChannel);
 80023f0:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <Buzzer_Start+0x18>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a04      	ldr	r2, [pc, #16]	@ (8002408 <Buzzer_Start+0x1c>)
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f001 fe66 	bl	80040cc <HAL_TIM_PWM_Start>
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000690 	.word	0x20000690
 8002408:	20000694 	.word	0x20000694

0800240c <Buzzer_Stop>:

void Buzzer_Stop()
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hbuzzerTim, hbuzzerTimChannel);
 8002410:	4b04      	ldr	r3, [pc, #16]	@ (8002424 <Buzzer_Stop+0x18>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <Buzzer_Stop+0x1c>)
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f001 ff06 	bl	800422c <HAL_TIM_PWM_Stop>
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000690 	.word	0x20000690
 8002428:	20000694 	.word	0x20000694

0800242c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002430:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <HAL_Init+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0d      	ldr	r2, [pc, #52]	@ (800246c <HAL_Init+0x40>)
 8002436:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800243a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800243c:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0a      	ldr	r2, [pc, #40]	@ (800246c <HAL_Init+0x40>)
 8002442:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002448:	4b08      	ldr	r3, [pc, #32]	@ (800246c <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a07      	ldr	r2, [pc, #28]	@ (800246c <HAL_Init+0x40>)
 800244e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002454:	2003      	movs	r0, #3
 8002456:	f000 f920 	bl	800269a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800245a:	200f      	movs	r0, #15
 800245c:	f7fe fb5c 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002460:	f7fe fb2e 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023c00 	.word	0x40023c00

08002470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002474:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <HAL_IncTick+0x20>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <HAL_IncTick+0x24>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4413      	add	r3, r2
 8002480:	4a04      	ldr	r2, [pc, #16]	@ (8002494 <HAL_IncTick+0x24>)
 8002482:	6013      	str	r3, [r2, #0]
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000080 	.word	0x20000080
 8002494:	20000698 	.word	0x20000698

08002498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return uwTick;
 800249c:	4b03      	ldr	r3, [pc, #12]	@ (80024ac <HAL_GetTick+0x14>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	20000698 	.word	0x20000698

080024b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b8:	f7ff ffee 	bl	8002498 <HAL_GetTick>
 80024bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d005      	beq.n	80024d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ca:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <HAL_Delay+0x44>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4413      	add	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024d6:	bf00      	nop
 80024d8:	f7ff ffde 	bl	8002498 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d8f7      	bhi.n	80024d8 <HAL_Delay+0x28>
  {
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000080 	.word	0x20000080

080024f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002508:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <__NVIC_SetPriorityGrouping+0x44>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002514:	4013      	ands	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002520:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252a:	4a04      	ldr	r2, [pc, #16]	@ (800253c <__NVIC_SetPriorityGrouping+0x44>)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	60d3      	str	r3, [r2, #12]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002544:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <__NVIC_GetPriorityGrouping+0x18>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	f003 0307 	and.w	r3, r3, #7
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	2b00      	cmp	r3, #0
 800256c:	db0b      	blt.n	8002586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	f003 021f 	and.w	r2, r3, #31
 8002574:	4907      	ldr	r1, [pc, #28]	@ (8002594 <__NVIC_EnableIRQ+0x38>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	2001      	movs	r0, #1
 800257e:	fa00 f202 	lsl.w	r2, r0, r2
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000e100 	.word	0xe000e100

08002598 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	db12      	blt.n	80025d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	490a      	ldr	r1, [pc, #40]	@ (80025dc <__NVIC_DisableIRQ+0x44>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2001      	movs	r0, #1
 80025ba:	fa00 f202 	lsl.w	r2, r0, r2
 80025be:	3320      	adds	r3, #32
 80025c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80025c4:	f3bf 8f4f 	dsb	sy
}
 80025c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025ca:	f3bf 8f6f 	isb	sy
}
 80025ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000e100 	.word	0xe000e100

080025e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	db0a      	blt.n	800260a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	490c      	ldr	r1, [pc, #48]	@ (800262c <__NVIC_SetPriority+0x4c>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	0112      	lsls	r2, r2, #4
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	440b      	add	r3, r1
 8002604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002608:	e00a      	b.n	8002620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4908      	ldr	r1, [pc, #32]	@ (8002630 <__NVIC_SetPriority+0x50>)
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	3b04      	subs	r3, #4
 8002618:	0112      	lsls	r2, r2, #4
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	440b      	add	r3, r1
 800261e:	761a      	strb	r2, [r3, #24]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	@ 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f1c3 0307 	rsb	r3, r3, #7
 800264e:	2b04      	cmp	r3, #4
 8002650:	bf28      	it	cs
 8002652:	2304      	movcs	r3, #4
 8002654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3304      	adds	r3, #4
 800265a:	2b06      	cmp	r3, #6
 800265c:	d902      	bls.n	8002664 <NVIC_EncodePriority+0x30>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3b03      	subs	r3, #3
 8002662:	e000      	b.n	8002666 <NVIC_EncodePriority+0x32>
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	f04f 32ff 	mov.w	r2, #4294967295
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	401a      	ands	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800267c:	f04f 31ff 	mov.w	r1, #4294967295
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43d9      	mvns	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	4313      	orrs	r3, r2
         );
}
 800268e:	4618      	mov	r0, r3
 8002690:	3724      	adds	r7, #36	@ 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ff28 	bl	80024f8 <__NVIC_SetPriorityGrouping>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c2:	f7ff ff3d 	bl	8002540 <__NVIC_GetPriorityGrouping>
 80026c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	6978      	ldr	r0, [r7, #20]
 80026ce:	f7ff ffb1 	bl	8002634 <NVIC_EncodePriority>
 80026d2:	4602      	mov	r2, r0
 80026d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff80 	bl	80025e0 <__NVIC_SetPriority>
}
 80026e0:	bf00      	nop
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff30 	bl	800255c <__NVIC_EnableIRQ>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ff40 	bl	8002598 <__NVIC_DisableIRQ>
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800272e:	f7ff feb3 	bl	8002498 <HAL_GetTick>
 8002732:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d008      	beq.n	8002752 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2280      	movs	r2, #128	@ 0x80
 8002744:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e052      	b.n	80027f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0216 	bic.w	r2, r2, #22
 8002760:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002770:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <HAL_DMA_Abort+0x62>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0208 	bic.w	r2, r2, #8
 8002790:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a2:	e013      	b.n	80027cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027a4:	f7ff fe78 	bl	8002498 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d90c      	bls.n	80027cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2203      	movs	r2, #3
 80027bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e015      	b.n	80027f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1e4      	bne.n	80027a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027de:	223f      	movs	r2, #63	@ 0x3f
 80027e0:	409a      	lsls	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d004      	beq.n	800281e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2280      	movs	r2, #128	@ 0x80
 8002818:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00c      	b.n	8002838 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2205      	movs	r2, #5
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	@ 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	e159      	b.n	8002b14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002860:	2201      	movs	r2, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	f040 8148 	bne.w	8002b0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d005      	beq.n	8002896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002892:	2b02      	cmp	r3, #2
 8002894:	d130      	bne.n	80028f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	2203      	movs	r2, #3
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028cc:	2201      	movs	r2, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 0201 	and.w	r2, r3, #1
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b03      	cmp	r3, #3
 8002902:	d017      	beq.n	8002934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d123      	bne.n	8002988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	08da      	lsrs	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3208      	adds	r2, #8
 8002948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	220f      	movs	r2, #15
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	08da      	lsrs	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3208      	adds	r2, #8
 8002982:	69b9      	ldr	r1, [r7, #24]
 8002984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0203 	and.w	r2, r3, #3
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80a2 	beq.w	8002b0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	4b57      	ldr	r3, [pc, #348]	@ (8002b2c <HAL_GPIO_Init+0x2e8>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	4a56      	ldr	r2, [pc, #344]	@ (8002b2c <HAL_GPIO_Init+0x2e8>)
 80029d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029da:	4b54      	ldr	r3, [pc, #336]	@ (8002b2c <HAL_GPIO_Init+0x2e8>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029e6:	4a52      	ldr	r2, [pc, #328]	@ (8002b30 <HAL_GPIO_Init+0x2ec>)
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	3302      	adds	r3, #2
 80029ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	220f      	movs	r2, #15
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a49      	ldr	r2, [pc, #292]	@ (8002b34 <HAL_GPIO_Init+0x2f0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d019      	beq.n	8002a46 <HAL_GPIO_Init+0x202>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a48      	ldr	r2, [pc, #288]	@ (8002b38 <HAL_GPIO_Init+0x2f4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0x1fe>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a47      	ldr	r2, [pc, #284]	@ (8002b3c <HAL_GPIO_Init+0x2f8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00d      	beq.n	8002a3e <HAL_GPIO_Init+0x1fa>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a46      	ldr	r2, [pc, #280]	@ (8002b40 <HAL_GPIO_Init+0x2fc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <HAL_GPIO_Init+0x1f6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a45      	ldr	r2, [pc, #276]	@ (8002b44 <HAL_GPIO_Init+0x300>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_GPIO_Init+0x1f2>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e008      	b.n	8002a48 <HAL_GPIO_Init+0x204>
 8002a36:	2307      	movs	r3, #7
 8002a38:	e006      	b.n	8002a48 <HAL_GPIO_Init+0x204>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e004      	b.n	8002a48 <HAL_GPIO_Init+0x204>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_Init+0x204>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_GPIO_Init+0x204>
 8002a46:	2300      	movs	r3, #0
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	f002 0203 	and.w	r2, r2, #3
 8002a4e:	0092      	lsls	r2, r2, #2
 8002a50:	4093      	lsls	r3, r2
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a58:	4935      	ldr	r1, [pc, #212]	@ (8002b30 <HAL_GPIO_Init+0x2ec>)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	3302      	adds	r3, #2
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a66:	4b38      	ldr	r3, [pc, #224]	@ (8002b48 <HAL_GPIO_Init+0x304>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a8a:	4a2f      	ldr	r2, [pc, #188]	@ (8002b48 <HAL_GPIO_Init+0x304>)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a90:	4b2d      	ldr	r3, [pc, #180]	@ (8002b48 <HAL_GPIO_Init+0x304>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab4:	4a24      	ldr	r2, [pc, #144]	@ (8002b48 <HAL_GPIO_Init+0x304>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aba:	4b23      	ldr	r3, [pc, #140]	@ (8002b48 <HAL_GPIO_Init+0x304>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ade:	4a1a      	ldr	r2, [pc, #104]	@ (8002b48 <HAL_GPIO_Init+0x304>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae4:	4b18      	ldr	r3, [pc, #96]	@ (8002b48 <HAL_GPIO_Init+0x304>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b08:	4a0f      	ldr	r2, [pc, #60]	@ (8002b48 <HAL_GPIO_Init+0x304>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3301      	adds	r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b0f      	cmp	r3, #15
 8002b18:	f67f aea2 	bls.w	8002860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	3724      	adds	r7, #36	@ 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40013800 	.word	0x40013800
 8002b34:	40020000 	.word	0x40020000
 8002b38:	40020400 	.word	0x40020400
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	40020c00 	.word	0x40020c00
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40013c00 	.word	0x40013c00

08002b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	887b      	ldrh	r3, [r7, #2]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	e001      	b.n	8002b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b8c:	787b      	ldrb	r3, [r7, #1]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b98:	e003      	b.n	8002ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b9a:	887b      	ldrh	r3, [r7, #2]
 8002b9c:	041a      	lsls	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	619a      	str	r2, [r3, #24]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bba:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bc6:	4a05      	ldr	r2, [pc, #20]	@ (8002bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bc8:	88fb      	ldrh	r3, [r7, #6]
 8002bca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f806 	bl	8002be0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40013c00 	.word	0x40013c00

08002be0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e12b      	b.n	8002e62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fd fe5c 	bl	80008dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2224      	movs	r2, #36	@ 0x24
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c5c:	f001 f8da 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 8002c60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a81      	ldr	r2, [pc, #516]	@ (8002e6c <HAL_I2C_Init+0x274>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d807      	bhi.n	8002c7c <HAL_I2C_Init+0x84>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a80      	ldr	r2, [pc, #512]	@ (8002e70 <HAL_I2C_Init+0x278>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	bf94      	ite	ls
 8002c74:	2301      	movls	r3, #1
 8002c76:	2300      	movhi	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e006      	b.n	8002c8a <HAL_I2C_Init+0x92>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a7d      	ldr	r2, [pc, #500]	@ (8002e74 <HAL_I2C_Init+0x27c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	bf94      	ite	ls
 8002c84:	2301      	movls	r3, #1
 8002c86:	2300      	movhi	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0e7      	b.n	8002e62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a78      	ldr	r2, [pc, #480]	@ (8002e78 <HAL_I2C_Init+0x280>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	0c9b      	lsrs	r3, r3, #18
 8002c9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a6a      	ldr	r2, [pc, #424]	@ (8002e6c <HAL_I2C_Init+0x274>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d802      	bhi.n	8002ccc <HAL_I2C_Init+0xd4>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	e009      	b.n	8002ce0 <HAL_I2C_Init+0xe8>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cd2:	fb02 f303 	mul.w	r3, r2, r3
 8002cd6:	4a69      	ldr	r2, [pc, #420]	@ (8002e7c <HAL_I2C_Init+0x284>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	3301      	adds	r3, #1
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cf2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	495c      	ldr	r1, [pc, #368]	@ (8002e6c <HAL_I2C_Init+0x274>)
 8002cfc:	428b      	cmp	r3, r1
 8002cfe:	d819      	bhi.n	8002d34 <HAL_I2C_Init+0x13c>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1e59      	subs	r1, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0e:	1c59      	adds	r1, r3, #1
 8002d10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d14:	400b      	ands	r3, r1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_I2C_Init+0x138>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1e59      	subs	r1, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2e:	e051      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d30:	2304      	movs	r3, #4
 8002d32:	e04f      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d111      	bne.n	8002d60 <HAL_I2C_Init+0x168>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1e58      	subs	r0, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	440b      	add	r3, r1
 8002d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e012      	b.n	8002d86 <HAL_I2C_Init+0x18e>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1e58      	subs	r0, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	0099      	lsls	r1, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Init+0x196>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e022      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10e      	bne.n	8002db4 <HAL_I2C_Init+0x1bc>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1e58      	subs	r0, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	440b      	add	r3, r1
 8002da4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002db2:	e00f      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1e58      	subs	r0, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	0099      	lsls	r1, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	6809      	ldr	r1, [r1, #0]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6911      	ldr	r1, [r2, #16]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68d2      	ldr	r2, [r2, #12]
 8002e0e:	4311      	orrs	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	000186a0 	.word	0x000186a0
 8002e70:	001e847f 	.word	0x001e847f
 8002e74:	003d08ff 	.word	0x003d08ff
 8002e78:	431bde83 	.word	0x431bde83
 8002e7c:	10624dd3 	.word	0x10624dd3

08002e80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	817b      	strh	r3, [r7, #10]
 8002e90:	4613      	mov	r3, r2
 8002e92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e94:	f7ff fb00 	bl	8002498 <HAL_GetTick>
 8002e98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	f040 80e0 	bne.w	8003068 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2319      	movs	r3, #25
 8002eae:	2201      	movs	r2, #1
 8002eb0:	4970      	ldr	r1, [pc, #448]	@ (8003074 <HAL_I2C_Master_Transmit+0x1f4>)
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f964 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e0d3      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_I2C_Master_Transmit+0x50>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e0cc      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d007      	beq.n	8002ef6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2221      	movs	r2, #33	@ 0x21
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2210      	movs	r2, #16
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	893a      	ldrh	r2, [r7, #8]
 8002f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4a50      	ldr	r2, [pc, #320]	@ (8003078 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f38:	8979      	ldrh	r1, [r7, #10]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	6a3a      	ldr	r2, [r7, #32]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f89c 	bl	800307c <I2C_MasterRequestWrite>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e08d      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f64:	e066      	b.n	8003034 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	6a39      	ldr	r1, [r7, #32]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fa22 	bl	80033b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d107      	bne.n	8002f8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e06b      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d11b      	bne.n	8003008 <HAL_I2C_Master_Transmit+0x188>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d017      	beq.n	8003008 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	6a39      	ldr	r1, [r7, #32]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fa19 	bl	8003444 <I2C_WaitOnBTFFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	2b04      	cmp	r3, #4
 800301e:	d107      	bne.n	8003030 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800302e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e01a      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d194      	bne.n	8002f66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800304a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	e000      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003068:	2302      	movs	r3, #2
  }
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	00100002 	.word	0x00100002
 8003078:	ffff0000 	.word	0xffff0000

0800307c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af02      	add	r7, sp, #8
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	460b      	mov	r3, r1
 800308a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003090:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d006      	beq.n	80030a6 <I2C_MasterRequestWrite+0x2a>
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d003      	beq.n	80030a6 <I2C_MasterRequestWrite+0x2a>
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030a4:	d108      	bne.n	80030b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e00b      	b.n	80030d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030bc:	2b12      	cmp	r3, #18
 80030be:	d107      	bne.n	80030d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f84f 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00d      	beq.n	8003104 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030f6:	d103      	bne.n	8003100 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e035      	b.n	8003170 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800310c:	d108      	bne.n	8003120 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800310e:	897b      	ldrh	r3, [r7, #10]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800311c:	611a      	str	r2, [r3, #16]
 800311e:	e01b      	b.n	8003158 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003120:	897b      	ldrh	r3, [r7, #10]
 8003122:	11db      	asrs	r3, r3, #7
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f003 0306 	and.w	r3, r3, #6
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f063 030f 	orn	r3, r3, #15
 8003130:	b2da      	uxtb	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	490e      	ldr	r1, [pc, #56]	@ (8003178 <I2C_MasterRequestWrite+0xfc>)
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f898 	bl	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e010      	b.n	8003170 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800314e:	897b      	ldrh	r3, [r7, #10]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4907      	ldr	r1, [pc, #28]	@ (800317c <I2C_MasterRequestWrite+0x100>)
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f888 	bl	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	00010008 	.word	0x00010008
 800317c:	00010002 	.word	0x00010002

08003180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003190:	e048      	b.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d044      	beq.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7ff f97d 	bl	8002498 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d139      	bne.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	0c1b      	lsrs	r3, r3, #16
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d10d      	bne.n	80031d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	43da      	mvns	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	e00c      	b.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	43da      	mvns	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4013      	ands	r3, r2
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d116      	bne.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e023      	b.n	800326c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	0c1b      	lsrs	r3, r3, #16
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d10d      	bne.n	800324a <I2C_WaitOnFlagUntilTimeout+0xca>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	43da      	mvns	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4013      	ands	r3, r2
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	e00c      	b.n	8003264 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	43da      	mvns	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	4013      	ands	r3, r2
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	429a      	cmp	r2, r3
 8003268:	d093      	beq.n	8003192 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003282:	e071      	b.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003292:	d123      	bne.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f043 0204 	orr.w	r2, r3, #4
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e067      	b.n	80033ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e2:	d041      	beq.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e4:	f7ff f8d8 	bl	8002498 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d302      	bcc.n	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d136      	bne.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10c      	bne.n	800331e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	43da      	mvns	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4013      	ands	r3, r2
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	bf14      	ite	ne
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	e00b      	b.n	8003336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	43da      	mvns	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4013      	ands	r3, r2
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e021      	b.n	80033ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	0c1b      	lsrs	r3, r3, #16
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	d10c      	bne.n	800338c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	43da      	mvns	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4013      	ands	r3, r2
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e00b      	b.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4013      	ands	r3, r2
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf14      	ite	ne
 800339e:	2301      	movne	r3, #1
 80033a0:	2300      	moveq	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f47f af6d 	bne.w	8003284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c0:	e034      	b.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f886 	bl	80034d4 <I2C_IsAcknowledgeFailed>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e034      	b.n	800343c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d028      	beq.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033da:	f7ff f85d 	bl	8002498 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d302      	bcc.n	80033f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d11d      	bne.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fa:	2b80      	cmp	r3, #128	@ 0x80
 80033fc:	d016      	beq.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e007      	b.n	800343c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003436:	2b80      	cmp	r3, #128	@ 0x80
 8003438:	d1c3      	bne.n	80033c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003450:	e034      	b.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f83e 	bl	80034d4 <I2C_IsAcknowledgeFailed>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e034      	b.n	80034cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d028      	beq.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346a:	f7ff f815 	bl	8002498 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	429a      	cmp	r2, r3
 8003478:	d302      	bcc.n	8003480 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d11d      	bne.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d016      	beq.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	f043 0220 	orr.w	r2, r3, #32
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e007      	b.n	80034cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d1c3      	bne.n	8003452 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ea:	d11b      	bne.n	8003524 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	f043 0204 	orr.w	r2, r3, #4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e267      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d075      	beq.n	800363e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003552:	4b88      	ldr	r3, [pc, #544]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b04      	cmp	r3, #4
 800355c:	d00c      	beq.n	8003578 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355e:	4b85      	ldr	r3, [pc, #532]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003566:	2b08      	cmp	r3, #8
 8003568:	d112      	bne.n	8003590 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356a:	4b82      	ldr	r3, [pc, #520]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003572:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003576:	d10b      	bne.n	8003590 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	4b7e      	ldr	r3, [pc, #504]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d05b      	beq.n	800363c <HAL_RCC_OscConfig+0x108>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d157      	bne.n	800363c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e242      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003598:	d106      	bne.n	80035a8 <HAL_RCC_OscConfig+0x74>
 800359a:	4b76      	ldr	r3, [pc, #472]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a75      	ldr	r2, [pc, #468]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e01d      	b.n	80035e4 <HAL_RCC_OscConfig+0xb0>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0x98>
 80035b2:	4b70      	ldr	r3, [pc, #448]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a6f      	ldr	r2, [pc, #444]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 80035b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b6d      	ldr	r3, [pc, #436]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a6c      	ldr	r2, [pc, #432]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e00b      	b.n	80035e4 <HAL_RCC_OscConfig+0xb0>
 80035cc:	4b69      	ldr	r3, [pc, #420]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a68      	ldr	r2, [pc, #416]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 80035d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	4b66      	ldr	r3, [pc, #408]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a65      	ldr	r2, [pc, #404]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 80035de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d013      	beq.n	8003614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe ff54 	bl	8002498 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fe ff50 	bl	8002498 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	@ 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e207      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	4b5b      	ldr	r3, [pc, #364]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0xc0>
 8003612:	e014      	b.n	800363e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fe ff40 	bl	8002498 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800361c:	f7fe ff3c 	bl	8002498 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	@ 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e1f3      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362e:	4b51      	ldr	r3, [pc, #324]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0xe8>
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d063      	beq.n	8003712 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800364a:	4b4a      	ldr	r3, [pc, #296]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003656:	4b47      	ldr	r3, [pc, #284]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800365e:	2b08      	cmp	r3, #8
 8003660:	d11c      	bne.n	800369c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003662:	4b44      	ldr	r3, [pc, #272]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d116      	bne.n	800369c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	4b41      	ldr	r3, [pc, #260]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_RCC_OscConfig+0x152>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e1c7      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003686:	4b3b      	ldr	r3, [pc, #236]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4937      	ldr	r1, [pc, #220]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369a:	e03a      	b.n	8003712 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d020      	beq.n	80036e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a4:	4b34      	ldr	r3, [pc, #208]	@ (8003778 <HAL_RCC_OscConfig+0x244>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036aa:	f7fe fef5 	bl	8002498 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b2:	f7fe fef1 	bl	8002498 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e1a8      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d0:	4b28      	ldr	r3, [pc, #160]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4925      	ldr	r1, [pc, #148]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]
 80036e4:	e015      	b.n	8003712 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e6:	4b24      	ldr	r3, [pc, #144]	@ (8003778 <HAL_RCC_OscConfig+0x244>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe fed4 	bl	8002498 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fe fed0 	bl	8002498 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e187      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003706:	4b1b      	ldr	r3, [pc, #108]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d036      	beq.n	800378c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d016      	beq.n	8003754 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003726:	4b15      	ldr	r3, [pc, #84]	@ (800377c <HAL_RCC_OscConfig+0x248>)
 8003728:	2201      	movs	r2, #1
 800372a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372c:	f7fe feb4 	bl	8002498 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003734:	f7fe feb0 	bl	8002498 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e167      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003746:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <HAL_RCC_OscConfig+0x240>)
 8003748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x200>
 8003752:	e01b      	b.n	800378c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003754:	4b09      	ldr	r3, [pc, #36]	@ (800377c <HAL_RCC_OscConfig+0x248>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375a:	f7fe fe9d 	bl	8002498 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003760:	e00e      	b.n	8003780 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003762:	f7fe fe99 	bl	8002498 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d907      	bls.n	8003780 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e150      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
 8003774:	40023800 	.word	0x40023800
 8003778:	42470000 	.word	0x42470000
 800377c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003780:	4b88      	ldr	r3, [pc, #544]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1ea      	bne.n	8003762 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8097 	beq.w	80038c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800379a:	2300      	movs	r3, #0
 800379c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379e:	4b81      	ldr	r3, [pc, #516]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10f      	bne.n	80037ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	4b7d      	ldr	r3, [pc, #500]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	4a7c      	ldr	r2, [pc, #496]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 80037b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ba:	4b7a      	ldr	r3, [pc, #488]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c6:	2301      	movs	r3, #1
 80037c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ca:	4b77      	ldr	r3, [pc, #476]	@ (80039a8 <HAL_RCC_OscConfig+0x474>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d118      	bne.n	8003808 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037d6:	4b74      	ldr	r3, [pc, #464]	@ (80039a8 <HAL_RCC_OscConfig+0x474>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a73      	ldr	r2, [pc, #460]	@ (80039a8 <HAL_RCC_OscConfig+0x474>)
 80037dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e2:	f7fe fe59 	bl	8002498 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ea:	f7fe fe55 	bl	8002498 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e10c      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fc:	4b6a      	ldr	r3, [pc, #424]	@ (80039a8 <HAL_RCC_OscConfig+0x474>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d106      	bne.n	800381e <HAL_RCC_OscConfig+0x2ea>
 8003810:	4b64      	ldr	r3, [pc, #400]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003814:	4a63      	ldr	r2, [pc, #396]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6713      	str	r3, [r2, #112]	@ 0x70
 800381c:	e01c      	b.n	8003858 <HAL_RCC_OscConfig+0x324>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b05      	cmp	r3, #5
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x30c>
 8003826:	4b5f      	ldr	r3, [pc, #380]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382a:	4a5e      	ldr	r2, [pc, #376]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 800382c:	f043 0304 	orr.w	r3, r3, #4
 8003830:	6713      	str	r3, [r2, #112]	@ 0x70
 8003832:	4b5c      	ldr	r3, [pc, #368]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003836:	4a5b      	ldr	r2, [pc, #364]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6713      	str	r3, [r2, #112]	@ 0x70
 800383e:	e00b      	b.n	8003858 <HAL_RCC_OscConfig+0x324>
 8003840:	4b58      	ldr	r3, [pc, #352]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003844:	4a57      	ldr	r2, [pc, #348]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003846:	f023 0301 	bic.w	r3, r3, #1
 800384a:	6713      	str	r3, [r2, #112]	@ 0x70
 800384c:	4b55      	ldr	r3, [pc, #340]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003850:	4a54      	ldr	r2, [pc, #336]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003852:	f023 0304 	bic.w	r3, r3, #4
 8003856:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d015      	beq.n	800388c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003860:	f7fe fe1a 	bl	8002498 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003866:	e00a      	b.n	800387e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003868:	f7fe fe16 	bl	8002498 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e0cb      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387e:	4b49      	ldr	r3, [pc, #292]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0ee      	beq.n	8003868 <HAL_RCC_OscConfig+0x334>
 800388a:	e014      	b.n	80038b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388c:	f7fe fe04 	bl	8002498 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003892:	e00a      	b.n	80038aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003894:	f7fe fe00 	bl	8002498 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e0b5      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038aa:	4b3e      	ldr	r3, [pc, #248]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1ee      	bne.n	8003894 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d105      	bne.n	80038c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038bc:	4b39      	ldr	r3, [pc, #228]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 80038be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c0:	4a38      	ldr	r2, [pc, #224]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 80038c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80a1 	beq.w	8003a14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038d2:	4b34      	ldr	r3, [pc, #208]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d05c      	beq.n	8003998 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d141      	bne.n	800396a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e6:	4b31      	ldr	r3, [pc, #196]	@ (80039ac <HAL_RCC_OscConfig+0x478>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fe fdd4 	bl	8002498 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fe fdd0 	bl	8002498 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e087      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003906:	4b27      	ldr	r3, [pc, #156]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69da      	ldr	r2, [r3, #28]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	019b      	lsls	r3, r3, #6
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	3b01      	subs	r3, #1
 800392c:	041b      	lsls	r3, r3, #16
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003934:	061b      	lsls	r3, r3, #24
 8003936:	491b      	ldr	r1, [pc, #108]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800393c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ac <HAL_RCC_OscConfig+0x478>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003942:	f7fe fda9 	bl	8002498 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394a:	f7fe fda5 	bl	8002498 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e05c      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395c:	4b11      	ldr	r3, [pc, #68]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x416>
 8003968:	e054      	b.n	8003a14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396a:	4b10      	ldr	r3, [pc, #64]	@ (80039ac <HAL_RCC_OscConfig+0x478>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7fe fd92 	bl	8002498 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003978:	f7fe fd8e 	bl	8002498 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e045      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <HAL_RCC_OscConfig+0x470>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x444>
 8003996:	e03d      	b.n	8003a14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d107      	bne.n	80039b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e038      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
 80039a4:	40023800 	.word	0x40023800
 80039a8:	40007000 	.word	0x40007000
 80039ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a20 <HAL_RCC_OscConfig+0x4ec>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d028      	beq.n	8003a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d121      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d11a      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039e0:	4013      	ands	r3, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d111      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	3b01      	subs	r3, #1
 80039fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d107      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800

08003a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0cc      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a38:	4b68      	ldr	r3, [pc, #416]	@ (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d90c      	bls.n	8003a60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a46:	4b65      	ldr	r3, [pc, #404]	@ (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b63      	ldr	r3, [pc, #396]	@ (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0b8      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d020      	beq.n	8003aae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a78:	4b59      	ldr	r3, [pc, #356]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a58      	ldr	r2, [pc, #352]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a90:	4b53      	ldr	r3, [pc, #332]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4a52      	ldr	r2, [pc, #328]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a9c:	4b50      	ldr	r3, [pc, #320]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	494d      	ldr	r1, [pc, #308]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d044      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d107      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac2:	4b47      	ldr	r3, [pc, #284]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d119      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e07f      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d003      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d107      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae2:	4b3f      	ldr	r3, [pc, #252]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e06f      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af2:	4b3b      	ldr	r3, [pc, #236]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e067      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b02:	4b37      	ldr	r3, [pc, #220]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f023 0203 	bic.w	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4934      	ldr	r1, [pc, #208]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b14:	f7fe fcc0 	bl	8002498 <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1a:	e00a      	b.n	8003b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b1c:	f7fe fcbc 	bl	8002498 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e04f      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	4b2b      	ldr	r3, [pc, #172]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 020c 	and.w	r2, r3, #12
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d1eb      	bne.n	8003b1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b44:	4b25      	ldr	r3, [pc, #148]	@ (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d20c      	bcs.n	8003b6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b52:	4b22      	ldr	r3, [pc, #136]	@ (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b20      	ldr	r3, [pc, #128]	@ (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e032      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b78:	4b19      	ldr	r3, [pc, #100]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4916      	ldr	r1, [pc, #88]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b96:	4b12      	ldr	r3, [pc, #72]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	490e      	ldr	r1, [pc, #56]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003baa:	f000 f821 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	490a      	ldr	r1, [pc, #40]	@ (8003be4 <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	5ccb      	ldrb	r3, [r1, r3]
 8003bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc2:	4a09      	ldr	r2, [pc, #36]	@ (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003bc6:	4b09      	ldr	r3, [pc, #36]	@ (8003bec <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fc ffa4 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40023c00 	.word	0x40023c00
 8003be0:	40023800 	.word	0x40023800
 8003be4:	08008334 	.word	0x08008334
 8003be8:	20000000 	.word	0x20000000
 8003bec:	2000007c 	.word	0x2000007c

08003bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf4:	b094      	sub	sp, #80	@ 0x50
 8003bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c08:	4b79      	ldr	r3, [pc, #484]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d00d      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0x40>
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	f200 80e1 	bhi.w	8003ddc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x34>
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d003      	beq.n	8003c2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c22:	e0db      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c24:	4b73      	ldr	r3, [pc, #460]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c28:	e0db      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c2a:	4b73      	ldr	r3, [pc, #460]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c2e:	e0d8      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c30:	4b6f      	ldr	r3, [pc, #444]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c38:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d063      	beq.n	8003d0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c46:	4b6a      	ldr	r3, [pc, #424]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c50:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c62:	4622      	mov	r2, r4
 8003c64:	462b      	mov	r3, r5
 8003c66:	f04f 0000 	mov.w	r0, #0
 8003c6a:	f04f 0100 	mov.w	r1, #0
 8003c6e:	0159      	lsls	r1, r3, #5
 8003c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c74:	0150      	lsls	r0, r2, #5
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	1a51      	subs	r1, r2, r1
 8003c7e:	6139      	str	r1, [r7, #16]
 8003c80:	4629      	mov	r1, r5
 8003c82:	eb63 0301 	sbc.w	r3, r3, r1
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c94:	4659      	mov	r1, fp
 8003c96:	018b      	lsls	r3, r1, #6
 8003c98:	4651      	mov	r1, sl
 8003c9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c9e:	4651      	mov	r1, sl
 8003ca0:	018a      	lsls	r2, r1, #6
 8003ca2:	4651      	mov	r1, sl
 8003ca4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ca8:	4659      	mov	r1, fp
 8003caa:	eb63 0901 	sbc.w	r9, r3, r1
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cc2:	4690      	mov	r8, r2
 8003cc4:	4699      	mov	r9, r3
 8003cc6:	4623      	mov	r3, r4
 8003cc8:	eb18 0303 	adds.w	r3, r8, r3
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	462b      	mov	r3, r5
 8003cd0:	eb49 0303 	adc.w	r3, r9, r3
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	024b      	lsls	r3, r1, #9
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cec:	4621      	mov	r1, r4
 8003cee:	024a      	lsls	r2, r1, #9
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d00:	f7fc fabe 	bl	8000280 <__aeabi_uldivmod>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4613      	mov	r3, r2
 8003d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d0c:	e058      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0e:	4b38      	ldr	r3, [pc, #224]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	099b      	lsrs	r3, r3, #6
 8003d14:	2200      	movs	r2, #0
 8003d16:	4618      	mov	r0, r3
 8003d18:	4611      	mov	r1, r2
 8003d1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d1e:	623b      	str	r3, [r7, #32]
 8003d20:	2300      	movs	r3, #0
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d28:	4642      	mov	r2, r8
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	f04f 0000 	mov.w	r0, #0
 8003d30:	f04f 0100 	mov.w	r1, #0
 8003d34:	0159      	lsls	r1, r3, #5
 8003d36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d3a:	0150      	lsls	r0, r2, #5
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4641      	mov	r1, r8
 8003d42:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d46:	4649      	mov	r1, r9
 8003d48:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d60:	ebb2 040a 	subs.w	r4, r2, sl
 8003d64:	eb63 050b 	sbc.w	r5, r3, fp
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	00eb      	lsls	r3, r5, #3
 8003d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d76:	00e2      	lsls	r2, r4, #3
 8003d78:	4614      	mov	r4, r2
 8003d7a:	461d      	mov	r5, r3
 8003d7c:	4643      	mov	r3, r8
 8003d7e:	18e3      	adds	r3, r4, r3
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	464b      	mov	r3, r9
 8003d84:	eb45 0303 	adc.w	r3, r5, r3
 8003d88:	607b      	str	r3, [r7, #4]
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d96:	4629      	mov	r1, r5
 8003d98:	028b      	lsls	r3, r1, #10
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003da0:	4621      	mov	r1, r4
 8003da2:	028a      	lsls	r2, r1, #10
 8003da4:	4610      	mov	r0, r2
 8003da6:	4619      	mov	r1, r3
 8003da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003daa:	2200      	movs	r2, #0
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	61fa      	str	r2, [r7, #28]
 8003db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003db4:	f7fc fa64 	bl	8000280 <__aeabi_uldivmod>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003dd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dda:	e002      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ddc:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3750      	adds	r7, #80	@ 0x50
 8003de8:	46bd      	mov	sp, r7
 8003dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dee:	bf00      	nop
 8003df0:	40023800 	.word	0x40023800
 8003df4:	00f42400 	.word	0x00f42400
 8003df8:	007a1200 	.word	0x007a1200

08003dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e00:	4b03      	ldr	r3, [pc, #12]	@ (8003e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e02:	681b      	ldr	r3, [r3, #0]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	20000000 	.word	0x20000000

08003e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e18:	f7ff fff0 	bl	8003dfc <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	0a9b      	lsrs	r3, r3, #10
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4903      	ldr	r1, [pc, #12]	@ (8003e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40023800 	.word	0x40023800
 8003e38:	08008344 	.word	0x08008344

08003e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e40:	f7ff ffdc 	bl	8003dfc <HAL_RCC_GetHCLKFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b05      	ldr	r3, [pc, #20]	@ (8003e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	0b5b      	lsrs	r3, r3, #13
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4903      	ldr	r1, [pc, #12]	@ (8003e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	08008344 	.word	0x08008344

08003e64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	220f      	movs	r2, #15
 8003e72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e74:	4b12      	ldr	r3, [pc, #72]	@ (8003ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0203 	and.w	r2, r3, #3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e80:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e98:	4b09      	ldr	r3, [pc, #36]	@ (8003ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	08db      	lsrs	r3, r3, #3
 8003e9e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ea6:	4b07      	ldr	r3, [pc, #28]	@ (8003ec4 <HAL_RCC_GetClockConfig+0x60>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0207 	and.w	r2, r3, #7
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	601a      	str	r2, [r3, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40023c00 	.word	0x40023c00

08003ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e041      	b.n	8003f5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fd f996 	bl	8001220 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3304      	adds	r3, #4
 8003f04:	4619      	mov	r1, r3
 8003f06:	4610      	mov	r0, r2
 8003f08:	f000 fc96 	bl	8004838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d001      	beq.n	8003f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e044      	b.n	800400a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8004018 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d018      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003faa:	d013      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800401c <HAL_TIM_Base_Start_IT+0xb4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00e      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a19      	ldr	r2, [pc, #100]	@ (8004020 <HAL_TIM_Base_Start_IT+0xb8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d009      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a17      	ldr	r2, [pc, #92]	@ (8004024 <HAL_TIM_Base_Start_IT+0xbc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a16      	ldr	r2, [pc, #88]	@ (8004028 <HAL_TIM_Base_Start_IT+0xc0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d111      	bne.n	8003ff8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b06      	cmp	r3, #6
 8003fe4:	d010      	beq.n	8004008 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0201 	orr.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff6:	e007      	b.n	8004008 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40010000 	.word	0x40010000
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800
 8004024:	40000c00 	.word	0x40000c00
 8004028:	40014000 	.word	0x40014000

0800402c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e041      	b.n	80040c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d106      	bne.n	8004058 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fd f8bc 	bl	80011d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3304      	adds	r3, #4
 8004068:	4619      	mov	r1, r3
 800406a:	4610      	mov	r0, r2
 800406c:	f000 fbe4 	bl	8004838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <HAL_TIM_PWM_Start+0x24>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	bf14      	ite	ne
 80040e8:	2301      	movne	r3, #1
 80040ea:	2300      	moveq	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	e022      	b.n	8004136 <HAL_TIM_PWM_Start+0x6a>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d109      	bne.n	800410a <HAL_TIM_PWM_Start+0x3e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	bf14      	ite	ne
 8004102:	2301      	movne	r3, #1
 8004104:	2300      	moveq	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	e015      	b.n	8004136 <HAL_TIM_PWM_Start+0x6a>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d109      	bne.n	8004124 <HAL_TIM_PWM_Start+0x58>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	bf14      	ite	ne
 800411c:	2301      	movne	r3, #1
 800411e:	2300      	moveq	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	e008      	b.n	8004136 <HAL_TIM_PWM_Start+0x6a>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e068      	b.n	8004210 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d104      	bne.n	800414e <HAL_TIM_PWM_Start+0x82>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800414c:	e013      	b.n	8004176 <HAL_TIM_PWM_Start+0xaa>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b04      	cmp	r3, #4
 8004152:	d104      	bne.n	800415e <HAL_TIM_PWM_Start+0x92>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800415c:	e00b      	b.n	8004176 <HAL_TIM_PWM_Start+0xaa>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b08      	cmp	r3, #8
 8004162:	d104      	bne.n	800416e <HAL_TIM_PWM_Start+0xa2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800416c:	e003      	b.n	8004176 <HAL_TIM_PWM_Start+0xaa>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2201      	movs	r2, #1
 800417c:	6839      	ldr	r1, [r7, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fe06 	bl	8004d90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a23      	ldr	r2, [pc, #140]	@ (8004218 <HAL_TIM_PWM_Start+0x14c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d107      	bne.n	800419e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800419c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004218 <HAL_TIM_PWM_Start+0x14c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d018      	beq.n	80041da <HAL_TIM_PWM_Start+0x10e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b0:	d013      	beq.n	80041da <HAL_TIM_PWM_Start+0x10e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a19      	ldr	r2, [pc, #100]	@ (800421c <HAL_TIM_PWM_Start+0x150>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00e      	beq.n	80041da <HAL_TIM_PWM_Start+0x10e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a17      	ldr	r2, [pc, #92]	@ (8004220 <HAL_TIM_PWM_Start+0x154>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d009      	beq.n	80041da <HAL_TIM_PWM_Start+0x10e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a16      	ldr	r2, [pc, #88]	@ (8004224 <HAL_TIM_PWM_Start+0x158>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d004      	beq.n	80041da <HAL_TIM_PWM_Start+0x10e>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a14      	ldr	r2, [pc, #80]	@ (8004228 <HAL_TIM_PWM_Start+0x15c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d111      	bne.n	80041fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b06      	cmp	r3, #6
 80041ea:	d010      	beq.n	800420e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fc:	e007      	b.n	800420e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0201 	orr.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40010000 	.word	0x40010000
 800421c:	40000400 	.word	0x40000400
 8004220:	40000800 	.word	0x40000800
 8004224:	40000c00 	.word	0x40000c00
 8004228:	40014000 	.word	0x40014000

0800422c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2200      	movs	r2, #0
 800423c:	6839      	ldr	r1, [r7, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fda6 	bl	8004d90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a29      	ldr	r2, [pc, #164]	@ (80042f0 <HAL_TIM_PWM_Stop+0xc4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d117      	bne.n	800427e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6a1a      	ldr	r2, [r3, #32]
 8004254:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10f      	bne.n	800427e <HAL_TIM_PWM_Stop+0x52>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6a1a      	ldr	r2, [r3, #32]
 8004264:	f240 4344 	movw	r3, #1092	@ 0x444
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d107      	bne.n	800427e <HAL_TIM_PWM_Stop+0x52>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800427c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6a1a      	ldr	r2, [r3, #32]
 8004284:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10f      	bne.n	80042ae <HAL_TIM_PWM_Stop+0x82>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6a1a      	ldr	r2, [r3, #32]
 8004294:	f240 4344 	movw	r3, #1092	@ 0x444
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d107      	bne.n	80042ae <HAL_TIM_PWM_Stop+0x82>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0201 	bic.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Stop+0x92>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042bc:	e013      	b.n	80042e6 <HAL_TIM_PWM_Stop+0xba>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_PWM_Stop+0xa2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042cc:	e00b      	b.n	80042e6 <HAL_TIM_PWM_Stop+0xba>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d104      	bne.n	80042de <HAL_TIM_PWM_Stop+0xb2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042dc:	e003      	b.n	80042e6 <HAL_TIM_PWM_Stop+0xba>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40010000 	.word	0x40010000

080042f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d020      	beq.n	8004358 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0202 	mvn.w	r2, #2
 8004328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fa5b 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fa4d 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fa5e 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d020      	beq.n	80043a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01b      	beq.n	80043a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0204 	mvn.w	r2, #4
 8004374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2202      	movs	r2, #2
 800437a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fa35 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fa27 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fa38 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d020      	beq.n	80043f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01b      	beq.n	80043f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0208 	mvn.w	r2, #8
 80043c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2204      	movs	r2, #4
 80043c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fa0f 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 80043dc:	e005      	b.n	80043ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fa01 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fa12 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d020      	beq.n	800443c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01b      	beq.n	800443c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0210 	mvn.w	r2, #16
 800440c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2208      	movs	r2, #8
 8004412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f9e9 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9db 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f9ec 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00c      	beq.n	8004460 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0201 	mvn.w	r2, #1
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fc fb0e 	bl	8000a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fd76 	bl	8004f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f9bd 	bl	8004822 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0220 	mvn.w	r2, #32
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fd48 	bl	8004f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e0ae      	b.n	8004650 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b0c      	cmp	r3, #12
 80044fe:	f200 809f 	bhi.w	8004640 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004502:	a201      	add	r2, pc, #4	@ (adr r2, 8004508 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004508:	0800453d 	.word	0x0800453d
 800450c:	08004641 	.word	0x08004641
 8004510:	08004641 	.word	0x08004641
 8004514:	08004641 	.word	0x08004641
 8004518:	0800457d 	.word	0x0800457d
 800451c:	08004641 	.word	0x08004641
 8004520:	08004641 	.word	0x08004641
 8004524:	08004641 	.word	0x08004641
 8004528:	080045bf 	.word	0x080045bf
 800452c:	08004641 	.word	0x08004641
 8004530:	08004641 	.word	0x08004641
 8004534:	08004641 	.word	0x08004641
 8004538:	080045ff 	.word	0x080045ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f9fe 	bl	8004944 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0208 	orr.w	r2, r2, #8
 8004556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0204 	bic.w	r2, r2, #4
 8004566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6999      	ldr	r1, [r3, #24]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	619a      	str	r2, [r3, #24]
      break;
 800457a:	e064      	b.n	8004646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fa44 	bl	8004a10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6999      	ldr	r1, [r3, #24]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	021a      	lsls	r2, r3, #8
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	619a      	str	r2, [r3, #24]
      break;
 80045bc:	e043      	b.n	8004646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fa8f 	bl	8004ae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69da      	ldr	r2, [r3, #28]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0208 	orr.w	r2, r2, #8
 80045d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0204 	bic.w	r2, r2, #4
 80045e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69d9      	ldr	r1, [r3, #28]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	61da      	str	r2, [r3, #28]
      break;
 80045fc:	e023      	b.n	8004646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fad9 	bl	8004bbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69d9      	ldr	r1, [r3, #28]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	021a      	lsls	r2, r3, #8
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	61da      	str	r2, [r3, #28]
      break;
 800463e:	e002      	b.n	8004646 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	75fb      	strb	r3, [r7, #23]
      break;
 8004644:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800464e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIM_ConfigClockSource+0x1c>
 8004670:	2302      	movs	r3, #2
 8004672:	e0b4      	b.n	80047de <HAL_TIM_ConfigClockSource+0x186>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800469a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ac:	d03e      	beq.n	800472c <HAL_TIM_ConfigClockSource+0xd4>
 80046ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046b2:	f200 8087 	bhi.w	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ba:	f000 8086 	beq.w	80047ca <HAL_TIM_ConfigClockSource+0x172>
 80046be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046c2:	d87f      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046c4:	2b70      	cmp	r3, #112	@ 0x70
 80046c6:	d01a      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0xa6>
 80046c8:	2b70      	cmp	r3, #112	@ 0x70
 80046ca:	d87b      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046cc:	2b60      	cmp	r3, #96	@ 0x60
 80046ce:	d050      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x11a>
 80046d0:	2b60      	cmp	r3, #96	@ 0x60
 80046d2:	d877      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046d4:	2b50      	cmp	r3, #80	@ 0x50
 80046d6:	d03c      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0xfa>
 80046d8:	2b50      	cmp	r3, #80	@ 0x50
 80046da:	d873      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046dc:	2b40      	cmp	r3, #64	@ 0x40
 80046de:	d058      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x13a>
 80046e0:	2b40      	cmp	r3, #64	@ 0x40
 80046e2:	d86f      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046e4:	2b30      	cmp	r3, #48	@ 0x30
 80046e6:	d064      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046e8:	2b30      	cmp	r3, #48	@ 0x30
 80046ea:	d86b      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d060      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d867      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d05c      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d05a      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046fc:	e062      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800470e:	f000 fb1f 	bl	8004d50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	609a      	str	r2, [r3, #8]
      break;
 800472a:	e04f      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800473c:	f000 fb08 	bl	8004d50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800474e:	609a      	str	r2, [r3, #8]
      break;
 8004750:	e03c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800475e:	461a      	mov	r2, r3
 8004760:	f000 fa7c 	bl	8004c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2150      	movs	r1, #80	@ 0x50
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fad5 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004770:	e02c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800477e:	461a      	mov	r2, r3
 8004780:	f000 fa9b 	bl	8004cba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2160      	movs	r1, #96	@ 0x60
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fac5 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004790:	e01c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800479e:	461a      	mov	r2, r3
 80047a0:	f000 fa5c 	bl	8004c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2140      	movs	r1, #64	@ 0x40
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fab5 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 80047b0:	e00c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4619      	mov	r1, r3
 80047bc:	4610      	mov	r0, r2
 80047be:	f000 faac 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 80047c2:	e003      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
      break;
 80047c8:	e000      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a37      	ldr	r2, [pc, #220]	@ (8004928 <TIM_Base_SetConfig+0xf0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00f      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004856:	d00b      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a34      	ldr	r2, [pc, #208]	@ (800492c <TIM_Base_SetConfig+0xf4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d007      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a33      	ldr	r2, [pc, #204]	@ (8004930 <TIM_Base_SetConfig+0xf8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a32      	ldr	r2, [pc, #200]	@ (8004934 <TIM_Base_SetConfig+0xfc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d108      	bne.n	8004882 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a28      	ldr	r2, [pc, #160]	@ (8004928 <TIM_Base_SetConfig+0xf0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01b      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004890:	d017      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a25      	ldr	r2, [pc, #148]	@ (800492c <TIM_Base_SetConfig+0xf4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a24      	ldr	r2, [pc, #144]	@ (8004930 <TIM_Base_SetConfig+0xf8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00f      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a23      	ldr	r2, [pc, #140]	@ (8004934 <TIM_Base_SetConfig+0xfc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00b      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a22      	ldr	r2, [pc, #136]	@ (8004938 <TIM_Base_SetConfig+0x100>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d007      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a21      	ldr	r2, [pc, #132]	@ (800493c <TIM_Base_SetConfig+0x104>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a20      	ldr	r2, [pc, #128]	@ (8004940 <TIM_Base_SetConfig+0x108>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d108      	bne.n	80048d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004928 <TIM_Base_SetConfig+0xf0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d103      	bne.n	8004902 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f043 0204 	orr.w	r2, r3, #4
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	601a      	str	r2, [r3, #0]
}
 800491a:	bf00      	nop
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40010000 	.word	0x40010000
 800492c:	40000400 	.word	0x40000400
 8004930:	40000800 	.word	0x40000800
 8004934:	40000c00 	.word	0x40000c00
 8004938:	40014000 	.word	0x40014000
 800493c:	40014400 	.word	0x40014400
 8004940:	40014800 	.word	0x40014800

08004944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f023 0201 	bic.w	r2, r3, #1
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0303 	bic.w	r3, r3, #3
 800497a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 0302 	bic.w	r3, r3, #2
 800498c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a0c <TIM_OC1_SetConfig+0xc8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d10c      	bne.n	80049ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f023 0308 	bic.w	r3, r3, #8
 80049a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f023 0304 	bic.w	r3, r3, #4
 80049b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a13      	ldr	r2, [pc, #76]	@ (8004a0c <TIM_OC1_SetConfig+0xc8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d111      	bne.n	80049e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	621a      	str	r2, [r3, #32]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40010000 	.word	0x40010000

08004a10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	f023 0210 	bic.w	r2, r3, #16
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f023 0320 	bic.w	r3, r3, #32
 8004a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae4 <TIM_OC2_SetConfig+0xd4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10d      	bne.n	8004a8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a15      	ldr	r2, [pc, #84]	@ (8004ae4 <TIM_OC2_SetConfig+0xd4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d113      	bne.n	8004abc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	621a      	str	r2, [r3, #32]
}
 8004ad6:	bf00      	nop
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40010000 	.word	0x40010000

08004ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0303 	bic.w	r3, r3, #3
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb8 <TIM_OC3_SetConfig+0xd0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d10d      	bne.n	8004b62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a14      	ldr	r2, [pc, #80]	@ (8004bb8 <TIM_OC3_SetConfig+0xd0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d113      	bne.n	8004b92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	621a      	str	r2, [r3, #32]
}
 8004bac:	bf00      	nop
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	40010000 	.word	0x40010000

08004bbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	031b      	lsls	r3, r3, #12
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a10      	ldr	r2, [pc, #64]	@ (8004c58 <TIM_OC4_SetConfig+0x9c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d109      	bne.n	8004c30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	019b      	lsls	r3, r3, #6
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40010000 	.word	0x40010000

08004c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f023 0201 	bic.w	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f023 030a 	bic.w	r3, r3, #10
 8004c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b087      	sub	sp, #28
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f023 0210 	bic.w	r2, r3, #16
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ce4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	031b      	lsls	r3, r3, #12
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cf6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	621a      	str	r2, [r3, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f043 0307 	orr.w	r3, r3, #7
 8004d3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	609a      	str	r2, [r3, #8]
}
 8004d44:	bf00      	nop
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	021a      	lsls	r2, r3, #8
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	609a      	str	r2, [r3, #8]
}
 8004d84:	bf00      	nop
 8004d86:	371c      	adds	r7, #28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f003 031f 	and.w	r3, r3, #31
 8004da2:	2201      	movs	r2, #1
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1a      	ldr	r2, [r3, #32]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	43db      	mvns	r3, r3
 8004db2:	401a      	ands	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a1a      	ldr	r2, [r3, #32]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f003 031f 	and.w	r3, r3, #31
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	621a      	str	r2, [r3, #32]
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e050      	b.n	8004e96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e40:	d013      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a18      	ldr	r2, [pc, #96]	@ (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a16      	ldr	r2, [pc, #88]	@ (8004eac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a15      	ldr	r2, [pc, #84]	@ (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a13      	ldr	r2, [pc, #76]	@ (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d10c      	bne.n	8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40000400 	.word	0x40000400
 8004eac:	40000800 	.word	0x40000800
 8004eb0:	40000c00 	.word	0x40000c00
 8004eb4:	40014000 	.word	0x40014000

08004eb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e03d      	b.n	8004f50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e042      	b.n	800501c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d106      	bne.n	8004fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fc fa34 	bl	8001418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2224      	movs	r2, #36	@ 0x24
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fc99 	bl	8005900 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695a      	ldr	r2, [r3, #20]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b0ba      	sub	sp, #232	@ 0xe8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800504a:	2300      	movs	r3, #0
 800504c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005050:	2300      	movs	r3, #0
 8005052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10f      	bne.n	800508a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_UART_IRQHandler+0x66>
 8005076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fb7e 	bl	8005784 <UART_Receive_IT>
      return;
 8005088:	e273      	b.n	8005572 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800508a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 80de 	beq.w	8005250 <HAL_UART_IRQHandler+0x22c>
 8005094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d106      	bne.n	80050ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80d1 	beq.w	8005250 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <HAL_UART_IRQHandler+0xae>
 80050ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ca:	f043 0201 	orr.w	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <HAL_UART_IRQHandler+0xd2>
 80050de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ee:	f043 0202 	orr.w	r2, r3, #2
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <HAL_UART_IRQHandler+0xf6>
 8005102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005112:	f043 0204 	orr.w	r2, r3, #4
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800511a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d011      	beq.n	800514a <HAL_UART_IRQHandler+0x126>
 8005126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b00      	cmp	r3, #0
 8005130:	d105      	bne.n	800513e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005142:	f043 0208 	orr.w	r2, r3, #8
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 820a 	beq.w	8005568 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d008      	beq.n	8005172 <HAL_UART_IRQHandler+0x14e>
 8005160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fb09 	bl	8005784 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b40      	cmp	r3, #64	@ 0x40
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d103      	bne.n	800519e <HAL_UART_IRQHandler+0x17a>
 8005196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d04f      	beq.n	800523e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fa14 	bl	80055cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ae:	2b40      	cmp	r3, #64	@ 0x40
 80051b0:	d141      	bne.n	8005236 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3314      	adds	r3, #20
 80051b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3314      	adds	r3, #20
 80051da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80051e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80051f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1d9      	bne.n	80051b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d013      	beq.n	800522e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520a:	4a8a      	ldr	r2, [pc, #552]	@ (8005434 <HAL_UART_IRQHandler+0x410>)
 800520c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005212:	4618      	mov	r0, r3
 8005214:	f7fd faf4 	bl	8002800 <HAL_DMA_Abort_IT>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d016      	beq.n	800524c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005228:	4610      	mov	r0, r2
 800522a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800522c:	e00e      	b.n	800524c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f9b6 	bl	80055a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005234:	e00a      	b.n	800524c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f9b2 	bl	80055a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523c:	e006      	b.n	800524c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f9ae 	bl	80055a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800524a:	e18d      	b.n	8005568 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800524c:	bf00      	nop
    return;
 800524e:	e18b      	b.n	8005568 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005254:	2b01      	cmp	r3, #1
 8005256:	f040 8167 	bne.w	8005528 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800525a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 8160 	beq.w	8005528 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8159 	beq.w	8005528 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005276:	2300      	movs	r3, #0
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	60bb      	str	r3, [r7, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005296:	2b40      	cmp	r3, #64	@ 0x40
 8005298:	f040 80ce 	bne.w	8005438 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 80a9 	beq.w	8005404 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052ba:	429a      	cmp	r2, r3
 80052bc:	f080 80a2 	bcs.w	8005404 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052d2:	f000 8088 	beq.w	80053e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	330c      	adds	r3, #12
 80052dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80052ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	330c      	adds	r3, #12
 80052fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005302:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800530e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800531a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1d9      	bne.n	80052d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3314      	adds	r3, #20
 8005328:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800532c:	e853 3f00 	ldrex	r3, [r3]
 8005330:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005334:	f023 0301 	bic.w	r3, r3, #1
 8005338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3314      	adds	r3, #20
 8005342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005346:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800534a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800534e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e1      	bne.n	8005322 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3314      	adds	r3, #20
 8005364:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800536e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3314      	adds	r3, #20
 800537e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005382:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005384:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005388:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e3      	bne.n	800535e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053b6:	f023 0310 	bic.w	r3, r3, #16
 80053ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	330c      	adds	r3, #12
 80053c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80053c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053d0:	e841 2300 	strex	r3, r2, [r1]
 80053d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e3      	bne.n	80053a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fd f99d 	bl	8002720 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	4619      	mov	r1, r3
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f8d9 	bl	80055b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005402:	e0b3      	b.n	800556c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005408:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800540c:	429a      	cmp	r2, r3
 800540e:	f040 80ad 	bne.w	800556c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800541c:	f040 80a6 	bne.w	800556c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f8c1 	bl	80055b4 <HAL_UARTEx_RxEventCallback>
      return;
 8005432:	e09b      	b.n	800556c <HAL_UART_IRQHandler+0x548>
 8005434:	08005693 	.word	0x08005693
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005440:	b29b      	uxth	r3, r3
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 808e 	beq.w	8005570 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005454:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 8089 	beq.w	8005570 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	330c      	adds	r3, #12
 8005464:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800546e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005470:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005474:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	330c      	adds	r3, #12
 800547e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005482:	647a      	str	r2, [r7, #68]	@ 0x44
 8005484:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005488:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e3      	bne.n	800545e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3314      	adds	r3, #20
 800549c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	623b      	str	r3, [r7, #32]
   return(result);
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3314      	adds	r3, #20
 80054b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80054ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80054bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e3      	bne.n	8005496 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	330c      	adds	r3, #12
 80054e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0310 	bic.w	r3, r3, #16
 80054f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	330c      	adds	r3, #12
 80054fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005500:	61fa      	str	r2, [r7, #28]
 8005502:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	69b9      	ldr	r1, [r7, #24]
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	617b      	str	r3, [r7, #20]
   return(result);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e3      	bne.n	80054dc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800551a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f847 	bl	80055b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005526:	e023      	b.n	8005570 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800552c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005530:	2b00      	cmp	r3, #0
 8005532:	d009      	beq.n	8005548 <HAL_UART_IRQHandler+0x524>
 8005534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f8b7 	bl	80056b4 <UART_Transmit_IT>
    return;
 8005546:	e014      	b.n	8005572 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800554c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00e      	beq.n	8005572 <HAL_UART_IRQHandler+0x54e>
 8005554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	d008      	beq.n	8005572 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f8f7 	bl	8005754 <UART_EndTransmit_IT>
    return;
 8005566:	e004      	b.n	8005572 <HAL_UART_IRQHandler+0x54e>
    return;
 8005568:	bf00      	nop
 800556a:	e002      	b.n	8005572 <HAL_UART_IRQHandler+0x54e>
      return;
 800556c:	bf00      	nop
 800556e:	e000      	b.n	8005572 <HAL_UART_IRQHandler+0x54e>
      return;
 8005570:	bf00      	nop
  }
}
 8005572:	37e8      	adds	r7, #232	@ 0xe8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b095      	sub	sp, #84	@ 0x54
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	330c      	adds	r3, #12
 80055da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	330c      	adds	r3, #12
 80055f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80055f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e5      	bne.n	80055d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3314      	adds	r3, #20
 800560e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	61fb      	str	r3, [r7, #28]
   return(result);
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f023 0301 	bic.w	r3, r3, #1
 800561e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3314      	adds	r3, #20
 8005626:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005628:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800562a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800562e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e5      	bne.n	8005608 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005640:	2b01      	cmp	r3, #1
 8005642:	d119      	bne.n	8005678 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	60bb      	str	r3, [r7, #8]
   return(result);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f023 0310 	bic.w	r3, r3, #16
 800565a:	647b      	str	r3, [r7, #68]	@ 0x44
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005664:	61ba      	str	r2, [r7, #24]
 8005666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6979      	ldr	r1, [r7, #20]
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	613b      	str	r3, [r7, #16]
   return(result);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e5      	bne.n	8005644 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005686:	bf00      	nop
 8005688:	3754      	adds	r7, #84	@ 0x54
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff ff7a 	bl	80055a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b21      	cmp	r3, #33	@ 0x21
 80056c6:	d13e      	bne.n	8005746 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d0:	d114      	bne.n	80056fc <UART_Transmit_IT+0x48>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d110      	bne.n	80056fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	1c9a      	adds	r2, r3, #2
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	621a      	str	r2, [r3, #32]
 80056fa:	e008      	b.n	800570e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	1c59      	adds	r1, r3, #1
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6211      	str	r1, [r2, #32]
 8005706:	781a      	ldrb	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29b      	uxth	r3, r3
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	4619      	mov	r1, r3
 800571c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10f      	bne.n	8005742 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005730:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005740:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	e000      	b.n	8005748 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005746:	2302      	movs	r3, #2
  }
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800576a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff feff 	bl	8005578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08c      	sub	sp, #48	@ 0x30
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800578c:	2300      	movs	r3, #0
 800578e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005790:	2300      	movs	r3, #0
 8005792:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b22      	cmp	r3, #34	@ 0x22
 800579e:	f040 80aa 	bne.w	80058f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057aa:	d115      	bne.n	80057d8 <UART_Receive_IT+0x54>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d111      	bne.n	80057d8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d0:	1c9a      	adds	r2, r3, #2
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80057d6:	e024      	b.n	8005822 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057e6:	d007      	beq.n	80057f8 <UART_Receive_IT+0x74>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <UART_Receive_IT+0x82>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d106      	bne.n	8005806 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e008      	b.n	8005818 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005812:	b2da      	uxtb	r2, r3
 8005814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005816:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29b      	uxth	r3, r3
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	4619      	mov	r1, r3
 8005830:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005832:	2b00      	cmp	r3, #0
 8005834:	d15d      	bne.n	80058f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0220 	bic.w	r2, r2, #32
 8005844:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005854:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695a      	ldr	r2, [r3, #20]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005878:	2b01      	cmp	r3, #1
 800587a:	d135      	bne.n	80058e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	613b      	str	r3, [r7, #16]
   return(result);
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f023 0310 	bic.w	r3, r3, #16
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a2:	623a      	str	r2, [r7, #32]
 80058a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	69f9      	ldr	r1, [r7, #28]
 80058a8:	6a3a      	ldr	r2, [r7, #32]
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d10a      	bne.n	80058da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7ff fe67 	bl	80055b4 <HAL_UARTEx_RxEventCallback>
 80058e6:	e002      	b.n	80058ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff fe4f 	bl	800558c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	e002      	b.n	80058f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e000      	b.n	80058f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80058f6:	2302      	movs	r3, #2
  }
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3730      	adds	r7, #48	@ 0x30
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005904:	b0c0      	sub	sp, #256	@ 0x100
 8005906:	af00      	add	r7, sp, #0
 8005908:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591c:	68d9      	ldr	r1, [r3, #12]
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	ea40 0301 	orr.w	r3, r0, r1
 8005928:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	431a      	orrs	r2, r3
 8005938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	431a      	orrs	r2, r3
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005958:	f021 010c 	bic.w	r1, r1, #12
 800595c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005966:	430b      	orrs	r3, r1
 8005968:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800596a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597a:	6999      	ldr	r1, [r3, #24]
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	ea40 0301 	orr.w	r3, r0, r1
 8005986:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	4b8f      	ldr	r3, [pc, #572]	@ (8005bcc <UART_SetConfig+0x2cc>)
 8005990:	429a      	cmp	r2, r3
 8005992:	d005      	beq.n	80059a0 <UART_SetConfig+0xa0>
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4b8d      	ldr	r3, [pc, #564]	@ (8005bd0 <UART_SetConfig+0x2d0>)
 800599c:	429a      	cmp	r2, r3
 800599e:	d104      	bne.n	80059aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059a0:	f7fe fa4c 	bl	8003e3c <HAL_RCC_GetPCLK2Freq>
 80059a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059a8:	e003      	b.n	80059b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059aa:	f7fe fa33 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 80059ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059bc:	f040 810c 	bne.w	8005bd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059d2:	4622      	mov	r2, r4
 80059d4:	462b      	mov	r3, r5
 80059d6:	1891      	adds	r1, r2, r2
 80059d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059da:	415b      	adcs	r3, r3
 80059dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059e2:	4621      	mov	r1, r4
 80059e4:	eb12 0801 	adds.w	r8, r2, r1
 80059e8:	4629      	mov	r1, r5
 80059ea:	eb43 0901 	adc.w	r9, r3, r1
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a02:	4690      	mov	r8, r2
 8005a04:	4699      	mov	r9, r3
 8005a06:	4623      	mov	r3, r4
 8005a08:	eb18 0303 	adds.w	r3, r8, r3
 8005a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a10:	462b      	mov	r3, r5
 8005a12:	eb49 0303 	adc.w	r3, r9, r3
 8005a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a2e:	460b      	mov	r3, r1
 8005a30:	18db      	adds	r3, r3, r3
 8005a32:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a34:	4613      	mov	r3, r2
 8005a36:	eb42 0303 	adc.w	r3, r2, r3
 8005a3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a44:	f7fa fc1c 	bl	8000280 <__aeabi_uldivmod>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4b61      	ldr	r3, [pc, #388]	@ (8005bd4 <UART_SetConfig+0x2d4>)
 8005a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	011c      	lsls	r4, r3, #4
 8005a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a68:	4642      	mov	r2, r8
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	1891      	adds	r1, r2, r2
 8005a6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a70:	415b      	adcs	r3, r3
 8005a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a78:	4641      	mov	r1, r8
 8005a7a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a7e:	4649      	mov	r1, r9
 8005a80:	eb43 0b01 	adc.w	fp, r3, r1
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a98:	4692      	mov	sl, r2
 8005a9a:	469b      	mov	fp, r3
 8005a9c:	4643      	mov	r3, r8
 8005a9e:	eb1a 0303 	adds.w	r3, sl, r3
 8005aa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	eb4b 0303 	adc.w	r3, fp, r3
 8005aac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005abc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ac0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	18db      	adds	r3, r3, r3
 8005ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aca:	4613      	mov	r3, r2
 8005acc:	eb42 0303 	adc.w	r3, r2, r3
 8005ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ad6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ada:	f7fa fbd1 	bl	8000280 <__aeabi_uldivmod>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8005bd4 <UART_SetConfig+0x2d4>)
 8005ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	2264      	movs	r2, #100	@ 0x64
 8005aee:	fb02 f303 	mul.w	r3, r2, r3
 8005af2:	1acb      	subs	r3, r1, r3
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005afa:	4b36      	ldr	r3, [pc, #216]	@ (8005bd4 <UART_SetConfig+0x2d4>)
 8005afc:	fba3 2302 	umull	r2, r3, r3, r2
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b08:	441c      	add	r4, r3
 8005b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b1c:	4642      	mov	r2, r8
 8005b1e:	464b      	mov	r3, r9
 8005b20:	1891      	adds	r1, r2, r2
 8005b22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b24:	415b      	adcs	r3, r3
 8005b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b2c:	4641      	mov	r1, r8
 8005b2e:	1851      	adds	r1, r2, r1
 8005b30:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b32:	4649      	mov	r1, r9
 8005b34:	414b      	adcs	r3, r1
 8005b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b44:	4659      	mov	r1, fp
 8005b46:	00cb      	lsls	r3, r1, #3
 8005b48:	4651      	mov	r1, sl
 8005b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b4e:	4651      	mov	r1, sl
 8005b50:	00ca      	lsls	r2, r1, #3
 8005b52:	4610      	mov	r0, r2
 8005b54:	4619      	mov	r1, r3
 8005b56:	4603      	mov	r3, r0
 8005b58:	4642      	mov	r2, r8
 8005b5a:	189b      	adds	r3, r3, r2
 8005b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b60:	464b      	mov	r3, r9
 8005b62:	460a      	mov	r2, r1
 8005b64:	eb42 0303 	adc.w	r3, r2, r3
 8005b68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b80:	460b      	mov	r3, r1
 8005b82:	18db      	adds	r3, r3, r3
 8005b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b86:	4613      	mov	r3, r2
 8005b88:	eb42 0303 	adc.w	r3, r2, r3
 8005b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b96:	f7fa fb73 	bl	8000280 <__aeabi_uldivmod>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <UART_SetConfig+0x2d4>)
 8005ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	2164      	movs	r1, #100	@ 0x64
 8005ba8:	fb01 f303 	mul.w	r3, r1, r3
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	3332      	adds	r3, #50	@ 0x32
 8005bb2:	4a08      	ldr	r2, [pc, #32]	@ (8005bd4 <UART_SetConfig+0x2d4>)
 8005bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	f003 0207 	and.w	r2, r3, #7
 8005bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4422      	add	r2, r4
 8005bc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bc8:	e106      	b.n	8005dd8 <UART_SetConfig+0x4d8>
 8005bca:	bf00      	nop
 8005bcc:	40011000 	.word	0x40011000
 8005bd0:	40011400 	.word	0x40011400
 8005bd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005be2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005be6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bea:	4642      	mov	r2, r8
 8005bec:	464b      	mov	r3, r9
 8005bee:	1891      	adds	r1, r2, r2
 8005bf0:	6239      	str	r1, [r7, #32]
 8005bf2:	415b      	adcs	r3, r3
 8005bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	1854      	adds	r4, r2, r1
 8005bfe:	4649      	mov	r1, r9
 8005c00:	eb43 0501 	adc.w	r5, r3, r1
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	00eb      	lsls	r3, r5, #3
 8005c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c12:	00e2      	lsls	r2, r4, #3
 8005c14:	4614      	mov	r4, r2
 8005c16:	461d      	mov	r5, r3
 8005c18:	4643      	mov	r3, r8
 8005c1a:	18e3      	adds	r3, r4, r3
 8005c1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c20:	464b      	mov	r3, r9
 8005c22:	eb45 0303 	adc.w	r3, r5, r3
 8005c26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c46:	4629      	mov	r1, r5
 8005c48:	008b      	lsls	r3, r1, #2
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c50:	4621      	mov	r1, r4
 8005c52:	008a      	lsls	r2, r1, #2
 8005c54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c58:	f7fa fb12 	bl	8000280 <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4b60      	ldr	r3, [pc, #384]	@ (8005de4 <UART_SetConfig+0x4e4>)
 8005c62:	fba3 2302 	umull	r2, r3, r3, r2
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	011c      	lsls	r4, r3, #4
 8005c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	464b      	mov	r3, r9
 8005c80:	1891      	adds	r1, r2, r2
 8005c82:	61b9      	str	r1, [r7, #24]
 8005c84:	415b      	adcs	r3, r3
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	1851      	adds	r1, r2, r1
 8005c90:	6139      	str	r1, [r7, #16]
 8005c92:	4649      	mov	r1, r9
 8005c94:	414b      	adcs	r3, r1
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	00cb      	lsls	r3, r1, #3
 8005ca8:	4651      	mov	r1, sl
 8005caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cae:	4651      	mov	r1, sl
 8005cb0:	00ca      	lsls	r2, r1, #3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	4642      	mov	r2, r8
 8005cba:	189b      	adds	r3, r3, r2
 8005cbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	460a      	mov	r2, r1
 8005cc4:	eb42 0303 	adc.w	r3, r2, r3
 8005cc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	008b      	lsls	r3, r1, #2
 8005ce8:	4641      	mov	r1, r8
 8005cea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cee:	4641      	mov	r1, r8
 8005cf0:	008a      	lsls	r2, r1, #2
 8005cf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005cf6:	f7fa fac3 	bl	8000280 <__aeabi_uldivmod>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4b38      	ldr	r3, [pc, #224]	@ (8005de4 <UART_SetConfig+0x4e4>)
 8005d02:	fba3 2301 	umull	r2, r3, r3, r1
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	2264      	movs	r2, #100	@ 0x64
 8005d0a:	fb02 f303 	mul.w	r3, r2, r3
 8005d0e:	1acb      	subs	r3, r1, r3
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	3332      	adds	r3, #50	@ 0x32
 8005d14:	4a33      	ldr	r2, [pc, #204]	@ (8005de4 <UART_SetConfig+0x4e4>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d20:	441c      	add	r4, r3
 8005d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d26:	2200      	movs	r2, #0
 8005d28:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d30:	4642      	mov	r2, r8
 8005d32:	464b      	mov	r3, r9
 8005d34:	1891      	adds	r1, r2, r2
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	415b      	adcs	r3, r3
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d40:	4641      	mov	r1, r8
 8005d42:	1851      	adds	r1, r2, r1
 8005d44:	6039      	str	r1, [r7, #0]
 8005d46:	4649      	mov	r1, r9
 8005d48:	414b      	adcs	r3, r1
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d58:	4659      	mov	r1, fp
 8005d5a:	00cb      	lsls	r3, r1, #3
 8005d5c:	4651      	mov	r1, sl
 8005d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d62:	4651      	mov	r1, sl
 8005d64:	00ca      	lsls	r2, r1, #3
 8005d66:	4610      	mov	r0, r2
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	189b      	adds	r3, r3, r2
 8005d70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d72:	464b      	mov	r3, r9
 8005d74:	460a      	mov	r2, r1
 8005d76:	eb42 0303 	adc.w	r3, r2, r3
 8005d7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d86:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d94:	4649      	mov	r1, r9
 8005d96:	008b      	lsls	r3, r1, #2
 8005d98:	4641      	mov	r1, r8
 8005d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d9e:	4641      	mov	r1, r8
 8005da0:	008a      	lsls	r2, r1, #2
 8005da2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005da6:	f7fa fa6b 	bl	8000280 <__aeabi_uldivmod>
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	4b0d      	ldr	r3, [pc, #52]	@ (8005de4 <UART_SetConfig+0x4e4>)
 8005db0:	fba3 1302 	umull	r1, r3, r3, r2
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	2164      	movs	r1, #100	@ 0x64
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	3332      	adds	r3, #50	@ 0x32
 8005dc2:	4a08      	ldr	r2, [pc, #32]	@ (8005de4 <UART_SetConfig+0x4e4>)
 8005dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	f003 020f 	and.w	r2, r3, #15
 8005dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4422      	add	r2, r4
 8005dd6:	609a      	str	r2, [r3, #8]
}
 8005dd8:	bf00      	nop
 8005dda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005dde:	46bd      	mov	sp, r7
 8005de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005de4:	51eb851f 	.word	0x51eb851f

08005de8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dfa:	2b84      	cmp	r3, #132	@ 0x84
 8005dfc:	d005      	beq.n	8005e0a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005dfe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4413      	add	r3, r2
 8005e06:	3303      	adds	r3, #3
 8005e08:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005e1c:	f000 fafc 	bl	8006418 <vTaskStartScheduler>
  
  return osOK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e28:	b089      	sub	sp, #36	@ 0x24
 8005e2a:	af04      	add	r7, sp, #16
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d020      	beq.n	8005e7a <osThreadCreate+0x54>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01c      	beq.n	8005e7a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685c      	ldr	r4, [r3, #4]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691e      	ldr	r6, [r3, #16]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff ffc8 	bl	8005de8 <makeFreeRtosPriority>
 8005e58:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e62:	9202      	str	r2, [sp, #8]
 8005e64:	9301      	str	r3, [sp, #4]
 8005e66:	9100      	str	r1, [sp, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	4632      	mov	r2, r6
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f000 f8ed 	bl	800604e <xTaskCreateStatic>
 8005e74:	4603      	mov	r3, r0
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	e01c      	b.n	8005eb4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685c      	ldr	r4, [r3, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e86:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff ffaa 	bl	8005de8 <makeFreeRtosPriority>
 8005e94:	4602      	mov	r2, r0
 8005e96:	f107 030c 	add.w	r3, r7, #12
 8005e9a:	9301      	str	r3, [sp, #4]
 8005e9c:	9200      	str	r2, [sp, #0]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	4632      	mov	r2, r6
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f000 f932 	bl	800610e <xTaskCreate>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d001      	beq.n	8005eb4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e000      	b.n	8005eb6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ebe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <osDelay+0x16>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	e000      	b.n	8005ed6 <osDelay+0x18>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fa68 	bl	80063ac <vTaskDelay>
  
  return osOK;
 8005edc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f103 0208 	add.w	r2, r3, #8
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f04f 32ff 	mov.w	r2, #4294967295
 8005efe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f103 0208 	add.w	r2, r3, #8
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f103 0208 	add.w	r2, r3, #8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	601a      	str	r2, [r3, #0]
}
 8005f7c:	bf00      	nop
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d103      	bne.n	8005fa8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	e00c      	b.n	8005fc2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3308      	adds	r3, #8
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	e002      	b.n	8005fb6 <vListInsert+0x2e>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d2f6      	bcs.n	8005fb0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	601a      	str	r2, [r3, #0]
}
 8005fee:	bf00      	nop
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b085      	sub	sp, #20
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6892      	ldr	r2, [r2, #8]
 8006010:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6852      	ldr	r2, [r2, #4]
 800601a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d103      	bne.n	800602e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	1e5a      	subs	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800604e:	b580      	push	{r7, lr}
 8006050:	b08e      	sub	sp, #56	@ 0x38
 8006052:	af04      	add	r7, sp, #16
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800605c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10b      	bne.n	800607a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	e7fd      	b.n	8006076 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800607a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10b      	bne.n	8006098 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	61fb      	str	r3, [r7, #28]
}
 8006092:	bf00      	nop
 8006094:	bf00      	nop
 8006096:	e7fd      	b.n	8006094 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006098:	23a0      	movs	r3, #160	@ 0xa0
 800609a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	2ba0      	cmp	r3, #160	@ 0xa0
 80060a0:	d00b      	beq.n	80060ba <xTaskCreateStatic+0x6c>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	61bb      	str	r3, [r7, #24]
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop
 80060b8:	e7fd      	b.n	80060b6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01e      	beq.n	8006100 <xTaskCreateStatic+0xb2>
 80060c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01b      	beq.n	8006100 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ca:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060d0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d4:	2202      	movs	r2, #2
 80060d6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060da:	2300      	movs	r3, #0
 80060dc:	9303      	str	r3, [sp, #12]
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	9302      	str	r3, [sp, #8]
 80060e2:	f107 0314 	add.w	r3, r7, #20
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f850 	bl	8006198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060fa:	f000 f8ed 	bl	80062d8 <prvAddNewTaskToReadyList>
 80060fe:	e001      	b.n	8006104 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006100:	2300      	movs	r3, #0
 8006102:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006104:	697b      	ldr	r3, [r7, #20]
	}
 8006106:	4618      	mov	r0, r3
 8006108:	3728      	adds	r7, #40	@ 0x28
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800610e:	b580      	push	{r7, lr}
 8006110:	b08c      	sub	sp, #48	@ 0x30
 8006112:	af04      	add	r7, sp, #16
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	603b      	str	r3, [r7, #0]
 800611a:	4613      	mov	r3, r2
 800611c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4618      	mov	r0, r3
 8006124:	f000 ff00 	bl	8006f28 <pvPortMalloc>
 8006128:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00e      	beq.n	800614e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006130:	20a0      	movs	r0, #160	@ 0xa0
 8006132:	f000 fef9 	bl	8006f28 <pvPortMalloc>
 8006136:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	631a      	str	r2, [r3, #48]	@ 0x30
 8006144:	e005      	b.n	8006152 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006146:	6978      	ldr	r0, [r7, #20]
 8006148:	f000 ffbc 	bl	80070c4 <vPortFree>
 800614c:	e001      	b.n	8006152 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d017      	beq.n	8006188 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006160:	88fa      	ldrh	r2, [r7, #6]
 8006162:	2300      	movs	r3, #0
 8006164:	9303      	str	r3, [sp, #12]
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	9302      	str	r3, [sp, #8]
 800616a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68b9      	ldr	r1, [r7, #8]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 f80e 	bl	8006198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800617c:	69f8      	ldr	r0, [r7, #28]
 800617e:	f000 f8ab 	bl	80062d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006182:	2301      	movs	r3, #1
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	e002      	b.n	800618e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006188:	f04f 33ff 	mov.w	r3, #4294967295
 800618c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800618e:	69bb      	ldr	r3, [r7, #24]
	}
 8006190:	4618      	mov	r0, r3
 8006192:	3720      	adds	r7, #32
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061b0:	3b01      	subs	r3, #1
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	f023 0307 	bic.w	r3, r3, #7
 80061be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00b      	beq.n	80061e2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	617b      	str	r3, [r7, #20]
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	e7fd      	b.n	80061de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01f      	beq.n	8006228 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061e8:	2300      	movs	r3, #0
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	e012      	b.n	8006214 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	4413      	add	r3, r2
 80061f4:	7819      	ldrb	r1, [r3, #0]
 80061f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	4413      	add	r3, r2
 80061fc:	3334      	adds	r3, #52	@ 0x34
 80061fe:	460a      	mov	r2, r1
 8006200:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	4413      	add	r3, r2
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d006      	beq.n	800621c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	3301      	adds	r3, #1
 8006212:	61fb      	str	r3, [r7, #28]
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	2b0f      	cmp	r3, #15
 8006218:	d9e9      	bls.n	80061ee <prvInitialiseNewTask+0x56>
 800621a:	e000      	b.n	800621e <prvInitialiseNewTask+0x86>
			{
				break;
 800621c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800621e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006226:	e003      	b.n	8006230 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006232:	2b06      	cmp	r3, #6
 8006234:	d901      	bls.n	800623a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006236:	2306      	movs	r3, #6
 8006238:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800623a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800623e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006244:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006248:	2200      	movs	r2, #0
 800624a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	3304      	adds	r3, #4
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff fe68 	bl	8005f26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	3318      	adds	r3, #24
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff fe63 	bl	8005f26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006264:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	f1c3 0207 	rsb	r2, r3, #7
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006274:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	2200      	movs	r2, #0
 800627a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	2200      	movs	r2, #0
 8006282:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006288:	334c      	adds	r3, #76	@ 0x4c
 800628a:	224c      	movs	r2, #76	@ 0x4c
 800628c:	2100      	movs	r1, #0
 800628e:	4618      	mov	r0, r3
 8006290:	f001 fa05 	bl	800769e <memset>
 8006294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006296:	4a0d      	ldr	r2, [pc, #52]	@ (80062cc <prvInitialiseNewTask+0x134>)
 8006298:	651a      	str	r2, [r3, #80]	@ 0x50
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	4a0c      	ldr	r2, [pc, #48]	@ (80062d0 <prvInitialiseNewTask+0x138>)
 800629e:	655a      	str	r2, [r3, #84]	@ 0x54
 80062a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a2:	4a0c      	ldr	r2, [pc, #48]	@ (80062d4 <prvInitialiseNewTask+0x13c>)
 80062a4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	68f9      	ldr	r1, [r7, #12]
 80062aa:	69b8      	ldr	r0, [r7, #24]
 80062ac:	f000 fc2a 	bl	8006b04 <pxPortInitialiseStack>
 80062b0:	4602      	mov	r2, r0
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062c2:	bf00      	nop
 80062c4:	3720      	adds	r7, #32
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	200043f8 	.word	0x200043f8
 80062d0:	20004460 	.word	0x20004460
 80062d4:	200044c8 	.word	0x200044c8

080062d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062e0:	f000 fd42 	bl	8006d68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062e4:	4b2a      	ldr	r3, [pc, #168]	@ (8006390 <prvAddNewTaskToReadyList+0xb8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3301      	adds	r3, #1
 80062ea:	4a29      	ldr	r2, [pc, #164]	@ (8006390 <prvAddNewTaskToReadyList+0xb8>)
 80062ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062ee:	4b29      	ldr	r3, [pc, #164]	@ (8006394 <prvAddNewTaskToReadyList+0xbc>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d109      	bne.n	800630a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062f6:	4a27      	ldr	r2, [pc, #156]	@ (8006394 <prvAddNewTaskToReadyList+0xbc>)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062fc:	4b24      	ldr	r3, [pc, #144]	@ (8006390 <prvAddNewTaskToReadyList+0xb8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d110      	bne.n	8006326 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006304:	f000 fad4 	bl	80068b0 <prvInitialiseTaskLists>
 8006308:	e00d      	b.n	8006326 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800630a:	4b23      	ldr	r3, [pc, #140]	@ (8006398 <prvAddNewTaskToReadyList+0xc0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d109      	bne.n	8006326 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006312:	4b20      	ldr	r3, [pc, #128]	@ (8006394 <prvAddNewTaskToReadyList+0xbc>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631c:	429a      	cmp	r2, r3
 800631e:	d802      	bhi.n	8006326 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006320:	4a1c      	ldr	r2, [pc, #112]	@ (8006394 <prvAddNewTaskToReadyList+0xbc>)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006326:	4b1d      	ldr	r3, [pc, #116]	@ (800639c <prvAddNewTaskToReadyList+0xc4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3301      	adds	r3, #1
 800632c:	4a1b      	ldr	r2, [pc, #108]	@ (800639c <prvAddNewTaskToReadyList+0xc4>)
 800632e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006334:	2201      	movs	r2, #1
 8006336:	409a      	lsls	r2, r3
 8006338:	4b19      	ldr	r3, [pc, #100]	@ (80063a0 <prvAddNewTaskToReadyList+0xc8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4313      	orrs	r3, r2
 800633e:	4a18      	ldr	r2, [pc, #96]	@ (80063a0 <prvAddNewTaskToReadyList+0xc8>)
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4a15      	ldr	r2, [pc, #84]	@ (80063a4 <prvAddNewTaskToReadyList+0xcc>)
 8006350:	441a      	add	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3304      	adds	r3, #4
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f7ff fdf1 	bl	8005f40 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800635e:	f000 fd35 	bl	8006dcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006362:	4b0d      	ldr	r3, [pc, #52]	@ (8006398 <prvAddNewTaskToReadyList+0xc0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00e      	beq.n	8006388 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800636a:	4b0a      	ldr	r3, [pc, #40]	@ (8006394 <prvAddNewTaskToReadyList+0xbc>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006374:	429a      	cmp	r2, r3
 8006376:	d207      	bcs.n	8006388 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006378:	4b0b      	ldr	r3, [pc, #44]	@ (80063a8 <prvAddNewTaskToReadyList+0xd0>)
 800637a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006388:	bf00      	nop
 800638a:	3708      	adds	r7, #8
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	2000079c 	.word	0x2000079c
 8006394:	2000069c 	.word	0x2000069c
 8006398:	200007a8 	.word	0x200007a8
 800639c:	200007b8 	.word	0x200007b8
 80063a0:	200007a4 	.word	0x200007a4
 80063a4:	200006a0 	.word	0x200006a0
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d018      	beq.n	80063f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063be:	4b14      	ldr	r3, [pc, #80]	@ (8006410 <vTaskDelay+0x64>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00b      	beq.n	80063de <vTaskDelay+0x32>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	60bb      	str	r3, [r7, #8]
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	e7fd      	b.n	80063da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80063de:	f000 f885 	bl	80064ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063e2:	2100      	movs	r1, #0
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fb27 	bl	8006a38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063ea:	f000 f88d 	bl	8006508 <xTaskResumeAll>
 80063ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d107      	bne.n	8006406 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80063f6:	4b07      	ldr	r3, [pc, #28]	@ (8006414 <vTaskDelay+0x68>)
 80063f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006406:	bf00      	nop
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	200007c4 	.word	0x200007c4
 8006414:	e000ed04 	.word	0xe000ed04

08006418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08a      	sub	sp, #40	@ 0x28
 800641c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006422:	2300      	movs	r3, #0
 8006424:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006426:	463a      	mov	r2, r7
 8006428:	1d39      	adds	r1, r7, #4
 800642a:	f107 0308 	add.w	r3, r7, #8
 800642e:	4618      	mov	r0, r3
 8006430:	f7fa f8bc 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	9202      	str	r2, [sp, #8]
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	2300      	movs	r3, #0
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	2300      	movs	r3, #0
 8006444:	460a      	mov	r2, r1
 8006446:	4921      	ldr	r1, [pc, #132]	@ (80064cc <vTaskStartScheduler+0xb4>)
 8006448:	4821      	ldr	r0, [pc, #132]	@ (80064d0 <vTaskStartScheduler+0xb8>)
 800644a:	f7ff fe00 	bl	800604e <xTaskCreateStatic>
 800644e:	4603      	mov	r3, r0
 8006450:	4a20      	ldr	r2, [pc, #128]	@ (80064d4 <vTaskStartScheduler+0xbc>)
 8006452:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006454:	4b1f      	ldr	r3, [pc, #124]	@ (80064d4 <vTaskStartScheduler+0xbc>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800645c:	2301      	movs	r3, #1
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	e001      	b.n	8006466 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d11b      	bne.n	80064a4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	613b      	str	r3, [r7, #16]
}
 800647e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006480:	4b15      	ldr	r3, [pc, #84]	@ (80064d8 <vTaskStartScheduler+0xc0>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	334c      	adds	r3, #76	@ 0x4c
 8006486:	4a15      	ldr	r2, [pc, #84]	@ (80064dc <vTaskStartScheduler+0xc4>)
 8006488:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800648a:	4b15      	ldr	r3, [pc, #84]	@ (80064e0 <vTaskStartScheduler+0xc8>)
 800648c:	f04f 32ff 	mov.w	r2, #4294967295
 8006490:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006492:	4b14      	ldr	r3, [pc, #80]	@ (80064e4 <vTaskStartScheduler+0xcc>)
 8006494:	2201      	movs	r2, #1
 8006496:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006498:	4b13      	ldr	r3, [pc, #76]	@ (80064e8 <vTaskStartScheduler+0xd0>)
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800649e:	f000 fbbf 	bl	8006c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064a2:	e00f      	b.n	80064c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064aa:	d10b      	bne.n	80064c4 <vTaskStartScheduler+0xac>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	60fb      	str	r3, [r7, #12]
}
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	e7fd      	b.n	80064c0 <vTaskStartScheduler+0xa8>
}
 80064c4:	bf00      	nop
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	0800832c 	.word	0x0800832c
 80064d0:	08006881 	.word	0x08006881
 80064d4:	200007c0 	.word	0x200007c0
 80064d8:	2000069c 	.word	0x2000069c
 80064dc:	20000094 	.word	0x20000094
 80064e0:	200007bc 	.word	0x200007bc
 80064e4:	200007a8 	.word	0x200007a8
 80064e8:	200007a0 	.word	0x200007a0

080064ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80064f0:	4b04      	ldr	r3, [pc, #16]	@ (8006504 <vTaskSuspendAll+0x18>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3301      	adds	r3, #1
 80064f6:	4a03      	ldr	r2, [pc, #12]	@ (8006504 <vTaskSuspendAll+0x18>)
 80064f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80064fa:	bf00      	nop
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	200007c4 	.word	0x200007c4

08006508 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006512:	2300      	movs	r3, #0
 8006514:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006516:	4b42      	ldr	r3, [pc, #264]	@ (8006620 <xTaskResumeAll+0x118>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10b      	bne.n	8006536 <xTaskResumeAll+0x2e>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	603b      	str	r3, [r7, #0]
}
 8006530:	bf00      	nop
 8006532:	bf00      	nop
 8006534:	e7fd      	b.n	8006532 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006536:	f000 fc17 	bl	8006d68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800653a:	4b39      	ldr	r3, [pc, #228]	@ (8006620 <xTaskResumeAll+0x118>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3b01      	subs	r3, #1
 8006540:	4a37      	ldr	r2, [pc, #220]	@ (8006620 <xTaskResumeAll+0x118>)
 8006542:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006544:	4b36      	ldr	r3, [pc, #216]	@ (8006620 <xTaskResumeAll+0x118>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d161      	bne.n	8006610 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800654c:	4b35      	ldr	r3, [pc, #212]	@ (8006624 <xTaskResumeAll+0x11c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d05d      	beq.n	8006610 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006554:	e02e      	b.n	80065b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006556:	4b34      	ldr	r3, [pc, #208]	@ (8006628 <xTaskResumeAll+0x120>)
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3318      	adds	r3, #24
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff fd49 	bl	8005ffa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3304      	adds	r3, #4
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fd44 	bl	8005ffa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006576:	2201      	movs	r2, #1
 8006578:	409a      	lsls	r2, r3
 800657a:	4b2c      	ldr	r3, [pc, #176]	@ (800662c <xTaskResumeAll+0x124>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4313      	orrs	r3, r2
 8006580:	4a2a      	ldr	r2, [pc, #168]	@ (800662c <xTaskResumeAll+0x124>)
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006588:	4613      	mov	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4a27      	ldr	r2, [pc, #156]	@ (8006630 <xTaskResumeAll+0x128>)
 8006592:	441a      	add	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3304      	adds	r3, #4
 8006598:	4619      	mov	r1, r3
 800659a:	4610      	mov	r0, r2
 800659c:	f7ff fcd0 	bl	8005f40 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065a4:	4b23      	ldr	r3, [pc, #140]	@ (8006634 <xTaskResumeAll+0x12c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d302      	bcc.n	80065b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80065ae:	4b22      	ldr	r3, [pc, #136]	@ (8006638 <xTaskResumeAll+0x130>)
 80065b0:	2201      	movs	r2, #1
 80065b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006628 <xTaskResumeAll+0x120>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1cc      	bne.n	8006556 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065c2:	f000 fa19 	bl	80069f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065c6:	4b1d      	ldr	r3, [pc, #116]	@ (800663c <xTaskResumeAll+0x134>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d010      	beq.n	80065f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065d2:	f000 f837 	bl	8006644 <xTaskIncrementTick>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80065dc:	4b16      	ldr	r3, [pc, #88]	@ (8006638 <xTaskResumeAll+0x130>)
 80065de:	2201      	movs	r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1f1      	bne.n	80065d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80065ee:	4b13      	ldr	r3, [pc, #76]	@ (800663c <xTaskResumeAll+0x134>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065f4:	4b10      	ldr	r3, [pc, #64]	@ (8006638 <xTaskResumeAll+0x130>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d009      	beq.n	8006610 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065fc:	2301      	movs	r3, #1
 80065fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006600:	4b0f      	ldr	r3, [pc, #60]	@ (8006640 <xTaskResumeAll+0x138>)
 8006602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006610:	f000 fbdc 	bl	8006dcc <vPortExitCritical>

	return xAlreadyYielded;
 8006614:	68bb      	ldr	r3, [r7, #8]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	200007c4 	.word	0x200007c4
 8006624:	2000079c 	.word	0x2000079c
 8006628:	2000075c 	.word	0x2000075c
 800662c:	200007a4 	.word	0x200007a4
 8006630:	200006a0 	.word	0x200006a0
 8006634:	2000069c 	.word	0x2000069c
 8006638:	200007b0 	.word	0x200007b0
 800663c:	200007ac 	.word	0x200007ac
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800664a:	2300      	movs	r3, #0
 800664c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800664e:	4b4f      	ldr	r3, [pc, #316]	@ (800678c <xTaskIncrementTick+0x148>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	f040 808f 	bne.w	8006776 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006658:	4b4d      	ldr	r3, [pc, #308]	@ (8006790 <xTaskIncrementTick+0x14c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3301      	adds	r3, #1
 800665e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006660:	4a4b      	ldr	r2, [pc, #300]	@ (8006790 <xTaskIncrementTick+0x14c>)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d121      	bne.n	80066b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800666c:	4b49      	ldr	r3, [pc, #292]	@ (8006794 <xTaskIncrementTick+0x150>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00b      	beq.n	800668e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	603b      	str	r3, [r7, #0]
}
 8006688:	bf00      	nop
 800668a:	bf00      	nop
 800668c:	e7fd      	b.n	800668a <xTaskIncrementTick+0x46>
 800668e:	4b41      	ldr	r3, [pc, #260]	@ (8006794 <xTaskIncrementTick+0x150>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	4b40      	ldr	r3, [pc, #256]	@ (8006798 <xTaskIncrementTick+0x154>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a3e      	ldr	r2, [pc, #248]	@ (8006794 <xTaskIncrementTick+0x150>)
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	4a3e      	ldr	r2, [pc, #248]	@ (8006798 <xTaskIncrementTick+0x154>)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	4b3e      	ldr	r3, [pc, #248]	@ (800679c <xTaskIncrementTick+0x158>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3301      	adds	r3, #1
 80066a8:	4a3c      	ldr	r2, [pc, #240]	@ (800679c <xTaskIncrementTick+0x158>)
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	f000 f9a4 	bl	80069f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066b0:	4b3b      	ldr	r3, [pc, #236]	@ (80067a0 <xTaskIncrementTick+0x15c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d348      	bcc.n	800674c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066ba:	4b36      	ldr	r3, [pc, #216]	@ (8006794 <xTaskIncrementTick+0x150>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d104      	bne.n	80066ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066c4:	4b36      	ldr	r3, [pc, #216]	@ (80067a0 <xTaskIncrementTick+0x15c>)
 80066c6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ca:	601a      	str	r2, [r3, #0]
					break;
 80066cc:	e03e      	b.n	800674c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ce:	4b31      	ldr	r3, [pc, #196]	@ (8006794 <xTaskIncrementTick+0x150>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d203      	bcs.n	80066ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066e6:	4a2e      	ldr	r2, [pc, #184]	@ (80067a0 <xTaskIncrementTick+0x15c>)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066ec:	e02e      	b.n	800674c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	3304      	adds	r3, #4
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7ff fc81 	bl	8005ffa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	3318      	adds	r3, #24
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff fc78 	bl	8005ffa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670e:	2201      	movs	r2, #1
 8006710:	409a      	lsls	r2, r3
 8006712:	4b24      	ldr	r3, [pc, #144]	@ (80067a4 <xTaskIncrementTick+0x160>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4313      	orrs	r3, r2
 8006718:	4a22      	ldr	r2, [pc, #136]	@ (80067a4 <xTaskIncrementTick+0x160>)
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4a1f      	ldr	r2, [pc, #124]	@ (80067a8 <xTaskIncrementTick+0x164>)
 800672a:	441a      	add	r2, r3
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	3304      	adds	r3, #4
 8006730:	4619      	mov	r1, r3
 8006732:	4610      	mov	r0, r2
 8006734:	f7ff fc04 	bl	8005f40 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800673c:	4b1b      	ldr	r3, [pc, #108]	@ (80067ac <xTaskIncrementTick+0x168>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006742:	429a      	cmp	r2, r3
 8006744:	d3b9      	bcc.n	80066ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006746:	2301      	movs	r3, #1
 8006748:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800674a:	e7b6      	b.n	80066ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800674c:	4b17      	ldr	r3, [pc, #92]	@ (80067ac <xTaskIncrementTick+0x168>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006752:	4915      	ldr	r1, [pc, #84]	@ (80067a8 <xTaskIncrementTick+0x164>)
 8006754:	4613      	mov	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	440b      	add	r3, r1
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d901      	bls.n	8006768 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006764:	2301      	movs	r3, #1
 8006766:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006768:	4b11      	ldr	r3, [pc, #68]	@ (80067b0 <xTaskIncrementTick+0x16c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d007      	beq.n	8006780 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006770:	2301      	movs	r3, #1
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	e004      	b.n	8006780 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006776:	4b0f      	ldr	r3, [pc, #60]	@ (80067b4 <xTaskIncrementTick+0x170>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3301      	adds	r3, #1
 800677c:	4a0d      	ldr	r2, [pc, #52]	@ (80067b4 <xTaskIncrementTick+0x170>)
 800677e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006780:	697b      	ldr	r3, [r7, #20]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	200007c4 	.word	0x200007c4
 8006790:	200007a0 	.word	0x200007a0
 8006794:	20000754 	.word	0x20000754
 8006798:	20000758 	.word	0x20000758
 800679c:	200007b4 	.word	0x200007b4
 80067a0:	200007bc 	.word	0x200007bc
 80067a4:	200007a4 	.word	0x200007a4
 80067a8:	200006a0 	.word	0x200006a0
 80067ac:	2000069c 	.word	0x2000069c
 80067b0:	200007b0 	.word	0x200007b0
 80067b4:	200007ac 	.word	0x200007ac

080067b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067be:	4b2a      	ldr	r3, [pc, #168]	@ (8006868 <vTaskSwitchContext+0xb0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067c6:	4b29      	ldr	r3, [pc, #164]	@ (800686c <vTaskSwitchContext+0xb4>)
 80067c8:	2201      	movs	r2, #1
 80067ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067cc:	e045      	b.n	800685a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80067ce:	4b27      	ldr	r3, [pc, #156]	@ (800686c <vTaskSwitchContext+0xb4>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067d4:	4b26      	ldr	r3, [pc, #152]	@ (8006870 <vTaskSwitchContext+0xb8>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	fab3 f383 	clz	r3, r3
 80067e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80067e2:	7afb      	ldrb	r3, [r7, #11]
 80067e4:	f1c3 031f 	rsb	r3, r3, #31
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	4922      	ldr	r1, [pc, #136]	@ (8006874 <vTaskSwitchContext+0xbc>)
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	4613      	mov	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	440b      	add	r3, r1
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10b      	bne.n	8006816 <vTaskSwitchContext+0x5e>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	607b      	str	r3, [r7, #4]
}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	e7fd      	b.n	8006812 <vTaskSwitchContext+0x5a>
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4a14      	ldr	r2, [pc, #80]	@ (8006874 <vTaskSwitchContext+0xbc>)
 8006822:	4413      	add	r3, r2
 8006824:	613b      	str	r3, [r7, #16]
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	605a      	str	r2, [r3, #4]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	3308      	adds	r3, #8
 8006838:	429a      	cmp	r2, r3
 800683a:	d104      	bne.n	8006846 <vTaskSwitchContext+0x8e>
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	605a      	str	r2, [r3, #4]
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	4a0a      	ldr	r2, [pc, #40]	@ (8006878 <vTaskSwitchContext+0xc0>)
 800684e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006850:	4b09      	ldr	r3, [pc, #36]	@ (8006878 <vTaskSwitchContext+0xc0>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	334c      	adds	r3, #76	@ 0x4c
 8006856:	4a09      	ldr	r2, [pc, #36]	@ (800687c <vTaskSwitchContext+0xc4>)
 8006858:	6013      	str	r3, [r2, #0]
}
 800685a:	bf00      	nop
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	200007c4 	.word	0x200007c4
 800686c:	200007b0 	.word	0x200007b0
 8006870:	200007a4 	.word	0x200007a4
 8006874:	200006a0 	.word	0x200006a0
 8006878:	2000069c 	.word	0x2000069c
 800687c:	20000094 	.word	0x20000094

08006880 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006888:	f000 f852 	bl	8006930 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800688c:	4b06      	ldr	r3, [pc, #24]	@ (80068a8 <prvIdleTask+0x28>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d9f9      	bls.n	8006888 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006894:	4b05      	ldr	r3, [pc, #20]	@ (80068ac <prvIdleTask+0x2c>)
 8006896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068a4:	e7f0      	b.n	8006888 <prvIdleTask+0x8>
 80068a6:	bf00      	nop
 80068a8:	200006a0 	.word	0x200006a0
 80068ac:	e000ed04 	.word	0xe000ed04

080068b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068b6:	2300      	movs	r3, #0
 80068b8:	607b      	str	r3, [r7, #4]
 80068ba:	e00c      	b.n	80068d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4a12      	ldr	r2, [pc, #72]	@ (8006910 <prvInitialiseTaskLists+0x60>)
 80068c8:	4413      	add	r3, r2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff fb0b 	bl	8005ee6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3301      	adds	r3, #1
 80068d4:	607b      	str	r3, [r7, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b06      	cmp	r3, #6
 80068da:	d9ef      	bls.n	80068bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068dc:	480d      	ldr	r0, [pc, #52]	@ (8006914 <prvInitialiseTaskLists+0x64>)
 80068de:	f7ff fb02 	bl	8005ee6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068e2:	480d      	ldr	r0, [pc, #52]	@ (8006918 <prvInitialiseTaskLists+0x68>)
 80068e4:	f7ff faff 	bl	8005ee6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068e8:	480c      	ldr	r0, [pc, #48]	@ (800691c <prvInitialiseTaskLists+0x6c>)
 80068ea:	f7ff fafc 	bl	8005ee6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068ee:	480c      	ldr	r0, [pc, #48]	@ (8006920 <prvInitialiseTaskLists+0x70>)
 80068f0:	f7ff faf9 	bl	8005ee6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068f4:	480b      	ldr	r0, [pc, #44]	@ (8006924 <prvInitialiseTaskLists+0x74>)
 80068f6:	f7ff faf6 	bl	8005ee6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006928 <prvInitialiseTaskLists+0x78>)
 80068fc:	4a05      	ldr	r2, [pc, #20]	@ (8006914 <prvInitialiseTaskLists+0x64>)
 80068fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006900:	4b0a      	ldr	r3, [pc, #40]	@ (800692c <prvInitialiseTaskLists+0x7c>)
 8006902:	4a05      	ldr	r2, [pc, #20]	@ (8006918 <prvInitialiseTaskLists+0x68>)
 8006904:	601a      	str	r2, [r3, #0]
}
 8006906:	bf00      	nop
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	200006a0 	.word	0x200006a0
 8006914:	2000072c 	.word	0x2000072c
 8006918:	20000740 	.word	0x20000740
 800691c:	2000075c 	.word	0x2000075c
 8006920:	20000770 	.word	0x20000770
 8006924:	20000788 	.word	0x20000788
 8006928:	20000754 	.word	0x20000754
 800692c:	20000758 	.word	0x20000758

08006930 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006936:	e019      	b.n	800696c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006938:	f000 fa16 	bl	8006d68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800693c:	4b10      	ldr	r3, [pc, #64]	@ (8006980 <prvCheckTasksWaitingTermination+0x50>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3304      	adds	r3, #4
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff fb56 	bl	8005ffa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800694e:	4b0d      	ldr	r3, [pc, #52]	@ (8006984 <prvCheckTasksWaitingTermination+0x54>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3b01      	subs	r3, #1
 8006954:	4a0b      	ldr	r2, [pc, #44]	@ (8006984 <prvCheckTasksWaitingTermination+0x54>)
 8006956:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006958:	4b0b      	ldr	r3, [pc, #44]	@ (8006988 <prvCheckTasksWaitingTermination+0x58>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3b01      	subs	r3, #1
 800695e:	4a0a      	ldr	r2, [pc, #40]	@ (8006988 <prvCheckTasksWaitingTermination+0x58>)
 8006960:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006962:	f000 fa33 	bl	8006dcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f810 	bl	800698c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800696c:	4b06      	ldr	r3, [pc, #24]	@ (8006988 <prvCheckTasksWaitingTermination+0x58>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e1      	bne.n	8006938 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20000770 	.word	0x20000770
 8006984:	2000079c 	.word	0x2000079c
 8006988:	20000784 	.word	0x20000784

0800698c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	334c      	adds	r3, #76	@ 0x4c
 8006998:	4618      	mov	r0, r3
 800699a:	f000 fe99 	bl	80076d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d108      	bne.n	80069ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 fb89 	bl	80070c4 <vPortFree>
				vPortFree( pxTCB );
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fb86 	bl	80070c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069b8:	e019      	b.n	80069ee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d103      	bne.n	80069cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fb7d 	bl	80070c4 <vPortFree>
	}
 80069ca:	e010      	b.n	80069ee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d00b      	beq.n	80069ee <prvDeleteTCB+0x62>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	60fb      	str	r3, [r7, #12]
}
 80069e8:	bf00      	nop
 80069ea:	bf00      	nop
 80069ec:	e7fd      	b.n	80069ea <prvDeleteTCB+0x5e>
	}
 80069ee:	bf00      	nop
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
	...

080069f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006a30 <prvResetNextTaskUnblockTime+0x38>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d104      	bne.n	8006a12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a08:	4b0a      	ldr	r3, [pc, #40]	@ (8006a34 <prvResetNextTaskUnblockTime+0x3c>)
 8006a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a10:	e008      	b.n	8006a24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a12:	4b07      	ldr	r3, [pc, #28]	@ (8006a30 <prvResetNextTaskUnblockTime+0x38>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	4a04      	ldr	r2, [pc, #16]	@ (8006a34 <prvResetNextTaskUnblockTime+0x3c>)
 8006a22:	6013      	str	r3, [r2, #0]
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	20000754 	.word	0x20000754
 8006a34:	200007bc 	.word	0x200007bc

08006a38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a42:	4b29      	ldr	r3, [pc, #164]	@ (8006ae8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a48:	4b28      	ldr	r3, [pc, #160]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7ff fad3 	bl	8005ffa <uxListRemove>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10b      	bne.n	8006a72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006a5a:	4b24      	ldr	r3, [pc, #144]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a60:	2201      	movs	r2, #1
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	43da      	mvns	r2, r3
 8006a68:	4b21      	ldr	r3, [pc, #132]	@ (8006af0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	4a20      	ldr	r2, [pc, #128]	@ (8006af0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d10a      	bne.n	8006a90 <prvAddCurrentTaskToDelayedList+0x58>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d007      	beq.n	8006a90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a80:	4b1a      	ldr	r3, [pc, #104]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3304      	adds	r3, #4
 8006a86:	4619      	mov	r1, r3
 8006a88:	481a      	ldr	r0, [pc, #104]	@ (8006af4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a8a:	f7ff fa59 	bl	8005f40 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a8e:	e026      	b.n	8006ade <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4413      	add	r3, r2
 8006a96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a98:	4b14      	ldr	r3, [pc, #80]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d209      	bcs.n	8006abc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aa8:	4b13      	ldr	r3, [pc, #76]	@ (8006af8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	4b0f      	ldr	r3, [pc, #60]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	f7ff fa67 	bl	8005f88 <vListInsert>
}
 8006aba:	e010      	b.n	8006ade <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006abc:	4b0f      	ldr	r3, [pc, #60]	@ (8006afc <prvAddCurrentTaskToDelayedList+0xc4>)
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f7ff fa5d 	bl	8005f88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ace:	4b0c      	ldr	r3, [pc, #48]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d202      	bcs.n	8006ade <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ad8:	4a09      	ldr	r2, [pc, #36]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	6013      	str	r3, [r2, #0]
}
 8006ade:	bf00      	nop
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	200007a0 	.word	0x200007a0
 8006aec:	2000069c 	.word	0x2000069c
 8006af0:	200007a4 	.word	0x200007a4
 8006af4:	20000788 	.word	0x20000788
 8006af8:	20000758 	.word	0x20000758
 8006afc:	20000754 	.word	0x20000754
 8006b00:	200007bc 	.word	0x200007bc

08006b04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3b04      	subs	r3, #4
 8006b14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3b04      	subs	r3, #4
 8006b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f023 0201 	bic.w	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3b04      	subs	r3, #4
 8006b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b34:	4a0c      	ldr	r2, [pc, #48]	@ (8006b68 <pxPortInitialiseStack+0x64>)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3b14      	subs	r3, #20
 8006b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	3b04      	subs	r3, #4
 8006b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f06f 0202 	mvn.w	r2, #2
 8006b52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3b20      	subs	r3, #32
 8006b58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	08006b6d 	.word	0x08006b6d

08006b6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b76:	4b13      	ldr	r3, [pc, #76]	@ (8006bc4 <prvTaskExitError+0x58>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7e:	d00b      	beq.n	8006b98 <prvTaskExitError+0x2c>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	60fb      	str	r3, [r7, #12]
}
 8006b92:	bf00      	nop
 8006b94:	bf00      	nop
 8006b96:	e7fd      	b.n	8006b94 <prvTaskExitError+0x28>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	60bb      	str	r3, [r7, #8]
}
 8006baa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bac:	bf00      	nop
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0fc      	beq.n	8006bae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20000084 	.word	0x20000084
	...

08006bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006bd0:	4b07      	ldr	r3, [pc, #28]	@ (8006bf0 <pxCurrentTCBConst2>)
 8006bd2:	6819      	ldr	r1, [r3, #0]
 8006bd4:	6808      	ldr	r0, [r1, #0]
 8006bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bda:	f380 8809 	msr	PSP, r0
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f04f 0000 	mov.w	r0, #0
 8006be6:	f380 8811 	msr	BASEPRI, r0
 8006bea:	4770      	bx	lr
 8006bec:	f3af 8000 	nop.w

08006bf0 <pxCurrentTCBConst2>:
 8006bf0:	2000069c 	.word	0x2000069c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop

08006bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006bf8:	4808      	ldr	r0, [pc, #32]	@ (8006c1c <prvPortStartFirstTask+0x24>)
 8006bfa:	6800      	ldr	r0, [r0, #0]
 8006bfc:	6800      	ldr	r0, [r0, #0]
 8006bfe:	f380 8808 	msr	MSP, r0
 8006c02:	f04f 0000 	mov.w	r0, #0
 8006c06:	f380 8814 	msr	CONTROL, r0
 8006c0a:	b662      	cpsie	i
 8006c0c:	b661      	cpsie	f
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	df00      	svc	0
 8006c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c1a:	bf00      	nop
 8006c1c:	e000ed08 	.word	0xe000ed08

08006c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c26:	4b47      	ldr	r3, [pc, #284]	@ (8006d44 <xPortStartScheduler+0x124>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a47      	ldr	r2, [pc, #284]	@ (8006d48 <xPortStartScheduler+0x128>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d10b      	bne.n	8006c48 <xPortStartScheduler+0x28>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	60fb      	str	r3, [r7, #12]
}
 8006c42:	bf00      	nop
 8006c44:	bf00      	nop
 8006c46:	e7fd      	b.n	8006c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c48:	4b3e      	ldr	r3, [pc, #248]	@ (8006d44 <xPortStartScheduler+0x124>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d4c <xPortStartScheduler+0x12c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d10b      	bne.n	8006c6a <xPortStartScheduler+0x4a>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	613b      	str	r3, [r7, #16]
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop
 8006c68:	e7fd      	b.n	8006c66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c6a:	4b39      	ldr	r3, [pc, #228]	@ (8006d50 <xPortStartScheduler+0x130>)
 8006c6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	22ff      	movs	r2, #255	@ 0xff
 8006c7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	4b31      	ldr	r3, [pc, #196]	@ (8006d54 <xPortStartScheduler+0x134>)
 8006c90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c92:	4b31      	ldr	r3, [pc, #196]	@ (8006d58 <xPortStartScheduler+0x138>)
 8006c94:	2207      	movs	r2, #7
 8006c96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c98:	e009      	b.n	8006cae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8006d58 <xPortStartScheduler+0x138>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8006d58 <xPortStartScheduler+0x138>)
 8006ca2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cae:	78fb      	ldrb	r3, [r7, #3]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb6:	2b80      	cmp	r3, #128	@ 0x80
 8006cb8:	d0ef      	beq.n	8006c9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cba:	4b27      	ldr	r3, [pc, #156]	@ (8006d58 <xPortStartScheduler+0x138>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f1c3 0307 	rsb	r3, r3, #7
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d00b      	beq.n	8006cde <xPortStartScheduler+0xbe>
	__asm volatile
 8006cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	60bb      	str	r3, [r7, #8]
}
 8006cd8:	bf00      	nop
 8006cda:	bf00      	nop
 8006cdc:	e7fd      	b.n	8006cda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cde:	4b1e      	ldr	r3, [pc, #120]	@ (8006d58 <xPortStartScheduler+0x138>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d58 <xPortStartScheduler+0x138>)
 8006ce6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d58 <xPortStartScheduler+0x138>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cf0:	4a19      	ldr	r2, [pc, #100]	@ (8006d58 <xPortStartScheduler+0x138>)
 8006cf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cfc:	4b17      	ldr	r3, [pc, #92]	@ (8006d5c <xPortStartScheduler+0x13c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a16      	ldr	r2, [pc, #88]	@ (8006d5c <xPortStartScheduler+0x13c>)
 8006d02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006d06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d08:	4b14      	ldr	r3, [pc, #80]	@ (8006d5c <xPortStartScheduler+0x13c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a13      	ldr	r2, [pc, #76]	@ (8006d5c <xPortStartScheduler+0x13c>)
 8006d0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006d12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d14:	f000 f8da 	bl	8006ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d18:	4b11      	ldr	r3, [pc, #68]	@ (8006d60 <xPortStartScheduler+0x140>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d1e:	f000 f8f9 	bl	8006f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d22:	4b10      	ldr	r3, [pc, #64]	@ (8006d64 <xPortStartScheduler+0x144>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a0f      	ldr	r2, [pc, #60]	@ (8006d64 <xPortStartScheduler+0x144>)
 8006d28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006d2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d2e:	f7ff ff63 	bl	8006bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d32:	f7ff fd41 	bl	80067b8 <vTaskSwitchContext>
	prvTaskExitError();
 8006d36:	f7ff ff19 	bl	8006b6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	e000ed00 	.word	0xe000ed00
 8006d48:	410fc271 	.word	0x410fc271
 8006d4c:	410fc270 	.word	0x410fc270
 8006d50:	e000e400 	.word	0xe000e400
 8006d54:	200007c8 	.word	0x200007c8
 8006d58:	200007cc 	.word	0x200007cc
 8006d5c:	e000ed20 	.word	0xe000ed20
 8006d60:	20000084 	.word	0x20000084
 8006d64:	e000ef34 	.word	0xe000ef34

08006d68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	607b      	str	r3, [r7, #4]
}
 8006d80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d82:	4b10      	ldr	r3, [pc, #64]	@ (8006dc4 <vPortEnterCritical+0x5c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3301      	adds	r3, #1
 8006d88:	4a0e      	ldr	r2, [pc, #56]	@ (8006dc4 <vPortEnterCritical+0x5c>)
 8006d8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc4 <vPortEnterCritical+0x5c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d110      	bne.n	8006db6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d94:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc8 <vPortEnterCritical+0x60>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00b      	beq.n	8006db6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	603b      	str	r3, [r7, #0]
}
 8006db0:	bf00      	nop
 8006db2:	bf00      	nop
 8006db4:	e7fd      	b.n	8006db2 <vPortEnterCritical+0x4a>
	}
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20000084 	.word	0x20000084
 8006dc8:	e000ed04 	.word	0xe000ed04

08006dcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006dd2:	4b12      	ldr	r3, [pc, #72]	@ (8006e1c <vPortExitCritical+0x50>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10b      	bne.n	8006df2 <vPortExitCritical+0x26>
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	607b      	str	r3, [r7, #4]
}
 8006dec:	bf00      	nop
 8006dee:	bf00      	nop
 8006df0:	e7fd      	b.n	8006dee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006df2:	4b0a      	ldr	r3, [pc, #40]	@ (8006e1c <vPortExitCritical+0x50>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	4a08      	ldr	r2, [pc, #32]	@ (8006e1c <vPortExitCritical+0x50>)
 8006dfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006dfc:	4b07      	ldr	r3, [pc, #28]	@ (8006e1c <vPortExitCritical+0x50>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d105      	bne.n	8006e10 <vPortExitCritical+0x44>
 8006e04:	2300      	movs	r3, #0
 8006e06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	20000084 	.word	0x20000084

08006e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e20:	f3ef 8009 	mrs	r0, PSP
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	4b15      	ldr	r3, [pc, #84]	@ (8006e80 <pxCurrentTCBConst>)
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	f01e 0f10 	tst.w	lr, #16
 8006e30:	bf08      	it	eq
 8006e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3a:	6010      	str	r0, [r2, #0]
 8006e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006e44:	f380 8811 	msr	BASEPRI, r0
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f7ff fcb2 	bl	80067b8 <vTaskSwitchContext>
 8006e54:	f04f 0000 	mov.w	r0, #0
 8006e58:	f380 8811 	msr	BASEPRI, r0
 8006e5c:	bc09      	pop	{r0, r3}
 8006e5e:	6819      	ldr	r1, [r3, #0]
 8006e60:	6808      	ldr	r0, [r1, #0]
 8006e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e66:	f01e 0f10 	tst.w	lr, #16
 8006e6a:	bf08      	it	eq
 8006e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e70:	f380 8809 	msr	PSP, r0
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	f3af 8000 	nop.w

08006e80 <pxCurrentTCBConst>:
 8006e80:	2000069c 	.word	0x2000069c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e84:	bf00      	nop
 8006e86:	bf00      	nop

08006e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	607b      	str	r3, [r7, #4]
}
 8006ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ea2:	f7ff fbcf 	bl	8006644 <xTaskIncrementTick>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006eac:	4b06      	ldr	r3, [pc, #24]	@ (8006ec8 <SysTick_Handler+0x40>)
 8006eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	f383 8811 	msr	BASEPRI, r3
}
 8006ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	e000ed04 	.word	0xe000ed04

08006ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f00 <vPortSetupTimerInterrupt+0x34>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8006f04 <vPortSetupTimerInterrupt+0x38>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006edc:	4b0a      	ldr	r3, [pc, #40]	@ (8006f08 <vPortSetupTimerInterrupt+0x3c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8006f0c <vPortSetupTimerInterrupt+0x40>)
 8006ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee6:	099b      	lsrs	r3, r3, #6
 8006ee8:	4a09      	ldr	r2, [pc, #36]	@ (8006f10 <vPortSetupTimerInterrupt+0x44>)
 8006eea:	3b01      	subs	r3, #1
 8006eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006eee:	4b04      	ldr	r3, [pc, #16]	@ (8006f00 <vPortSetupTimerInterrupt+0x34>)
 8006ef0:	2207      	movs	r2, #7
 8006ef2:	601a      	str	r2, [r3, #0]
}
 8006ef4:	bf00      	nop
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	e000e010 	.word	0xe000e010
 8006f04:	e000e018 	.word	0xe000e018
 8006f08:	20000000 	.word	0x20000000
 8006f0c:	10624dd3 	.word	0x10624dd3
 8006f10:	e000e014 	.word	0xe000e014

08006f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006f24 <vPortEnableVFP+0x10>
 8006f18:	6801      	ldr	r1, [r0, #0]
 8006f1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006f1e:	6001      	str	r1, [r0, #0]
 8006f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f22:	bf00      	nop
 8006f24:	e000ed88 	.word	0xe000ed88

08006f28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08a      	sub	sp, #40	@ 0x28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f30:	2300      	movs	r3, #0
 8006f32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f34:	f7ff fada 	bl	80064ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f38:	4b5c      	ldr	r3, [pc, #368]	@ (80070ac <pvPortMalloc+0x184>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f40:	f000 f924 	bl	800718c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f44:	4b5a      	ldr	r3, [pc, #360]	@ (80070b0 <pvPortMalloc+0x188>)
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f040 8095 	bne.w	800707c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01e      	beq.n	8006f96 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006f58:	2208      	movs	r2, #8
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d015      	beq.n	8006f96 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f023 0307 	bic.w	r3, r3, #7
 8006f70:	3308      	adds	r3, #8
 8006f72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00b      	beq.n	8006f96 <pvPortMalloc+0x6e>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	617b      	str	r3, [r7, #20]
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	e7fd      	b.n	8006f92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d06f      	beq.n	800707c <pvPortMalloc+0x154>
 8006f9c:	4b45      	ldr	r3, [pc, #276]	@ (80070b4 <pvPortMalloc+0x18c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d86a      	bhi.n	800707c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006fa6:	4b44      	ldr	r3, [pc, #272]	@ (80070b8 <pvPortMalloc+0x190>)
 8006fa8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006faa:	4b43      	ldr	r3, [pc, #268]	@ (80070b8 <pvPortMalloc+0x190>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fb0:	e004      	b.n	8006fbc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d903      	bls.n	8006fce <pvPortMalloc+0xa6>
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1f1      	bne.n	8006fb2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006fce:	4b37      	ldr	r3, [pc, #220]	@ (80070ac <pvPortMalloc+0x184>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d051      	beq.n	800707c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2208      	movs	r2, #8
 8006fde:	4413      	add	r3, r2
 8006fe0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	1ad2      	subs	r2, r2, r3
 8006ff2:	2308      	movs	r3, #8
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d920      	bls.n	800703c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4413      	add	r3, r2
 8007000:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	f003 0307 	and.w	r3, r3, #7
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00b      	beq.n	8007024 <pvPortMalloc+0xfc>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	613b      	str	r3, [r7, #16]
}
 800701e:	bf00      	nop
 8007020:	bf00      	nop
 8007022:	e7fd      	b.n	8007020 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	1ad2      	subs	r2, r2, r3
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007036:	69b8      	ldr	r0, [r7, #24]
 8007038:	f000 f90a 	bl	8007250 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800703c:	4b1d      	ldr	r3, [pc, #116]	@ (80070b4 <pvPortMalloc+0x18c>)
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	4a1b      	ldr	r2, [pc, #108]	@ (80070b4 <pvPortMalloc+0x18c>)
 8007048:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800704a:	4b1a      	ldr	r3, [pc, #104]	@ (80070b4 <pvPortMalloc+0x18c>)
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	4b1b      	ldr	r3, [pc, #108]	@ (80070bc <pvPortMalloc+0x194>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	429a      	cmp	r2, r3
 8007054:	d203      	bcs.n	800705e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007056:	4b17      	ldr	r3, [pc, #92]	@ (80070b4 <pvPortMalloc+0x18c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a18      	ldr	r2, [pc, #96]	@ (80070bc <pvPortMalloc+0x194>)
 800705c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	4b13      	ldr	r3, [pc, #76]	@ (80070b0 <pvPortMalloc+0x188>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	431a      	orrs	r2, r3
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800706c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007072:	4b13      	ldr	r3, [pc, #76]	@ (80070c0 <pvPortMalloc+0x198>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3301      	adds	r3, #1
 8007078:	4a11      	ldr	r2, [pc, #68]	@ (80070c0 <pvPortMalloc+0x198>)
 800707a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800707c:	f7ff fa44 	bl	8006508 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00b      	beq.n	80070a2 <pvPortMalloc+0x17a>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	60fb      	str	r3, [r7, #12]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <pvPortMalloc+0x176>
	return pvReturn;
 80070a2:	69fb      	ldr	r3, [r7, #28]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3728      	adds	r7, #40	@ 0x28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	200043d8 	.word	0x200043d8
 80070b0:	200043ec 	.word	0x200043ec
 80070b4:	200043dc 	.word	0x200043dc
 80070b8:	200043d0 	.word	0x200043d0
 80070bc:	200043e0 	.word	0x200043e0
 80070c0:	200043e4 	.word	0x200043e4

080070c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d04f      	beq.n	8007176 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070d6:	2308      	movs	r3, #8
 80070d8:	425b      	negs	r3, r3
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	4413      	add	r3, r2
 80070de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	4b25      	ldr	r3, [pc, #148]	@ (8007180 <vPortFree+0xbc>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4013      	ands	r3, r2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10b      	bne.n	800710a <vPortFree+0x46>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	60fb      	str	r3, [r7, #12]
}
 8007104:	bf00      	nop
 8007106:	bf00      	nop
 8007108:	e7fd      	b.n	8007106 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <vPortFree+0x66>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	60bb      	str	r3, [r7, #8]
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop
 8007128:	e7fd      	b.n	8007126 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	4b14      	ldr	r3, [pc, #80]	@ (8007180 <vPortFree+0xbc>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4013      	ands	r3, r2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d01e      	beq.n	8007176 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d11a      	bne.n	8007176 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	4b0e      	ldr	r3, [pc, #56]	@ (8007180 <vPortFree+0xbc>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	43db      	mvns	r3, r3
 800714a:	401a      	ands	r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007150:	f7ff f9cc 	bl	80064ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	4b0a      	ldr	r3, [pc, #40]	@ (8007184 <vPortFree+0xc0>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4413      	add	r3, r2
 800715e:	4a09      	ldr	r2, [pc, #36]	@ (8007184 <vPortFree+0xc0>)
 8007160:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007162:	6938      	ldr	r0, [r7, #16]
 8007164:	f000 f874 	bl	8007250 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007168:	4b07      	ldr	r3, [pc, #28]	@ (8007188 <vPortFree+0xc4>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	4a06      	ldr	r2, [pc, #24]	@ (8007188 <vPortFree+0xc4>)
 8007170:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007172:	f7ff f9c9 	bl	8006508 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007176:	bf00      	nop
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	200043ec 	.word	0x200043ec
 8007184:	200043dc 	.word	0x200043dc
 8007188:	200043e8 	.word	0x200043e8

0800718c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007192:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007196:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007198:	4b27      	ldr	r3, [pc, #156]	@ (8007238 <prvHeapInit+0xac>)
 800719a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00c      	beq.n	80071c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3307      	adds	r3, #7
 80071aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 0307 	bic.w	r3, r3, #7
 80071b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	4a1f      	ldr	r2, [pc, #124]	@ (8007238 <prvHeapInit+0xac>)
 80071bc:	4413      	add	r3, r2
 80071be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071c4:	4a1d      	ldr	r2, [pc, #116]	@ (800723c <prvHeapInit+0xb0>)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071ca:	4b1c      	ldr	r3, [pc, #112]	@ (800723c <prvHeapInit+0xb0>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	4413      	add	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071d8:	2208      	movs	r2, #8
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f023 0307 	bic.w	r3, r3, #7
 80071e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4a15      	ldr	r2, [pc, #84]	@ (8007240 <prvHeapInit+0xb4>)
 80071ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071ee:	4b14      	ldr	r3, [pc, #80]	@ (8007240 <prvHeapInit+0xb4>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2200      	movs	r2, #0
 80071f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071f6:	4b12      	ldr	r3, [pc, #72]	@ (8007240 <prvHeapInit+0xb4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	1ad2      	subs	r2, r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800720c:	4b0c      	ldr	r3, [pc, #48]	@ (8007240 <prvHeapInit+0xb4>)
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	4a0a      	ldr	r2, [pc, #40]	@ (8007244 <prvHeapInit+0xb8>)
 800721a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	4a09      	ldr	r2, [pc, #36]	@ (8007248 <prvHeapInit+0xbc>)
 8007222:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007224:	4b09      	ldr	r3, [pc, #36]	@ (800724c <prvHeapInit+0xc0>)
 8007226:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800722a:	601a      	str	r2, [r3, #0]
}
 800722c:	bf00      	nop
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	200007d0 	.word	0x200007d0
 800723c:	200043d0 	.word	0x200043d0
 8007240:	200043d8 	.word	0x200043d8
 8007244:	200043e0 	.word	0x200043e0
 8007248:	200043dc 	.word	0x200043dc
 800724c:	200043ec 	.word	0x200043ec

08007250 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007258:	4b28      	ldr	r3, [pc, #160]	@ (80072fc <prvInsertBlockIntoFreeList+0xac>)
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	e002      	b.n	8007264 <prvInsertBlockIntoFreeList+0x14>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	429a      	cmp	r2, r3
 800726c:	d8f7      	bhi.n	800725e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	4413      	add	r3, r2
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	429a      	cmp	r2, r3
 800727e:	d108      	bne.n	8007292 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	441a      	add	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	441a      	add	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d118      	bne.n	80072d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4b15      	ldr	r3, [pc, #84]	@ (8007300 <prvInsertBlockIntoFreeList+0xb0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d00d      	beq.n	80072ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	441a      	add	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	e008      	b.n	80072e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80072ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007300 <prvInsertBlockIntoFreeList+0xb0>)
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	e003      	b.n	80072e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d002      	beq.n	80072ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	200043d0 	.word	0x200043d0
 8007300:	200043d8 	.word	0x200043d8

08007304 <malloc>:
 8007304:	4b02      	ldr	r3, [pc, #8]	@ (8007310 <malloc+0xc>)
 8007306:	4601      	mov	r1, r0
 8007308:	6818      	ldr	r0, [r3, #0]
 800730a:	f000 b825 	b.w	8007358 <_malloc_r>
 800730e:	bf00      	nop
 8007310:	20000094 	.word	0x20000094

08007314 <sbrk_aligned>:
 8007314:	b570      	push	{r4, r5, r6, lr}
 8007316:	4e0f      	ldr	r6, [pc, #60]	@ (8007354 <sbrk_aligned+0x40>)
 8007318:	460c      	mov	r4, r1
 800731a:	6831      	ldr	r1, [r6, #0]
 800731c:	4605      	mov	r5, r0
 800731e:	b911      	cbnz	r1, 8007326 <sbrk_aligned+0x12>
 8007320:	f000 fa58 	bl	80077d4 <_sbrk_r>
 8007324:	6030      	str	r0, [r6, #0]
 8007326:	4621      	mov	r1, r4
 8007328:	4628      	mov	r0, r5
 800732a:	f000 fa53 	bl	80077d4 <_sbrk_r>
 800732e:	1c43      	adds	r3, r0, #1
 8007330:	d103      	bne.n	800733a <sbrk_aligned+0x26>
 8007332:	f04f 34ff 	mov.w	r4, #4294967295
 8007336:	4620      	mov	r0, r4
 8007338:	bd70      	pop	{r4, r5, r6, pc}
 800733a:	1cc4      	adds	r4, r0, #3
 800733c:	f024 0403 	bic.w	r4, r4, #3
 8007340:	42a0      	cmp	r0, r4
 8007342:	d0f8      	beq.n	8007336 <sbrk_aligned+0x22>
 8007344:	1a21      	subs	r1, r4, r0
 8007346:	4628      	mov	r0, r5
 8007348:	f000 fa44 	bl	80077d4 <_sbrk_r>
 800734c:	3001      	adds	r0, #1
 800734e:	d1f2      	bne.n	8007336 <sbrk_aligned+0x22>
 8007350:	e7ef      	b.n	8007332 <sbrk_aligned+0x1e>
 8007352:	bf00      	nop
 8007354:	200043f0 	.word	0x200043f0

08007358 <_malloc_r>:
 8007358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800735c:	1ccd      	adds	r5, r1, #3
 800735e:	f025 0503 	bic.w	r5, r5, #3
 8007362:	3508      	adds	r5, #8
 8007364:	2d0c      	cmp	r5, #12
 8007366:	bf38      	it	cc
 8007368:	250c      	movcc	r5, #12
 800736a:	2d00      	cmp	r5, #0
 800736c:	4606      	mov	r6, r0
 800736e:	db01      	blt.n	8007374 <_malloc_r+0x1c>
 8007370:	42a9      	cmp	r1, r5
 8007372:	d904      	bls.n	800737e <_malloc_r+0x26>
 8007374:	230c      	movs	r3, #12
 8007376:	6033      	str	r3, [r6, #0]
 8007378:	2000      	movs	r0, #0
 800737a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800737e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007454 <_malloc_r+0xfc>
 8007382:	f000 f869 	bl	8007458 <__malloc_lock>
 8007386:	f8d8 3000 	ldr.w	r3, [r8]
 800738a:	461c      	mov	r4, r3
 800738c:	bb44      	cbnz	r4, 80073e0 <_malloc_r+0x88>
 800738e:	4629      	mov	r1, r5
 8007390:	4630      	mov	r0, r6
 8007392:	f7ff ffbf 	bl	8007314 <sbrk_aligned>
 8007396:	1c43      	adds	r3, r0, #1
 8007398:	4604      	mov	r4, r0
 800739a:	d158      	bne.n	800744e <_malloc_r+0xf6>
 800739c:	f8d8 4000 	ldr.w	r4, [r8]
 80073a0:	4627      	mov	r7, r4
 80073a2:	2f00      	cmp	r7, #0
 80073a4:	d143      	bne.n	800742e <_malloc_r+0xd6>
 80073a6:	2c00      	cmp	r4, #0
 80073a8:	d04b      	beq.n	8007442 <_malloc_r+0xea>
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	4639      	mov	r1, r7
 80073ae:	4630      	mov	r0, r6
 80073b0:	eb04 0903 	add.w	r9, r4, r3
 80073b4:	f000 fa0e 	bl	80077d4 <_sbrk_r>
 80073b8:	4581      	cmp	r9, r0
 80073ba:	d142      	bne.n	8007442 <_malloc_r+0xea>
 80073bc:	6821      	ldr	r1, [r4, #0]
 80073be:	1a6d      	subs	r5, r5, r1
 80073c0:	4629      	mov	r1, r5
 80073c2:	4630      	mov	r0, r6
 80073c4:	f7ff ffa6 	bl	8007314 <sbrk_aligned>
 80073c8:	3001      	adds	r0, #1
 80073ca:	d03a      	beq.n	8007442 <_malloc_r+0xea>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	442b      	add	r3, r5
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	f8d8 3000 	ldr.w	r3, [r8]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	bb62      	cbnz	r2, 8007434 <_malloc_r+0xdc>
 80073da:	f8c8 7000 	str.w	r7, [r8]
 80073de:	e00f      	b.n	8007400 <_malloc_r+0xa8>
 80073e0:	6822      	ldr	r2, [r4, #0]
 80073e2:	1b52      	subs	r2, r2, r5
 80073e4:	d420      	bmi.n	8007428 <_malloc_r+0xd0>
 80073e6:	2a0b      	cmp	r2, #11
 80073e8:	d917      	bls.n	800741a <_malloc_r+0xc2>
 80073ea:	1961      	adds	r1, r4, r5
 80073ec:	42a3      	cmp	r3, r4
 80073ee:	6025      	str	r5, [r4, #0]
 80073f0:	bf18      	it	ne
 80073f2:	6059      	strne	r1, [r3, #4]
 80073f4:	6863      	ldr	r3, [r4, #4]
 80073f6:	bf08      	it	eq
 80073f8:	f8c8 1000 	streq.w	r1, [r8]
 80073fc:	5162      	str	r2, [r4, r5]
 80073fe:	604b      	str	r3, [r1, #4]
 8007400:	4630      	mov	r0, r6
 8007402:	f000 f82f 	bl	8007464 <__malloc_unlock>
 8007406:	f104 000b 	add.w	r0, r4, #11
 800740a:	1d23      	adds	r3, r4, #4
 800740c:	f020 0007 	bic.w	r0, r0, #7
 8007410:	1ac2      	subs	r2, r0, r3
 8007412:	bf1c      	itt	ne
 8007414:	1a1b      	subne	r3, r3, r0
 8007416:	50a3      	strne	r3, [r4, r2]
 8007418:	e7af      	b.n	800737a <_malloc_r+0x22>
 800741a:	6862      	ldr	r2, [r4, #4]
 800741c:	42a3      	cmp	r3, r4
 800741e:	bf0c      	ite	eq
 8007420:	f8c8 2000 	streq.w	r2, [r8]
 8007424:	605a      	strne	r2, [r3, #4]
 8007426:	e7eb      	b.n	8007400 <_malloc_r+0xa8>
 8007428:	4623      	mov	r3, r4
 800742a:	6864      	ldr	r4, [r4, #4]
 800742c:	e7ae      	b.n	800738c <_malloc_r+0x34>
 800742e:	463c      	mov	r4, r7
 8007430:	687f      	ldr	r7, [r7, #4]
 8007432:	e7b6      	b.n	80073a2 <_malloc_r+0x4a>
 8007434:	461a      	mov	r2, r3
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	42a3      	cmp	r3, r4
 800743a:	d1fb      	bne.n	8007434 <_malloc_r+0xdc>
 800743c:	2300      	movs	r3, #0
 800743e:	6053      	str	r3, [r2, #4]
 8007440:	e7de      	b.n	8007400 <_malloc_r+0xa8>
 8007442:	230c      	movs	r3, #12
 8007444:	6033      	str	r3, [r6, #0]
 8007446:	4630      	mov	r0, r6
 8007448:	f000 f80c 	bl	8007464 <__malloc_unlock>
 800744c:	e794      	b.n	8007378 <_malloc_r+0x20>
 800744e:	6005      	str	r5, [r0, #0]
 8007450:	e7d6      	b.n	8007400 <_malloc_r+0xa8>
 8007452:	bf00      	nop
 8007454:	200043f4 	.word	0x200043f4

08007458 <__malloc_lock>:
 8007458:	4801      	ldr	r0, [pc, #4]	@ (8007460 <__malloc_lock+0x8>)
 800745a:	f000 ba08 	b.w	800786e <__retarget_lock_acquire_recursive>
 800745e:	bf00      	nop
 8007460:	20004538 	.word	0x20004538

08007464 <__malloc_unlock>:
 8007464:	4801      	ldr	r0, [pc, #4]	@ (800746c <__malloc_unlock+0x8>)
 8007466:	f000 ba03 	b.w	8007870 <__retarget_lock_release_recursive>
 800746a:	bf00      	nop
 800746c:	20004538 	.word	0x20004538

08007470 <std>:
 8007470:	2300      	movs	r3, #0
 8007472:	b510      	push	{r4, lr}
 8007474:	4604      	mov	r4, r0
 8007476:	e9c0 3300 	strd	r3, r3, [r0]
 800747a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800747e:	6083      	str	r3, [r0, #8]
 8007480:	8181      	strh	r1, [r0, #12]
 8007482:	6643      	str	r3, [r0, #100]	@ 0x64
 8007484:	81c2      	strh	r2, [r0, #14]
 8007486:	6183      	str	r3, [r0, #24]
 8007488:	4619      	mov	r1, r3
 800748a:	2208      	movs	r2, #8
 800748c:	305c      	adds	r0, #92	@ 0x5c
 800748e:	f000 f906 	bl	800769e <memset>
 8007492:	4b0d      	ldr	r3, [pc, #52]	@ (80074c8 <std+0x58>)
 8007494:	6263      	str	r3, [r4, #36]	@ 0x24
 8007496:	4b0d      	ldr	r3, [pc, #52]	@ (80074cc <std+0x5c>)
 8007498:	62a3      	str	r3, [r4, #40]	@ 0x28
 800749a:	4b0d      	ldr	r3, [pc, #52]	@ (80074d0 <std+0x60>)
 800749c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800749e:	4b0d      	ldr	r3, [pc, #52]	@ (80074d4 <std+0x64>)
 80074a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80074a2:	4b0d      	ldr	r3, [pc, #52]	@ (80074d8 <std+0x68>)
 80074a4:	6224      	str	r4, [r4, #32]
 80074a6:	429c      	cmp	r4, r3
 80074a8:	d006      	beq.n	80074b8 <std+0x48>
 80074aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074ae:	4294      	cmp	r4, r2
 80074b0:	d002      	beq.n	80074b8 <std+0x48>
 80074b2:	33d0      	adds	r3, #208	@ 0xd0
 80074b4:	429c      	cmp	r4, r3
 80074b6:	d105      	bne.n	80074c4 <std+0x54>
 80074b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80074bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074c0:	f000 b9d4 	b.w	800786c <__retarget_lock_init_recursive>
 80074c4:	bd10      	pop	{r4, pc}
 80074c6:	bf00      	nop
 80074c8:	08007619 	.word	0x08007619
 80074cc:	0800763b 	.word	0x0800763b
 80074d0:	08007673 	.word	0x08007673
 80074d4:	08007697 	.word	0x08007697
 80074d8:	200043f8 	.word	0x200043f8

080074dc <stdio_exit_handler>:
 80074dc:	4a02      	ldr	r2, [pc, #8]	@ (80074e8 <stdio_exit_handler+0xc>)
 80074de:	4903      	ldr	r1, [pc, #12]	@ (80074ec <stdio_exit_handler+0x10>)
 80074e0:	4803      	ldr	r0, [pc, #12]	@ (80074f0 <stdio_exit_handler+0x14>)
 80074e2:	f000 b869 	b.w	80075b8 <_fwalk_sglue>
 80074e6:	bf00      	nop
 80074e8:	20000088 	.word	0x20000088
 80074ec:	08007fc9 	.word	0x08007fc9
 80074f0:	20000098 	.word	0x20000098

080074f4 <cleanup_stdio>:
 80074f4:	6841      	ldr	r1, [r0, #4]
 80074f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007528 <cleanup_stdio+0x34>)
 80074f8:	4299      	cmp	r1, r3
 80074fa:	b510      	push	{r4, lr}
 80074fc:	4604      	mov	r4, r0
 80074fe:	d001      	beq.n	8007504 <cleanup_stdio+0x10>
 8007500:	f000 fd62 	bl	8007fc8 <_fflush_r>
 8007504:	68a1      	ldr	r1, [r4, #8]
 8007506:	4b09      	ldr	r3, [pc, #36]	@ (800752c <cleanup_stdio+0x38>)
 8007508:	4299      	cmp	r1, r3
 800750a:	d002      	beq.n	8007512 <cleanup_stdio+0x1e>
 800750c:	4620      	mov	r0, r4
 800750e:	f000 fd5b 	bl	8007fc8 <_fflush_r>
 8007512:	68e1      	ldr	r1, [r4, #12]
 8007514:	4b06      	ldr	r3, [pc, #24]	@ (8007530 <cleanup_stdio+0x3c>)
 8007516:	4299      	cmp	r1, r3
 8007518:	d004      	beq.n	8007524 <cleanup_stdio+0x30>
 800751a:	4620      	mov	r0, r4
 800751c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007520:	f000 bd52 	b.w	8007fc8 <_fflush_r>
 8007524:	bd10      	pop	{r4, pc}
 8007526:	bf00      	nop
 8007528:	200043f8 	.word	0x200043f8
 800752c:	20004460 	.word	0x20004460
 8007530:	200044c8 	.word	0x200044c8

08007534 <global_stdio_init.part.0>:
 8007534:	b510      	push	{r4, lr}
 8007536:	4b0b      	ldr	r3, [pc, #44]	@ (8007564 <global_stdio_init.part.0+0x30>)
 8007538:	4c0b      	ldr	r4, [pc, #44]	@ (8007568 <global_stdio_init.part.0+0x34>)
 800753a:	4a0c      	ldr	r2, [pc, #48]	@ (800756c <global_stdio_init.part.0+0x38>)
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	4620      	mov	r0, r4
 8007540:	2200      	movs	r2, #0
 8007542:	2104      	movs	r1, #4
 8007544:	f7ff ff94 	bl	8007470 <std>
 8007548:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800754c:	2201      	movs	r2, #1
 800754e:	2109      	movs	r1, #9
 8007550:	f7ff ff8e 	bl	8007470 <std>
 8007554:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007558:	2202      	movs	r2, #2
 800755a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800755e:	2112      	movs	r1, #18
 8007560:	f7ff bf86 	b.w	8007470 <std>
 8007564:	20004530 	.word	0x20004530
 8007568:	200043f8 	.word	0x200043f8
 800756c:	080074dd 	.word	0x080074dd

08007570 <__sfp_lock_acquire>:
 8007570:	4801      	ldr	r0, [pc, #4]	@ (8007578 <__sfp_lock_acquire+0x8>)
 8007572:	f000 b97c 	b.w	800786e <__retarget_lock_acquire_recursive>
 8007576:	bf00      	nop
 8007578:	20004539 	.word	0x20004539

0800757c <__sfp_lock_release>:
 800757c:	4801      	ldr	r0, [pc, #4]	@ (8007584 <__sfp_lock_release+0x8>)
 800757e:	f000 b977 	b.w	8007870 <__retarget_lock_release_recursive>
 8007582:	bf00      	nop
 8007584:	20004539 	.word	0x20004539

08007588 <__sinit>:
 8007588:	b510      	push	{r4, lr}
 800758a:	4604      	mov	r4, r0
 800758c:	f7ff fff0 	bl	8007570 <__sfp_lock_acquire>
 8007590:	6a23      	ldr	r3, [r4, #32]
 8007592:	b11b      	cbz	r3, 800759c <__sinit+0x14>
 8007594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007598:	f7ff bff0 	b.w	800757c <__sfp_lock_release>
 800759c:	4b04      	ldr	r3, [pc, #16]	@ (80075b0 <__sinit+0x28>)
 800759e:	6223      	str	r3, [r4, #32]
 80075a0:	4b04      	ldr	r3, [pc, #16]	@ (80075b4 <__sinit+0x2c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1f5      	bne.n	8007594 <__sinit+0xc>
 80075a8:	f7ff ffc4 	bl	8007534 <global_stdio_init.part.0>
 80075ac:	e7f2      	b.n	8007594 <__sinit+0xc>
 80075ae:	bf00      	nop
 80075b0:	080074f5 	.word	0x080074f5
 80075b4:	20004530 	.word	0x20004530

080075b8 <_fwalk_sglue>:
 80075b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075bc:	4607      	mov	r7, r0
 80075be:	4688      	mov	r8, r1
 80075c0:	4614      	mov	r4, r2
 80075c2:	2600      	movs	r6, #0
 80075c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075c8:	f1b9 0901 	subs.w	r9, r9, #1
 80075cc:	d505      	bpl.n	80075da <_fwalk_sglue+0x22>
 80075ce:	6824      	ldr	r4, [r4, #0]
 80075d0:	2c00      	cmp	r4, #0
 80075d2:	d1f7      	bne.n	80075c4 <_fwalk_sglue+0xc>
 80075d4:	4630      	mov	r0, r6
 80075d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075da:	89ab      	ldrh	r3, [r5, #12]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d907      	bls.n	80075f0 <_fwalk_sglue+0x38>
 80075e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075e4:	3301      	adds	r3, #1
 80075e6:	d003      	beq.n	80075f0 <_fwalk_sglue+0x38>
 80075e8:	4629      	mov	r1, r5
 80075ea:	4638      	mov	r0, r7
 80075ec:	47c0      	blx	r8
 80075ee:	4306      	orrs	r6, r0
 80075f0:	3568      	adds	r5, #104	@ 0x68
 80075f2:	e7e9      	b.n	80075c8 <_fwalk_sglue+0x10>

080075f4 <iprintf>:
 80075f4:	b40f      	push	{r0, r1, r2, r3}
 80075f6:	b507      	push	{r0, r1, r2, lr}
 80075f8:	4906      	ldr	r1, [pc, #24]	@ (8007614 <iprintf+0x20>)
 80075fa:	ab04      	add	r3, sp, #16
 80075fc:	6808      	ldr	r0, [r1, #0]
 80075fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007602:	6881      	ldr	r1, [r0, #8]
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	f000 f9b7 	bl	8007978 <_vfiprintf_r>
 800760a:	b003      	add	sp, #12
 800760c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007610:	b004      	add	sp, #16
 8007612:	4770      	bx	lr
 8007614:	20000094 	.word	0x20000094

08007618 <__sread>:
 8007618:	b510      	push	{r4, lr}
 800761a:	460c      	mov	r4, r1
 800761c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007620:	f000 f8c6 	bl	80077b0 <_read_r>
 8007624:	2800      	cmp	r0, #0
 8007626:	bfab      	itete	ge
 8007628:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800762a:	89a3      	ldrhlt	r3, [r4, #12]
 800762c:	181b      	addge	r3, r3, r0
 800762e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007632:	bfac      	ite	ge
 8007634:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007636:	81a3      	strhlt	r3, [r4, #12]
 8007638:	bd10      	pop	{r4, pc}

0800763a <__swrite>:
 800763a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800763e:	461f      	mov	r7, r3
 8007640:	898b      	ldrh	r3, [r1, #12]
 8007642:	05db      	lsls	r3, r3, #23
 8007644:	4605      	mov	r5, r0
 8007646:	460c      	mov	r4, r1
 8007648:	4616      	mov	r6, r2
 800764a:	d505      	bpl.n	8007658 <__swrite+0x1e>
 800764c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007650:	2302      	movs	r3, #2
 8007652:	2200      	movs	r2, #0
 8007654:	f000 f89a 	bl	800778c <_lseek_r>
 8007658:	89a3      	ldrh	r3, [r4, #12]
 800765a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800765e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007662:	81a3      	strh	r3, [r4, #12]
 8007664:	4632      	mov	r2, r6
 8007666:	463b      	mov	r3, r7
 8007668:	4628      	mov	r0, r5
 800766a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800766e:	f000 b8c1 	b.w	80077f4 <_write_r>

08007672 <__sseek>:
 8007672:	b510      	push	{r4, lr}
 8007674:	460c      	mov	r4, r1
 8007676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800767a:	f000 f887 	bl	800778c <_lseek_r>
 800767e:	1c43      	adds	r3, r0, #1
 8007680:	89a3      	ldrh	r3, [r4, #12]
 8007682:	bf15      	itete	ne
 8007684:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007686:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800768a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800768e:	81a3      	strheq	r3, [r4, #12]
 8007690:	bf18      	it	ne
 8007692:	81a3      	strhne	r3, [r4, #12]
 8007694:	bd10      	pop	{r4, pc}

08007696 <__sclose>:
 8007696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800769a:	f000 b809 	b.w	80076b0 <_close_r>

0800769e <memset>:
 800769e:	4402      	add	r2, r0
 80076a0:	4603      	mov	r3, r0
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d100      	bne.n	80076a8 <memset+0xa>
 80076a6:	4770      	bx	lr
 80076a8:	f803 1b01 	strb.w	r1, [r3], #1
 80076ac:	e7f9      	b.n	80076a2 <memset+0x4>
	...

080076b0 <_close_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4d06      	ldr	r5, [pc, #24]	@ (80076cc <_close_r+0x1c>)
 80076b4:	2300      	movs	r3, #0
 80076b6:	4604      	mov	r4, r0
 80076b8:	4608      	mov	r0, r1
 80076ba:	602b      	str	r3, [r5, #0]
 80076bc:	f7f9 fb29 	bl	8000d12 <_close>
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	d102      	bne.n	80076ca <_close_r+0x1a>
 80076c4:	682b      	ldr	r3, [r5, #0]
 80076c6:	b103      	cbz	r3, 80076ca <_close_r+0x1a>
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	bd38      	pop	{r3, r4, r5, pc}
 80076cc:	20004534 	.word	0x20004534

080076d0 <_reclaim_reent>:
 80076d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007788 <_reclaim_reent+0xb8>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4283      	cmp	r3, r0
 80076d6:	b570      	push	{r4, r5, r6, lr}
 80076d8:	4604      	mov	r4, r0
 80076da:	d053      	beq.n	8007784 <_reclaim_reent+0xb4>
 80076dc:	69c3      	ldr	r3, [r0, #28]
 80076de:	b31b      	cbz	r3, 8007728 <_reclaim_reent+0x58>
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	b163      	cbz	r3, 80076fe <_reclaim_reent+0x2e>
 80076e4:	2500      	movs	r5, #0
 80076e6:	69e3      	ldr	r3, [r4, #28]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	5959      	ldr	r1, [r3, r5]
 80076ec:	b9b1      	cbnz	r1, 800771c <_reclaim_reent+0x4c>
 80076ee:	3504      	adds	r5, #4
 80076f0:	2d80      	cmp	r5, #128	@ 0x80
 80076f2:	d1f8      	bne.n	80076e6 <_reclaim_reent+0x16>
 80076f4:	69e3      	ldr	r3, [r4, #28]
 80076f6:	4620      	mov	r0, r4
 80076f8:	68d9      	ldr	r1, [r3, #12]
 80076fa:	f000 f8c9 	bl	8007890 <_free_r>
 80076fe:	69e3      	ldr	r3, [r4, #28]
 8007700:	6819      	ldr	r1, [r3, #0]
 8007702:	b111      	cbz	r1, 800770a <_reclaim_reent+0x3a>
 8007704:	4620      	mov	r0, r4
 8007706:	f000 f8c3 	bl	8007890 <_free_r>
 800770a:	69e3      	ldr	r3, [r4, #28]
 800770c:	689d      	ldr	r5, [r3, #8]
 800770e:	b15d      	cbz	r5, 8007728 <_reclaim_reent+0x58>
 8007710:	4629      	mov	r1, r5
 8007712:	4620      	mov	r0, r4
 8007714:	682d      	ldr	r5, [r5, #0]
 8007716:	f000 f8bb 	bl	8007890 <_free_r>
 800771a:	e7f8      	b.n	800770e <_reclaim_reent+0x3e>
 800771c:	680e      	ldr	r6, [r1, #0]
 800771e:	4620      	mov	r0, r4
 8007720:	f000 f8b6 	bl	8007890 <_free_r>
 8007724:	4631      	mov	r1, r6
 8007726:	e7e1      	b.n	80076ec <_reclaim_reent+0x1c>
 8007728:	6961      	ldr	r1, [r4, #20]
 800772a:	b111      	cbz	r1, 8007732 <_reclaim_reent+0x62>
 800772c:	4620      	mov	r0, r4
 800772e:	f000 f8af 	bl	8007890 <_free_r>
 8007732:	69e1      	ldr	r1, [r4, #28]
 8007734:	b111      	cbz	r1, 800773c <_reclaim_reent+0x6c>
 8007736:	4620      	mov	r0, r4
 8007738:	f000 f8aa 	bl	8007890 <_free_r>
 800773c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800773e:	b111      	cbz	r1, 8007746 <_reclaim_reent+0x76>
 8007740:	4620      	mov	r0, r4
 8007742:	f000 f8a5 	bl	8007890 <_free_r>
 8007746:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007748:	b111      	cbz	r1, 8007750 <_reclaim_reent+0x80>
 800774a:	4620      	mov	r0, r4
 800774c:	f000 f8a0 	bl	8007890 <_free_r>
 8007750:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007752:	b111      	cbz	r1, 800775a <_reclaim_reent+0x8a>
 8007754:	4620      	mov	r0, r4
 8007756:	f000 f89b 	bl	8007890 <_free_r>
 800775a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800775c:	b111      	cbz	r1, 8007764 <_reclaim_reent+0x94>
 800775e:	4620      	mov	r0, r4
 8007760:	f000 f896 	bl	8007890 <_free_r>
 8007764:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007766:	b111      	cbz	r1, 800776e <_reclaim_reent+0x9e>
 8007768:	4620      	mov	r0, r4
 800776a:	f000 f891 	bl	8007890 <_free_r>
 800776e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007770:	b111      	cbz	r1, 8007778 <_reclaim_reent+0xa8>
 8007772:	4620      	mov	r0, r4
 8007774:	f000 f88c 	bl	8007890 <_free_r>
 8007778:	6a23      	ldr	r3, [r4, #32]
 800777a:	b11b      	cbz	r3, 8007784 <_reclaim_reent+0xb4>
 800777c:	4620      	mov	r0, r4
 800777e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007782:	4718      	bx	r3
 8007784:	bd70      	pop	{r4, r5, r6, pc}
 8007786:	bf00      	nop
 8007788:	20000094 	.word	0x20000094

0800778c <_lseek_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	4d07      	ldr	r5, [pc, #28]	@ (80077ac <_lseek_r+0x20>)
 8007790:	4604      	mov	r4, r0
 8007792:	4608      	mov	r0, r1
 8007794:	4611      	mov	r1, r2
 8007796:	2200      	movs	r2, #0
 8007798:	602a      	str	r2, [r5, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	f7f9 fae0 	bl	8000d60 <_lseek>
 80077a0:	1c43      	adds	r3, r0, #1
 80077a2:	d102      	bne.n	80077aa <_lseek_r+0x1e>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	b103      	cbz	r3, 80077aa <_lseek_r+0x1e>
 80077a8:	6023      	str	r3, [r4, #0]
 80077aa:	bd38      	pop	{r3, r4, r5, pc}
 80077ac:	20004534 	.word	0x20004534

080077b0 <_read_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	4d07      	ldr	r5, [pc, #28]	@ (80077d0 <_read_r+0x20>)
 80077b4:	4604      	mov	r4, r0
 80077b6:	4608      	mov	r0, r1
 80077b8:	4611      	mov	r1, r2
 80077ba:	2200      	movs	r2, #0
 80077bc:	602a      	str	r2, [r5, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	f7f9 fa6e 	bl	8000ca0 <_read>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_read_r+0x1e>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_read_r+0x1e>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	20004534 	.word	0x20004534

080077d4 <_sbrk_r>:
 80077d4:	b538      	push	{r3, r4, r5, lr}
 80077d6:	4d06      	ldr	r5, [pc, #24]	@ (80077f0 <_sbrk_r+0x1c>)
 80077d8:	2300      	movs	r3, #0
 80077da:	4604      	mov	r4, r0
 80077dc:	4608      	mov	r0, r1
 80077de:	602b      	str	r3, [r5, #0]
 80077e0:	f7f9 facc 	bl	8000d7c <_sbrk>
 80077e4:	1c43      	adds	r3, r0, #1
 80077e6:	d102      	bne.n	80077ee <_sbrk_r+0x1a>
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	b103      	cbz	r3, 80077ee <_sbrk_r+0x1a>
 80077ec:	6023      	str	r3, [r4, #0]
 80077ee:	bd38      	pop	{r3, r4, r5, pc}
 80077f0:	20004534 	.word	0x20004534

080077f4 <_write_r>:
 80077f4:	b538      	push	{r3, r4, r5, lr}
 80077f6:	4d07      	ldr	r5, [pc, #28]	@ (8007814 <_write_r+0x20>)
 80077f8:	4604      	mov	r4, r0
 80077fa:	4608      	mov	r0, r1
 80077fc:	4611      	mov	r1, r2
 80077fe:	2200      	movs	r2, #0
 8007800:	602a      	str	r2, [r5, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	f7f9 fa69 	bl	8000cda <_write>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d102      	bne.n	8007812 <_write_r+0x1e>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	b103      	cbz	r3, 8007812 <_write_r+0x1e>
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	20004534 	.word	0x20004534

08007818 <__errno>:
 8007818:	4b01      	ldr	r3, [pc, #4]	@ (8007820 <__errno+0x8>)
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	20000094 	.word	0x20000094

08007824 <__libc_init_array>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	4d0d      	ldr	r5, [pc, #52]	@ (800785c <__libc_init_array+0x38>)
 8007828:	4c0d      	ldr	r4, [pc, #52]	@ (8007860 <__libc_init_array+0x3c>)
 800782a:	1b64      	subs	r4, r4, r5
 800782c:	10a4      	asrs	r4, r4, #2
 800782e:	2600      	movs	r6, #0
 8007830:	42a6      	cmp	r6, r4
 8007832:	d109      	bne.n	8007848 <__libc_init_array+0x24>
 8007834:	4d0b      	ldr	r5, [pc, #44]	@ (8007864 <__libc_init_array+0x40>)
 8007836:	4c0c      	ldr	r4, [pc, #48]	@ (8007868 <__libc_init_array+0x44>)
 8007838:	f000 fd06 	bl	8008248 <_init>
 800783c:	1b64      	subs	r4, r4, r5
 800783e:	10a4      	asrs	r4, r4, #2
 8007840:	2600      	movs	r6, #0
 8007842:	42a6      	cmp	r6, r4
 8007844:	d105      	bne.n	8007852 <__libc_init_array+0x2e>
 8007846:	bd70      	pop	{r4, r5, r6, pc}
 8007848:	f855 3b04 	ldr.w	r3, [r5], #4
 800784c:	4798      	blx	r3
 800784e:	3601      	adds	r6, #1
 8007850:	e7ee      	b.n	8007830 <__libc_init_array+0xc>
 8007852:	f855 3b04 	ldr.w	r3, [r5], #4
 8007856:	4798      	blx	r3
 8007858:	3601      	adds	r6, #1
 800785a:	e7f2      	b.n	8007842 <__libc_init_array+0x1e>
 800785c:	08008388 	.word	0x08008388
 8007860:	08008388 	.word	0x08008388
 8007864:	08008388 	.word	0x08008388
 8007868:	0800838c 	.word	0x0800838c

0800786c <__retarget_lock_init_recursive>:
 800786c:	4770      	bx	lr

0800786e <__retarget_lock_acquire_recursive>:
 800786e:	4770      	bx	lr

08007870 <__retarget_lock_release_recursive>:
 8007870:	4770      	bx	lr

08007872 <memcpy>:
 8007872:	440a      	add	r2, r1
 8007874:	4291      	cmp	r1, r2
 8007876:	f100 33ff 	add.w	r3, r0, #4294967295
 800787a:	d100      	bne.n	800787e <memcpy+0xc>
 800787c:	4770      	bx	lr
 800787e:	b510      	push	{r4, lr}
 8007880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007888:	4291      	cmp	r1, r2
 800788a:	d1f9      	bne.n	8007880 <memcpy+0xe>
 800788c:	bd10      	pop	{r4, pc}
	...

08007890 <_free_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4605      	mov	r5, r0
 8007894:	2900      	cmp	r1, #0
 8007896:	d041      	beq.n	800791c <_free_r+0x8c>
 8007898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800789c:	1f0c      	subs	r4, r1, #4
 800789e:	2b00      	cmp	r3, #0
 80078a0:	bfb8      	it	lt
 80078a2:	18e4      	addlt	r4, r4, r3
 80078a4:	f7ff fdd8 	bl	8007458 <__malloc_lock>
 80078a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007920 <_free_r+0x90>)
 80078aa:	6813      	ldr	r3, [r2, #0]
 80078ac:	b933      	cbnz	r3, 80078bc <_free_r+0x2c>
 80078ae:	6063      	str	r3, [r4, #4]
 80078b0:	6014      	str	r4, [r2, #0]
 80078b2:	4628      	mov	r0, r5
 80078b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078b8:	f7ff bdd4 	b.w	8007464 <__malloc_unlock>
 80078bc:	42a3      	cmp	r3, r4
 80078be:	d908      	bls.n	80078d2 <_free_r+0x42>
 80078c0:	6820      	ldr	r0, [r4, #0]
 80078c2:	1821      	adds	r1, r4, r0
 80078c4:	428b      	cmp	r3, r1
 80078c6:	bf01      	itttt	eq
 80078c8:	6819      	ldreq	r1, [r3, #0]
 80078ca:	685b      	ldreq	r3, [r3, #4]
 80078cc:	1809      	addeq	r1, r1, r0
 80078ce:	6021      	streq	r1, [r4, #0]
 80078d0:	e7ed      	b.n	80078ae <_free_r+0x1e>
 80078d2:	461a      	mov	r2, r3
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	b10b      	cbz	r3, 80078dc <_free_r+0x4c>
 80078d8:	42a3      	cmp	r3, r4
 80078da:	d9fa      	bls.n	80078d2 <_free_r+0x42>
 80078dc:	6811      	ldr	r1, [r2, #0]
 80078de:	1850      	adds	r0, r2, r1
 80078e0:	42a0      	cmp	r0, r4
 80078e2:	d10b      	bne.n	80078fc <_free_r+0x6c>
 80078e4:	6820      	ldr	r0, [r4, #0]
 80078e6:	4401      	add	r1, r0
 80078e8:	1850      	adds	r0, r2, r1
 80078ea:	4283      	cmp	r3, r0
 80078ec:	6011      	str	r1, [r2, #0]
 80078ee:	d1e0      	bne.n	80078b2 <_free_r+0x22>
 80078f0:	6818      	ldr	r0, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	6053      	str	r3, [r2, #4]
 80078f6:	4408      	add	r0, r1
 80078f8:	6010      	str	r0, [r2, #0]
 80078fa:	e7da      	b.n	80078b2 <_free_r+0x22>
 80078fc:	d902      	bls.n	8007904 <_free_r+0x74>
 80078fe:	230c      	movs	r3, #12
 8007900:	602b      	str	r3, [r5, #0]
 8007902:	e7d6      	b.n	80078b2 <_free_r+0x22>
 8007904:	6820      	ldr	r0, [r4, #0]
 8007906:	1821      	adds	r1, r4, r0
 8007908:	428b      	cmp	r3, r1
 800790a:	bf04      	itt	eq
 800790c:	6819      	ldreq	r1, [r3, #0]
 800790e:	685b      	ldreq	r3, [r3, #4]
 8007910:	6063      	str	r3, [r4, #4]
 8007912:	bf04      	itt	eq
 8007914:	1809      	addeq	r1, r1, r0
 8007916:	6021      	streq	r1, [r4, #0]
 8007918:	6054      	str	r4, [r2, #4]
 800791a:	e7ca      	b.n	80078b2 <_free_r+0x22>
 800791c:	bd38      	pop	{r3, r4, r5, pc}
 800791e:	bf00      	nop
 8007920:	200043f4 	.word	0x200043f4

08007924 <__sfputc_r>:
 8007924:	6893      	ldr	r3, [r2, #8]
 8007926:	3b01      	subs	r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	b410      	push	{r4}
 800792c:	6093      	str	r3, [r2, #8]
 800792e:	da08      	bge.n	8007942 <__sfputc_r+0x1e>
 8007930:	6994      	ldr	r4, [r2, #24]
 8007932:	42a3      	cmp	r3, r4
 8007934:	db01      	blt.n	800793a <__sfputc_r+0x16>
 8007936:	290a      	cmp	r1, #10
 8007938:	d103      	bne.n	8007942 <__sfputc_r+0x1e>
 800793a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800793e:	f000 bb6b 	b.w	8008018 <__swbuf_r>
 8007942:	6813      	ldr	r3, [r2, #0]
 8007944:	1c58      	adds	r0, r3, #1
 8007946:	6010      	str	r0, [r2, #0]
 8007948:	7019      	strb	r1, [r3, #0]
 800794a:	4608      	mov	r0, r1
 800794c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007950:	4770      	bx	lr

08007952 <__sfputs_r>:
 8007952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007954:	4606      	mov	r6, r0
 8007956:	460f      	mov	r7, r1
 8007958:	4614      	mov	r4, r2
 800795a:	18d5      	adds	r5, r2, r3
 800795c:	42ac      	cmp	r4, r5
 800795e:	d101      	bne.n	8007964 <__sfputs_r+0x12>
 8007960:	2000      	movs	r0, #0
 8007962:	e007      	b.n	8007974 <__sfputs_r+0x22>
 8007964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007968:	463a      	mov	r2, r7
 800796a:	4630      	mov	r0, r6
 800796c:	f7ff ffda 	bl	8007924 <__sfputc_r>
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	d1f3      	bne.n	800795c <__sfputs_r+0xa>
 8007974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007978 <_vfiprintf_r>:
 8007978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797c:	460d      	mov	r5, r1
 800797e:	b09d      	sub	sp, #116	@ 0x74
 8007980:	4614      	mov	r4, r2
 8007982:	4698      	mov	r8, r3
 8007984:	4606      	mov	r6, r0
 8007986:	b118      	cbz	r0, 8007990 <_vfiprintf_r+0x18>
 8007988:	6a03      	ldr	r3, [r0, #32]
 800798a:	b90b      	cbnz	r3, 8007990 <_vfiprintf_r+0x18>
 800798c:	f7ff fdfc 	bl	8007588 <__sinit>
 8007990:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007992:	07d9      	lsls	r1, r3, #31
 8007994:	d405      	bmi.n	80079a2 <_vfiprintf_r+0x2a>
 8007996:	89ab      	ldrh	r3, [r5, #12]
 8007998:	059a      	lsls	r2, r3, #22
 800799a:	d402      	bmi.n	80079a2 <_vfiprintf_r+0x2a>
 800799c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800799e:	f7ff ff66 	bl	800786e <__retarget_lock_acquire_recursive>
 80079a2:	89ab      	ldrh	r3, [r5, #12]
 80079a4:	071b      	lsls	r3, r3, #28
 80079a6:	d501      	bpl.n	80079ac <_vfiprintf_r+0x34>
 80079a8:	692b      	ldr	r3, [r5, #16]
 80079aa:	b99b      	cbnz	r3, 80079d4 <_vfiprintf_r+0x5c>
 80079ac:	4629      	mov	r1, r5
 80079ae:	4630      	mov	r0, r6
 80079b0:	f000 fb70 	bl	8008094 <__swsetup_r>
 80079b4:	b170      	cbz	r0, 80079d4 <_vfiprintf_r+0x5c>
 80079b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079b8:	07dc      	lsls	r4, r3, #31
 80079ba:	d504      	bpl.n	80079c6 <_vfiprintf_r+0x4e>
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295
 80079c0:	b01d      	add	sp, #116	@ 0x74
 80079c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c6:	89ab      	ldrh	r3, [r5, #12]
 80079c8:	0598      	lsls	r0, r3, #22
 80079ca:	d4f7      	bmi.n	80079bc <_vfiprintf_r+0x44>
 80079cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079ce:	f7ff ff4f 	bl	8007870 <__retarget_lock_release_recursive>
 80079d2:	e7f3      	b.n	80079bc <_vfiprintf_r+0x44>
 80079d4:	2300      	movs	r3, #0
 80079d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80079d8:	2320      	movs	r3, #32
 80079da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079de:	f8cd 800c 	str.w	r8, [sp, #12]
 80079e2:	2330      	movs	r3, #48	@ 0x30
 80079e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007b94 <_vfiprintf_r+0x21c>
 80079e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079ec:	f04f 0901 	mov.w	r9, #1
 80079f0:	4623      	mov	r3, r4
 80079f2:	469a      	mov	sl, r3
 80079f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079f8:	b10a      	cbz	r2, 80079fe <_vfiprintf_r+0x86>
 80079fa:	2a25      	cmp	r2, #37	@ 0x25
 80079fc:	d1f9      	bne.n	80079f2 <_vfiprintf_r+0x7a>
 80079fe:	ebba 0b04 	subs.w	fp, sl, r4
 8007a02:	d00b      	beq.n	8007a1c <_vfiprintf_r+0xa4>
 8007a04:	465b      	mov	r3, fp
 8007a06:	4622      	mov	r2, r4
 8007a08:	4629      	mov	r1, r5
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f7ff ffa1 	bl	8007952 <__sfputs_r>
 8007a10:	3001      	adds	r0, #1
 8007a12:	f000 80a7 	beq.w	8007b64 <_vfiprintf_r+0x1ec>
 8007a16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a18:	445a      	add	r2, fp
 8007a1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 809f 	beq.w	8007b64 <_vfiprintf_r+0x1ec>
 8007a26:	2300      	movs	r3, #0
 8007a28:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a30:	f10a 0a01 	add.w	sl, sl, #1
 8007a34:	9304      	str	r3, [sp, #16]
 8007a36:	9307      	str	r3, [sp, #28]
 8007a38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a3e:	4654      	mov	r4, sl
 8007a40:	2205      	movs	r2, #5
 8007a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a46:	4853      	ldr	r0, [pc, #332]	@ (8007b94 <_vfiprintf_r+0x21c>)
 8007a48:	f7f8 fbca 	bl	80001e0 <memchr>
 8007a4c:	9a04      	ldr	r2, [sp, #16]
 8007a4e:	b9d8      	cbnz	r0, 8007a88 <_vfiprintf_r+0x110>
 8007a50:	06d1      	lsls	r1, r2, #27
 8007a52:	bf44      	itt	mi
 8007a54:	2320      	movmi	r3, #32
 8007a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a5a:	0713      	lsls	r3, r2, #28
 8007a5c:	bf44      	itt	mi
 8007a5e:	232b      	movmi	r3, #43	@ 0x2b
 8007a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a64:	f89a 3000 	ldrb.w	r3, [sl]
 8007a68:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a6a:	d015      	beq.n	8007a98 <_vfiprintf_r+0x120>
 8007a6c:	9a07      	ldr	r2, [sp, #28]
 8007a6e:	4654      	mov	r4, sl
 8007a70:	2000      	movs	r0, #0
 8007a72:	f04f 0c0a 	mov.w	ip, #10
 8007a76:	4621      	mov	r1, r4
 8007a78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a7c:	3b30      	subs	r3, #48	@ 0x30
 8007a7e:	2b09      	cmp	r3, #9
 8007a80:	d94b      	bls.n	8007b1a <_vfiprintf_r+0x1a2>
 8007a82:	b1b0      	cbz	r0, 8007ab2 <_vfiprintf_r+0x13a>
 8007a84:	9207      	str	r2, [sp, #28]
 8007a86:	e014      	b.n	8007ab2 <_vfiprintf_r+0x13a>
 8007a88:	eba0 0308 	sub.w	r3, r0, r8
 8007a8c:	fa09 f303 	lsl.w	r3, r9, r3
 8007a90:	4313      	orrs	r3, r2
 8007a92:	9304      	str	r3, [sp, #16]
 8007a94:	46a2      	mov	sl, r4
 8007a96:	e7d2      	b.n	8007a3e <_vfiprintf_r+0xc6>
 8007a98:	9b03      	ldr	r3, [sp, #12]
 8007a9a:	1d19      	adds	r1, r3, #4
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	9103      	str	r1, [sp, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	bfbb      	ittet	lt
 8007aa4:	425b      	neglt	r3, r3
 8007aa6:	f042 0202 	orrlt.w	r2, r2, #2
 8007aaa:	9307      	strge	r3, [sp, #28]
 8007aac:	9307      	strlt	r3, [sp, #28]
 8007aae:	bfb8      	it	lt
 8007ab0:	9204      	strlt	r2, [sp, #16]
 8007ab2:	7823      	ldrb	r3, [r4, #0]
 8007ab4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ab6:	d10a      	bne.n	8007ace <_vfiprintf_r+0x156>
 8007ab8:	7863      	ldrb	r3, [r4, #1]
 8007aba:	2b2a      	cmp	r3, #42	@ 0x2a
 8007abc:	d132      	bne.n	8007b24 <_vfiprintf_r+0x1ac>
 8007abe:	9b03      	ldr	r3, [sp, #12]
 8007ac0:	1d1a      	adds	r2, r3, #4
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	9203      	str	r2, [sp, #12]
 8007ac6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007aca:	3402      	adds	r4, #2
 8007acc:	9305      	str	r3, [sp, #20]
 8007ace:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ba4 <_vfiprintf_r+0x22c>
 8007ad2:	7821      	ldrb	r1, [r4, #0]
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	4650      	mov	r0, sl
 8007ad8:	f7f8 fb82 	bl	80001e0 <memchr>
 8007adc:	b138      	cbz	r0, 8007aee <_vfiprintf_r+0x176>
 8007ade:	9b04      	ldr	r3, [sp, #16]
 8007ae0:	eba0 000a 	sub.w	r0, r0, sl
 8007ae4:	2240      	movs	r2, #64	@ 0x40
 8007ae6:	4082      	lsls	r2, r0
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	3401      	adds	r4, #1
 8007aec:	9304      	str	r3, [sp, #16]
 8007aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af2:	4829      	ldr	r0, [pc, #164]	@ (8007b98 <_vfiprintf_r+0x220>)
 8007af4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007af8:	2206      	movs	r2, #6
 8007afa:	f7f8 fb71 	bl	80001e0 <memchr>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d03f      	beq.n	8007b82 <_vfiprintf_r+0x20a>
 8007b02:	4b26      	ldr	r3, [pc, #152]	@ (8007b9c <_vfiprintf_r+0x224>)
 8007b04:	bb1b      	cbnz	r3, 8007b4e <_vfiprintf_r+0x1d6>
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	3307      	adds	r3, #7
 8007b0a:	f023 0307 	bic.w	r3, r3, #7
 8007b0e:	3308      	adds	r3, #8
 8007b10:	9303      	str	r3, [sp, #12]
 8007b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b14:	443b      	add	r3, r7
 8007b16:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b18:	e76a      	b.n	80079f0 <_vfiprintf_r+0x78>
 8007b1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b1e:	460c      	mov	r4, r1
 8007b20:	2001      	movs	r0, #1
 8007b22:	e7a8      	b.n	8007a76 <_vfiprintf_r+0xfe>
 8007b24:	2300      	movs	r3, #0
 8007b26:	3401      	adds	r4, #1
 8007b28:	9305      	str	r3, [sp, #20]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	f04f 0c0a 	mov.w	ip, #10
 8007b30:	4620      	mov	r0, r4
 8007b32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b36:	3a30      	subs	r2, #48	@ 0x30
 8007b38:	2a09      	cmp	r2, #9
 8007b3a:	d903      	bls.n	8007b44 <_vfiprintf_r+0x1cc>
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d0c6      	beq.n	8007ace <_vfiprintf_r+0x156>
 8007b40:	9105      	str	r1, [sp, #20]
 8007b42:	e7c4      	b.n	8007ace <_vfiprintf_r+0x156>
 8007b44:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b48:	4604      	mov	r4, r0
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e7f0      	b.n	8007b30 <_vfiprintf_r+0x1b8>
 8007b4e:	ab03      	add	r3, sp, #12
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	462a      	mov	r2, r5
 8007b54:	4b12      	ldr	r3, [pc, #72]	@ (8007ba0 <_vfiprintf_r+0x228>)
 8007b56:	a904      	add	r1, sp, #16
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f3af 8000 	nop.w
 8007b5e:	4607      	mov	r7, r0
 8007b60:	1c78      	adds	r0, r7, #1
 8007b62:	d1d6      	bne.n	8007b12 <_vfiprintf_r+0x19a>
 8007b64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b66:	07d9      	lsls	r1, r3, #31
 8007b68:	d405      	bmi.n	8007b76 <_vfiprintf_r+0x1fe>
 8007b6a:	89ab      	ldrh	r3, [r5, #12]
 8007b6c:	059a      	lsls	r2, r3, #22
 8007b6e:	d402      	bmi.n	8007b76 <_vfiprintf_r+0x1fe>
 8007b70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b72:	f7ff fe7d 	bl	8007870 <__retarget_lock_release_recursive>
 8007b76:	89ab      	ldrh	r3, [r5, #12]
 8007b78:	065b      	lsls	r3, r3, #25
 8007b7a:	f53f af1f 	bmi.w	80079bc <_vfiprintf_r+0x44>
 8007b7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b80:	e71e      	b.n	80079c0 <_vfiprintf_r+0x48>
 8007b82:	ab03      	add	r3, sp, #12
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	462a      	mov	r2, r5
 8007b88:	4b05      	ldr	r3, [pc, #20]	@ (8007ba0 <_vfiprintf_r+0x228>)
 8007b8a:	a904      	add	r1, sp, #16
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f000 f879 	bl	8007c84 <_printf_i>
 8007b92:	e7e4      	b.n	8007b5e <_vfiprintf_r+0x1e6>
 8007b94:	0800834c 	.word	0x0800834c
 8007b98:	08008356 	.word	0x08008356
 8007b9c:	00000000 	.word	0x00000000
 8007ba0:	08007953 	.word	0x08007953
 8007ba4:	08008352 	.word	0x08008352

08007ba8 <_printf_common>:
 8007ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bac:	4616      	mov	r6, r2
 8007bae:	4698      	mov	r8, r3
 8007bb0:	688a      	ldr	r2, [r1, #8]
 8007bb2:	690b      	ldr	r3, [r1, #16]
 8007bb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	bfb8      	it	lt
 8007bbc:	4613      	movlt	r3, r2
 8007bbe:	6033      	str	r3, [r6, #0]
 8007bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bc4:	4607      	mov	r7, r0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	b10a      	cbz	r2, 8007bce <_printf_common+0x26>
 8007bca:	3301      	adds	r3, #1
 8007bcc:	6033      	str	r3, [r6, #0]
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	0699      	lsls	r1, r3, #26
 8007bd2:	bf42      	ittt	mi
 8007bd4:	6833      	ldrmi	r3, [r6, #0]
 8007bd6:	3302      	addmi	r3, #2
 8007bd8:	6033      	strmi	r3, [r6, #0]
 8007bda:	6825      	ldr	r5, [r4, #0]
 8007bdc:	f015 0506 	ands.w	r5, r5, #6
 8007be0:	d106      	bne.n	8007bf0 <_printf_common+0x48>
 8007be2:	f104 0a19 	add.w	sl, r4, #25
 8007be6:	68e3      	ldr	r3, [r4, #12]
 8007be8:	6832      	ldr	r2, [r6, #0]
 8007bea:	1a9b      	subs	r3, r3, r2
 8007bec:	42ab      	cmp	r3, r5
 8007bee:	dc26      	bgt.n	8007c3e <_printf_common+0x96>
 8007bf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007bf4:	6822      	ldr	r2, [r4, #0]
 8007bf6:	3b00      	subs	r3, #0
 8007bf8:	bf18      	it	ne
 8007bfa:	2301      	movne	r3, #1
 8007bfc:	0692      	lsls	r2, r2, #26
 8007bfe:	d42b      	bmi.n	8007c58 <_printf_common+0xb0>
 8007c00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c04:	4641      	mov	r1, r8
 8007c06:	4638      	mov	r0, r7
 8007c08:	47c8      	blx	r9
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	d01e      	beq.n	8007c4c <_printf_common+0xa4>
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	6922      	ldr	r2, [r4, #16]
 8007c12:	f003 0306 	and.w	r3, r3, #6
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	bf02      	ittt	eq
 8007c1a:	68e5      	ldreq	r5, [r4, #12]
 8007c1c:	6833      	ldreq	r3, [r6, #0]
 8007c1e:	1aed      	subeq	r5, r5, r3
 8007c20:	68a3      	ldr	r3, [r4, #8]
 8007c22:	bf0c      	ite	eq
 8007c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c28:	2500      	movne	r5, #0
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	bfc4      	itt	gt
 8007c2e:	1a9b      	subgt	r3, r3, r2
 8007c30:	18ed      	addgt	r5, r5, r3
 8007c32:	2600      	movs	r6, #0
 8007c34:	341a      	adds	r4, #26
 8007c36:	42b5      	cmp	r5, r6
 8007c38:	d11a      	bne.n	8007c70 <_printf_common+0xc8>
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	e008      	b.n	8007c50 <_printf_common+0xa8>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	4652      	mov	r2, sl
 8007c42:	4641      	mov	r1, r8
 8007c44:	4638      	mov	r0, r7
 8007c46:	47c8      	blx	r9
 8007c48:	3001      	adds	r0, #1
 8007c4a:	d103      	bne.n	8007c54 <_printf_common+0xac>
 8007c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c54:	3501      	adds	r5, #1
 8007c56:	e7c6      	b.n	8007be6 <_printf_common+0x3e>
 8007c58:	18e1      	adds	r1, r4, r3
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	2030      	movs	r0, #48	@ 0x30
 8007c5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c62:	4422      	add	r2, r4
 8007c64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c6c:	3302      	adds	r3, #2
 8007c6e:	e7c7      	b.n	8007c00 <_printf_common+0x58>
 8007c70:	2301      	movs	r3, #1
 8007c72:	4622      	mov	r2, r4
 8007c74:	4641      	mov	r1, r8
 8007c76:	4638      	mov	r0, r7
 8007c78:	47c8      	blx	r9
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	d0e6      	beq.n	8007c4c <_printf_common+0xa4>
 8007c7e:	3601      	adds	r6, #1
 8007c80:	e7d9      	b.n	8007c36 <_printf_common+0x8e>
	...

08007c84 <_printf_i>:
 8007c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c88:	7e0f      	ldrb	r7, [r1, #24]
 8007c8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c8c:	2f78      	cmp	r7, #120	@ 0x78
 8007c8e:	4691      	mov	r9, r2
 8007c90:	4680      	mov	r8, r0
 8007c92:	460c      	mov	r4, r1
 8007c94:	469a      	mov	sl, r3
 8007c96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c9a:	d807      	bhi.n	8007cac <_printf_i+0x28>
 8007c9c:	2f62      	cmp	r7, #98	@ 0x62
 8007c9e:	d80a      	bhi.n	8007cb6 <_printf_i+0x32>
 8007ca0:	2f00      	cmp	r7, #0
 8007ca2:	f000 80d1 	beq.w	8007e48 <_printf_i+0x1c4>
 8007ca6:	2f58      	cmp	r7, #88	@ 0x58
 8007ca8:	f000 80b8 	beq.w	8007e1c <_printf_i+0x198>
 8007cac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cb4:	e03a      	b.n	8007d2c <_printf_i+0xa8>
 8007cb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007cba:	2b15      	cmp	r3, #21
 8007cbc:	d8f6      	bhi.n	8007cac <_printf_i+0x28>
 8007cbe:	a101      	add	r1, pc, #4	@ (adr r1, 8007cc4 <_printf_i+0x40>)
 8007cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cc4:	08007d1d 	.word	0x08007d1d
 8007cc8:	08007d31 	.word	0x08007d31
 8007ccc:	08007cad 	.word	0x08007cad
 8007cd0:	08007cad 	.word	0x08007cad
 8007cd4:	08007cad 	.word	0x08007cad
 8007cd8:	08007cad 	.word	0x08007cad
 8007cdc:	08007d31 	.word	0x08007d31
 8007ce0:	08007cad 	.word	0x08007cad
 8007ce4:	08007cad 	.word	0x08007cad
 8007ce8:	08007cad 	.word	0x08007cad
 8007cec:	08007cad 	.word	0x08007cad
 8007cf0:	08007e2f 	.word	0x08007e2f
 8007cf4:	08007d5b 	.word	0x08007d5b
 8007cf8:	08007de9 	.word	0x08007de9
 8007cfc:	08007cad 	.word	0x08007cad
 8007d00:	08007cad 	.word	0x08007cad
 8007d04:	08007e51 	.word	0x08007e51
 8007d08:	08007cad 	.word	0x08007cad
 8007d0c:	08007d5b 	.word	0x08007d5b
 8007d10:	08007cad 	.word	0x08007cad
 8007d14:	08007cad 	.word	0x08007cad
 8007d18:	08007df1 	.word	0x08007df1
 8007d1c:	6833      	ldr	r3, [r6, #0]
 8007d1e:	1d1a      	adds	r2, r3, #4
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6032      	str	r2, [r6, #0]
 8007d24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e09c      	b.n	8007e6a <_printf_i+0x1e6>
 8007d30:	6833      	ldr	r3, [r6, #0]
 8007d32:	6820      	ldr	r0, [r4, #0]
 8007d34:	1d19      	adds	r1, r3, #4
 8007d36:	6031      	str	r1, [r6, #0]
 8007d38:	0606      	lsls	r6, r0, #24
 8007d3a:	d501      	bpl.n	8007d40 <_printf_i+0xbc>
 8007d3c:	681d      	ldr	r5, [r3, #0]
 8007d3e:	e003      	b.n	8007d48 <_printf_i+0xc4>
 8007d40:	0645      	lsls	r5, r0, #25
 8007d42:	d5fb      	bpl.n	8007d3c <_printf_i+0xb8>
 8007d44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d48:	2d00      	cmp	r5, #0
 8007d4a:	da03      	bge.n	8007d54 <_printf_i+0xd0>
 8007d4c:	232d      	movs	r3, #45	@ 0x2d
 8007d4e:	426d      	negs	r5, r5
 8007d50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d54:	4858      	ldr	r0, [pc, #352]	@ (8007eb8 <_printf_i+0x234>)
 8007d56:	230a      	movs	r3, #10
 8007d58:	e011      	b.n	8007d7e <_printf_i+0xfa>
 8007d5a:	6821      	ldr	r1, [r4, #0]
 8007d5c:	6833      	ldr	r3, [r6, #0]
 8007d5e:	0608      	lsls	r0, r1, #24
 8007d60:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d64:	d402      	bmi.n	8007d6c <_printf_i+0xe8>
 8007d66:	0649      	lsls	r1, r1, #25
 8007d68:	bf48      	it	mi
 8007d6a:	b2ad      	uxthmi	r5, r5
 8007d6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d6e:	4852      	ldr	r0, [pc, #328]	@ (8007eb8 <_printf_i+0x234>)
 8007d70:	6033      	str	r3, [r6, #0]
 8007d72:	bf14      	ite	ne
 8007d74:	230a      	movne	r3, #10
 8007d76:	2308      	moveq	r3, #8
 8007d78:	2100      	movs	r1, #0
 8007d7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d7e:	6866      	ldr	r6, [r4, #4]
 8007d80:	60a6      	str	r6, [r4, #8]
 8007d82:	2e00      	cmp	r6, #0
 8007d84:	db05      	blt.n	8007d92 <_printf_i+0x10e>
 8007d86:	6821      	ldr	r1, [r4, #0]
 8007d88:	432e      	orrs	r6, r5
 8007d8a:	f021 0104 	bic.w	r1, r1, #4
 8007d8e:	6021      	str	r1, [r4, #0]
 8007d90:	d04b      	beq.n	8007e2a <_printf_i+0x1a6>
 8007d92:	4616      	mov	r6, r2
 8007d94:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d98:	fb03 5711 	mls	r7, r3, r1, r5
 8007d9c:	5dc7      	ldrb	r7, [r0, r7]
 8007d9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007da2:	462f      	mov	r7, r5
 8007da4:	42bb      	cmp	r3, r7
 8007da6:	460d      	mov	r5, r1
 8007da8:	d9f4      	bls.n	8007d94 <_printf_i+0x110>
 8007daa:	2b08      	cmp	r3, #8
 8007dac:	d10b      	bne.n	8007dc6 <_printf_i+0x142>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	07df      	lsls	r7, r3, #31
 8007db2:	d508      	bpl.n	8007dc6 <_printf_i+0x142>
 8007db4:	6923      	ldr	r3, [r4, #16]
 8007db6:	6861      	ldr	r1, [r4, #4]
 8007db8:	4299      	cmp	r1, r3
 8007dba:	bfde      	ittt	le
 8007dbc:	2330      	movle	r3, #48	@ 0x30
 8007dbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007dc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007dc6:	1b92      	subs	r2, r2, r6
 8007dc8:	6122      	str	r2, [r4, #16]
 8007dca:	f8cd a000 	str.w	sl, [sp]
 8007dce:	464b      	mov	r3, r9
 8007dd0:	aa03      	add	r2, sp, #12
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	4640      	mov	r0, r8
 8007dd6:	f7ff fee7 	bl	8007ba8 <_printf_common>
 8007dda:	3001      	adds	r0, #1
 8007ddc:	d14a      	bne.n	8007e74 <_printf_i+0x1f0>
 8007dde:	f04f 30ff 	mov.w	r0, #4294967295
 8007de2:	b004      	add	sp, #16
 8007de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	f043 0320 	orr.w	r3, r3, #32
 8007dee:	6023      	str	r3, [r4, #0]
 8007df0:	4832      	ldr	r0, [pc, #200]	@ (8007ebc <_printf_i+0x238>)
 8007df2:	2778      	movs	r7, #120	@ 0x78
 8007df4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	6831      	ldr	r1, [r6, #0]
 8007dfc:	061f      	lsls	r7, r3, #24
 8007dfe:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e02:	d402      	bmi.n	8007e0a <_printf_i+0x186>
 8007e04:	065f      	lsls	r7, r3, #25
 8007e06:	bf48      	it	mi
 8007e08:	b2ad      	uxthmi	r5, r5
 8007e0a:	6031      	str	r1, [r6, #0]
 8007e0c:	07d9      	lsls	r1, r3, #31
 8007e0e:	bf44      	itt	mi
 8007e10:	f043 0320 	orrmi.w	r3, r3, #32
 8007e14:	6023      	strmi	r3, [r4, #0]
 8007e16:	b11d      	cbz	r5, 8007e20 <_printf_i+0x19c>
 8007e18:	2310      	movs	r3, #16
 8007e1a:	e7ad      	b.n	8007d78 <_printf_i+0xf4>
 8007e1c:	4826      	ldr	r0, [pc, #152]	@ (8007eb8 <_printf_i+0x234>)
 8007e1e:	e7e9      	b.n	8007df4 <_printf_i+0x170>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	f023 0320 	bic.w	r3, r3, #32
 8007e26:	6023      	str	r3, [r4, #0]
 8007e28:	e7f6      	b.n	8007e18 <_printf_i+0x194>
 8007e2a:	4616      	mov	r6, r2
 8007e2c:	e7bd      	b.n	8007daa <_printf_i+0x126>
 8007e2e:	6833      	ldr	r3, [r6, #0]
 8007e30:	6825      	ldr	r5, [r4, #0]
 8007e32:	6961      	ldr	r1, [r4, #20]
 8007e34:	1d18      	adds	r0, r3, #4
 8007e36:	6030      	str	r0, [r6, #0]
 8007e38:	062e      	lsls	r6, r5, #24
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	d501      	bpl.n	8007e42 <_printf_i+0x1be>
 8007e3e:	6019      	str	r1, [r3, #0]
 8007e40:	e002      	b.n	8007e48 <_printf_i+0x1c4>
 8007e42:	0668      	lsls	r0, r5, #25
 8007e44:	d5fb      	bpl.n	8007e3e <_printf_i+0x1ba>
 8007e46:	8019      	strh	r1, [r3, #0]
 8007e48:	2300      	movs	r3, #0
 8007e4a:	6123      	str	r3, [r4, #16]
 8007e4c:	4616      	mov	r6, r2
 8007e4e:	e7bc      	b.n	8007dca <_printf_i+0x146>
 8007e50:	6833      	ldr	r3, [r6, #0]
 8007e52:	1d1a      	adds	r2, r3, #4
 8007e54:	6032      	str	r2, [r6, #0]
 8007e56:	681e      	ldr	r6, [r3, #0]
 8007e58:	6862      	ldr	r2, [r4, #4]
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f7f8 f9bf 	bl	80001e0 <memchr>
 8007e62:	b108      	cbz	r0, 8007e68 <_printf_i+0x1e4>
 8007e64:	1b80      	subs	r0, r0, r6
 8007e66:	6060      	str	r0, [r4, #4]
 8007e68:	6863      	ldr	r3, [r4, #4]
 8007e6a:	6123      	str	r3, [r4, #16]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e72:	e7aa      	b.n	8007dca <_printf_i+0x146>
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	4632      	mov	r2, r6
 8007e78:	4649      	mov	r1, r9
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	47d0      	blx	sl
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d0ad      	beq.n	8007dde <_printf_i+0x15a>
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	079b      	lsls	r3, r3, #30
 8007e86:	d413      	bmi.n	8007eb0 <_printf_i+0x22c>
 8007e88:	68e0      	ldr	r0, [r4, #12]
 8007e8a:	9b03      	ldr	r3, [sp, #12]
 8007e8c:	4298      	cmp	r0, r3
 8007e8e:	bfb8      	it	lt
 8007e90:	4618      	movlt	r0, r3
 8007e92:	e7a6      	b.n	8007de2 <_printf_i+0x15e>
 8007e94:	2301      	movs	r3, #1
 8007e96:	4632      	mov	r2, r6
 8007e98:	4649      	mov	r1, r9
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	47d0      	blx	sl
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	d09d      	beq.n	8007dde <_printf_i+0x15a>
 8007ea2:	3501      	adds	r5, #1
 8007ea4:	68e3      	ldr	r3, [r4, #12]
 8007ea6:	9903      	ldr	r1, [sp, #12]
 8007ea8:	1a5b      	subs	r3, r3, r1
 8007eaa:	42ab      	cmp	r3, r5
 8007eac:	dcf2      	bgt.n	8007e94 <_printf_i+0x210>
 8007eae:	e7eb      	b.n	8007e88 <_printf_i+0x204>
 8007eb0:	2500      	movs	r5, #0
 8007eb2:	f104 0619 	add.w	r6, r4, #25
 8007eb6:	e7f5      	b.n	8007ea4 <_printf_i+0x220>
 8007eb8:	0800835d 	.word	0x0800835d
 8007ebc:	0800836e 	.word	0x0800836e

08007ec0 <__sflush_r>:
 8007ec0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec8:	0716      	lsls	r6, r2, #28
 8007eca:	4605      	mov	r5, r0
 8007ecc:	460c      	mov	r4, r1
 8007ece:	d454      	bmi.n	8007f7a <__sflush_r+0xba>
 8007ed0:	684b      	ldr	r3, [r1, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	dc02      	bgt.n	8007edc <__sflush_r+0x1c>
 8007ed6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	dd48      	ble.n	8007f6e <__sflush_r+0xae>
 8007edc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ede:	2e00      	cmp	r6, #0
 8007ee0:	d045      	beq.n	8007f6e <__sflush_r+0xae>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ee8:	682f      	ldr	r7, [r5, #0]
 8007eea:	6a21      	ldr	r1, [r4, #32]
 8007eec:	602b      	str	r3, [r5, #0]
 8007eee:	d030      	beq.n	8007f52 <__sflush_r+0x92>
 8007ef0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	0759      	lsls	r1, r3, #29
 8007ef6:	d505      	bpl.n	8007f04 <__sflush_r+0x44>
 8007ef8:	6863      	ldr	r3, [r4, #4]
 8007efa:	1ad2      	subs	r2, r2, r3
 8007efc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007efe:	b10b      	cbz	r3, 8007f04 <__sflush_r+0x44>
 8007f00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f02:	1ad2      	subs	r2, r2, r3
 8007f04:	2300      	movs	r3, #0
 8007f06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f08:	6a21      	ldr	r1, [r4, #32]
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	47b0      	blx	r6
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	d106      	bne.n	8007f22 <__sflush_r+0x62>
 8007f14:	6829      	ldr	r1, [r5, #0]
 8007f16:	291d      	cmp	r1, #29
 8007f18:	d82b      	bhi.n	8007f72 <__sflush_r+0xb2>
 8007f1a:	4a2a      	ldr	r2, [pc, #168]	@ (8007fc4 <__sflush_r+0x104>)
 8007f1c:	40ca      	lsrs	r2, r1
 8007f1e:	07d6      	lsls	r6, r2, #31
 8007f20:	d527      	bpl.n	8007f72 <__sflush_r+0xb2>
 8007f22:	2200      	movs	r2, #0
 8007f24:	6062      	str	r2, [r4, #4]
 8007f26:	04d9      	lsls	r1, r3, #19
 8007f28:	6922      	ldr	r2, [r4, #16]
 8007f2a:	6022      	str	r2, [r4, #0]
 8007f2c:	d504      	bpl.n	8007f38 <__sflush_r+0x78>
 8007f2e:	1c42      	adds	r2, r0, #1
 8007f30:	d101      	bne.n	8007f36 <__sflush_r+0x76>
 8007f32:	682b      	ldr	r3, [r5, #0]
 8007f34:	b903      	cbnz	r3, 8007f38 <__sflush_r+0x78>
 8007f36:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f3a:	602f      	str	r7, [r5, #0]
 8007f3c:	b1b9      	cbz	r1, 8007f6e <__sflush_r+0xae>
 8007f3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f42:	4299      	cmp	r1, r3
 8007f44:	d002      	beq.n	8007f4c <__sflush_r+0x8c>
 8007f46:	4628      	mov	r0, r5
 8007f48:	f7ff fca2 	bl	8007890 <_free_r>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f50:	e00d      	b.n	8007f6e <__sflush_r+0xae>
 8007f52:	2301      	movs	r3, #1
 8007f54:	4628      	mov	r0, r5
 8007f56:	47b0      	blx	r6
 8007f58:	4602      	mov	r2, r0
 8007f5a:	1c50      	adds	r0, r2, #1
 8007f5c:	d1c9      	bne.n	8007ef2 <__sflush_r+0x32>
 8007f5e:	682b      	ldr	r3, [r5, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d0c6      	beq.n	8007ef2 <__sflush_r+0x32>
 8007f64:	2b1d      	cmp	r3, #29
 8007f66:	d001      	beq.n	8007f6c <__sflush_r+0xac>
 8007f68:	2b16      	cmp	r3, #22
 8007f6a:	d11e      	bne.n	8007faa <__sflush_r+0xea>
 8007f6c:	602f      	str	r7, [r5, #0]
 8007f6e:	2000      	movs	r0, #0
 8007f70:	e022      	b.n	8007fb8 <__sflush_r+0xf8>
 8007f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f76:	b21b      	sxth	r3, r3
 8007f78:	e01b      	b.n	8007fb2 <__sflush_r+0xf2>
 8007f7a:	690f      	ldr	r7, [r1, #16]
 8007f7c:	2f00      	cmp	r7, #0
 8007f7e:	d0f6      	beq.n	8007f6e <__sflush_r+0xae>
 8007f80:	0793      	lsls	r3, r2, #30
 8007f82:	680e      	ldr	r6, [r1, #0]
 8007f84:	bf08      	it	eq
 8007f86:	694b      	ldreq	r3, [r1, #20]
 8007f88:	600f      	str	r7, [r1, #0]
 8007f8a:	bf18      	it	ne
 8007f8c:	2300      	movne	r3, #0
 8007f8e:	eba6 0807 	sub.w	r8, r6, r7
 8007f92:	608b      	str	r3, [r1, #8]
 8007f94:	f1b8 0f00 	cmp.w	r8, #0
 8007f98:	dde9      	ble.n	8007f6e <__sflush_r+0xae>
 8007f9a:	6a21      	ldr	r1, [r4, #32]
 8007f9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f9e:	4643      	mov	r3, r8
 8007fa0:	463a      	mov	r2, r7
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	47b0      	blx	r6
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	dc08      	bgt.n	8007fbc <__sflush_r+0xfc>
 8007faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fb2:	81a3      	strh	r3, [r4, #12]
 8007fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fbc:	4407      	add	r7, r0
 8007fbe:	eba8 0800 	sub.w	r8, r8, r0
 8007fc2:	e7e7      	b.n	8007f94 <__sflush_r+0xd4>
 8007fc4:	20400001 	.word	0x20400001

08007fc8 <_fflush_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	690b      	ldr	r3, [r1, #16]
 8007fcc:	4605      	mov	r5, r0
 8007fce:	460c      	mov	r4, r1
 8007fd0:	b913      	cbnz	r3, 8007fd8 <_fflush_r+0x10>
 8007fd2:	2500      	movs	r5, #0
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	b118      	cbz	r0, 8007fe2 <_fflush_r+0x1a>
 8007fda:	6a03      	ldr	r3, [r0, #32]
 8007fdc:	b90b      	cbnz	r3, 8007fe2 <_fflush_r+0x1a>
 8007fde:	f7ff fad3 	bl	8007588 <__sinit>
 8007fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0f3      	beq.n	8007fd2 <_fflush_r+0xa>
 8007fea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fec:	07d0      	lsls	r0, r2, #31
 8007fee:	d404      	bmi.n	8007ffa <_fflush_r+0x32>
 8007ff0:	0599      	lsls	r1, r3, #22
 8007ff2:	d402      	bmi.n	8007ffa <_fflush_r+0x32>
 8007ff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ff6:	f7ff fc3a 	bl	800786e <__retarget_lock_acquire_recursive>
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	f7ff ff5f 	bl	8007ec0 <__sflush_r>
 8008002:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008004:	07da      	lsls	r2, r3, #31
 8008006:	4605      	mov	r5, r0
 8008008:	d4e4      	bmi.n	8007fd4 <_fflush_r+0xc>
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	059b      	lsls	r3, r3, #22
 800800e:	d4e1      	bmi.n	8007fd4 <_fflush_r+0xc>
 8008010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008012:	f7ff fc2d 	bl	8007870 <__retarget_lock_release_recursive>
 8008016:	e7dd      	b.n	8007fd4 <_fflush_r+0xc>

08008018 <__swbuf_r>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	460e      	mov	r6, r1
 800801c:	4614      	mov	r4, r2
 800801e:	4605      	mov	r5, r0
 8008020:	b118      	cbz	r0, 800802a <__swbuf_r+0x12>
 8008022:	6a03      	ldr	r3, [r0, #32]
 8008024:	b90b      	cbnz	r3, 800802a <__swbuf_r+0x12>
 8008026:	f7ff faaf 	bl	8007588 <__sinit>
 800802a:	69a3      	ldr	r3, [r4, #24]
 800802c:	60a3      	str	r3, [r4, #8]
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	071a      	lsls	r2, r3, #28
 8008032:	d501      	bpl.n	8008038 <__swbuf_r+0x20>
 8008034:	6923      	ldr	r3, [r4, #16]
 8008036:	b943      	cbnz	r3, 800804a <__swbuf_r+0x32>
 8008038:	4621      	mov	r1, r4
 800803a:	4628      	mov	r0, r5
 800803c:	f000 f82a 	bl	8008094 <__swsetup_r>
 8008040:	b118      	cbz	r0, 800804a <__swbuf_r+0x32>
 8008042:	f04f 37ff 	mov.w	r7, #4294967295
 8008046:	4638      	mov	r0, r7
 8008048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	6922      	ldr	r2, [r4, #16]
 800804e:	1a98      	subs	r0, r3, r2
 8008050:	6963      	ldr	r3, [r4, #20]
 8008052:	b2f6      	uxtb	r6, r6
 8008054:	4283      	cmp	r3, r0
 8008056:	4637      	mov	r7, r6
 8008058:	dc05      	bgt.n	8008066 <__swbuf_r+0x4e>
 800805a:	4621      	mov	r1, r4
 800805c:	4628      	mov	r0, r5
 800805e:	f7ff ffb3 	bl	8007fc8 <_fflush_r>
 8008062:	2800      	cmp	r0, #0
 8008064:	d1ed      	bne.n	8008042 <__swbuf_r+0x2a>
 8008066:	68a3      	ldr	r3, [r4, #8]
 8008068:	3b01      	subs	r3, #1
 800806a:	60a3      	str	r3, [r4, #8]
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	1c5a      	adds	r2, r3, #1
 8008070:	6022      	str	r2, [r4, #0]
 8008072:	701e      	strb	r6, [r3, #0]
 8008074:	6962      	ldr	r2, [r4, #20]
 8008076:	1c43      	adds	r3, r0, #1
 8008078:	429a      	cmp	r2, r3
 800807a:	d004      	beq.n	8008086 <__swbuf_r+0x6e>
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	07db      	lsls	r3, r3, #31
 8008080:	d5e1      	bpl.n	8008046 <__swbuf_r+0x2e>
 8008082:	2e0a      	cmp	r6, #10
 8008084:	d1df      	bne.n	8008046 <__swbuf_r+0x2e>
 8008086:	4621      	mov	r1, r4
 8008088:	4628      	mov	r0, r5
 800808a:	f7ff ff9d 	bl	8007fc8 <_fflush_r>
 800808e:	2800      	cmp	r0, #0
 8008090:	d0d9      	beq.n	8008046 <__swbuf_r+0x2e>
 8008092:	e7d6      	b.n	8008042 <__swbuf_r+0x2a>

08008094 <__swsetup_r>:
 8008094:	b538      	push	{r3, r4, r5, lr}
 8008096:	4b29      	ldr	r3, [pc, #164]	@ (800813c <__swsetup_r+0xa8>)
 8008098:	4605      	mov	r5, r0
 800809a:	6818      	ldr	r0, [r3, #0]
 800809c:	460c      	mov	r4, r1
 800809e:	b118      	cbz	r0, 80080a8 <__swsetup_r+0x14>
 80080a0:	6a03      	ldr	r3, [r0, #32]
 80080a2:	b90b      	cbnz	r3, 80080a8 <__swsetup_r+0x14>
 80080a4:	f7ff fa70 	bl	8007588 <__sinit>
 80080a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ac:	0719      	lsls	r1, r3, #28
 80080ae:	d422      	bmi.n	80080f6 <__swsetup_r+0x62>
 80080b0:	06da      	lsls	r2, r3, #27
 80080b2:	d407      	bmi.n	80080c4 <__swsetup_r+0x30>
 80080b4:	2209      	movs	r2, #9
 80080b6:	602a      	str	r2, [r5, #0]
 80080b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080bc:	81a3      	strh	r3, [r4, #12]
 80080be:	f04f 30ff 	mov.w	r0, #4294967295
 80080c2:	e033      	b.n	800812c <__swsetup_r+0x98>
 80080c4:	0758      	lsls	r0, r3, #29
 80080c6:	d512      	bpl.n	80080ee <__swsetup_r+0x5a>
 80080c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080ca:	b141      	cbz	r1, 80080de <__swsetup_r+0x4a>
 80080cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080d0:	4299      	cmp	r1, r3
 80080d2:	d002      	beq.n	80080da <__swsetup_r+0x46>
 80080d4:	4628      	mov	r0, r5
 80080d6:	f7ff fbdb 	bl	8007890 <_free_r>
 80080da:	2300      	movs	r3, #0
 80080dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80080de:	89a3      	ldrh	r3, [r4, #12]
 80080e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080e4:	81a3      	strh	r3, [r4, #12]
 80080e6:	2300      	movs	r3, #0
 80080e8:	6063      	str	r3, [r4, #4]
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	f043 0308 	orr.w	r3, r3, #8
 80080f4:	81a3      	strh	r3, [r4, #12]
 80080f6:	6923      	ldr	r3, [r4, #16]
 80080f8:	b94b      	cbnz	r3, 800810e <__swsetup_r+0x7a>
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008104:	d003      	beq.n	800810e <__swsetup_r+0x7a>
 8008106:	4621      	mov	r1, r4
 8008108:	4628      	mov	r0, r5
 800810a:	f000 f83f 	bl	800818c <__smakebuf_r>
 800810e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008112:	f013 0201 	ands.w	r2, r3, #1
 8008116:	d00a      	beq.n	800812e <__swsetup_r+0x9a>
 8008118:	2200      	movs	r2, #0
 800811a:	60a2      	str	r2, [r4, #8]
 800811c:	6962      	ldr	r2, [r4, #20]
 800811e:	4252      	negs	r2, r2
 8008120:	61a2      	str	r2, [r4, #24]
 8008122:	6922      	ldr	r2, [r4, #16]
 8008124:	b942      	cbnz	r2, 8008138 <__swsetup_r+0xa4>
 8008126:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800812a:	d1c5      	bne.n	80080b8 <__swsetup_r+0x24>
 800812c:	bd38      	pop	{r3, r4, r5, pc}
 800812e:	0799      	lsls	r1, r3, #30
 8008130:	bf58      	it	pl
 8008132:	6962      	ldrpl	r2, [r4, #20]
 8008134:	60a2      	str	r2, [r4, #8]
 8008136:	e7f4      	b.n	8008122 <__swsetup_r+0x8e>
 8008138:	2000      	movs	r0, #0
 800813a:	e7f7      	b.n	800812c <__swsetup_r+0x98>
 800813c:	20000094 	.word	0x20000094

08008140 <__swhatbuf_r>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	460c      	mov	r4, r1
 8008144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008148:	2900      	cmp	r1, #0
 800814a:	b096      	sub	sp, #88	@ 0x58
 800814c:	4615      	mov	r5, r2
 800814e:	461e      	mov	r6, r3
 8008150:	da0d      	bge.n	800816e <__swhatbuf_r+0x2e>
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008158:	f04f 0100 	mov.w	r1, #0
 800815c:	bf14      	ite	ne
 800815e:	2340      	movne	r3, #64	@ 0x40
 8008160:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008164:	2000      	movs	r0, #0
 8008166:	6031      	str	r1, [r6, #0]
 8008168:	602b      	str	r3, [r5, #0]
 800816a:	b016      	add	sp, #88	@ 0x58
 800816c:	bd70      	pop	{r4, r5, r6, pc}
 800816e:	466a      	mov	r2, sp
 8008170:	f000 f848 	bl	8008204 <_fstat_r>
 8008174:	2800      	cmp	r0, #0
 8008176:	dbec      	blt.n	8008152 <__swhatbuf_r+0x12>
 8008178:	9901      	ldr	r1, [sp, #4]
 800817a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800817e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008182:	4259      	negs	r1, r3
 8008184:	4159      	adcs	r1, r3
 8008186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800818a:	e7eb      	b.n	8008164 <__swhatbuf_r+0x24>

0800818c <__smakebuf_r>:
 800818c:	898b      	ldrh	r3, [r1, #12]
 800818e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008190:	079d      	lsls	r5, r3, #30
 8008192:	4606      	mov	r6, r0
 8008194:	460c      	mov	r4, r1
 8008196:	d507      	bpl.n	80081a8 <__smakebuf_r+0x1c>
 8008198:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	6123      	str	r3, [r4, #16]
 80081a0:	2301      	movs	r3, #1
 80081a2:	6163      	str	r3, [r4, #20]
 80081a4:	b003      	add	sp, #12
 80081a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081a8:	ab01      	add	r3, sp, #4
 80081aa:	466a      	mov	r2, sp
 80081ac:	f7ff ffc8 	bl	8008140 <__swhatbuf_r>
 80081b0:	9f00      	ldr	r7, [sp, #0]
 80081b2:	4605      	mov	r5, r0
 80081b4:	4639      	mov	r1, r7
 80081b6:	4630      	mov	r0, r6
 80081b8:	f7ff f8ce 	bl	8007358 <_malloc_r>
 80081bc:	b948      	cbnz	r0, 80081d2 <__smakebuf_r+0x46>
 80081be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081c2:	059a      	lsls	r2, r3, #22
 80081c4:	d4ee      	bmi.n	80081a4 <__smakebuf_r+0x18>
 80081c6:	f023 0303 	bic.w	r3, r3, #3
 80081ca:	f043 0302 	orr.w	r3, r3, #2
 80081ce:	81a3      	strh	r3, [r4, #12]
 80081d0:	e7e2      	b.n	8008198 <__smakebuf_r+0xc>
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	6020      	str	r0, [r4, #0]
 80081d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081da:	81a3      	strh	r3, [r4, #12]
 80081dc:	9b01      	ldr	r3, [sp, #4]
 80081de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80081e2:	b15b      	cbz	r3, 80081fc <__smakebuf_r+0x70>
 80081e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081e8:	4630      	mov	r0, r6
 80081ea:	f000 f81d 	bl	8008228 <_isatty_r>
 80081ee:	b128      	cbz	r0, 80081fc <__smakebuf_r+0x70>
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	f023 0303 	bic.w	r3, r3, #3
 80081f6:	f043 0301 	orr.w	r3, r3, #1
 80081fa:	81a3      	strh	r3, [r4, #12]
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	431d      	orrs	r5, r3
 8008200:	81a5      	strh	r5, [r4, #12]
 8008202:	e7cf      	b.n	80081a4 <__smakebuf_r+0x18>

08008204 <_fstat_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	4d07      	ldr	r5, [pc, #28]	@ (8008224 <_fstat_r+0x20>)
 8008208:	2300      	movs	r3, #0
 800820a:	4604      	mov	r4, r0
 800820c:	4608      	mov	r0, r1
 800820e:	4611      	mov	r1, r2
 8008210:	602b      	str	r3, [r5, #0]
 8008212:	f7f8 fd8a 	bl	8000d2a <_fstat>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	d102      	bne.n	8008220 <_fstat_r+0x1c>
 800821a:	682b      	ldr	r3, [r5, #0]
 800821c:	b103      	cbz	r3, 8008220 <_fstat_r+0x1c>
 800821e:	6023      	str	r3, [r4, #0]
 8008220:	bd38      	pop	{r3, r4, r5, pc}
 8008222:	bf00      	nop
 8008224:	20004534 	.word	0x20004534

08008228 <_isatty_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	4d06      	ldr	r5, [pc, #24]	@ (8008244 <_isatty_r+0x1c>)
 800822c:	2300      	movs	r3, #0
 800822e:	4604      	mov	r4, r0
 8008230:	4608      	mov	r0, r1
 8008232:	602b      	str	r3, [r5, #0]
 8008234:	f7f8 fd89 	bl	8000d4a <_isatty>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	d102      	bne.n	8008242 <_isatty_r+0x1a>
 800823c:	682b      	ldr	r3, [r5, #0]
 800823e:	b103      	cbz	r3, 8008242 <_isatty_r+0x1a>
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	20004534 	.word	0x20004534

08008248 <_init>:
 8008248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824a:	bf00      	nop
 800824c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824e:	bc08      	pop	{r3}
 8008250:	469e      	mov	lr, r3
 8008252:	4770      	bx	lr

08008254 <_fini>:
 8008254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008256:	bf00      	nop
 8008258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825a:	bc08      	pop	{r3}
 800825c:	469e      	mov	lr, r3
 800825e:	4770      	bx	lr
