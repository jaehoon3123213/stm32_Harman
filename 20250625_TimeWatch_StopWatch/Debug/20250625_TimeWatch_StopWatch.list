
20250625_TimeWatch_StopWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006730  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080068d0  080068d0  000078d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800693c  0800693c  000080d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800693c  0800693c  0000793c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006944  08006944  000080d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006944  08006944  00007944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006948  08006948  00007948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  0800694c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200000d8  08006a24  000080d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08006a24  000084b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015749  00000000  00000000  00008108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c2f  00000000  00000000  0001d851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00021480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f17  00000000  00000000  00022818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ca8  00000000  00000000  0002372f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b439  00000000  00000000  0003d3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093460  00000000  00000000  00058810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebc70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f0  00000000  00000000  000ebcb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f12a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068b8 	.word	0x080068b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	080068b8 	.word	0x080068b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4b54      	ldr	r3, [pc, #336]	@ (8000718 <MX_GPIO_Init+0x16c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a53      	ldr	r2, [pc, #332]	@ (8000718 <MX_GPIO_Init+0x16c>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b51      	ldr	r3, [pc, #324]	@ (8000718 <MX_GPIO_Init+0x16c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b4d      	ldr	r3, [pc, #308]	@ (8000718 <MX_GPIO_Init+0x16c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a4c      	ldr	r2, [pc, #304]	@ (8000718 <MX_GPIO_Init+0x16c>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b4a      	ldr	r3, [pc, #296]	@ (8000718 <MX_GPIO_Init+0x16c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b46      	ldr	r3, [pc, #280]	@ (8000718 <MX_GPIO_Init+0x16c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a45      	ldr	r2, [pc, #276]	@ (8000718 <MX_GPIO_Init+0x16c>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b43      	ldr	r3, [pc, #268]	@ (8000718 <MX_GPIO_Init+0x16c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b3f      	ldr	r3, [pc, #252]	@ (8000718 <MX_GPIO_Init+0x16c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a3e      	ldr	r2, [pc, #248]	@ (8000718 <MX_GPIO_Init+0x16c>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b3c      	ldr	r3, [pc, #240]	@ (8000718 <MX_GPIO_Init+0x16c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 51c2 	mov.w	r1, #6208	@ 0x1840
 8000638:	4838      	ldr	r0, [pc, #224]	@ (800071c <MX_GPIO_Init+0x170>)
 800063a:	f002 f833 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8000644:	4836      	ldr	r0, [pc, #216]	@ (8000720 <MX_GPIO_Init+0x174>)
 8000646:	f002 f82d 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800064a:	2200      	movs	r2, #0
 800064c:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000650:	4834      	ldr	r0, [pc, #208]	@ (8000724 <MX_GPIO_Init+0x178>)
 8000652:	f002 f827 	bl	80026a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA6 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 8000656:	f44f 53c2 	mov.w	r3, #6208	@ 0x1840
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	482b      	ldr	r0, [pc, #172]	@ (800071c <MX_GPIO_Init+0x170>)
 8000670:	f001 fe7c 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000674:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4824      	ldr	r0, [pc, #144]	@ (8000720 <MX_GPIO_Init+0x174>)
 800068e:	f001 fe6d 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000692:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000696:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	481e      	ldr	r0, [pc, #120]	@ (8000724 <MX_GPIO_Init+0x178>)
 80006ac:	f001 fe5e 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006b6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	4817      	ldr	r0, [pc, #92]	@ (8000724 <MX_GPIO_Init+0x178>)
 80006c8:	f001 fe50 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	480e      	ldr	r0, [pc, #56]	@ (800071c <MX_GPIO_Init+0x170>)
 80006e2:	f001 fe43 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80006e6:	2328      	movs	r3, #40	@ 0x28
 80006e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	480a      	ldr	r0, [pc, #40]	@ (8000724 <MX_GPIO_Init+0x178>)
 80006fa:	f001 fe37 	bl	800236c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2028      	movs	r0, #40	@ 0x28
 8000704:	f001 fd4d 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000708:	2028      	movs	r0, #40	@ 0x28
 800070a:	f001 fd66 	bl	80021da <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	@ 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40020000 	.word	0x40020000
 8000720:	40020800 	.word	0x40020800
 8000724:	40020400 	.word	0x40020400

08000728 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_I2C1_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <MX_I2C1_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <MX_I2C1_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000766:	f001 ffdb 	bl	8002720 <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 f8d4 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000f4 	.word	0x200000f4
 800077c:	40005400 	.word	0x40005400
 8000780:	000186a0 	.word	0x000186a0

08000784 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	@ 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a19      	ldr	r2, [pc, #100]	@ (8000808 <HAL_I2C_MspInit+0x84>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d12c      	bne.n	8000800 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b18      	ldr	r3, [pc, #96]	@ (800080c <HAL_I2C_MspInit+0x88>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a17      	ldr	r2, [pc, #92]	@ (800080c <HAL_I2C_MspInit+0x88>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b15      	ldr	r3, [pc, #84]	@ (800080c <HAL_I2C_MspInit+0x88>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c8:	2312      	movs	r3, #18
 80007ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d4:	2304      	movs	r3, #4
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	480c      	ldr	r0, [pc, #48]	@ (8000810 <HAL_I2C_MspInit+0x8c>)
 80007e0:	f001 fdc4 	bl	800236c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	4b08      	ldr	r3, [pc, #32]	@ (800080c <HAL_I2C_MspInit+0x88>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ec:	4a07      	ldr	r2, [pc, #28]	@ (800080c <HAL_I2C_MspInit+0x88>)
 80007ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f4:	4b05      	ldr	r3, [pc, #20]	@ (800080c <HAL_I2C_MspInit+0x88>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	@ 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40005400 	.word	0x40005400
 800080c:	40023800 	.word	0x40023800
 8000810:	40020400 	.word	0x40020400

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000818:	f001 fb10 	bl	8001e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081c:	f000 f816 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000820:	f7ff fec4 	bl	80005ac <MX_GPIO_Init>
  MX_TIM2_Init();
 8000824:	f000 fa3a 	bl	8000c9c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000828:	f000 fc8a 	bl	8001140 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800082c:	f7ff ff7c 	bl	8000728 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000830:	f000 fa80 	bl	8000d34 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000834:	f000 f9ae 	bl	8000b94 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000838:	f000 faf2 	bl	8000e20 <MX_TIM4_Init>
  MX_TIM5_Init();
 800083c:	f000 fb3e 	bl	8000ebc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 8000840:	f000 fdb2 	bl	80013a8 <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 8000844:	f000 fd92 	bl	800136c <ap_main>
 8000848:	e7fc      	b.n	8000844 <main+0x30>
	...

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b094      	sub	sp, #80	@ 0x50
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	2230      	movs	r2, #48	@ 0x30
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f005 fa15 	bl	8005c8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	4b27      	ldr	r3, [pc, #156]	@ (8000914 <SystemClock_Config+0xc8>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000878:	4a26      	ldr	r2, [pc, #152]	@ (8000914 <SystemClock_Config+0xc8>)
 800087a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000880:	4b24      	ldr	r3, [pc, #144]	@ (8000914 <SystemClock_Config+0xc8>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <SystemClock_Config+0xcc>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a20      	ldr	r2, [pc, #128]	@ (8000918 <SystemClock_Config+0xcc>)
 8000896:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	4b1e      	ldr	r3, [pc, #120]	@ (8000918 <SystemClock_Config+0xcc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008bc:	2304      	movs	r3, #4
 80008be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008c0:	2364      	movs	r3, #100	@ 0x64
 80008c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 fbc3 	bl	800305c <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008dc:	f000 f81e 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e0:	230f      	movs	r3, #15
 80008e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e4:	2302      	movs	r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2103      	movs	r1, #3
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 fe25 	bl	800354c <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000908:	f000 f808 	bl	800091c <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	3750      	adds	r7, #80	@ 0x50
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <Error_Handler+0x8>

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	@ (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800093c:	6453      	str	r3, [r2, #68]	@ 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	@ 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <NMI_Handler+0x4>

08000980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <MemManage_Handler+0x4>

08000990 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <UsageFault_Handler+0x4>

080009a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ce:	f001 fa87 	bl	8001ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009dc:	4802      	ldr	r0, [pc, #8]	@ (80009e8 <TIM2_IRQHandler+0x10>)
 80009de:	f003 fa6d 	bl	8003ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000194 	.word	0x20000194

080009ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <TIM4_IRQHandler+0x10>)
 80009f2:	f003 fa63 	bl	8003ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000224 	.word	0x20000224

08000a00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a04:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <USART2_IRQHandler+0x10>)
 8000a06:	f004 f917 	bl	8004c38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200002b4 	.word	0x200002b4

08000a14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000a18:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000a1c:	f001 fe5c 	bl	80026d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  DHT11_EXTI_Callback();
 8000a20:	f000 fe92 	bl	8001748 <DHT11_EXTI_Callback>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e00a      	b.n	8000a50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a3a:	f3af 8000 	nop.w
 8000a3e:	4601      	mov	r1, r0
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	60ba      	str	r2, [r7, #8]
 8000a46:	b2ca      	uxtb	r2, r1
 8000a48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbf0      	blt.n	8000a3a <_read+0x12>
  }

  return len;
 8000a58:	687b      	ldr	r3, [r7, #4]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e009      	b.n	8000a88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf1      	blt.n	8000a74 <_write+0x12>
  }
  return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_close>:

int _close(int file)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ac2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_isatty>:

int _isatty(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	@ (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	@ (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d207      	bcs.n	8000b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b34:	f005 f8f8 	bl	8005d28 <__errno>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20020000 	.word	0x20020000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	20000148 	.word	0x20000148
 8000b6c:	200004b8 	.word	0x200004b8

08000b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b092      	sub	sp, #72	@ 0x48
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	615a      	str	r2, [r3, #20]
 8000bb6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2220      	movs	r2, #32
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f005 f863 	bl	8005c8a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc4:	4b33      	ldr	r3, [pc, #204]	@ (8000c94 <MX_TIM1_Init+0x100>)
 8000bc6:	4a34      	ldr	r2, [pc, #208]	@ (8000c98 <MX_TIM1_Init+0x104>)
 8000bc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8000bca:	4b32      	ldr	r3, [pc, #200]	@ (8000c94 <MX_TIM1_Init+0x100>)
 8000bcc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000bd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd2:	4b30      	ldr	r3, [pc, #192]	@ (8000c94 <MX_TIM1_Init+0x100>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c94 <MX_TIM1_Init+0x100>)
 8000bda:	2263      	movs	r2, #99	@ 0x63
 8000bdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bde:	4b2d      	ldr	r3, [pc, #180]	@ (8000c94 <MX_TIM1_Init+0x100>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c94 <MX_TIM1_Init+0x100>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bea:	4b2a      	ldr	r3, [pc, #168]	@ (8000c94 <MX_TIM1_Init+0x100>)
 8000bec:	2280      	movs	r2, #128	@ 0x80
 8000bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bf0:	4828      	ldr	r0, [pc, #160]	@ (8000c94 <MX_TIM1_Init+0x100>)
 8000bf2:	f002 ffff 	bl	8003bf4 <HAL_TIM_PWM_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000bfc:	f7ff fe8e 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c00:	2300      	movs	r3, #0
 8000c02:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c08:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4821      	ldr	r0, [pc, #132]	@ (8000c94 <MX_TIM1_Init+0x100>)
 8000c10:	f003 fec8 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c1a:	f7ff fe7f 	bl	800091c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c1e:	2360      	movs	r3, #96	@ 0x60
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 50-1;
 8000c22:	2331      	movs	r3, #49	@ 0x31
 8000c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4619      	mov	r1, r3
 8000c42:	4814      	ldr	r0, [pc, #80]	@ (8000c94 <MX_TIM1_Init+0x100>)
 8000c44:	f003 fa2a 	bl	800409c <HAL_TIM_PWM_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000c4e:	f7ff fe65 	bl	800091c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4807      	ldr	r0, [pc, #28]	@ (8000c94 <MX_TIM1_Init+0x100>)
 8000c76:	f003 ff03 	bl	8004a80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000c80:	f7ff fe4c 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c84:	4803      	ldr	r0, [pc, #12]	@ (8000c94 <MX_TIM1_Init+0x100>)
 8000c86:	f000 f9f9 	bl	800107c <HAL_TIM_MspPostInit>

}
 8000c8a:	bf00      	nop
 8000c8c:	3748      	adds	r7, #72	@ 0x48
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000014c 	.word	0x2000014c
 8000c98:	40010000 	.word	0x40010000

08000c9c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <MX_TIM2_Init+0x94>)
 8000cba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <MX_TIM2_Init+0x94>)
 8000cc2:	2263      	movs	r2, #99	@ 0x63
 8000cc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <MX_TIM2_Init+0x94>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000ccc:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <MX_TIM2_Init+0x94>)
 8000cce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd4:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <MX_TIM2_Init+0x94>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <MX_TIM2_Init+0x94>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ce0:	4813      	ldr	r0, [pc, #76]	@ (8000d30 <MX_TIM2_Init+0x94>)
 8000ce2:	f002 fe53 	bl	800398c <HAL_TIM_Base_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cec:	f7ff fe16 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480c      	ldr	r0, [pc, #48]	@ (8000d30 <MX_TIM2_Init+0x94>)
 8000cfe:	f003 fa8f 	bl	8004220 <HAL_TIM_ConfigClockSource>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d08:	f7ff fe08 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d14:	463b      	mov	r3, r7
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_TIM2_Init+0x94>)
 8000d1a:	f003 fe43 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d24:	f7ff fdfa 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000194 	.word	0x20000194

08000d34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08e      	sub	sp, #56	@ 0x38
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d48:	f107 0320 	add.w	r3, r7, #32
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
 8000d60:	615a      	str	r2, [r3, #20]
 8000d62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d64:	4b2c      	ldr	r3, [pc, #176]	@ (8000e18 <MX_TIM3_Init+0xe4>)
 8000d66:	4a2d      	ldr	r2, [pc, #180]	@ (8000e1c <MX_TIM3_Init+0xe8>)
 8000d68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e18 <MX_TIM3_Init+0xe4>)
 8000d6c:	2263      	movs	r2, #99	@ 0x63
 8000d6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d70:	4b29      	ldr	r3, [pc, #164]	@ (8000e18 <MX_TIM3_Init+0xe4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000d76:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <MX_TIM3_Init+0xe4>)
 8000d78:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7e:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <MX_TIM3_Init+0xe4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d84:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <MX_TIM3_Init+0xe4>)
 8000d86:	2280      	movs	r2, #128	@ 0x80
 8000d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d8a:	4823      	ldr	r0, [pc, #140]	@ (8000e18 <MX_TIM3_Init+0xe4>)
 8000d8c:	f002 fdfe 	bl	800398c <HAL_TIM_Base_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d96:	f7ff fdc1 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000da0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000da4:	4619      	mov	r1, r3
 8000da6:	481c      	ldr	r0, [pc, #112]	@ (8000e18 <MX_TIM3_Init+0xe4>)
 8000da8:	f003 fa3a 	bl	8004220 <HAL_TIM_ConfigClockSource>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000db2:	f7ff fdb3 	bl	800091c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000db6:	4818      	ldr	r0, [pc, #96]	@ (8000e18 <MX_TIM3_Init+0xe4>)
 8000db8:	f002 ff1c 	bl	8003bf4 <HAL_TIM_PWM_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000dc2:	f7ff fdab 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dce:	f107 0320 	add.w	r3, r7, #32
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4810      	ldr	r0, [pc, #64]	@ (8000e18 <MX_TIM3_Init+0xe4>)
 8000dd6:	f003 fde5 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000de0:	f7ff fd9c 	bl	800091c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de4:	2360      	movs	r3, #96	@ 0x60
 8000de6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2200      	movs	r2, #0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4807      	ldr	r0, [pc, #28]	@ (8000e18 <MX_TIM3_Init+0xe4>)
 8000dfc:	f003 f94e 	bl	800409c <HAL_TIM_PWM_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e06:	f7ff fd89 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e0a:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <MX_TIM3_Init+0xe4>)
 8000e0c:	f000 f936 	bl	800107c <HAL_TIM_MspPostInit>

}
 8000e10:	bf00      	nop
 8000e12:	3738      	adds	r7, #56	@ 0x38
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200001dc 	.word	0x200001dc
 8000e1c:	40000400 	.word	0x40000400

08000e20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	463b      	mov	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb8 <MX_TIM4_Init+0x98>)
 8000e40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e44:	2263      	movs	r2, #99	@ 0x63
 8000e46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e48:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000e4e:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e56:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e5e:	2280      	movs	r2, #128	@ 0x80
 8000e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e62:	4814      	ldr	r0, [pc, #80]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e64:	f002 fd92 	bl	800398c <HAL_TIM_Base_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e6e:	f7ff fd55 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480d      	ldr	r0, [pc, #52]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e80:	f003 f9ce 	bl	8004220 <HAL_TIM_ConfigClockSource>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e8a:	f7ff fd47 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4806      	ldr	r0, [pc, #24]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e9c:	f003 fd82 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000ea6:	f7ff fd39 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000224 	.word	0x20000224
 8000eb8:	40000800 	.word	0x40000800

08000ebc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <MX_TIM5_Init+0x94>)
 8000eda:	4a1e      	ldr	r2, [pc, #120]	@ (8000f54 <MX_TIM5_Init+0x98>)
 8000edc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	@ (8000f50 <MX_TIM5_Init+0x94>)
 8000ee0:	2263      	movs	r2, #99	@ 0x63
 8000ee2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <MX_TIM5_Init+0x94>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000eea:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <MX_TIM5_Init+0x94>)
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	@ (8000f50 <MX_TIM5_Init+0x94>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <MX_TIM5_Init+0x94>)
 8000efa:	2280      	movs	r2, #128	@ 0x80
 8000efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000efe:	4814      	ldr	r0, [pc, #80]	@ (8000f50 <MX_TIM5_Init+0x94>)
 8000f00:	f002 fd44 	bl	800398c <HAL_TIM_Base_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000f0a:	f7ff fd07 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480d      	ldr	r0, [pc, #52]	@ (8000f50 <MX_TIM5_Init+0x94>)
 8000f1c:	f003 f980 	bl	8004220 <HAL_TIM_ConfigClockSource>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000f26:	f7ff fcf9 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <MX_TIM5_Init+0x94>)
 8000f38:	f003 fd34 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000f42:	f7ff fceb 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000026c 	.word	0x2000026c
 8000f54:	40000c00 	.word	0x40000c00

08000f58 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0b      	ldr	r2, [pc, #44]	@ (8000f94 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d10d      	bne.n	8000f86 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_TIM_PWM_MspInit+0x40>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	4a09      	ldr	r2, [pc, #36]	@ (8000f98 <HAL_TIM_PWM_MspInit+0x40>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f7a:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <HAL_TIM_PWM_MspInit+0x40>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40010000 	.word	0x40010000
 8000f98:	40023800 	.word	0x40023800

08000f9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fac:	d116      	bne.n	8000fdc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800106c <HAL_TIM_Base_MspInit+0xd0>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	4a2d      	ldr	r2, [pc, #180]	@ (800106c <HAL_TIM_Base_MspInit+0xd0>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800106c <HAL_TIM_Base_MspInit+0xd0>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	201c      	movs	r0, #28
 8000fd0:	f001 f8e7 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fd4:	201c      	movs	r0, #28
 8000fd6:	f001 f900 	bl	80021da <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000fda:	e042      	b.n	8001062 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a23      	ldr	r2, [pc, #140]	@ (8001070 <HAL_TIM_Base_MspInit+0xd4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d10e      	bne.n	8001004 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b20      	ldr	r3, [pc, #128]	@ (800106c <HAL_TIM_Base_MspInit+0xd0>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	4a1f      	ldr	r2, [pc, #124]	@ (800106c <HAL_TIM_Base_MspInit+0xd0>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <HAL_TIM_Base_MspInit+0xd0>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
}
 8001002:	e02e      	b.n	8001062 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a1a      	ldr	r2, [pc, #104]	@ (8001074 <HAL_TIM_Base_MspInit+0xd8>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d116      	bne.n	800103c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b16      	ldr	r3, [pc, #88]	@ (800106c <HAL_TIM_Base_MspInit+0xd0>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	4a15      	ldr	r2, [pc, #84]	@ (800106c <HAL_TIM_Base_MspInit+0xd0>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6413      	str	r3, [r2, #64]	@ 0x40
 800101e:	4b13      	ldr	r3, [pc, #76]	@ (800106c <HAL_TIM_Base_MspInit+0xd0>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	201e      	movs	r0, #30
 8001030:	f001 f8b7 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001034:	201e      	movs	r0, #30
 8001036:	f001 f8d0 	bl	80021da <HAL_NVIC_EnableIRQ>
}
 800103a:	e012      	b.n	8001062 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM5)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	@ (8001078 <HAL_TIM_Base_MspInit+0xdc>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10d      	bne.n	8001062 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <HAL_TIM_Base_MspInit+0xd0>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	4a07      	ldr	r2, [pc, #28]	@ (800106c <HAL_TIM_Base_MspInit+0xd0>)
 8001050:	f043 0308 	orr.w	r3, r3, #8
 8001054:	6413      	str	r3, [r2, #64]	@ 0x40
 8001056:	4b05      	ldr	r3, [pc, #20]	@ (800106c <HAL_TIM_Base_MspInit+0xd0>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40000400 	.word	0x40000400
 8001074:	40000800 	.word	0x40000800
 8001078:	40000c00 	.word	0x40000c00

0800107c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	@ 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a24      	ldr	r2, [pc, #144]	@ (800112c <HAL_TIM_MspPostInit+0xb0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d11f      	bne.n	80010de <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <HAL_TIM_MspPostInit+0xb4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a22      	ldr	r2, [pc, #136]	@ (8001130 <HAL_TIM_MspPostInit+0xb4>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b20      	ldr	r3, [pc, #128]	@ (8001130 <HAL_TIM_MspPostInit+0xb4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4817      	ldr	r0, [pc, #92]	@ (8001134 <HAL_TIM_MspPostInit+0xb8>)
 80010d8:	f001 f948 	bl	800236c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010dc:	e022      	b.n	8001124 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a15      	ldr	r2, [pc, #84]	@ (8001138 <HAL_TIM_MspPostInit+0xbc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d11d      	bne.n	8001124 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <HAL_TIM_MspPostInit+0xb4>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001130 <HAL_TIM_MspPostInit+0xb4>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <HAL_TIM_MspPostInit+0xb4>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001114:	2302      	movs	r3, #2
 8001116:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	4807      	ldr	r0, [pc, #28]	@ (800113c <HAL_TIM_MspPostInit+0xc0>)
 8001120:	f001 f924 	bl	800236c <HAL_GPIO_Init>
}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	@ 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40010000 	.word	0x40010000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000
 8001138:	40000400 	.word	0x40000400
 800113c:	40020400 	.word	0x40020400

08001140 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <MX_USART2_UART_Init+0x4c>)
 8001146:	4a12      	ldr	r2, [pc, #72]	@ (8001190 <MX_USART2_UART_Init+0x50>)
 8001148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <MX_USART2_UART_Init+0x4c>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <MX_USART2_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <MX_USART2_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <MX_USART2_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b09      	ldr	r3, [pc, #36]	@ (800118c <MX_USART2_UART_Init+0x4c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b08      	ldr	r3, [pc, #32]	@ (800118c <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <MX_USART2_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_USART2_UART_Init+0x4c>)
 8001178:	f003 fce8 	bl	8004b4c <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001182:	f7ff fbcb 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200002b4 	.word	0x200002b4
 8001190:	40004400 	.word	0x40004400

08001194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	@ 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001228 <HAL_UART_MspInit+0x94>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d133      	bne.n	800121e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <HAL_UART_MspInit+0x98>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	4a1b      	ldr	r2, [pc, #108]	@ (800122c <HAL_UART_MspInit+0x98>)
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <HAL_UART_MspInit+0x98>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <HAL_UART_MspInit+0x98>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a14      	ldr	r2, [pc, #80]	@ (800122c <HAL_UART_MspInit+0x98>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_UART_MspInit+0x98>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011ee:	230c      	movs	r3, #12
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fe:	2307      	movs	r3, #7
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4809      	ldr	r0, [pc, #36]	@ (8001230 <HAL_UART_MspInit+0x9c>)
 800120a:	f001 f8af 	bl	800236c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2026      	movs	r0, #38	@ 0x26
 8001214:	f000 ffc5 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001218:	2026      	movs	r0, #38	@ 0x26
 800121a:	f000 ffde 	bl	80021da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	@ 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40004400 	.word	0x40004400
 800122c:	40023800 	.word	0x40023800
 8001230:	40020000 	.word	0x40020000

08001234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001234:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800126c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001238:	f7ff fc9a 	bl	8000b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800123c:	480c      	ldr	r0, [pc, #48]	@ (8001270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800123e:	490d      	ldr	r1, [pc, #52]	@ (8001274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001240:	4a0d      	ldr	r2, [pc, #52]	@ (8001278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001254:	4c0a      	ldr	r4, [pc, #40]	@ (8001280 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001262:	f004 fd67 	bl	8005d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001266:	f7ff fad5 	bl	8000814 <main>
  bx  lr    
 800126a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800126c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001278:	0800694c 	.word	0x0800694c
  ldr r2, =_sbss
 800127c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001280:	200004b8 	.word	0x200004b8

08001284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC_IRQHandler>
	...

08001288 <Listener_Init>:

static uint8_t rcvData = 0;
static Que_TypeDef uartRxQue;

void Listener_Init()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	Button_Init(&hBtnMode, GPIOB, GPIO_PIN_5);
 800128c:	2220      	movs	r2, #32
 800128e:	490c      	ldr	r1, [pc, #48]	@ (80012c0 <Listener_Init+0x38>)
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <Listener_Init+0x3c>)
 8001292:	f000 f9a3 	bl	80015dc <Button_Init>
	Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_3);
 8001296:	2208      	movs	r2, #8
 8001298:	4909      	ldr	r1, [pc, #36]	@ (80012c0 <Listener_Init+0x38>)
 800129a:	480b      	ldr	r0, [pc, #44]	@ (80012c8 <Listener_Init+0x40>)
 800129c:	f000 f99e 	bl	80015dc <Button_Init>
	Button_Init(&hBtnClear, GPIOA, GPIO_PIN_10);
 80012a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012a4:	4909      	ldr	r1, [pc, #36]	@ (80012cc <Listener_Init+0x44>)
 80012a6:	480a      	ldr	r0, [pc, #40]	@ (80012d0 <Listener_Init+0x48>)
 80012a8:	f000 f998 	bl	80015dc <Button_Init>

	Que_Init(&uartRxQue);
 80012ac:	4809      	ldr	r0, [pc, #36]	@ (80012d4 <Listener_Init+0x4c>)
 80012ae:	f000 f889 	bl	80013c4 <Que_Init>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
 80012b2:	2201      	movs	r2, #1
 80012b4:	4908      	ldr	r1, [pc, #32]	@ (80012d8 <Listener_Init+0x50>)
 80012b6:	4809      	ldr	r0, [pc, #36]	@ (80012dc <Listener_Init+0x54>)
 80012b8:	f003 fc98 	bl	8004bec <HAL_UART_Receive_IT>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40020400 	.word	0x40020400
 80012c4:	2000031c 	.word	0x2000031c
 80012c8:	20000328 	.word	0x20000328
 80012cc:	40020000 	.word	0x40020000
 80012d0:	20000334 	.word	0x20000334
 80012d4:	20000300 	.word	0x20000300
 80012d8:	200002fc 	.word	0x200002fc
 80012dc:	200002b4 	.word	0x200002b4

080012e0 <Listener_UartCallBack>:
		Controller_SetInputData(inputData);
	}
}

void Listener_UartCallBack()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	enQue(&uartRxQue, rcvData);
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <Listener_UartCallBack+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	@ (8001304 <Listener_UartCallBack+0x24>)
 80012ec:	f000 f895 	bl	800141a <enQue>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // interrupt enable
 80012f0:	2201      	movs	r2, #1
 80012f2:	4903      	ldr	r1, [pc, #12]	@ (8001300 <Listener_UartCallBack+0x20>)
 80012f4:	4804      	ldr	r0, [pc, #16]	@ (8001308 <Listener_UartCallBack+0x28>)
 80012f6:	f003 fc79 	bl	8004bec <HAL_UART_Receive_IT>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200002fc 	.word	0x200002fc
 8001304:	20000300 	.word	0x20000300
 8001308:	200002b4 	.word	0x200002b4

0800130c <Presenter_Init>:


static watch_t dispData = {TIME_WATCH, 12, 0, 0, 0};

void Presenter_Init()
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <Presenter_Init+0x10>)
 8001312:	f000 fc1b 	bl	8001b4c <LCD_Init>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200000f4 	.word	0x200000f4

08001320 <HAL_TIM_PeriodElapsedCallback>:
 */

#include "ap_main.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM2) {
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001330:	d105      	bne.n	800133e <HAL_TIM_PeriodElapsedCallback+0x1e>
      FND_DispDataCallBack();
 8001332:	f000 fa79 	bl	8001828 <FND_DispDataCallBack>

      TimeWatch_IncTimeCallBack();
 8001336:	f000 f90f 	bl	8001558 <TimeWatch_IncTimeCallBack>
      StopWatch_IncTimeCallBack();
 800133a:	f000 f8bf 	bl	80014bc <StopWatch_IncTimeCallBack>
   }
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
   if (huart->Instance == USART2) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <HAL_UART_RxCpltCallback+0x20>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_UART_RxCpltCallback+0x16>
      Listener_UartCallBack();
 800135a:	f7ff ffc1 	bl	80012e0 <Listener_UartCallBack>
   }
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40004400 	.word	0x40004400

0800136c <ap_main>:


int ap_main()
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
   HAL_TIM_Base_Start_IT(&htim2);
 8001372:	480b      	ldr	r0, [pc, #44]	@ (80013a0 <ap_main+0x34>)
 8001374:	f002 fbdc 	bl	8003b30 <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start(&htim4);
 8001378:	480a      	ldr	r0, [pc, #40]	@ (80013a4 <ap_main+0x38>)
 800137a:	f002 fb57 	bl	8003a2c <HAL_TIM_Base_Start>

   uint8_t humidity = 0, temperature = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	2300      	movs	r3, #0
 8001384:	71bb      	strb	r3, [r7, #6]
   while(1)
   {


      DHT11_ReadData(&humidity, &temperature);
 8001386:	1dba      	adds	r2, r7, #6
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f9bd 	bl	800170c <DHT11_ReadData>
      HAL_Delay(2000);  // DHT11 최소 주기 보장
 8001392:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001396:	f000 fdc3 	bl	8001f20 <HAL_Delay>
   {
 800139a:	bf00      	nop
 800139c:	e7f3      	b.n	8001386 <ap_main+0x1a>
 800139e:	bf00      	nop
 80013a0:	20000194 	.word	0x20000194
 80013a4:	20000224 	.word	0x20000224

080013a8 <ap_init>:

   return 0;
}

void ap_init()
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
   MX_TIM4_Init();
 80013ac:	f7ff fd38 	bl	8000e20 <MX_TIM4_Init>
   Listener_Init();
 80013b0:	f7ff ff6a 	bl	8001288 <Listener_Init>
   Presenter_Init();
 80013b4:	f7ff ffaa 	bl	800130c <Presenter_Init>
   Sound_Init();
 80013b8:	f000 f852 	bl	8001460 <Sound_Init>
   Sound_PowerOn();
 80013bc:	f000 f85a 	bl	8001474 <Sound_PowerOn>

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <Que_Init>:
#include "queue.h"



void Que_Init(Que_TypeDef *q)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	q->front = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <isQueFull>:

int isQueFull(Que_TypeDef *q)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	return q->front == ((q->rear+1) % QUE_SIZE);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	3301      	adds	r3, #1
 80013f6:	4259      	negs	r1, r3
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	f001 0103 	and.w	r1, r1, #3
 8001400:	bf58      	it	pl
 8001402:	424b      	negpl	r3, r1
 8001404:	429a      	cmp	r2, r3
 8001406:	bf0c      	ite	eq
 8001408:	2301      	moveq	r3, #1
 800140a:	2300      	movne	r3, #0
 800140c:	b2db      	uxtb	r3, r3
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <enQue>:
{
	return q->front == q->rear;
}

void enQue(Que_TypeDef *q, int data)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
	if (isQueFull(q)) {
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ffdd 	bl	80013e4 <isQueFull>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d113      	bne.n	8001458 <enQue+0x3e>
		return;
	}
	q->queData[q->rear] = data;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3202      	adds	r2, #2
 8001438:	6839      	ldr	r1, [r7, #0]
 800143a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	q->rear = (q->rear+1) % QUE_SIZE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	3301      	adds	r3, #1
 8001444:	425a      	negs	r2, r3
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	f002 0203 	and.w	r2, r2, #3
 800144e:	bf58      	it	pl
 8001450:	4253      	negpl	r3, r2
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6053      	str	r3, [r2, #4]
 8001456:	e000      	b.n	800145a <enQue+0x40>
		return;
 8001458:	bf00      	nop
}
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <Sound_Init>:
 */

#include "sound.h"

void Sound_Init()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
 Buzzer_Init(&htim3, TIM_CHANNEL_1);
 8001464:	2100      	movs	r1, #0
 8001466:	4802      	ldr	r0, [pc, #8]	@ (8001470 <Sound_Init+0x10>)
 8001468:	f000 fc4e 	bl	8001d08 <Buzzer_Init>
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200001dc 	.word	0x200001dc

08001474 <Sound_PowerOn>:

void Sound_PowerOn()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	Buzzer_SetFreq(1047);
 8001478:	f240 4017 	movw	r0, #1047	@ 0x417
 800147c:	f000 fc5a 	bl	8001d34 <Buzzer_SetFreq>
	Buzzer_Start();
 8001480:	f000 fcbc 	bl	8001dfc <Buzzer_Start>
	HAL_Delay(100);
 8001484:	2064      	movs	r0, #100	@ 0x64
 8001486:	f000 fd4b 	bl	8001f20 <HAL_Delay>
	Buzzer_SetFreq(1319);
 800148a:	f240 5027 	movw	r0, #1319	@ 0x527
 800148e:	f000 fc51 	bl	8001d34 <Buzzer_SetFreq>
	HAL_Delay(100);
 8001492:	2064      	movs	r0, #100	@ 0x64
 8001494:	f000 fd44 	bl	8001f20 <HAL_Delay>
	Buzzer_SetFreq(1568);
 8001498:	f44f 60c4 	mov.w	r0, #1568	@ 0x620
 800149c:	f000 fc4a 	bl	8001d34 <Buzzer_SetFreq>
	HAL_Delay(100);
 80014a0:	2064      	movs	r0, #100	@ 0x64
 80014a2:	f000 fd3d 	bl	8001f20 <HAL_Delay>
	Buzzer_SetFreq(2039);
 80014a6:	f240 70f7 	movw	r0, #2039	@ 0x7f7
 80014aa:	f000 fc43 	bl	8001d34 <Buzzer_SetFreq>
	HAL_Delay(100);
 80014ae:	2064      	movs	r0, #100	@ 0x64
 80014b0:	f000 fd36 	bl	8001f20 <HAL_Delay>
	Buzzer_Stop();
 80014b4:	f000 fcb2 	bl	8001e1c <Buzzer_Stop>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <StopWatch_IncTimeCallBack>:
extern inputData_TypeDef controlData;
static stopWatchState_t stopWatchState = STOP;
static watch_t stopWatch = {STOP_WATCH, 12, 0, 0, 0};

void StopWatch_IncTimeCallBack()
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	if (stopWatchState == RUN) {
 80014c0:	4b03      	ldr	r3, [pc, #12]	@ (80014d0 <StopWatch_IncTimeCallBack+0x14>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <StopWatch_IncTimeCallBack+0x10>
		StopWatch_IncTime();
 80014c8:	f000 f804 	bl	80014d4 <StopWatch_IncTime>
	}
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000318 	.word	0x20000318

080014d4 <StopWatch_IncTime>:

void StopWatch_IncTime()
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
	if (stopWatch.msec < 1000-1) {
 80014d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <StopWatch_IncTime+0x80>)
 80014da:	889b      	ldrh	r3, [r3, #4]
 80014dc:	f240 32e6 	movw	r2, #998	@ 0x3e6
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d806      	bhi.n	80014f2 <StopWatch_IncTime+0x1e>
		stopWatch.msec++;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <StopWatch_IncTime+0x80>)
 80014e6:	889b      	ldrh	r3, [r3, #4]
 80014e8:	3301      	adds	r3, #1
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <StopWatch_IncTime+0x80>)
 80014ee:	809a      	strh	r2, [r3, #4]
		return;
 80014f0:	e02c      	b.n	800154c <StopWatch_IncTime+0x78>
	}
	stopWatch.msec = 0;
 80014f2:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <StopWatch_IncTime+0x80>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	809a      	strh	r2, [r3, #4]

	if (stopWatch.sec < 60-1) {
 80014f8:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <StopWatch_IncTime+0x80>)
 80014fa:	78db      	ldrb	r3, [r3, #3]
 80014fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80014fe:	d806      	bhi.n	800150e <StopWatch_IncTime+0x3a>
		stopWatch.sec++;
 8001500:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <StopWatch_IncTime+0x80>)
 8001502:	78db      	ldrb	r3, [r3, #3]
 8001504:	3301      	adds	r3, #1
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <StopWatch_IncTime+0x80>)
 800150a:	70da      	strb	r2, [r3, #3]
		return;
 800150c:	e01e      	b.n	800154c <StopWatch_IncTime+0x78>
	}
	stopWatch.sec = 0;
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <StopWatch_IncTime+0x80>)
 8001510:	2200      	movs	r2, #0
 8001512:	70da      	strb	r2, [r3, #3]

	if (stopWatch.min < 60-1) {
 8001514:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <StopWatch_IncTime+0x80>)
 8001516:	789b      	ldrb	r3, [r3, #2]
 8001518:	2b3a      	cmp	r3, #58	@ 0x3a
 800151a:	d806      	bhi.n	800152a <StopWatch_IncTime+0x56>
		stopWatch.min++;
 800151c:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <StopWatch_IncTime+0x80>)
 800151e:	789b      	ldrb	r3, [r3, #2]
 8001520:	3301      	adds	r3, #1
 8001522:	b2da      	uxtb	r2, r3
 8001524:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <StopWatch_IncTime+0x80>)
 8001526:	709a      	strb	r2, [r3, #2]
		return;
 8001528:	e010      	b.n	800154c <StopWatch_IncTime+0x78>
	}
	stopWatch.min = 0;
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <StopWatch_IncTime+0x80>)
 800152c:	2200      	movs	r2, #0
 800152e:	709a      	strb	r2, [r3, #2]

	if (stopWatch.hour < 24-1) {
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <StopWatch_IncTime+0x80>)
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	2b16      	cmp	r3, #22
 8001536:	d806      	bhi.n	8001546 <StopWatch_IncTime+0x72>
		stopWatch.hour++;
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <StopWatch_IncTime+0x80>)
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	3301      	adds	r3, #1
 800153e:	b2da      	uxtb	r2, r3
 8001540:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <StopWatch_IncTime+0x80>)
 8001542:	705a      	strb	r2, [r3, #1]
		return;
 8001544:	e002      	b.n	800154c <StopWatch_IncTime+0x78>
	}
	stopWatch.hour = 0;
 8001546:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <StopWatch_IncTime+0x80>)
 8001548:	2200      	movs	r2, #0
 800154a:	705a      	strb	r2, [r3, #1]
}
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	20000004 	.word	0x20000004

08001558 <TimeWatch_IncTimeCallBack>:
#include "timeWatch.h"

static watch_t timeWatch = {TIME_WATCH, 12,0,0,0};

void TimeWatch_IncTimeCallBack()
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
	if (timeWatch.msec < 1000-1) {
 800155c:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 800155e:	889b      	ldrh	r3, [r3, #4]
 8001560:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001564:	4293      	cmp	r3, r2
 8001566:	d806      	bhi.n	8001576 <TimeWatch_IncTimeCallBack+0x1e>
		timeWatch.msec++;
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 800156a:	889b      	ldrh	r3, [r3, #4]
 800156c:	3301      	adds	r3, #1
 800156e:	b29a      	uxth	r2, r3
 8001570:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 8001572:	809a      	strh	r2, [r3, #4]
		return;
 8001574:	e02c      	b.n	80015d0 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.msec = 0;
 8001576:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 8001578:	2200      	movs	r2, #0
 800157a:	809a      	strh	r2, [r3, #4]

	if (timeWatch.sec < 60-1) {
 800157c:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 800157e:	78db      	ldrb	r3, [r3, #3]
 8001580:	2b3a      	cmp	r3, #58	@ 0x3a
 8001582:	d806      	bhi.n	8001592 <TimeWatch_IncTimeCallBack+0x3a>
		timeWatch.sec++;
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 8001586:	78db      	ldrb	r3, [r3, #3]
 8001588:	3301      	adds	r3, #1
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 800158e:	70da      	strb	r2, [r3, #3]
		return;
 8001590:	e01e      	b.n	80015d0 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.sec = 0;
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 8001594:	2200      	movs	r2, #0
 8001596:	70da      	strb	r2, [r3, #3]

	if (timeWatch.min < 60-1) {
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 800159a:	789b      	ldrb	r3, [r3, #2]
 800159c:	2b3a      	cmp	r3, #58	@ 0x3a
 800159e:	d806      	bhi.n	80015ae <TimeWatch_IncTimeCallBack+0x56>
		timeWatch.min++;
 80015a0:	4b0d      	ldr	r3, [pc, #52]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 80015a2:	789b      	ldrb	r3, [r3, #2]
 80015a4:	3301      	adds	r3, #1
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 80015aa:	709a      	strb	r2, [r3, #2]
		return;
 80015ac:	e010      	b.n	80015d0 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.min = 0;
 80015ae:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	709a      	strb	r2, [r3, #2]

	if (timeWatch.hour < 24-1) {
 80015b4:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 80015b6:	785b      	ldrb	r3, [r3, #1]
 80015b8:	2b16      	cmp	r3, #22
 80015ba:	d806      	bhi.n	80015ca <TimeWatch_IncTimeCallBack+0x72>
		timeWatch.hour++;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 80015be:	785b      	ldrb	r3, [r3, #1]
 80015c0:	3301      	adds	r3, #1
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 80015c6:	705a      	strb	r2, [r3, #1]
		return;
 80015c8:	e002      	b.n	80015d0 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.hour = 0;
 80015ca:	4b03      	ldr	r3, [pc, #12]	@ (80015d8 <TimeWatch_IncTimeCallBack+0x80>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	705a      	strb	r2, [r3, #1]
}
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	2000000c 	.word	0x2000000c

080015dc <Button_Init>:
Button_Handler_t hBtnRunStop;
Button_Handler_t hBtnClear;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	4613      	mov	r3, r2
 80015e8:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	88fa      	ldrh	r2, [r7, #6]
 80015f4:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2201      	movs	r2, #1
 80015fa:	609a      	str	r2, [r3, #8]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <DHT11_DelayUs>:
//   GPIO_InitStruct.Pull = GPIO_NOPULL;
//   HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
//}

void DHT11_DelayUs(uint32_t us)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
   __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <DHT11_DelayUs+0x2c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2200      	movs	r2, #0
 8001616:	625a      	str	r2, [r3, #36]	@ 0x24
   while(__HAL_TIM_GET_COUNTER(&htim4) < us);
 8001618:	bf00      	nop
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <DHT11_DelayUs+0x2c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	429a      	cmp	r2, r3
 8001624:	d8f9      	bhi.n	800161a <DHT11_DelayUs+0x12>
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	20000224 	.word	0x20000224

08001638 <DHT11_SendStartSignal>:

// 18ms Low, 20~40us High
void DHT11_SendStartSignal()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	463b      	mov	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
   GPIO_InitStruct.Pin = DHT11_PIN;
 800164c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001650:	603b      	str	r3, [r7, #0]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001652:	2311      	movs	r3, #17
 8001654:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
   HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 800165a:	463b      	mov	r3, r7
 800165c:	4619      	mov	r1, r3
 800165e:	4825      	ldr	r0, [pc, #148]	@ (80016f4 <DHT11_SendStartSignal+0xbc>)
 8001660:	f000 fe84 	bl	800236c <HAL_GPIO_Init>

   HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, RESET);   // Low 18ms 유지
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800166a:	4822      	ldr	r0, [pc, #136]	@ (80016f4 <DHT11_SendStartSignal+0xbc>)
 800166c:	f001 f81a 	bl	80026a4 <HAL_GPIO_WritePin>
   HAL_Delay(18);    // 18ms Low
 8001670:	2012      	movs	r0, #18
 8001672:	f000 fc55 	bl	8001f20 <HAL_Delay>
   HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, SET);
 8001676:	2201      	movs	r2, #1
 8001678:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800167c:	481d      	ldr	r0, [pc, #116]	@ (80016f4 <DHT11_SendStartSignal+0xbc>)
 800167e:	f001 f811 	bl	80026a4 <HAL_GPIO_WritePin>
   DHT11_DelayUs(30);
 8001682:	201e      	movs	r0, #30
 8001684:	f7ff ffc0 	bl	8001608 <DHT11_DelayUs>

   // Input Mode + Exti 설정 외부 인터럽트 가능하게 설정
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001688:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800168c:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
   HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8001692:	463b      	mov	r3, r7
 8001694:	4619      	mov	r1, r3
 8001696:	4817      	ldr	r0, [pc, #92]	@ (80016f4 <DHT11_SendStartSignal+0xbc>)
 8001698:	f000 fe68 	bl	800236c <HAL_GPIO_Init>

   HAL_TIM_Base_Stop(&htim4);
 800169c:	4816      	ldr	r0, [pc, #88]	@ (80016f8 <DHT11_SendStartSignal+0xc0>)
 800169e:	f002 fa1f 	bl	8003ae0 <HAL_TIM_Base_Stop>
   __HAL_TIM_SET_COUNTER(&htim4, 0);
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <DHT11_SendStartSignal+0xc0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	@ 0x24
   HAL_TIM_Base_Start(&htim4);
 80016aa:	4813      	ldr	r0, [pc, #76]	@ (80016f8 <DHT11_SendStartSignal+0xc0>)
 80016ac:	f002 f9be 	bl	8003a2c <HAL_TIM_Base_Start>

   // 수신 전에 초기화
   bit_index = 0;
 80016b0:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <DHT11_SendStartSignal+0xc4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
   last_time =0;
 80016b6:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <DHT11_SendStartSignal+0xc8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

   for (int i = 0; i < 5; i++) {
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	e007      	b.n	80016d2 <DHT11_SendStartSignal+0x9a>
      data[i] = 0;
 80016c2:	4a10      	ldr	r2, [pc, #64]	@ (8001704 <DHT11_SendStartSignal+0xcc>)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	4413      	add	r3, r2
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < 5; i++) {
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	3301      	adds	r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	ddf4      	ble.n	80016c2 <DHT11_SendStartSignal+0x8a>
   }

   __HAL_GPIO_EXTI_CLEAR_FLAG(DHT11_PIN);
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <DHT11_SendStartSignal+0xd0>)
 80016da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016de:	615a      	str	r2, [r3, #20]
   HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80016e0:	2028      	movs	r0, #40	@ 0x28
 80016e2:	f000 fda2 	bl	800222a <HAL_NVIC_ClearPendingIRQ>
   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); //GPIO 10번에서 15번까지 인터럽트 처리
 80016e6:	2028      	movs	r0, #40	@ 0x28
 80016e8:	f000 fd77 	bl	80021da <HAL_NVIC_EnableIRQ>
}
 80016ec:	bf00      	nop
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40020400 	.word	0x40020400
 80016f8:	20000224 	.word	0x20000224
 80016fc:	20000344 	.word	0x20000344
 8001700:	20000340 	.word	0x20000340
 8001704:	20000348 	.word	0x20000348
 8001708:	40013c00 	.word	0x40013c00

0800170c <DHT11_ReadData>:

void DHT11_ReadData(uint8_t *humidity, uint8_t *temperature)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
   DHT11_SendStartSignal();
 8001716:	f7ff ff8f 	bl	8001638 <DHT11_SendStartSignal>

   HAL_Delay(5);  // 최대 4ms 정도 데이터 수신 시간 대기
 800171a:	2005      	movs	r0, #5
 800171c:	f000 fc00 	bl	8001f20 <HAL_Delay>

   HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001720:	2028      	movs	r0, #40	@ 0x28
 8001722:	f000 fd68 	bl	80021f6 <HAL_NVIC_DisableIRQ>

//   if (data[4] == (data[0] + data[1] + data[2] + data[3]))
//   {
      *humidity = data[0];
 8001726:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <DHT11_ReadData+0x38>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	701a      	strb	r2, [r3, #0]
      *temperature = data[2];
 8001730:	4b04      	ldr	r3, [pc, #16]	@ (8001744 <DHT11_ReadData+0x38>)
 8001732:	789b      	ldrb	r3, [r3, #2]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	701a      	strb	r2, [r3, #0]
//      return 1;
//   }
//   return 0;
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000348 	.word	0x20000348

08001748 <DHT11_EXTI_Callback>:

void DHT11_EXTI_Callback()
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
   uint32_t now = __HAL_TIM_GET_COUNTER(&htim4);
 800174e:	4b30      	ldr	r3, [pc, #192]	@ (8001810 <DHT11_EXTI_Callback+0xc8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001754:	60fb      	str	r3, [r7, #12]
   uint32_t duration = now - last_time;
 8001756:	4b2f      	ldr	r3, [pc, #188]	@ (8001814 <DHT11_EXTI_Callback+0xcc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	60bb      	str	r3, [r7, #8]
   last_time = now;
 8001760:	4a2c      	ldr	r2, [pc, #176]	@ (8001814 <DHT11_EXTI_Callback+0xcc>)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6013      	str	r3, [r2, #0]

   if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET)
 8001766:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800176a:	482b      	ldr	r0, [pc, #172]	@ (8001818 <DHT11_EXTI_Callback+0xd0>)
 800176c:	f000 ff82 	bl	8002674 <HAL_GPIO_ReadPin>
 8001770:	4603      	mov	r3, r0
 8001772:	2b01      	cmp	r3, #1
 8001774:	d047      	beq.n	8001806 <DHT11_EXTI_Callback+0xbe>
      // Rising edge
   }
   else
   {
      // Falling edge (bit 해석)
      if (bit_index == 0) {
 8001776:	4b29      	ldr	r3, [pc, #164]	@ (800181c <DHT11_EXTI_Callback+0xd4>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10a      	bne.n	8001796 <DHT11_EXTI_Callback+0x4e>
         if (duration < 70 || duration > 90) {
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b45      	cmp	r3, #69	@ 0x45
 8001784:	d902      	bls.n	800178c <DHT11_EXTI_Callback+0x44>
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b5a      	cmp	r3, #90	@ 0x5a
 800178a:	d92d      	bls.n	80017e8 <DHT11_EXTI_Callback+0xa0>
            printf("DHT11 LOW : %lu\n", duration);
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	4824      	ldr	r0, [pc, #144]	@ (8001820 <DHT11_EXTI_Callback+0xd8>)
 8001790:	f004 fa26 	bl	8005be0 <iprintf>
 8001794:	e028      	b.n	80017e8 <DHT11_EXTI_Callback+0xa0>
         }
//      } else if (bit_index == 1) {
//         if (duration < 70 || duration > 90) {
//            printf("DHT11 HIGH : %lu \n", duration);
//         }
      } else if (bit_index >= 1 && bit_index <= 40) {
 8001796:	4b21      	ldr	r3, [pc, #132]	@ (800181c <DHT11_EXTI_Callback+0xd4>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d023      	beq.n	80017e8 <DHT11_EXTI_Callback+0xa0>
 80017a0:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <DHT11_EXTI_Callback+0xd4>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b28      	cmp	r3, #40	@ 0x28
 80017a8:	d81e      	bhi.n	80017e8 <DHT11_EXTI_Callback+0xa0>
         // bit_index 1~40 이 실제 40bit 데이터
         uint8_t byte_idx = (bit_index - 1) / 8;
 80017aa:	4b1c      	ldr	r3, [pc, #112]	@ (800181c <DHT11_EXTI_Callback+0xd4>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	3b01      	subs	r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	da00      	bge.n	80017b8 <DHT11_EXTI_Callback+0x70>
 80017b6:	3307      	adds	r3, #7
 80017b8:	10db      	asrs	r3, r3, #3
 80017ba:	71fb      	strb	r3, [r7, #7]

         data[byte_idx] <<= 1;
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	4a19      	ldr	r2, [pc, #100]	@ (8001824 <DHT11_EXTI_Callback+0xdc>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	0052      	lsls	r2, r2, #1
 80017c8:	b2d1      	uxtb	r1, r2
 80017ca:	4a16      	ldr	r2, [pc, #88]	@ (8001824 <DHT11_EXTI_Callback+0xdc>)
 80017cc:	54d1      	strb	r1, [r2, r3]

         if (duration > 40)
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2b28      	cmp	r3, #40	@ 0x28
 80017d2:	d909      	bls.n	80017e8 <DHT11_EXTI_Callback+0xa0>
            data[byte_idx] |= 1;
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	4a13      	ldr	r2, [pc, #76]	@ (8001824 <DHT11_EXTI_Callback+0xdc>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	b2d1      	uxtb	r1, r2
 80017e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001824 <DHT11_EXTI_Callback+0xdc>)
 80017e6:	54d1      	strb	r1, [r2, r3]

      }
      bit_index++;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <DHT11_EXTI_Callback+0xd4>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	3301      	adds	r3, #1
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <DHT11_EXTI_Callback+0xd4>)
 80017f4:	701a      	strb	r2, [r3, #0]

      //40비트 수신 완료후 외부 인터럽트 비활성화
      if (bit_index > 40)
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <DHT11_EXTI_Callback+0xd4>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b28      	cmp	r3, #40	@ 0x28
 80017fe:	d902      	bls.n	8001806 <DHT11_EXTI_Callback+0xbe>
      {
         HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001800:	2028      	movs	r0, #40	@ 0x28
 8001802:	f000 fcf8 	bl	80021f6 <HAL_NVIC_DisableIRQ>
      }
   }
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000224 	.word	0x20000224
 8001814:	20000340 	.word	0x20000340
 8001818:	40020400 	.word	0x40020400
 800181c:	20000344 	.word	0x20000344
 8001820:	080068d0 	.word	0x080068d0
 8001824:	20000348 	.word	0x20000348

08001828 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 800182c:	4b80      	ldr	r3, [pc, #512]	@ (8001a30 <FND_DispDataCallBack+0x208>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	425a      	negs	r2, r3
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	f002 0207 	and.w	r2, r2, #7
 800183c:	bf58      	it	pl
 800183e:	4253      	negpl	r3, r2
 8001840:	4a7b      	ldr	r2, [pc, #492]	@ (8001a30 <FND_DispDataCallBack+0x208>)
 8001842:	6013      	str	r3, [r2, #0]

	switch(digitPos)
 8001844:	4b7a      	ldr	r3, [pc, #488]	@ (8001a30 <FND_DispDataCallBack+0x208>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b07      	cmp	r3, #7
 800184a:	f200 80ee 	bhi.w	8001a2a <FND_DispDataCallBack+0x202>
 800184e:	a201      	add	r2, pc, #4	@ (adr r2, 8001854 <FND_DispDataCallBack+0x2c>)
 8001850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001854:	08001875 	.word	0x08001875
 8001858:	080018a3 	.word	0x080018a3
 800185c:	080018db 	.word	0x080018db
 8001860:	08001913 	.word	0x08001913
 8001864:	0800194b 	.word	0x0800194b
 8001868:	08001983 	.word	0x08001983
 800186c:	080019bb 	.word	0x080019bb
 8001870:	080019f3 	.word	0x080019f3
	{
	case DIGIT_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001874:	f000 f900 	bl	8001a78 <FND_DispOffAll>
		FND_DispDigit(fndDispNum%10);
 8001878:	4b6e      	ldr	r3, [pc, #440]	@ (8001a34 <FND_DispDataCallBack+0x20c>)
 800187a:	881a      	ldrh	r2, [r3, #0]
 800187c:	4b6e      	ldr	r3, [pc, #440]	@ (8001a38 <FND_DispDataCallBack+0x210>)
 800187e:	fba3 1302 	umull	r1, r3, r3, r2
 8001882:	08d9      	lsrs	r1, r3, #3
 8001884:	460b      	mov	r3, r1
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	b29b      	uxth	r3, r3
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f913 	bl	8001abc <FND_DispDigit>
		FND_DispOn(digitPos);
 8001896:	4b66      	ldr	r3, [pc, #408]	@ (8001a30 <FND_DispDataCallBack+0x208>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f8d4 	bl	8001a48 <FND_DispOn>
		break;
 80018a0:	e0c3      	b.n	8001a2a <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80018a2:	f000 f8e9 	bl	8001a78 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/10%10);
 80018a6:	4b63      	ldr	r3, [pc, #396]	@ (8001a34 <FND_DispDataCallBack+0x20c>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	4a63      	ldr	r2, [pc, #396]	@ (8001a38 <FND_DispDataCallBack+0x210>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	4b60      	ldr	r3, [pc, #384]	@ (8001a38 <FND_DispDataCallBack+0x210>)
 80018b6:	fba3 1302 	umull	r1, r3, r3, r2
 80018ba:	08d9      	lsrs	r1, r3, #3
 80018bc:	460b      	mov	r3, r1
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 f8f7 	bl	8001abc <FND_DispDigit>
		FND_DispOn(digitPos);
 80018ce:	4b58      	ldr	r3, [pc, #352]	@ (8001a30 <FND_DispDataCallBack+0x208>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f8b8 	bl	8001a48 <FND_DispOn>
		break;
 80018d8:	e0a7      	b.n	8001a2a <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80018da:	f000 f8cd 	bl	8001a78 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/100%10);
 80018de:	4b55      	ldr	r3, [pc, #340]	@ (8001a34 <FND_DispDataCallBack+0x20c>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	4a56      	ldr	r2, [pc, #344]	@ (8001a3c <FND_DispDataCallBack+0x214>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	095b      	lsrs	r3, r3, #5
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4b52      	ldr	r3, [pc, #328]	@ (8001a38 <FND_DispDataCallBack+0x210>)
 80018ee:	fba3 1302 	umull	r1, r3, r3, r2
 80018f2:	08d9      	lsrs	r1, r3, #3
 80018f4:	460b      	mov	r3, r1
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4618      	mov	r0, r3
 8001902:	f000 f8db 	bl	8001abc <FND_DispDigit>
		FND_DispOn(digitPos);
 8001906:	4b4a      	ldr	r3, [pc, #296]	@ (8001a30 <FND_DispDataCallBack+0x208>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f89c 	bl	8001a48 <FND_DispOn>
		break;
 8001910:	e08b      	b.n	8001a2a <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001912:	f000 f8b1 	bl	8001a78 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/1000%10);
 8001916:	4b47      	ldr	r3, [pc, #284]	@ (8001a34 <FND_DispDataCallBack+0x20c>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	4a49      	ldr	r2, [pc, #292]	@ (8001a40 <FND_DispDataCallBack+0x218>)
 800191c:	fba2 2303 	umull	r2, r3, r2, r3
 8001920:	099b      	lsrs	r3, r3, #6
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b44      	ldr	r3, [pc, #272]	@ (8001a38 <FND_DispDataCallBack+0x210>)
 8001926:	fba3 1302 	umull	r1, r3, r3, r2
 800192a:	08d9      	lsrs	r1, r3, #3
 800192c:	460b      	mov	r3, r1
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	b29b      	uxth	r3, r3
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f8bf 	bl	8001abc <FND_DispDigit>
		FND_DispOn(digitPos);
 800193e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a30 <FND_DispDataCallBack+0x208>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f880 	bl	8001a48 <FND_DispOn>
		break;
 8001948:	e06f      	b.n	8001a2a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 800194a:	f000 f895 	bl	8001a78 <FND_DispOffAll>
		if (fndDispDp & (1<<0)){
 800194e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a44 <FND_DispDataCallBack+0x21c>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 800195a:	200a      	movs	r0, #10
 800195c:	f000 f8ae 	bl	8001abc <FND_DispDigit>
 8001960:	e002      	b.n	8001968 <FND_DispDataCallBack+0x140>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8001962:	200b      	movs	r0, #11
 8001964:	f000 f8aa 	bl	8001abc <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001968:	4b31      	ldr	r3, [pc, #196]	@ (8001a30 <FND_DispDataCallBack+0x208>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	425a      	negs	r2, r3
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	f002 0203 	and.w	r2, r2, #3
 8001976:	bf58      	it	pl
 8001978:	4253      	negpl	r3, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f864 	bl	8001a48 <FND_DispOn>
		break;
 8001980:	e053      	b.n	8001a2a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001982:	f000 f879 	bl	8001a78 <FND_DispOffAll>
		if (fndDispDp & (1<<1)){
 8001986:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <FND_DispDataCallBack+0x21c>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 8001992:	200a      	movs	r0, #10
 8001994:	f000 f892 	bl	8001abc <FND_DispDigit>
 8001998:	e002      	b.n	80019a0 <FND_DispDataCallBack+0x178>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 800199a:	200b      	movs	r0, #11
 800199c:	f000 f88e 	bl	8001abc <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80019a0:	4b23      	ldr	r3, [pc, #140]	@ (8001a30 <FND_DispDataCallBack+0x208>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	425a      	negs	r2, r3
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	f002 0203 	and.w	r2, r2, #3
 80019ae:	bf58      	it	pl
 80019b0:	4253      	negpl	r3, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f848 	bl	8001a48 <FND_DispOn>
		break;
 80019b8:	e037      	b.n	8001a2a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80019ba:	f000 f85d 	bl	8001a78 <FND_DispOffAll>
		if (fndDispDp & (1<<2)){
 80019be:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <FND_DispDataCallBack+0x21c>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 80019ca:	200a      	movs	r0, #10
 80019cc:	f000 f876 	bl	8001abc <FND_DispDigit>
 80019d0:	e002      	b.n	80019d8 <FND_DispDataCallBack+0x1b0>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 80019d2:	200b      	movs	r0, #11
 80019d4:	f000 f872 	bl	8001abc <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80019d8:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <FND_DispDataCallBack+0x208>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	425a      	negs	r2, r3
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	f002 0203 	and.w	r2, r2, #3
 80019e6:	bf58      	it	pl
 80019e8:	4253      	negpl	r3, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f82c 	bl	8001a48 <FND_DispOn>
		break;
 80019f0:	e01b      	b.n	8001a2a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80019f2:	f000 f841 	bl	8001a78 <FND_DispOffAll>
		if (fndDispDp & (1<<3)){
 80019f6:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <FND_DispDataCallBack+0x21c>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 8001a02:	200a      	movs	r0, #10
 8001a04:	f000 f85a 	bl	8001abc <FND_DispDigit>
 8001a08:	e002      	b.n	8001a10 <FND_DispDataCallBack+0x1e8>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8001a0a:	200b      	movs	r0, #11
 8001a0c:	f000 f856 	bl	8001abc <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001a10:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <FND_DispDataCallBack+0x208>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	425a      	negs	r2, r3
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	f002 0203 	and.w	r2, r2, #3
 8001a1e:	bf58      	it	pl
 8001a20:	4253      	negpl	r3, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f810 	bl	8001a48 <FND_DispOn>
		break;
 8001a28:	bf00      	nop
	}
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000354 	.word	0x20000354
 8001a34:	2000034e 	.word	0x2000034e
 8001a38:	cccccccd 	.word	0xcccccccd
 8001a3c:	51eb851f 	.word	0x51eb851f
 8001a40:	10624dd3 	.word	0x10624dd3
 8001a44:	20000350 	.word	0x20000350

08001a48 <FND_DispOn>:
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
}
*/

void FND_DispOn(int fndPos)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, RESET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8001a50:	4a08      	ldr	r2, [pc, #32]	@ (8001a74 <FND_DispOn+0x2c>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a58:	4a06      	ldr	r2, [pc, #24]	@ (8001a74 <FND_DispOn+0x2c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4413      	add	r3, r2
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	2200      	movs	r2, #0
 8001a66:	4619      	mov	r1, r3
 8001a68:	f000 fe1c 	bl	80026a4 <HAL_GPIO_WritePin>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000014 	.word	0x20000014

08001a78 <FND_DispOffAll>:

void FND_DispOffAll()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	e010      	b.n	8001aa6 <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 8001a84:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab8 <FND_DispOffAll+0x40>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <FND_DispOffAll+0x40>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4413      	add	r3, r2
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f000 fe02 	bl	80026a4 <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	ddeb      	ble.n	8001a84 <FND_DispOffAll+0xc>
	}
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000014 	.word	0x20000014

08001abc <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 8001ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b44 <FND_DispDigit+0x88>)
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ace:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    0x6F,  // 9 => 01101111
	    0x80,  // 10(dp) => 10000000
	    0x00,  // 11(off)=> 00000000
	};

	for (int i=0; i<8; i++) {
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	e02c      	b.n	8001b32 <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	3318      	adds	r3, #24
 8001adc:	443b      	add	r3, r7
 8001ade:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa42 f303 	asr.w	r3, r2, r3
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10e      	bne.n	8001b10 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 8001af2:	4a15      	ldr	r2, [pc, #84]	@ (8001b48 <FND_DispDigit+0x8c>)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001afa:	4a13      	ldr	r2, [pc, #76]	@ (8001b48 <FND_DispDigit+0x8c>)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4413      	add	r3, r2
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f000 fdcb 	bl	80026a4 <HAL_GPIO_WritePin>
 8001b0e:	e00d      	b.n	8001b2c <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 8001b10:	4a0d      	ldr	r2, [pc, #52]	@ (8001b48 <FND_DispDigit+0x8c>)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001b18:	4a0b      	ldr	r2, [pc, #44]	@ (8001b48 <FND_DispDigit+0x8c>)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4413      	add	r3, r2
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	2201      	movs	r2, #1
 8001b26:	4619      	mov	r1, r3
 8001b28:	f000 fdbc 	bl	80026a4 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b07      	cmp	r3, #7
 8001b36:	ddcf      	ble.n	8001ad8 <FND_DispDigit+0x1c>
		}
	}
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	080068e4 	.word	0x080068e4
 8001b48:	20000034 	.word	0x20000034

08001b4c <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8001b54:	4a18      	ldr	r2, [pc, #96]	@ (8001bb8 <LCD_Init+0x6c>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 8001b5a:	2032      	movs	r0, #50	@ 0x32
 8001b5c:	f000 f9e0 	bl	8001f20 <HAL_Delay>
	LCD_cmdMode();
 8001b60:	f000 f852 	bl	8001c08 <LCD_cmdMode>
	LCD_writeMode();
 8001b64:	f000 f862 	bl	8001c2c <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 8001b68:	2030      	movs	r0, #48	@ 0x30
 8001b6a:	f000 f895 	bl	8001c98 <LCD_sendNibbleData>
	HAL_Delay(5);
 8001b6e:	2005      	movs	r0, #5
 8001b70:	f000 f9d6 	bl	8001f20 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001b74:	2030      	movs	r0, #48	@ 0x30
 8001b76:	f000 f88f 	bl	8001c98 <LCD_sendNibbleData>
	HAL_Delay(1);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f000 f9d0 	bl	8001f20 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001b80:	2030      	movs	r0, #48	@ 0x30
 8001b82:	f000 f889 	bl	8001c98 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 8001b86:	2020      	movs	r0, #32
 8001b88:	f000 f886 	bl	8001c98 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 8001b8c:	2028      	movs	r0, #40	@ 0x28
 8001b8e:	f000 f8a7 	bl	8001ce0 <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 8001b92:	2008      	movs	r0, #8
 8001b94:	f000 f8a4 	bl	8001ce0 <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f000 f8a1 	bl	8001ce0 <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 8001b9e:	2006      	movs	r0, #6
 8001ba0:	f000 f89e 	bl	8001ce0 <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 8001ba4:	200c      	movs	r0, #12
 8001ba6:	f000 f89b 	bl	8001ce0 <LCD_sendData>
	LCD_backLightOn();
 8001baa:	f000 f81d 	bl	8001be8 <LCD_backLightOn>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000035c 	.word	0x2000035c

08001bbc <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 8001bc6:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <LCD_sendI2C+0x28>)
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	1dfa      	adds	r2, r7, #7
 8001bcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	214e      	movs	r1, #78	@ 0x4e
 8001bd6:	f000 fee7 	bl	80029a8 <HAL_I2C_Master_Transmit>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000035c 	.word	0x2000035c

08001be8 <LCD_backLightOn>:

void LCD_backLightOn()
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <LCD_backLightOn+0x1c>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	f043 0308 	orr.w	r3, r3, #8
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <LCD_backLightOn+0x1c>)
 8001bf8:	701a      	strb	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	20000358 	.word	0x20000358

08001c08 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8001c0c:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <LCD_cmdMode+0x20>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b04      	ldr	r3, [pc, #16]	@ (8001c28 <LCD_cmdMode+0x20>)
 8001c18:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001c1a:	4b03      	ldr	r3, [pc, #12]	@ (8001c28 <LCD_cmdMode+0x20>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ffcc 	bl	8001bbc <LCD_sendI2C>
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000358 	.word	0x20000358

08001c2c <LCD_writeMode>:
	lcdData |= (1<<LCD_RS);
	LCD_sendI2C(lcdData);
}

void LCD_writeMode()
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <LCD_writeMode+0x20>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	f023 0302 	bic.w	r3, r3, #2
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b04      	ldr	r3, [pc, #16]	@ (8001c4c <LCD_writeMode+0x20>)
 8001c3c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001c3e:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <LCD_writeMode+0x20>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ffba 	bl	8001bbc <LCD_sendI2C>
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000358 	.word	0x20000358

08001c50 <LCD_E_High>:

void LCD_E_High()
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <LCD_E_High+0x20>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <LCD_E_High+0x20>)
 8001c60:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001c62:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <LCD_E_High+0x20>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ffa8 	bl	8001bbc <LCD_sendI2C>
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000358 	.word	0x20000358

08001c74 <LCD_E_Low>:

void LCD_E_Low()
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <LCD_E_Low+0x20>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <LCD_E_Low+0x20>)
 8001c84:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001c86:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <LCD_E_Low+0x20>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff96 	bl	8001bbc <LCD_sendI2C>
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000358 	.word	0x20000358

08001c98 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8001ca2:	f7ff ffd5 	bl	8001c50 <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	f023 030f 	bic.w	r3, r3, #15
 8001cae:	b25a      	sxtb	r2, r3
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <LCD_sendNibbleData+0x44>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <LCD_sendNibbleData+0x44>)
 8001cc4:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001cc6:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <LCD_sendNibbleData+0x44>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff76 	bl	8001bbc <LCD_sendI2C>
	LCD_E_Low();
 8001cd0:	f7ff ffd0 	bl	8001c74 <LCD_E_Low>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000358 	.word	0x20000358

08001ce0 <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ffd3 	bl	8001c98 <LCD_sendNibbleData>

	data = data << 4;
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ffcc 	bl	8001c98 <LCD_sendNibbleData>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <Buzzer_Init>:

static TIM_HandleTypeDef *hbuzzerTim;
static uint32_t hbuzzerTimChannel;

void Buzzer_Init(TIM_HandleTypeDef *hTim,uint32_t Channel)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
	hbuzzerTim = hTim;
 8001d12:	4a06      	ldr	r2, [pc, #24]	@ (8001d2c <Buzzer_Init+0x24>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6013      	str	r3, [r2, #0]
	hbuzzerTimChannel = Channel;
 8001d18:	4a05      	ldr	r2, [pc, #20]	@ (8001d30 <Buzzer_Init+0x28>)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6013      	str	r3, [r2, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000360 	.word	0x20000360
 8001d30:	20000364 	.word	0x20000364

08001d34 <Buzzer_SetFreq>:


void Buzzer_SetFreq(uint32_t freq)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	if(freq < 100) freq = 100;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b63      	cmp	r3, #99	@ 0x63
 8001d40:	d802      	bhi.n	8001d48 <Buzzer_SetFreq+0x14>
 8001d42:	2364      	movs	r3, #100	@ 0x64
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	e007      	b.n	8001d58 <Buzzer_SetFreq+0x24>
	else if (freq > 10000) freq = 10000;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d902      	bls.n	8001d58 <Buzzer_SetFreq+0x24>
 8001d52:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001d56:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(hbuzzerTim,1000000/freq-1);
 8001d58:	4a24      	ldr	r2, [pc, #144]	@ (8001dec <Buzzer_SetFreq+0xb8>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d60:	4b23      	ldr	r3, [pc, #140]	@ (8001df0 <Buzzer_SetFreq+0xbc>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3a01      	subs	r2, #1
 8001d68:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d6a:	4a20      	ldr	r2, [pc, #128]	@ (8001dec <Buzzer_SetFreq+0xb8>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d72:	4b1f      	ldr	r3, [pc, #124]	@ (8001df0 <Buzzer_SetFreq+0xbc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3a01      	subs	r2, #1
 8001d78:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(hbuzzerTim,hbuzzerTimChannel,1000000/freq/2-1);
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <Buzzer_SetFreq+0xc0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <Buzzer_SetFreq+0x62>
 8001d82:	4a1d      	ldr	r2, [pc, #116]	@ (8001df8 <Buzzer_SetFreq+0xc4>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d8a:	4b19      	ldr	r3, [pc, #100]	@ (8001df0 <Buzzer_SetFreq+0xbc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3a01      	subs	r2, #1
 8001d92:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d94:	e024      	b.n	8001de0 <Buzzer_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hbuzzerTim,hbuzzerTimChannel,1000000/freq/2-1);
 8001d96:	4b17      	ldr	r3, [pc, #92]	@ (8001df4 <Buzzer_SetFreq+0xc0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d109      	bne.n	8001db2 <Buzzer_SetFreq+0x7e>
 8001d9e:	4a16      	ldr	r2, [pc, #88]	@ (8001df8 <Buzzer_SetFreq+0xc4>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <Buzzer_SetFreq+0xbc>)
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001db0:	e016      	b.n	8001de0 <Buzzer_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hbuzzerTim,hbuzzerTimChannel,1000000/freq/2-1);
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <Buzzer_SetFreq+0xc0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d109      	bne.n	8001dce <Buzzer_SetFreq+0x9a>
 8001dba:	4a0f      	ldr	r2, [pc, #60]	@ (8001df8 <Buzzer_SetFreq+0xc4>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8001df0 <Buzzer_SetFreq+0xbc>)
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001dcc:	e008      	b.n	8001de0 <Buzzer_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hbuzzerTim,hbuzzerTimChannel,1000000/freq/2-1);
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <Buzzer_SetFreq+0xc4>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4a06      	ldr	r2, [pc, #24]	@ (8001df0 <Buzzer_SetFreq+0xbc>)
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	000f4240 	.word	0x000f4240
 8001df0:	20000360 	.word	0x20000360
 8001df4:	20000364 	.word	0x20000364
 8001df8:	0007a120 	.word	0x0007a120

08001dfc <Buzzer_Start>:

void Buzzer_Start()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hbuzzerTim, hbuzzerTimChannel);
 8001e00:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <Buzzer_Start+0x18>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <Buzzer_Start+0x1c>)
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 ff42 	bl	8003c94 <HAL_TIM_PWM_Start>
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000360 	.word	0x20000360
 8001e18:	20000364 	.word	0x20000364

08001e1c <Buzzer_Stop>:

void Buzzer_Stop()
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hbuzzerTim, hbuzzerTimChannel);
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <Buzzer_Stop+0x18>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a04      	ldr	r2, [pc, #16]	@ (8001e38 <Buzzer_Stop+0x1c>)
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f001 ffe2 	bl	8003df4 <HAL_TIM_PWM_Stop>
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000360 	.word	0x20000360
 8001e38:	20000364 	.word	0x20000364

08001e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e40:	4b0e      	ldr	r3, [pc, #56]	@ (8001e7c <HAL_Init+0x40>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0d      	ldr	r2, [pc, #52]	@ (8001e7c <HAL_Init+0x40>)
 8001e46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <HAL_Init+0x40>)
 8001e52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e58:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	@ (8001e7c <HAL_Init+0x40>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 f991 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6a:	200f      	movs	r0, #15
 8001e6c:	f000 f808 	bl	8001e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e70:	f7fe fd5a 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023c00 	.word	0x40023c00

08001e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e88:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <HAL_InitTick+0x54>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ed8 <HAL_InitTick+0x58>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f9b7 	bl	8002212 <HAL_SYSTICK_Config>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00e      	b.n	8001ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b0f      	cmp	r3, #15
 8001eb2:	d80a      	bhi.n	8001eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	f000 f971 	bl	80021a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec0:	4a06      	ldr	r2, [pc, #24]	@ (8001edc <HAL_InitTick+0x5c>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e000      	b.n	8001ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000078 	.word	0x20000078
 8001edc:	20000074 	.word	0x20000074

08001ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <HAL_IncTick+0x20>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <HAL_IncTick+0x24>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <HAL_IncTick+0x24>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000078 	.word	0x20000078
 8001f04:	20000368 	.word	0x20000368

08001f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	@ (8001f1c <HAL_GetTick+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000368 	.word	0x20000368

08001f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f28:	f7ff ffee 	bl	8001f08 <HAL_GetTick>
 8001f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f38:	d005      	beq.n	8001f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <HAL_Delay+0x44>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f46:	bf00      	nop
 8001f48:	f7ff ffde 	bl	8001f08 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d8f7      	bhi.n	8001f48 <HAL_Delay+0x28>
  {
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000078 	.word	0x20000078

08001f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9a:	4a04      	ldr	r2, [pc, #16]	@ (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	60d3      	str	r3, [r2, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb4:	4b04      	ldr	r3, [pc, #16]	@ (8001fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 0307 	and.w	r3, r3, #7
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db0b      	blt.n	8001ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4907      	ldr	r1, [pc, #28]	@ (8002004 <__NVIC_EnableIRQ+0x38>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	2001      	movs	r0, #1
 8001fee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e100 	.word	0xe000e100

08002008 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db12      	blt.n	8002040 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	490a      	ldr	r1, [pc, #40]	@ (800204c <__NVIC_DisableIRQ+0x44>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	3320      	adds	r3, #32
 8002030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002034:	f3bf 8f4f 	dsb	sy
}
 8002038:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800203a:	f3bf 8f6f 	isb	sy
}
 800203e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000e100 	.word	0xe000e100

08002050 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db0c      	blt.n	800207c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4907      	ldr	r1, [pc, #28]	@ (8002088 <__NVIC_ClearPendingIRQ+0x38>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2001      	movs	r0, #1
 8002072:	fa00 f202 	lsl.w	r2, r0, r2
 8002076:	3360      	adds	r3, #96	@ 0x60
 8002078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100

0800208c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	db0a      	blt.n	80020b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	490c      	ldr	r1, [pc, #48]	@ (80020d8 <__NVIC_SetPriority+0x4c>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b4:	e00a      	b.n	80020cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4908      	ldr	r1, [pc, #32]	@ (80020dc <__NVIC_SetPriority+0x50>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3b04      	subs	r3, #4
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	440b      	add	r3, r1
 80020ca:	761a      	strb	r2, [r3, #24]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	@ 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f1c3 0307 	rsb	r3, r3, #7
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	bf28      	it	cs
 80020fe:	2304      	movcs	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3304      	adds	r3, #4
 8002106:	2b06      	cmp	r3, #6
 8002108:	d902      	bls.n	8002110 <NVIC_EncodePriority+0x30>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b03      	subs	r3, #3
 800210e:	e000      	b.n	8002112 <NVIC_EncodePriority+0x32>
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43d9      	mvns	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	4313      	orrs	r3, r2
         );
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	@ 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff8e 	bl	800208c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fee7 	bl	8001f68 <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b4:	f7ff fefc 	bl	8001fb0 <__NVIC_GetPriorityGrouping>
 80021b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7ff ff8e 	bl	80020e0 <NVIC_EncodePriority>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff5d 	bl	800208c <__NVIC_SetPriority>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff feef 	bl	8001fcc <__NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff feff 	bl	8002008 <__NVIC_DisableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ff94 	bl	8002148 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff09 	bl	8002050 <__NVIC_ClearPendingIRQ>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002252:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff fe58 	bl	8001f08 <HAL_GetTick>
 8002258:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d008      	beq.n	8002278 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2280      	movs	r2, #128	@ 0x80
 800226a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e052      	b.n	800231e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0216 	bic.w	r2, r2, #22
 8002286:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002296:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	2b00      	cmp	r3, #0
 800229e:	d103      	bne.n	80022a8 <HAL_DMA_Abort+0x62>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0208 	bic.w	r2, r2, #8
 80022b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0201 	bic.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c8:	e013      	b.n	80022f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ca:	f7ff fe1d 	bl	8001f08 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d90c      	bls.n	80022f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2203      	movs	r2, #3
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e015      	b.n	800231e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e4      	bne.n	80022ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002304:	223f      	movs	r2, #63	@ 0x3f
 8002306:	409a      	lsls	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d004      	beq.n	8002344 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2280      	movs	r2, #128	@ 0x80
 800233e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e00c      	b.n	800235e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2205      	movs	r2, #5
 8002348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0201 	bic.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	@ 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	e159      	b.n	800263c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	f040 8148 	bne.w	8002636 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d005      	beq.n	80023be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d130      	bne.n	8002420 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f4:	2201      	movs	r2, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	f003 0201 	and.w	r2, r3, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b03      	cmp	r3, #3
 800242a:	d017      	beq.n	800245c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d123      	bne.n	80024b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	08da      	lsrs	r2, r3, #3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3208      	adds	r2, #8
 8002470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	220f      	movs	r2, #15
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	08da      	lsrs	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3208      	adds	r2, #8
 80024aa:	69b9      	ldr	r1, [r7, #24]
 80024ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0203 	and.w	r2, r3, #3
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80a2 	beq.w	8002636 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	4b57      	ldr	r3, [pc, #348]	@ (8002654 <HAL_GPIO_Init+0x2e8>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fa:	4a56      	ldr	r2, [pc, #344]	@ (8002654 <HAL_GPIO_Init+0x2e8>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002500:	6453      	str	r3, [r2, #68]	@ 0x44
 8002502:	4b54      	ldr	r3, [pc, #336]	@ (8002654 <HAL_GPIO_Init+0x2e8>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800250e:	4a52      	ldr	r2, [pc, #328]	@ (8002658 <HAL_GPIO_Init+0x2ec>)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	3302      	adds	r3, #2
 8002516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	220f      	movs	r2, #15
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a49      	ldr	r2, [pc, #292]	@ (800265c <HAL_GPIO_Init+0x2f0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d019      	beq.n	800256e <HAL_GPIO_Init+0x202>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a48      	ldr	r2, [pc, #288]	@ (8002660 <HAL_GPIO_Init+0x2f4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_GPIO_Init+0x1fe>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a47      	ldr	r2, [pc, #284]	@ (8002664 <HAL_GPIO_Init+0x2f8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00d      	beq.n	8002566 <HAL_GPIO_Init+0x1fa>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a46      	ldr	r2, [pc, #280]	@ (8002668 <HAL_GPIO_Init+0x2fc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <HAL_GPIO_Init+0x1f6>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a45      	ldr	r2, [pc, #276]	@ (800266c <HAL_GPIO_Init+0x300>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d101      	bne.n	800255e <HAL_GPIO_Init+0x1f2>
 800255a:	2304      	movs	r3, #4
 800255c:	e008      	b.n	8002570 <HAL_GPIO_Init+0x204>
 800255e:	2307      	movs	r3, #7
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x204>
 8002562:	2303      	movs	r3, #3
 8002564:	e004      	b.n	8002570 <HAL_GPIO_Init+0x204>
 8002566:	2302      	movs	r3, #2
 8002568:	e002      	b.n	8002570 <HAL_GPIO_Init+0x204>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_GPIO_Init+0x204>
 800256e:	2300      	movs	r3, #0
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	f002 0203 	and.w	r2, r2, #3
 8002576:	0092      	lsls	r2, r2, #2
 8002578:	4093      	lsls	r3, r2
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002580:	4935      	ldr	r1, [pc, #212]	@ (8002658 <HAL_GPIO_Init+0x2ec>)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258e:	4b38      	ldr	r3, [pc, #224]	@ (8002670 <HAL_GPIO_Init+0x304>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002670 <HAL_GPIO_Init+0x304>)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002670 <HAL_GPIO_Init+0x304>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025dc:	4a24      	ldr	r2, [pc, #144]	@ (8002670 <HAL_GPIO_Init+0x304>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025e2:	4b23      	ldr	r3, [pc, #140]	@ (8002670 <HAL_GPIO_Init+0x304>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002606:	4a1a      	ldr	r2, [pc, #104]	@ (8002670 <HAL_GPIO_Init+0x304>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800260c:	4b18      	ldr	r3, [pc, #96]	@ (8002670 <HAL_GPIO_Init+0x304>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002630:	4a0f      	ldr	r2, [pc, #60]	@ (8002670 <HAL_GPIO_Init+0x304>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3301      	adds	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	2b0f      	cmp	r3, #15
 8002640:	f67f aea2 	bls.w	8002388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3724      	adds	r7, #36	@ 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	40013800 	.word	0x40013800
 800265c:	40020000 	.word	0x40020000
 8002660:	40020400 	.word	0x40020400
 8002664:	40020800 	.word	0x40020800
 8002668:	40020c00 	.word	0x40020c00
 800266c:	40021000 	.word	0x40021000
 8002670:	40013c00 	.word	0x40013c00

08002674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	887b      	ldrh	r3, [r7, #2]
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e001      	b.n	8002696 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]
 80026b0:	4613      	mov	r3, r2
 80026b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b4:	787b      	ldrb	r3, [r7, #1]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026c0:	e003      	b.n	80026ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	041a      	lsls	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	619a      	str	r2, [r3, #24]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026e2:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ee:	4a05      	ldr	r2, [pc, #20]	@ (8002704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f806 	bl	8002708 <HAL_GPIO_EXTI_Callback>
  }
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40013c00 	.word	0x40013c00

08002708 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e12b      	b.n	800298a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe f81c 	bl	8000784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2224      	movs	r2, #36	@ 0x24
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002772:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002782:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002784:	f001 f8da 	bl	800393c <HAL_RCC_GetPCLK1Freq>
 8002788:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4a81      	ldr	r2, [pc, #516]	@ (8002994 <HAL_I2C_Init+0x274>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d807      	bhi.n	80027a4 <HAL_I2C_Init+0x84>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a80      	ldr	r2, [pc, #512]	@ (8002998 <HAL_I2C_Init+0x278>)
 8002798:	4293      	cmp	r3, r2
 800279a:	bf94      	ite	ls
 800279c:	2301      	movls	r3, #1
 800279e:	2300      	movhi	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e006      	b.n	80027b2 <HAL_I2C_Init+0x92>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4a7d      	ldr	r2, [pc, #500]	@ (800299c <HAL_I2C_Init+0x27c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	bf94      	ite	ls
 80027ac:	2301      	movls	r3, #1
 80027ae:	2300      	movhi	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e0e7      	b.n	800298a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4a78      	ldr	r2, [pc, #480]	@ (80029a0 <HAL_I2C_Init+0x280>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0c9b      	lsrs	r3, r3, #18
 80027c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002994 <HAL_I2C_Init+0x274>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d802      	bhi.n	80027f4 <HAL_I2C_Init+0xd4>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3301      	adds	r3, #1
 80027f2:	e009      	b.n	8002808 <HAL_I2C_Init+0xe8>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	4a69      	ldr	r2, [pc, #420]	@ (80029a4 <HAL_I2C_Init+0x284>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	3301      	adds	r3, #1
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	430b      	orrs	r3, r1
 800280e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800281a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	495c      	ldr	r1, [pc, #368]	@ (8002994 <HAL_I2C_Init+0x274>)
 8002824:	428b      	cmp	r3, r1
 8002826:	d819      	bhi.n	800285c <HAL_I2C_Init+0x13c>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1e59      	subs	r1, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fbb1 f3f3 	udiv	r3, r1, r3
 8002836:	1c59      	adds	r1, r3, #1
 8002838:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800283c:	400b      	ands	r3, r1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_I2C_Init+0x138>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1e59      	subs	r1, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002850:	3301      	adds	r3, #1
 8002852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002856:	e051      	b.n	80028fc <HAL_I2C_Init+0x1dc>
 8002858:	2304      	movs	r3, #4
 800285a:	e04f      	b.n	80028fc <HAL_I2C_Init+0x1dc>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d111      	bne.n	8002888 <HAL_I2C_Init+0x168>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e58      	subs	r0, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	440b      	add	r3, r1
 8002872:	fbb0 f3f3 	udiv	r3, r0, r3
 8002876:	3301      	adds	r3, #1
 8002878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	e012      	b.n	80028ae <HAL_I2C_Init+0x18e>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1e58      	subs	r0, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	0099      	lsls	r1, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	fbb0 f3f3 	udiv	r3, r0, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Init+0x196>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e022      	b.n	80028fc <HAL_I2C_Init+0x1dc>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10e      	bne.n	80028dc <HAL_I2C_Init+0x1bc>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1e58      	subs	r0, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6859      	ldr	r1, [r3, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	440b      	add	r3, r1
 80028cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028da:	e00f      	b.n	80028fc <HAL_I2C_Init+0x1dc>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1e58      	subs	r0, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	0099      	lsls	r1, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	6809      	ldr	r1, [r1, #0]
 8002900:	4313      	orrs	r3, r2
 8002902:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800292a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6911      	ldr	r1, [r2, #16]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68d2      	ldr	r2, [r2, #12]
 8002936:	4311      	orrs	r1, r2
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	430b      	orrs	r3, r1
 800293e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	000186a0 	.word	0x000186a0
 8002998:	001e847f 	.word	0x001e847f
 800299c:	003d08ff 	.word	0x003d08ff
 80029a0:	431bde83 	.word	0x431bde83
 80029a4:	10624dd3 	.word	0x10624dd3

080029a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	461a      	mov	r2, r3
 80029b4:	460b      	mov	r3, r1
 80029b6:	817b      	strh	r3, [r7, #10]
 80029b8:	4613      	mov	r3, r2
 80029ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029bc:	f7ff faa4 	bl	8001f08 <HAL_GetTick>
 80029c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	f040 80e0 	bne.w	8002b90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2319      	movs	r3, #25
 80029d6:	2201      	movs	r2, #1
 80029d8:	4970      	ldr	r1, [pc, #448]	@ (8002b9c <HAL_I2C_Master_Transmit+0x1f4>)
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f964 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
 80029e8:	e0d3      	b.n	8002b92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_I2C_Master_Transmit+0x50>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e0cc      	b.n	8002b92 <HAL_I2C_Master_Transmit+0x1ea>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d007      	beq.n	8002a1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0201 	orr.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2221      	movs	r2, #33	@ 0x21
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	893a      	ldrh	r2, [r7, #8]
 8002a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4a50      	ldr	r2, [pc, #320]	@ (8002ba0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a60:	8979      	ldrh	r1, [r7, #10]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f89c 	bl	8002ba4 <I2C_MasterRequestWrite>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e08d      	b.n	8002b92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a8c:	e066      	b.n	8002b5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	6a39      	ldr	r1, [r7, #32]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fa22 	bl	8002edc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00d      	beq.n	8002aba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d107      	bne.n	8002ab6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ab4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e06b      	b.n	8002b92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	781a      	ldrb	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d11b      	bne.n	8002b30 <HAL_I2C_Master_Transmit+0x188>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d017      	beq.n	8002b30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	781a      	ldrb	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	6a39      	ldr	r1, [r7, #32]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fa19 	bl	8002f6c <I2C_WaitOnBTFFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00d      	beq.n	8002b5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d107      	bne.n	8002b58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e01a      	b.n	8002b92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d194      	bne.n	8002a8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	00100002 	.word	0x00100002
 8002ba0:	ffff0000 	.word	0xffff0000

08002ba4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d006      	beq.n	8002bce <I2C_MasterRequestWrite+0x2a>
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d003      	beq.n	8002bce <I2C_MasterRequestWrite+0x2a>
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bcc:	d108      	bne.n	8002be0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	e00b      	b.n	8002bf8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be4:	2b12      	cmp	r3, #18
 8002be6:	d107      	bne.n	8002bf8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f84f 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00d      	beq.n	8002c2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c1e:	d103      	bne.n	8002c28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e035      	b.n	8002c98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c34:	d108      	bne.n	8002c48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c36:	897b      	ldrh	r3, [r7, #10]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c44:	611a      	str	r2, [r3, #16]
 8002c46:	e01b      	b.n	8002c80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c48:	897b      	ldrh	r3, [r7, #10]
 8002c4a:	11db      	asrs	r3, r3, #7
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f003 0306 	and.w	r3, r3, #6
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f063 030f 	orn	r3, r3, #15
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	490e      	ldr	r1, [pc, #56]	@ (8002ca0 <I2C_MasterRequestWrite+0xfc>)
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f898 	bl	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e010      	b.n	8002c98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c76:	897b      	ldrh	r3, [r7, #10]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4907      	ldr	r1, [pc, #28]	@ (8002ca4 <I2C_MasterRequestWrite+0x100>)
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f888 	bl	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	00010008 	.word	0x00010008
 8002ca4:	00010002 	.word	0x00010002

08002ca8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb8:	e048      	b.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d044      	beq.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc2:	f7ff f921 	bl	8001f08 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d139      	bne.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d10d      	bne.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4013      	ands	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	e00c      	b.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	43da      	mvns	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d116      	bne.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e023      	b.n	8002d94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	0c1b      	lsrs	r3, r3, #16
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d10d      	bne.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	43da      	mvns	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4013      	ands	r3, r2
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	e00c      	b.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d093      	beq.n	8002cba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002daa:	e071      	b.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dba:	d123      	bne.n	8002e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	f043 0204 	orr.w	r2, r3, #4
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e067      	b.n	8002ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0a:	d041      	beq.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0c:	f7ff f87c 	bl	8001f08 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d302      	bcc.n	8002e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d136      	bne.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	0c1b      	lsrs	r3, r3, #16
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d10c      	bne.n	8002e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	43da      	mvns	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4013      	ands	r3, r2
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf14      	ite	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	2300      	moveq	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	e00b      	b.n	8002e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	43da      	mvns	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4013      	ands	r3, r2
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf14      	ite	ne
 8002e58:	2301      	movne	r3, #1
 8002e5a:	2300      	moveq	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e021      	b.n	8002ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	0c1b      	lsrs	r3, r3, #16
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d10c      	bne.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	43da      	mvns	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e00b      	b.n	8002ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf14      	ite	ne
 8002ec6:	2301      	movne	r3, #1
 8002ec8:	2300      	moveq	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f47f af6d 	bne.w	8002dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee8:	e034      	b.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f886 	bl	8002ffc <I2C_IsAcknowledgeFailed>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e034      	b.n	8002f64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d028      	beq.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f02:	f7ff f801 	bl	8001f08 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d302      	bcc.n	8002f18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d11d      	bne.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f22:	2b80      	cmp	r3, #128	@ 0x80
 8002f24:	d016      	beq.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e007      	b.n	8002f64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f5e:	2b80      	cmp	r3, #128	@ 0x80
 8002f60:	d1c3      	bne.n	8002eea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f78:	e034      	b.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f83e 	bl	8002ffc <I2C_IsAcknowledgeFailed>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e034      	b.n	8002ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d028      	beq.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f92:	f7fe ffb9 	bl	8001f08 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d302      	bcc.n	8002fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d11d      	bne.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d016      	beq.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e007      	b.n	8002ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d1c3      	bne.n	8002f7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003012:	d11b      	bne.n	800304c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800301c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003038:	f043 0204 	orr.w	r2, r3, #4
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e267      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d075      	beq.n	8003166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800307a:	4b88      	ldr	r3, [pc, #544]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b04      	cmp	r3, #4
 8003084:	d00c      	beq.n	80030a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003086:	4b85      	ldr	r3, [pc, #532]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800308e:	2b08      	cmp	r3, #8
 8003090:	d112      	bne.n	80030b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003092:	4b82      	ldr	r3, [pc, #520]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800309a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800309e:	d10b      	bne.n	80030b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a0:	4b7e      	ldr	r3, [pc, #504]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d05b      	beq.n	8003164 <HAL_RCC_OscConfig+0x108>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d157      	bne.n	8003164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e242      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c0:	d106      	bne.n	80030d0 <HAL_RCC_OscConfig+0x74>
 80030c2:	4b76      	ldr	r3, [pc, #472]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a75      	ldr	r2, [pc, #468]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e01d      	b.n	800310c <HAL_RCC_OscConfig+0xb0>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x98>
 80030da:	4b70      	ldr	r3, [pc, #448]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6f      	ldr	r2, [pc, #444]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b6d      	ldr	r3, [pc, #436]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6c      	ldr	r2, [pc, #432]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e00b      	b.n	800310c <HAL_RCC_OscConfig+0xb0>
 80030f4:	4b69      	ldr	r3, [pc, #420]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a68      	ldr	r2, [pc, #416]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b66      	ldr	r3, [pc, #408]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a65      	ldr	r2, [pc, #404]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800310a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d013      	beq.n	800313c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe fef8 	bl	8001f08 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800311c:	f7fe fef4 	bl	8001f08 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	@ 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e207      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b5b      	ldr	r3, [pc, #364]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0xc0>
 800313a:	e014      	b.n	8003166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe fee4 	bl	8001f08 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe fee0 	bl	8001f08 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	@ 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1f3      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003156:	4b51      	ldr	r3, [pc, #324]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0xe8>
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d063      	beq.n	800323a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003172:	4b4a      	ldr	r3, [pc, #296]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317e:	4b47      	ldr	r3, [pc, #284]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003186:	2b08      	cmp	r3, #8
 8003188:	d11c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318a:	4b44      	ldr	r3, [pc, #272]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d116      	bne.n	80031c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003196:	4b41      	ldr	r3, [pc, #260]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_RCC_OscConfig+0x152>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e1c7      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	4b3b      	ldr	r3, [pc, #236]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4937      	ldr	r1, [pc, #220]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	e03a      	b.n	800323a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d020      	beq.n	800320e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031cc:	4b34      	ldr	r3, [pc, #208]	@ (80032a0 <HAL_RCC_OscConfig+0x244>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d2:	f7fe fe99 	bl	8001f08 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031da:	f7fe fe95 	bl	8001f08 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e1a8      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ec:	4b2b      	ldr	r3, [pc, #172]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f8:	4b28      	ldr	r3, [pc, #160]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4925      	ldr	r1, [pc, #148]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]
 800320c:	e015      	b.n	800323a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320e:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <HAL_RCC_OscConfig+0x244>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe fe78 	bl	8001f08 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321c:	f7fe fe74 	bl	8001f08 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e187      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322e:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d036      	beq.n	80032b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324e:	4b15      	ldr	r3, [pc, #84]	@ (80032a4 <HAL_RCC_OscConfig+0x248>)
 8003250:	2201      	movs	r2, #1
 8003252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fe fe58 	bl	8001f08 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325c:	f7fe fe54 	bl	8001f08 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e167      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326e:	4b0b      	ldr	r3, [pc, #44]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x200>
 800327a:	e01b      	b.n	80032b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800327c:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <HAL_RCC_OscConfig+0x248>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003282:	f7fe fe41 	bl	8001f08 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003288:	e00e      	b.n	80032a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328a:	f7fe fe3d 	bl	8001f08 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d907      	bls.n	80032a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e150      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
 800329c:	40023800 	.word	0x40023800
 80032a0:	42470000 	.word	0x42470000
 80032a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a8:	4b88      	ldr	r3, [pc, #544]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80032aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ea      	bne.n	800328a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8097 	beq.w	80033f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c6:	4b81      	ldr	r3, [pc, #516]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10f      	bne.n	80032f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	4b7d      	ldr	r3, [pc, #500]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	4a7c      	ldr	r2, [pc, #496]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032e2:	4b7a      	ldr	r3, [pc, #488]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f2:	4b77      	ldr	r3, [pc, #476]	@ (80034d0 <HAL_RCC_OscConfig+0x474>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d118      	bne.n	8003330 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fe:	4b74      	ldr	r3, [pc, #464]	@ (80034d0 <HAL_RCC_OscConfig+0x474>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a73      	ldr	r2, [pc, #460]	@ (80034d0 <HAL_RCC_OscConfig+0x474>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330a:	f7fe fdfd 	bl	8001f08 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003312:	f7fe fdf9 	bl	8001f08 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e10c      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003324:	4b6a      	ldr	r3, [pc, #424]	@ (80034d0 <HAL_RCC_OscConfig+0x474>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x2ea>
 8003338:	4b64      	ldr	r3, [pc, #400]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333c:	4a63      	ldr	r2, [pc, #396]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6713      	str	r3, [r2, #112]	@ 0x70
 8003344:	e01c      	b.n	8003380 <HAL_RCC_OscConfig+0x324>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b05      	cmp	r3, #5
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x30c>
 800334e:	4b5f      	ldr	r3, [pc, #380]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003352:	4a5e      	ldr	r2, [pc, #376]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 8003354:	f043 0304 	orr.w	r3, r3, #4
 8003358:	6713      	str	r3, [r2, #112]	@ 0x70
 800335a:	4b5c      	ldr	r3, [pc, #368]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335e:	4a5b      	ldr	r2, [pc, #364]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	6713      	str	r3, [r2, #112]	@ 0x70
 8003366:	e00b      	b.n	8003380 <HAL_RCC_OscConfig+0x324>
 8003368:	4b58      	ldr	r3, [pc, #352]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336c:	4a57      	ldr	r2, [pc, #348]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	6713      	str	r3, [r2, #112]	@ 0x70
 8003374:	4b55      	ldr	r3, [pc, #340]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003378:	4a54      	ldr	r2, [pc, #336]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 800337a:	f023 0304 	bic.w	r3, r3, #4
 800337e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d015      	beq.n	80033b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003388:	f7fe fdbe 	bl	8001f08 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003390:	f7fe fdba 	bl	8001f08 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e0cb      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a6:	4b49      	ldr	r3, [pc, #292]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0ee      	beq.n	8003390 <HAL_RCC_OscConfig+0x334>
 80033b2:	e014      	b.n	80033de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b4:	f7fe fda8 	bl	8001f08 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fe fda4 	bl	8001f08 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0b5      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d2:	4b3e      	ldr	r3, [pc, #248]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1ee      	bne.n	80033bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e4:	4b39      	ldr	r3, [pc, #228]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	4a38      	ldr	r2, [pc, #224]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80033ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80a1 	beq.w	800353c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033fa:	4b34      	ldr	r3, [pc, #208]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b08      	cmp	r3, #8
 8003404:	d05c      	beq.n	80034c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d141      	bne.n	8003492 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340e:	4b31      	ldr	r3, [pc, #196]	@ (80034d4 <HAL_RCC_OscConfig+0x478>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fe fd78 	bl	8001f08 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341c:	f7fe fd74 	bl	8001f08 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e087      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342e:	4b27      	ldr	r3, [pc, #156]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	3b01      	subs	r3, #1
 8003454:	041b      	lsls	r3, r3, #16
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	061b      	lsls	r3, r3, #24
 800345e:	491b      	ldr	r1, [pc, #108]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 8003460:	4313      	orrs	r3, r2
 8003462:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003464:	4b1b      	ldr	r3, [pc, #108]	@ (80034d4 <HAL_RCC_OscConfig+0x478>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346a:	f7fe fd4d 	bl	8001f08 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003472:	f7fe fd49 	bl	8001f08 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e05c      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003484:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x416>
 8003490:	e054      	b.n	800353c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003492:	4b10      	ldr	r3, [pc, #64]	@ (80034d4 <HAL_RCC_OscConfig+0x478>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fe fd36 	bl	8001f08 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a0:	f7fe fd32 	bl	8001f08 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e045      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b2:	4b06      	ldr	r3, [pc, #24]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x444>
 80034be:	e03d      	b.n	800353c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d107      	bne.n	80034d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e038      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40007000 	.word	0x40007000
 80034d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003548 <HAL_RCC_OscConfig+0x4ec>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d028      	beq.n	8003538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d121      	bne.n	8003538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d11a      	bne.n	8003538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003508:	4013      	ands	r3, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800350e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003510:	4293      	cmp	r3, r2
 8003512:	d111      	bne.n	8003538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351e:	085b      	lsrs	r3, r3, #1
 8003520:	3b01      	subs	r3, #1
 8003522:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d107      	bne.n	8003538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003532:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800

0800354c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0cc      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003560:	4b68      	ldr	r3, [pc, #416]	@ (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d90c      	bls.n	8003588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b65      	ldr	r3, [pc, #404]	@ (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b63      	ldr	r3, [pc, #396]	@ (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0b8      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d020      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a0:	4b59      	ldr	r3, [pc, #356]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4a58      	ldr	r2, [pc, #352]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b8:	4b53      	ldr	r3, [pc, #332]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	4a52      	ldr	r2, [pc, #328]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c4:	4b50      	ldr	r3, [pc, #320]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	494d      	ldr	r1, [pc, #308]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d044      	beq.n	800366c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b47      	ldr	r3, [pc, #284]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d119      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e07f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d003      	beq.n	800360a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003606:	2b03      	cmp	r3, #3
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360a:	4b3f      	ldr	r3, [pc, #252]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e06f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361a:	4b3b      	ldr	r3, [pc, #236]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e067      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800362a:	4b37      	ldr	r3, [pc, #220]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f023 0203 	bic.w	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4934      	ldr	r1, [pc, #208]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	4313      	orrs	r3, r2
 800363a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800363c:	f7fe fc64 	bl	8001f08 <HAL_GetTick>
 8003640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	e00a      	b.n	800365a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003644:	f7fe fc60 	bl	8001f08 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e04f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365a:	4b2b      	ldr	r3, [pc, #172]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 020c 	and.w	r2, r3, #12
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	429a      	cmp	r2, r3
 800366a:	d1eb      	bne.n	8003644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800366c:	4b25      	ldr	r3, [pc, #148]	@ (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d20c      	bcs.n	8003694 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367a:	4b22      	ldr	r3, [pc, #136]	@ (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b20      	ldr	r3, [pc, #128]	@ (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e032      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a0:	4b19      	ldr	r3, [pc, #100]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4916      	ldr	r1, [pc, #88]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036be:	4b12      	ldr	r3, [pc, #72]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	490e      	ldr	r1, [pc, #56]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036d2:	f000 f821 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80036d6:	4602      	mov	r2, r0
 80036d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	490a      	ldr	r1, [pc, #40]	@ (800370c <HAL_RCC_ClockConfig+0x1c0>)
 80036e4:	5ccb      	ldrb	r3, [r1, r3]
 80036e6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ea:	4a09      	ldr	r2, [pc, #36]	@ (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036ee:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <HAL_RCC_ClockConfig+0x1c8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe fbc4 	bl	8001e80 <HAL_InitTick>

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40023c00 	.word	0x40023c00
 8003708:	40023800 	.word	0x40023800
 800370c:	080068f0 	.word	0x080068f0
 8003710:	20000000 	.word	0x20000000
 8003714:	20000074 	.word	0x20000074

08003718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800371c:	b094      	sub	sp, #80	@ 0x50
 800371e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003730:	4b79      	ldr	r3, [pc, #484]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x200>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b08      	cmp	r3, #8
 800373a:	d00d      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x40>
 800373c:	2b08      	cmp	r3, #8
 800373e:	f200 80e1 	bhi.w	8003904 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x34>
 8003746:	2b04      	cmp	r3, #4
 8003748:	d003      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0x3a>
 800374a:	e0db      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800374c:	4b73      	ldr	r3, [pc, #460]	@ (800391c <HAL_RCC_GetSysClockFreq+0x204>)
 800374e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003750:	e0db      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003752:	4b73      	ldr	r3, [pc, #460]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x208>)
 8003754:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003756:	e0d8      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003758:	4b6f      	ldr	r3, [pc, #444]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x200>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003760:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003762:	4b6d      	ldr	r3, [pc, #436]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x200>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d063      	beq.n	8003836 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376e:	4b6a      	ldr	r3, [pc, #424]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x200>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	099b      	lsrs	r3, r3, #6
 8003774:	2200      	movs	r2, #0
 8003776:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003778:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800377a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800377c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003780:	633b      	str	r3, [r7, #48]	@ 0x30
 8003782:	2300      	movs	r3, #0
 8003784:	637b      	str	r3, [r7, #52]	@ 0x34
 8003786:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800378a:	4622      	mov	r2, r4
 800378c:	462b      	mov	r3, r5
 800378e:	f04f 0000 	mov.w	r0, #0
 8003792:	f04f 0100 	mov.w	r1, #0
 8003796:	0159      	lsls	r1, r3, #5
 8003798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800379c:	0150      	lsls	r0, r2, #5
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4621      	mov	r1, r4
 80037a4:	1a51      	subs	r1, r2, r1
 80037a6:	6139      	str	r1, [r7, #16]
 80037a8:	4629      	mov	r1, r5
 80037aa:	eb63 0301 	sbc.w	r3, r3, r1
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037bc:	4659      	mov	r1, fp
 80037be:	018b      	lsls	r3, r1, #6
 80037c0:	4651      	mov	r1, sl
 80037c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037c6:	4651      	mov	r1, sl
 80037c8:	018a      	lsls	r2, r1, #6
 80037ca:	4651      	mov	r1, sl
 80037cc:	ebb2 0801 	subs.w	r8, r2, r1
 80037d0:	4659      	mov	r1, fp
 80037d2:	eb63 0901 	sbc.w	r9, r3, r1
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ea:	4690      	mov	r8, r2
 80037ec:	4699      	mov	r9, r3
 80037ee:	4623      	mov	r3, r4
 80037f0:	eb18 0303 	adds.w	r3, r8, r3
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	462b      	mov	r3, r5
 80037f8:	eb49 0303 	adc.w	r3, r9, r3
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800380a:	4629      	mov	r1, r5
 800380c:	024b      	lsls	r3, r1, #9
 800380e:	4621      	mov	r1, r4
 8003810:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003814:	4621      	mov	r1, r4
 8003816:	024a      	lsls	r2, r1, #9
 8003818:	4610      	mov	r0, r2
 800381a:	4619      	mov	r1, r3
 800381c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800381e:	2200      	movs	r2, #0
 8003820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003822:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003824:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003828:	f7fc fd2a 	bl	8000280 <__aeabi_uldivmod>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4613      	mov	r3, r2
 8003832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003834:	e058      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003836:	4b38      	ldr	r3, [pc, #224]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x200>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	099b      	lsrs	r3, r3, #6
 800383c:	2200      	movs	r2, #0
 800383e:	4618      	mov	r0, r3
 8003840:	4611      	mov	r1, r2
 8003842:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003846:	623b      	str	r3, [r7, #32]
 8003848:	2300      	movs	r3, #0
 800384a:	627b      	str	r3, [r7, #36]	@ 0x24
 800384c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003850:	4642      	mov	r2, r8
 8003852:	464b      	mov	r3, r9
 8003854:	f04f 0000 	mov.w	r0, #0
 8003858:	f04f 0100 	mov.w	r1, #0
 800385c:	0159      	lsls	r1, r3, #5
 800385e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003862:	0150      	lsls	r0, r2, #5
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4641      	mov	r1, r8
 800386a:	ebb2 0a01 	subs.w	sl, r2, r1
 800386e:	4649      	mov	r1, r9
 8003870:	eb63 0b01 	sbc.w	fp, r3, r1
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003880:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003884:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003888:	ebb2 040a 	subs.w	r4, r2, sl
 800388c:	eb63 050b 	sbc.w	r5, r3, fp
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	00eb      	lsls	r3, r5, #3
 800389a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800389e:	00e2      	lsls	r2, r4, #3
 80038a0:	4614      	mov	r4, r2
 80038a2:	461d      	mov	r5, r3
 80038a4:	4643      	mov	r3, r8
 80038a6:	18e3      	adds	r3, r4, r3
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	464b      	mov	r3, r9
 80038ac:	eb45 0303 	adc.w	r3, r5, r3
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038be:	4629      	mov	r1, r5
 80038c0:	028b      	lsls	r3, r1, #10
 80038c2:	4621      	mov	r1, r4
 80038c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038c8:	4621      	mov	r1, r4
 80038ca:	028a      	lsls	r2, r1, #10
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d2:	2200      	movs	r2, #0
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	61fa      	str	r2, [r7, #28]
 80038d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038dc:	f7fc fcd0 	bl	8000280 <__aeabi_uldivmod>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4613      	mov	r3, r2
 80038e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	3301      	adds	r3, #1
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003902:	e002      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4b05      	ldr	r3, [pc, #20]	@ (800391c <HAL_RCC_GetSysClockFreq+0x204>)
 8003906:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800390c:	4618      	mov	r0, r3
 800390e:	3750      	adds	r7, #80	@ 0x50
 8003910:	46bd      	mov	sp, r7
 8003912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800
 800391c:	00f42400 	.word	0x00f42400
 8003920:	007a1200 	.word	0x007a1200

08003924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003928:	4b03      	ldr	r3, [pc, #12]	@ (8003938 <HAL_RCC_GetHCLKFreq+0x14>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20000000 	.word	0x20000000

0800393c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003940:	f7ff fff0 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b05      	ldr	r3, [pc, #20]	@ (800395c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	0a9b      	lsrs	r3, r3, #10
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4903      	ldr	r1, [pc, #12]	@ (8003960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40023800 	.word	0x40023800
 8003960:	08006900 	.word	0x08006900

08003964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003968:	f7ff ffdc 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b05      	ldr	r3, [pc, #20]	@ (8003984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	0b5b      	lsrs	r3, r3, #13
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4903      	ldr	r1, [pc, #12]	@ (8003988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40023800 	.word	0x40023800
 8003988:	08006900 	.word	0x08006900

0800398c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e041      	b.n	8003a22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd faf2 	bl	8000f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3304      	adds	r3, #4
 80039c8:	4619      	mov	r1, r3
 80039ca:	4610      	mov	r0, r2
 80039cc:	f000 fd18 	bl	8004400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d001      	beq.n	8003a44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e03c      	b.n	8003abe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1e      	ldr	r2, [pc, #120]	@ (8003acc <HAL_TIM_Base_Start+0xa0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d018      	beq.n	8003a88 <HAL_TIM_Base_Start+0x5c>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5e:	d013      	beq.n	8003a88 <HAL_TIM_Base_Start+0x5c>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad0 <HAL_TIM_Base_Start+0xa4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00e      	beq.n	8003a88 <HAL_TIM_Base_Start+0x5c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a19      	ldr	r2, [pc, #100]	@ (8003ad4 <HAL_TIM_Base_Start+0xa8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d009      	beq.n	8003a88 <HAL_TIM_Base_Start+0x5c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a17      	ldr	r2, [pc, #92]	@ (8003ad8 <HAL_TIM_Base_Start+0xac>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d004      	beq.n	8003a88 <HAL_TIM_Base_Start+0x5c>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a16      	ldr	r2, [pc, #88]	@ (8003adc <HAL_TIM_Base_Start+0xb0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d111      	bne.n	8003aac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d010      	beq.n	8003abc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0201 	orr.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aaa:	e007      	b.n	8003abc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	40000400 	.word	0x40000400
 8003ad4:	40000800 	.word	0x40000800
 8003ad8:	40000c00 	.word	0x40000c00
 8003adc:	40014000 	.word	0x40014000

08003ae0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6a1a      	ldr	r2, [r3, #32]
 8003aee:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10f      	bne.n	8003b18 <HAL_TIM_Base_Stop+0x38>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6a1a      	ldr	r2, [r3, #32]
 8003afe:	f240 4344 	movw	r3, #1092	@ 0x444
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d107      	bne.n	8003b18 <HAL_TIM_Base_Stop+0x38>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d001      	beq.n	8003b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e044      	b.n	8003bd2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1e      	ldr	r2, [pc, #120]	@ (8003be0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d018      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x6c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b72:	d013      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x6c>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1a      	ldr	r2, [pc, #104]	@ (8003be4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00e      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x6c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a19      	ldr	r2, [pc, #100]	@ (8003be8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d009      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x6c>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a17      	ldr	r2, [pc, #92]	@ (8003bec <HAL_TIM_Base_Start_IT+0xbc>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d004      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x6c>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a16      	ldr	r2, [pc, #88]	@ (8003bf0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d111      	bne.n	8003bc0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b06      	cmp	r3, #6
 8003bac:	d010      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0201 	orr.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbe:	e007      	b.n	8003bd0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800
 8003bec:	40000c00 	.word	0x40000c00
 8003bf0:	40014000 	.word	0x40014000

08003bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e041      	b.n	8003c8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd f99c 	bl	8000f58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f000 fbe4 	bl	8004400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d109      	bne.n	8003cb8 <HAL_TIM_PWM_Start+0x24>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	bf14      	ite	ne
 8003cb0:	2301      	movne	r3, #1
 8003cb2:	2300      	moveq	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e022      	b.n	8003cfe <HAL_TIM_PWM_Start+0x6a>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d109      	bne.n	8003cd2 <HAL_TIM_PWM_Start+0x3e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	bf14      	ite	ne
 8003cca:	2301      	movne	r3, #1
 8003ccc:	2300      	moveq	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	e015      	b.n	8003cfe <HAL_TIM_PWM_Start+0x6a>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d109      	bne.n	8003cec <HAL_TIM_PWM_Start+0x58>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	bf14      	ite	ne
 8003ce4:	2301      	movne	r3, #1
 8003ce6:	2300      	moveq	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	e008      	b.n	8003cfe <HAL_TIM_PWM_Start+0x6a>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e068      	b.n	8003dd8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <HAL_TIM_PWM_Start+0x82>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d14:	e013      	b.n	8003d3e <HAL_TIM_PWM_Start+0xaa>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIM_PWM_Start+0x92>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d24:	e00b      	b.n	8003d3e <HAL_TIM_PWM_Start+0xaa>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_PWM_Start+0xa2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d34:	e003      	b.n	8003d3e <HAL_TIM_PWM_Start+0xaa>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2201      	movs	r2, #1
 8003d44:	6839      	ldr	r1, [r7, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fe06 	bl	8004958 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a23      	ldr	r2, [pc, #140]	@ (8003de0 <HAL_TIM_PWM_Start+0x14c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d107      	bne.n	8003d66 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003de0 <HAL_TIM_PWM_Start+0x14c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d018      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x10e>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d78:	d013      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x10e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a19      	ldr	r2, [pc, #100]	@ (8003de4 <HAL_TIM_PWM_Start+0x150>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00e      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x10e>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a17      	ldr	r2, [pc, #92]	@ (8003de8 <HAL_TIM_PWM_Start+0x154>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d009      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x10e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a16      	ldr	r2, [pc, #88]	@ (8003dec <HAL_TIM_PWM_Start+0x158>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d004      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x10e>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a14      	ldr	r2, [pc, #80]	@ (8003df0 <HAL_TIM_PWM_Start+0x15c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d111      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b06      	cmp	r3, #6
 8003db2:	d010      	beq.n	8003dd6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc4:	e007      	b.n	8003dd6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0201 	orr.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40000800 	.word	0x40000800
 8003dec:	40000c00 	.word	0x40000c00
 8003df0:	40014000 	.word	0x40014000

08003df4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2200      	movs	r2, #0
 8003e04:	6839      	ldr	r1, [r7, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fda6 	bl	8004958 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a29      	ldr	r2, [pc, #164]	@ (8003eb8 <HAL_TIM_PWM_Stop+0xc4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d117      	bne.n	8003e46 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6a1a      	ldr	r2, [r3, #32]
 8003e1c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003e20:	4013      	ands	r3, r2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10f      	bne.n	8003e46 <HAL_TIM_PWM_Stop+0x52>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6a1a      	ldr	r2, [r3, #32]
 8003e2c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d107      	bne.n	8003e46 <HAL_TIM_PWM_Stop+0x52>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6a1a      	ldr	r2, [r3, #32]
 8003e4c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10f      	bne.n	8003e76 <HAL_TIM_PWM_Stop+0x82>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6a1a      	ldr	r2, [r3, #32]
 8003e5c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d107      	bne.n	8003e76 <HAL_TIM_PWM_Stop+0x82>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0201 	bic.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <HAL_TIM_PWM_Stop+0x92>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e84:	e013      	b.n	8003eae <HAL_TIM_PWM_Stop+0xba>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d104      	bne.n	8003e96 <HAL_TIM_PWM_Stop+0xa2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e94:	e00b      	b.n	8003eae <HAL_TIM_PWM_Stop+0xba>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d104      	bne.n	8003ea6 <HAL_TIM_PWM_Stop+0xb2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ea4:	e003      	b.n	8003eae <HAL_TIM_PWM_Stop+0xba>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40010000 	.word	0x40010000

08003ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d020      	beq.n	8003f20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01b      	beq.n	8003f20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0202 	mvn.w	r2, #2
 8003ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fa5b 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa4d 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fa5e 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d020      	beq.n	8003f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01b      	beq.n	8003f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0204 	mvn.w	r2, #4
 8003f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa35 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 8003f58:	e005      	b.n	8003f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fa27 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fa38 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d020      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01b      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0208 	mvn.w	r2, #8
 8003f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fa0f 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fa01 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fa12 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d020      	beq.n	8004004 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01b      	beq.n	8004004 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0210 	mvn.w	r2, #16
 8003fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2208      	movs	r2, #8
 8003fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f9e9 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 8003ff0:	e005      	b.n	8003ffe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f9db 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f9ec 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00c      	beq.n	8004028 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0201 	mvn.w	r2, #1
 8004020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fd f97c 	bl	8001320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00c      	beq.n	800404c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004038:	2b00      	cmp	r3, #0
 800403a:	d007      	beq.n	800404c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fd76 	bl	8004b38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00c      	beq.n	8004070 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f9bd 	bl	80043ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00c      	beq.n	8004094 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d007      	beq.n	8004094 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0220 	mvn.w	r2, #32
 800408c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fd48 	bl	8004b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e0ae      	b.n	8004218 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b0c      	cmp	r3, #12
 80040c6:	f200 809f 	bhi.w	8004208 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040ca:	a201      	add	r2, pc, #4	@ (adr r2, 80040d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d0:	08004105 	.word	0x08004105
 80040d4:	08004209 	.word	0x08004209
 80040d8:	08004209 	.word	0x08004209
 80040dc:	08004209 	.word	0x08004209
 80040e0:	08004145 	.word	0x08004145
 80040e4:	08004209 	.word	0x08004209
 80040e8:	08004209 	.word	0x08004209
 80040ec:	08004209 	.word	0x08004209
 80040f0:	08004187 	.word	0x08004187
 80040f4:	08004209 	.word	0x08004209
 80040f8:	08004209 	.word	0x08004209
 80040fc:	08004209 	.word	0x08004209
 8004100:	080041c7 	.word	0x080041c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68b9      	ldr	r1, [r7, #8]
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f9fe 	bl	800450c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0208 	orr.w	r2, r2, #8
 800411e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0204 	bic.w	r2, r2, #4
 800412e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6999      	ldr	r1, [r3, #24]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	619a      	str	r2, [r3, #24]
      break;
 8004142:	e064      	b.n	800420e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fa44 	bl	80045d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800415e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800416e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6999      	ldr	r1, [r3, #24]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	021a      	lsls	r2, r3, #8
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	619a      	str	r2, [r3, #24]
      break;
 8004184:	e043      	b.n	800420e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fa8f 	bl	80046b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0208 	orr.w	r2, r2, #8
 80041a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0204 	bic.w	r2, r2, #4
 80041b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69d9      	ldr	r1, [r3, #28]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	61da      	str	r2, [r3, #28]
      break;
 80041c4:	e023      	b.n	800420e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fad9 	bl	8004784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69d9      	ldr	r1, [r3, #28]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	021a      	lsls	r2, r3, #8
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	61da      	str	r2, [r3, #28]
      break;
 8004206:	e002      	b.n	800420e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	75fb      	strb	r3, [r7, #23]
      break;
 800420c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004216:	7dfb      	ldrb	r3, [r7, #23]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_TIM_ConfigClockSource+0x1c>
 8004238:	2302      	movs	r3, #2
 800423a:	e0b4      	b.n	80043a6 <HAL_TIM_ConfigClockSource+0x186>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800425a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004274:	d03e      	beq.n	80042f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427a:	f200 8087 	bhi.w	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004282:	f000 8086 	beq.w	8004392 <HAL_TIM_ConfigClockSource+0x172>
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800428a:	d87f      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800428c:	2b70      	cmp	r3, #112	@ 0x70
 800428e:	d01a      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004290:	2b70      	cmp	r3, #112	@ 0x70
 8004292:	d87b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b60      	cmp	r3, #96	@ 0x60
 8004296:	d050      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x11a>
 8004298:	2b60      	cmp	r3, #96	@ 0x60
 800429a:	d877      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800429c:	2b50      	cmp	r3, #80	@ 0x50
 800429e:	d03c      	beq.n	800431a <HAL_TIM_ConfigClockSource+0xfa>
 80042a0:	2b50      	cmp	r3, #80	@ 0x50
 80042a2:	d873      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042a4:	2b40      	cmp	r3, #64	@ 0x40
 80042a6:	d058      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x13a>
 80042a8:	2b40      	cmp	r3, #64	@ 0x40
 80042aa:	d86f      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042ac:	2b30      	cmp	r3, #48	@ 0x30
 80042ae:	d064      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042b0:	2b30      	cmp	r3, #48	@ 0x30
 80042b2:	d86b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d060      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d867      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05c      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d05a      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042c4:	e062      	b.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042d6:	f000 fb1f 	bl	8004918 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	609a      	str	r2, [r3, #8]
      break;
 80042f2:	e04f      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004304:	f000 fb08 	bl	8004918 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004316:	609a      	str	r2, [r3, #8]
      break;
 8004318:	e03c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004326:	461a      	mov	r2, r3
 8004328:	f000 fa7c 	bl	8004824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2150      	movs	r1, #80	@ 0x50
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fad5 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 8004338:	e02c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004346:	461a      	mov	r2, r3
 8004348:	f000 fa9b 	bl	8004882 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2160      	movs	r1, #96	@ 0x60
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fac5 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 8004358:	e01c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004366:	461a      	mov	r2, r3
 8004368:	f000 fa5c 	bl	8004824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2140      	movs	r1, #64	@ 0x40
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fab5 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 8004378:	e00c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f000 faac 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 800438a:	e003      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      break;
 8004390:	e000      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a37      	ldr	r2, [pc, #220]	@ (80044f0 <TIM_Base_SetConfig+0xf0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00f      	beq.n	8004438 <TIM_Base_SetConfig+0x38>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800441e:	d00b      	beq.n	8004438 <TIM_Base_SetConfig+0x38>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a34      	ldr	r2, [pc, #208]	@ (80044f4 <TIM_Base_SetConfig+0xf4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d007      	beq.n	8004438 <TIM_Base_SetConfig+0x38>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a33      	ldr	r2, [pc, #204]	@ (80044f8 <TIM_Base_SetConfig+0xf8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_Base_SetConfig+0x38>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a32      	ldr	r2, [pc, #200]	@ (80044fc <TIM_Base_SetConfig+0xfc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d108      	bne.n	800444a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800443e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a28      	ldr	r2, [pc, #160]	@ (80044f0 <TIM_Base_SetConfig+0xf0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01b      	beq.n	800448a <TIM_Base_SetConfig+0x8a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004458:	d017      	beq.n	800448a <TIM_Base_SetConfig+0x8a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a25      	ldr	r2, [pc, #148]	@ (80044f4 <TIM_Base_SetConfig+0xf4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d013      	beq.n	800448a <TIM_Base_SetConfig+0x8a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a24      	ldr	r2, [pc, #144]	@ (80044f8 <TIM_Base_SetConfig+0xf8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00f      	beq.n	800448a <TIM_Base_SetConfig+0x8a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a23      	ldr	r2, [pc, #140]	@ (80044fc <TIM_Base_SetConfig+0xfc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00b      	beq.n	800448a <TIM_Base_SetConfig+0x8a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a22      	ldr	r2, [pc, #136]	@ (8004500 <TIM_Base_SetConfig+0x100>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d007      	beq.n	800448a <TIM_Base_SetConfig+0x8a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a21      	ldr	r2, [pc, #132]	@ (8004504 <TIM_Base_SetConfig+0x104>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d003      	beq.n	800448a <TIM_Base_SetConfig+0x8a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a20      	ldr	r2, [pc, #128]	@ (8004508 <TIM_Base_SetConfig+0x108>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d108      	bne.n	800449c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a0c      	ldr	r2, [pc, #48]	@ (80044f0 <TIM_Base_SetConfig+0xf0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d103      	bne.n	80044ca <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f043 0204 	orr.w	r2, r3, #4
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	601a      	str	r2, [r3, #0]
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40010000 	.word	0x40010000
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40000800 	.word	0x40000800
 80044fc:	40000c00 	.word	0x40000c00
 8004500:	40014000 	.word	0x40014000
 8004504:	40014400 	.word	0x40014400
 8004508:	40014800 	.word	0x40014800

0800450c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f023 0201 	bic.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0303 	bic.w	r3, r3, #3
 8004542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f023 0302 	bic.w	r3, r3, #2
 8004554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a1c      	ldr	r2, [pc, #112]	@ (80045d4 <TIM_OC1_SetConfig+0xc8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d10c      	bne.n	8004582 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f023 0308 	bic.w	r3, r3, #8
 800456e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f023 0304 	bic.w	r3, r3, #4
 8004580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a13      	ldr	r2, [pc, #76]	@ (80045d4 <TIM_OC1_SetConfig+0xc8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d111      	bne.n	80045ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	621a      	str	r2, [r3, #32]
}
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	40010000 	.word	0x40010000

080045d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	f023 0210 	bic.w	r2, r3, #16
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800460e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f023 0320 	bic.w	r3, r3, #32
 8004622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a1e      	ldr	r2, [pc, #120]	@ (80046ac <TIM_OC2_SetConfig+0xd4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d10d      	bne.n	8004654 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800463e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a15      	ldr	r2, [pc, #84]	@ (80046ac <TIM_OC2_SetConfig+0xd4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d113      	bne.n	8004684 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004662:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800466a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	621a      	str	r2, [r3, #32]
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40010000 	.word	0x40010000

080046b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a1d      	ldr	r2, [pc, #116]	@ (8004780 <TIM_OC3_SetConfig+0xd0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d10d      	bne.n	800472a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a14      	ldr	r2, [pc, #80]	@ (8004780 <TIM_OC3_SetConfig+0xd0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d113      	bne.n	800475a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	621a      	str	r2, [r3, #32]
}
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	40010000 	.word	0x40010000

08004784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	031b      	lsls	r3, r3, #12
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a10      	ldr	r2, [pc, #64]	@ (8004820 <TIM_OC4_SetConfig+0x9c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d109      	bne.n	80047f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	019b      	lsls	r3, r3, #6
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	621a      	str	r2, [r3, #32]
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40010000 	.word	0x40010000

08004824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f023 0201 	bic.w	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800484e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f023 030a 	bic.w	r3, r3, #10
 8004860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	621a      	str	r2, [r3, #32]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004882:	b480      	push	{r7}
 8004884:	b087      	sub	sp, #28
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f023 0210 	bic.w	r2, r3, #16
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	031b      	lsls	r3, r3, #12
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	f043 0307 	orr.w	r3, r3, #7
 8004904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	609a      	str	r2, [r3, #8]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	021a      	lsls	r2, r3, #8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	431a      	orrs	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4313      	orrs	r3, r2
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	609a      	str	r2, [r3, #8]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	2201      	movs	r2, #1
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a1a      	ldr	r2, [r3, #32]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	43db      	mvns	r3, r3
 800497a:	401a      	ands	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a1a      	ldr	r2, [r3, #32]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	fa01 f303 	lsl.w	r3, r1, r3
 8004990:	431a      	orrs	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	621a      	str	r2, [r3, #32]
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
	...

080049a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e050      	b.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1c      	ldr	r2, [pc, #112]	@ (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d018      	beq.n	8004a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a08:	d013      	beq.n	8004a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a18      	ldr	r2, [pc, #96]	@ (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00e      	beq.n	8004a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a16      	ldr	r2, [pc, #88]	@ (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d009      	beq.n	8004a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a15      	ldr	r2, [pc, #84]	@ (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d004      	beq.n	8004a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a13      	ldr	r2, [pc, #76]	@ (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d10c      	bne.n	8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40010000 	.word	0x40010000
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800
 8004a78:	40000c00 	.word	0x40000c00
 8004a7c:	40014000 	.word	0x40014000

08004a80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e03d      	b.n	8004b18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e042      	b.n	8004be4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fc fb0e 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2224      	movs	r2, #36	@ 0x24
 8004b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fcef 	bl	8005574 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695a      	ldr	r2, [r3, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d112      	bne.n	8004c2c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_UART_Receive_IT+0x26>
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e00b      	b.n	8004c2e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 fad2 	bl	80051cc <UART_Start_Receive_IT>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	e000      	b.n	8004c2e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
  }
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b0ba      	sub	sp, #232	@ 0xe8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10f      	bne.n	8004c9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_UART_IRQHandler+0x66>
 8004c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fbae 	bl	80053f8 <UART_Receive_IT>
      return;
 8004c9c:	e273      	b.n	8005186 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 80de 	beq.w	8004e64 <HAL_UART_IRQHandler+0x22c>
 8004ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d106      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cb8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80d1 	beq.w	8004e64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_UART_IRQHandler+0xae>
 8004cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cde:	f043 0201 	orr.w	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <HAL_UART_IRQHandler+0xd2>
 8004cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d02:	f043 0202 	orr.w	r2, r3, #2
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00b      	beq.n	8004d2e <HAL_UART_IRQHandler+0xf6>
 8004d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d26:	f043 0204 	orr.w	r2, r3, #4
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d011      	beq.n	8004d5e <HAL_UART_IRQHandler+0x126>
 8004d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d105      	bne.n	8004d52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d56:	f043 0208 	orr.w	r2, r3, #8
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 820a 	beq.w	800517c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_UART_IRQHandler+0x14e>
 8004d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fb39 	bl	80053f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d90:	2b40      	cmp	r3, #64	@ 0x40
 8004d92:	bf0c      	ite	eq
 8004d94:	2301      	moveq	r3, #1
 8004d96:	2300      	movne	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <HAL_UART_IRQHandler+0x17a>
 8004daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d04f      	beq.n	8004e52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fa44 	bl	8005240 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc2:	2b40      	cmp	r3, #64	@ 0x40
 8004dc4:	d141      	bne.n	8004e4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3314      	adds	r3, #20
 8004dcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004de4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3314      	adds	r3, #20
 8004dee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004df2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004df6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004dfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1d9      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d013      	beq.n	8004e42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1e:	4a8a      	ldr	r2, [pc, #552]	@ (8005048 <HAL_UART_IRQHandler+0x410>)
 8004e20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fd fa7d 	bl	8002326 <HAL_DMA_Abort_IT>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d016      	beq.n	8004e60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e40:	e00e      	b.n	8004e60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f9ac 	bl	80051a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e48:	e00a      	b.n	8004e60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f9a8 	bl	80051a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e50:	e006      	b.n	8004e60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f9a4 	bl	80051a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e5e:	e18d      	b.n	800517c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e60:	bf00      	nop
    return;
 8004e62:	e18b      	b.n	800517c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	f040 8167 	bne.w	800513c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 8160 	beq.w	800513c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 8159 	beq.w	800513c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eaa:	2b40      	cmp	r3, #64	@ 0x40
 8004eac:	f040 80ce 	bne.w	800504c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ebc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80a9 	beq.w	8005018 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	f080 80a2 	bcs.w	8005018 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004eda:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ee6:	f000 8088 	beq.w	8004ffa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	330c      	adds	r3, #12
 8004f12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1d9      	bne.n	8004eea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3314      	adds	r3, #20
 8004f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e1      	bne.n	8004f36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3314      	adds	r3, #20
 8004f78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004fa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e3      	bne.n	8004f72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fca:	f023 0310 	bic.w	r3, r3, #16
 8004fce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004fdc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004fde:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fe2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e3      	bne.n	8004fb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fd f926 	bl	8002246 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005008:	b29b      	uxth	r3, r3
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	b29b      	uxth	r3, r3
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f8cf 	bl	80051b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005016:	e0b3      	b.n	8005180 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800501c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005020:	429a      	cmp	r2, r3
 8005022:	f040 80ad 	bne.w	8005180 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005030:	f040 80a6 	bne.w	8005180 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f8b7 	bl	80051b4 <HAL_UARTEx_RxEventCallback>
      return;
 8005046:	e09b      	b.n	8005180 <HAL_UART_IRQHandler+0x548>
 8005048:	08005307 	.word	0x08005307
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005054:	b29b      	uxth	r3, r3
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 808e 	beq.w	8005184 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8089 	beq.w	8005184 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	330c      	adds	r3, #12
 8005078:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005088:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	330c      	adds	r3, #12
 8005092:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005096:	647a      	str	r2, [r7, #68]	@ 0x44
 8005098:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800509c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e3      	bne.n	8005072 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3314      	adds	r3, #20
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	e853 3f00 	ldrex	r3, [r3]
 80050b8:	623b      	str	r3, [r7, #32]
   return(result);
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f023 0301 	bic.w	r3, r3, #1
 80050c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3314      	adds	r3, #20
 80050ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80050d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e3      	bne.n	80050aa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	330c      	adds	r3, #12
 80050f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	e853 3f00 	ldrex	r3, [r3]
 80050fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0310 	bic.w	r3, r3, #16
 8005106:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	330c      	adds	r3, #12
 8005110:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005114:	61fa      	str	r2, [r7, #28]
 8005116:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	69b9      	ldr	r1, [r7, #24]
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	617b      	str	r3, [r7, #20]
   return(result);
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e3      	bne.n	80050f0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800512e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f83d 	bl	80051b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800513a:	e023      	b.n	8005184 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800513c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005144:	2b00      	cmp	r3, #0
 8005146:	d009      	beq.n	800515c <HAL_UART_IRQHandler+0x524>
 8005148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800514c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f8e7 	bl	8005328 <UART_Transmit_IT>
    return;
 800515a:	e014      	b.n	8005186 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800515c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00e      	beq.n	8005186 <HAL_UART_IRQHandler+0x54e>
 8005168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800516c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f927 	bl	80053c8 <UART_EndTransmit_IT>
    return;
 800517a:	e004      	b.n	8005186 <HAL_UART_IRQHandler+0x54e>
    return;
 800517c:	bf00      	nop
 800517e:	e002      	b.n	8005186 <HAL_UART_IRQHandler+0x54e>
      return;
 8005180:	bf00      	nop
 8005182:	e000      	b.n	8005186 <HAL_UART_IRQHandler+0x54e>
      return;
 8005184:	bf00      	nop
  }
}
 8005186:	37e8      	adds	r7, #232	@ 0xe8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	4613      	mov	r3, r2
 80051d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	88fa      	ldrh	r2, [r7, #6]
 80051e4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	88fa      	ldrh	r2, [r7, #6]
 80051ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2222      	movs	r2, #34	@ 0x22
 80051f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005210:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695a      	ldr	r2, [r3, #20]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0201 	orr.w	r2, r2, #1
 8005220:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0220 	orr.w	r2, r2, #32
 8005230:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005240:	b480      	push	{r7}
 8005242:	b095      	sub	sp, #84	@ 0x54
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	330c      	adds	r3, #12
 800524e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005252:	e853 3f00 	ldrex	r3, [r3]
 8005256:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800525e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	330c      	adds	r3, #12
 8005266:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005268:	643a      	str	r2, [r7, #64]	@ 0x40
 800526a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800526e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005270:	e841 2300 	strex	r3, r2, [r1]
 8005274:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e5      	bne.n	8005248 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3314      	adds	r3, #20
 8005282:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	61fb      	str	r3, [r7, #28]
   return(result);
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f023 0301 	bic.w	r3, r3, #1
 8005292:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3314      	adds	r3, #20
 800529a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800529c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800529e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052a4:	e841 2300 	strex	r3, r2, [r1]
 80052a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e5      	bne.n	800527c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d119      	bne.n	80052ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	330c      	adds	r3, #12
 80052be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f023 0310 	bic.w	r3, r3, #16
 80052ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	330c      	adds	r3, #12
 80052d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052d8:	61ba      	str	r2, [r7, #24]
 80052da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	6979      	ldr	r1, [r7, #20]
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	613b      	str	r3, [r7, #16]
   return(result);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e5      	bne.n	80052b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052fa:	bf00      	nop
 80052fc:	3754      	adds	r7, #84	@ 0x54
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005312:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff ff40 	bl	80051a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005320:	bf00      	nop
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b21      	cmp	r3, #33	@ 0x21
 800533a:	d13e      	bne.n	80053ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005344:	d114      	bne.n	8005370 <UART_Transmit_IT+0x48>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d110      	bne.n	8005370 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005362:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	1c9a      	adds	r2, r3, #2
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	621a      	str	r2, [r3, #32]
 800536e:	e008      	b.n	8005382 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	1c59      	adds	r1, r3, #1
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	6211      	str	r1, [r2, #32]
 800537a:	781a      	ldrb	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29b      	uxth	r3, r3
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	4619      	mov	r1, r3
 8005390:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10f      	bne.n	80053b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	e000      	b.n	80053bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053ba:	2302      	movs	r3, #2
  }
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7ff fecf 	bl	800518c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08c      	sub	sp, #48	@ 0x30
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005400:	2300      	movs	r3, #0
 8005402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b22      	cmp	r3, #34	@ 0x22
 8005412:	f040 80aa 	bne.w	800556a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800541e:	d115      	bne.n	800544c <UART_Receive_IT+0x54>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d111      	bne.n	800544c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	b29b      	uxth	r3, r3
 8005436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543a:	b29a      	uxth	r2, r3
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	629a      	str	r2, [r3, #40]	@ 0x28
 800544a:	e024      	b.n	8005496 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800545a:	d007      	beq.n	800546c <UART_Receive_IT+0x74>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <UART_Receive_IT+0x82>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	b2da      	uxtb	r2, r3
 8005474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	e008      	b.n	800548c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005486:	b2da      	uxtb	r2, r3
 8005488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800549a:	b29b      	uxth	r3, r3
 800549c:	3b01      	subs	r3, #1
 800549e:	b29b      	uxth	r3, r3
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	4619      	mov	r1, r3
 80054a4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d15d      	bne.n	8005566 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0220 	bic.w	r2, r2, #32
 80054b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695a      	ldr	r2, [r3, #20]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0201 	bic.w	r2, r2, #1
 80054d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d135      	bne.n	800555c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	330c      	adds	r3, #12
 80054fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	613b      	str	r3, [r7, #16]
   return(result);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f023 0310 	bic.w	r3, r3, #16
 800550c:	627b      	str	r3, [r7, #36]	@ 0x24
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	330c      	adds	r3, #12
 8005514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005516:	623a      	str	r2, [r7, #32]
 8005518:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	69f9      	ldr	r1, [r7, #28]
 800551c:	6a3a      	ldr	r2, [r7, #32]
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	61bb      	str	r3, [r7, #24]
   return(result);
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e5      	bne.n	80054f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	2b10      	cmp	r3, #16
 8005536:	d10a      	bne.n	800554e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff fe2d 	bl	80051b4 <HAL_UARTEx_RxEventCallback>
 800555a:	e002      	b.n	8005562 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7fb fef3 	bl	8001348 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	e002      	b.n	800556c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	e000      	b.n	800556c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800556a:	2302      	movs	r3, #2
  }
}
 800556c:	4618      	mov	r0, r3
 800556e:	3730      	adds	r7, #48	@ 0x30
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005578:	b0c0      	sub	sp, #256	@ 0x100
 800557a:	af00      	add	r7, sp, #0
 800557c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800558c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005590:	68d9      	ldr	r1, [r3, #12]
 8005592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	ea40 0301 	orr.w	r3, r0, r1
 800559c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800559e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055cc:	f021 010c 	bic.w	r1, r1, #12
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055da:	430b      	orrs	r3, r1
 80055dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ee:	6999      	ldr	r1, [r3, #24]
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	ea40 0301 	orr.w	r3, r0, r1
 80055fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	4b8f      	ldr	r3, [pc, #572]	@ (8005840 <UART_SetConfig+0x2cc>)
 8005604:	429a      	cmp	r2, r3
 8005606:	d005      	beq.n	8005614 <UART_SetConfig+0xa0>
 8005608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	4b8d      	ldr	r3, [pc, #564]	@ (8005844 <UART_SetConfig+0x2d0>)
 8005610:	429a      	cmp	r2, r3
 8005612:	d104      	bne.n	800561e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005614:	f7fe f9a6 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 8005618:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800561c:	e003      	b.n	8005626 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800561e:	f7fe f98d 	bl	800393c <HAL_RCC_GetPCLK1Freq>
 8005622:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005630:	f040 810c 	bne.w	800584c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005638:	2200      	movs	r2, #0
 800563a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800563e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005642:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005646:	4622      	mov	r2, r4
 8005648:	462b      	mov	r3, r5
 800564a:	1891      	adds	r1, r2, r2
 800564c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800564e:	415b      	adcs	r3, r3
 8005650:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005652:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005656:	4621      	mov	r1, r4
 8005658:	eb12 0801 	adds.w	r8, r2, r1
 800565c:	4629      	mov	r1, r5
 800565e:	eb43 0901 	adc.w	r9, r3, r1
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800566e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005676:	4690      	mov	r8, r2
 8005678:	4699      	mov	r9, r3
 800567a:	4623      	mov	r3, r4
 800567c:	eb18 0303 	adds.w	r3, r8, r3
 8005680:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005684:	462b      	mov	r3, r5
 8005686:	eb49 0303 	adc.w	r3, r9, r3
 800568a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800569a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800569e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056a2:	460b      	mov	r3, r1
 80056a4:	18db      	adds	r3, r3, r3
 80056a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80056a8:	4613      	mov	r3, r2
 80056aa:	eb42 0303 	adc.w	r3, r2, r3
 80056ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80056b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056b8:	f7fa fde2 	bl	8000280 <__aeabi_uldivmod>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4b61      	ldr	r3, [pc, #388]	@ (8005848 <UART_SetConfig+0x2d4>)
 80056c2:	fba3 2302 	umull	r2, r3, r3, r2
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	011c      	lsls	r4, r3, #4
 80056ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056dc:	4642      	mov	r2, r8
 80056de:	464b      	mov	r3, r9
 80056e0:	1891      	adds	r1, r2, r2
 80056e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056e4:	415b      	adcs	r3, r3
 80056e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056ec:	4641      	mov	r1, r8
 80056ee:	eb12 0a01 	adds.w	sl, r2, r1
 80056f2:	4649      	mov	r1, r9
 80056f4:	eb43 0b01 	adc.w	fp, r3, r1
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	f04f 0300 	mov.w	r3, #0
 8005700:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005704:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005708:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800570c:	4692      	mov	sl, r2
 800570e:	469b      	mov	fp, r3
 8005710:	4643      	mov	r3, r8
 8005712:	eb1a 0303 	adds.w	r3, sl, r3
 8005716:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800571a:	464b      	mov	r3, r9
 800571c:	eb4b 0303 	adc.w	r3, fp, r3
 8005720:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005730:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005734:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005738:	460b      	mov	r3, r1
 800573a:	18db      	adds	r3, r3, r3
 800573c:	643b      	str	r3, [r7, #64]	@ 0x40
 800573e:	4613      	mov	r3, r2
 8005740:	eb42 0303 	adc.w	r3, r2, r3
 8005744:	647b      	str	r3, [r7, #68]	@ 0x44
 8005746:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800574a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800574e:	f7fa fd97 	bl	8000280 <__aeabi_uldivmod>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4611      	mov	r1, r2
 8005758:	4b3b      	ldr	r3, [pc, #236]	@ (8005848 <UART_SetConfig+0x2d4>)
 800575a:	fba3 2301 	umull	r2, r3, r3, r1
 800575e:	095b      	lsrs	r3, r3, #5
 8005760:	2264      	movs	r2, #100	@ 0x64
 8005762:	fb02 f303 	mul.w	r3, r2, r3
 8005766:	1acb      	subs	r3, r1, r3
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800576e:	4b36      	ldr	r3, [pc, #216]	@ (8005848 <UART_SetConfig+0x2d4>)
 8005770:	fba3 2302 	umull	r2, r3, r3, r2
 8005774:	095b      	lsrs	r3, r3, #5
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800577c:	441c      	add	r4, r3
 800577e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005782:	2200      	movs	r2, #0
 8005784:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005788:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800578c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005790:	4642      	mov	r2, r8
 8005792:	464b      	mov	r3, r9
 8005794:	1891      	adds	r1, r2, r2
 8005796:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005798:	415b      	adcs	r3, r3
 800579a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800579c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80057a0:	4641      	mov	r1, r8
 80057a2:	1851      	adds	r1, r2, r1
 80057a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80057a6:	4649      	mov	r1, r9
 80057a8:	414b      	adcs	r3, r1
 80057aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057b8:	4659      	mov	r1, fp
 80057ba:	00cb      	lsls	r3, r1, #3
 80057bc:	4651      	mov	r1, sl
 80057be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057c2:	4651      	mov	r1, sl
 80057c4:	00ca      	lsls	r2, r1, #3
 80057c6:	4610      	mov	r0, r2
 80057c8:	4619      	mov	r1, r3
 80057ca:	4603      	mov	r3, r0
 80057cc:	4642      	mov	r2, r8
 80057ce:	189b      	adds	r3, r3, r2
 80057d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057d4:	464b      	mov	r3, r9
 80057d6:	460a      	mov	r2, r1
 80057d8:	eb42 0303 	adc.w	r3, r2, r3
 80057dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057f4:	460b      	mov	r3, r1
 80057f6:	18db      	adds	r3, r3, r3
 80057f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057fa:	4613      	mov	r3, r2
 80057fc:	eb42 0303 	adc.w	r3, r2, r3
 8005800:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005802:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005806:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800580a:	f7fa fd39 	bl	8000280 <__aeabi_uldivmod>
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	4b0d      	ldr	r3, [pc, #52]	@ (8005848 <UART_SetConfig+0x2d4>)
 8005814:	fba3 1302 	umull	r1, r3, r3, r2
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	2164      	movs	r1, #100	@ 0x64
 800581c:	fb01 f303 	mul.w	r3, r1, r3
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	3332      	adds	r3, #50	@ 0x32
 8005826:	4a08      	ldr	r2, [pc, #32]	@ (8005848 <UART_SetConfig+0x2d4>)
 8005828:	fba2 2303 	umull	r2, r3, r2, r3
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	f003 0207 	and.w	r2, r3, #7
 8005832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4422      	add	r2, r4
 800583a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800583c:	e106      	b.n	8005a4c <UART_SetConfig+0x4d8>
 800583e:	bf00      	nop
 8005840:	40011000 	.word	0x40011000
 8005844:	40011400 	.word	0x40011400
 8005848:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800584c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005850:	2200      	movs	r2, #0
 8005852:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005856:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800585a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800585e:	4642      	mov	r2, r8
 8005860:	464b      	mov	r3, r9
 8005862:	1891      	adds	r1, r2, r2
 8005864:	6239      	str	r1, [r7, #32]
 8005866:	415b      	adcs	r3, r3
 8005868:	627b      	str	r3, [r7, #36]	@ 0x24
 800586a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800586e:	4641      	mov	r1, r8
 8005870:	1854      	adds	r4, r2, r1
 8005872:	4649      	mov	r1, r9
 8005874:	eb43 0501 	adc.w	r5, r3, r1
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	00eb      	lsls	r3, r5, #3
 8005882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005886:	00e2      	lsls	r2, r4, #3
 8005888:	4614      	mov	r4, r2
 800588a:	461d      	mov	r5, r3
 800588c:	4643      	mov	r3, r8
 800588e:	18e3      	adds	r3, r4, r3
 8005890:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005894:	464b      	mov	r3, r9
 8005896:	eb45 0303 	adc.w	r3, r5, r3
 800589a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800589e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058ba:	4629      	mov	r1, r5
 80058bc:	008b      	lsls	r3, r1, #2
 80058be:	4621      	mov	r1, r4
 80058c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058c4:	4621      	mov	r1, r4
 80058c6:	008a      	lsls	r2, r1, #2
 80058c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058cc:	f7fa fcd8 	bl	8000280 <__aeabi_uldivmod>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4b60      	ldr	r3, [pc, #384]	@ (8005a58 <UART_SetConfig+0x4e4>)
 80058d6:	fba3 2302 	umull	r2, r3, r3, r2
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	011c      	lsls	r4, r3, #4
 80058de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058f0:	4642      	mov	r2, r8
 80058f2:	464b      	mov	r3, r9
 80058f4:	1891      	adds	r1, r2, r2
 80058f6:	61b9      	str	r1, [r7, #24]
 80058f8:	415b      	adcs	r3, r3
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005900:	4641      	mov	r1, r8
 8005902:	1851      	adds	r1, r2, r1
 8005904:	6139      	str	r1, [r7, #16]
 8005906:	4649      	mov	r1, r9
 8005908:	414b      	adcs	r3, r1
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005918:	4659      	mov	r1, fp
 800591a:	00cb      	lsls	r3, r1, #3
 800591c:	4651      	mov	r1, sl
 800591e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005922:	4651      	mov	r1, sl
 8005924:	00ca      	lsls	r2, r1, #3
 8005926:	4610      	mov	r0, r2
 8005928:	4619      	mov	r1, r3
 800592a:	4603      	mov	r3, r0
 800592c:	4642      	mov	r2, r8
 800592e:	189b      	adds	r3, r3, r2
 8005930:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005934:	464b      	mov	r3, r9
 8005936:	460a      	mov	r2, r1
 8005938:	eb42 0303 	adc.w	r3, r2, r3
 800593c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	67bb      	str	r3, [r7, #120]	@ 0x78
 800594a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005958:	4649      	mov	r1, r9
 800595a:	008b      	lsls	r3, r1, #2
 800595c:	4641      	mov	r1, r8
 800595e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005962:	4641      	mov	r1, r8
 8005964:	008a      	lsls	r2, r1, #2
 8005966:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800596a:	f7fa fc89 	bl	8000280 <__aeabi_uldivmod>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4611      	mov	r1, r2
 8005974:	4b38      	ldr	r3, [pc, #224]	@ (8005a58 <UART_SetConfig+0x4e4>)
 8005976:	fba3 2301 	umull	r2, r3, r3, r1
 800597a:	095b      	lsrs	r3, r3, #5
 800597c:	2264      	movs	r2, #100	@ 0x64
 800597e:	fb02 f303 	mul.w	r3, r2, r3
 8005982:	1acb      	subs	r3, r1, r3
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	3332      	adds	r3, #50	@ 0x32
 8005988:	4a33      	ldr	r2, [pc, #204]	@ (8005a58 <UART_SetConfig+0x4e4>)
 800598a:	fba2 2303 	umull	r2, r3, r2, r3
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005994:	441c      	add	r4, r3
 8005996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800599a:	2200      	movs	r2, #0
 800599c:	673b      	str	r3, [r7, #112]	@ 0x70
 800599e:	677a      	str	r2, [r7, #116]	@ 0x74
 80059a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059a4:	4642      	mov	r2, r8
 80059a6:	464b      	mov	r3, r9
 80059a8:	1891      	adds	r1, r2, r2
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	415b      	adcs	r3, r3
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059b4:	4641      	mov	r1, r8
 80059b6:	1851      	adds	r1, r2, r1
 80059b8:	6039      	str	r1, [r7, #0]
 80059ba:	4649      	mov	r1, r9
 80059bc:	414b      	adcs	r3, r1
 80059be:	607b      	str	r3, [r7, #4]
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059cc:	4659      	mov	r1, fp
 80059ce:	00cb      	lsls	r3, r1, #3
 80059d0:	4651      	mov	r1, sl
 80059d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059d6:	4651      	mov	r1, sl
 80059d8:	00ca      	lsls	r2, r1, #3
 80059da:	4610      	mov	r0, r2
 80059dc:	4619      	mov	r1, r3
 80059de:	4603      	mov	r3, r0
 80059e0:	4642      	mov	r2, r8
 80059e2:	189b      	adds	r3, r3, r2
 80059e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059e6:	464b      	mov	r3, r9
 80059e8:	460a      	mov	r2, r1
 80059ea:	eb42 0303 	adc.w	r3, r2, r3
 80059ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80059fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a08:	4649      	mov	r1, r9
 8005a0a:	008b      	lsls	r3, r1, #2
 8005a0c:	4641      	mov	r1, r8
 8005a0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a12:	4641      	mov	r1, r8
 8005a14:	008a      	lsls	r2, r1, #2
 8005a16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a1a:	f7fa fc31 	bl	8000280 <__aeabi_uldivmod>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4b0d      	ldr	r3, [pc, #52]	@ (8005a58 <UART_SetConfig+0x4e4>)
 8005a24:	fba3 1302 	umull	r1, r3, r3, r2
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	2164      	movs	r1, #100	@ 0x64
 8005a2c:	fb01 f303 	mul.w	r3, r1, r3
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	3332      	adds	r3, #50	@ 0x32
 8005a36:	4a08      	ldr	r2, [pc, #32]	@ (8005a58 <UART_SetConfig+0x4e4>)
 8005a38:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	f003 020f 	and.w	r2, r3, #15
 8005a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4422      	add	r2, r4
 8005a4a:	609a      	str	r2, [r3, #8]
}
 8005a4c:	bf00      	nop
 8005a4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a52:	46bd      	mov	sp, r7
 8005a54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a58:	51eb851f 	.word	0x51eb851f

08005a5c <std>:
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	b510      	push	{r4, lr}
 8005a60:	4604      	mov	r4, r0
 8005a62:	e9c0 3300 	strd	r3, r3, [r0]
 8005a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a6a:	6083      	str	r3, [r0, #8]
 8005a6c:	8181      	strh	r1, [r0, #12]
 8005a6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a70:	81c2      	strh	r2, [r0, #14]
 8005a72:	6183      	str	r3, [r0, #24]
 8005a74:	4619      	mov	r1, r3
 8005a76:	2208      	movs	r2, #8
 8005a78:	305c      	adds	r0, #92	@ 0x5c
 8005a7a:	f000 f906 	bl	8005c8a <memset>
 8005a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab4 <std+0x58>)
 8005a80:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a82:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <std+0x5c>)
 8005a84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <std+0x60>)
 8005a88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac0 <std+0x64>)
 8005a8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac4 <std+0x68>)
 8005a90:	6224      	str	r4, [r4, #32]
 8005a92:	429c      	cmp	r4, r3
 8005a94:	d006      	beq.n	8005aa4 <std+0x48>
 8005a96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a9a:	4294      	cmp	r4, r2
 8005a9c:	d002      	beq.n	8005aa4 <std+0x48>
 8005a9e:	33d0      	adds	r3, #208	@ 0xd0
 8005aa0:	429c      	cmp	r4, r3
 8005aa2:	d105      	bne.n	8005ab0 <std+0x54>
 8005aa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aac:	f000 b966 	b.w	8005d7c <__retarget_lock_init_recursive>
 8005ab0:	bd10      	pop	{r4, pc}
 8005ab2:	bf00      	nop
 8005ab4:	08005c05 	.word	0x08005c05
 8005ab8:	08005c27 	.word	0x08005c27
 8005abc:	08005c5f 	.word	0x08005c5f
 8005ac0:	08005c83 	.word	0x08005c83
 8005ac4:	2000036c 	.word	0x2000036c

08005ac8 <stdio_exit_handler>:
 8005ac8:	4a02      	ldr	r2, [pc, #8]	@ (8005ad4 <stdio_exit_handler+0xc>)
 8005aca:	4903      	ldr	r1, [pc, #12]	@ (8005ad8 <stdio_exit_handler+0x10>)
 8005acc:	4803      	ldr	r0, [pc, #12]	@ (8005adc <stdio_exit_handler+0x14>)
 8005ace:	f000 b869 	b.w	8005ba4 <_fwalk_sglue>
 8005ad2:	bf00      	nop
 8005ad4:	2000007c 	.word	0x2000007c
 8005ad8:	08006619 	.word	0x08006619
 8005adc:	2000008c 	.word	0x2000008c

08005ae0 <cleanup_stdio>:
 8005ae0:	6841      	ldr	r1, [r0, #4]
 8005ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8005b14 <cleanup_stdio+0x34>)
 8005ae4:	4299      	cmp	r1, r3
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	4604      	mov	r4, r0
 8005aea:	d001      	beq.n	8005af0 <cleanup_stdio+0x10>
 8005aec:	f000 fd94 	bl	8006618 <_fflush_r>
 8005af0:	68a1      	ldr	r1, [r4, #8]
 8005af2:	4b09      	ldr	r3, [pc, #36]	@ (8005b18 <cleanup_stdio+0x38>)
 8005af4:	4299      	cmp	r1, r3
 8005af6:	d002      	beq.n	8005afe <cleanup_stdio+0x1e>
 8005af8:	4620      	mov	r0, r4
 8005afa:	f000 fd8d 	bl	8006618 <_fflush_r>
 8005afe:	68e1      	ldr	r1, [r4, #12]
 8005b00:	4b06      	ldr	r3, [pc, #24]	@ (8005b1c <cleanup_stdio+0x3c>)
 8005b02:	4299      	cmp	r1, r3
 8005b04:	d004      	beq.n	8005b10 <cleanup_stdio+0x30>
 8005b06:	4620      	mov	r0, r4
 8005b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b0c:	f000 bd84 	b.w	8006618 <_fflush_r>
 8005b10:	bd10      	pop	{r4, pc}
 8005b12:	bf00      	nop
 8005b14:	2000036c 	.word	0x2000036c
 8005b18:	200003d4 	.word	0x200003d4
 8005b1c:	2000043c 	.word	0x2000043c

08005b20 <global_stdio_init.part.0>:
 8005b20:	b510      	push	{r4, lr}
 8005b22:	4b0b      	ldr	r3, [pc, #44]	@ (8005b50 <global_stdio_init.part.0+0x30>)
 8005b24:	4c0b      	ldr	r4, [pc, #44]	@ (8005b54 <global_stdio_init.part.0+0x34>)
 8005b26:	4a0c      	ldr	r2, [pc, #48]	@ (8005b58 <global_stdio_init.part.0+0x38>)
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2104      	movs	r1, #4
 8005b30:	f7ff ff94 	bl	8005a5c <std>
 8005b34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b38:	2201      	movs	r2, #1
 8005b3a:	2109      	movs	r1, #9
 8005b3c:	f7ff ff8e 	bl	8005a5c <std>
 8005b40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b44:	2202      	movs	r2, #2
 8005b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b4a:	2112      	movs	r1, #18
 8005b4c:	f7ff bf86 	b.w	8005a5c <std>
 8005b50:	200004a4 	.word	0x200004a4
 8005b54:	2000036c 	.word	0x2000036c
 8005b58:	08005ac9 	.word	0x08005ac9

08005b5c <__sfp_lock_acquire>:
 8005b5c:	4801      	ldr	r0, [pc, #4]	@ (8005b64 <__sfp_lock_acquire+0x8>)
 8005b5e:	f000 b90e 	b.w	8005d7e <__retarget_lock_acquire_recursive>
 8005b62:	bf00      	nop
 8005b64:	200004ad 	.word	0x200004ad

08005b68 <__sfp_lock_release>:
 8005b68:	4801      	ldr	r0, [pc, #4]	@ (8005b70 <__sfp_lock_release+0x8>)
 8005b6a:	f000 b909 	b.w	8005d80 <__retarget_lock_release_recursive>
 8005b6e:	bf00      	nop
 8005b70:	200004ad 	.word	0x200004ad

08005b74 <__sinit>:
 8005b74:	b510      	push	{r4, lr}
 8005b76:	4604      	mov	r4, r0
 8005b78:	f7ff fff0 	bl	8005b5c <__sfp_lock_acquire>
 8005b7c:	6a23      	ldr	r3, [r4, #32]
 8005b7e:	b11b      	cbz	r3, 8005b88 <__sinit+0x14>
 8005b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b84:	f7ff bff0 	b.w	8005b68 <__sfp_lock_release>
 8005b88:	4b04      	ldr	r3, [pc, #16]	@ (8005b9c <__sinit+0x28>)
 8005b8a:	6223      	str	r3, [r4, #32]
 8005b8c:	4b04      	ldr	r3, [pc, #16]	@ (8005ba0 <__sinit+0x2c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f5      	bne.n	8005b80 <__sinit+0xc>
 8005b94:	f7ff ffc4 	bl	8005b20 <global_stdio_init.part.0>
 8005b98:	e7f2      	b.n	8005b80 <__sinit+0xc>
 8005b9a:	bf00      	nop
 8005b9c:	08005ae1 	.word	0x08005ae1
 8005ba0:	200004a4 	.word	0x200004a4

08005ba4 <_fwalk_sglue>:
 8005ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba8:	4607      	mov	r7, r0
 8005baa:	4688      	mov	r8, r1
 8005bac:	4614      	mov	r4, r2
 8005bae:	2600      	movs	r6, #0
 8005bb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bb4:	f1b9 0901 	subs.w	r9, r9, #1
 8005bb8:	d505      	bpl.n	8005bc6 <_fwalk_sglue+0x22>
 8005bba:	6824      	ldr	r4, [r4, #0]
 8005bbc:	2c00      	cmp	r4, #0
 8005bbe:	d1f7      	bne.n	8005bb0 <_fwalk_sglue+0xc>
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bc6:	89ab      	ldrh	r3, [r5, #12]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d907      	bls.n	8005bdc <_fwalk_sglue+0x38>
 8005bcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	d003      	beq.n	8005bdc <_fwalk_sglue+0x38>
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	47c0      	blx	r8
 8005bda:	4306      	orrs	r6, r0
 8005bdc:	3568      	adds	r5, #104	@ 0x68
 8005bde:	e7e9      	b.n	8005bb4 <_fwalk_sglue+0x10>

08005be0 <iprintf>:
 8005be0:	b40f      	push	{r0, r1, r2, r3}
 8005be2:	b507      	push	{r0, r1, r2, lr}
 8005be4:	4906      	ldr	r1, [pc, #24]	@ (8005c00 <iprintf+0x20>)
 8005be6:	ab04      	add	r3, sp, #16
 8005be8:	6808      	ldr	r0, [r1, #0]
 8005bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bee:	6881      	ldr	r1, [r0, #8]
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	f000 f9e9 	bl	8005fc8 <_vfiprintf_r>
 8005bf6:	b003      	add	sp, #12
 8005bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bfc:	b004      	add	sp, #16
 8005bfe:	4770      	bx	lr
 8005c00:	20000088 	.word	0x20000088

08005c04 <__sread>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	460c      	mov	r4, r1
 8005c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c0c:	f000 f868 	bl	8005ce0 <_read_r>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	bfab      	itete	ge
 8005c14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c16:	89a3      	ldrhlt	r3, [r4, #12]
 8005c18:	181b      	addge	r3, r3, r0
 8005c1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c1e:	bfac      	ite	ge
 8005c20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c22:	81a3      	strhlt	r3, [r4, #12]
 8005c24:	bd10      	pop	{r4, pc}

08005c26 <__swrite>:
 8005c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c2a:	461f      	mov	r7, r3
 8005c2c:	898b      	ldrh	r3, [r1, #12]
 8005c2e:	05db      	lsls	r3, r3, #23
 8005c30:	4605      	mov	r5, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	4616      	mov	r6, r2
 8005c36:	d505      	bpl.n	8005c44 <__swrite+0x1e>
 8005c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f000 f83c 	bl	8005cbc <_lseek_r>
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	4632      	mov	r2, r6
 8005c52:	463b      	mov	r3, r7
 8005c54:	4628      	mov	r0, r5
 8005c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5a:	f000 b853 	b.w	8005d04 <_write_r>

08005c5e <__sseek>:
 8005c5e:	b510      	push	{r4, lr}
 8005c60:	460c      	mov	r4, r1
 8005c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c66:	f000 f829 	bl	8005cbc <_lseek_r>
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	bf15      	itete	ne
 8005c70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c7a:	81a3      	strheq	r3, [r4, #12]
 8005c7c:	bf18      	it	ne
 8005c7e:	81a3      	strhne	r3, [r4, #12]
 8005c80:	bd10      	pop	{r4, pc}

08005c82 <__sclose>:
 8005c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c86:	f000 b809 	b.w	8005c9c <_close_r>

08005c8a <memset>:
 8005c8a:	4402      	add	r2, r0
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d100      	bne.n	8005c94 <memset+0xa>
 8005c92:	4770      	bx	lr
 8005c94:	f803 1b01 	strb.w	r1, [r3], #1
 8005c98:	e7f9      	b.n	8005c8e <memset+0x4>
	...

08005c9c <_close_r>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	4d06      	ldr	r5, [pc, #24]	@ (8005cb8 <_close_r+0x1c>)
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	602b      	str	r3, [r5, #0]
 8005ca8:	f7fa fef7 	bl	8000a9a <_close>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d102      	bne.n	8005cb6 <_close_r+0x1a>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	b103      	cbz	r3, 8005cb6 <_close_r+0x1a>
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	200004a8 	.word	0x200004a8

08005cbc <_lseek_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4d07      	ldr	r5, [pc, #28]	@ (8005cdc <_lseek_r+0x20>)
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	4608      	mov	r0, r1
 8005cc4:	4611      	mov	r1, r2
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	602a      	str	r2, [r5, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f7fa ff0c 	bl	8000ae8 <_lseek>
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	d102      	bne.n	8005cda <_lseek_r+0x1e>
 8005cd4:	682b      	ldr	r3, [r5, #0]
 8005cd6:	b103      	cbz	r3, 8005cda <_lseek_r+0x1e>
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	bd38      	pop	{r3, r4, r5, pc}
 8005cdc:	200004a8 	.word	0x200004a8

08005ce0 <_read_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4d07      	ldr	r5, [pc, #28]	@ (8005d00 <_read_r+0x20>)
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	4608      	mov	r0, r1
 8005ce8:	4611      	mov	r1, r2
 8005cea:	2200      	movs	r2, #0
 8005cec:	602a      	str	r2, [r5, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f7fa fe9a 	bl	8000a28 <_read>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d102      	bne.n	8005cfe <_read_r+0x1e>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	b103      	cbz	r3, 8005cfe <_read_r+0x1e>
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	bd38      	pop	{r3, r4, r5, pc}
 8005d00:	200004a8 	.word	0x200004a8

08005d04 <_write_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4d07      	ldr	r5, [pc, #28]	@ (8005d24 <_write_r+0x20>)
 8005d08:	4604      	mov	r4, r0
 8005d0a:	4608      	mov	r0, r1
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	2200      	movs	r2, #0
 8005d10:	602a      	str	r2, [r5, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f7fa fea5 	bl	8000a62 <_write>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_write_r+0x1e>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_write_r+0x1e>
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	200004a8 	.word	0x200004a8

08005d28 <__errno>:
 8005d28:	4b01      	ldr	r3, [pc, #4]	@ (8005d30 <__errno+0x8>)
 8005d2a:	6818      	ldr	r0, [r3, #0]
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	20000088 	.word	0x20000088

08005d34 <__libc_init_array>:
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	4d0d      	ldr	r5, [pc, #52]	@ (8005d6c <__libc_init_array+0x38>)
 8005d38:	4c0d      	ldr	r4, [pc, #52]	@ (8005d70 <__libc_init_array+0x3c>)
 8005d3a:	1b64      	subs	r4, r4, r5
 8005d3c:	10a4      	asrs	r4, r4, #2
 8005d3e:	2600      	movs	r6, #0
 8005d40:	42a6      	cmp	r6, r4
 8005d42:	d109      	bne.n	8005d58 <__libc_init_array+0x24>
 8005d44:	4d0b      	ldr	r5, [pc, #44]	@ (8005d74 <__libc_init_array+0x40>)
 8005d46:	4c0c      	ldr	r4, [pc, #48]	@ (8005d78 <__libc_init_array+0x44>)
 8005d48:	f000 fdb6 	bl	80068b8 <_init>
 8005d4c:	1b64      	subs	r4, r4, r5
 8005d4e:	10a4      	asrs	r4, r4, #2
 8005d50:	2600      	movs	r6, #0
 8005d52:	42a6      	cmp	r6, r4
 8005d54:	d105      	bne.n	8005d62 <__libc_init_array+0x2e>
 8005d56:	bd70      	pop	{r4, r5, r6, pc}
 8005d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d5c:	4798      	blx	r3
 8005d5e:	3601      	adds	r6, #1
 8005d60:	e7ee      	b.n	8005d40 <__libc_init_array+0xc>
 8005d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d66:	4798      	blx	r3
 8005d68:	3601      	adds	r6, #1
 8005d6a:	e7f2      	b.n	8005d52 <__libc_init_array+0x1e>
 8005d6c:	08006944 	.word	0x08006944
 8005d70:	08006944 	.word	0x08006944
 8005d74:	08006944 	.word	0x08006944
 8005d78:	08006948 	.word	0x08006948

08005d7c <__retarget_lock_init_recursive>:
 8005d7c:	4770      	bx	lr

08005d7e <__retarget_lock_acquire_recursive>:
 8005d7e:	4770      	bx	lr

08005d80 <__retarget_lock_release_recursive>:
 8005d80:	4770      	bx	lr
	...

08005d84 <_free_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	4605      	mov	r5, r0
 8005d88:	2900      	cmp	r1, #0
 8005d8a:	d041      	beq.n	8005e10 <_free_r+0x8c>
 8005d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d90:	1f0c      	subs	r4, r1, #4
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	bfb8      	it	lt
 8005d96:	18e4      	addlt	r4, r4, r3
 8005d98:	f000 f8e0 	bl	8005f5c <__malloc_lock>
 8005d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005e14 <_free_r+0x90>)
 8005d9e:	6813      	ldr	r3, [r2, #0]
 8005da0:	b933      	cbnz	r3, 8005db0 <_free_r+0x2c>
 8005da2:	6063      	str	r3, [r4, #4]
 8005da4:	6014      	str	r4, [r2, #0]
 8005da6:	4628      	mov	r0, r5
 8005da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dac:	f000 b8dc 	b.w	8005f68 <__malloc_unlock>
 8005db0:	42a3      	cmp	r3, r4
 8005db2:	d908      	bls.n	8005dc6 <_free_r+0x42>
 8005db4:	6820      	ldr	r0, [r4, #0]
 8005db6:	1821      	adds	r1, r4, r0
 8005db8:	428b      	cmp	r3, r1
 8005dba:	bf01      	itttt	eq
 8005dbc:	6819      	ldreq	r1, [r3, #0]
 8005dbe:	685b      	ldreq	r3, [r3, #4]
 8005dc0:	1809      	addeq	r1, r1, r0
 8005dc2:	6021      	streq	r1, [r4, #0]
 8005dc4:	e7ed      	b.n	8005da2 <_free_r+0x1e>
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	b10b      	cbz	r3, 8005dd0 <_free_r+0x4c>
 8005dcc:	42a3      	cmp	r3, r4
 8005dce:	d9fa      	bls.n	8005dc6 <_free_r+0x42>
 8005dd0:	6811      	ldr	r1, [r2, #0]
 8005dd2:	1850      	adds	r0, r2, r1
 8005dd4:	42a0      	cmp	r0, r4
 8005dd6:	d10b      	bne.n	8005df0 <_free_r+0x6c>
 8005dd8:	6820      	ldr	r0, [r4, #0]
 8005dda:	4401      	add	r1, r0
 8005ddc:	1850      	adds	r0, r2, r1
 8005dde:	4283      	cmp	r3, r0
 8005de0:	6011      	str	r1, [r2, #0]
 8005de2:	d1e0      	bne.n	8005da6 <_free_r+0x22>
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	6053      	str	r3, [r2, #4]
 8005dea:	4408      	add	r0, r1
 8005dec:	6010      	str	r0, [r2, #0]
 8005dee:	e7da      	b.n	8005da6 <_free_r+0x22>
 8005df0:	d902      	bls.n	8005df8 <_free_r+0x74>
 8005df2:	230c      	movs	r3, #12
 8005df4:	602b      	str	r3, [r5, #0]
 8005df6:	e7d6      	b.n	8005da6 <_free_r+0x22>
 8005df8:	6820      	ldr	r0, [r4, #0]
 8005dfa:	1821      	adds	r1, r4, r0
 8005dfc:	428b      	cmp	r3, r1
 8005dfe:	bf04      	itt	eq
 8005e00:	6819      	ldreq	r1, [r3, #0]
 8005e02:	685b      	ldreq	r3, [r3, #4]
 8005e04:	6063      	str	r3, [r4, #4]
 8005e06:	bf04      	itt	eq
 8005e08:	1809      	addeq	r1, r1, r0
 8005e0a:	6021      	streq	r1, [r4, #0]
 8005e0c:	6054      	str	r4, [r2, #4]
 8005e0e:	e7ca      	b.n	8005da6 <_free_r+0x22>
 8005e10:	bd38      	pop	{r3, r4, r5, pc}
 8005e12:	bf00      	nop
 8005e14:	200004b4 	.word	0x200004b4

08005e18 <sbrk_aligned>:
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	4e0f      	ldr	r6, [pc, #60]	@ (8005e58 <sbrk_aligned+0x40>)
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	6831      	ldr	r1, [r6, #0]
 8005e20:	4605      	mov	r5, r0
 8005e22:	b911      	cbnz	r1, 8005e2a <sbrk_aligned+0x12>
 8005e24:	f000 fcb4 	bl	8006790 <_sbrk_r>
 8005e28:	6030      	str	r0, [r6, #0]
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f000 fcaf 	bl	8006790 <_sbrk_r>
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	d103      	bne.n	8005e3e <sbrk_aligned+0x26>
 8005e36:	f04f 34ff 	mov.w	r4, #4294967295
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	bd70      	pop	{r4, r5, r6, pc}
 8005e3e:	1cc4      	adds	r4, r0, #3
 8005e40:	f024 0403 	bic.w	r4, r4, #3
 8005e44:	42a0      	cmp	r0, r4
 8005e46:	d0f8      	beq.n	8005e3a <sbrk_aligned+0x22>
 8005e48:	1a21      	subs	r1, r4, r0
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f000 fca0 	bl	8006790 <_sbrk_r>
 8005e50:	3001      	adds	r0, #1
 8005e52:	d1f2      	bne.n	8005e3a <sbrk_aligned+0x22>
 8005e54:	e7ef      	b.n	8005e36 <sbrk_aligned+0x1e>
 8005e56:	bf00      	nop
 8005e58:	200004b0 	.word	0x200004b0

08005e5c <_malloc_r>:
 8005e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e60:	1ccd      	adds	r5, r1, #3
 8005e62:	f025 0503 	bic.w	r5, r5, #3
 8005e66:	3508      	adds	r5, #8
 8005e68:	2d0c      	cmp	r5, #12
 8005e6a:	bf38      	it	cc
 8005e6c:	250c      	movcc	r5, #12
 8005e6e:	2d00      	cmp	r5, #0
 8005e70:	4606      	mov	r6, r0
 8005e72:	db01      	blt.n	8005e78 <_malloc_r+0x1c>
 8005e74:	42a9      	cmp	r1, r5
 8005e76:	d904      	bls.n	8005e82 <_malloc_r+0x26>
 8005e78:	230c      	movs	r3, #12
 8005e7a:	6033      	str	r3, [r6, #0]
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f58 <_malloc_r+0xfc>
 8005e86:	f000 f869 	bl	8005f5c <__malloc_lock>
 8005e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e8e:	461c      	mov	r4, r3
 8005e90:	bb44      	cbnz	r4, 8005ee4 <_malloc_r+0x88>
 8005e92:	4629      	mov	r1, r5
 8005e94:	4630      	mov	r0, r6
 8005e96:	f7ff ffbf 	bl	8005e18 <sbrk_aligned>
 8005e9a:	1c43      	adds	r3, r0, #1
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	d158      	bne.n	8005f52 <_malloc_r+0xf6>
 8005ea0:	f8d8 4000 	ldr.w	r4, [r8]
 8005ea4:	4627      	mov	r7, r4
 8005ea6:	2f00      	cmp	r7, #0
 8005ea8:	d143      	bne.n	8005f32 <_malloc_r+0xd6>
 8005eaa:	2c00      	cmp	r4, #0
 8005eac:	d04b      	beq.n	8005f46 <_malloc_r+0xea>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	eb04 0903 	add.w	r9, r4, r3
 8005eb8:	f000 fc6a 	bl	8006790 <_sbrk_r>
 8005ebc:	4581      	cmp	r9, r0
 8005ebe:	d142      	bne.n	8005f46 <_malloc_r+0xea>
 8005ec0:	6821      	ldr	r1, [r4, #0]
 8005ec2:	1a6d      	subs	r5, r5, r1
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f7ff ffa6 	bl	8005e18 <sbrk_aligned>
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d03a      	beq.n	8005f46 <_malloc_r+0xea>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	442b      	add	r3, r5
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	bb62      	cbnz	r2, 8005f38 <_malloc_r+0xdc>
 8005ede:	f8c8 7000 	str.w	r7, [r8]
 8005ee2:	e00f      	b.n	8005f04 <_malloc_r+0xa8>
 8005ee4:	6822      	ldr	r2, [r4, #0]
 8005ee6:	1b52      	subs	r2, r2, r5
 8005ee8:	d420      	bmi.n	8005f2c <_malloc_r+0xd0>
 8005eea:	2a0b      	cmp	r2, #11
 8005eec:	d917      	bls.n	8005f1e <_malloc_r+0xc2>
 8005eee:	1961      	adds	r1, r4, r5
 8005ef0:	42a3      	cmp	r3, r4
 8005ef2:	6025      	str	r5, [r4, #0]
 8005ef4:	bf18      	it	ne
 8005ef6:	6059      	strne	r1, [r3, #4]
 8005ef8:	6863      	ldr	r3, [r4, #4]
 8005efa:	bf08      	it	eq
 8005efc:	f8c8 1000 	streq.w	r1, [r8]
 8005f00:	5162      	str	r2, [r4, r5]
 8005f02:	604b      	str	r3, [r1, #4]
 8005f04:	4630      	mov	r0, r6
 8005f06:	f000 f82f 	bl	8005f68 <__malloc_unlock>
 8005f0a:	f104 000b 	add.w	r0, r4, #11
 8005f0e:	1d23      	adds	r3, r4, #4
 8005f10:	f020 0007 	bic.w	r0, r0, #7
 8005f14:	1ac2      	subs	r2, r0, r3
 8005f16:	bf1c      	itt	ne
 8005f18:	1a1b      	subne	r3, r3, r0
 8005f1a:	50a3      	strne	r3, [r4, r2]
 8005f1c:	e7af      	b.n	8005e7e <_malloc_r+0x22>
 8005f1e:	6862      	ldr	r2, [r4, #4]
 8005f20:	42a3      	cmp	r3, r4
 8005f22:	bf0c      	ite	eq
 8005f24:	f8c8 2000 	streq.w	r2, [r8]
 8005f28:	605a      	strne	r2, [r3, #4]
 8005f2a:	e7eb      	b.n	8005f04 <_malloc_r+0xa8>
 8005f2c:	4623      	mov	r3, r4
 8005f2e:	6864      	ldr	r4, [r4, #4]
 8005f30:	e7ae      	b.n	8005e90 <_malloc_r+0x34>
 8005f32:	463c      	mov	r4, r7
 8005f34:	687f      	ldr	r7, [r7, #4]
 8005f36:	e7b6      	b.n	8005ea6 <_malloc_r+0x4a>
 8005f38:	461a      	mov	r2, r3
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	d1fb      	bne.n	8005f38 <_malloc_r+0xdc>
 8005f40:	2300      	movs	r3, #0
 8005f42:	6053      	str	r3, [r2, #4]
 8005f44:	e7de      	b.n	8005f04 <_malloc_r+0xa8>
 8005f46:	230c      	movs	r3, #12
 8005f48:	6033      	str	r3, [r6, #0]
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	f000 f80c 	bl	8005f68 <__malloc_unlock>
 8005f50:	e794      	b.n	8005e7c <_malloc_r+0x20>
 8005f52:	6005      	str	r5, [r0, #0]
 8005f54:	e7d6      	b.n	8005f04 <_malloc_r+0xa8>
 8005f56:	bf00      	nop
 8005f58:	200004b4 	.word	0x200004b4

08005f5c <__malloc_lock>:
 8005f5c:	4801      	ldr	r0, [pc, #4]	@ (8005f64 <__malloc_lock+0x8>)
 8005f5e:	f7ff bf0e 	b.w	8005d7e <__retarget_lock_acquire_recursive>
 8005f62:	bf00      	nop
 8005f64:	200004ac 	.word	0x200004ac

08005f68 <__malloc_unlock>:
 8005f68:	4801      	ldr	r0, [pc, #4]	@ (8005f70 <__malloc_unlock+0x8>)
 8005f6a:	f7ff bf09 	b.w	8005d80 <__retarget_lock_release_recursive>
 8005f6e:	bf00      	nop
 8005f70:	200004ac 	.word	0x200004ac

08005f74 <__sfputc_r>:
 8005f74:	6893      	ldr	r3, [r2, #8]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	b410      	push	{r4}
 8005f7c:	6093      	str	r3, [r2, #8]
 8005f7e:	da08      	bge.n	8005f92 <__sfputc_r+0x1e>
 8005f80:	6994      	ldr	r4, [r2, #24]
 8005f82:	42a3      	cmp	r3, r4
 8005f84:	db01      	blt.n	8005f8a <__sfputc_r+0x16>
 8005f86:	290a      	cmp	r1, #10
 8005f88:	d103      	bne.n	8005f92 <__sfputc_r+0x1e>
 8005f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f8e:	f000 bb6b 	b.w	8006668 <__swbuf_r>
 8005f92:	6813      	ldr	r3, [r2, #0]
 8005f94:	1c58      	adds	r0, r3, #1
 8005f96:	6010      	str	r0, [r2, #0]
 8005f98:	7019      	strb	r1, [r3, #0]
 8005f9a:	4608      	mov	r0, r1
 8005f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <__sfputs_r>:
 8005fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa4:	4606      	mov	r6, r0
 8005fa6:	460f      	mov	r7, r1
 8005fa8:	4614      	mov	r4, r2
 8005faa:	18d5      	adds	r5, r2, r3
 8005fac:	42ac      	cmp	r4, r5
 8005fae:	d101      	bne.n	8005fb4 <__sfputs_r+0x12>
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	e007      	b.n	8005fc4 <__sfputs_r+0x22>
 8005fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb8:	463a      	mov	r2, r7
 8005fba:	4630      	mov	r0, r6
 8005fbc:	f7ff ffda 	bl	8005f74 <__sfputc_r>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	d1f3      	bne.n	8005fac <__sfputs_r+0xa>
 8005fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fc8 <_vfiprintf_r>:
 8005fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fcc:	460d      	mov	r5, r1
 8005fce:	b09d      	sub	sp, #116	@ 0x74
 8005fd0:	4614      	mov	r4, r2
 8005fd2:	4698      	mov	r8, r3
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	b118      	cbz	r0, 8005fe0 <_vfiprintf_r+0x18>
 8005fd8:	6a03      	ldr	r3, [r0, #32]
 8005fda:	b90b      	cbnz	r3, 8005fe0 <_vfiprintf_r+0x18>
 8005fdc:	f7ff fdca 	bl	8005b74 <__sinit>
 8005fe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fe2:	07d9      	lsls	r1, r3, #31
 8005fe4:	d405      	bmi.n	8005ff2 <_vfiprintf_r+0x2a>
 8005fe6:	89ab      	ldrh	r3, [r5, #12]
 8005fe8:	059a      	lsls	r2, r3, #22
 8005fea:	d402      	bmi.n	8005ff2 <_vfiprintf_r+0x2a>
 8005fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fee:	f7ff fec6 	bl	8005d7e <__retarget_lock_acquire_recursive>
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	071b      	lsls	r3, r3, #28
 8005ff6:	d501      	bpl.n	8005ffc <_vfiprintf_r+0x34>
 8005ff8:	692b      	ldr	r3, [r5, #16]
 8005ffa:	b99b      	cbnz	r3, 8006024 <_vfiprintf_r+0x5c>
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	4630      	mov	r0, r6
 8006000:	f000 fb70 	bl	80066e4 <__swsetup_r>
 8006004:	b170      	cbz	r0, 8006024 <_vfiprintf_r+0x5c>
 8006006:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006008:	07dc      	lsls	r4, r3, #31
 800600a:	d504      	bpl.n	8006016 <_vfiprintf_r+0x4e>
 800600c:	f04f 30ff 	mov.w	r0, #4294967295
 8006010:	b01d      	add	sp, #116	@ 0x74
 8006012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006016:	89ab      	ldrh	r3, [r5, #12]
 8006018:	0598      	lsls	r0, r3, #22
 800601a:	d4f7      	bmi.n	800600c <_vfiprintf_r+0x44>
 800601c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800601e:	f7ff feaf 	bl	8005d80 <__retarget_lock_release_recursive>
 8006022:	e7f3      	b.n	800600c <_vfiprintf_r+0x44>
 8006024:	2300      	movs	r3, #0
 8006026:	9309      	str	r3, [sp, #36]	@ 0x24
 8006028:	2320      	movs	r3, #32
 800602a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800602e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006032:	2330      	movs	r3, #48	@ 0x30
 8006034:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80061e4 <_vfiprintf_r+0x21c>
 8006038:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800603c:	f04f 0901 	mov.w	r9, #1
 8006040:	4623      	mov	r3, r4
 8006042:	469a      	mov	sl, r3
 8006044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006048:	b10a      	cbz	r2, 800604e <_vfiprintf_r+0x86>
 800604a:	2a25      	cmp	r2, #37	@ 0x25
 800604c:	d1f9      	bne.n	8006042 <_vfiprintf_r+0x7a>
 800604e:	ebba 0b04 	subs.w	fp, sl, r4
 8006052:	d00b      	beq.n	800606c <_vfiprintf_r+0xa4>
 8006054:	465b      	mov	r3, fp
 8006056:	4622      	mov	r2, r4
 8006058:	4629      	mov	r1, r5
 800605a:	4630      	mov	r0, r6
 800605c:	f7ff ffa1 	bl	8005fa2 <__sfputs_r>
 8006060:	3001      	adds	r0, #1
 8006062:	f000 80a7 	beq.w	80061b4 <_vfiprintf_r+0x1ec>
 8006066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006068:	445a      	add	r2, fp
 800606a:	9209      	str	r2, [sp, #36]	@ 0x24
 800606c:	f89a 3000 	ldrb.w	r3, [sl]
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 809f 	beq.w	80061b4 <_vfiprintf_r+0x1ec>
 8006076:	2300      	movs	r3, #0
 8006078:	f04f 32ff 	mov.w	r2, #4294967295
 800607c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006080:	f10a 0a01 	add.w	sl, sl, #1
 8006084:	9304      	str	r3, [sp, #16]
 8006086:	9307      	str	r3, [sp, #28]
 8006088:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800608c:	931a      	str	r3, [sp, #104]	@ 0x68
 800608e:	4654      	mov	r4, sl
 8006090:	2205      	movs	r2, #5
 8006092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006096:	4853      	ldr	r0, [pc, #332]	@ (80061e4 <_vfiprintf_r+0x21c>)
 8006098:	f7fa f8a2 	bl	80001e0 <memchr>
 800609c:	9a04      	ldr	r2, [sp, #16]
 800609e:	b9d8      	cbnz	r0, 80060d8 <_vfiprintf_r+0x110>
 80060a0:	06d1      	lsls	r1, r2, #27
 80060a2:	bf44      	itt	mi
 80060a4:	2320      	movmi	r3, #32
 80060a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060aa:	0713      	lsls	r3, r2, #28
 80060ac:	bf44      	itt	mi
 80060ae:	232b      	movmi	r3, #43	@ 0x2b
 80060b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060b4:	f89a 3000 	ldrb.w	r3, [sl]
 80060b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80060ba:	d015      	beq.n	80060e8 <_vfiprintf_r+0x120>
 80060bc:	9a07      	ldr	r2, [sp, #28]
 80060be:	4654      	mov	r4, sl
 80060c0:	2000      	movs	r0, #0
 80060c2:	f04f 0c0a 	mov.w	ip, #10
 80060c6:	4621      	mov	r1, r4
 80060c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060cc:	3b30      	subs	r3, #48	@ 0x30
 80060ce:	2b09      	cmp	r3, #9
 80060d0:	d94b      	bls.n	800616a <_vfiprintf_r+0x1a2>
 80060d2:	b1b0      	cbz	r0, 8006102 <_vfiprintf_r+0x13a>
 80060d4:	9207      	str	r2, [sp, #28]
 80060d6:	e014      	b.n	8006102 <_vfiprintf_r+0x13a>
 80060d8:	eba0 0308 	sub.w	r3, r0, r8
 80060dc:	fa09 f303 	lsl.w	r3, r9, r3
 80060e0:	4313      	orrs	r3, r2
 80060e2:	9304      	str	r3, [sp, #16]
 80060e4:	46a2      	mov	sl, r4
 80060e6:	e7d2      	b.n	800608e <_vfiprintf_r+0xc6>
 80060e8:	9b03      	ldr	r3, [sp, #12]
 80060ea:	1d19      	adds	r1, r3, #4
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	9103      	str	r1, [sp, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	bfbb      	ittet	lt
 80060f4:	425b      	neglt	r3, r3
 80060f6:	f042 0202 	orrlt.w	r2, r2, #2
 80060fa:	9307      	strge	r3, [sp, #28]
 80060fc:	9307      	strlt	r3, [sp, #28]
 80060fe:	bfb8      	it	lt
 8006100:	9204      	strlt	r2, [sp, #16]
 8006102:	7823      	ldrb	r3, [r4, #0]
 8006104:	2b2e      	cmp	r3, #46	@ 0x2e
 8006106:	d10a      	bne.n	800611e <_vfiprintf_r+0x156>
 8006108:	7863      	ldrb	r3, [r4, #1]
 800610a:	2b2a      	cmp	r3, #42	@ 0x2a
 800610c:	d132      	bne.n	8006174 <_vfiprintf_r+0x1ac>
 800610e:	9b03      	ldr	r3, [sp, #12]
 8006110:	1d1a      	adds	r2, r3, #4
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	9203      	str	r2, [sp, #12]
 8006116:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800611a:	3402      	adds	r4, #2
 800611c:	9305      	str	r3, [sp, #20]
 800611e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80061f4 <_vfiprintf_r+0x22c>
 8006122:	7821      	ldrb	r1, [r4, #0]
 8006124:	2203      	movs	r2, #3
 8006126:	4650      	mov	r0, sl
 8006128:	f7fa f85a 	bl	80001e0 <memchr>
 800612c:	b138      	cbz	r0, 800613e <_vfiprintf_r+0x176>
 800612e:	9b04      	ldr	r3, [sp, #16]
 8006130:	eba0 000a 	sub.w	r0, r0, sl
 8006134:	2240      	movs	r2, #64	@ 0x40
 8006136:	4082      	lsls	r2, r0
 8006138:	4313      	orrs	r3, r2
 800613a:	3401      	adds	r4, #1
 800613c:	9304      	str	r3, [sp, #16]
 800613e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006142:	4829      	ldr	r0, [pc, #164]	@ (80061e8 <_vfiprintf_r+0x220>)
 8006144:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006148:	2206      	movs	r2, #6
 800614a:	f7fa f849 	bl	80001e0 <memchr>
 800614e:	2800      	cmp	r0, #0
 8006150:	d03f      	beq.n	80061d2 <_vfiprintf_r+0x20a>
 8006152:	4b26      	ldr	r3, [pc, #152]	@ (80061ec <_vfiprintf_r+0x224>)
 8006154:	bb1b      	cbnz	r3, 800619e <_vfiprintf_r+0x1d6>
 8006156:	9b03      	ldr	r3, [sp, #12]
 8006158:	3307      	adds	r3, #7
 800615a:	f023 0307 	bic.w	r3, r3, #7
 800615e:	3308      	adds	r3, #8
 8006160:	9303      	str	r3, [sp, #12]
 8006162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006164:	443b      	add	r3, r7
 8006166:	9309      	str	r3, [sp, #36]	@ 0x24
 8006168:	e76a      	b.n	8006040 <_vfiprintf_r+0x78>
 800616a:	fb0c 3202 	mla	r2, ip, r2, r3
 800616e:	460c      	mov	r4, r1
 8006170:	2001      	movs	r0, #1
 8006172:	e7a8      	b.n	80060c6 <_vfiprintf_r+0xfe>
 8006174:	2300      	movs	r3, #0
 8006176:	3401      	adds	r4, #1
 8006178:	9305      	str	r3, [sp, #20]
 800617a:	4619      	mov	r1, r3
 800617c:	f04f 0c0a 	mov.w	ip, #10
 8006180:	4620      	mov	r0, r4
 8006182:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006186:	3a30      	subs	r2, #48	@ 0x30
 8006188:	2a09      	cmp	r2, #9
 800618a:	d903      	bls.n	8006194 <_vfiprintf_r+0x1cc>
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0c6      	beq.n	800611e <_vfiprintf_r+0x156>
 8006190:	9105      	str	r1, [sp, #20]
 8006192:	e7c4      	b.n	800611e <_vfiprintf_r+0x156>
 8006194:	fb0c 2101 	mla	r1, ip, r1, r2
 8006198:	4604      	mov	r4, r0
 800619a:	2301      	movs	r3, #1
 800619c:	e7f0      	b.n	8006180 <_vfiprintf_r+0x1b8>
 800619e:	ab03      	add	r3, sp, #12
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	462a      	mov	r2, r5
 80061a4:	4b12      	ldr	r3, [pc, #72]	@ (80061f0 <_vfiprintf_r+0x228>)
 80061a6:	a904      	add	r1, sp, #16
 80061a8:	4630      	mov	r0, r6
 80061aa:	f3af 8000 	nop.w
 80061ae:	4607      	mov	r7, r0
 80061b0:	1c78      	adds	r0, r7, #1
 80061b2:	d1d6      	bne.n	8006162 <_vfiprintf_r+0x19a>
 80061b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061b6:	07d9      	lsls	r1, r3, #31
 80061b8:	d405      	bmi.n	80061c6 <_vfiprintf_r+0x1fe>
 80061ba:	89ab      	ldrh	r3, [r5, #12]
 80061bc:	059a      	lsls	r2, r3, #22
 80061be:	d402      	bmi.n	80061c6 <_vfiprintf_r+0x1fe>
 80061c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061c2:	f7ff fddd 	bl	8005d80 <__retarget_lock_release_recursive>
 80061c6:	89ab      	ldrh	r3, [r5, #12]
 80061c8:	065b      	lsls	r3, r3, #25
 80061ca:	f53f af1f 	bmi.w	800600c <_vfiprintf_r+0x44>
 80061ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061d0:	e71e      	b.n	8006010 <_vfiprintf_r+0x48>
 80061d2:	ab03      	add	r3, sp, #12
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	462a      	mov	r2, r5
 80061d8:	4b05      	ldr	r3, [pc, #20]	@ (80061f0 <_vfiprintf_r+0x228>)
 80061da:	a904      	add	r1, sp, #16
 80061dc:	4630      	mov	r0, r6
 80061de:	f000 f879 	bl	80062d4 <_printf_i>
 80061e2:	e7e4      	b.n	80061ae <_vfiprintf_r+0x1e6>
 80061e4:	08006908 	.word	0x08006908
 80061e8:	08006912 	.word	0x08006912
 80061ec:	00000000 	.word	0x00000000
 80061f0:	08005fa3 	.word	0x08005fa3
 80061f4:	0800690e 	.word	0x0800690e

080061f8 <_printf_common>:
 80061f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061fc:	4616      	mov	r6, r2
 80061fe:	4698      	mov	r8, r3
 8006200:	688a      	ldr	r2, [r1, #8]
 8006202:	690b      	ldr	r3, [r1, #16]
 8006204:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006208:	4293      	cmp	r3, r2
 800620a:	bfb8      	it	lt
 800620c:	4613      	movlt	r3, r2
 800620e:	6033      	str	r3, [r6, #0]
 8006210:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006214:	4607      	mov	r7, r0
 8006216:	460c      	mov	r4, r1
 8006218:	b10a      	cbz	r2, 800621e <_printf_common+0x26>
 800621a:	3301      	adds	r3, #1
 800621c:	6033      	str	r3, [r6, #0]
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	0699      	lsls	r1, r3, #26
 8006222:	bf42      	ittt	mi
 8006224:	6833      	ldrmi	r3, [r6, #0]
 8006226:	3302      	addmi	r3, #2
 8006228:	6033      	strmi	r3, [r6, #0]
 800622a:	6825      	ldr	r5, [r4, #0]
 800622c:	f015 0506 	ands.w	r5, r5, #6
 8006230:	d106      	bne.n	8006240 <_printf_common+0x48>
 8006232:	f104 0a19 	add.w	sl, r4, #25
 8006236:	68e3      	ldr	r3, [r4, #12]
 8006238:	6832      	ldr	r2, [r6, #0]
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	42ab      	cmp	r3, r5
 800623e:	dc26      	bgt.n	800628e <_printf_common+0x96>
 8006240:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006244:	6822      	ldr	r2, [r4, #0]
 8006246:	3b00      	subs	r3, #0
 8006248:	bf18      	it	ne
 800624a:	2301      	movne	r3, #1
 800624c:	0692      	lsls	r2, r2, #26
 800624e:	d42b      	bmi.n	80062a8 <_printf_common+0xb0>
 8006250:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006254:	4641      	mov	r1, r8
 8006256:	4638      	mov	r0, r7
 8006258:	47c8      	blx	r9
 800625a:	3001      	adds	r0, #1
 800625c:	d01e      	beq.n	800629c <_printf_common+0xa4>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	6922      	ldr	r2, [r4, #16]
 8006262:	f003 0306 	and.w	r3, r3, #6
 8006266:	2b04      	cmp	r3, #4
 8006268:	bf02      	ittt	eq
 800626a:	68e5      	ldreq	r5, [r4, #12]
 800626c:	6833      	ldreq	r3, [r6, #0]
 800626e:	1aed      	subeq	r5, r5, r3
 8006270:	68a3      	ldr	r3, [r4, #8]
 8006272:	bf0c      	ite	eq
 8006274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006278:	2500      	movne	r5, #0
 800627a:	4293      	cmp	r3, r2
 800627c:	bfc4      	itt	gt
 800627e:	1a9b      	subgt	r3, r3, r2
 8006280:	18ed      	addgt	r5, r5, r3
 8006282:	2600      	movs	r6, #0
 8006284:	341a      	adds	r4, #26
 8006286:	42b5      	cmp	r5, r6
 8006288:	d11a      	bne.n	80062c0 <_printf_common+0xc8>
 800628a:	2000      	movs	r0, #0
 800628c:	e008      	b.n	80062a0 <_printf_common+0xa8>
 800628e:	2301      	movs	r3, #1
 8006290:	4652      	mov	r2, sl
 8006292:	4641      	mov	r1, r8
 8006294:	4638      	mov	r0, r7
 8006296:	47c8      	blx	r9
 8006298:	3001      	adds	r0, #1
 800629a:	d103      	bne.n	80062a4 <_printf_common+0xac>
 800629c:	f04f 30ff 	mov.w	r0, #4294967295
 80062a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a4:	3501      	adds	r5, #1
 80062a6:	e7c6      	b.n	8006236 <_printf_common+0x3e>
 80062a8:	18e1      	adds	r1, r4, r3
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	2030      	movs	r0, #48	@ 0x30
 80062ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062b2:	4422      	add	r2, r4
 80062b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062bc:	3302      	adds	r3, #2
 80062be:	e7c7      	b.n	8006250 <_printf_common+0x58>
 80062c0:	2301      	movs	r3, #1
 80062c2:	4622      	mov	r2, r4
 80062c4:	4641      	mov	r1, r8
 80062c6:	4638      	mov	r0, r7
 80062c8:	47c8      	blx	r9
 80062ca:	3001      	adds	r0, #1
 80062cc:	d0e6      	beq.n	800629c <_printf_common+0xa4>
 80062ce:	3601      	adds	r6, #1
 80062d0:	e7d9      	b.n	8006286 <_printf_common+0x8e>
	...

080062d4 <_printf_i>:
 80062d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062d8:	7e0f      	ldrb	r7, [r1, #24]
 80062da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062dc:	2f78      	cmp	r7, #120	@ 0x78
 80062de:	4691      	mov	r9, r2
 80062e0:	4680      	mov	r8, r0
 80062e2:	460c      	mov	r4, r1
 80062e4:	469a      	mov	sl, r3
 80062e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062ea:	d807      	bhi.n	80062fc <_printf_i+0x28>
 80062ec:	2f62      	cmp	r7, #98	@ 0x62
 80062ee:	d80a      	bhi.n	8006306 <_printf_i+0x32>
 80062f0:	2f00      	cmp	r7, #0
 80062f2:	f000 80d1 	beq.w	8006498 <_printf_i+0x1c4>
 80062f6:	2f58      	cmp	r7, #88	@ 0x58
 80062f8:	f000 80b8 	beq.w	800646c <_printf_i+0x198>
 80062fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006300:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006304:	e03a      	b.n	800637c <_printf_i+0xa8>
 8006306:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800630a:	2b15      	cmp	r3, #21
 800630c:	d8f6      	bhi.n	80062fc <_printf_i+0x28>
 800630e:	a101      	add	r1, pc, #4	@ (adr r1, 8006314 <_printf_i+0x40>)
 8006310:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006314:	0800636d 	.word	0x0800636d
 8006318:	08006381 	.word	0x08006381
 800631c:	080062fd 	.word	0x080062fd
 8006320:	080062fd 	.word	0x080062fd
 8006324:	080062fd 	.word	0x080062fd
 8006328:	080062fd 	.word	0x080062fd
 800632c:	08006381 	.word	0x08006381
 8006330:	080062fd 	.word	0x080062fd
 8006334:	080062fd 	.word	0x080062fd
 8006338:	080062fd 	.word	0x080062fd
 800633c:	080062fd 	.word	0x080062fd
 8006340:	0800647f 	.word	0x0800647f
 8006344:	080063ab 	.word	0x080063ab
 8006348:	08006439 	.word	0x08006439
 800634c:	080062fd 	.word	0x080062fd
 8006350:	080062fd 	.word	0x080062fd
 8006354:	080064a1 	.word	0x080064a1
 8006358:	080062fd 	.word	0x080062fd
 800635c:	080063ab 	.word	0x080063ab
 8006360:	080062fd 	.word	0x080062fd
 8006364:	080062fd 	.word	0x080062fd
 8006368:	08006441 	.word	0x08006441
 800636c:	6833      	ldr	r3, [r6, #0]
 800636e:	1d1a      	adds	r2, r3, #4
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6032      	str	r2, [r6, #0]
 8006374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006378:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800637c:	2301      	movs	r3, #1
 800637e:	e09c      	b.n	80064ba <_printf_i+0x1e6>
 8006380:	6833      	ldr	r3, [r6, #0]
 8006382:	6820      	ldr	r0, [r4, #0]
 8006384:	1d19      	adds	r1, r3, #4
 8006386:	6031      	str	r1, [r6, #0]
 8006388:	0606      	lsls	r6, r0, #24
 800638a:	d501      	bpl.n	8006390 <_printf_i+0xbc>
 800638c:	681d      	ldr	r5, [r3, #0]
 800638e:	e003      	b.n	8006398 <_printf_i+0xc4>
 8006390:	0645      	lsls	r5, r0, #25
 8006392:	d5fb      	bpl.n	800638c <_printf_i+0xb8>
 8006394:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006398:	2d00      	cmp	r5, #0
 800639a:	da03      	bge.n	80063a4 <_printf_i+0xd0>
 800639c:	232d      	movs	r3, #45	@ 0x2d
 800639e:	426d      	negs	r5, r5
 80063a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063a4:	4858      	ldr	r0, [pc, #352]	@ (8006508 <_printf_i+0x234>)
 80063a6:	230a      	movs	r3, #10
 80063a8:	e011      	b.n	80063ce <_printf_i+0xfa>
 80063aa:	6821      	ldr	r1, [r4, #0]
 80063ac:	6833      	ldr	r3, [r6, #0]
 80063ae:	0608      	lsls	r0, r1, #24
 80063b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80063b4:	d402      	bmi.n	80063bc <_printf_i+0xe8>
 80063b6:	0649      	lsls	r1, r1, #25
 80063b8:	bf48      	it	mi
 80063ba:	b2ad      	uxthmi	r5, r5
 80063bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80063be:	4852      	ldr	r0, [pc, #328]	@ (8006508 <_printf_i+0x234>)
 80063c0:	6033      	str	r3, [r6, #0]
 80063c2:	bf14      	ite	ne
 80063c4:	230a      	movne	r3, #10
 80063c6:	2308      	moveq	r3, #8
 80063c8:	2100      	movs	r1, #0
 80063ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063ce:	6866      	ldr	r6, [r4, #4]
 80063d0:	60a6      	str	r6, [r4, #8]
 80063d2:	2e00      	cmp	r6, #0
 80063d4:	db05      	blt.n	80063e2 <_printf_i+0x10e>
 80063d6:	6821      	ldr	r1, [r4, #0]
 80063d8:	432e      	orrs	r6, r5
 80063da:	f021 0104 	bic.w	r1, r1, #4
 80063de:	6021      	str	r1, [r4, #0]
 80063e0:	d04b      	beq.n	800647a <_printf_i+0x1a6>
 80063e2:	4616      	mov	r6, r2
 80063e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80063e8:	fb03 5711 	mls	r7, r3, r1, r5
 80063ec:	5dc7      	ldrb	r7, [r0, r7]
 80063ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063f2:	462f      	mov	r7, r5
 80063f4:	42bb      	cmp	r3, r7
 80063f6:	460d      	mov	r5, r1
 80063f8:	d9f4      	bls.n	80063e4 <_printf_i+0x110>
 80063fa:	2b08      	cmp	r3, #8
 80063fc:	d10b      	bne.n	8006416 <_printf_i+0x142>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	07df      	lsls	r7, r3, #31
 8006402:	d508      	bpl.n	8006416 <_printf_i+0x142>
 8006404:	6923      	ldr	r3, [r4, #16]
 8006406:	6861      	ldr	r1, [r4, #4]
 8006408:	4299      	cmp	r1, r3
 800640a:	bfde      	ittt	le
 800640c:	2330      	movle	r3, #48	@ 0x30
 800640e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006412:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006416:	1b92      	subs	r2, r2, r6
 8006418:	6122      	str	r2, [r4, #16]
 800641a:	f8cd a000 	str.w	sl, [sp]
 800641e:	464b      	mov	r3, r9
 8006420:	aa03      	add	r2, sp, #12
 8006422:	4621      	mov	r1, r4
 8006424:	4640      	mov	r0, r8
 8006426:	f7ff fee7 	bl	80061f8 <_printf_common>
 800642a:	3001      	adds	r0, #1
 800642c:	d14a      	bne.n	80064c4 <_printf_i+0x1f0>
 800642e:	f04f 30ff 	mov.w	r0, #4294967295
 8006432:	b004      	add	sp, #16
 8006434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	f043 0320 	orr.w	r3, r3, #32
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	4832      	ldr	r0, [pc, #200]	@ (800650c <_printf_i+0x238>)
 8006442:	2778      	movs	r7, #120	@ 0x78
 8006444:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	6831      	ldr	r1, [r6, #0]
 800644c:	061f      	lsls	r7, r3, #24
 800644e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006452:	d402      	bmi.n	800645a <_printf_i+0x186>
 8006454:	065f      	lsls	r7, r3, #25
 8006456:	bf48      	it	mi
 8006458:	b2ad      	uxthmi	r5, r5
 800645a:	6031      	str	r1, [r6, #0]
 800645c:	07d9      	lsls	r1, r3, #31
 800645e:	bf44      	itt	mi
 8006460:	f043 0320 	orrmi.w	r3, r3, #32
 8006464:	6023      	strmi	r3, [r4, #0]
 8006466:	b11d      	cbz	r5, 8006470 <_printf_i+0x19c>
 8006468:	2310      	movs	r3, #16
 800646a:	e7ad      	b.n	80063c8 <_printf_i+0xf4>
 800646c:	4826      	ldr	r0, [pc, #152]	@ (8006508 <_printf_i+0x234>)
 800646e:	e7e9      	b.n	8006444 <_printf_i+0x170>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	f023 0320 	bic.w	r3, r3, #32
 8006476:	6023      	str	r3, [r4, #0]
 8006478:	e7f6      	b.n	8006468 <_printf_i+0x194>
 800647a:	4616      	mov	r6, r2
 800647c:	e7bd      	b.n	80063fa <_printf_i+0x126>
 800647e:	6833      	ldr	r3, [r6, #0]
 8006480:	6825      	ldr	r5, [r4, #0]
 8006482:	6961      	ldr	r1, [r4, #20]
 8006484:	1d18      	adds	r0, r3, #4
 8006486:	6030      	str	r0, [r6, #0]
 8006488:	062e      	lsls	r6, r5, #24
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	d501      	bpl.n	8006492 <_printf_i+0x1be>
 800648e:	6019      	str	r1, [r3, #0]
 8006490:	e002      	b.n	8006498 <_printf_i+0x1c4>
 8006492:	0668      	lsls	r0, r5, #25
 8006494:	d5fb      	bpl.n	800648e <_printf_i+0x1ba>
 8006496:	8019      	strh	r1, [r3, #0]
 8006498:	2300      	movs	r3, #0
 800649a:	6123      	str	r3, [r4, #16]
 800649c:	4616      	mov	r6, r2
 800649e:	e7bc      	b.n	800641a <_printf_i+0x146>
 80064a0:	6833      	ldr	r3, [r6, #0]
 80064a2:	1d1a      	adds	r2, r3, #4
 80064a4:	6032      	str	r2, [r6, #0]
 80064a6:	681e      	ldr	r6, [r3, #0]
 80064a8:	6862      	ldr	r2, [r4, #4]
 80064aa:	2100      	movs	r1, #0
 80064ac:	4630      	mov	r0, r6
 80064ae:	f7f9 fe97 	bl	80001e0 <memchr>
 80064b2:	b108      	cbz	r0, 80064b8 <_printf_i+0x1e4>
 80064b4:	1b80      	subs	r0, r0, r6
 80064b6:	6060      	str	r0, [r4, #4]
 80064b8:	6863      	ldr	r3, [r4, #4]
 80064ba:	6123      	str	r3, [r4, #16]
 80064bc:	2300      	movs	r3, #0
 80064be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064c2:	e7aa      	b.n	800641a <_printf_i+0x146>
 80064c4:	6923      	ldr	r3, [r4, #16]
 80064c6:	4632      	mov	r2, r6
 80064c8:	4649      	mov	r1, r9
 80064ca:	4640      	mov	r0, r8
 80064cc:	47d0      	blx	sl
 80064ce:	3001      	adds	r0, #1
 80064d0:	d0ad      	beq.n	800642e <_printf_i+0x15a>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	079b      	lsls	r3, r3, #30
 80064d6:	d413      	bmi.n	8006500 <_printf_i+0x22c>
 80064d8:	68e0      	ldr	r0, [r4, #12]
 80064da:	9b03      	ldr	r3, [sp, #12]
 80064dc:	4298      	cmp	r0, r3
 80064de:	bfb8      	it	lt
 80064e0:	4618      	movlt	r0, r3
 80064e2:	e7a6      	b.n	8006432 <_printf_i+0x15e>
 80064e4:	2301      	movs	r3, #1
 80064e6:	4632      	mov	r2, r6
 80064e8:	4649      	mov	r1, r9
 80064ea:	4640      	mov	r0, r8
 80064ec:	47d0      	blx	sl
 80064ee:	3001      	adds	r0, #1
 80064f0:	d09d      	beq.n	800642e <_printf_i+0x15a>
 80064f2:	3501      	adds	r5, #1
 80064f4:	68e3      	ldr	r3, [r4, #12]
 80064f6:	9903      	ldr	r1, [sp, #12]
 80064f8:	1a5b      	subs	r3, r3, r1
 80064fa:	42ab      	cmp	r3, r5
 80064fc:	dcf2      	bgt.n	80064e4 <_printf_i+0x210>
 80064fe:	e7eb      	b.n	80064d8 <_printf_i+0x204>
 8006500:	2500      	movs	r5, #0
 8006502:	f104 0619 	add.w	r6, r4, #25
 8006506:	e7f5      	b.n	80064f4 <_printf_i+0x220>
 8006508:	08006919 	.word	0x08006919
 800650c:	0800692a 	.word	0x0800692a

08006510 <__sflush_r>:
 8006510:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006518:	0716      	lsls	r6, r2, #28
 800651a:	4605      	mov	r5, r0
 800651c:	460c      	mov	r4, r1
 800651e:	d454      	bmi.n	80065ca <__sflush_r+0xba>
 8006520:	684b      	ldr	r3, [r1, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	dc02      	bgt.n	800652c <__sflush_r+0x1c>
 8006526:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	dd48      	ble.n	80065be <__sflush_r+0xae>
 800652c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800652e:	2e00      	cmp	r6, #0
 8006530:	d045      	beq.n	80065be <__sflush_r+0xae>
 8006532:	2300      	movs	r3, #0
 8006534:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006538:	682f      	ldr	r7, [r5, #0]
 800653a:	6a21      	ldr	r1, [r4, #32]
 800653c:	602b      	str	r3, [r5, #0]
 800653e:	d030      	beq.n	80065a2 <__sflush_r+0x92>
 8006540:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006542:	89a3      	ldrh	r3, [r4, #12]
 8006544:	0759      	lsls	r1, r3, #29
 8006546:	d505      	bpl.n	8006554 <__sflush_r+0x44>
 8006548:	6863      	ldr	r3, [r4, #4]
 800654a:	1ad2      	subs	r2, r2, r3
 800654c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800654e:	b10b      	cbz	r3, 8006554 <__sflush_r+0x44>
 8006550:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006552:	1ad2      	subs	r2, r2, r3
 8006554:	2300      	movs	r3, #0
 8006556:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006558:	6a21      	ldr	r1, [r4, #32]
 800655a:	4628      	mov	r0, r5
 800655c:	47b0      	blx	r6
 800655e:	1c43      	adds	r3, r0, #1
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	d106      	bne.n	8006572 <__sflush_r+0x62>
 8006564:	6829      	ldr	r1, [r5, #0]
 8006566:	291d      	cmp	r1, #29
 8006568:	d82b      	bhi.n	80065c2 <__sflush_r+0xb2>
 800656a:	4a2a      	ldr	r2, [pc, #168]	@ (8006614 <__sflush_r+0x104>)
 800656c:	40ca      	lsrs	r2, r1
 800656e:	07d6      	lsls	r6, r2, #31
 8006570:	d527      	bpl.n	80065c2 <__sflush_r+0xb2>
 8006572:	2200      	movs	r2, #0
 8006574:	6062      	str	r2, [r4, #4]
 8006576:	04d9      	lsls	r1, r3, #19
 8006578:	6922      	ldr	r2, [r4, #16]
 800657a:	6022      	str	r2, [r4, #0]
 800657c:	d504      	bpl.n	8006588 <__sflush_r+0x78>
 800657e:	1c42      	adds	r2, r0, #1
 8006580:	d101      	bne.n	8006586 <__sflush_r+0x76>
 8006582:	682b      	ldr	r3, [r5, #0]
 8006584:	b903      	cbnz	r3, 8006588 <__sflush_r+0x78>
 8006586:	6560      	str	r0, [r4, #84]	@ 0x54
 8006588:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800658a:	602f      	str	r7, [r5, #0]
 800658c:	b1b9      	cbz	r1, 80065be <__sflush_r+0xae>
 800658e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006592:	4299      	cmp	r1, r3
 8006594:	d002      	beq.n	800659c <__sflush_r+0x8c>
 8006596:	4628      	mov	r0, r5
 8006598:	f7ff fbf4 	bl	8005d84 <_free_r>
 800659c:	2300      	movs	r3, #0
 800659e:	6363      	str	r3, [r4, #52]	@ 0x34
 80065a0:	e00d      	b.n	80065be <__sflush_r+0xae>
 80065a2:	2301      	movs	r3, #1
 80065a4:	4628      	mov	r0, r5
 80065a6:	47b0      	blx	r6
 80065a8:	4602      	mov	r2, r0
 80065aa:	1c50      	adds	r0, r2, #1
 80065ac:	d1c9      	bne.n	8006542 <__sflush_r+0x32>
 80065ae:	682b      	ldr	r3, [r5, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0c6      	beq.n	8006542 <__sflush_r+0x32>
 80065b4:	2b1d      	cmp	r3, #29
 80065b6:	d001      	beq.n	80065bc <__sflush_r+0xac>
 80065b8:	2b16      	cmp	r3, #22
 80065ba:	d11e      	bne.n	80065fa <__sflush_r+0xea>
 80065bc:	602f      	str	r7, [r5, #0]
 80065be:	2000      	movs	r0, #0
 80065c0:	e022      	b.n	8006608 <__sflush_r+0xf8>
 80065c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065c6:	b21b      	sxth	r3, r3
 80065c8:	e01b      	b.n	8006602 <__sflush_r+0xf2>
 80065ca:	690f      	ldr	r7, [r1, #16]
 80065cc:	2f00      	cmp	r7, #0
 80065ce:	d0f6      	beq.n	80065be <__sflush_r+0xae>
 80065d0:	0793      	lsls	r3, r2, #30
 80065d2:	680e      	ldr	r6, [r1, #0]
 80065d4:	bf08      	it	eq
 80065d6:	694b      	ldreq	r3, [r1, #20]
 80065d8:	600f      	str	r7, [r1, #0]
 80065da:	bf18      	it	ne
 80065dc:	2300      	movne	r3, #0
 80065de:	eba6 0807 	sub.w	r8, r6, r7
 80065e2:	608b      	str	r3, [r1, #8]
 80065e4:	f1b8 0f00 	cmp.w	r8, #0
 80065e8:	dde9      	ble.n	80065be <__sflush_r+0xae>
 80065ea:	6a21      	ldr	r1, [r4, #32]
 80065ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065ee:	4643      	mov	r3, r8
 80065f0:	463a      	mov	r2, r7
 80065f2:	4628      	mov	r0, r5
 80065f4:	47b0      	blx	r6
 80065f6:	2800      	cmp	r0, #0
 80065f8:	dc08      	bgt.n	800660c <__sflush_r+0xfc>
 80065fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006602:	81a3      	strh	r3, [r4, #12]
 8006604:	f04f 30ff 	mov.w	r0, #4294967295
 8006608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800660c:	4407      	add	r7, r0
 800660e:	eba8 0800 	sub.w	r8, r8, r0
 8006612:	e7e7      	b.n	80065e4 <__sflush_r+0xd4>
 8006614:	20400001 	.word	0x20400001

08006618 <_fflush_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	690b      	ldr	r3, [r1, #16]
 800661c:	4605      	mov	r5, r0
 800661e:	460c      	mov	r4, r1
 8006620:	b913      	cbnz	r3, 8006628 <_fflush_r+0x10>
 8006622:	2500      	movs	r5, #0
 8006624:	4628      	mov	r0, r5
 8006626:	bd38      	pop	{r3, r4, r5, pc}
 8006628:	b118      	cbz	r0, 8006632 <_fflush_r+0x1a>
 800662a:	6a03      	ldr	r3, [r0, #32]
 800662c:	b90b      	cbnz	r3, 8006632 <_fflush_r+0x1a>
 800662e:	f7ff faa1 	bl	8005b74 <__sinit>
 8006632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0f3      	beq.n	8006622 <_fflush_r+0xa>
 800663a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800663c:	07d0      	lsls	r0, r2, #31
 800663e:	d404      	bmi.n	800664a <_fflush_r+0x32>
 8006640:	0599      	lsls	r1, r3, #22
 8006642:	d402      	bmi.n	800664a <_fflush_r+0x32>
 8006644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006646:	f7ff fb9a 	bl	8005d7e <__retarget_lock_acquire_recursive>
 800664a:	4628      	mov	r0, r5
 800664c:	4621      	mov	r1, r4
 800664e:	f7ff ff5f 	bl	8006510 <__sflush_r>
 8006652:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006654:	07da      	lsls	r2, r3, #31
 8006656:	4605      	mov	r5, r0
 8006658:	d4e4      	bmi.n	8006624 <_fflush_r+0xc>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	059b      	lsls	r3, r3, #22
 800665e:	d4e1      	bmi.n	8006624 <_fflush_r+0xc>
 8006660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006662:	f7ff fb8d 	bl	8005d80 <__retarget_lock_release_recursive>
 8006666:	e7dd      	b.n	8006624 <_fflush_r+0xc>

08006668 <__swbuf_r>:
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	460e      	mov	r6, r1
 800666c:	4614      	mov	r4, r2
 800666e:	4605      	mov	r5, r0
 8006670:	b118      	cbz	r0, 800667a <__swbuf_r+0x12>
 8006672:	6a03      	ldr	r3, [r0, #32]
 8006674:	b90b      	cbnz	r3, 800667a <__swbuf_r+0x12>
 8006676:	f7ff fa7d 	bl	8005b74 <__sinit>
 800667a:	69a3      	ldr	r3, [r4, #24]
 800667c:	60a3      	str	r3, [r4, #8]
 800667e:	89a3      	ldrh	r3, [r4, #12]
 8006680:	071a      	lsls	r2, r3, #28
 8006682:	d501      	bpl.n	8006688 <__swbuf_r+0x20>
 8006684:	6923      	ldr	r3, [r4, #16]
 8006686:	b943      	cbnz	r3, 800669a <__swbuf_r+0x32>
 8006688:	4621      	mov	r1, r4
 800668a:	4628      	mov	r0, r5
 800668c:	f000 f82a 	bl	80066e4 <__swsetup_r>
 8006690:	b118      	cbz	r0, 800669a <__swbuf_r+0x32>
 8006692:	f04f 37ff 	mov.w	r7, #4294967295
 8006696:	4638      	mov	r0, r7
 8006698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	6922      	ldr	r2, [r4, #16]
 800669e:	1a98      	subs	r0, r3, r2
 80066a0:	6963      	ldr	r3, [r4, #20]
 80066a2:	b2f6      	uxtb	r6, r6
 80066a4:	4283      	cmp	r3, r0
 80066a6:	4637      	mov	r7, r6
 80066a8:	dc05      	bgt.n	80066b6 <__swbuf_r+0x4e>
 80066aa:	4621      	mov	r1, r4
 80066ac:	4628      	mov	r0, r5
 80066ae:	f7ff ffb3 	bl	8006618 <_fflush_r>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d1ed      	bne.n	8006692 <__swbuf_r+0x2a>
 80066b6:	68a3      	ldr	r3, [r4, #8]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	60a3      	str	r3, [r4, #8]
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	6022      	str	r2, [r4, #0]
 80066c2:	701e      	strb	r6, [r3, #0]
 80066c4:	6962      	ldr	r2, [r4, #20]
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d004      	beq.n	80066d6 <__swbuf_r+0x6e>
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	07db      	lsls	r3, r3, #31
 80066d0:	d5e1      	bpl.n	8006696 <__swbuf_r+0x2e>
 80066d2:	2e0a      	cmp	r6, #10
 80066d4:	d1df      	bne.n	8006696 <__swbuf_r+0x2e>
 80066d6:	4621      	mov	r1, r4
 80066d8:	4628      	mov	r0, r5
 80066da:	f7ff ff9d 	bl	8006618 <_fflush_r>
 80066de:	2800      	cmp	r0, #0
 80066e0:	d0d9      	beq.n	8006696 <__swbuf_r+0x2e>
 80066e2:	e7d6      	b.n	8006692 <__swbuf_r+0x2a>

080066e4 <__swsetup_r>:
 80066e4:	b538      	push	{r3, r4, r5, lr}
 80066e6:	4b29      	ldr	r3, [pc, #164]	@ (800678c <__swsetup_r+0xa8>)
 80066e8:	4605      	mov	r5, r0
 80066ea:	6818      	ldr	r0, [r3, #0]
 80066ec:	460c      	mov	r4, r1
 80066ee:	b118      	cbz	r0, 80066f8 <__swsetup_r+0x14>
 80066f0:	6a03      	ldr	r3, [r0, #32]
 80066f2:	b90b      	cbnz	r3, 80066f8 <__swsetup_r+0x14>
 80066f4:	f7ff fa3e 	bl	8005b74 <__sinit>
 80066f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066fc:	0719      	lsls	r1, r3, #28
 80066fe:	d422      	bmi.n	8006746 <__swsetup_r+0x62>
 8006700:	06da      	lsls	r2, r3, #27
 8006702:	d407      	bmi.n	8006714 <__swsetup_r+0x30>
 8006704:	2209      	movs	r2, #9
 8006706:	602a      	str	r2, [r5, #0]
 8006708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800670c:	81a3      	strh	r3, [r4, #12]
 800670e:	f04f 30ff 	mov.w	r0, #4294967295
 8006712:	e033      	b.n	800677c <__swsetup_r+0x98>
 8006714:	0758      	lsls	r0, r3, #29
 8006716:	d512      	bpl.n	800673e <__swsetup_r+0x5a>
 8006718:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800671a:	b141      	cbz	r1, 800672e <__swsetup_r+0x4a>
 800671c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006720:	4299      	cmp	r1, r3
 8006722:	d002      	beq.n	800672a <__swsetup_r+0x46>
 8006724:	4628      	mov	r0, r5
 8006726:	f7ff fb2d 	bl	8005d84 <_free_r>
 800672a:	2300      	movs	r3, #0
 800672c:	6363      	str	r3, [r4, #52]	@ 0x34
 800672e:	89a3      	ldrh	r3, [r4, #12]
 8006730:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006734:	81a3      	strh	r3, [r4, #12]
 8006736:	2300      	movs	r3, #0
 8006738:	6063      	str	r3, [r4, #4]
 800673a:	6923      	ldr	r3, [r4, #16]
 800673c:	6023      	str	r3, [r4, #0]
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	f043 0308 	orr.w	r3, r3, #8
 8006744:	81a3      	strh	r3, [r4, #12]
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	b94b      	cbnz	r3, 800675e <__swsetup_r+0x7a>
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006754:	d003      	beq.n	800675e <__swsetup_r+0x7a>
 8006756:	4621      	mov	r1, r4
 8006758:	4628      	mov	r0, r5
 800675a:	f000 f84f 	bl	80067fc <__smakebuf_r>
 800675e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006762:	f013 0201 	ands.w	r2, r3, #1
 8006766:	d00a      	beq.n	800677e <__swsetup_r+0x9a>
 8006768:	2200      	movs	r2, #0
 800676a:	60a2      	str	r2, [r4, #8]
 800676c:	6962      	ldr	r2, [r4, #20]
 800676e:	4252      	negs	r2, r2
 8006770:	61a2      	str	r2, [r4, #24]
 8006772:	6922      	ldr	r2, [r4, #16]
 8006774:	b942      	cbnz	r2, 8006788 <__swsetup_r+0xa4>
 8006776:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800677a:	d1c5      	bne.n	8006708 <__swsetup_r+0x24>
 800677c:	bd38      	pop	{r3, r4, r5, pc}
 800677e:	0799      	lsls	r1, r3, #30
 8006780:	bf58      	it	pl
 8006782:	6962      	ldrpl	r2, [r4, #20]
 8006784:	60a2      	str	r2, [r4, #8]
 8006786:	e7f4      	b.n	8006772 <__swsetup_r+0x8e>
 8006788:	2000      	movs	r0, #0
 800678a:	e7f7      	b.n	800677c <__swsetup_r+0x98>
 800678c:	20000088 	.word	0x20000088

08006790 <_sbrk_r>:
 8006790:	b538      	push	{r3, r4, r5, lr}
 8006792:	4d06      	ldr	r5, [pc, #24]	@ (80067ac <_sbrk_r+0x1c>)
 8006794:	2300      	movs	r3, #0
 8006796:	4604      	mov	r4, r0
 8006798:	4608      	mov	r0, r1
 800679a:	602b      	str	r3, [r5, #0]
 800679c:	f7fa f9b2 	bl	8000b04 <_sbrk>
 80067a0:	1c43      	adds	r3, r0, #1
 80067a2:	d102      	bne.n	80067aa <_sbrk_r+0x1a>
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	b103      	cbz	r3, 80067aa <_sbrk_r+0x1a>
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	bd38      	pop	{r3, r4, r5, pc}
 80067ac:	200004a8 	.word	0x200004a8

080067b0 <__swhatbuf_r>:
 80067b0:	b570      	push	{r4, r5, r6, lr}
 80067b2:	460c      	mov	r4, r1
 80067b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b8:	2900      	cmp	r1, #0
 80067ba:	b096      	sub	sp, #88	@ 0x58
 80067bc:	4615      	mov	r5, r2
 80067be:	461e      	mov	r6, r3
 80067c0:	da0d      	bge.n	80067de <__swhatbuf_r+0x2e>
 80067c2:	89a3      	ldrh	r3, [r4, #12]
 80067c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80067c8:	f04f 0100 	mov.w	r1, #0
 80067cc:	bf14      	ite	ne
 80067ce:	2340      	movne	r3, #64	@ 0x40
 80067d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80067d4:	2000      	movs	r0, #0
 80067d6:	6031      	str	r1, [r6, #0]
 80067d8:	602b      	str	r3, [r5, #0]
 80067da:	b016      	add	sp, #88	@ 0x58
 80067dc:	bd70      	pop	{r4, r5, r6, pc}
 80067de:	466a      	mov	r2, sp
 80067e0:	f000 f848 	bl	8006874 <_fstat_r>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	dbec      	blt.n	80067c2 <__swhatbuf_r+0x12>
 80067e8:	9901      	ldr	r1, [sp, #4]
 80067ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80067ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80067f2:	4259      	negs	r1, r3
 80067f4:	4159      	adcs	r1, r3
 80067f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067fa:	e7eb      	b.n	80067d4 <__swhatbuf_r+0x24>

080067fc <__smakebuf_r>:
 80067fc:	898b      	ldrh	r3, [r1, #12]
 80067fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006800:	079d      	lsls	r5, r3, #30
 8006802:	4606      	mov	r6, r0
 8006804:	460c      	mov	r4, r1
 8006806:	d507      	bpl.n	8006818 <__smakebuf_r+0x1c>
 8006808:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	6123      	str	r3, [r4, #16]
 8006810:	2301      	movs	r3, #1
 8006812:	6163      	str	r3, [r4, #20]
 8006814:	b003      	add	sp, #12
 8006816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006818:	ab01      	add	r3, sp, #4
 800681a:	466a      	mov	r2, sp
 800681c:	f7ff ffc8 	bl	80067b0 <__swhatbuf_r>
 8006820:	9f00      	ldr	r7, [sp, #0]
 8006822:	4605      	mov	r5, r0
 8006824:	4639      	mov	r1, r7
 8006826:	4630      	mov	r0, r6
 8006828:	f7ff fb18 	bl	8005e5c <_malloc_r>
 800682c:	b948      	cbnz	r0, 8006842 <__smakebuf_r+0x46>
 800682e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006832:	059a      	lsls	r2, r3, #22
 8006834:	d4ee      	bmi.n	8006814 <__smakebuf_r+0x18>
 8006836:	f023 0303 	bic.w	r3, r3, #3
 800683a:	f043 0302 	orr.w	r3, r3, #2
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	e7e2      	b.n	8006808 <__smakebuf_r+0xc>
 8006842:	89a3      	ldrh	r3, [r4, #12]
 8006844:	6020      	str	r0, [r4, #0]
 8006846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800684a:	81a3      	strh	r3, [r4, #12]
 800684c:	9b01      	ldr	r3, [sp, #4]
 800684e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006852:	b15b      	cbz	r3, 800686c <__smakebuf_r+0x70>
 8006854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006858:	4630      	mov	r0, r6
 800685a:	f000 f81d 	bl	8006898 <_isatty_r>
 800685e:	b128      	cbz	r0, 800686c <__smakebuf_r+0x70>
 8006860:	89a3      	ldrh	r3, [r4, #12]
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	81a3      	strh	r3, [r4, #12]
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	431d      	orrs	r5, r3
 8006870:	81a5      	strh	r5, [r4, #12]
 8006872:	e7cf      	b.n	8006814 <__smakebuf_r+0x18>

08006874 <_fstat_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4d07      	ldr	r5, [pc, #28]	@ (8006894 <_fstat_r+0x20>)
 8006878:	2300      	movs	r3, #0
 800687a:	4604      	mov	r4, r0
 800687c:	4608      	mov	r0, r1
 800687e:	4611      	mov	r1, r2
 8006880:	602b      	str	r3, [r5, #0]
 8006882:	f7fa f916 	bl	8000ab2 <_fstat>
 8006886:	1c43      	adds	r3, r0, #1
 8006888:	d102      	bne.n	8006890 <_fstat_r+0x1c>
 800688a:	682b      	ldr	r3, [r5, #0]
 800688c:	b103      	cbz	r3, 8006890 <_fstat_r+0x1c>
 800688e:	6023      	str	r3, [r4, #0]
 8006890:	bd38      	pop	{r3, r4, r5, pc}
 8006892:	bf00      	nop
 8006894:	200004a8 	.word	0x200004a8

08006898 <_isatty_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4d06      	ldr	r5, [pc, #24]	@ (80068b4 <_isatty_r+0x1c>)
 800689c:	2300      	movs	r3, #0
 800689e:	4604      	mov	r4, r0
 80068a0:	4608      	mov	r0, r1
 80068a2:	602b      	str	r3, [r5, #0]
 80068a4:	f7fa f915 	bl	8000ad2 <_isatty>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d102      	bne.n	80068b2 <_isatty_r+0x1a>
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	b103      	cbz	r3, 80068b2 <_isatty_r+0x1a>
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	200004a8 	.word	0x200004a8

080068b8 <_init>:
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	bf00      	nop
 80068bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068be:	bc08      	pop	{r3}
 80068c0:	469e      	mov	lr, r3
 80068c2:	4770      	bx	lr

080068c4 <_fini>:
 80068c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c6:	bf00      	nop
 80068c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ca:	bc08      	pop	{r3}
 80068cc:	469e      	mov	lr, r3
 80068ce:	4770      	bx	lr
