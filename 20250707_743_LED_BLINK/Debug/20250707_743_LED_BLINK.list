
20250707_743_LED_BLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062bc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800655c  0800655c  0000755c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080065e0  080065e0  000075e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080065e8  080065e8  000075e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080065ec  080065ec  000075ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  080065f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000204  2400006c  0800665c  0000806c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000270  0800665c  00008270  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001034f  00000000  00000000  0000809a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000021ee  00000000  00000000  000183e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b18  00000000  00000000  0001a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000872  00000000  00000000  0001b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036e8a  00000000  00000000  0001b962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000fcba  00000000  00000000  000527ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00158c53  00000000  00000000  000624a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001bb0f9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003428  00000000  00000000  001bb13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  001be564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006544 	.word	0x08006544

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08006544 	.word	0x08006544

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <MX_GPIO_Init+0xa4>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <MX_GPIO_Init+0xa4>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <MX_GPIO_Init+0xa4>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <MX_GPIO_Init+0xa4>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e6:	4a1a      	ldr	r2, [pc, #104]	@ (8000750 <MX_GPIO_Init+0xa4>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f0:	4b17      	ldr	r3, [pc, #92]	@ (8000750 <MX_GPIO_Init+0xa4>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <MX_GPIO_Init+0xa4>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000704:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <MX_GPIO_Init+0xa4>)
 8000706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800070a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_GPIO_Init+0xa4>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000722:	480c      	ldr	r0, [pc, #48]	@ (8000754 <MX_GPIO_Init+0xa8>)
 8000724:	f000 ffb2 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000728:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800072c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	4619      	mov	r1, r3
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_GPIO_Init+0xa8>)
 8000742:	f000 fdf3 	bl	800132c <HAL_GPIO_Init>

}
 8000746:	bf00      	nop
 8000748:	3720      	adds	r7, #32
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	58024400 	.word	0x58024400
 8000754:	58020800 	.word	0x58020800

08000758 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

 HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 8000760:	1d39      	adds	r1, r7, #4
 8000762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000766:	2201      	movs	r2, #1
 8000768:	4803      	ldr	r0, [pc, #12]	@ (8000778 <__io_putchar+0x20>)
 800076a:	f003 fe45 	bl	80043f8 <HAL_UART_Transmit>
 return ch;
 800076e:	687b      	ldr	r3, [r7, #4]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2400008c 	.word	0x2400008c

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000782:	f000 f8fd 	bl	8000980 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000786:	4b3e      	ldr	r3, [pc, #248]	@ (8000880 <main+0x104>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800078e:	2b00      	cmp	r3, #0
 8000790:	d11b      	bne.n	80007ca <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000792:	f3bf 8f4f 	dsb	sy
}
 8000796:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000798:	f3bf 8f6f 	isb	sy
}
 800079c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800079e:	4b38      	ldr	r3, [pc, #224]	@ (8000880 <main+0x104>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007a6:	f3bf 8f4f 	dsb	sy
}
 80007aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007ac:	f3bf 8f6f 	isb	sy
}
 80007b0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007b2:	4b33      	ldr	r3, [pc, #204]	@ (8000880 <main+0x104>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a32      	ldr	r2, [pc, #200]	@ (8000880 <main+0x104>)
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007be:	f3bf 8f4f 	dsb	sy
}
 80007c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007c4:	f3bf 8f6f 	isb	sy
}
 80007c8:	e000      	b.n	80007cc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007ca:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <main+0x104>)
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d138      	bne.n	800084a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007d8:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <main+0x104>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007e0:	f3bf 8f4f 	dsb	sy
}
 80007e4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007e6:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <main+0x104>)
 80007e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80007ec:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	0b5b      	lsrs	r3, r3, #13
 80007f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007f6:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	08db      	lsrs	r3, r3, #3
 80007fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000800:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	015a      	lsls	r2, r3, #5
 8000806:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800080a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000810:	491b      	ldr	r1, [pc, #108]	@ (8000880 <main+0x104>)
 8000812:	4313      	orrs	r3, r2
 8000814:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	1e5a      	subs	r2, r3, #1
 800081c:	603a      	str	r2, [r7, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d1ef      	bne.n	8000802 <main+0x86>
    } while(sets-- != 0U);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1e5      	bne.n	80007f8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800082c:	f3bf 8f4f 	dsb	sy
}
 8000830:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <main+0x104>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a12      	ldr	r2, [pc, #72]	@ (8000880 <main+0x104>)
 8000838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800083c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800083e:	f3bf 8f4f 	dsb	sy
}
 8000842:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000844:	f3bf 8f6f 	isb	sy
}
 8000848:	e000      	b.n	800084c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800084a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084c:	f000 fb50 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000850:	f000 f81c 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000854:	f7ff ff2a 	bl	80006ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000858:	f000 fa68 	bl	8000d2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint32_t counter = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("hello STM32\n");
 8000860:	4808      	ldr	r0, [pc, #32]	@ (8000884 <main+0x108>)
 8000862:	f005 f80d 	bl	8005880 <puts>
	  printf("Count : %d\n", counter++);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	1c5a      	adds	r2, r3, #1
 800086a:	60fa      	str	r2, [r7, #12]
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	@ (8000888 <main+0x10c>)
 8000870:	f004 ff9e 	bl	80057b0 <iprintf>
	  HAL_Delay(100);
 8000874:	2064      	movs	r0, #100	@ 0x64
 8000876:	f000 fbcd 	bl	8001014 <HAL_Delay>
	  printf("hello STM32\n");
 800087a:	bf00      	nop
 800087c:	e7f0      	b.n	8000860 <main+0xe4>
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00
 8000884:	0800655c 	.word	0x0800655c
 8000888:	08006568 	.word	0x08006568

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b09c      	sub	sp, #112	@ 0x70
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000896:	224c      	movs	r2, #76	@ 0x4c
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f005 f8d0 	bl	8005a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2220      	movs	r2, #32
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f005 f8ca 	bl	8005a40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008ac:	2002      	movs	r0, #2
 80008ae:	f000 ff07 	bl	80016c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b30      	ldr	r3, [pc, #192]	@ (8000978 <SystemClock_Config+0xec>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000978 <SystemClock_Config+0xec>)
 80008bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008c0:	6193      	str	r3, [r2, #24]
 80008c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <SystemClock_Config+0xec>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	4b2b      	ldr	r3, [pc, #172]	@ (800097c <SystemClock_Config+0xf0>)
 80008ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d0:	4a2a      	ldr	r2, [pc, #168]	@ (800097c <SystemClock_Config+0xf0>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008d8:	4b28      	ldr	r3, [pc, #160]	@ (800097c <SystemClock_Config+0xf0>)
 80008da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008e4:	bf00      	nop
 80008e6:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <SystemClock_Config+0xec>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008f2:	d1f8      	bne.n	80008e6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000902:	2302      	movs	r3, #2
 8000904:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000906:	2305      	movs	r3, #5
 8000908:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 800090a:	23c0      	movs	r3, #192	@ 0xc0
 800090c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800090e:	2302      	movs	r3, #2
 8000910:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000916:	2302      	movs	r3, #2
 8000918:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800091a:	2308      	movs	r3, #8
 800091c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800091e:	2300      	movs	r3, #0
 8000920:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092a:	4618      	mov	r0, r3
 800092c:	f000 ff02 	bl	8001734 <HAL_RCC_OscConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000936:	f000 f84f 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093a:	233f      	movs	r3, #63	@ 0x3f
 800093c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	2303      	movs	r3, #3
 8000940:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000946:	2308      	movs	r3, #8
 8000948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800094a:	2340      	movs	r3, #64	@ 0x40
 800094c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800094e:	2340      	movs	r3, #64	@ 0x40
 8000950:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000956:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000958:	2340      	movs	r3, #64	@ 0x40
 800095a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2104      	movs	r1, #4
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fb41 	bl	8001fe8 <HAL_RCC_ClockConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800096c:	f000 f834 	bl	80009d8 <Error_Handler>
  }
}
 8000970:	bf00      	nop
 8000972:	3770      	adds	r7, #112	@ 0x70
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	58024800 	.word	0x58024800
 800097c:	58000400 	.word	0x58000400

08000980 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000992:	f000 fc53 	bl	800123c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000996:	2301      	movs	r3, #1
 8000998:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800099a:	2300      	movs	r3, #0
 800099c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009a2:	231f      	movs	r3, #31
 80009a4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80009a6:	2387      	movs	r3, #135	@ 0x87
 80009a8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009ae:	2300      	movs	r3, #0
 80009b0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009b2:	2301      	movs	r3, #1
 80009b4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009b6:	2301      	movs	r3, #1
 80009b8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009c2:	463b      	mov	r3, r7
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fc71 	bl	80012ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009ca:	2004      	movs	r0, #4
 80009cc:	f000 fc4e 	bl	800126c <HAL_MPU_Enable>

}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <Error_Handler+0x8>

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000a14 <HAL_MspInit+0x30>)
 80009ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009f0:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <HAL_MspInit+0x30>)
 80009f2:	f043 0302 	orr.w	r3, r3, #2
 80009f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_MspInit+0x30>)
 80009fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a00:	f003 0302 	and.w	r3, r3, #2
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	58024400 	.word	0x58024400

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <NMI_Handler+0x4>

08000a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <MemManage_Handler+0x4>

08000a30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6e:	f000 fab1 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	e00a      	b.n	8000a9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a88:	f3af 8000 	nop.w
 8000a8c:	4601      	mov	r1, r0
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	60ba      	str	r2, [r7, #8]
 8000a94:	b2ca      	uxtb	r2, r1
 8000a96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	697a      	ldr	r2, [r7, #20]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	dbf0      	blt.n	8000a88 <_read+0x12>
  }

  return len;
 8000aa6:	687b      	ldr	r3, [r7, #4]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	e009      	b.n	8000ad6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	1c5a      	adds	r2, r3, #1
 8000ac6:	60ba      	str	r2, [r7, #8]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fe44 	bl	8000758 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	dbf1      	blt.n	8000ac2 <_write+0x12>
  }
  return len;
 8000ade:	687b      	ldr	r3, [r7, #4]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <_close>:

int _close(int file)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b10:	605a      	str	r2, [r3, #4]
  return 0;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <_isatty>:

int _isatty(int file)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b28:	2301      	movs	r3, #1
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b085      	sub	sp, #20
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b58:	4a14      	ldr	r2, [pc, #80]	@ (8000bac <_sbrk+0x5c>)
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <_sbrk+0x60>)
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <_sbrk+0x64>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	@ (8000bb8 <_sbrk+0x68>)
 8000b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b72:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d207      	bcs.n	8000b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b80:	f004 ffac 	bl	8005adc <__errno>
 8000b84:	4603      	mov	r3, r0
 8000b86:	220c      	movs	r2, #12
 8000b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	e009      	b.n	8000ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b90:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b96:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4a05      	ldr	r2, [pc, #20]	@ (8000bb4 <_sbrk+0x64>)
 8000ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	24080000 	.word	0x24080000
 8000bb0:	00000400 	.word	0x00000400
 8000bb4:	24000088 	.word	0x24000088
 8000bb8:	24000270 	.word	0x24000270

08000bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b43      	ldr	r3, [pc, #268]	@ (8000cd0 <SystemInit+0x114>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc6:	4a42      	ldr	r2, [pc, #264]	@ (8000cd0 <SystemInit+0x114>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bd0:	4b40      	ldr	r3, [pc, #256]	@ (8000cd4 <SystemInit+0x118>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 030f 	and.w	r3, r3, #15
 8000bd8:	2b06      	cmp	r3, #6
 8000bda:	d807      	bhi.n	8000bec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bdc:	4b3d      	ldr	r3, [pc, #244]	@ (8000cd4 <SystemInit+0x118>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f023 030f 	bic.w	r3, r3, #15
 8000be4:	4a3b      	ldr	r2, [pc, #236]	@ (8000cd4 <SystemInit+0x118>)
 8000be6:	f043 0307 	orr.w	r3, r3, #7
 8000bea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bec:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd8 <SystemInit+0x11c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a39      	ldr	r2, [pc, #228]	@ (8000cd8 <SystemInit+0x11c>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bf8:	4b37      	ldr	r3, [pc, #220]	@ (8000cd8 <SystemInit+0x11c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bfe:	4b36      	ldr	r3, [pc, #216]	@ (8000cd8 <SystemInit+0x11c>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4935      	ldr	r1, [pc, #212]	@ (8000cd8 <SystemInit+0x11c>)
 8000c04:	4b35      	ldr	r3, [pc, #212]	@ (8000cdc <SystemInit+0x120>)
 8000c06:	4013      	ands	r3, r2
 8000c08:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c0a:	4b32      	ldr	r3, [pc, #200]	@ (8000cd4 <SystemInit+0x118>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c16:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd4 <SystemInit+0x118>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 030f 	bic.w	r3, r3, #15
 8000c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000cd4 <SystemInit+0x118>)
 8000c20:	f043 0307 	orr.w	r3, r3, #7
 8000c24:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c26:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd8 <SystemInit+0x11c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd8 <SystemInit+0x11c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c32:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <SystemInit+0x11c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c38:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <SystemInit+0x11c>)
 8000c3a:	4a29      	ldr	r2, [pc, #164]	@ (8000ce0 <SystemInit+0x124>)
 8000c3c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c3e:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <SystemInit+0x11c>)
 8000c40:	4a28      	ldr	r2, [pc, #160]	@ (8000ce4 <SystemInit+0x128>)
 8000c42:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c44:	4b24      	ldr	r3, [pc, #144]	@ (8000cd8 <SystemInit+0x11c>)
 8000c46:	4a28      	ldr	r2, [pc, #160]	@ (8000ce8 <SystemInit+0x12c>)
 8000c48:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c4a:	4b23      	ldr	r3, [pc, #140]	@ (8000cd8 <SystemInit+0x11c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c50:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <SystemInit+0x11c>)
 8000c52:	4a25      	ldr	r2, [pc, #148]	@ (8000ce8 <SystemInit+0x12c>)
 8000c54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c56:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <SystemInit+0x11c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd8 <SystemInit+0x11c>)
 8000c5e:	4a22      	ldr	r2, [pc, #136]	@ (8000ce8 <SystemInit+0x12c>)
 8000c60:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd8 <SystemInit+0x11c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <SystemInit+0x11c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd8 <SystemInit+0x11c>)
 8000c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c74:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <SystemInit+0x11c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cec <SystemInit+0x130>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <SystemInit+0x134>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c86:	d202      	bcs.n	8000c8e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <SystemInit+0x138>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c8e:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <SystemInit+0x11c>)
 8000c90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d113      	bne.n	8000cc4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <SystemInit+0x11c>)
 8000c9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ca2:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <SystemInit+0x11c>)
 8000ca4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ca8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cac:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <SystemInit+0x13c>)
 8000cae:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000cb2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <SystemInit+0x11c>)
 8000cb6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cba:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <SystemInit+0x11c>)
 8000cbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cc0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00
 8000cd4:	52002000 	.word	0x52002000
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ce0:	02020200 	.word	0x02020200
 8000ce4:	01ff0000 	.word	0x01ff0000
 8000ce8:	01010280 	.word	0x01010280
 8000cec:	5c001000 	.word	0x5c001000
 8000cf0:	ffff0000 	.word	0xffff0000
 8000cf4:	51008108 	.word	0x51008108
 8000cf8:	52004000 	.word	0x52004000

08000cfc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000d00:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <ExitRun0Mode+0x2c>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <ExitRun0Mode+0x2c>)
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000d0c:	bf00      	nop
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <ExitRun0Mode+0x2c>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0f9      	beq.n	8000d0e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	58024800 	.word	0x58024800

08000d2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d30:	4b22      	ldr	r3, [pc, #136]	@ (8000dbc <MX_USART1_UART_Init+0x90>)
 8000d32:	4a23      	ldr	r2, [pc, #140]	@ (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d36:	4b21      	ldr	r3, [pc, #132]	@ (8000dbc <MX_USART1_UART_Init+0x90>)
 8000d38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dbc <MX_USART1_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	@ (8000dbc <MX_USART1_UART_Init+0x90>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dbc <MX_USART1_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <MX_USART1_UART_Init+0x90>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b19      	ldr	r3, [pc, #100]	@ (8000dbc <MX_USART1_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <MX_USART1_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d62:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <MX_USART1_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d68:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <MX_USART1_UART_Init+0x90>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <MX_USART1_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d74:	4811      	ldr	r0, [pc, #68]	@ (8000dbc <MX_USART1_UART_Init+0x90>)
 8000d76:	f003 faef 	bl	8004358 <HAL_UART_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d80:	f7ff fe2a 	bl	80009d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d84:	2100      	movs	r1, #0
 8000d86:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <MX_USART1_UART_Init+0x90>)
 8000d88:	f004 fb85 	bl	8005496 <HAL_UARTEx_SetTxFifoThreshold>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d92:	f7ff fe21 	bl	80009d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d96:	2100      	movs	r1, #0
 8000d98:	4808      	ldr	r0, [pc, #32]	@ (8000dbc <MX_USART1_UART_Init+0x90>)
 8000d9a:	f004 fbba 	bl	8005512 <HAL_UARTEx_SetRxFifoThreshold>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000da4:	f7ff fe18 	bl	80009d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	@ (8000dbc <MX_USART1_UART_Init+0x90>)
 8000daa:	f004 fb3b 	bl	8005424 <HAL_UARTEx_DisableFifoMode>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000db4:	f7ff fe10 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	2400008c 	.word	0x2400008c
 8000dc0:	40011000 	.word	0x40011000

08000dc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0ba      	sub	sp, #232	@ 0xe8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	22c0      	movs	r2, #192	@ 0xc0
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 fe2b 	bl	8005a40 <memset>
  if(uartHandle->Instance==USART1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a27      	ldr	r2, [pc, #156]	@ (8000e8c <HAL_UART_MspInit+0xc8>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d146      	bne.n	8000e82 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000df4:	f04f 0201 	mov.w	r2, #1
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 fc78 	bl	8002700 <HAL_RCCEx_PeriphCLKConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e16:	f7ff fddf 	bl	80009d8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e90 <HAL_UART_MspInit+0xcc>)
 8000e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e20:	4a1b      	ldr	r2, [pc, #108]	@ (8000e90 <HAL_UART_MspInit+0xcc>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e2a:	4b19      	ldr	r3, [pc, #100]	@ (8000e90 <HAL_UART_MspInit+0xcc>)
 8000e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_UART_MspInit+0xcc>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3e:	4a14      	ldr	r2, [pc, #80]	@ (8000e90 <HAL_UART_MspInit+0xcc>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <HAL_UART_MspInit+0xcc>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000e56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e70:	2307      	movs	r3, #7
 8000e72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <HAL_UART_MspInit+0xd0>)
 8000e7e:	f000 fa55 	bl	800132c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e82:	bf00      	nop
 8000e84:	37e8      	adds	r7, #232	@ 0xe8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40011000 	.word	0x40011000
 8000e90:	58024400 	.word	0x58024400
 8000e94:	58020000 	.word	0x58020000

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000ed4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000e9c:	f7ff ff2e 	bl	8000cfc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea0:	f7ff fe8c 	bl	8000bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea4:	480c      	ldr	r0, [pc, #48]	@ (8000ed8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ea6:	490d      	ldr	r1, [pc, #52]	@ (8000edc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ebc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eca:	f004 fe0d 	bl	8005ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ece:	f7ff fc55 	bl	800077c <main>
  bx  lr
 8000ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ed8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000edc:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000ee0:	080065f0 	.word	0x080065f0
  ldr r2, =_sbss
 8000ee4:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000ee8:	24000270 	.word	0x24000270

08000eec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC3_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	f000 f96e 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000efc:	f001 fa2a 	bl	8002354 <HAL_RCC_GetSysClockFreq>
 8000f00:	4602      	mov	r2, r0
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <HAL_Init+0x68>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	0a1b      	lsrs	r3, r3, #8
 8000f08:	f003 030f 	and.w	r3, r3, #15
 8000f0c:	4913      	ldr	r1, [pc, #76]	@ (8000f5c <HAL_Init+0x6c>)
 8000f0e:	5ccb      	ldrb	r3, [r1, r3]
 8000f10:	f003 031f 	and.w	r3, r3, #31
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <HAL_Init+0x68>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	4a0e      	ldr	r2, [pc, #56]	@ (8000f5c <HAL_Init+0x6c>)
 8000f24:	5cd3      	ldrb	r3, [r2, r3]
 8000f26:	f003 031f 	and.w	r3, r3, #31
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	4a0b      	ldr	r2, [pc, #44]	@ (8000f60 <HAL_Init+0x70>)
 8000f32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f34:	4a0b      	ldr	r2, [pc, #44]	@ (8000f64 <HAL_Init+0x74>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f000 f814 	bl	8000f68 <HAL_InitTick>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e002      	b.n	8000f50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4a:	f7ff fd4b 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	58024400 	.word	0x58024400
 8000f5c:	08006574 	.word	0x08006574
 8000f60:	24000004 	.word	0x24000004
 8000f64:	24000000 	.word	0x24000000

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <HAL_InitTick+0x60>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e021      	b.n	8000fc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f7c:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <HAL_InitTick+0x64>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <HAL_InitTick+0x60>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f945 	bl	8001222 <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00e      	b.n	8000fc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d80a      	bhi.n	8000fbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f000 f91d 	bl	80011ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4a06      	ldr	r2, [pc, #24]	@ (8000fd0 <HAL_InitTick+0x68>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2400000c 	.word	0x2400000c
 8000fcc:	24000000 	.word	0x24000000
 8000fd0:	24000008 	.word	0x24000008

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	2400000c 	.word	0x2400000c
 8000ff8:	24000120 	.word	0x24000120

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	24000120 	.word	0x24000120

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff ffee 	bl	8000ffc <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <HAL_Delay+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffde 	bl	8000ffc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2400000c 	.word	0x2400000c

0800105c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001060:	4b03      	ldr	r3, [pc, #12]	@ (8001070 <HAL_GetREVID+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	0c1b      	lsrs	r3, r3, #16
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	5c001000 	.word	0x5c001000

08001074 <__NVIC_SetPriorityGrouping>:
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <__NVIC_SetPriorityGrouping+0x40>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	05fa0000 	.word	0x05fa0000

080010bc <__NVIC_GetPriorityGrouping>:
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_SetPriority>:
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db0a      	blt.n	8001102 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	490c      	ldr	r1, [pc, #48]	@ (8001124 <__NVIC_SetPriority+0x4c>)
 80010f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f6:	0112      	lsls	r2, r2, #4
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	440b      	add	r3, r1
 80010fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001100:	e00a      	b.n	8001118 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4908      	ldr	r1, [pc, #32]	@ (8001128 <__NVIC_SetPriority+0x50>)
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	3b04      	subs	r3, #4
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	440b      	add	r3, r1
 8001116:	761a      	strb	r2, [r3, #24]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <NVIC_EncodePriority>:
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	@ 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f1c3 0307 	rsb	r3, r3, #7
 8001146:	2b04      	cmp	r3, #4
 8001148:	bf28      	it	cs
 800114a:	2304      	movcs	r3, #4
 800114c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3304      	adds	r3, #4
 8001152:	2b06      	cmp	r3, #6
 8001154:	d902      	bls.n	800115c <NVIC_EncodePriority+0x30>
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3b03      	subs	r3, #3
 800115a:	e000      	b.n	800115e <NVIC_EncodePriority+0x32>
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	f04f 32ff 	mov.w	r2, #4294967295
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43da      	mvns	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	401a      	ands	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43d9      	mvns	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	4313      	orrs	r3, r2
}
 8001186:	4618      	mov	r0, r3
 8001188:	3724      	adds	r7, #36	@ 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f7ff ff8e 	bl	80010d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff47 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011fc:	f7ff ff5e 	bl	80010bc <__NVIC_GetPriorityGrouping>
 8001200:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	6978      	ldr	r0, [r7, #20]
 8001208:	f7ff ff90 	bl	800112c <NVIC_EncodePriority>
 800120c:	4602      	mov	r2, r0
 800120e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff5f 	bl	80010d8 <__NVIC_SetPriority>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffb2 	bl	8001194 <SysTick_Config>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001240:	f3bf 8f5f 	dmb	sy
}
 8001244:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <HAL_MPU_Disable+0x28>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124a:	4a06      	ldr	r2, [pc, #24]	@ (8001264 <HAL_MPU_Disable+0x28>)
 800124c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001250:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001252:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <HAL_MPU_Disable+0x2c>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	e000ed90 	.word	0xe000ed90

0800126c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001274:	4a0b      	ldr	r2, [pc, #44]	@ (80012a4 <HAL_MPU_Enable+0x38>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800127e:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <HAL_MPU_Enable+0x3c>)
 8001280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001282:	4a09      	ldr	r2, [pc, #36]	@ (80012a8 <HAL_MPU_Enable+0x3c>)
 8001284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001288:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800128a:	f3bf 8f4f 	dsb	sy
}
 800128e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001290:	f3bf 8f6f 	isb	sy
}
 8001294:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed90 	.word	0xe000ed90
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	785a      	ldrb	r2, [r3, #1]
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <HAL_MPU_ConfigRegion+0x7c>)
 80012ba:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <HAL_MPU_ConfigRegion+0x7c>)
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	4a19      	ldr	r2, [pc, #100]	@ (8001328 <HAL_MPU_ConfigRegion+0x7c>)
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80012c8:	4a17      	ldr	r2, [pc, #92]	@ (8001328 <HAL_MPU_ConfigRegion+0x7c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7b1b      	ldrb	r3, [r3, #12]
 80012d4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7adb      	ldrb	r3, [r3, #11]
 80012da:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7a9b      	ldrb	r3, [r3, #10]
 80012e2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7b5b      	ldrb	r3, [r3, #13]
 80012ea:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7b9b      	ldrb	r3, [r3, #14]
 80012f2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7bdb      	ldrb	r3, [r3, #15]
 80012fa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7a5b      	ldrb	r3, [r3, #9]
 8001302:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001304:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7a1b      	ldrb	r3, [r3, #8]
 800130a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800130c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	7812      	ldrb	r2, [r2, #0]
 8001312:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001314:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001316:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001318:	6113      	str	r3, [r2, #16]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed90 	.word	0xe000ed90

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	@ 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800133a:	4b89      	ldr	r3, [pc, #548]	@ (8001560 <HAL_GPIO_Init+0x234>)
 800133c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800133e:	e194      	b.n	800166a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2101      	movs	r1, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8186 	beq.w	8001664 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d005      	beq.n	8001370 <HAL_GPIO_Init+0x44>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d130      	bne.n	80013d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013a6:	2201      	movs	r2, #1
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	f003 0201 	and.w	r2, r3, #1
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d017      	beq.n	800140e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d123      	bne.n	8001462 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	220f      	movs	r2, #15
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	691a      	ldr	r2, [r3, #16]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	69b9      	ldr	r1, [r7, #24]
 800145e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0203 	and.w	r2, r3, #3
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 80e0 	beq.w	8001664 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001564 <HAL_GPIO_Init+0x238>)
 80014a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001564 <HAL_GPIO_Init+0x238>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001564 <HAL_GPIO_Init+0x238>)
 80014b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c2:	4a29      	ldr	r2, [pc, #164]	@ (8001568 <HAL_GPIO_Init+0x23c>)
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	089b      	lsrs	r3, r3, #2
 80014c8:	3302      	adds	r3, #2
 80014ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	220f      	movs	r2, #15
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a20      	ldr	r2, [pc, #128]	@ (800156c <HAL_GPIO_Init+0x240>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d052      	beq.n	8001594 <HAL_GPIO_Init+0x268>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001570 <HAL_GPIO_Init+0x244>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d031      	beq.n	800155a <HAL_GPIO_Init+0x22e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001574 <HAL_GPIO_Init+0x248>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d02b      	beq.n	8001556 <HAL_GPIO_Init+0x22a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a1d      	ldr	r2, [pc, #116]	@ (8001578 <HAL_GPIO_Init+0x24c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d025      	beq.n	8001552 <HAL_GPIO_Init+0x226>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a1c      	ldr	r2, [pc, #112]	@ (800157c <HAL_GPIO_Init+0x250>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d01f      	beq.n	800154e <HAL_GPIO_Init+0x222>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a1b      	ldr	r2, [pc, #108]	@ (8001580 <HAL_GPIO_Init+0x254>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d019      	beq.n	800154a <HAL_GPIO_Init+0x21e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a1a      	ldr	r2, [pc, #104]	@ (8001584 <HAL_GPIO_Init+0x258>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d013      	beq.n	8001546 <HAL_GPIO_Init+0x21a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a19      	ldr	r2, [pc, #100]	@ (8001588 <HAL_GPIO_Init+0x25c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d00d      	beq.n	8001542 <HAL_GPIO_Init+0x216>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a18      	ldr	r2, [pc, #96]	@ (800158c <HAL_GPIO_Init+0x260>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d007      	beq.n	800153e <HAL_GPIO_Init+0x212>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a17      	ldr	r2, [pc, #92]	@ (8001590 <HAL_GPIO_Init+0x264>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d101      	bne.n	800153a <HAL_GPIO_Init+0x20e>
 8001536:	2309      	movs	r3, #9
 8001538:	e02d      	b.n	8001596 <HAL_GPIO_Init+0x26a>
 800153a:	230a      	movs	r3, #10
 800153c:	e02b      	b.n	8001596 <HAL_GPIO_Init+0x26a>
 800153e:	2308      	movs	r3, #8
 8001540:	e029      	b.n	8001596 <HAL_GPIO_Init+0x26a>
 8001542:	2307      	movs	r3, #7
 8001544:	e027      	b.n	8001596 <HAL_GPIO_Init+0x26a>
 8001546:	2306      	movs	r3, #6
 8001548:	e025      	b.n	8001596 <HAL_GPIO_Init+0x26a>
 800154a:	2305      	movs	r3, #5
 800154c:	e023      	b.n	8001596 <HAL_GPIO_Init+0x26a>
 800154e:	2304      	movs	r3, #4
 8001550:	e021      	b.n	8001596 <HAL_GPIO_Init+0x26a>
 8001552:	2303      	movs	r3, #3
 8001554:	e01f      	b.n	8001596 <HAL_GPIO_Init+0x26a>
 8001556:	2302      	movs	r3, #2
 8001558:	e01d      	b.n	8001596 <HAL_GPIO_Init+0x26a>
 800155a:	2301      	movs	r3, #1
 800155c:	e01b      	b.n	8001596 <HAL_GPIO_Init+0x26a>
 800155e:	bf00      	nop
 8001560:	58000080 	.word	0x58000080
 8001564:	58024400 	.word	0x58024400
 8001568:	58000400 	.word	0x58000400
 800156c:	58020000 	.word	0x58020000
 8001570:	58020400 	.word	0x58020400
 8001574:	58020800 	.word	0x58020800
 8001578:	58020c00 	.word	0x58020c00
 800157c:	58021000 	.word	0x58021000
 8001580:	58021400 	.word	0x58021400
 8001584:	58021800 	.word	0x58021800
 8001588:	58021c00 	.word	0x58021c00
 800158c:	58022000 	.word	0x58022000
 8001590:	58022400 	.word	0x58022400
 8001594:	2300      	movs	r3, #0
 8001596:	69fa      	ldr	r2, [r7, #28]
 8001598:	f002 0203 	and.w	r2, r2, #3
 800159c:	0092      	lsls	r2, r2, #2
 800159e:	4093      	lsls	r3, r2
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a6:	4938      	ldr	r1, [pc, #224]	@ (8001688 <HAL_GPIO_Init+0x35c>)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001608:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	3301      	adds	r3, #1
 8001668:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	f47f ae63 	bne.w	8001340 <HAL_GPIO_Init+0x14>
  }
}
 800167a:	bf00      	nop
 800167c:	bf00      	nop
 800167e:	3724      	adds	r7, #36	@ 0x24
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	58000400 	.word	0x58000400

0800168c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
 8001698:	4613      	mov	r3, r2
 800169a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800169c:	787b      	ldrb	r3, [r7, #1]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80016a8:	e003      	b.n	80016b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016aa:	887b      	ldrh	r3, [r7, #2]
 80016ac:	041a      	lsls	r2, r3, #16
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	619a      	str	r2, [r3, #24]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80016c8:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <HAL_PWREx_ConfigSupply+0x70>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d00a      	beq.n	80016ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016d4:	4b16      	ldr	r3, [pc, #88]	@ (8001730 <HAL_PWREx_ConfigSupply+0x70>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d001      	beq.n	80016e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e01f      	b.n	8001726 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e01d      	b.n	8001726 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016ea:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <HAL_PWREx_ConfigSupply+0x70>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f023 0207 	bic.w	r2, r3, #7
 80016f2:	490f      	ldr	r1, [pc, #60]	@ (8001730 <HAL_PWREx_ConfigSupply+0x70>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80016fa:	f7ff fc7f 	bl	8000ffc <HAL_GetTick>
 80016fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001700:	e009      	b.n	8001716 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001702:	f7ff fc7b 	bl	8000ffc <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001710:	d901      	bls.n	8001716 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e007      	b.n	8001726 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001716:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_PWREx_ConfigSupply+0x70>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800171e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001722:	d1ee      	bne.n	8001702 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	58024800 	.word	0x58024800

08001734 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	@ 0x30
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	f000 bc48 	b.w	8001fd8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 8088 	beq.w	8001866 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001756:	4b99      	ldr	r3, [pc, #612]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800175e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001760:	4b96      	ldr	r3, [pc, #600]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001764:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001768:	2b10      	cmp	r3, #16
 800176a:	d007      	beq.n	800177c <HAL_RCC_OscConfig+0x48>
 800176c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800176e:	2b18      	cmp	r3, #24
 8001770:	d111      	bne.n	8001796 <HAL_RCC_OscConfig+0x62>
 8001772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d10c      	bne.n	8001796 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	4b8f      	ldr	r3, [pc, #572]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d06d      	beq.n	8001864 <HAL_RCC_OscConfig+0x130>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d169      	bne.n	8001864 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	f000 bc21 	b.w	8001fd8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800179e:	d106      	bne.n	80017ae <HAL_RCC_OscConfig+0x7a>
 80017a0:	4b86      	ldr	r3, [pc, #536]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a85      	ldr	r2, [pc, #532]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80017a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	e02e      	b.n	800180c <HAL_RCC_OscConfig+0xd8>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x9c>
 80017b6:	4b81      	ldr	r3, [pc, #516]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a80      	ldr	r2, [pc, #512]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80017bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4b7e      	ldr	r3, [pc, #504]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a7d      	ldr	r2, [pc, #500]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80017c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e01d      	b.n	800180c <HAL_RCC_OscConfig+0xd8>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d8:	d10c      	bne.n	80017f4 <HAL_RCC_OscConfig+0xc0>
 80017da:	4b78      	ldr	r3, [pc, #480]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a77      	ldr	r2, [pc, #476]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80017e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b75      	ldr	r3, [pc, #468]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a74      	ldr	r2, [pc, #464]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e00b      	b.n	800180c <HAL_RCC_OscConfig+0xd8>
 80017f4:	4b71      	ldr	r3, [pc, #452]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a70      	ldr	r2, [pc, #448]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80017fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b6e      	ldr	r3, [pc, #440]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a6d      	ldr	r2, [pc, #436]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800180a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d013      	beq.n	800183c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fbf2 	bl	8000ffc <HAL_GetTick>
 8001818:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fbee 	bl	8000ffc <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	@ 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e3d4      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800182e:	4b63      	ldr	r3, [pc, #396]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0xe8>
 800183a:	e014      	b.n	8001866 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fbde 	bl	8000ffc <HAL_GetTick>
 8001840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff fbda 	bl	8000ffc <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	@ 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e3c0      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001856:	4b59      	ldr	r3, [pc, #356]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x110>
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80ca 	beq.w	8001a08 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001874:	4b51      	ldr	r3, [pc, #324]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800187c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800187e:	4b4f      	ldr	r3, [pc, #316]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001882:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <HAL_RCC_OscConfig+0x166>
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	2b18      	cmp	r3, #24
 800188e:	d156      	bne.n	800193e <HAL_RCC_OscConfig+0x20a>
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d151      	bne.n	800193e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800189a:	4b48      	ldr	r3, [pc, #288]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d005      	beq.n	80018b2 <HAL_RCC_OscConfig+0x17e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e392      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018b2:	4b42      	ldr	r3, [pc, #264]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 0219 	bic.w	r2, r3, #25
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	493f      	ldr	r1, [pc, #252]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fb9a 	bl	8000ffc <HAL_GetTick>
 80018c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018cc:	f7ff fb96 	bl	8000ffc <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e37c      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018de:	4b37      	ldr	r3, [pc, #220]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	f7ff fbb7 	bl	800105c <HAL_GetREVID>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d817      	bhi.n	8001928 <HAL_RCC_OscConfig+0x1f4>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	2b40      	cmp	r3, #64	@ 0x40
 80018fe:	d108      	bne.n	8001912 <HAL_RCC_OscConfig+0x1de>
 8001900:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001908:	4a2c      	ldr	r2, [pc, #176]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 800190a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800190e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001910:	e07a      	b.n	8001a08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	4b2a      	ldr	r3, [pc, #168]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	031b      	lsls	r3, r3, #12
 8001920:	4926      	ldr	r1, [pc, #152]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001922:	4313      	orrs	r3, r2
 8001924:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001926:	e06f      	b.n	8001a08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	4921      	ldr	r1, [pc, #132]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800193c:	e064      	b.n	8001a08 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d047      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001946:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 0219 	bic.w	r2, r3, #25
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	491a      	ldr	r1, [pc, #104]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff fb50 	bl	8000ffc <HAL_GetTick>
 800195c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001960:	f7ff fb4c 	bl	8000ffc <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e332      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001972:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197e:	f7ff fb6d 	bl	800105c <HAL_GetREVID>
 8001982:	4603      	mov	r3, r0
 8001984:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001988:	4293      	cmp	r3, r2
 800198a:	d819      	bhi.n	80019c0 <HAL_RCC_OscConfig+0x28c>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	2b40      	cmp	r3, #64	@ 0x40
 8001992:	d108      	bne.n	80019a6 <HAL_RCC_OscConfig+0x272>
 8001994:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800199c:	4a07      	ldr	r2, [pc, #28]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 800199e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a2:	6053      	str	r3, [r2, #4]
 80019a4:	e030      	b.n	8001a08 <HAL_RCC_OscConfig+0x2d4>
 80019a6:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	031b      	lsls	r3, r3, #12
 80019b4:	4901      	ldr	r1, [pc, #4]	@ (80019bc <HAL_RCC_OscConfig+0x288>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]
 80019ba:	e025      	b.n	8001a08 <HAL_RCC_OscConfig+0x2d4>
 80019bc:	58024400 	.word	0x58024400
 80019c0:	4b9a      	ldr	r3, [pc, #616]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	061b      	lsls	r3, r3, #24
 80019ce:	4997      	ldr	r1, [pc, #604]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
 80019d4:	e018      	b.n	8001a08 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d6:	4b95      	ldr	r3, [pc, #596]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a94      	ldr	r2, [pc, #592]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e2:	f7ff fb0b 	bl	8000ffc <HAL_GetTick>
 80019e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ea:	f7ff fb07 	bl	8000ffc <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e2ed      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019fc:	4b8b      	ldr	r3, [pc, #556]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0310 	and.w	r3, r3, #16
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80a9 	beq.w	8001b68 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a16:	4b85      	ldr	r3, [pc, #532]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a20:	4b82      	ldr	r3, [pc, #520]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a24:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d007      	beq.n	8001a3c <HAL_RCC_OscConfig+0x308>
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b18      	cmp	r3, #24
 8001a30:	d13a      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x374>
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d135      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a3c:	4b7b      	ldr	r3, [pc, #492]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_OscConfig+0x320>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	2b80      	cmp	r3, #128	@ 0x80
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e2c1      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a54:	f7ff fb02 	bl	800105c <HAL_GetREVID>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d817      	bhi.n	8001a92 <HAL_RCC_OscConfig+0x35e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	d108      	bne.n	8001a7c <HAL_RCC_OscConfig+0x348>
 8001a6a:	4b70      	ldr	r3, [pc, #448]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001a72:	4a6e      	ldr	r2, [pc, #440]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001a74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a78:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a7a:	e075      	b.n	8001b68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a7c:	4b6b      	ldr	r3, [pc, #428]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	069b      	lsls	r3, r3, #26
 8001a8a:	4968      	ldr	r1, [pc, #416]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a90:	e06a      	b.n	8001b68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a92:	4b66      	ldr	r3, [pc, #408]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	061b      	lsls	r3, r3, #24
 8001aa0:	4962      	ldr	r1, [pc, #392]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aa6:	e05f      	b.n	8001b68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d042      	beq.n	8001b36 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ab0:	4b5e      	ldr	r3, [pc, #376]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a5d      	ldr	r2, [pc, #372]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff fa9e 	bl	8000ffc <HAL_GetTick>
 8001ac0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ac4:	f7ff fa9a 	bl	8000ffc <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e280      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ad6:	4b55      	ldr	r3, [pc, #340]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ae2:	f7ff fabb 	bl	800105c <HAL_GetREVID>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d817      	bhi.n	8001b20 <HAL_RCC_OscConfig+0x3ec>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	2b20      	cmp	r3, #32
 8001af6:	d108      	bne.n	8001b0a <HAL_RCC_OscConfig+0x3d6>
 8001af8:	4b4c      	ldr	r3, [pc, #304]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b00:	4a4a      	ldr	r2, [pc, #296]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001b02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b06:	6053      	str	r3, [r2, #4]
 8001b08:	e02e      	b.n	8001b68 <HAL_RCC_OscConfig+0x434>
 8001b0a:	4b48      	ldr	r3, [pc, #288]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	069b      	lsls	r3, r3, #26
 8001b18:	4944      	ldr	r1, [pc, #272]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
 8001b1e:	e023      	b.n	8001b68 <HAL_RCC_OscConfig+0x434>
 8001b20:	4b42      	ldr	r3, [pc, #264]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	061b      	lsls	r3, r3, #24
 8001b2e:	493f      	ldr	r1, [pc, #252]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60cb      	str	r3, [r1, #12]
 8001b34:	e018      	b.n	8001b68 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b36:	4b3d      	ldr	r3, [pc, #244]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001b3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7ff fa5b 	bl	8000ffc <HAL_GetTick>
 8001b46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fa57 	bl	8000ffc <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e23d      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b5c:	4b33      	ldr	r3, [pc, #204]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f0      	bne.n	8001b4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d036      	beq.n	8001be2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d019      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b80:	4a2a      	ldr	r2, [pc, #168]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff fa38 	bl	8000ffc <HAL_GetTick>
 8001b8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b90:	f7ff fa34 	bl	8000ffc <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e21a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ba2:	4b22      	ldr	r3, [pc, #136]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x45c>
 8001bae:	e018      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fa1e 	bl	8000ffc <HAL_GetTick>
 8001bc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fa1a 	bl	8000ffc <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e200      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bd6:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d039      	beq.n	8001c62 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d01c      	beq.n	8001c30 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001bfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c02:	f7ff f9fb 	bl	8000ffc <HAL_GetTick>
 8001c06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c0a:	f7ff f9f7 	bl	8000ffc <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e1dd      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c1c:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <HAL_RCC_OscConfig+0x4f8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x4d6>
 8001c28:	e01b      	b.n	8001c62 <HAL_RCC_OscConfig+0x52e>
 8001c2a:	bf00      	nop
 8001c2c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c30:	4b9b      	ldr	r3, [pc, #620]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a9a      	ldr	r2, [pc, #616]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001c36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c3c:	f7ff f9de 	bl	8000ffc <HAL_GetTick>
 8001c40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c44:	f7ff f9da 	bl	8000ffc <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e1c0      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c56:	4b92      	ldr	r3, [pc, #584]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8081 	beq.w	8001d72 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c70:	4b8c      	ldr	r3, [pc, #560]	@ (8001ea4 <HAL_RCC_OscConfig+0x770>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a8b      	ldr	r2, [pc, #556]	@ (8001ea4 <HAL_RCC_OscConfig+0x770>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c7c:	f7ff f9be 	bl	8000ffc <HAL_GetTick>
 8001c80:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c84:	f7ff f9ba 	bl	8000ffc <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	@ 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1a0      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c96:	4b83      	ldr	r3, [pc, #524]	@ (8001ea4 <HAL_RCC_OscConfig+0x770>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d106      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x584>
 8001caa:	4b7d      	ldr	r3, [pc, #500]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cae:	4a7c      	ldr	r2, [pc, #496]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb6:	e02d      	b.n	8001d14 <HAL_RCC_OscConfig+0x5e0>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10c      	bne.n	8001cda <HAL_RCC_OscConfig+0x5a6>
 8001cc0:	4b77      	ldr	r3, [pc, #476]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc4:	4a76      	ldr	r2, [pc, #472]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ccc:	4b74      	ldr	r3, [pc, #464]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd0:	4a73      	ldr	r2, [pc, #460]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001cd2:	f023 0304 	bic.w	r3, r3, #4
 8001cd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cd8:	e01c      	b.n	8001d14 <HAL_RCC_OscConfig+0x5e0>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x5c8>
 8001ce2:	4b6f      	ldr	r3, [pc, #444]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce6:	4a6e      	ldr	r2, [pc, #440]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cee:	4b6c      	ldr	r3, [pc, #432]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf2:	4a6b      	ldr	r2, [pc, #428]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0x5e0>
 8001cfc:	4b68      	ldr	r3, [pc, #416]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d00:	4a67      	ldr	r2, [pc, #412]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d08:	4b65      	ldr	r3, [pc, #404]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0c:	4a64      	ldr	r2, [pc, #400]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001d0e:	f023 0304 	bic.w	r3, r3, #4
 8001d12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d015      	beq.n	8001d48 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f96e 	bl	8000ffc <HAL_GetTick>
 8001d20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7ff f96a 	bl	8000ffc <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e14e      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d3a:	4b59      	ldr	r3, [pc, #356]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0ee      	beq.n	8001d24 <HAL_RCC_OscConfig+0x5f0>
 8001d46:	e014      	b.n	8001d72 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7ff f958 	bl	8000ffc <HAL_GetTick>
 8001d4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d50:	f7ff f954 	bl	8000ffc <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e138      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d66:	4b4e      	ldr	r3, [pc, #312]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1ee      	bne.n	8001d50 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 812d 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d7c:	4b48      	ldr	r3, [pc, #288]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d84:	2b18      	cmp	r3, #24
 8001d86:	f000 80bd 	beq.w	8001f04 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	f040 809e 	bne.w	8001ed0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d94:	4b42      	ldr	r3, [pc, #264]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a41      	ldr	r2, [pc, #260]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001d9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f92c 	bl	8000ffc <HAL_GetTick>
 8001da4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff f928 	bl	8000ffc <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e10e      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dba:	4b39      	ldr	r3, [pc, #228]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc6:	4b36      	ldr	r3, [pc, #216]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001dc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dca:	4b37      	ldr	r3, [pc, #220]	@ (8001ea8 <HAL_RCC_OscConfig+0x774>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	4931      	ldr	r1, [pc, #196]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	628b      	str	r3, [r1, #40]	@ 0x28
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de4:	3b01      	subs	r3, #1
 8001de6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dee:	3b01      	subs	r3, #1
 8001df0:	025b      	lsls	r3, r3, #9
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	061b      	lsls	r3, r3, #24
 8001e0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001e10:	4923      	ldr	r1, [pc, #140]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e16:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1a:	4a21      	ldr	r2, [pc, #132]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e22:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e26:	4b21      	ldr	r3, [pc, #132]	@ (8001eac <HAL_RCC_OscConfig+0x778>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e2e:	00d2      	lsls	r2, r2, #3
 8001e30:	491b      	ldr	r1, [pc, #108]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3a:	f023 020c 	bic.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	4917      	ldr	r1, [pc, #92]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e48:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4c:	f023 0202 	bic.w	r2, r3, #2
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e54:	4912      	ldr	r1, [pc, #72]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001e7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e82:	4a07      	ldr	r2, [pc, #28]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <HAL_RCC_OscConfig+0x76c>)
 8001e90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff f8b1 	bl	8000ffc <HAL_GetTick>
 8001e9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e9c:	e011      	b.n	8001ec2 <HAL_RCC_OscConfig+0x78e>
 8001e9e:	bf00      	nop
 8001ea0:	58024400 	.word	0x58024400
 8001ea4:	58024800 	.word	0x58024800
 8001ea8:	fffffc0c 	.word	0xfffffc0c
 8001eac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7ff f8a4 	bl	8000ffc <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e08a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ec2:	4b47      	ldr	r3, [pc, #284]	@ (8001fe0 <HAL_RCC_OscConfig+0x8ac>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x77c>
 8001ece:	e082      	b.n	8001fd6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed0:	4b43      	ldr	r3, [pc, #268]	@ (8001fe0 <HAL_RCC_OscConfig+0x8ac>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a42      	ldr	r2, [pc, #264]	@ (8001fe0 <HAL_RCC_OscConfig+0x8ac>)
 8001ed6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff f88e 	bl	8000ffc <HAL_GetTick>
 8001ee0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff f88a 	bl	8000ffc <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e070      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe0 <HAL_RCC_OscConfig+0x8ac>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x7b0>
 8001f02:	e068      	b.n	8001fd6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f04:	4b36      	ldr	r3, [pc, #216]	@ (8001fe0 <HAL_RCC_OscConfig+0x8ac>)
 8001f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f0a:	4b35      	ldr	r3, [pc, #212]	@ (8001fe0 <HAL_RCC_OscConfig+0x8ac>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d031      	beq.n	8001f7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	f003 0203 	and.w	r2, r3, #3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d12a      	bne.n	8001f7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d122      	bne.n	8001f7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f40:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d11a      	bne.n	8001f7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	0a5b      	lsrs	r3, r3, #9
 8001f4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d111      	bne.n	8001f7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	0c1b      	lsrs	r3, r3, #16
 8001f5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d108      	bne.n	8001f7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	0e1b      	lsrs	r3, r3, #24
 8001f6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f76:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e02b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001f80:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <HAL_RCC_OscConfig+0x8ac>)
 8001f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f84:	08db      	lsrs	r3, r3, #3
 8001f86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f8a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d01f      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001f96:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <HAL_RCC_OscConfig+0x8ac>)
 8001f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9a:	4a11      	ldr	r2, [pc, #68]	@ (8001fe0 <HAL_RCC_OscConfig+0x8ac>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fa2:	f7ff f82b 	bl	8000ffc <HAL_GetTick>
 8001fa6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001fa8:	bf00      	nop
 8001faa:	f7ff f827 	bl	8000ffc <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d0f9      	beq.n	8001faa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <HAL_RCC_OscConfig+0x8ac>)
 8001fb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_RCC_OscConfig+0x8b0>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fc2:	00d2      	lsls	r2, r2, #3
 8001fc4:	4906      	ldr	r1, [pc, #24]	@ (8001fe0 <HAL_RCC_OscConfig+0x8ac>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001fca:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <HAL_RCC_OscConfig+0x8ac>)
 8001fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fce:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <HAL_RCC_OscConfig+0x8ac>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3730      	adds	r7, #48	@ 0x30
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	58024400 	.word	0x58024400
 8001fe4:	ffff0007 	.word	0xffff0007

08001fe8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e19c      	b.n	8002336 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b8a      	ldr	r3, [pc, #552]	@ (8002228 <HAL_RCC_ClockConfig+0x240>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d910      	bls.n	800202c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b87      	ldr	r3, [pc, #540]	@ (8002228 <HAL_RCC_ClockConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 020f 	bic.w	r2, r3, #15
 8002012:	4985      	ldr	r1, [pc, #532]	@ (8002228 <HAL_RCC_ClockConfig+0x240>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b83      	ldr	r3, [pc, #524]	@ (8002228 <HAL_RCC_ClockConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e184      	b.n	8002336 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d010      	beq.n	800205a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	4b7b      	ldr	r3, [pc, #492]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002044:	429a      	cmp	r2, r3
 8002046:	d908      	bls.n	800205a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002048:	4b78      	ldr	r3, [pc, #480]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	4975      	ldr	r1, [pc, #468]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 8002056:	4313      	orrs	r3, r2
 8002058:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d010      	beq.n	8002088 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	4b70      	ldr	r3, [pc, #448]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002072:	429a      	cmp	r2, r3
 8002074:	d908      	bls.n	8002088 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002076:	4b6d      	ldr	r3, [pc, #436]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	496a      	ldr	r1, [pc, #424]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 8002084:	4313      	orrs	r3, r2
 8002086:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	d010      	beq.n	80020b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	4b64      	ldr	r3, [pc, #400]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d908      	bls.n	80020b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020a4:	4b61      	ldr	r3, [pc, #388]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	495e      	ldr	r1, [pc, #376]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d010      	beq.n	80020e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69da      	ldr	r2, [r3, #28]
 80020c6:	4b59      	ldr	r3, [pc, #356]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d908      	bls.n	80020e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80020d2:	4b56      	ldr	r3, [pc, #344]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4953      	ldr	r1, [pc, #332]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d010      	beq.n	8002112 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	4b4d      	ldr	r3, [pc, #308]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d908      	bls.n	8002112 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002100:	4b4a      	ldr	r3, [pc, #296]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f023 020f 	bic.w	r2, r3, #15
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4947      	ldr	r1, [pc, #284]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 800210e:	4313      	orrs	r3, r2
 8002110:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d055      	beq.n	80021ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800211e:	4b43      	ldr	r3, [pc, #268]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	4940      	ldr	r1, [pc, #256]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 800212c:	4313      	orrs	r3, r2
 800212e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d107      	bne.n	8002148 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002138:	4b3c      	ldr	r3, [pc, #240]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d121      	bne.n	8002188 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0f6      	b.n	8002336 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002150:	4b36      	ldr	r3, [pc, #216]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d115      	bne.n	8002188 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0ea      	b.n	8002336 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d107      	bne.n	8002178 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002168:	4b30      	ldr	r3, [pc, #192]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0de      	b.n	8002336 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002178:	4b2c      	ldr	r3, [pc, #176]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0d6      	b.n	8002336 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002188:	4b28      	ldr	r3, [pc, #160]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	f023 0207 	bic.w	r2, r3, #7
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4925      	ldr	r1, [pc, #148]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 8002196:	4313      	orrs	r3, r2
 8002198:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800219a:	f7fe ff2f 	bl	8000ffc <HAL_GetTick>
 800219e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a2:	f7fe ff2b 	bl	8000ffc <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e0be      	b.n	8002336 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b8:	4b1c      	ldr	r3, [pc, #112]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d1eb      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d010      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	4b14      	ldr	r3, [pc, #80]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d208      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e6:	4b11      	ldr	r3, [pc, #68]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f023 020f 	bic.w	r2, r3, #15
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	490e      	ldr	r1, [pc, #56]	@ (800222c <HAL_RCC_ClockConfig+0x244>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <HAL_RCC_ClockConfig+0x240>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d214      	bcs.n	8002230 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <HAL_RCC_ClockConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 020f 	bic.w	r2, r3, #15
 800220e:	4906      	ldr	r1, [pc, #24]	@ (8002228 <HAL_RCC_ClockConfig+0x240>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b04      	ldr	r3, [pc, #16]	@ (8002228 <HAL_RCC_ClockConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e086      	b.n	8002336 <HAL_RCC_ClockConfig+0x34e>
 8002228:	52002000 	.word	0x52002000
 800222c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d010      	beq.n	800225e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	4b3f      	ldr	r3, [pc, #252]	@ (8002340 <HAL_RCC_ClockConfig+0x358>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002248:	429a      	cmp	r2, r3
 800224a:	d208      	bcs.n	800225e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800224c:	4b3c      	ldr	r3, [pc, #240]	@ (8002340 <HAL_RCC_ClockConfig+0x358>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	4939      	ldr	r1, [pc, #228]	@ (8002340 <HAL_RCC_ClockConfig+0x358>)
 800225a:	4313      	orrs	r3, r2
 800225c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d010      	beq.n	800228c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	4b34      	ldr	r3, [pc, #208]	@ (8002340 <HAL_RCC_ClockConfig+0x358>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002276:	429a      	cmp	r2, r3
 8002278:	d208      	bcs.n	800228c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800227a:	4b31      	ldr	r3, [pc, #196]	@ (8002340 <HAL_RCC_ClockConfig+0x358>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	492e      	ldr	r1, [pc, #184]	@ (8002340 <HAL_RCC_ClockConfig+0x358>)
 8002288:	4313      	orrs	r3, r2
 800228a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d010      	beq.n	80022ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <HAL_RCC_ClockConfig+0x358>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d208      	bcs.n	80022ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022a8:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <HAL_RCC_ClockConfig+0x358>)
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	4922      	ldr	r1, [pc, #136]	@ (8002340 <HAL_RCC_ClockConfig+0x358>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d010      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <HAL_RCC_ClockConfig+0x358>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d208      	bcs.n	80022e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80022d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <HAL_RCC_ClockConfig+0x358>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4917      	ldr	r1, [pc, #92]	@ (8002340 <HAL_RCC_ClockConfig+0x358>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022e8:	f000 f834 	bl	8002354 <HAL_RCC_GetSysClockFreq>
 80022ec:	4602      	mov	r2, r0
 80022ee:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <HAL_RCC_ClockConfig+0x358>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	4912      	ldr	r1, [pc, #72]	@ (8002344 <HAL_RCC_ClockConfig+0x35c>)
 80022fa:	5ccb      	ldrb	r3, [r1, r3]
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
 8002304:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002306:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <HAL_RCC_ClockConfig+0x358>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	4a0d      	ldr	r2, [pc, #52]	@ (8002344 <HAL_RCC_ClockConfig+0x35c>)
 8002310:	5cd3      	ldrb	r3, [r2, r3]
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
 800231c:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <HAL_RCC_ClockConfig+0x360>)
 800231e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002320:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <HAL_RCC_ClockConfig+0x364>)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002326:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <HAL_RCC_ClockConfig+0x368>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe fe1c 	bl	8000f68 <HAL_InitTick>
 8002330:	4603      	mov	r3, r0
 8002332:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	58024400 	.word	0x58024400
 8002344:	08006574 	.word	0x08006574
 8002348:	24000004 	.word	0x24000004
 800234c:	24000000 	.word	0x24000000
 8002350:	24000008 	.word	0x24000008

08002354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	@ 0x24
 8002358:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800235a:	4bb3      	ldr	r3, [pc, #716]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002362:	2b18      	cmp	r3, #24
 8002364:	f200 8155 	bhi.w	8002612 <HAL_RCC_GetSysClockFreq+0x2be>
 8002368:	a201      	add	r2, pc, #4	@ (adr r2, 8002370 <HAL_RCC_GetSysClockFreq+0x1c>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	080023d5 	.word	0x080023d5
 8002374:	08002613 	.word	0x08002613
 8002378:	08002613 	.word	0x08002613
 800237c:	08002613 	.word	0x08002613
 8002380:	08002613 	.word	0x08002613
 8002384:	08002613 	.word	0x08002613
 8002388:	08002613 	.word	0x08002613
 800238c:	08002613 	.word	0x08002613
 8002390:	080023fb 	.word	0x080023fb
 8002394:	08002613 	.word	0x08002613
 8002398:	08002613 	.word	0x08002613
 800239c:	08002613 	.word	0x08002613
 80023a0:	08002613 	.word	0x08002613
 80023a4:	08002613 	.word	0x08002613
 80023a8:	08002613 	.word	0x08002613
 80023ac:	08002613 	.word	0x08002613
 80023b0:	08002401 	.word	0x08002401
 80023b4:	08002613 	.word	0x08002613
 80023b8:	08002613 	.word	0x08002613
 80023bc:	08002613 	.word	0x08002613
 80023c0:	08002613 	.word	0x08002613
 80023c4:	08002613 	.word	0x08002613
 80023c8:	08002613 	.word	0x08002613
 80023cc:	08002613 	.word	0x08002613
 80023d0:	08002407 	.word	0x08002407
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023d4:	4b94      	ldr	r3, [pc, #592]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80023e0:	4b91      	ldr	r3, [pc, #580]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	08db      	lsrs	r3, r3, #3
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	4a90      	ldr	r2, [pc, #576]	@ (800262c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
 80023f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80023f2:	e111      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023f4:	4b8d      	ldr	r3, [pc, #564]	@ (800262c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023f6:	61bb      	str	r3, [r7, #24]
      break;
 80023f8:	e10e      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80023fa:	4b8d      	ldr	r3, [pc, #564]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023fc:	61bb      	str	r3, [r7, #24]
      break;
 80023fe:	e10b      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002400:	4b8c      	ldr	r3, [pc, #560]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002402:	61bb      	str	r3, [r7, #24]
      break;
 8002404:	e108      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002406:	4b88      	ldr	r3, [pc, #544]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002410:	4b85      	ldr	r3, [pc, #532]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800241a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800241c:	4b82      	ldr	r3, [pc, #520]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002426:	4b80      	ldr	r3, [pc, #512]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800242a:	08db      	lsrs	r3, r3, #3
 800242c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	ee07 3a90 	vmov	s15, r3
 800243a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800243e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80e1 	beq.w	800260c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b02      	cmp	r3, #2
 800244e:	f000 8083 	beq.w	8002558 <HAL_RCC_GetSysClockFreq+0x204>
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b02      	cmp	r3, #2
 8002456:	f200 80a1 	bhi.w	800259c <HAL_RCC_GetSysClockFreq+0x248>
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x114>
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d056      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002466:	e099      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002468:	4b6f      	ldr	r3, [pc, #444]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d02d      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002474:	4b6c      	ldr	r3, [pc, #432]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	08db      	lsrs	r3, r3, #3
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	4a6b      	ldr	r2, [pc, #428]	@ (800262c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002480:	fa22 f303 	lsr.w	r3, r2, r3
 8002484:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800249e:	4b62      	ldr	r3, [pc, #392]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80024b2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002638 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80024ce:	e087      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024da:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800263c <HAL_RCC_GetSysClockFreq+0x2e8>
 80024de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e2:	4b51      	ldr	r3, [pc, #324]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80024f6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002638 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800250a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002512:	e065      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002640 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002526:	4b40      	ldr	r3, [pc, #256]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002536:	ed97 6a02 	vldr	s12, [r7, #8]
 800253a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002638 <HAL_RCC_GetSysClockFreq+0x2e4>
 800253e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800254a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800254e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002552:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002556:	e043      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002562:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002644 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800256a:	4b2f      	ldr	r3, [pc, #188]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800257a:	ed97 6a02 	vldr	s12, [r7, #8]
 800257e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002638 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800258a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800258e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002596:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800259a:	e021      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002640 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025be:	ed97 6a02 	vldr	s12, [r7, #8]
 80025c2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002638 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80025e0:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e4:	0a5b      	lsrs	r3, r3, #9
 80025e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025ea:	3301      	adds	r3, #1
 80025ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	ee07 3a90 	vmov	s15, r3
 80025f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80025fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002604:	ee17 3a90 	vmov	r3, s15
 8002608:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800260a:	e005      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	61bb      	str	r3, [r7, #24]
      break;
 8002610:	e002      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002612:	4b07      	ldr	r3, [pc, #28]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002614:	61bb      	str	r3, [r7, #24]
      break;
 8002616:	bf00      	nop
  }

  return sysclockfreq;
 8002618:	69bb      	ldr	r3, [r7, #24]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3724      	adds	r7, #36	@ 0x24
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	58024400 	.word	0x58024400
 800262c:	03d09000 	.word	0x03d09000
 8002630:	003d0900 	.word	0x003d0900
 8002634:	017d7840 	.word	0x017d7840
 8002638:	46000000 	.word	0x46000000
 800263c:	4c742400 	.word	0x4c742400
 8002640:	4a742400 	.word	0x4a742400
 8002644:	4bbebc20 	.word	0x4bbebc20

08002648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800264e:	f7ff fe81 	bl	8002354 <HAL_RCC_GetSysClockFreq>
 8002652:	4602      	mov	r2, r0
 8002654:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <HAL_RCC_GetHCLKFreq+0x50>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	490f      	ldr	r1, [pc, #60]	@ (800269c <HAL_RCC_GetHCLKFreq+0x54>)
 8002660:	5ccb      	ldrb	r3, [r1, r3]
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800266c:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <HAL_RCC_GetHCLKFreq+0x50>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	4a09      	ldr	r2, [pc, #36]	@ (800269c <HAL_RCC_GetHCLKFreq+0x54>)
 8002676:	5cd3      	ldrb	r3, [r2, r3]
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	4a07      	ldr	r2, [pc, #28]	@ (80026a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002684:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002686:	4a07      	ldr	r2, [pc, #28]	@ (80026a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800268c:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	58024400 	.word	0x58024400
 800269c:	08006574 	.word	0x08006574
 80026a0:	24000004 	.word	0x24000004
 80026a4:	24000000 	.word	0x24000000

080026a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80026ac:	f7ff ffcc 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4904      	ldr	r1, [pc, #16]	@ (80026d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	58024400 	.word	0x58024400
 80026d0:	08006574 	.word	0x08006574

080026d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80026d8:	f7ff ffb6 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4904      	ldr	r1, [pc, #16]	@ (80026fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	58024400 	.word	0x58024400
 80026fc:	08006574 	.word	0x08006574

08002700 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002704:	b0ca      	sub	sp, #296	@ 0x128
 8002706:	af00      	add	r7, sp, #0
 8002708:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800270c:	2300      	movs	r3, #0
 800270e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002712:	2300      	movs	r3, #0
 8002714:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002724:	2500      	movs	r5, #0
 8002726:	ea54 0305 	orrs.w	r3, r4, r5
 800272a:	d049      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800272c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002730:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002732:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002736:	d02f      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002738:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800273c:	d828      	bhi.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800273e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002742:	d01a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002744:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002748:	d822      	bhi.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800274e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002752:	d007      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002754:	e01c      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002756:	4bb8      	ldr	r3, [pc, #736]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275a:	4ab7      	ldr	r2, [pc, #732]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800275c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002760:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002762:	e01a      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002768:	3308      	adds	r3, #8
 800276a:	2102      	movs	r1, #2
 800276c:	4618      	mov	r0, r3
 800276e:	f001 fc8f 	bl	8004090 <RCCEx_PLL2_Config>
 8002772:	4603      	mov	r3, r0
 8002774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002778:	e00f      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800277a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800277e:	3328      	adds	r3, #40	@ 0x28
 8002780:	2102      	movs	r1, #2
 8002782:	4618      	mov	r0, r3
 8002784:	f001 fd36 	bl	80041f4 <RCCEx_PLL3_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800278e:	e004      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002796:	e000      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800279a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80027a2:	4ba5      	ldr	r3, [pc, #660]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80027aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027b0:	4aa1      	ldr	r2, [pc, #644]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027b2:	430b      	orrs	r3, r1
 80027b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80027b6:	e003      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80027cc:	f04f 0900 	mov.w	r9, #0
 80027d0:	ea58 0309 	orrs.w	r3, r8, r9
 80027d4:	d047      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80027d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d82a      	bhi.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80027e0:	a201      	add	r2, pc, #4	@ (adr r2, 80027e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80027e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e6:	bf00      	nop
 80027e8:	080027fd 	.word	0x080027fd
 80027ec:	0800280b 	.word	0x0800280b
 80027f0:	08002821 	.word	0x08002821
 80027f4:	0800283f 	.word	0x0800283f
 80027f8:	0800283f 	.word	0x0800283f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027fc:	4b8e      	ldr	r3, [pc, #568]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	4a8d      	ldr	r2, [pc, #564]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002806:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002808:	e01a      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800280a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800280e:	3308      	adds	r3, #8
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f001 fc3c 	bl	8004090 <RCCEx_PLL2_Config>
 8002818:	4603      	mov	r3, r0
 800281a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800281e:	e00f      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002824:	3328      	adds	r3, #40	@ 0x28
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f001 fce3 	bl	80041f4 <RCCEx_PLL3_Config>
 800282e:	4603      	mov	r3, r0
 8002830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002834:	e004      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800283c:	e000      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800283e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002848:	4b7b      	ldr	r3, [pc, #492]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800284a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800284c:	f023 0107 	bic.w	r1, r3, #7
 8002850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002856:	4a78      	ldr	r2, [pc, #480]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002858:	430b      	orrs	r3, r1
 800285a:	6513      	str	r3, [r2, #80]	@ 0x50
 800285c:	e003      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800285e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002862:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002872:	f04f 0b00 	mov.w	fp, #0
 8002876:	ea5a 030b 	orrs.w	r3, sl, fp
 800287a:	d04c      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800287c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002886:	d030      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800288c:	d829      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800288e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002890:	d02d      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002892:	2bc0      	cmp	r3, #192	@ 0xc0
 8002894:	d825      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002896:	2b80      	cmp	r3, #128	@ 0x80
 8002898:	d018      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800289a:	2b80      	cmp	r3, #128	@ 0x80
 800289c:	d821      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80028a2:	2b40      	cmp	r3, #64	@ 0x40
 80028a4:	d007      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80028a6:	e01c      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a8:	4b63      	ldr	r3, [pc, #396]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ac:	4a62      	ldr	r2, [pc, #392]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80028b4:	e01c      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ba:	3308      	adds	r3, #8
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 fbe6 	bl	8004090 <RCCEx_PLL2_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80028ca:	e011      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028d0:	3328      	adds	r3, #40	@ 0x28
 80028d2:	2100      	movs	r1, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 fc8d 	bl	80041f4 <RCCEx_PLL3_Config>
 80028da:	4603      	mov	r3, r0
 80028dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80028e0:	e006      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028e8:	e002      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80028ea:	bf00      	nop
 80028ec:	e000      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80028ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80028f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028fc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002906:	4a4c      	ldr	r2, [pc, #304]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002908:	430b      	orrs	r3, r1
 800290a:	6513      	str	r3, [r2, #80]	@ 0x50
 800290c:	e003      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800290e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002922:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800292c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002930:	460b      	mov	r3, r1
 8002932:	4313      	orrs	r3, r2
 8002934:	d053      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800293a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800293e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002942:	d035      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002944:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002948:	d82e      	bhi.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800294a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800294e:	d031      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002950:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002954:	d828      	bhi.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002956:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800295a:	d01a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800295c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002960:	d822      	bhi.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002966:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800296a:	d007      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800296c:	e01c      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800296e:	4b32      	ldr	r3, [pc, #200]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	4a31      	ldr	r2, [pc, #196]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002978:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800297a:	e01c      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800297c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002980:	3308      	adds	r3, #8
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f001 fb83 	bl	8004090 <RCCEx_PLL2_Config>
 800298a:	4603      	mov	r3, r0
 800298c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002990:	e011      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002996:	3328      	adds	r3, #40	@ 0x28
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f001 fc2a 	bl	80041f4 <RCCEx_PLL3_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029a6:	e006      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029ae:	e002      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80029b0:	bf00      	nop
 80029b2:	e000      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80029b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10b      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80029be:	4b1e      	ldr	r3, [pc, #120]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80029c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80029ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80029d4:	e003      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80029de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80029ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80029f4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80029f8:	460b      	mov	r3, r1
 80029fa:	4313      	orrs	r3, r2
 80029fc:	d056      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80029fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002a06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a0a:	d038      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002a0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a10:	d831      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a12:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a16:	d034      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002a18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a1c:	d82b      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a22:	d01d      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002a24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a28:	d825      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002a2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002a34:	e01f      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a36:	bf00      	nop
 8002a38:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a3c:	4ba2      	ldr	r3, [pc, #648]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	4aa1      	ldr	r2, [pc, #644]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a48:	e01c      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a4e:	3308      	adds	r3, #8
 8002a50:	2100      	movs	r1, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f001 fb1c 	bl	8004090 <RCCEx_PLL2_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a5e:	e011      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a64:	3328      	adds	r3, #40	@ 0x28
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f001 fbc3 	bl	80041f4 <RCCEx_PLL3_Config>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a74:	e006      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a7c:	e002      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002a7e:	bf00      	nop
 8002a80:	e000      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a8c:	4b8e      	ldr	r3, [pc, #568]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a90:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002a9c:	4a8a      	ldr	r2, [pc, #552]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aa2:	e003      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002aa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002ab8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002abc:	2300      	movs	r3, #0
 8002abe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002ac2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	d03a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad2:	2b30      	cmp	r3, #48	@ 0x30
 8002ad4:	d01f      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002ad6:	2b30      	cmp	r3, #48	@ 0x30
 8002ad8:	d819      	bhi.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d00c      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d815      	bhi.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d019      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002ae6:	2b10      	cmp	r3, #16
 8002ae8:	d111      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aea:	4b77      	ldr	r3, [pc, #476]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aee:	4a76      	ldr	r2, [pc, #472]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002af4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002af6:	e011      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002afc:	3308      	adds	r3, #8
 8002afe:	2102      	movs	r1, #2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f001 fac5 	bl	8004090 <RCCEx_PLL2_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b0c:	e006      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b14:	e002      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b16:	bf00      	nop
 8002b18:	e000      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b24:	4b68      	ldr	r3, [pc, #416]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b28:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b32:	4a65      	ldr	r2, [pc, #404]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b34:	430b      	orrs	r3, r1
 8002b36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b38:	e003      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002b4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002b52:	2300      	movs	r3, #0
 8002b54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002b58:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	d051      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b6c:	d035      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002b6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b72:	d82e      	bhi.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b74:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b78:	d031      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002b7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b7e:	d828      	bhi.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b84:	d01a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b8a:	d822      	bhi.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b94:	d007      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002b96:	e01c      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b98:	4b4b      	ldr	r3, [pc, #300]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9c:	4a4a      	ldr	r2, [pc, #296]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ba4:	e01c      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002baa:	3308      	adds	r3, #8
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f001 fa6e 	bl	8004090 <RCCEx_PLL2_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bba:	e011      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc0:	3328      	adds	r3, #40	@ 0x28
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f001 fb15 	bl	80041f4 <RCCEx_PLL3_Config>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bd0:	e006      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bd8:	e002      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002be8:	4b37      	ldr	r3, [pc, #220]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf6:	4a34      	ldr	r2, [pc, #208]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bfc:	e003      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002c12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c16:	2300      	movs	r3, #0
 8002c18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002c1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002c20:	460b      	mov	r3, r1
 8002c22:	4313      	orrs	r3, r2
 8002c24:	d056      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c30:	d033      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002c32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c36:	d82c      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c3c:	d02f      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002c3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c42:	d826      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c48:	d02b      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002c4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c4e:	d820      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c54:	d012      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002c56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c5a:	d81a      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d022      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c64:	d115      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 fa0e 	bl	8004090 <RCCEx_PLL2_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c7a:	e015      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c80:	3328      	adds	r3, #40	@ 0x28
 8002c82:	2101      	movs	r1, #1
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 fab5 	bl	80041f4 <RCCEx_PLL3_Config>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c98:	e006      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c9a:	bf00      	nop
 8002c9c:	e004      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c9e:	bf00      	nop
 8002ca0:	e002      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ca2:	bf00      	nop
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10d      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002cb0:	4b05      	ldr	r3, [pc, #20]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cbe:	4a02      	ldr	r2, [pc, #8]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cc4:	e006      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002cc6:	bf00      	nop
 8002cc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	d055      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d00:	d033      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d06:	d82c      	bhi.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d0c:	d02f      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d12:	d826      	bhi.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d18:	d02b      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002d1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d1e:	d820      	bhi.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d24:	d012      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002d26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d2a:	d81a      	bhi.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d022      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002d30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d34:	d115      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f001 f9a6 	bl	8004090 <RCCEx_PLL2_Config>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d4a:	e015      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d50:	3328      	adds	r3, #40	@ 0x28
 8002d52:	2101      	movs	r1, #1
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 fa4d 	bl	80041f4 <RCCEx_PLL3_Config>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d60:	e00a      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d68:	e006      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d6a:	bf00      	nop
 8002d6c:	e004      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d6e:	bf00      	nop
 8002d70:	e002      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d72:	bf00      	nop
 8002d74:	e000      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10b      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d80:	4ba3      	ldr	r3, [pc, #652]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d84:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d90:	4a9f      	ldr	r2, [pc, #636]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d92:	430b      	orrs	r3, r1
 8002d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d96:	e003      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002dac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002db6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	d037      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dca:	d00e      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002dcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dd0:	d816      	bhi.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d018      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002dd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dda:	d111      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ddc:	4b8c      	ldr	r3, [pc, #560]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	4a8b      	ldr	r2, [pc, #556]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002de8:	e00f      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dee:	3308      	adds	r3, #8
 8002df0:	2101      	movs	r1, #1
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 f94c 	bl	8004090 <RCCEx_PLL2_Config>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002dfe:	e004      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e06:	e000      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10a      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e12:	4b7f      	ldr	r3, [pc, #508]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e16:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e20:	4a7b      	ldr	r2, [pc, #492]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e22:	430b      	orrs	r3, r1
 8002e24:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e26:	e003      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e38:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002e46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	d039      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d81c      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e60 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e60:	08002e9d 	.word	0x08002e9d
 8002e64:	08002e71 	.word	0x08002e71
 8002e68:	08002e7f 	.word	0x08002e7f
 8002e6c:	08002e9d 	.word	0x08002e9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e70:	4b67      	ldr	r3, [pc, #412]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e74:	4a66      	ldr	r2, [pc, #408]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e7c:	e00f      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e82:	3308      	adds	r3, #8
 8002e84:	2102      	movs	r1, #2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 f902 	bl	8004090 <RCCEx_PLL2_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e92:	e004      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e9a:	e000      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eaa:	f023 0103 	bic.w	r1, r3, #3
 8002eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb4:	4a56      	ldr	r2, [pc, #344]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eba:	e003      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ec0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002eda:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f000 809f 	beq.w	8003024 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee6:	4b4b      	ldr	r3, [pc, #300]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a4a      	ldr	r2, [pc, #296]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ef2:	f7fe f883 	bl	8000ffc <HAL_GetTick>
 8002ef6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002efa:	e00b      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efc:	f7fe f87e 	bl	8000ffc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b64      	cmp	r3, #100	@ 0x64
 8002f0a:	d903      	bls.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f12:	e005      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f14:	4b3f      	ldr	r3, [pc, #252]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0ed      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d179      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f28:	4b39      	ldr	r3, [pc, #228]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f34:	4053      	eors	r3, r2
 8002f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d015      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f3e:	4b34      	ldr	r3, [pc, #208]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f4a:	4b31      	ldr	r3, [pc, #196]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4e:	4a30      	ldr	r2, [pc, #192]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f54:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f56:	4b2e      	ldr	r3, [pc, #184]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f60:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f62:	4a2b      	ldr	r2, [pc, #172]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f68:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f76:	d118      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe f840 	bl	8000ffc <HAL_GetTick>
 8002f7c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f80:	e00d      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fe f83b 	bl	8000ffc <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f8c:	1ad2      	subs	r2, r2, r3
 8002f8e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d903      	bls.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002f9c:	e005      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0eb      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d129      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fc2:	d10e      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002fc4:	4b12      	ldr	r3, [pc, #72]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fd4:	091a      	lsrs	r2, r3, #4
 8002fd6:	4b10      	ldr	r3, [pc, #64]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	4a0d      	ldr	r2, [pc, #52]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	6113      	str	r3, [r2, #16]
 8002fe0:	e005      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fe8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002fec:	6113      	str	r3, [r2, #16]
 8002fee:	4b08      	ldr	r3, [pc, #32]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ff0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffe:	4a04      	ldr	r2, [pc, #16]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003000:	430b      	orrs	r3, r1
 8003002:	6713      	str	r3, [r2, #112]	@ 0x70
 8003004:	e00e      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800300a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800300e:	e009      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003010:	58024400 	.word	0x58024400
 8003014:	58024800 	.word	0x58024800
 8003018:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003020:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302c:	f002 0301 	and.w	r3, r2, #1
 8003030:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003034:	2300      	movs	r3, #0
 8003036:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800303a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800303e:	460b      	mov	r3, r1
 8003040:	4313      	orrs	r3, r2
 8003042:	f000 8089 	beq.w	8003158 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800304c:	2b28      	cmp	r3, #40	@ 0x28
 800304e:	d86b      	bhi.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003050:	a201      	add	r2, pc, #4	@ (adr r2, 8003058 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003056:	bf00      	nop
 8003058:	08003131 	.word	0x08003131
 800305c:	08003129 	.word	0x08003129
 8003060:	08003129 	.word	0x08003129
 8003064:	08003129 	.word	0x08003129
 8003068:	08003129 	.word	0x08003129
 800306c:	08003129 	.word	0x08003129
 8003070:	08003129 	.word	0x08003129
 8003074:	08003129 	.word	0x08003129
 8003078:	080030fd 	.word	0x080030fd
 800307c:	08003129 	.word	0x08003129
 8003080:	08003129 	.word	0x08003129
 8003084:	08003129 	.word	0x08003129
 8003088:	08003129 	.word	0x08003129
 800308c:	08003129 	.word	0x08003129
 8003090:	08003129 	.word	0x08003129
 8003094:	08003129 	.word	0x08003129
 8003098:	08003113 	.word	0x08003113
 800309c:	08003129 	.word	0x08003129
 80030a0:	08003129 	.word	0x08003129
 80030a4:	08003129 	.word	0x08003129
 80030a8:	08003129 	.word	0x08003129
 80030ac:	08003129 	.word	0x08003129
 80030b0:	08003129 	.word	0x08003129
 80030b4:	08003129 	.word	0x08003129
 80030b8:	08003131 	.word	0x08003131
 80030bc:	08003129 	.word	0x08003129
 80030c0:	08003129 	.word	0x08003129
 80030c4:	08003129 	.word	0x08003129
 80030c8:	08003129 	.word	0x08003129
 80030cc:	08003129 	.word	0x08003129
 80030d0:	08003129 	.word	0x08003129
 80030d4:	08003129 	.word	0x08003129
 80030d8:	08003131 	.word	0x08003131
 80030dc:	08003129 	.word	0x08003129
 80030e0:	08003129 	.word	0x08003129
 80030e4:	08003129 	.word	0x08003129
 80030e8:	08003129 	.word	0x08003129
 80030ec:	08003129 	.word	0x08003129
 80030f0:	08003129 	.word	0x08003129
 80030f4:	08003129 	.word	0x08003129
 80030f8:	08003131 	.word	0x08003131
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003100:	3308      	adds	r3, #8
 8003102:	2101      	movs	r1, #1
 8003104:	4618      	mov	r0, r3
 8003106:	f000 ffc3 	bl	8004090 <RCCEx_PLL2_Config>
 800310a:	4603      	mov	r3, r0
 800310c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003110:	e00f      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003116:	3328      	adds	r3, #40	@ 0x28
 8003118:	2101      	movs	r1, #1
 800311a:	4618      	mov	r0, r3
 800311c:	f001 f86a 	bl	80041f4 <RCCEx_PLL3_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003126:	e004      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800312e:	e000      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800313a:	4bbf      	ldr	r3, [pc, #764]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800313c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003146:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003148:	4abb      	ldr	r2, [pc, #748]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800314a:	430b      	orrs	r3, r1
 800314c:	6553      	str	r3, [r2, #84]	@ 0x54
 800314e:	e003      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003154:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	f002 0302 	and.w	r3, r2, #2
 8003164:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003168:	2300      	movs	r3, #0
 800316a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800316e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003172:	460b      	mov	r3, r1
 8003174:	4313      	orrs	r3, r2
 8003176:	d041      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800317c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800317e:	2b05      	cmp	r3, #5
 8003180:	d824      	bhi.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003182:	a201      	add	r2, pc, #4	@ (adr r2, 8003188 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	080031d5 	.word	0x080031d5
 800318c:	080031a1 	.word	0x080031a1
 8003190:	080031b7 	.word	0x080031b7
 8003194:	080031d5 	.word	0x080031d5
 8003198:	080031d5 	.word	0x080031d5
 800319c:	080031d5 	.word	0x080031d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a4:	3308      	adds	r3, #8
 80031a6:	2101      	movs	r1, #1
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 ff71 	bl	8004090 <RCCEx_PLL2_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80031b4:	e00f      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ba:	3328      	adds	r3, #40	@ 0x28
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f001 f818 	bl	80041f4 <RCCEx_PLL3_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80031ca:	e004      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031d2:	e000      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80031d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80031de:	4b96      	ldr	r3, [pc, #600]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e2:	f023 0107 	bic.w	r1, r3, #7
 80031e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031ec:	4a92      	ldr	r2, [pc, #584]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031ee:	430b      	orrs	r3, r1
 80031f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80031f2:	e003      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	f002 0304 	and.w	r3, r2, #4
 8003208:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003212:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003216:	460b      	mov	r3, r1
 8003218:	4313      	orrs	r3, r2
 800321a:	d044      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800321c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003220:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003224:	2b05      	cmp	r3, #5
 8003226:	d825      	bhi.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003228:	a201      	add	r2, pc, #4	@ (adr r2, 8003230 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	0800327d 	.word	0x0800327d
 8003234:	08003249 	.word	0x08003249
 8003238:	0800325f 	.word	0x0800325f
 800323c:	0800327d 	.word	0x0800327d
 8003240:	0800327d 	.word	0x0800327d
 8003244:	0800327d 	.word	0x0800327d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324c:	3308      	adds	r3, #8
 800324e:	2101      	movs	r1, #1
 8003250:	4618      	mov	r0, r3
 8003252:	f000 ff1d 	bl	8004090 <RCCEx_PLL2_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800325c:	e00f      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800325e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003262:	3328      	adds	r3, #40	@ 0x28
 8003264:	2101      	movs	r1, #1
 8003266:	4618      	mov	r0, r3
 8003268:	f000 ffc4 	bl	80041f4 <RCCEx_PLL3_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003272:	e004      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800327a:	e000      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800327c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10b      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003286:	4b6c      	ldr	r3, [pc, #432]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328a:	f023 0107 	bic.w	r1, r3, #7
 800328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003296:	4a68      	ldr	r2, [pc, #416]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003298:	430b      	orrs	r3, r1
 800329a:	6593      	str	r3, [r2, #88]	@ 0x58
 800329c:	e003      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	f002 0320 	and.w	r3, r2, #32
 80032b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032b6:	2300      	movs	r3, #0
 80032b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80032bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032c0:	460b      	mov	r3, r1
 80032c2:	4313      	orrs	r3, r2
 80032c4:	d055      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80032c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032d2:	d033      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80032d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032d8:	d82c      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032de:	d02f      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e4:	d826      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80032e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032ea:	d02b      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80032ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032f0:	d820      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80032f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032f6:	d012      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80032f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032fc:	d81a      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d022      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003306:	d115      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330c:	3308      	adds	r3, #8
 800330e:	2100      	movs	r1, #0
 8003310:	4618      	mov	r0, r3
 8003312:	f000 febd 	bl	8004090 <RCCEx_PLL2_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800331c:	e015      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800331e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003322:	3328      	adds	r3, #40	@ 0x28
 8003324:	2102      	movs	r1, #2
 8003326:	4618      	mov	r0, r3
 8003328:	f000 ff64 	bl	80041f4 <RCCEx_PLL3_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003332:	e00a      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800333a:	e006      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800333c:	bf00      	nop
 800333e:	e004      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003340:	bf00      	nop
 8003342:	e002      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003344:	bf00      	nop
 8003346:	e000      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10b      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003352:	4b39      	ldr	r3, [pc, #228]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003356:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800335a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003362:	4a35      	ldr	r2, [pc, #212]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003364:	430b      	orrs	r3, r1
 8003366:	6553      	str	r3, [r2, #84]	@ 0x54
 8003368:	e003      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800336e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800337e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003382:	2300      	movs	r3, #0
 8003384:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003388:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800338c:	460b      	mov	r3, r1
 800338e:	4313      	orrs	r3, r2
 8003390:	d058      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003396:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800339a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800339e:	d033      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80033a0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80033a4:	d82c      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033aa:	d02f      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80033ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033b0:	d826      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033b6:	d02b      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80033b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033bc:	d820      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033c2:	d012      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80033c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033c8:	d81a      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d022      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80033ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d2:	d115      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d8:	3308      	adds	r3, #8
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fe57 	bl	8004090 <RCCEx_PLL2_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80033e8:	e015      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ee:	3328      	adds	r3, #40	@ 0x28
 80033f0:	2102      	movs	r1, #2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fefe 	bl	80041f4 <RCCEx_PLL3_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80033fe:	e00a      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003406:	e006      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003408:	bf00      	nop
 800340a:	e004      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800340c:	bf00      	nop
 800340e:	e002      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003410:	bf00      	nop
 8003412:	e000      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10e      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800341e:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003422:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800342e:	4a02      	ldr	r2, [pc, #8]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003430:	430b      	orrs	r3, r1
 8003432:	6593      	str	r3, [r2, #88]	@ 0x58
 8003434:	e006      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003436:	bf00      	nop
 8003438:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003440:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003450:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800345a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800345e:	460b      	mov	r3, r1
 8003460:	4313      	orrs	r3, r2
 8003462:	d055      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003468:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800346c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003470:	d033      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003472:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003476:	d82c      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800347c:	d02f      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800347e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003482:	d826      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003484:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003488:	d02b      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800348a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800348e:	d820      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003494:	d012      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003496:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800349a:	d81a      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d022      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80034a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034a4:	d115      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034aa:	3308      	adds	r3, #8
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fdee 	bl	8004090 <RCCEx_PLL2_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80034ba:	e015      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c0:	3328      	adds	r3, #40	@ 0x28
 80034c2:	2102      	movs	r1, #2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fe95 	bl	80041f4 <RCCEx_PLL3_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80034d0:	e00a      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034d8:	e006      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80034da:	bf00      	nop
 80034dc:	e004      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80034de:	bf00      	nop
 80034e0:	e002      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80034e2:	bf00      	nop
 80034e4:	e000      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80034e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80034f0:	4ba1      	ldr	r3, [pc, #644]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80034f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003500:	4a9d      	ldr	r2, [pc, #628]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003502:	430b      	orrs	r3, r1
 8003504:	6593      	str	r3, [r2, #88]	@ 0x58
 8003506:	e003      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800350c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	f002 0308 	and.w	r3, r2, #8
 800351c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003520:	2300      	movs	r3, #0
 8003522:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003526:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800352a:	460b      	mov	r3, r1
 800352c:	4313      	orrs	r3, r2
 800352e:	d01e      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800353c:	d10c      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003542:	3328      	adds	r3, #40	@ 0x28
 8003544:	2102      	movs	r1, #2
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fe54 	bl	80041f4 <RCCEx_PLL3_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003558:	4b87      	ldr	r3, [pc, #540]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800355a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003564:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003568:	4a83      	ldr	r2, [pc, #524]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800356a:	430b      	orrs	r3, r1
 800356c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800356e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003576:	f002 0310 	and.w	r3, r2, #16
 800357a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800357e:	2300      	movs	r3, #0
 8003580:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003584:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003588:	460b      	mov	r3, r1
 800358a:	4313      	orrs	r3, r2
 800358c:	d01e      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003592:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800359a:	d10c      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800359c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a0:	3328      	adds	r3, #40	@ 0x28
 80035a2:	2102      	movs	r1, #2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fe25 	bl	80041f4 <RCCEx_PLL3_Config>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035b6:	4b70      	ldr	r3, [pc, #448]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035c6:	4a6c      	ldr	r2, [pc, #432]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80035d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035dc:	2300      	movs	r3, #0
 80035de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80035e6:	460b      	mov	r3, r1
 80035e8:	4313      	orrs	r3, r2
 80035ea:	d03e      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80035f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035f8:	d022      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80035fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035fe:	d81b      	bhi.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003608:	d00b      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800360a:	e015      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003610:	3308      	adds	r3, #8
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fd3b 	bl	8004090 <RCCEx_PLL2_Config>
 800361a:	4603      	mov	r3, r0
 800361c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003620:	e00f      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003626:	3328      	adds	r3, #40	@ 0x28
 8003628:	2102      	movs	r1, #2
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fde2 	bl	80041f4 <RCCEx_PLL3_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003636:	e004      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800363e:	e000      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10b      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800364a:	4b4b      	ldr	r3, [pc, #300]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003656:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800365a:	4a47      	ldr	r2, [pc, #284]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800365c:	430b      	orrs	r3, r1
 800365e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003660:	e003      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003666:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800366a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003672:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003676:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003678:	2300      	movs	r3, #0
 800367a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800367c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003680:	460b      	mov	r3, r1
 8003682:	4313      	orrs	r3, r2
 8003684:	d03b      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003692:	d01f      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003694:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003698:	d818      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800369a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800369e:	d003      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80036a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036a4:	d007      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80036a6:	e011      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a8:	4b33      	ldr	r3, [pc, #204]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	4a32      	ldr	r2, [pc, #200]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80036b4:	e00f      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ba:	3328      	adds	r3, #40	@ 0x28
 80036bc:	2101      	movs	r1, #1
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fd98 	bl	80041f4 <RCCEx_PLL3_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80036ca:	e004      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036d2:	e000      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80036d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10b      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036de:	4b26      	ldr	r3, [pc, #152]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ee:	4a22      	ldr	r2, [pc, #136]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036f0:	430b      	orrs	r3, r1
 80036f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80036f4:	e003      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800370a:	673b      	str	r3, [r7, #112]	@ 0x70
 800370c:	2300      	movs	r3, #0
 800370e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003710:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003714:	460b      	mov	r3, r1
 8003716:	4313      	orrs	r3, r2
 8003718:	d034      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800371a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003728:	d007      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800372a:	e011      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800372c:	4b12      	ldr	r3, [pc, #72]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003730:	4a11      	ldr	r2, [pc, #68]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003732:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003736:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003738:	e00e      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373e:	3308      	adds	r3, #8
 8003740:	2102      	movs	r1, #2
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fca4 	bl	8004090 <RCCEx_PLL2_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800374e:	e003      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10d      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003760:	4b05      	ldr	r3, [pc, #20]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003764:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376e:	4a02      	ldr	r2, [pc, #8]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003770:	430b      	orrs	r3, r1
 8003772:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003774:	e006      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003776:	bf00      	nop
 8003778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003780:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003790:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003792:	2300      	movs	r3, #0
 8003794:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003796:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800379a:	460b      	mov	r3, r1
 800379c:	4313      	orrs	r3, r2
 800379e:	d00c      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a4:	3328      	adds	r3, #40	@ 0x28
 80037a6:	2102      	movs	r1, #2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fd23 	bl	80041f4 <RCCEx_PLL3_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80037c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80037c8:	2300      	movs	r3, #0
 80037ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80037cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80037d0:	460b      	mov	r3, r1
 80037d2:	4313      	orrs	r3, r2
 80037d4:	d038      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037e2:	d018      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80037e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037e8:	d811      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80037ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037ee:	d014      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80037f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037f4:	d80b      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d011      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80037fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037fe:	d106      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003800:	4bc3      	ldr	r3, [pc, #780]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003804:	4ac2      	ldr	r2, [pc, #776]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800380a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800380c:	e008      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003814:	e004      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003816:	bf00      	nop
 8003818:	e002      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800381a:	bf00      	nop
 800381c:	e000      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800381e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10b      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003828:	4bb9      	ldr	r3, [pc, #740]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800382a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003838:	4ab5      	ldr	r2, [pc, #724]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800383a:	430b      	orrs	r3, r1
 800383c:	6553      	str	r3, [r2, #84]	@ 0x54
 800383e:	e003      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003844:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003854:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003856:	2300      	movs	r3, #0
 8003858:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800385a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800385e:	460b      	mov	r3, r1
 8003860:	4313      	orrs	r3, r2
 8003862:	d009      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003864:	4baa      	ldr	r3, [pc, #680]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003868:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003872:	4aa7      	ldr	r2, [pc, #668]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003874:	430b      	orrs	r3, r1
 8003876:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003884:	653b      	str	r3, [r7, #80]	@ 0x50
 8003886:	2300      	movs	r3, #0
 8003888:	657b      	str	r3, [r7, #84]	@ 0x54
 800388a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800388e:	460b      	mov	r3, r1
 8003890:	4313      	orrs	r3, r2
 8003892:	d00a      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003894:	4b9e      	ldr	r3, [pc, #632]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80038a4:	4a9a      	ldr	r2, [pc, #616]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038a6:	430b      	orrs	r3, r1
 80038a8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80038b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038b8:	2300      	movs	r3, #0
 80038ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80038c0:	460b      	mov	r3, r1
 80038c2:	4313      	orrs	r3, r2
 80038c4:	d009      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038c6:	4b92      	ldr	r3, [pc, #584]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ca:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80038ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d4:	4a8e      	ldr	r2, [pc, #568]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038d6:	430b      	orrs	r3, r1
 80038d8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80038e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80038e8:	2300      	movs	r3, #0
 80038ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80038f0:	460b      	mov	r3, r1
 80038f2:	4313      	orrs	r3, r2
 80038f4:	d00e      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038f6:	4b86      	ldr	r3, [pc, #536]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	4a85      	ldr	r2, [pc, #532]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003900:	6113      	str	r3, [r2, #16]
 8003902:	4b83      	ldr	r3, [pc, #524]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003904:	6919      	ldr	r1, [r3, #16]
 8003906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800390e:	4a80      	ldr	r2, [pc, #512]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003910:	430b      	orrs	r3, r1
 8003912:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003920:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003922:	2300      	movs	r3, #0
 8003924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003926:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800392a:	460b      	mov	r3, r1
 800392c:	4313      	orrs	r3, r2
 800392e:	d009      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003930:	4b77      	ldr	r3, [pc, #476]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003934:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393e:	4a74      	ldr	r2, [pc, #464]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003940:	430b      	orrs	r3, r1
 8003942:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003950:	633b      	str	r3, [r7, #48]	@ 0x30
 8003952:	2300      	movs	r3, #0
 8003954:	637b      	str	r3, [r7, #52]	@ 0x34
 8003956:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800395a:	460b      	mov	r3, r1
 800395c:	4313      	orrs	r3, r2
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003960:	4b6b      	ldr	r3, [pc, #428]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003964:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003970:	4a67      	ldr	r2, [pc, #412]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003972:	430b      	orrs	r3, r1
 8003974:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	2100      	movs	r1, #0
 8003980:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003988:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800398c:	460b      	mov	r3, r1
 800398e:	4313      	orrs	r3, r2
 8003990:	d011      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003996:	3308      	adds	r3, #8
 8003998:	2100      	movs	r1, #0
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fb78 	bl	8004090 <RCCEx_PLL2_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80039a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	2100      	movs	r1, #0
 80039c0:	6239      	str	r1, [r7, #32]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80039cc:	460b      	mov	r3, r1
 80039ce:	4313      	orrs	r3, r2
 80039d0:	d011      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d6:	3308      	adds	r3, #8
 80039d8:	2101      	movs	r1, #1
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fb58 	bl	8004090 <RCCEx_PLL2_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80039e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80039f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	2100      	movs	r1, #0
 8003a00:	61b9      	str	r1, [r7, #24]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	d011      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a16:	3308      	adds	r3, #8
 8003a18:	2102      	movs	r1, #2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fb38 	bl	8004090 <RCCEx_PLL2_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	2100      	movs	r1, #0
 8003a40:	6139      	str	r1, [r7, #16]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	d011      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a56:	3328      	adds	r3, #40	@ 0x28
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fbca 	bl	80041f4 <RCCEx_PLL3_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	2100      	movs	r1, #0
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	d011      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a96:	3328      	adds	r3, #40	@ 0x28
 8003a98:	2101      	movs	r1, #1
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fbaa 	bl	80041f4 <RCCEx_PLL3_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ab2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	2100      	movs	r1, #0
 8003ac0:	6039      	str	r1, [r7, #0]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003acc:	460b      	mov	r3, r1
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	d011      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad6:	3328      	adds	r3, #40	@ 0x28
 8003ad8:	2102      	movs	r1, #2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fb8a 	bl	80041f4 <RCCEx_PLL3_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003af6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e000      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b10:	58024400 	.word	0x58024400

08003b14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003b18:	f7fe fd96 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	091b      	lsrs	r3, r3, #4
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4904      	ldr	r1, [pc, #16]	@ (8003b3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	58024400 	.word	0x58024400
 8003b3c:	08006574 	.word	0x08006574

08003b40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b089      	sub	sp, #36	@ 0x24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b48:	4ba1      	ldr	r3, [pc, #644]	@ (8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003b52:	4b9f      	ldr	r3, [pc, #636]	@ (8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b56:	0b1b      	lsrs	r3, r3, #12
 8003b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b5e:	4b9c      	ldr	r3, [pc, #624]	@ (8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b62:	091b      	lsrs	r3, r3, #4
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003b6a:	4b99      	ldr	r3, [pc, #612]	@ (8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6e:	08db      	lsrs	r3, r3, #3
 8003b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8111 	beq.w	8003db0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	f000 8083 	beq.w	8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	f200 80a1 	bhi.w	8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d056      	beq.n	8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003baa:	e099      	b.n	8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bac:	4b88      	ldr	r3, [pc, #544]	@ (8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d02d      	beq.n	8003c14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bb8:	4b85      	ldr	r3, [pc, #532]	@ (8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	08db      	lsrs	r3, r3, #3
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	4a84      	ldr	r2, [pc, #528]	@ (8003dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003be2:	4b7b      	ldr	r3, [pc, #492]	@ (8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bf6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c12:	e087      	b.n	8003d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003ddc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c26:	4b6a      	ldr	r3, [pc, #424]	@ (8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c2e:	ee07 3a90 	vmov	s15, r3
 8003c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c56:	e065      	b.n	8003d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003de0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c6a:	4b59      	ldr	r3, [pc, #356]	@ (8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c9a:	e043      	b.n	8003d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cae:	4b48      	ldr	r3, [pc, #288]	@ (8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cc2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cde:	e021      	b.n	8003d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003de0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf2:	4b37      	ldr	r3, [pc, #220]	@ (8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003d24:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d28:	0a5b      	lsrs	r3, r3, #9
 8003d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d4a:	ee17 2a90 	vmov	r2, s15
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003d52:	4b1f      	ldr	r3, [pc, #124]	@ (8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d56:	0c1b      	lsrs	r3, r3, #16
 8003d58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d5c:	ee07 3a90 	vmov	s15, r3
 8003d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d78:	ee17 2a90 	vmov	r2, s15
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003d80:	4b13      	ldr	r3, [pc, #76]	@ (8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d84:	0e1b      	lsrs	r3, r3, #24
 8003d86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003da6:	ee17 2a90 	vmov	r2, s15
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003dae:	e008      	b.n	8003dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	609a      	str	r2, [r3, #8]
}
 8003dc2:	bf00      	nop
 8003dc4:	3724      	adds	r7, #36	@ 0x24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	58024400 	.word	0x58024400
 8003dd4:	03d09000 	.word	0x03d09000
 8003dd8:	46000000 	.word	0x46000000
 8003ddc:	4c742400 	.word	0x4c742400
 8003de0:	4a742400 	.word	0x4a742400
 8003de4:	4bbebc20 	.word	0x4bbebc20

08003de8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	@ 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003df0:	4ba1      	ldr	r3, [pc, #644]	@ (8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003dfa:	4b9f      	ldr	r3, [pc, #636]	@ (8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfe:	0d1b      	lsrs	r3, r3, #20
 8003e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003e06:	4b9c      	ldr	r3, [pc, #624]	@ (8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0a:	0a1b      	lsrs	r3, r3, #8
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003e12:	4b99      	ldr	r3, [pc, #612]	@ (8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	08db      	lsrs	r3, r3, #3
 8003e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8111 	beq.w	8004058 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	f000 8083 	beq.w	8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	f200 80a1 	bhi.w	8003f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d056      	beq.n	8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003e52:	e099      	b.n	8003f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e54:	4b88      	ldr	r3, [pc, #544]	@ (8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d02d      	beq.n	8003ebc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e60:	4b85      	ldr	r3, [pc, #532]	@ (8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	08db      	lsrs	r3, r3, #3
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	4a84      	ldr	r2, [pc, #528]	@ (800407c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	ee07 3a90 	vmov	s15, r3
 8003e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	ee07 3a90 	vmov	s15, r3
 8003e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e8a:	4b7b      	ldr	r3, [pc, #492]	@ (8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003eba:	e087      	b.n	8003fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004084 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ece:	4b6a      	ldr	r3, [pc, #424]	@ (8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ee2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003efe:	e065      	b.n	8003fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f12:	4b59      	ldr	r3, [pc, #356]	@ (8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f42:	e043      	b.n	8003fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800408c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f56:	4b48      	ldr	r3, [pc, #288]	@ (8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f86:	e021      	b.n	8003fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f9a:	4b37      	ldr	r3, [pc, #220]	@ (8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	0a5b      	lsrs	r3, r3, #9
 8003fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ff2:	ee17 2a90 	vmov	r2, s15
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	0c1b      	lsrs	r3, r3, #16
 8004000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004004:	ee07 3a90 	vmov	s15, r3
 8004008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004010:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004014:	edd7 6a07 	vldr	s13, [r7, #28]
 8004018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800401c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004020:	ee17 2a90 	vmov	r2, s15
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004028:	4b13      	ldr	r3, [pc, #76]	@ (8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800402a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402c:	0e1b      	lsrs	r3, r3, #24
 800402e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004032:	ee07 3a90 	vmov	s15, r3
 8004036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800403e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004042:	edd7 6a07 	vldr	s13, [r7, #28]
 8004046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800404a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800404e:	ee17 2a90 	vmov	r2, s15
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004056:	e008      	b.n	800406a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]
}
 800406a:	bf00      	nop
 800406c:	3724      	adds	r7, #36	@ 0x24
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	58024400 	.word	0x58024400
 800407c:	03d09000 	.word	0x03d09000
 8004080:	46000000 	.word	0x46000000
 8004084:	4c742400 	.word	0x4c742400
 8004088:	4a742400 	.word	0x4a742400
 800408c:	4bbebc20 	.word	0x4bbebc20

08004090 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800409e:	4b53      	ldr	r3, [pc, #332]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 80040a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d101      	bne.n	80040ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e099      	b.n	80041e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80040ae:	4b4f      	ldr	r3, [pc, #316]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a4e      	ldr	r2, [pc, #312]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 80040b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80040b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ba:	f7fc ff9f 	bl	8000ffc <HAL_GetTick>
 80040be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80040c0:	e008      	b.n	80040d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80040c2:	f7fc ff9b 	bl	8000ffc <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e086      	b.n	80041e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80040d4:	4b45      	ldr	r3, [pc, #276]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f0      	bne.n	80040c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80040e0:	4b42      	ldr	r3, [pc, #264]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	031b      	lsls	r3, r3, #12
 80040ee:	493f      	ldr	r1, [pc, #252]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	3b01      	subs	r3, #1
 8004104:	025b      	lsls	r3, r3, #9
 8004106:	b29b      	uxth	r3, r3
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	3b01      	subs	r3, #1
 8004110:	041b      	lsls	r3, r3, #16
 8004112:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	3b01      	subs	r3, #1
 800411e:	061b      	lsls	r3, r3, #24
 8004120:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004124:	4931      	ldr	r1, [pc, #196]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 8004126:	4313      	orrs	r3, r2
 8004128:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800412a:	4b30      	ldr	r3, [pc, #192]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 800412c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	492d      	ldr	r1, [pc, #180]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 8004138:	4313      	orrs	r3, r2
 800413a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800413c:	4b2b      	ldr	r3, [pc, #172]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 800413e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004140:	f023 0220 	bic.w	r2, r3, #32
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	4928      	ldr	r1, [pc, #160]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 800414a:	4313      	orrs	r3, r2
 800414c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800414e:	4b27      	ldr	r3, [pc, #156]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 8004150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004152:	4a26      	ldr	r2, [pc, #152]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 8004154:	f023 0310 	bic.w	r3, r3, #16
 8004158:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800415a:	4b24      	ldr	r3, [pc, #144]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 800415c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800415e:	4b24      	ldr	r3, [pc, #144]	@ (80041f0 <RCCEx_PLL2_Config+0x160>)
 8004160:	4013      	ands	r3, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	69d2      	ldr	r2, [r2, #28]
 8004166:	00d2      	lsls	r2, r2, #3
 8004168:	4920      	ldr	r1, [pc, #128]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 800416a:	4313      	orrs	r3, r2
 800416c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800416e:	4b1f      	ldr	r3, [pc, #124]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 8004170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004172:	4a1e      	ldr	r2, [pc, #120]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 8004174:	f043 0310 	orr.w	r3, r3, #16
 8004178:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d106      	bne.n	800418e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004180:	4b1a      	ldr	r3, [pc, #104]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	4a19      	ldr	r2, [pc, #100]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 8004186:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800418a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800418c:	e00f      	b.n	80041ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d106      	bne.n	80041a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004194:	4b15      	ldr	r3, [pc, #84]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 8004196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004198:	4a14      	ldr	r2, [pc, #80]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 800419a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800419e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041a0:	e005      	b.n	80041ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80041a2:	4b12      	ldr	r3, [pc, #72]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a6:	4a11      	ldr	r2, [pc, #68]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 80041a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80041ae:	4b0f      	ldr	r3, [pc, #60]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a0e      	ldr	r2, [pc, #56]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 80041b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ba:	f7fc ff1f 	bl	8000ffc <HAL_GetTick>
 80041be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80041c0:	e008      	b.n	80041d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041c2:	f7fc ff1b 	bl	8000ffc <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e006      	b.n	80041e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80041d4:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <RCCEx_PLL2_Config+0x15c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	58024400 	.word	0x58024400
 80041f0:	ffff0007 	.word	0xffff0007

080041f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004202:	4b53      	ldr	r3, [pc, #332]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b03      	cmp	r3, #3
 800420c:	d101      	bne.n	8004212 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e099      	b.n	8004346 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004212:	4b4f      	ldr	r3, [pc, #316]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a4e      	ldr	r2, [pc, #312]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 8004218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800421c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421e:	f7fc feed 	bl	8000ffc <HAL_GetTick>
 8004222:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004224:	e008      	b.n	8004238 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004226:	f7fc fee9 	bl	8000ffc <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e086      	b.n	8004346 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004238:	4b45      	ldr	r3, [pc, #276]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f0      	bne.n	8004226 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004244:	4b42      	ldr	r3, [pc, #264]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	051b      	lsls	r3, r3, #20
 8004252:	493f      	ldr	r1, [pc, #252]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 8004254:	4313      	orrs	r3, r2
 8004256:	628b      	str	r3, [r1, #40]	@ 0x28
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	3b01      	subs	r3, #1
 800425e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	3b01      	subs	r3, #1
 8004268:	025b      	lsls	r3, r3, #9
 800426a:	b29b      	uxth	r3, r3
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	3b01      	subs	r3, #1
 8004274:	041b      	lsls	r3, r3, #16
 8004276:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	3b01      	subs	r3, #1
 8004282:	061b      	lsls	r3, r3, #24
 8004284:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004288:	4931      	ldr	r1, [pc, #196]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 800428a:	4313      	orrs	r3, r2
 800428c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800428e:	4b30      	ldr	r3, [pc, #192]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 8004290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004292:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	492d      	ldr	r1, [pc, #180]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 800429c:	4313      	orrs	r3, r2
 800429e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80042a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	4928      	ldr	r1, [pc, #160]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80042b2:	4b27      	ldr	r3, [pc, #156]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 80042b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b6:	4a26      	ldr	r2, [pc, #152]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 80042b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80042be:	4b24      	ldr	r3, [pc, #144]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 80042c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042c2:	4b24      	ldr	r3, [pc, #144]	@ (8004354 <RCCEx_PLL3_Config+0x160>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	69d2      	ldr	r2, [r2, #28]
 80042ca:	00d2      	lsls	r2, r2, #3
 80042cc:	4920      	ldr	r1, [pc, #128]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80042d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 80042d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 80042d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d106      	bne.n	80042f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80042e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 80042e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e8:	4a19      	ldr	r2, [pc, #100]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 80042ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042f0:	e00f      	b.n	8004312 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d106      	bne.n	8004306 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80042f8:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	4a14      	ldr	r2, [pc, #80]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 80042fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004302:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004304:	e005      	b.n	8004312 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004306:	4b12      	ldr	r3, [pc, #72]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 8004308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430a:	4a11      	ldr	r2, [pc, #68]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 800430c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004310:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004312:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a0e      	ldr	r2, [pc, #56]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 8004318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800431c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800431e:	f7fc fe6d 	bl	8000ffc <HAL_GetTick>
 8004322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004324:	e008      	b.n	8004338 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004326:	f7fc fe69 	bl	8000ffc <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e006      	b.n	8004346 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004338:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <RCCEx_PLL3_Config+0x15c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004344:	7bfb      	ldrb	r3, [r7, #15]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	58024400 	.word	0x58024400
 8004354:	ffff0007 	.word	0xffff0007

08004358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e042      	b.n	80043f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004370:	2b00      	cmp	r3, #0
 8004372:	d106      	bne.n	8004382 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7fc fd21 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2224      	movs	r2, #36	@ 0x24
 8004386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0201 	bic.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fe1e 	bl	8004fe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f8b3 	bl	8004514 <UART_SetConfig>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e01b      	b.n	80043f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fe9d 	bl	8005128 <UART_CheckIdleState>
 80043ee:	4603      	mov	r3, r0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08a      	sub	sp, #40	@ 0x28
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	4613      	mov	r3, r2
 8004406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440e:	2b20      	cmp	r3, #32
 8004410:	d17b      	bne.n	800450a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <HAL_UART_Transmit+0x26>
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e074      	b.n	800450c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2221      	movs	r2, #33	@ 0x21
 800442e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004432:	f7fc fde3 	bl	8000ffc <HAL_GetTick>
 8004436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	88fa      	ldrh	r2, [r7, #6]
 800443c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004450:	d108      	bne.n	8004464 <HAL_UART_Transmit+0x6c>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d104      	bne.n	8004464 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	e003      	b.n	800446c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004468:	2300      	movs	r3, #0
 800446a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800446c:	e030      	b.n	80044d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2200      	movs	r2, #0
 8004476:	2180      	movs	r1, #128	@ 0x80
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 feff 	bl	800527c <UART_WaitOnFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e03d      	b.n	800450c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10b      	bne.n	80044ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	3302      	adds	r3, #2
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	e007      	b.n	80044be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	781a      	ldrb	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	3301      	adds	r3, #1
 80044bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1c8      	bne.n	800446e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2200      	movs	r2, #0
 80044e4:	2140      	movs	r1, #64	@ 0x40
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fec8 	bl	800527c <UART_WaitOnFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d005      	beq.n	80044fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e006      	b.n	800450c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	e000      	b.n	800450c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800450a:	2302      	movs	r3, #2
  }
}
 800450c:	4618      	mov	r0, r3
 800450e:	3720      	adds	r7, #32
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004518:	b092      	sub	sp, #72	@ 0x48
 800451a:	af00      	add	r7, sp, #0
 800451c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	431a      	orrs	r2, r3
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	431a      	orrs	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	4313      	orrs	r3, r2
 800453a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4bbe      	ldr	r3, [pc, #760]	@ (800483c <UART_SetConfig+0x328>)
 8004544:	4013      	ands	r3, r2
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800454c:	430b      	orrs	r3, r1
 800454e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4ab3      	ldr	r2, [pc, #716]	@ (8004840 <UART_SetConfig+0x32c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800457c:	4313      	orrs	r3, r2
 800457e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	4baf      	ldr	r3, [pc, #700]	@ (8004844 <UART_SetConfig+0x330>)
 8004588:	4013      	ands	r3, r2
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004590:	430b      	orrs	r3, r1
 8004592:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459a:	f023 010f 	bic.w	r1, r3, #15
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4aa6      	ldr	r2, [pc, #664]	@ (8004848 <UART_SetConfig+0x334>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d177      	bne.n	80046a4 <UART_SetConfig+0x190>
 80045b4:	4ba5      	ldr	r3, [pc, #660]	@ (800484c <UART_SetConfig+0x338>)
 80045b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045bc:	2b28      	cmp	r3, #40	@ 0x28
 80045be:	d86d      	bhi.n	800469c <UART_SetConfig+0x188>
 80045c0:	a201      	add	r2, pc, #4	@ (adr r2, 80045c8 <UART_SetConfig+0xb4>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	0800466d 	.word	0x0800466d
 80045cc:	0800469d 	.word	0x0800469d
 80045d0:	0800469d 	.word	0x0800469d
 80045d4:	0800469d 	.word	0x0800469d
 80045d8:	0800469d 	.word	0x0800469d
 80045dc:	0800469d 	.word	0x0800469d
 80045e0:	0800469d 	.word	0x0800469d
 80045e4:	0800469d 	.word	0x0800469d
 80045e8:	08004675 	.word	0x08004675
 80045ec:	0800469d 	.word	0x0800469d
 80045f0:	0800469d 	.word	0x0800469d
 80045f4:	0800469d 	.word	0x0800469d
 80045f8:	0800469d 	.word	0x0800469d
 80045fc:	0800469d 	.word	0x0800469d
 8004600:	0800469d 	.word	0x0800469d
 8004604:	0800469d 	.word	0x0800469d
 8004608:	0800467d 	.word	0x0800467d
 800460c:	0800469d 	.word	0x0800469d
 8004610:	0800469d 	.word	0x0800469d
 8004614:	0800469d 	.word	0x0800469d
 8004618:	0800469d 	.word	0x0800469d
 800461c:	0800469d 	.word	0x0800469d
 8004620:	0800469d 	.word	0x0800469d
 8004624:	0800469d 	.word	0x0800469d
 8004628:	08004685 	.word	0x08004685
 800462c:	0800469d 	.word	0x0800469d
 8004630:	0800469d 	.word	0x0800469d
 8004634:	0800469d 	.word	0x0800469d
 8004638:	0800469d 	.word	0x0800469d
 800463c:	0800469d 	.word	0x0800469d
 8004640:	0800469d 	.word	0x0800469d
 8004644:	0800469d 	.word	0x0800469d
 8004648:	0800468d 	.word	0x0800468d
 800464c:	0800469d 	.word	0x0800469d
 8004650:	0800469d 	.word	0x0800469d
 8004654:	0800469d 	.word	0x0800469d
 8004658:	0800469d 	.word	0x0800469d
 800465c:	0800469d 	.word	0x0800469d
 8004660:	0800469d 	.word	0x0800469d
 8004664:	0800469d 	.word	0x0800469d
 8004668:	08004695 	.word	0x08004695
 800466c:	2301      	movs	r3, #1
 800466e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004672:	e222      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004674:	2304      	movs	r3, #4
 8004676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800467a:	e21e      	b.n	8004aba <UART_SetConfig+0x5a6>
 800467c:	2308      	movs	r3, #8
 800467e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004682:	e21a      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004684:	2310      	movs	r3, #16
 8004686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800468a:	e216      	b.n	8004aba <UART_SetConfig+0x5a6>
 800468c:	2320      	movs	r3, #32
 800468e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004692:	e212      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004694:	2340      	movs	r3, #64	@ 0x40
 8004696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800469a:	e20e      	b.n	8004aba <UART_SetConfig+0x5a6>
 800469c:	2380      	movs	r3, #128	@ 0x80
 800469e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046a2:	e20a      	b.n	8004aba <UART_SetConfig+0x5a6>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a69      	ldr	r2, [pc, #420]	@ (8004850 <UART_SetConfig+0x33c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d130      	bne.n	8004710 <UART_SetConfig+0x1fc>
 80046ae:	4b67      	ldr	r3, [pc, #412]	@ (800484c <UART_SetConfig+0x338>)
 80046b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	2b05      	cmp	r3, #5
 80046b8:	d826      	bhi.n	8004708 <UART_SetConfig+0x1f4>
 80046ba:	a201      	add	r2, pc, #4	@ (adr r2, 80046c0 <UART_SetConfig+0x1ac>)
 80046bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c0:	080046d9 	.word	0x080046d9
 80046c4:	080046e1 	.word	0x080046e1
 80046c8:	080046e9 	.word	0x080046e9
 80046cc:	080046f1 	.word	0x080046f1
 80046d0:	080046f9 	.word	0x080046f9
 80046d4:	08004701 	.word	0x08004701
 80046d8:	2300      	movs	r3, #0
 80046da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046de:	e1ec      	b.n	8004aba <UART_SetConfig+0x5a6>
 80046e0:	2304      	movs	r3, #4
 80046e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046e6:	e1e8      	b.n	8004aba <UART_SetConfig+0x5a6>
 80046e8:	2308      	movs	r3, #8
 80046ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ee:	e1e4      	b.n	8004aba <UART_SetConfig+0x5a6>
 80046f0:	2310      	movs	r3, #16
 80046f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046f6:	e1e0      	b.n	8004aba <UART_SetConfig+0x5a6>
 80046f8:	2320      	movs	r3, #32
 80046fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fe:	e1dc      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004700:	2340      	movs	r3, #64	@ 0x40
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004706:	e1d8      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004708:	2380      	movs	r3, #128	@ 0x80
 800470a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800470e:	e1d4      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a4f      	ldr	r2, [pc, #316]	@ (8004854 <UART_SetConfig+0x340>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d130      	bne.n	800477c <UART_SetConfig+0x268>
 800471a:	4b4c      	ldr	r3, [pc, #304]	@ (800484c <UART_SetConfig+0x338>)
 800471c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	2b05      	cmp	r3, #5
 8004724:	d826      	bhi.n	8004774 <UART_SetConfig+0x260>
 8004726:	a201      	add	r2, pc, #4	@ (adr r2, 800472c <UART_SetConfig+0x218>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	08004745 	.word	0x08004745
 8004730:	0800474d 	.word	0x0800474d
 8004734:	08004755 	.word	0x08004755
 8004738:	0800475d 	.word	0x0800475d
 800473c:	08004765 	.word	0x08004765
 8004740:	0800476d 	.word	0x0800476d
 8004744:	2300      	movs	r3, #0
 8004746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800474a:	e1b6      	b.n	8004aba <UART_SetConfig+0x5a6>
 800474c:	2304      	movs	r3, #4
 800474e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004752:	e1b2      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004754:	2308      	movs	r3, #8
 8004756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800475a:	e1ae      	b.n	8004aba <UART_SetConfig+0x5a6>
 800475c:	2310      	movs	r3, #16
 800475e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004762:	e1aa      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004764:	2320      	movs	r3, #32
 8004766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800476a:	e1a6      	b.n	8004aba <UART_SetConfig+0x5a6>
 800476c:	2340      	movs	r3, #64	@ 0x40
 800476e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004772:	e1a2      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004774:	2380      	movs	r3, #128	@ 0x80
 8004776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800477a:	e19e      	b.n	8004aba <UART_SetConfig+0x5a6>
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a35      	ldr	r2, [pc, #212]	@ (8004858 <UART_SetConfig+0x344>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d130      	bne.n	80047e8 <UART_SetConfig+0x2d4>
 8004786:	4b31      	ldr	r3, [pc, #196]	@ (800484c <UART_SetConfig+0x338>)
 8004788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	2b05      	cmp	r3, #5
 8004790:	d826      	bhi.n	80047e0 <UART_SetConfig+0x2cc>
 8004792:	a201      	add	r2, pc, #4	@ (adr r2, 8004798 <UART_SetConfig+0x284>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	080047b1 	.word	0x080047b1
 800479c:	080047b9 	.word	0x080047b9
 80047a0:	080047c1 	.word	0x080047c1
 80047a4:	080047c9 	.word	0x080047c9
 80047a8:	080047d1 	.word	0x080047d1
 80047ac:	080047d9 	.word	0x080047d9
 80047b0:	2300      	movs	r3, #0
 80047b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047b6:	e180      	b.n	8004aba <UART_SetConfig+0x5a6>
 80047b8:	2304      	movs	r3, #4
 80047ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047be:	e17c      	b.n	8004aba <UART_SetConfig+0x5a6>
 80047c0:	2308      	movs	r3, #8
 80047c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047c6:	e178      	b.n	8004aba <UART_SetConfig+0x5a6>
 80047c8:	2310      	movs	r3, #16
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ce:	e174      	b.n	8004aba <UART_SetConfig+0x5a6>
 80047d0:	2320      	movs	r3, #32
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047d6:	e170      	b.n	8004aba <UART_SetConfig+0x5a6>
 80047d8:	2340      	movs	r3, #64	@ 0x40
 80047da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047de:	e16c      	b.n	8004aba <UART_SetConfig+0x5a6>
 80047e0:	2380      	movs	r3, #128	@ 0x80
 80047e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047e6:	e168      	b.n	8004aba <UART_SetConfig+0x5a6>
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1b      	ldr	r2, [pc, #108]	@ (800485c <UART_SetConfig+0x348>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d142      	bne.n	8004878 <UART_SetConfig+0x364>
 80047f2:	4b16      	ldr	r3, [pc, #88]	@ (800484c <UART_SetConfig+0x338>)
 80047f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	2b05      	cmp	r3, #5
 80047fc:	d838      	bhi.n	8004870 <UART_SetConfig+0x35c>
 80047fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004804 <UART_SetConfig+0x2f0>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	0800481d 	.word	0x0800481d
 8004808:	08004825 	.word	0x08004825
 800480c:	0800482d 	.word	0x0800482d
 8004810:	08004835 	.word	0x08004835
 8004814:	08004861 	.word	0x08004861
 8004818:	08004869 	.word	0x08004869
 800481c:	2300      	movs	r3, #0
 800481e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004822:	e14a      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004824:	2304      	movs	r3, #4
 8004826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800482a:	e146      	b.n	8004aba <UART_SetConfig+0x5a6>
 800482c:	2308      	movs	r3, #8
 800482e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004832:	e142      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004834:	2310      	movs	r3, #16
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800483a:	e13e      	b.n	8004aba <UART_SetConfig+0x5a6>
 800483c:	cfff69f3 	.word	0xcfff69f3
 8004840:	58000c00 	.word	0x58000c00
 8004844:	11fff4ff 	.word	0x11fff4ff
 8004848:	40011000 	.word	0x40011000
 800484c:	58024400 	.word	0x58024400
 8004850:	40004400 	.word	0x40004400
 8004854:	40004800 	.word	0x40004800
 8004858:	40004c00 	.word	0x40004c00
 800485c:	40005000 	.word	0x40005000
 8004860:	2320      	movs	r3, #32
 8004862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004866:	e128      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004868:	2340      	movs	r3, #64	@ 0x40
 800486a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800486e:	e124      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004870:	2380      	movs	r3, #128	@ 0x80
 8004872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004876:	e120      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4acb      	ldr	r2, [pc, #812]	@ (8004bac <UART_SetConfig+0x698>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d176      	bne.n	8004970 <UART_SetConfig+0x45c>
 8004882:	4bcb      	ldr	r3, [pc, #812]	@ (8004bb0 <UART_SetConfig+0x69c>)
 8004884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800488a:	2b28      	cmp	r3, #40	@ 0x28
 800488c:	d86c      	bhi.n	8004968 <UART_SetConfig+0x454>
 800488e:	a201      	add	r2, pc, #4	@ (adr r2, 8004894 <UART_SetConfig+0x380>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	08004939 	.word	0x08004939
 8004898:	08004969 	.word	0x08004969
 800489c:	08004969 	.word	0x08004969
 80048a0:	08004969 	.word	0x08004969
 80048a4:	08004969 	.word	0x08004969
 80048a8:	08004969 	.word	0x08004969
 80048ac:	08004969 	.word	0x08004969
 80048b0:	08004969 	.word	0x08004969
 80048b4:	08004941 	.word	0x08004941
 80048b8:	08004969 	.word	0x08004969
 80048bc:	08004969 	.word	0x08004969
 80048c0:	08004969 	.word	0x08004969
 80048c4:	08004969 	.word	0x08004969
 80048c8:	08004969 	.word	0x08004969
 80048cc:	08004969 	.word	0x08004969
 80048d0:	08004969 	.word	0x08004969
 80048d4:	08004949 	.word	0x08004949
 80048d8:	08004969 	.word	0x08004969
 80048dc:	08004969 	.word	0x08004969
 80048e0:	08004969 	.word	0x08004969
 80048e4:	08004969 	.word	0x08004969
 80048e8:	08004969 	.word	0x08004969
 80048ec:	08004969 	.word	0x08004969
 80048f0:	08004969 	.word	0x08004969
 80048f4:	08004951 	.word	0x08004951
 80048f8:	08004969 	.word	0x08004969
 80048fc:	08004969 	.word	0x08004969
 8004900:	08004969 	.word	0x08004969
 8004904:	08004969 	.word	0x08004969
 8004908:	08004969 	.word	0x08004969
 800490c:	08004969 	.word	0x08004969
 8004910:	08004969 	.word	0x08004969
 8004914:	08004959 	.word	0x08004959
 8004918:	08004969 	.word	0x08004969
 800491c:	08004969 	.word	0x08004969
 8004920:	08004969 	.word	0x08004969
 8004924:	08004969 	.word	0x08004969
 8004928:	08004969 	.word	0x08004969
 800492c:	08004969 	.word	0x08004969
 8004930:	08004969 	.word	0x08004969
 8004934:	08004961 	.word	0x08004961
 8004938:	2301      	movs	r3, #1
 800493a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800493e:	e0bc      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004940:	2304      	movs	r3, #4
 8004942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004946:	e0b8      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004948:	2308      	movs	r3, #8
 800494a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800494e:	e0b4      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004950:	2310      	movs	r3, #16
 8004952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004956:	e0b0      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004958:	2320      	movs	r3, #32
 800495a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800495e:	e0ac      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004960:	2340      	movs	r3, #64	@ 0x40
 8004962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004966:	e0a8      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004968:	2380      	movs	r3, #128	@ 0x80
 800496a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800496e:	e0a4      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a8f      	ldr	r2, [pc, #572]	@ (8004bb4 <UART_SetConfig+0x6a0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d130      	bne.n	80049dc <UART_SetConfig+0x4c8>
 800497a:	4b8d      	ldr	r3, [pc, #564]	@ (8004bb0 <UART_SetConfig+0x69c>)
 800497c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	2b05      	cmp	r3, #5
 8004984:	d826      	bhi.n	80049d4 <UART_SetConfig+0x4c0>
 8004986:	a201      	add	r2, pc, #4	@ (adr r2, 800498c <UART_SetConfig+0x478>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	080049a5 	.word	0x080049a5
 8004990:	080049ad 	.word	0x080049ad
 8004994:	080049b5 	.word	0x080049b5
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049c5 	.word	0x080049c5
 80049a0:	080049cd 	.word	0x080049cd
 80049a4:	2300      	movs	r3, #0
 80049a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049aa:	e086      	b.n	8004aba <UART_SetConfig+0x5a6>
 80049ac:	2304      	movs	r3, #4
 80049ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049b2:	e082      	b.n	8004aba <UART_SetConfig+0x5a6>
 80049b4:	2308      	movs	r3, #8
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ba:	e07e      	b.n	8004aba <UART_SetConfig+0x5a6>
 80049bc:	2310      	movs	r3, #16
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c2:	e07a      	b.n	8004aba <UART_SetConfig+0x5a6>
 80049c4:	2320      	movs	r3, #32
 80049c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ca:	e076      	b.n	8004aba <UART_SetConfig+0x5a6>
 80049cc:	2340      	movs	r3, #64	@ 0x40
 80049ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049d2:	e072      	b.n	8004aba <UART_SetConfig+0x5a6>
 80049d4:	2380      	movs	r3, #128	@ 0x80
 80049d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049da:	e06e      	b.n	8004aba <UART_SetConfig+0x5a6>
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a75      	ldr	r2, [pc, #468]	@ (8004bb8 <UART_SetConfig+0x6a4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d130      	bne.n	8004a48 <UART_SetConfig+0x534>
 80049e6:	4b72      	ldr	r3, [pc, #456]	@ (8004bb0 <UART_SetConfig+0x69c>)
 80049e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	2b05      	cmp	r3, #5
 80049f0:	d826      	bhi.n	8004a40 <UART_SetConfig+0x52c>
 80049f2:	a201      	add	r2, pc, #4	@ (adr r2, 80049f8 <UART_SetConfig+0x4e4>)
 80049f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f8:	08004a11 	.word	0x08004a11
 80049fc:	08004a19 	.word	0x08004a19
 8004a00:	08004a21 	.word	0x08004a21
 8004a04:	08004a29 	.word	0x08004a29
 8004a08:	08004a31 	.word	0x08004a31
 8004a0c:	08004a39 	.word	0x08004a39
 8004a10:	2300      	movs	r3, #0
 8004a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a16:	e050      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a1e:	e04c      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004a20:	2308      	movs	r3, #8
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a26:	e048      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004a28:	2310      	movs	r3, #16
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a2e:	e044      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004a30:	2320      	movs	r3, #32
 8004a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a36:	e040      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004a38:	2340      	movs	r3, #64	@ 0x40
 8004a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a3e:	e03c      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004a40:	2380      	movs	r3, #128	@ 0x80
 8004a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a46:	e038      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a5b      	ldr	r2, [pc, #364]	@ (8004bbc <UART_SetConfig+0x6a8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d130      	bne.n	8004ab4 <UART_SetConfig+0x5a0>
 8004a52:	4b57      	ldr	r3, [pc, #348]	@ (8004bb0 <UART_SetConfig+0x69c>)
 8004a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	2b05      	cmp	r3, #5
 8004a5c:	d826      	bhi.n	8004aac <UART_SetConfig+0x598>
 8004a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a64 <UART_SetConfig+0x550>)
 8004a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a64:	08004a7d 	.word	0x08004a7d
 8004a68:	08004a85 	.word	0x08004a85
 8004a6c:	08004a8d 	.word	0x08004a8d
 8004a70:	08004a95 	.word	0x08004a95
 8004a74:	08004a9d 	.word	0x08004a9d
 8004a78:	08004aa5 	.word	0x08004aa5
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a82:	e01a      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004a84:	2304      	movs	r3, #4
 8004a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a8a:	e016      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a92:	e012      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004a94:	2310      	movs	r3, #16
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a9a:	e00e      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004a9c:	2320      	movs	r3, #32
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aa2:	e00a      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004aa4:	2340      	movs	r3, #64	@ 0x40
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aaa:	e006      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004aac:	2380      	movs	r3, #128	@ 0x80
 8004aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ab2:	e002      	b.n	8004aba <UART_SetConfig+0x5a6>
 8004ab4:	2380      	movs	r3, #128	@ 0x80
 8004ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a3f      	ldr	r2, [pc, #252]	@ (8004bbc <UART_SetConfig+0x6a8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	f040 80f8 	bne.w	8004cb6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ac6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	dc46      	bgt.n	8004b5c <UART_SetConfig+0x648>
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	f2c0 8082 	blt.w	8004bd8 <UART_SetConfig+0x6c4>
 8004ad4:	3b02      	subs	r3, #2
 8004ad6:	2b1e      	cmp	r3, #30
 8004ad8:	d87e      	bhi.n	8004bd8 <UART_SetConfig+0x6c4>
 8004ada:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae0 <UART_SetConfig+0x5cc>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004b63 	.word	0x08004b63
 8004ae4:	08004bd9 	.word	0x08004bd9
 8004ae8:	08004b6b 	.word	0x08004b6b
 8004aec:	08004bd9 	.word	0x08004bd9
 8004af0:	08004bd9 	.word	0x08004bd9
 8004af4:	08004bd9 	.word	0x08004bd9
 8004af8:	08004b7b 	.word	0x08004b7b
 8004afc:	08004bd9 	.word	0x08004bd9
 8004b00:	08004bd9 	.word	0x08004bd9
 8004b04:	08004bd9 	.word	0x08004bd9
 8004b08:	08004bd9 	.word	0x08004bd9
 8004b0c:	08004bd9 	.word	0x08004bd9
 8004b10:	08004bd9 	.word	0x08004bd9
 8004b14:	08004bd9 	.word	0x08004bd9
 8004b18:	08004b8b 	.word	0x08004b8b
 8004b1c:	08004bd9 	.word	0x08004bd9
 8004b20:	08004bd9 	.word	0x08004bd9
 8004b24:	08004bd9 	.word	0x08004bd9
 8004b28:	08004bd9 	.word	0x08004bd9
 8004b2c:	08004bd9 	.word	0x08004bd9
 8004b30:	08004bd9 	.word	0x08004bd9
 8004b34:	08004bd9 	.word	0x08004bd9
 8004b38:	08004bd9 	.word	0x08004bd9
 8004b3c:	08004bd9 	.word	0x08004bd9
 8004b40:	08004bd9 	.word	0x08004bd9
 8004b44:	08004bd9 	.word	0x08004bd9
 8004b48:	08004bd9 	.word	0x08004bd9
 8004b4c:	08004bd9 	.word	0x08004bd9
 8004b50:	08004bd9 	.word	0x08004bd9
 8004b54:	08004bd9 	.word	0x08004bd9
 8004b58:	08004bcb 	.word	0x08004bcb
 8004b5c:	2b40      	cmp	r3, #64	@ 0x40
 8004b5e:	d037      	beq.n	8004bd0 <UART_SetConfig+0x6bc>
 8004b60:	e03a      	b.n	8004bd8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004b62:	f7fe ffd7 	bl	8003b14 <HAL_RCCEx_GetD3PCLK1Freq>
 8004b66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004b68:	e03c      	b.n	8004be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe ffe6 	bl	8003b40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b78:	e034      	b.n	8004be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b7a:	f107 0318 	add.w	r3, r7, #24
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff f932 	bl	8003de8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b88:	e02c      	b.n	8004be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b8a:	4b09      	ldr	r3, [pc, #36]	@ (8004bb0 <UART_SetConfig+0x69c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d016      	beq.n	8004bc4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b96:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <UART_SetConfig+0x69c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	08db      	lsrs	r3, r3, #3
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	4a07      	ldr	r2, [pc, #28]	@ (8004bc0 <UART_SetConfig+0x6ac>)
 8004ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ba8:	e01c      	b.n	8004be4 <UART_SetConfig+0x6d0>
 8004baa:	bf00      	nop
 8004bac:	40011400 	.word	0x40011400
 8004bb0:	58024400 	.word	0x58024400
 8004bb4:	40007800 	.word	0x40007800
 8004bb8:	40007c00 	.word	0x40007c00
 8004bbc:	58000c00 	.word	0x58000c00
 8004bc0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004bc4:	4b9d      	ldr	r3, [pc, #628]	@ (8004e3c <UART_SetConfig+0x928>)
 8004bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bc8:	e00c      	b.n	8004be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004bca:	4b9d      	ldr	r3, [pc, #628]	@ (8004e40 <UART_SetConfig+0x92c>)
 8004bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bce:	e009      	b.n	8004be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bd6:	e005      	b.n	8004be4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004be2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 81de 	beq.w	8004fa8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf0:	4a94      	ldr	r2, [pc, #592]	@ (8004e44 <UART_SetConfig+0x930>)
 8004bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bfe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4413      	add	r3, r2
 8004c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d305      	bcc.n	8004c1c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d903      	bls.n	8004c24 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004c22:	e1c1      	b.n	8004fa8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c26:	2200      	movs	r2, #0
 8004c28:	60bb      	str	r3, [r7, #8]
 8004c2a:	60fa      	str	r2, [r7, #12]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c30:	4a84      	ldr	r2, [pc, #528]	@ (8004e44 <UART_SetConfig+0x930>)
 8004c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2200      	movs	r2, #0
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c46:	f7fb fb9b 	bl	8000380 <__aeabi_uldivmod>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4619      	mov	r1, r3
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	020b      	lsls	r3, r1, #8
 8004c5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c60:	0202      	lsls	r2, r0, #8
 8004c62:	6979      	ldr	r1, [r7, #20]
 8004c64:	6849      	ldr	r1, [r1, #4]
 8004c66:	0849      	lsrs	r1, r1, #1
 8004c68:	2000      	movs	r0, #0
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	eb12 0804 	adds.w	r8, r2, r4
 8004c72:	eb43 0905 	adc.w	r9, r3, r5
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	469a      	mov	sl, r3
 8004c7e:	4693      	mov	fp, r2
 8004c80:	4652      	mov	r2, sl
 8004c82:	465b      	mov	r3, fp
 8004c84:	4640      	mov	r0, r8
 8004c86:	4649      	mov	r1, r9
 8004c88:	f7fb fb7a 	bl	8000380 <__aeabi_uldivmod>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4613      	mov	r3, r2
 8004c92:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c9a:	d308      	bcc.n	8004cae <UART_SetConfig+0x79a>
 8004c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ca2:	d204      	bcs.n	8004cae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004caa:	60da      	str	r2, [r3, #12]
 8004cac:	e17c      	b.n	8004fa8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004cb4:	e178      	b.n	8004fa8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cbe:	f040 80c5 	bne.w	8004e4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004cc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	dc48      	bgt.n	8004d5c <UART_SetConfig+0x848>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	db7b      	blt.n	8004dc6 <UART_SetConfig+0x8b2>
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d879      	bhi.n	8004dc6 <UART_SetConfig+0x8b2>
 8004cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd8 <UART_SetConfig+0x7c4>)
 8004cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd8:	08004d63 	.word	0x08004d63
 8004cdc:	08004d6b 	.word	0x08004d6b
 8004ce0:	08004dc7 	.word	0x08004dc7
 8004ce4:	08004dc7 	.word	0x08004dc7
 8004ce8:	08004d73 	.word	0x08004d73
 8004cec:	08004dc7 	.word	0x08004dc7
 8004cf0:	08004dc7 	.word	0x08004dc7
 8004cf4:	08004dc7 	.word	0x08004dc7
 8004cf8:	08004d83 	.word	0x08004d83
 8004cfc:	08004dc7 	.word	0x08004dc7
 8004d00:	08004dc7 	.word	0x08004dc7
 8004d04:	08004dc7 	.word	0x08004dc7
 8004d08:	08004dc7 	.word	0x08004dc7
 8004d0c:	08004dc7 	.word	0x08004dc7
 8004d10:	08004dc7 	.word	0x08004dc7
 8004d14:	08004dc7 	.word	0x08004dc7
 8004d18:	08004d93 	.word	0x08004d93
 8004d1c:	08004dc7 	.word	0x08004dc7
 8004d20:	08004dc7 	.word	0x08004dc7
 8004d24:	08004dc7 	.word	0x08004dc7
 8004d28:	08004dc7 	.word	0x08004dc7
 8004d2c:	08004dc7 	.word	0x08004dc7
 8004d30:	08004dc7 	.word	0x08004dc7
 8004d34:	08004dc7 	.word	0x08004dc7
 8004d38:	08004dc7 	.word	0x08004dc7
 8004d3c:	08004dc7 	.word	0x08004dc7
 8004d40:	08004dc7 	.word	0x08004dc7
 8004d44:	08004dc7 	.word	0x08004dc7
 8004d48:	08004dc7 	.word	0x08004dc7
 8004d4c:	08004dc7 	.word	0x08004dc7
 8004d50:	08004dc7 	.word	0x08004dc7
 8004d54:	08004dc7 	.word	0x08004dc7
 8004d58:	08004db9 	.word	0x08004db9
 8004d5c:	2b40      	cmp	r3, #64	@ 0x40
 8004d5e:	d02e      	beq.n	8004dbe <UART_SetConfig+0x8aa>
 8004d60:	e031      	b.n	8004dc6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d62:	f7fd fca1 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8004d66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d68:	e033      	b.n	8004dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d6a:	f7fd fcb3 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8004d6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d70:	e02f      	b.n	8004dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fe fee2 	bl	8003b40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d80:	e027      	b.n	8004dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d82:	f107 0318 	add.w	r3, r7, #24
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff f82e 	bl	8003de8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d90:	e01f      	b.n	8004dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d92:	4b2d      	ldr	r3, [pc, #180]	@ (8004e48 <UART_SetConfig+0x934>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004e48 <UART_SetConfig+0x934>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	08db      	lsrs	r3, r3, #3
 8004da4:	f003 0303 	and.w	r3, r3, #3
 8004da8:	4a24      	ldr	r2, [pc, #144]	@ (8004e3c <UART_SetConfig+0x928>)
 8004daa:	fa22 f303 	lsr.w	r3, r2, r3
 8004dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004db0:	e00f      	b.n	8004dd2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004db2:	4b22      	ldr	r3, [pc, #136]	@ (8004e3c <UART_SetConfig+0x928>)
 8004db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004db6:	e00c      	b.n	8004dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004db8:	4b21      	ldr	r3, [pc, #132]	@ (8004e40 <UART_SetConfig+0x92c>)
 8004dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dbc:	e009      	b.n	8004dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dc4:	e005      	b.n	8004dd2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004dd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 80e7 	beq.w	8004fa8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	4a19      	ldr	r2, [pc, #100]	@ (8004e44 <UART_SetConfig+0x930>)
 8004de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004de4:	461a      	mov	r2, r3
 8004de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dec:	005a      	lsls	r2, r3, #1
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	085b      	lsrs	r3, r3, #1
 8004df4:	441a      	add	r2, r3
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e02:	2b0f      	cmp	r3, #15
 8004e04:	d916      	bls.n	8004e34 <UART_SetConfig+0x920>
 8004e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e0c:	d212      	bcs.n	8004e34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f023 030f 	bic.w	r3, r3, #15
 8004e16:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1a:	085b      	lsrs	r3, r3, #1
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004e26:	4313      	orrs	r3, r2
 8004e28:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004e30:	60da      	str	r2, [r3, #12]
 8004e32:	e0b9      	b.n	8004fa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004e3a:	e0b5      	b.n	8004fa8 <UART_SetConfig+0xa94>
 8004e3c:	03d09000 	.word	0x03d09000
 8004e40:	003d0900 	.word	0x003d0900
 8004e44:	08006584 	.word	0x08006584
 8004e48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	dc49      	bgt.n	8004ee8 <UART_SetConfig+0x9d4>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	db7c      	blt.n	8004f52 <UART_SetConfig+0xa3e>
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	d87a      	bhi.n	8004f52 <UART_SetConfig+0xa3e>
 8004e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e64 <UART_SetConfig+0x950>)
 8004e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e62:	bf00      	nop
 8004e64:	08004eef 	.word	0x08004eef
 8004e68:	08004ef7 	.word	0x08004ef7
 8004e6c:	08004f53 	.word	0x08004f53
 8004e70:	08004f53 	.word	0x08004f53
 8004e74:	08004eff 	.word	0x08004eff
 8004e78:	08004f53 	.word	0x08004f53
 8004e7c:	08004f53 	.word	0x08004f53
 8004e80:	08004f53 	.word	0x08004f53
 8004e84:	08004f0f 	.word	0x08004f0f
 8004e88:	08004f53 	.word	0x08004f53
 8004e8c:	08004f53 	.word	0x08004f53
 8004e90:	08004f53 	.word	0x08004f53
 8004e94:	08004f53 	.word	0x08004f53
 8004e98:	08004f53 	.word	0x08004f53
 8004e9c:	08004f53 	.word	0x08004f53
 8004ea0:	08004f53 	.word	0x08004f53
 8004ea4:	08004f1f 	.word	0x08004f1f
 8004ea8:	08004f53 	.word	0x08004f53
 8004eac:	08004f53 	.word	0x08004f53
 8004eb0:	08004f53 	.word	0x08004f53
 8004eb4:	08004f53 	.word	0x08004f53
 8004eb8:	08004f53 	.word	0x08004f53
 8004ebc:	08004f53 	.word	0x08004f53
 8004ec0:	08004f53 	.word	0x08004f53
 8004ec4:	08004f53 	.word	0x08004f53
 8004ec8:	08004f53 	.word	0x08004f53
 8004ecc:	08004f53 	.word	0x08004f53
 8004ed0:	08004f53 	.word	0x08004f53
 8004ed4:	08004f53 	.word	0x08004f53
 8004ed8:	08004f53 	.word	0x08004f53
 8004edc:	08004f53 	.word	0x08004f53
 8004ee0:	08004f53 	.word	0x08004f53
 8004ee4:	08004f45 	.word	0x08004f45
 8004ee8:	2b40      	cmp	r3, #64	@ 0x40
 8004eea:	d02e      	beq.n	8004f4a <UART_SetConfig+0xa36>
 8004eec:	e031      	b.n	8004f52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eee:	f7fd fbdb 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8004ef2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004ef4:	e033      	b.n	8004f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef6:	f7fd fbed 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8004efa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004efc:	e02f      	b.n	8004f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe fe1c 	bl	8003b40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f0c:	e027      	b.n	8004f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f0e:	f107 0318 	add.w	r3, r7, #24
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe ff68 	bl	8003de8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f1c:	e01f      	b.n	8004f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd4 <UART_SetConfig+0xac0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d009      	beq.n	8004f3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd4 <UART_SetConfig+0xac0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	08db      	lsrs	r3, r3, #3
 8004f30:	f003 0303 	and.w	r3, r3, #3
 8004f34:	4a28      	ldr	r2, [pc, #160]	@ (8004fd8 <UART_SetConfig+0xac4>)
 8004f36:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f3c:	e00f      	b.n	8004f5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004f3e:	4b26      	ldr	r3, [pc, #152]	@ (8004fd8 <UART_SetConfig+0xac4>)
 8004f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f42:	e00c      	b.n	8004f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f44:	4b25      	ldr	r3, [pc, #148]	@ (8004fdc <UART_SetConfig+0xac8>)
 8004f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f48:	e009      	b.n	8004f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f50:	e005      	b.n	8004f5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004f5c:	bf00      	nop
    }

    if (pclk != 0U)
 8004f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d021      	beq.n	8004fa8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe0 <UART_SetConfig+0xacc>)
 8004f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f72:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	085b      	lsrs	r3, r3, #1
 8004f7c:	441a      	add	r2, r3
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8a:	2b0f      	cmp	r3, #15
 8004f8c:	d909      	bls.n	8004fa2 <UART_SetConfig+0xa8e>
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f94:	d205      	bcs.n	8004fa2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60da      	str	r2, [r3, #12]
 8004fa0:	e002      	b.n	8004fa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004fc4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3748      	adds	r7, #72	@ 0x48
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd2:	bf00      	nop
 8004fd4:	58024400 	.word	0x58024400
 8004fd8:	03d09000 	.word	0x03d09000
 8004fdc:	003d0900 	.word	0x003d0900
 8004fe0:	08006584 	.word	0x08006584

08004fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01a      	beq.n	80050fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050e2:	d10a      	bne.n	80050fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	605a      	str	r2, [r3, #4]
  }
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b098      	sub	sp, #96	@ 0x60
 800512c:	af02      	add	r7, sp, #8
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005138:	f7fb ff60 	bl	8000ffc <HAL_GetTick>
 800513c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b08      	cmp	r3, #8
 800514a:	d12f      	bne.n	80051ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800514c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005154:	2200      	movs	r2, #0
 8005156:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f88e 	bl	800527c <UART_WaitOnFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d022      	beq.n	80051ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800517a:	653b      	str	r3, [r7, #80]	@ 0x50
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005184:	647b      	str	r3, [r7, #68]	@ 0x44
 8005186:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800518a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e6      	bne.n	8005166 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e063      	b.n	8005274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d149      	bne.n	800524e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c2:	2200      	movs	r2, #0
 80051c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f857 	bl	800527c <UART_WaitOnFlagUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d03c      	beq.n	800524e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	623b      	str	r3, [r7, #32]
   return(result);
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80051f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e6      	bne.n	80051d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3308      	adds	r3, #8
 800520c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	60fb      	str	r3, [r7, #12]
   return(result);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f023 0301 	bic.w	r3, r3, #1
 800521c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3308      	adds	r3, #8
 8005224:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005226:	61fa      	str	r2, [r7, #28]
 8005228:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	69b9      	ldr	r1, [r7, #24]
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	617b      	str	r3, [r7, #20]
   return(result);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e5      	bne.n	8005206 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e012      	b.n	8005274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2220      	movs	r2, #32
 800525a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3758      	adds	r7, #88	@ 0x58
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	4613      	mov	r3, r2
 800528a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528c:	e04f      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d04b      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005296:	f7fb feb1 	bl	8000ffc <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d302      	bcc.n	80052ac <UART_WaitOnFlagUntilTimeout+0x30>
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e04e      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d037      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b80      	cmp	r3, #128	@ 0x80
 80052c2:	d034      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b40      	cmp	r3, #64	@ 0x40
 80052c8:	d031      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d110      	bne.n	80052fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2208      	movs	r2, #8
 80052de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f839 	bl	8005358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2208      	movs	r2, #8
 80052ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e029      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005308:	d111      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f81f 	bl	8005358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e00f      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	bf0c      	ite	eq
 800533e:	2301      	moveq	r3, #1
 8005340:	2300      	movne	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	429a      	cmp	r2, r3
 800534a:	d0a0      	beq.n	800528e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005358:	b480      	push	{r7}
 800535a:	b095      	sub	sp, #84	@ 0x54
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800536e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005370:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800537e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005380:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005384:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800538c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e6      	bne.n	8005360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3308      	adds	r3, #8
 8005398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005420 <UART_EndRxTransfer+0xc8>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3308      	adds	r3, #8
 80053b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e5      	bne.n	8005392 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d118      	bne.n	8005400 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	60bb      	str	r3, [r7, #8]
   return(result);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f023 0310 	bic.w	r3, r3, #16
 80053e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6979      	ldr	r1, [r7, #20]
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	613b      	str	r3, [r7, #16]
   return(result);
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e6      	bne.n	80053ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005414:	bf00      	nop
 8005416:	3754      	adds	r7, #84	@ 0x54
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	effffffe 	.word	0xeffffffe

08005424 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <HAL_UARTEx_DisableFifoMode+0x16>
 8005436:	2302      	movs	r3, #2
 8005438:	e027      	b.n	800548a <HAL_UARTEx_DisableFifoMode+0x66>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2224      	movs	r2, #36	@ 0x24
 8005446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0201 	bic.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005468:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e02d      	b.n	800550a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2224      	movs	r2, #36	@ 0x24
 80054ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0201 	bic.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f850 	bl	8005590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005526:	2302      	movs	r3, #2
 8005528:	e02d      	b.n	8005586 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2224      	movs	r2, #36	@ 0x24
 8005536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0201 	bic.w	r2, r2, #1
 8005550:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f812 	bl	8005590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800559c:	2b00      	cmp	r3, #0
 800559e:	d108      	bne.n	80055b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055b0:	e031      	b.n	8005616 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055b2:	2310      	movs	r3, #16
 80055b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055b6:	2310      	movs	r3, #16
 80055b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	0e5b      	lsrs	r3, r3, #25
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	0f5b      	lsrs	r3, r3, #29
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055da:	7bbb      	ldrb	r3, [r7, #14]
 80055dc:	7b3a      	ldrb	r2, [r7, #12]
 80055de:	4911      	ldr	r1, [pc, #68]	@ (8005624 <UARTEx_SetNbDataToProcess+0x94>)
 80055e0:	5c8a      	ldrb	r2, [r1, r2]
 80055e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80055e6:	7b3a      	ldrb	r2, [r7, #12]
 80055e8:	490f      	ldr	r1, [pc, #60]	@ (8005628 <UARTEx_SetNbDataToProcess+0x98>)
 80055ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	7b7a      	ldrb	r2, [r7, #13]
 80055fc:	4909      	ldr	r1, [pc, #36]	@ (8005624 <UARTEx_SetNbDataToProcess+0x94>)
 80055fe:	5c8a      	ldrb	r2, [r1, r2]
 8005600:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005604:	7b7a      	ldrb	r2, [r7, #13]
 8005606:	4908      	ldr	r1, [pc, #32]	@ (8005628 <UARTEx_SetNbDataToProcess+0x98>)
 8005608:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800560a:	fb93 f3f2 	sdiv	r3, r3, r2
 800560e:	b29a      	uxth	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	0800659c 	.word	0x0800659c
 8005628:	080065a4 	.word	0x080065a4

0800562c <std>:
 800562c:	2300      	movs	r3, #0
 800562e:	b510      	push	{r4, lr}
 8005630:	4604      	mov	r4, r0
 8005632:	e9c0 3300 	strd	r3, r3, [r0]
 8005636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800563a:	6083      	str	r3, [r0, #8]
 800563c:	8181      	strh	r1, [r0, #12]
 800563e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005640:	81c2      	strh	r2, [r0, #14]
 8005642:	6183      	str	r3, [r0, #24]
 8005644:	4619      	mov	r1, r3
 8005646:	2208      	movs	r2, #8
 8005648:	305c      	adds	r0, #92	@ 0x5c
 800564a:	f000 f9f9 	bl	8005a40 <memset>
 800564e:	4b0d      	ldr	r3, [pc, #52]	@ (8005684 <std+0x58>)
 8005650:	6263      	str	r3, [r4, #36]	@ 0x24
 8005652:	4b0d      	ldr	r3, [pc, #52]	@ (8005688 <std+0x5c>)
 8005654:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005656:	4b0d      	ldr	r3, [pc, #52]	@ (800568c <std+0x60>)
 8005658:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800565a:	4b0d      	ldr	r3, [pc, #52]	@ (8005690 <std+0x64>)
 800565c:	6323      	str	r3, [r4, #48]	@ 0x30
 800565e:	4b0d      	ldr	r3, [pc, #52]	@ (8005694 <std+0x68>)
 8005660:	6224      	str	r4, [r4, #32]
 8005662:	429c      	cmp	r4, r3
 8005664:	d006      	beq.n	8005674 <std+0x48>
 8005666:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800566a:	4294      	cmp	r4, r2
 800566c:	d002      	beq.n	8005674 <std+0x48>
 800566e:	33d0      	adds	r3, #208	@ 0xd0
 8005670:	429c      	cmp	r4, r3
 8005672:	d105      	bne.n	8005680 <std+0x54>
 8005674:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800567c:	f000 ba58 	b.w	8005b30 <__retarget_lock_init_recursive>
 8005680:	bd10      	pop	{r4, pc}
 8005682:	bf00      	nop
 8005684:	08005891 	.word	0x08005891
 8005688:	080058b3 	.word	0x080058b3
 800568c:	080058eb 	.word	0x080058eb
 8005690:	0800590f 	.word	0x0800590f
 8005694:	24000124 	.word	0x24000124

08005698 <stdio_exit_handler>:
 8005698:	4a02      	ldr	r2, [pc, #8]	@ (80056a4 <stdio_exit_handler+0xc>)
 800569a:	4903      	ldr	r1, [pc, #12]	@ (80056a8 <stdio_exit_handler+0x10>)
 800569c:	4803      	ldr	r0, [pc, #12]	@ (80056ac <stdio_exit_handler+0x14>)
 800569e:	f000 b869 	b.w	8005774 <_fwalk_sglue>
 80056a2:	bf00      	nop
 80056a4:	24000010 	.word	0x24000010
 80056a8:	080063cd 	.word	0x080063cd
 80056ac:	24000020 	.word	0x24000020

080056b0 <cleanup_stdio>:
 80056b0:	6841      	ldr	r1, [r0, #4]
 80056b2:	4b0c      	ldr	r3, [pc, #48]	@ (80056e4 <cleanup_stdio+0x34>)
 80056b4:	4299      	cmp	r1, r3
 80056b6:	b510      	push	{r4, lr}
 80056b8:	4604      	mov	r4, r0
 80056ba:	d001      	beq.n	80056c0 <cleanup_stdio+0x10>
 80056bc:	f000 fe86 	bl	80063cc <_fflush_r>
 80056c0:	68a1      	ldr	r1, [r4, #8]
 80056c2:	4b09      	ldr	r3, [pc, #36]	@ (80056e8 <cleanup_stdio+0x38>)
 80056c4:	4299      	cmp	r1, r3
 80056c6:	d002      	beq.n	80056ce <cleanup_stdio+0x1e>
 80056c8:	4620      	mov	r0, r4
 80056ca:	f000 fe7f 	bl	80063cc <_fflush_r>
 80056ce:	68e1      	ldr	r1, [r4, #12]
 80056d0:	4b06      	ldr	r3, [pc, #24]	@ (80056ec <cleanup_stdio+0x3c>)
 80056d2:	4299      	cmp	r1, r3
 80056d4:	d004      	beq.n	80056e0 <cleanup_stdio+0x30>
 80056d6:	4620      	mov	r0, r4
 80056d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056dc:	f000 be76 	b.w	80063cc <_fflush_r>
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	bf00      	nop
 80056e4:	24000124 	.word	0x24000124
 80056e8:	2400018c 	.word	0x2400018c
 80056ec:	240001f4 	.word	0x240001f4

080056f0 <global_stdio_init.part.0>:
 80056f0:	b510      	push	{r4, lr}
 80056f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <global_stdio_init.part.0+0x30>)
 80056f4:	4c0b      	ldr	r4, [pc, #44]	@ (8005724 <global_stdio_init.part.0+0x34>)
 80056f6:	4a0c      	ldr	r2, [pc, #48]	@ (8005728 <global_stdio_init.part.0+0x38>)
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	4620      	mov	r0, r4
 80056fc:	2200      	movs	r2, #0
 80056fe:	2104      	movs	r1, #4
 8005700:	f7ff ff94 	bl	800562c <std>
 8005704:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005708:	2201      	movs	r2, #1
 800570a:	2109      	movs	r1, #9
 800570c:	f7ff ff8e 	bl	800562c <std>
 8005710:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005714:	2202      	movs	r2, #2
 8005716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800571a:	2112      	movs	r1, #18
 800571c:	f7ff bf86 	b.w	800562c <std>
 8005720:	2400025c 	.word	0x2400025c
 8005724:	24000124 	.word	0x24000124
 8005728:	08005699 	.word	0x08005699

0800572c <__sfp_lock_acquire>:
 800572c:	4801      	ldr	r0, [pc, #4]	@ (8005734 <__sfp_lock_acquire+0x8>)
 800572e:	f000 ba00 	b.w	8005b32 <__retarget_lock_acquire_recursive>
 8005732:	bf00      	nop
 8005734:	24000265 	.word	0x24000265

08005738 <__sfp_lock_release>:
 8005738:	4801      	ldr	r0, [pc, #4]	@ (8005740 <__sfp_lock_release+0x8>)
 800573a:	f000 b9fb 	b.w	8005b34 <__retarget_lock_release_recursive>
 800573e:	bf00      	nop
 8005740:	24000265 	.word	0x24000265

08005744 <__sinit>:
 8005744:	b510      	push	{r4, lr}
 8005746:	4604      	mov	r4, r0
 8005748:	f7ff fff0 	bl	800572c <__sfp_lock_acquire>
 800574c:	6a23      	ldr	r3, [r4, #32]
 800574e:	b11b      	cbz	r3, 8005758 <__sinit+0x14>
 8005750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005754:	f7ff bff0 	b.w	8005738 <__sfp_lock_release>
 8005758:	4b04      	ldr	r3, [pc, #16]	@ (800576c <__sinit+0x28>)
 800575a:	6223      	str	r3, [r4, #32]
 800575c:	4b04      	ldr	r3, [pc, #16]	@ (8005770 <__sinit+0x2c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1f5      	bne.n	8005750 <__sinit+0xc>
 8005764:	f7ff ffc4 	bl	80056f0 <global_stdio_init.part.0>
 8005768:	e7f2      	b.n	8005750 <__sinit+0xc>
 800576a:	bf00      	nop
 800576c:	080056b1 	.word	0x080056b1
 8005770:	2400025c 	.word	0x2400025c

08005774 <_fwalk_sglue>:
 8005774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005778:	4607      	mov	r7, r0
 800577a:	4688      	mov	r8, r1
 800577c:	4614      	mov	r4, r2
 800577e:	2600      	movs	r6, #0
 8005780:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005784:	f1b9 0901 	subs.w	r9, r9, #1
 8005788:	d505      	bpl.n	8005796 <_fwalk_sglue+0x22>
 800578a:	6824      	ldr	r4, [r4, #0]
 800578c:	2c00      	cmp	r4, #0
 800578e:	d1f7      	bne.n	8005780 <_fwalk_sglue+0xc>
 8005790:	4630      	mov	r0, r6
 8005792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005796:	89ab      	ldrh	r3, [r5, #12]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d907      	bls.n	80057ac <_fwalk_sglue+0x38>
 800579c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057a0:	3301      	adds	r3, #1
 80057a2:	d003      	beq.n	80057ac <_fwalk_sglue+0x38>
 80057a4:	4629      	mov	r1, r5
 80057a6:	4638      	mov	r0, r7
 80057a8:	47c0      	blx	r8
 80057aa:	4306      	orrs	r6, r0
 80057ac:	3568      	adds	r5, #104	@ 0x68
 80057ae:	e7e9      	b.n	8005784 <_fwalk_sglue+0x10>

080057b0 <iprintf>:
 80057b0:	b40f      	push	{r0, r1, r2, r3}
 80057b2:	b507      	push	{r0, r1, r2, lr}
 80057b4:	4906      	ldr	r1, [pc, #24]	@ (80057d0 <iprintf+0x20>)
 80057b6:	ab04      	add	r3, sp, #16
 80057b8:	6808      	ldr	r0, [r1, #0]
 80057ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80057be:	6881      	ldr	r1, [r0, #8]
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	f000 fadb 	bl	8005d7c <_vfiprintf_r>
 80057c6:	b003      	add	sp, #12
 80057c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057cc:	b004      	add	sp, #16
 80057ce:	4770      	bx	lr
 80057d0:	2400001c 	.word	0x2400001c

080057d4 <_puts_r>:
 80057d4:	6a03      	ldr	r3, [r0, #32]
 80057d6:	b570      	push	{r4, r5, r6, lr}
 80057d8:	6884      	ldr	r4, [r0, #8]
 80057da:	4605      	mov	r5, r0
 80057dc:	460e      	mov	r6, r1
 80057de:	b90b      	cbnz	r3, 80057e4 <_puts_r+0x10>
 80057e0:	f7ff ffb0 	bl	8005744 <__sinit>
 80057e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057e6:	07db      	lsls	r3, r3, #31
 80057e8:	d405      	bmi.n	80057f6 <_puts_r+0x22>
 80057ea:	89a3      	ldrh	r3, [r4, #12]
 80057ec:	0598      	lsls	r0, r3, #22
 80057ee:	d402      	bmi.n	80057f6 <_puts_r+0x22>
 80057f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057f2:	f000 f99e 	bl	8005b32 <__retarget_lock_acquire_recursive>
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	0719      	lsls	r1, r3, #28
 80057fa:	d502      	bpl.n	8005802 <_puts_r+0x2e>
 80057fc:	6923      	ldr	r3, [r4, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d135      	bne.n	800586e <_puts_r+0x9a>
 8005802:	4621      	mov	r1, r4
 8005804:	4628      	mov	r0, r5
 8005806:	f000 f8c5 	bl	8005994 <__swsetup_r>
 800580a:	b380      	cbz	r0, 800586e <_puts_r+0x9a>
 800580c:	f04f 35ff 	mov.w	r5, #4294967295
 8005810:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005812:	07da      	lsls	r2, r3, #31
 8005814:	d405      	bmi.n	8005822 <_puts_r+0x4e>
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	059b      	lsls	r3, r3, #22
 800581a:	d402      	bmi.n	8005822 <_puts_r+0x4e>
 800581c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800581e:	f000 f989 	bl	8005b34 <__retarget_lock_release_recursive>
 8005822:	4628      	mov	r0, r5
 8005824:	bd70      	pop	{r4, r5, r6, pc}
 8005826:	2b00      	cmp	r3, #0
 8005828:	da04      	bge.n	8005834 <_puts_r+0x60>
 800582a:	69a2      	ldr	r2, [r4, #24]
 800582c:	429a      	cmp	r2, r3
 800582e:	dc17      	bgt.n	8005860 <_puts_r+0x8c>
 8005830:	290a      	cmp	r1, #10
 8005832:	d015      	beq.n	8005860 <_puts_r+0x8c>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	6022      	str	r2, [r4, #0]
 800583a:	7019      	strb	r1, [r3, #0]
 800583c:	68a3      	ldr	r3, [r4, #8]
 800583e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005842:	3b01      	subs	r3, #1
 8005844:	60a3      	str	r3, [r4, #8]
 8005846:	2900      	cmp	r1, #0
 8005848:	d1ed      	bne.n	8005826 <_puts_r+0x52>
 800584a:	2b00      	cmp	r3, #0
 800584c:	da11      	bge.n	8005872 <_puts_r+0x9e>
 800584e:	4622      	mov	r2, r4
 8005850:	210a      	movs	r1, #10
 8005852:	4628      	mov	r0, r5
 8005854:	f000 f85f 	bl	8005916 <__swbuf_r>
 8005858:	3001      	adds	r0, #1
 800585a:	d0d7      	beq.n	800580c <_puts_r+0x38>
 800585c:	250a      	movs	r5, #10
 800585e:	e7d7      	b.n	8005810 <_puts_r+0x3c>
 8005860:	4622      	mov	r2, r4
 8005862:	4628      	mov	r0, r5
 8005864:	f000 f857 	bl	8005916 <__swbuf_r>
 8005868:	3001      	adds	r0, #1
 800586a:	d1e7      	bne.n	800583c <_puts_r+0x68>
 800586c:	e7ce      	b.n	800580c <_puts_r+0x38>
 800586e:	3e01      	subs	r6, #1
 8005870:	e7e4      	b.n	800583c <_puts_r+0x68>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	6022      	str	r2, [r4, #0]
 8005878:	220a      	movs	r2, #10
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	e7ee      	b.n	800585c <_puts_r+0x88>
	...

08005880 <puts>:
 8005880:	4b02      	ldr	r3, [pc, #8]	@ (800588c <puts+0xc>)
 8005882:	4601      	mov	r1, r0
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	f7ff bfa5 	b.w	80057d4 <_puts_r>
 800588a:	bf00      	nop
 800588c:	2400001c 	.word	0x2400001c

08005890 <__sread>:
 8005890:	b510      	push	{r4, lr}
 8005892:	460c      	mov	r4, r1
 8005894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005898:	f000 f8fc 	bl	8005a94 <_read_r>
 800589c:	2800      	cmp	r0, #0
 800589e:	bfab      	itete	ge
 80058a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058a2:	89a3      	ldrhlt	r3, [r4, #12]
 80058a4:	181b      	addge	r3, r3, r0
 80058a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058aa:	bfac      	ite	ge
 80058ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058ae:	81a3      	strhlt	r3, [r4, #12]
 80058b0:	bd10      	pop	{r4, pc}

080058b2 <__swrite>:
 80058b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b6:	461f      	mov	r7, r3
 80058b8:	898b      	ldrh	r3, [r1, #12]
 80058ba:	05db      	lsls	r3, r3, #23
 80058bc:	4605      	mov	r5, r0
 80058be:	460c      	mov	r4, r1
 80058c0:	4616      	mov	r6, r2
 80058c2:	d505      	bpl.n	80058d0 <__swrite+0x1e>
 80058c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c8:	2302      	movs	r3, #2
 80058ca:	2200      	movs	r2, #0
 80058cc:	f000 f8d0 	bl	8005a70 <_lseek_r>
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058da:	81a3      	strh	r3, [r4, #12]
 80058dc:	4632      	mov	r2, r6
 80058de:	463b      	mov	r3, r7
 80058e0:	4628      	mov	r0, r5
 80058e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058e6:	f000 b8e7 	b.w	8005ab8 <_write_r>

080058ea <__sseek>:
 80058ea:	b510      	push	{r4, lr}
 80058ec:	460c      	mov	r4, r1
 80058ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f2:	f000 f8bd 	bl	8005a70 <_lseek_r>
 80058f6:	1c43      	adds	r3, r0, #1
 80058f8:	89a3      	ldrh	r3, [r4, #12]
 80058fa:	bf15      	itete	ne
 80058fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80058fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005902:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005906:	81a3      	strheq	r3, [r4, #12]
 8005908:	bf18      	it	ne
 800590a:	81a3      	strhne	r3, [r4, #12]
 800590c:	bd10      	pop	{r4, pc}

0800590e <__sclose>:
 800590e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005912:	f000 b89d 	b.w	8005a50 <_close_r>

08005916 <__swbuf_r>:
 8005916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005918:	460e      	mov	r6, r1
 800591a:	4614      	mov	r4, r2
 800591c:	4605      	mov	r5, r0
 800591e:	b118      	cbz	r0, 8005928 <__swbuf_r+0x12>
 8005920:	6a03      	ldr	r3, [r0, #32]
 8005922:	b90b      	cbnz	r3, 8005928 <__swbuf_r+0x12>
 8005924:	f7ff ff0e 	bl	8005744 <__sinit>
 8005928:	69a3      	ldr	r3, [r4, #24]
 800592a:	60a3      	str	r3, [r4, #8]
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	071a      	lsls	r2, r3, #28
 8005930:	d501      	bpl.n	8005936 <__swbuf_r+0x20>
 8005932:	6923      	ldr	r3, [r4, #16]
 8005934:	b943      	cbnz	r3, 8005948 <__swbuf_r+0x32>
 8005936:	4621      	mov	r1, r4
 8005938:	4628      	mov	r0, r5
 800593a:	f000 f82b 	bl	8005994 <__swsetup_r>
 800593e:	b118      	cbz	r0, 8005948 <__swbuf_r+0x32>
 8005940:	f04f 37ff 	mov.w	r7, #4294967295
 8005944:	4638      	mov	r0, r7
 8005946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	6922      	ldr	r2, [r4, #16]
 800594c:	1a98      	subs	r0, r3, r2
 800594e:	6963      	ldr	r3, [r4, #20]
 8005950:	b2f6      	uxtb	r6, r6
 8005952:	4283      	cmp	r3, r0
 8005954:	4637      	mov	r7, r6
 8005956:	dc05      	bgt.n	8005964 <__swbuf_r+0x4e>
 8005958:	4621      	mov	r1, r4
 800595a:	4628      	mov	r0, r5
 800595c:	f000 fd36 	bl	80063cc <_fflush_r>
 8005960:	2800      	cmp	r0, #0
 8005962:	d1ed      	bne.n	8005940 <__swbuf_r+0x2a>
 8005964:	68a3      	ldr	r3, [r4, #8]
 8005966:	3b01      	subs	r3, #1
 8005968:	60a3      	str	r3, [r4, #8]
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	6022      	str	r2, [r4, #0]
 8005970:	701e      	strb	r6, [r3, #0]
 8005972:	6962      	ldr	r2, [r4, #20]
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	429a      	cmp	r2, r3
 8005978:	d004      	beq.n	8005984 <__swbuf_r+0x6e>
 800597a:	89a3      	ldrh	r3, [r4, #12]
 800597c:	07db      	lsls	r3, r3, #31
 800597e:	d5e1      	bpl.n	8005944 <__swbuf_r+0x2e>
 8005980:	2e0a      	cmp	r6, #10
 8005982:	d1df      	bne.n	8005944 <__swbuf_r+0x2e>
 8005984:	4621      	mov	r1, r4
 8005986:	4628      	mov	r0, r5
 8005988:	f000 fd20 	bl	80063cc <_fflush_r>
 800598c:	2800      	cmp	r0, #0
 800598e:	d0d9      	beq.n	8005944 <__swbuf_r+0x2e>
 8005990:	e7d6      	b.n	8005940 <__swbuf_r+0x2a>
	...

08005994 <__swsetup_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	4b29      	ldr	r3, [pc, #164]	@ (8005a3c <__swsetup_r+0xa8>)
 8005998:	4605      	mov	r5, r0
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	460c      	mov	r4, r1
 800599e:	b118      	cbz	r0, 80059a8 <__swsetup_r+0x14>
 80059a0:	6a03      	ldr	r3, [r0, #32]
 80059a2:	b90b      	cbnz	r3, 80059a8 <__swsetup_r+0x14>
 80059a4:	f7ff fece 	bl	8005744 <__sinit>
 80059a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ac:	0719      	lsls	r1, r3, #28
 80059ae:	d422      	bmi.n	80059f6 <__swsetup_r+0x62>
 80059b0:	06da      	lsls	r2, r3, #27
 80059b2:	d407      	bmi.n	80059c4 <__swsetup_r+0x30>
 80059b4:	2209      	movs	r2, #9
 80059b6:	602a      	str	r2, [r5, #0]
 80059b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059bc:	81a3      	strh	r3, [r4, #12]
 80059be:	f04f 30ff 	mov.w	r0, #4294967295
 80059c2:	e033      	b.n	8005a2c <__swsetup_r+0x98>
 80059c4:	0758      	lsls	r0, r3, #29
 80059c6:	d512      	bpl.n	80059ee <__swsetup_r+0x5a>
 80059c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059ca:	b141      	cbz	r1, 80059de <__swsetup_r+0x4a>
 80059cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059d0:	4299      	cmp	r1, r3
 80059d2:	d002      	beq.n	80059da <__swsetup_r+0x46>
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 f8af 	bl	8005b38 <_free_r>
 80059da:	2300      	movs	r3, #0
 80059dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	2300      	movs	r3, #0
 80059e8:	6063      	str	r3, [r4, #4]
 80059ea:	6923      	ldr	r3, [r4, #16]
 80059ec:	6023      	str	r3, [r4, #0]
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	f043 0308 	orr.w	r3, r3, #8
 80059f4:	81a3      	strh	r3, [r4, #12]
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	b94b      	cbnz	r3, 8005a0e <__swsetup_r+0x7a>
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a04:	d003      	beq.n	8005a0e <__swsetup_r+0x7a>
 8005a06:	4621      	mov	r1, r4
 8005a08:	4628      	mov	r0, r5
 8005a0a:	f000 fd2d 	bl	8006468 <__smakebuf_r>
 8005a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a12:	f013 0201 	ands.w	r2, r3, #1
 8005a16:	d00a      	beq.n	8005a2e <__swsetup_r+0x9a>
 8005a18:	2200      	movs	r2, #0
 8005a1a:	60a2      	str	r2, [r4, #8]
 8005a1c:	6962      	ldr	r2, [r4, #20]
 8005a1e:	4252      	negs	r2, r2
 8005a20:	61a2      	str	r2, [r4, #24]
 8005a22:	6922      	ldr	r2, [r4, #16]
 8005a24:	b942      	cbnz	r2, 8005a38 <__swsetup_r+0xa4>
 8005a26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a2a:	d1c5      	bne.n	80059b8 <__swsetup_r+0x24>
 8005a2c:	bd38      	pop	{r3, r4, r5, pc}
 8005a2e:	0799      	lsls	r1, r3, #30
 8005a30:	bf58      	it	pl
 8005a32:	6962      	ldrpl	r2, [r4, #20]
 8005a34:	60a2      	str	r2, [r4, #8]
 8005a36:	e7f4      	b.n	8005a22 <__swsetup_r+0x8e>
 8005a38:	2000      	movs	r0, #0
 8005a3a:	e7f7      	b.n	8005a2c <__swsetup_r+0x98>
 8005a3c:	2400001c 	.word	0x2400001c

08005a40 <memset>:
 8005a40:	4402      	add	r2, r0
 8005a42:	4603      	mov	r3, r0
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d100      	bne.n	8005a4a <memset+0xa>
 8005a48:	4770      	bx	lr
 8005a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a4e:	e7f9      	b.n	8005a44 <memset+0x4>

08005a50 <_close_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d06      	ldr	r5, [pc, #24]	@ (8005a6c <_close_r+0x1c>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	f7fb f844 	bl	8000ae8 <_close>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_close_r+0x1a>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_close_r+0x1a>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	24000260 	.word	0x24000260

08005a70 <_lseek_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4d07      	ldr	r5, [pc, #28]	@ (8005a90 <_lseek_r+0x20>)
 8005a74:	4604      	mov	r4, r0
 8005a76:	4608      	mov	r0, r1
 8005a78:	4611      	mov	r1, r2
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	602a      	str	r2, [r5, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f7fb f859 	bl	8000b36 <_lseek>
 8005a84:	1c43      	adds	r3, r0, #1
 8005a86:	d102      	bne.n	8005a8e <_lseek_r+0x1e>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	b103      	cbz	r3, 8005a8e <_lseek_r+0x1e>
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	bd38      	pop	{r3, r4, r5, pc}
 8005a90:	24000260 	.word	0x24000260

08005a94 <_read_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4d07      	ldr	r5, [pc, #28]	@ (8005ab4 <_read_r+0x20>)
 8005a98:	4604      	mov	r4, r0
 8005a9a:	4608      	mov	r0, r1
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	602a      	str	r2, [r5, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f7fa ffe7 	bl	8000a76 <_read>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_read_r+0x1e>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_read_r+0x1e>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	24000260 	.word	0x24000260

08005ab8 <_write_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d07      	ldr	r5, [pc, #28]	@ (8005ad8 <_write_r+0x20>)
 8005abc:	4604      	mov	r4, r0
 8005abe:	4608      	mov	r0, r1
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	602a      	str	r2, [r5, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f7fa fff2 	bl	8000ab0 <_write>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_write_r+0x1e>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_write_r+0x1e>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	24000260 	.word	0x24000260

08005adc <__errno>:
 8005adc:	4b01      	ldr	r3, [pc, #4]	@ (8005ae4 <__errno+0x8>)
 8005ade:	6818      	ldr	r0, [r3, #0]
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	2400001c 	.word	0x2400001c

08005ae8 <__libc_init_array>:
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	4d0d      	ldr	r5, [pc, #52]	@ (8005b20 <__libc_init_array+0x38>)
 8005aec:	4c0d      	ldr	r4, [pc, #52]	@ (8005b24 <__libc_init_array+0x3c>)
 8005aee:	1b64      	subs	r4, r4, r5
 8005af0:	10a4      	asrs	r4, r4, #2
 8005af2:	2600      	movs	r6, #0
 8005af4:	42a6      	cmp	r6, r4
 8005af6:	d109      	bne.n	8005b0c <__libc_init_array+0x24>
 8005af8:	4d0b      	ldr	r5, [pc, #44]	@ (8005b28 <__libc_init_array+0x40>)
 8005afa:	4c0c      	ldr	r4, [pc, #48]	@ (8005b2c <__libc_init_array+0x44>)
 8005afc:	f000 fd22 	bl	8006544 <_init>
 8005b00:	1b64      	subs	r4, r4, r5
 8005b02:	10a4      	asrs	r4, r4, #2
 8005b04:	2600      	movs	r6, #0
 8005b06:	42a6      	cmp	r6, r4
 8005b08:	d105      	bne.n	8005b16 <__libc_init_array+0x2e>
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
 8005b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b10:	4798      	blx	r3
 8005b12:	3601      	adds	r6, #1
 8005b14:	e7ee      	b.n	8005af4 <__libc_init_array+0xc>
 8005b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1a:	4798      	blx	r3
 8005b1c:	3601      	adds	r6, #1
 8005b1e:	e7f2      	b.n	8005b06 <__libc_init_array+0x1e>
 8005b20:	080065e8 	.word	0x080065e8
 8005b24:	080065e8 	.word	0x080065e8
 8005b28:	080065e8 	.word	0x080065e8
 8005b2c:	080065ec 	.word	0x080065ec

08005b30 <__retarget_lock_init_recursive>:
 8005b30:	4770      	bx	lr

08005b32 <__retarget_lock_acquire_recursive>:
 8005b32:	4770      	bx	lr

08005b34 <__retarget_lock_release_recursive>:
 8005b34:	4770      	bx	lr
	...

08005b38 <_free_r>:
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	4605      	mov	r5, r0
 8005b3c:	2900      	cmp	r1, #0
 8005b3e:	d041      	beq.n	8005bc4 <_free_r+0x8c>
 8005b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b44:	1f0c      	subs	r4, r1, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	bfb8      	it	lt
 8005b4a:	18e4      	addlt	r4, r4, r3
 8005b4c:	f000 f8e0 	bl	8005d10 <__malloc_lock>
 8005b50:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc8 <_free_r+0x90>)
 8005b52:	6813      	ldr	r3, [r2, #0]
 8005b54:	b933      	cbnz	r3, 8005b64 <_free_r+0x2c>
 8005b56:	6063      	str	r3, [r4, #4]
 8005b58:	6014      	str	r4, [r2, #0]
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b60:	f000 b8dc 	b.w	8005d1c <__malloc_unlock>
 8005b64:	42a3      	cmp	r3, r4
 8005b66:	d908      	bls.n	8005b7a <_free_r+0x42>
 8005b68:	6820      	ldr	r0, [r4, #0]
 8005b6a:	1821      	adds	r1, r4, r0
 8005b6c:	428b      	cmp	r3, r1
 8005b6e:	bf01      	itttt	eq
 8005b70:	6819      	ldreq	r1, [r3, #0]
 8005b72:	685b      	ldreq	r3, [r3, #4]
 8005b74:	1809      	addeq	r1, r1, r0
 8005b76:	6021      	streq	r1, [r4, #0]
 8005b78:	e7ed      	b.n	8005b56 <_free_r+0x1e>
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	b10b      	cbz	r3, 8005b84 <_free_r+0x4c>
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	d9fa      	bls.n	8005b7a <_free_r+0x42>
 8005b84:	6811      	ldr	r1, [r2, #0]
 8005b86:	1850      	adds	r0, r2, r1
 8005b88:	42a0      	cmp	r0, r4
 8005b8a:	d10b      	bne.n	8005ba4 <_free_r+0x6c>
 8005b8c:	6820      	ldr	r0, [r4, #0]
 8005b8e:	4401      	add	r1, r0
 8005b90:	1850      	adds	r0, r2, r1
 8005b92:	4283      	cmp	r3, r0
 8005b94:	6011      	str	r1, [r2, #0]
 8005b96:	d1e0      	bne.n	8005b5a <_free_r+0x22>
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	6053      	str	r3, [r2, #4]
 8005b9e:	4408      	add	r0, r1
 8005ba0:	6010      	str	r0, [r2, #0]
 8005ba2:	e7da      	b.n	8005b5a <_free_r+0x22>
 8005ba4:	d902      	bls.n	8005bac <_free_r+0x74>
 8005ba6:	230c      	movs	r3, #12
 8005ba8:	602b      	str	r3, [r5, #0]
 8005baa:	e7d6      	b.n	8005b5a <_free_r+0x22>
 8005bac:	6820      	ldr	r0, [r4, #0]
 8005bae:	1821      	adds	r1, r4, r0
 8005bb0:	428b      	cmp	r3, r1
 8005bb2:	bf04      	itt	eq
 8005bb4:	6819      	ldreq	r1, [r3, #0]
 8005bb6:	685b      	ldreq	r3, [r3, #4]
 8005bb8:	6063      	str	r3, [r4, #4]
 8005bba:	bf04      	itt	eq
 8005bbc:	1809      	addeq	r1, r1, r0
 8005bbe:	6021      	streq	r1, [r4, #0]
 8005bc0:	6054      	str	r4, [r2, #4]
 8005bc2:	e7ca      	b.n	8005b5a <_free_r+0x22>
 8005bc4:	bd38      	pop	{r3, r4, r5, pc}
 8005bc6:	bf00      	nop
 8005bc8:	2400026c 	.word	0x2400026c

08005bcc <sbrk_aligned>:
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	4e0f      	ldr	r6, [pc, #60]	@ (8005c0c <sbrk_aligned+0x40>)
 8005bd0:	460c      	mov	r4, r1
 8005bd2:	6831      	ldr	r1, [r6, #0]
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	b911      	cbnz	r1, 8005bde <sbrk_aligned+0x12>
 8005bd8:	f000 fca4 	bl	8006524 <_sbrk_r>
 8005bdc:	6030      	str	r0, [r6, #0]
 8005bde:	4621      	mov	r1, r4
 8005be0:	4628      	mov	r0, r5
 8005be2:	f000 fc9f 	bl	8006524 <_sbrk_r>
 8005be6:	1c43      	adds	r3, r0, #1
 8005be8:	d103      	bne.n	8005bf2 <sbrk_aligned+0x26>
 8005bea:	f04f 34ff 	mov.w	r4, #4294967295
 8005bee:	4620      	mov	r0, r4
 8005bf0:	bd70      	pop	{r4, r5, r6, pc}
 8005bf2:	1cc4      	adds	r4, r0, #3
 8005bf4:	f024 0403 	bic.w	r4, r4, #3
 8005bf8:	42a0      	cmp	r0, r4
 8005bfa:	d0f8      	beq.n	8005bee <sbrk_aligned+0x22>
 8005bfc:	1a21      	subs	r1, r4, r0
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 fc90 	bl	8006524 <_sbrk_r>
 8005c04:	3001      	adds	r0, #1
 8005c06:	d1f2      	bne.n	8005bee <sbrk_aligned+0x22>
 8005c08:	e7ef      	b.n	8005bea <sbrk_aligned+0x1e>
 8005c0a:	bf00      	nop
 8005c0c:	24000268 	.word	0x24000268

08005c10 <_malloc_r>:
 8005c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c14:	1ccd      	adds	r5, r1, #3
 8005c16:	f025 0503 	bic.w	r5, r5, #3
 8005c1a:	3508      	adds	r5, #8
 8005c1c:	2d0c      	cmp	r5, #12
 8005c1e:	bf38      	it	cc
 8005c20:	250c      	movcc	r5, #12
 8005c22:	2d00      	cmp	r5, #0
 8005c24:	4606      	mov	r6, r0
 8005c26:	db01      	blt.n	8005c2c <_malloc_r+0x1c>
 8005c28:	42a9      	cmp	r1, r5
 8005c2a:	d904      	bls.n	8005c36 <_malloc_r+0x26>
 8005c2c:	230c      	movs	r3, #12
 8005c2e:	6033      	str	r3, [r6, #0]
 8005c30:	2000      	movs	r0, #0
 8005c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d0c <_malloc_r+0xfc>
 8005c3a:	f000 f869 	bl	8005d10 <__malloc_lock>
 8005c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c42:	461c      	mov	r4, r3
 8005c44:	bb44      	cbnz	r4, 8005c98 <_malloc_r+0x88>
 8005c46:	4629      	mov	r1, r5
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f7ff ffbf 	bl	8005bcc <sbrk_aligned>
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	4604      	mov	r4, r0
 8005c52:	d158      	bne.n	8005d06 <_malloc_r+0xf6>
 8005c54:	f8d8 4000 	ldr.w	r4, [r8]
 8005c58:	4627      	mov	r7, r4
 8005c5a:	2f00      	cmp	r7, #0
 8005c5c:	d143      	bne.n	8005ce6 <_malloc_r+0xd6>
 8005c5e:	2c00      	cmp	r4, #0
 8005c60:	d04b      	beq.n	8005cfa <_malloc_r+0xea>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	4639      	mov	r1, r7
 8005c66:	4630      	mov	r0, r6
 8005c68:	eb04 0903 	add.w	r9, r4, r3
 8005c6c:	f000 fc5a 	bl	8006524 <_sbrk_r>
 8005c70:	4581      	cmp	r9, r0
 8005c72:	d142      	bne.n	8005cfa <_malloc_r+0xea>
 8005c74:	6821      	ldr	r1, [r4, #0]
 8005c76:	1a6d      	subs	r5, r5, r1
 8005c78:	4629      	mov	r1, r5
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f7ff ffa6 	bl	8005bcc <sbrk_aligned>
 8005c80:	3001      	adds	r0, #1
 8005c82:	d03a      	beq.n	8005cfa <_malloc_r+0xea>
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	442b      	add	r3, r5
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	bb62      	cbnz	r2, 8005cec <_malloc_r+0xdc>
 8005c92:	f8c8 7000 	str.w	r7, [r8]
 8005c96:	e00f      	b.n	8005cb8 <_malloc_r+0xa8>
 8005c98:	6822      	ldr	r2, [r4, #0]
 8005c9a:	1b52      	subs	r2, r2, r5
 8005c9c:	d420      	bmi.n	8005ce0 <_malloc_r+0xd0>
 8005c9e:	2a0b      	cmp	r2, #11
 8005ca0:	d917      	bls.n	8005cd2 <_malloc_r+0xc2>
 8005ca2:	1961      	adds	r1, r4, r5
 8005ca4:	42a3      	cmp	r3, r4
 8005ca6:	6025      	str	r5, [r4, #0]
 8005ca8:	bf18      	it	ne
 8005caa:	6059      	strne	r1, [r3, #4]
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	bf08      	it	eq
 8005cb0:	f8c8 1000 	streq.w	r1, [r8]
 8005cb4:	5162      	str	r2, [r4, r5]
 8005cb6:	604b      	str	r3, [r1, #4]
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f000 f82f 	bl	8005d1c <__malloc_unlock>
 8005cbe:	f104 000b 	add.w	r0, r4, #11
 8005cc2:	1d23      	adds	r3, r4, #4
 8005cc4:	f020 0007 	bic.w	r0, r0, #7
 8005cc8:	1ac2      	subs	r2, r0, r3
 8005cca:	bf1c      	itt	ne
 8005ccc:	1a1b      	subne	r3, r3, r0
 8005cce:	50a3      	strne	r3, [r4, r2]
 8005cd0:	e7af      	b.n	8005c32 <_malloc_r+0x22>
 8005cd2:	6862      	ldr	r2, [r4, #4]
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	bf0c      	ite	eq
 8005cd8:	f8c8 2000 	streq.w	r2, [r8]
 8005cdc:	605a      	strne	r2, [r3, #4]
 8005cde:	e7eb      	b.n	8005cb8 <_malloc_r+0xa8>
 8005ce0:	4623      	mov	r3, r4
 8005ce2:	6864      	ldr	r4, [r4, #4]
 8005ce4:	e7ae      	b.n	8005c44 <_malloc_r+0x34>
 8005ce6:	463c      	mov	r4, r7
 8005ce8:	687f      	ldr	r7, [r7, #4]
 8005cea:	e7b6      	b.n	8005c5a <_malloc_r+0x4a>
 8005cec:	461a      	mov	r2, r3
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	d1fb      	bne.n	8005cec <_malloc_r+0xdc>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	6053      	str	r3, [r2, #4]
 8005cf8:	e7de      	b.n	8005cb8 <_malloc_r+0xa8>
 8005cfa:	230c      	movs	r3, #12
 8005cfc:	6033      	str	r3, [r6, #0]
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f000 f80c 	bl	8005d1c <__malloc_unlock>
 8005d04:	e794      	b.n	8005c30 <_malloc_r+0x20>
 8005d06:	6005      	str	r5, [r0, #0]
 8005d08:	e7d6      	b.n	8005cb8 <_malloc_r+0xa8>
 8005d0a:	bf00      	nop
 8005d0c:	2400026c 	.word	0x2400026c

08005d10 <__malloc_lock>:
 8005d10:	4801      	ldr	r0, [pc, #4]	@ (8005d18 <__malloc_lock+0x8>)
 8005d12:	f7ff bf0e 	b.w	8005b32 <__retarget_lock_acquire_recursive>
 8005d16:	bf00      	nop
 8005d18:	24000264 	.word	0x24000264

08005d1c <__malloc_unlock>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	@ (8005d24 <__malloc_unlock+0x8>)
 8005d1e:	f7ff bf09 	b.w	8005b34 <__retarget_lock_release_recursive>
 8005d22:	bf00      	nop
 8005d24:	24000264 	.word	0x24000264

08005d28 <__sfputc_r>:
 8005d28:	6893      	ldr	r3, [r2, #8]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	b410      	push	{r4}
 8005d30:	6093      	str	r3, [r2, #8]
 8005d32:	da08      	bge.n	8005d46 <__sfputc_r+0x1e>
 8005d34:	6994      	ldr	r4, [r2, #24]
 8005d36:	42a3      	cmp	r3, r4
 8005d38:	db01      	blt.n	8005d3e <__sfputc_r+0x16>
 8005d3a:	290a      	cmp	r1, #10
 8005d3c:	d103      	bne.n	8005d46 <__sfputc_r+0x1e>
 8005d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d42:	f7ff bde8 	b.w	8005916 <__swbuf_r>
 8005d46:	6813      	ldr	r3, [r2, #0]
 8005d48:	1c58      	adds	r0, r3, #1
 8005d4a:	6010      	str	r0, [r2, #0]
 8005d4c:	7019      	strb	r1, [r3, #0]
 8005d4e:	4608      	mov	r0, r1
 8005d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <__sfputs_r>:
 8005d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d58:	4606      	mov	r6, r0
 8005d5a:	460f      	mov	r7, r1
 8005d5c:	4614      	mov	r4, r2
 8005d5e:	18d5      	adds	r5, r2, r3
 8005d60:	42ac      	cmp	r4, r5
 8005d62:	d101      	bne.n	8005d68 <__sfputs_r+0x12>
 8005d64:	2000      	movs	r0, #0
 8005d66:	e007      	b.n	8005d78 <__sfputs_r+0x22>
 8005d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d6c:	463a      	mov	r2, r7
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f7ff ffda 	bl	8005d28 <__sfputc_r>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	d1f3      	bne.n	8005d60 <__sfputs_r+0xa>
 8005d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d7c <_vfiprintf_r>:
 8005d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d80:	460d      	mov	r5, r1
 8005d82:	b09d      	sub	sp, #116	@ 0x74
 8005d84:	4614      	mov	r4, r2
 8005d86:	4698      	mov	r8, r3
 8005d88:	4606      	mov	r6, r0
 8005d8a:	b118      	cbz	r0, 8005d94 <_vfiprintf_r+0x18>
 8005d8c:	6a03      	ldr	r3, [r0, #32]
 8005d8e:	b90b      	cbnz	r3, 8005d94 <_vfiprintf_r+0x18>
 8005d90:	f7ff fcd8 	bl	8005744 <__sinit>
 8005d94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d96:	07d9      	lsls	r1, r3, #31
 8005d98:	d405      	bmi.n	8005da6 <_vfiprintf_r+0x2a>
 8005d9a:	89ab      	ldrh	r3, [r5, #12]
 8005d9c:	059a      	lsls	r2, r3, #22
 8005d9e:	d402      	bmi.n	8005da6 <_vfiprintf_r+0x2a>
 8005da0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005da2:	f7ff fec6 	bl	8005b32 <__retarget_lock_acquire_recursive>
 8005da6:	89ab      	ldrh	r3, [r5, #12]
 8005da8:	071b      	lsls	r3, r3, #28
 8005daa:	d501      	bpl.n	8005db0 <_vfiprintf_r+0x34>
 8005dac:	692b      	ldr	r3, [r5, #16]
 8005dae:	b99b      	cbnz	r3, 8005dd8 <_vfiprintf_r+0x5c>
 8005db0:	4629      	mov	r1, r5
 8005db2:	4630      	mov	r0, r6
 8005db4:	f7ff fdee 	bl	8005994 <__swsetup_r>
 8005db8:	b170      	cbz	r0, 8005dd8 <_vfiprintf_r+0x5c>
 8005dba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dbc:	07dc      	lsls	r4, r3, #31
 8005dbe:	d504      	bpl.n	8005dca <_vfiprintf_r+0x4e>
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc4:	b01d      	add	sp, #116	@ 0x74
 8005dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dca:	89ab      	ldrh	r3, [r5, #12]
 8005dcc:	0598      	lsls	r0, r3, #22
 8005dce:	d4f7      	bmi.n	8005dc0 <_vfiprintf_r+0x44>
 8005dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dd2:	f7ff feaf 	bl	8005b34 <__retarget_lock_release_recursive>
 8005dd6:	e7f3      	b.n	8005dc0 <_vfiprintf_r+0x44>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ddc:	2320      	movs	r3, #32
 8005dde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005de6:	2330      	movs	r3, #48	@ 0x30
 8005de8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f98 <_vfiprintf_r+0x21c>
 8005dec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005df0:	f04f 0901 	mov.w	r9, #1
 8005df4:	4623      	mov	r3, r4
 8005df6:	469a      	mov	sl, r3
 8005df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dfc:	b10a      	cbz	r2, 8005e02 <_vfiprintf_r+0x86>
 8005dfe:	2a25      	cmp	r2, #37	@ 0x25
 8005e00:	d1f9      	bne.n	8005df6 <_vfiprintf_r+0x7a>
 8005e02:	ebba 0b04 	subs.w	fp, sl, r4
 8005e06:	d00b      	beq.n	8005e20 <_vfiprintf_r+0xa4>
 8005e08:	465b      	mov	r3, fp
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	4630      	mov	r0, r6
 8005e10:	f7ff ffa1 	bl	8005d56 <__sfputs_r>
 8005e14:	3001      	adds	r0, #1
 8005e16:	f000 80a7 	beq.w	8005f68 <_vfiprintf_r+0x1ec>
 8005e1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e1c:	445a      	add	r2, fp
 8005e1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e20:	f89a 3000 	ldrb.w	r3, [sl]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 809f 	beq.w	8005f68 <_vfiprintf_r+0x1ec>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e34:	f10a 0a01 	add.w	sl, sl, #1
 8005e38:	9304      	str	r3, [sp, #16]
 8005e3a:	9307      	str	r3, [sp, #28]
 8005e3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e40:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e42:	4654      	mov	r4, sl
 8005e44:	2205      	movs	r2, #5
 8005e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e4a:	4853      	ldr	r0, [pc, #332]	@ (8005f98 <_vfiprintf_r+0x21c>)
 8005e4c:	f7fa fa48 	bl	80002e0 <memchr>
 8005e50:	9a04      	ldr	r2, [sp, #16]
 8005e52:	b9d8      	cbnz	r0, 8005e8c <_vfiprintf_r+0x110>
 8005e54:	06d1      	lsls	r1, r2, #27
 8005e56:	bf44      	itt	mi
 8005e58:	2320      	movmi	r3, #32
 8005e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e5e:	0713      	lsls	r3, r2, #28
 8005e60:	bf44      	itt	mi
 8005e62:	232b      	movmi	r3, #43	@ 0x2b
 8005e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e68:	f89a 3000 	ldrb.w	r3, [sl]
 8005e6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e6e:	d015      	beq.n	8005e9c <_vfiprintf_r+0x120>
 8005e70:	9a07      	ldr	r2, [sp, #28]
 8005e72:	4654      	mov	r4, sl
 8005e74:	2000      	movs	r0, #0
 8005e76:	f04f 0c0a 	mov.w	ip, #10
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e80:	3b30      	subs	r3, #48	@ 0x30
 8005e82:	2b09      	cmp	r3, #9
 8005e84:	d94b      	bls.n	8005f1e <_vfiprintf_r+0x1a2>
 8005e86:	b1b0      	cbz	r0, 8005eb6 <_vfiprintf_r+0x13a>
 8005e88:	9207      	str	r2, [sp, #28]
 8005e8a:	e014      	b.n	8005eb6 <_vfiprintf_r+0x13a>
 8005e8c:	eba0 0308 	sub.w	r3, r0, r8
 8005e90:	fa09 f303 	lsl.w	r3, r9, r3
 8005e94:	4313      	orrs	r3, r2
 8005e96:	9304      	str	r3, [sp, #16]
 8005e98:	46a2      	mov	sl, r4
 8005e9a:	e7d2      	b.n	8005e42 <_vfiprintf_r+0xc6>
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	1d19      	adds	r1, r3, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	9103      	str	r1, [sp, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bfbb      	ittet	lt
 8005ea8:	425b      	neglt	r3, r3
 8005eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8005eae:	9307      	strge	r3, [sp, #28]
 8005eb0:	9307      	strlt	r3, [sp, #28]
 8005eb2:	bfb8      	it	lt
 8005eb4:	9204      	strlt	r2, [sp, #16]
 8005eb6:	7823      	ldrb	r3, [r4, #0]
 8005eb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005eba:	d10a      	bne.n	8005ed2 <_vfiprintf_r+0x156>
 8005ebc:	7863      	ldrb	r3, [r4, #1]
 8005ebe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ec0:	d132      	bne.n	8005f28 <_vfiprintf_r+0x1ac>
 8005ec2:	9b03      	ldr	r3, [sp, #12]
 8005ec4:	1d1a      	adds	r2, r3, #4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	9203      	str	r2, [sp, #12]
 8005eca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ece:	3402      	adds	r4, #2
 8005ed0:	9305      	str	r3, [sp, #20]
 8005ed2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005fa8 <_vfiprintf_r+0x22c>
 8005ed6:	7821      	ldrb	r1, [r4, #0]
 8005ed8:	2203      	movs	r2, #3
 8005eda:	4650      	mov	r0, sl
 8005edc:	f7fa fa00 	bl	80002e0 <memchr>
 8005ee0:	b138      	cbz	r0, 8005ef2 <_vfiprintf_r+0x176>
 8005ee2:	9b04      	ldr	r3, [sp, #16]
 8005ee4:	eba0 000a 	sub.w	r0, r0, sl
 8005ee8:	2240      	movs	r2, #64	@ 0x40
 8005eea:	4082      	lsls	r2, r0
 8005eec:	4313      	orrs	r3, r2
 8005eee:	3401      	adds	r4, #1
 8005ef0:	9304      	str	r3, [sp, #16]
 8005ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef6:	4829      	ldr	r0, [pc, #164]	@ (8005f9c <_vfiprintf_r+0x220>)
 8005ef8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005efc:	2206      	movs	r2, #6
 8005efe:	f7fa f9ef 	bl	80002e0 <memchr>
 8005f02:	2800      	cmp	r0, #0
 8005f04:	d03f      	beq.n	8005f86 <_vfiprintf_r+0x20a>
 8005f06:	4b26      	ldr	r3, [pc, #152]	@ (8005fa0 <_vfiprintf_r+0x224>)
 8005f08:	bb1b      	cbnz	r3, 8005f52 <_vfiprintf_r+0x1d6>
 8005f0a:	9b03      	ldr	r3, [sp, #12]
 8005f0c:	3307      	adds	r3, #7
 8005f0e:	f023 0307 	bic.w	r3, r3, #7
 8005f12:	3308      	adds	r3, #8
 8005f14:	9303      	str	r3, [sp, #12]
 8005f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f18:	443b      	add	r3, r7
 8005f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f1c:	e76a      	b.n	8005df4 <_vfiprintf_r+0x78>
 8005f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f22:	460c      	mov	r4, r1
 8005f24:	2001      	movs	r0, #1
 8005f26:	e7a8      	b.n	8005e7a <_vfiprintf_r+0xfe>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	3401      	adds	r4, #1
 8005f2c:	9305      	str	r3, [sp, #20]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	f04f 0c0a 	mov.w	ip, #10
 8005f34:	4620      	mov	r0, r4
 8005f36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f3a:	3a30      	subs	r2, #48	@ 0x30
 8005f3c:	2a09      	cmp	r2, #9
 8005f3e:	d903      	bls.n	8005f48 <_vfiprintf_r+0x1cc>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0c6      	beq.n	8005ed2 <_vfiprintf_r+0x156>
 8005f44:	9105      	str	r1, [sp, #20]
 8005f46:	e7c4      	b.n	8005ed2 <_vfiprintf_r+0x156>
 8005f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e7f0      	b.n	8005f34 <_vfiprintf_r+0x1b8>
 8005f52:	ab03      	add	r3, sp, #12
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	462a      	mov	r2, r5
 8005f58:	4b12      	ldr	r3, [pc, #72]	@ (8005fa4 <_vfiprintf_r+0x228>)
 8005f5a:	a904      	add	r1, sp, #16
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f3af 8000 	nop.w
 8005f62:	4607      	mov	r7, r0
 8005f64:	1c78      	adds	r0, r7, #1
 8005f66:	d1d6      	bne.n	8005f16 <_vfiprintf_r+0x19a>
 8005f68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f6a:	07d9      	lsls	r1, r3, #31
 8005f6c:	d405      	bmi.n	8005f7a <_vfiprintf_r+0x1fe>
 8005f6e:	89ab      	ldrh	r3, [r5, #12]
 8005f70:	059a      	lsls	r2, r3, #22
 8005f72:	d402      	bmi.n	8005f7a <_vfiprintf_r+0x1fe>
 8005f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f76:	f7ff fddd 	bl	8005b34 <__retarget_lock_release_recursive>
 8005f7a:	89ab      	ldrh	r3, [r5, #12]
 8005f7c:	065b      	lsls	r3, r3, #25
 8005f7e:	f53f af1f 	bmi.w	8005dc0 <_vfiprintf_r+0x44>
 8005f82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f84:	e71e      	b.n	8005dc4 <_vfiprintf_r+0x48>
 8005f86:	ab03      	add	r3, sp, #12
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	462a      	mov	r2, r5
 8005f8c:	4b05      	ldr	r3, [pc, #20]	@ (8005fa4 <_vfiprintf_r+0x228>)
 8005f8e:	a904      	add	r1, sp, #16
 8005f90:	4630      	mov	r0, r6
 8005f92:	f000 f879 	bl	8006088 <_printf_i>
 8005f96:	e7e4      	b.n	8005f62 <_vfiprintf_r+0x1e6>
 8005f98:	080065ac 	.word	0x080065ac
 8005f9c:	080065b6 	.word	0x080065b6
 8005fa0:	00000000 	.word	0x00000000
 8005fa4:	08005d57 	.word	0x08005d57
 8005fa8:	080065b2 	.word	0x080065b2

08005fac <_printf_common>:
 8005fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb0:	4616      	mov	r6, r2
 8005fb2:	4698      	mov	r8, r3
 8005fb4:	688a      	ldr	r2, [r1, #8]
 8005fb6:	690b      	ldr	r3, [r1, #16]
 8005fb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	bfb8      	it	lt
 8005fc0:	4613      	movlt	r3, r2
 8005fc2:	6033      	str	r3, [r6, #0]
 8005fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fc8:	4607      	mov	r7, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	b10a      	cbz	r2, 8005fd2 <_printf_common+0x26>
 8005fce:	3301      	adds	r3, #1
 8005fd0:	6033      	str	r3, [r6, #0]
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	0699      	lsls	r1, r3, #26
 8005fd6:	bf42      	ittt	mi
 8005fd8:	6833      	ldrmi	r3, [r6, #0]
 8005fda:	3302      	addmi	r3, #2
 8005fdc:	6033      	strmi	r3, [r6, #0]
 8005fde:	6825      	ldr	r5, [r4, #0]
 8005fe0:	f015 0506 	ands.w	r5, r5, #6
 8005fe4:	d106      	bne.n	8005ff4 <_printf_common+0x48>
 8005fe6:	f104 0a19 	add.w	sl, r4, #25
 8005fea:	68e3      	ldr	r3, [r4, #12]
 8005fec:	6832      	ldr	r2, [r6, #0]
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	42ab      	cmp	r3, r5
 8005ff2:	dc26      	bgt.n	8006042 <_printf_common+0x96>
 8005ff4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ff8:	6822      	ldr	r2, [r4, #0]
 8005ffa:	3b00      	subs	r3, #0
 8005ffc:	bf18      	it	ne
 8005ffe:	2301      	movne	r3, #1
 8006000:	0692      	lsls	r2, r2, #26
 8006002:	d42b      	bmi.n	800605c <_printf_common+0xb0>
 8006004:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006008:	4641      	mov	r1, r8
 800600a:	4638      	mov	r0, r7
 800600c:	47c8      	blx	r9
 800600e:	3001      	adds	r0, #1
 8006010:	d01e      	beq.n	8006050 <_printf_common+0xa4>
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	6922      	ldr	r2, [r4, #16]
 8006016:	f003 0306 	and.w	r3, r3, #6
 800601a:	2b04      	cmp	r3, #4
 800601c:	bf02      	ittt	eq
 800601e:	68e5      	ldreq	r5, [r4, #12]
 8006020:	6833      	ldreq	r3, [r6, #0]
 8006022:	1aed      	subeq	r5, r5, r3
 8006024:	68a3      	ldr	r3, [r4, #8]
 8006026:	bf0c      	ite	eq
 8006028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800602c:	2500      	movne	r5, #0
 800602e:	4293      	cmp	r3, r2
 8006030:	bfc4      	itt	gt
 8006032:	1a9b      	subgt	r3, r3, r2
 8006034:	18ed      	addgt	r5, r5, r3
 8006036:	2600      	movs	r6, #0
 8006038:	341a      	adds	r4, #26
 800603a:	42b5      	cmp	r5, r6
 800603c:	d11a      	bne.n	8006074 <_printf_common+0xc8>
 800603e:	2000      	movs	r0, #0
 8006040:	e008      	b.n	8006054 <_printf_common+0xa8>
 8006042:	2301      	movs	r3, #1
 8006044:	4652      	mov	r2, sl
 8006046:	4641      	mov	r1, r8
 8006048:	4638      	mov	r0, r7
 800604a:	47c8      	blx	r9
 800604c:	3001      	adds	r0, #1
 800604e:	d103      	bne.n	8006058 <_printf_common+0xac>
 8006050:	f04f 30ff 	mov.w	r0, #4294967295
 8006054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006058:	3501      	adds	r5, #1
 800605a:	e7c6      	b.n	8005fea <_printf_common+0x3e>
 800605c:	18e1      	adds	r1, r4, r3
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	2030      	movs	r0, #48	@ 0x30
 8006062:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006066:	4422      	add	r2, r4
 8006068:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800606c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006070:	3302      	adds	r3, #2
 8006072:	e7c7      	b.n	8006004 <_printf_common+0x58>
 8006074:	2301      	movs	r3, #1
 8006076:	4622      	mov	r2, r4
 8006078:	4641      	mov	r1, r8
 800607a:	4638      	mov	r0, r7
 800607c:	47c8      	blx	r9
 800607e:	3001      	adds	r0, #1
 8006080:	d0e6      	beq.n	8006050 <_printf_common+0xa4>
 8006082:	3601      	adds	r6, #1
 8006084:	e7d9      	b.n	800603a <_printf_common+0x8e>
	...

08006088 <_printf_i>:
 8006088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800608c:	7e0f      	ldrb	r7, [r1, #24]
 800608e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006090:	2f78      	cmp	r7, #120	@ 0x78
 8006092:	4691      	mov	r9, r2
 8006094:	4680      	mov	r8, r0
 8006096:	460c      	mov	r4, r1
 8006098:	469a      	mov	sl, r3
 800609a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800609e:	d807      	bhi.n	80060b0 <_printf_i+0x28>
 80060a0:	2f62      	cmp	r7, #98	@ 0x62
 80060a2:	d80a      	bhi.n	80060ba <_printf_i+0x32>
 80060a4:	2f00      	cmp	r7, #0
 80060a6:	f000 80d1 	beq.w	800624c <_printf_i+0x1c4>
 80060aa:	2f58      	cmp	r7, #88	@ 0x58
 80060ac:	f000 80b8 	beq.w	8006220 <_printf_i+0x198>
 80060b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060b8:	e03a      	b.n	8006130 <_printf_i+0xa8>
 80060ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060be:	2b15      	cmp	r3, #21
 80060c0:	d8f6      	bhi.n	80060b0 <_printf_i+0x28>
 80060c2:	a101      	add	r1, pc, #4	@ (adr r1, 80060c8 <_printf_i+0x40>)
 80060c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060c8:	08006121 	.word	0x08006121
 80060cc:	08006135 	.word	0x08006135
 80060d0:	080060b1 	.word	0x080060b1
 80060d4:	080060b1 	.word	0x080060b1
 80060d8:	080060b1 	.word	0x080060b1
 80060dc:	080060b1 	.word	0x080060b1
 80060e0:	08006135 	.word	0x08006135
 80060e4:	080060b1 	.word	0x080060b1
 80060e8:	080060b1 	.word	0x080060b1
 80060ec:	080060b1 	.word	0x080060b1
 80060f0:	080060b1 	.word	0x080060b1
 80060f4:	08006233 	.word	0x08006233
 80060f8:	0800615f 	.word	0x0800615f
 80060fc:	080061ed 	.word	0x080061ed
 8006100:	080060b1 	.word	0x080060b1
 8006104:	080060b1 	.word	0x080060b1
 8006108:	08006255 	.word	0x08006255
 800610c:	080060b1 	.word	0x080060b1
 8006110:	0800615f 	.word	0x0800615f
 8006114:	080060b1 	.word	0x080060b1
 8006118:	080060b1 	.word	0x080060b1
 800611c:	080061f5 	.word	0x080061f5
 8006120:	6833      	ldr	r3, [r6, #0]
 8006122:	1d1a      	adds	r2, r3, #4
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6032      	str	r2, [r6, #0]
 8006128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800612c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006130:	2301      	movs	r3, #1
 8006132:	e09c      	b.n	800626e <_printf_i+0x1e6>
 8006134:	6833      	ldr	r3, [r6, #0]
 8006136:	6820      	ldr	r0, [r4, #0]
 8006138:	1d19      	adds	r1, r3, #4
 800613a:	6031      	str	r1, [r6, #0]
 800613c:	0606      	lsls	r6, r0, #24
 800613e:	d501      	bpl.n	8006144 <_printf_i+0xbc>
 8006140:	681d      	ldr	r5, [r3, #0]
 8006142:	e003      	b.n	800614c <_printf_i+0xc4>
 8006144:	0645      	lsls	r5, r0, #25
 8006146:	d5fb      	bpl.n	8006140 <_printf_i+0xb8>
 8006148:	f9b3 5000 	ldrsh.w	r5, [r3]
 800614c:	2d00      	cmp	r5, #0
 800614e:	da03      	bge.n	8006158 <_printf_i+0xd0>
 8006150:	232d      	movs	r3, #45	@ 0x2d
 8006152:	426d      	negs	r5, r5
 8006154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006158:	4858      	ldr	r0, [pc, #352]	@ (80062bc <_printf_i+0x234>)
 800615a:	230a      	movs	r3, #10
 800615c:	e011      	b.n	8006182 <_printf_i+0xfa>
 800615e:	6821      	ldr	r1, [r4, #0]
 8006160:	6833      	ldr	r3, [r6, #0]
 8006162:	0608      	lsls	r0, r1, #24
 8006164:	f853 5b04 	ldr.w	r5, [r3], #4
 8006168:	d402      	bmi.n	8006170 <_printf_i+0xe8>
 800616a:	0649      	lsls	r1, r1, #25
 800616c:	bf48      	it	mi
 800616e:	b2ad      	uxthmi	r5, r5
 8006170:	2f6f      	cmp	r7, #111	@ 0x6f
 8006172:	4852      	ldr	r0, [pc, #328]	@ (80062bc <_printf_i+0x234>)
 8006174:	6033      	str	r3, [r6, #0]
 8006176:	bf14      	ite	ne
 8006178:	230a      	movne	r3, #10
 800617a:	2308      	moveq	r3, #8
 800617c:	2100      	movs	r1, #0
 800617e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006182:	6866      	ldr	r6, [r4, #4]
 8006184:	60a6      	str	r6, [r4, #8]
 8006186:	2e00      	cmp	r6, #0
 8006188:	db05      	blt.n	8006196 <_printf_i+0x10e>
 800618a:	6821      	ldr	r1, [r4, #0]
 800618c:	432e      	orrs	r6, r5
 800618e:	f021 0104 	bic.w	r1, r1, #4
 8006192:	6021      	str	r1, [r4, #0]
 8006194:	d04b      	beq.n	800622e <_printf_i+0x1a6>
 8006196:	4616      	mov	r6, r2
 8006198:	fbb5 f1f3 	udiv	r1, r5, r3
 800619c:	fb03 5711 	mls	r7, r3, r1, r5
 80061a0:	5dc7      	ldrb	r7, [r0, r7]
 80061a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061a6:	462f      	mov	r7, r5
 80061a8:	42bb      	cmp	r3, r7
 80061aa:	460d      	mov	r5, r1
 80061ac:	d9f4      	bls.n	8006198 <_printf_i+0x110>
 80061ae:	2b08      	cmp	r3, #8
 80061b0:	d10b      	bne.n	80061ca <_printf_i+0x142>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	07df      	lsls	r7, r3, #31
 80061b6:	d508      	bpl.n	80061ca <_printf_i+0x142>
 80061b8:	6923      	ldr	r3, [r4, #16]
 80061ba:	6861      	ldr	r1, [r4, #4]
 80061bc:	4299      	cmp	r1, r3
 80061be:	bfde      	ittt	le
 80061c0:	2330      	movle	r3, #48	@ 0x30
 80061c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061ca:	1b92      	subs	r2, r2, r6
 80061cc:	6122      	str	r2, [r4, #16]
 80061ce:	f8cd a000 	str.w	sl, [sp]
 80061d2:	464b      	mov	r3, r9
 80061d4:	aa03      	add	r2, sp, #12
 80061d6:	4621      	mov	r1, r4
 80061d8:	4640      	mov	r0, r8
 80061da:	f7ff fee7 	bl	8005fac <_printf_common>
 80061de:	3001      	adds	r0, #1
 80061e0:	d14a      	bne.n	8006278 <_printf_i+0x1f0>
 80061e2:	f04f 30ff 	mov.w	r0, #4294967295
 80061e6:	b004      	add	sp, #16
 80061e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	f043 0320 	orr.w	r3, r3, #32
 80061f2:	6023      	str	r3, [r4, #0]
 80061f4:	4832      	ldr	r0, [pc, #200]	@ (80062c0 <_printf_i+0x238>)
 80061f6:	2778      	movs	r7, #120	@ 0x78
 80061f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	6831      	ldr	r1, [r6, #0]
 8006200:	061f      	lsls	r7, r3, #24
 8006202:	f851 5b04 	ldr.w	r5, [r1], #4
 8006206:	d402      	bmi.n	800620e <_printf_i+0x186>
 8006208:	065f      	lsls	r7, r3, #25
 800620a:	bf48      	it	mi
 800620c:	b2ad      	uxthmi	r5, r5
 800620e:	6031      	str	r1, [r6, #0]
 8006210:	07d9      	lsls	r1, r3, #31
 8006212:	bf44      	itt	mi
 8006214:	f043 0320 	orrmi.w	r3, r3, #32
 8006218:	6023      	strmi	r3, [r4, #0]
 800621a:	b11d      	cbz	r5, 8006224 <_printf_i+0x19c>
 800621c:	2310      	movs	r3, #16
 800621e:	e7ad      	b.n	800617c <_printf_i+0xf4>
 8006220:	4826      	ldr	r0, [pc, #152]	@ (80062bc <_printf_i+0x234>)
 8006222:	e7e9      	b.n	80061f8 <_printf_i+0x170>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	f023 0320 	bic.w	r3, r3, #32
 800622a:	6023      	str	r3, [r4, #0]
 800622c:	e7f6      	b.n	800621c <_printf_i+0x194>
 800622e:	4616      	mov	r6, r2
 8006230:	e7bd      	b.n	80061ae <_printf_i+0x126>
 8006232:	6833      	ldr	r3, [r6, #0]
 8006234:	6825      	ldr	r5, [r4, #0]
 8006236:	6961      	ldr	r1, [r4, #20]
 8006238:	1d18      	adds	r0, r3, #4
 800623a:	6030      	str	r0, [r6, #0]
 800623c:	062e      	lsls	r6, r5, #24
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	d501      	bpl.n	8006246 <_printf_i+0x1be>
 8006242:	6019      	str	r1, [r3, #0]
 8006244:	e002      	b.n	800624c <_printf_i+0x1c4>
 8006246:	0668      	lsls	r0, r5, #25
 8006248:	d5fb      	bpl.n	8006242 <_printf_i+0x1ba>
 800624a:	8019      	strh	r1, [r3, #0]
 800624c:	2300      	movs	r3, #0
 800624e:	6123      	str	r3, [r4, #16]
 8006250:	4616      	mov	r6, r2
 8006252:	e7bc      	b.n	80061ce <_printf_i+0x146>
 8006254:	6833      	ldr	r3, [r6, #0]
 8006256:	1d1a      	adds	r2, r3, #4
 8006258:	6032      	str	r2, [r6, #0]
 800625a:	681e      	ldr	r6, [r3, #0]
 800625c:	6862      	ldr	r2, [r4, #4]
 800625e:	2100      	movs	r1, #0
 8006260:	4630      	mov	r0, r6
 8006262:	f7fa f83d 	bl	80002e0 <memchr>
 8006266:	b108      	cbz	r0, 800626c <_printf_i+0x1e4>
 8006268:	1b80      	subs	r0, r0, r6
 800626a:	6060      	str	r0, [r4, #4]
 800626c:	6863      	ldr	r3, [r4, #4]
 800626e:	6123      	str	r3, [r4, #16]
 8006270:	2300      	movs	r3, #0
 8006272:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006276:	e7aa      	b.n	80061ce <_printf_i+0x146>
 8006278:	6923      	ldr	r3, [r4, #16]
 800627a:	4632      	mov	r2, r6
 800627c:	4649      	mov	r1, r9
 800627e:	4640      	mov	r0, r8
 8006280:	47d0      	blx	sl
 8006282:	3001      	adds	r0, #1
 8006284:	d0ad      	beq.n	80061e2 <_printf_i+0x15a>
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	079b      	lsls	r3, r3, #30
 800628a:	d413      	bmi.n	80062b4 <_printf_i+0x22c>
 800628c:	68e0      	ldr	r0, [r4, #12]
 800628e:	9b03      	ldr	r3, [sp, #12]
 8006290:	4298      	cmp	r0, r3
 8006292:	bfb8      	it	lt
 8006294:	4618      	movlt	r0, r3
 8006296:	e7a6      	b.n	80061e6 <_printf_i+0x15e>
 8006298:	2301      	movs	r3, #1
 800629a:	4632      	mov	r2, r6
 800629c:	4649      	mov	r1, r9
 800629e:	4640      	mov	r0, r8
 80062a0:	47d0      	blx	sl
 80062a2:	3001      	adds	r0, #1
 80062a4:	d09d      	beq.n	80061e2 <_printf_i+0x15a>
 80062a6:	3501      	adds	r5, #1
 80062a8:	68e3      	ldr	r3, [r4, #12]
 80062aa:	9903      	ldr	r1, [sp, #12]
 80062ac:	1a5b      	subs	r3, r3, r1
 80062ae:	42ab      	cmp	r3, r5
 80062b0:	dcf2      	bgt.n	8006298 <_printf_i+0x210>
 80062b2:	e7eb      	b.n	800628c <_printf_i+0x204>
 80062b4:	2500      	movs	r5, #0
 80062b6:	f104 0619 	add.w	r6, r4, #25
 80062ba:	e7f5      	b.n	80062a8 <_printf_i+0x220>
 80062bc:	080065bd 	.word	0x080065bd
 80062c0:	080065ce 	.word	0x080065ce

080062c4 <__sflush_r>:
 80062c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062cc:	0716      	lsls	r6, r2, #28
 80062ce:	4605      	mov	r5, r0
 80062d0:	460c      	mov	r4, r1
 80062d2:	d454      	bmi.n	800637e <__sflush_r+0xba>
 80062d4:	684b      	ldr	r3, [r1, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	dc02      	bgt.n	80062e0 <__sflush_r+0x1c>
 80062da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	dd48      	ble.n	8006372 <__sflush_r+0xae>
 80062e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062e2:	2e00      	cmp	r6, #0
 80062e4:	d045      	beq.n	8006372 <__sflush_r+0xae>
 80062e6:	2300      	movs	r3, #0
 80062e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062ec:	682f      	ldr	r7, [r5, #0]
 80062ee:	6a21      	ldr	r1, [r4, #32]
 80062f0:	602b      	str	r3, [r5, #0]
 80062f2:	d030      	beq.n	8006356 <__sflush_r+0x92>
 80062f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	0759      	lsls	r1, r3, #29
 80062fa:	d505      	bpl.n	8006308 <__sflush_r+0x44>
 80062fc:	6863      	ldr	r3, [r4, #4]
 80062fe:	1ad2      	subs	r2, r2, r3
 8006300:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006302:	b10b      	cbz	r3, 8006308 <__sflush_r+0x44>
 8006304:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006306:	1ad2      	subs	r2, r2, r3
 8006308:	2300      	movs	r3, #0
 800630a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800630c:	6a21      	ldr	r1, [r4, #32]
 800630e:	4628      	mov	r0, r5
 8006310:	47b0      	blx	r6
 8006312:	1c43      	adds	r3, r0, #1
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	d106      	bne.n	8006326 <__sflush_r+0x62>
 8006318:	6829      	ldr	r1, [r5, #0]
 800631a:	291d      	cmp	r1, #29
 800631c:	d82b      	bhi.n	8006376 <__sflush_r+0xb2>
 800631e:	4a2a      	ldr	r2, [pc, #168]	@ (80063c8 <__sflush_r+0x104>)
 8006320:	40ca      	lsrs	r2, r1
 8006322:	07d6      	lsls	r6, r2, #31
 8006324:	d527      	bpl.n	8006376 <__sflush_r+0xb2>
 8006326:	2200      	movs	r2, #0
 8006328:	6062      	str	r2, [r4, #4]
 800632a:	04d9      	lsls	r1, r3, #19
 800632c:	6922      	ldr	r2, [r4, #16]
 800632e:	6022      	str	r2, [r4, #0]
 8006330:	d504      	bpl.n	800633c <__sflush_r+0x78>
 8006332:	1c42      	adds	r2, r0, #1
 8006334:	d101      	bne.n	800633a <__sflush_r+0x76>
 8006336:	682b      	ldr	r3, [r5, #0]
 8006338:	b903      	cbnz	r3, 800633c <__sflush_r+0x78>
 800633a:	6560      	str	r0, [r4, #84]	@ 0x54
 800633c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800633e:	602f      	str	r7, [r5, #0]
 8006340:	b1b9      	cbz	r1, 8006372 <__sflush_r+0xae>
 8006342:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006346:	4299      	cmp	r1, r3
 8006348:	d002      	beq.n	8006350 <__sflush_r+0x8c>
 800634a:	4628      	mov	r0, r5
 800634c:	f7ff fbf4 	bl	8005b38 <_free_r>
 8006350:	2300      	movs	r3, #0
 8006352:	6363      	str	r3, [r4, #52]	@ 0x34
 8006354:	e00d      	b.n	8006372 <__sflush_r+0xae>
 8006356:	2301      	movs	r3, #1
 8006358:	4628      	mov	r0, r5
 800635a:	47b0      	blx	r6
 800635c:	4602      	mov	r2, r0
 800635e:	1c50      	adds	r0, r2, #1
 8006360:	d1c9      	bne.n	80062f6 <__sflush_r+0x32>
 8006362:	682b      	ldr	r3, [r5, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0c6      	beq.n	80062f6 <__sflush_r+0x32>
 8006368:	2b1d      	cmp	r3, #29
 800636a:	d001      	beq.n	8006370 <__sflush_r+0xac>
 800636c:	2b16      	cmp	r3, #22
 800636e:	d11e      	bne.n	80063ae <__sflush_r+0xea>
 8006370:	602f      	str	r7, [r5, #0]
 8006372:	2000      	movs	r0, #0
 8006374:	e022      	b.n	80063bc <__sflush_r+0xf8>
 8006376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800637a:	b21b      	sxth	r3, r3
 800637c:	e01b      	b.n	80063b6 <__sflush_r+0xf2>
 800637e:	690f      	ldr	r7, [r1, #16]
 8006380:	2f00      	cmp	r7, #0
 8006382:	d0f6      	beq.n	8006372 <__sflush_r+0xae>
 8006384:	0793      	lsls	r3, r2, #30
 8006386:	680e      	ldr	r6, [r1, #0]
 8006388:	bf08      	it	eq
 800638a:	694b      	ldreq	r3, [r1, #20]
 800638c:	600f      	str	r7, [r1, #0]
 800638e:	bf18      	it	ne
 8006390:	2300      	movne	r3, #0
 8006392:	eba6 0807 	sub.w	r8, r6, r7
 8006396:	608b      	str	r3, [r1, #8]
 8006398:	f1b8 0f00 	cmp.w	r8, #0
 800639c:	dde9      	ble.n	8006372 <__sflush_r+0xae>
 800639e:	6a21      	ldr	r1, [r4, #32]
 80063a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063a2:	4643      	mov	r3, r8
 80063a4:	463a      	mov	r2, r7
 80063a6:	4628      	mov	r0, r5
 80063a8:	47b0      	blx	r6
 80063aa:	2800      	cmp	r0, #0
 80063ac:	dc08      	bgt.n	80063c0 <__sflush_r+0xfc>
 80063ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063b6:	81a3      	strh	r3, [r4, #12]
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295
 80063bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c0:	4407      	add	r7, r0
 80063c2:	eba8 0800 	sub.w	r8, r8, r0
 80063c6:	e7e7      	b.n	8006398 <__sflush_r+0xd4>
 80063c8:	20400001 	.word	0x20400001

080063cc <_fflush_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	690b      	ldr	r3, [r1, #16]
 80063d0:	4605      	mov	r5, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	b913      	cbnz	r3, 80063dc <_fflush_r+0x10>
 80063d6:	2500      	movs	r5, #0
 80063d8:	4628      	mov	r0, r5
 80063da:	bd38      	pop	{r3, r4, r5, pc}
 80063dc:	b118      	cbz	r0, 80063e6 <_fflush_r+0x1a>
 80063de:	6a03      	ldr	r3, [r0, #32]
 80063e0:	b90b      	cbnz	r3, 80063e6 <_fflush_r+0x1a>
 80063e2:	f7ff f9af 	bl	8005744 <__sinit>
 80063e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0f3      	beq.n	80063d6 <_fflush_r+0xa>
 80063ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063f0:	07d0      	lsls	r0, r2, #31
 80063f2:	d404      	bmi.n	80063fe <_fflush_r+0x32>
 80063f4:	0599      	lsls	r1, r3, #22
 80063f6:	d402      	bmi.n	80063fe <_fflush_r+0x32>
 80063f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063fa:	f7ff fb9a 	bl	8005b32 <__retarget_lock_acquire_recursive>
 80063fe:	4628      	mov	r0, r5
 8006400:	4621      	mov	r1, r4
 8006402:	f7ff ff5f 	bl	80062c4 <__sflush_r>
 8006406:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006408:	07da      	lsls	r2, r3, #31
 800640a:	4605      	mov	r5, r0
 800640c:	d4e4      	bmi.n	80063d8 <_fflush_r+0xc>
 800640e:	89a3      	ldrh	r3, [r4, #12]
 8006410:	059b      	lsls	r3, r3, #22
 8006412:	d4e1      	bmi.n	80063d8 <_fflush_r+0xc>
 8006414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006416:	f7ff fb8d 	bl	8005b34 <__retarget_lock_release_recursive>
 800641a:	e7dd      	b.n	80063d8 <_fflush_r+0xc>

0800641c <__swhatbuf_r>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	460c      	mov	r4, r1
 8006420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006424:	2900      	cmp	r1, #0
 8006426:	b096      	sub	sp, #88	@ 0x58
 8006428:	4615      	mov	r5, r2
 800642a:	461e      	mov	r6, r3
 800642c:	da0d      	bge.n	800644a <__swhatbuf_r+0x2e>
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006434:	f04f 0100 	mov.w	r1, #0
 8006438:	bf14      	ite	ne
 800643a:	2340      	movne	r3, #64	@ 0x40
 800643c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006440:	2000      	movs	r0, #0
 8006442:	6031      	str	r1, [r6, #0]
 8006444:	602b      	str	r3, [r5, #0]
 8006446:	b016      	add	sp, #88	@ 0x58
 8006448:	bd70      	pop	{r4, r5, r6, pc}
 800644a:	466a      	mov	r2, sp
 800644c:	f000 f848 	bl	80064e0 <_fstat_r>
 8006450:	2800      	cmp	r0, #0
 8006452:	dbec      	blt.n	800642e <__swhatbuf_r+0x12>
 8006454:	9901      	ldr	r1, [sp, #4]
 8006456:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800645a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800645e:	4259      	negs	r1, r3
 8006460:	4159      	adcs	r1, r3
 8006462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006466:	e7eb      	b.n	8006440 <__swhatbuf_r+0x24>

08006468 <__smakebuf_r>:
 8006468:	898b      	ldrh	r3, [r1, #12]
 800646a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800646c:	079d      	lsls	r5, r3, #30
 800646e:	4606      	mov	r6, r0
 8006470:	460c      	mov	r4, r1
 8006472:	d507      	bpl.n	8006484 <__smakebuf_r+0x1c>
 8006474:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	6123      	str	r3, [r4, #16]
 800647c:	2301      	movs	r3, #1
 800647e:	6163      	str	r3, [r4, #20]
 8006480:	b003      	add	sp, #12
 8006482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006484:	ab01      	add	r3, sp, #4
 8006486:	466a      	mov	r2, sp
 8006488:	f7ff ffc8 	bl	800641c <__swhatbuf_r>
 800648c:	9f00      	ldr	r7, [sp, #0]
 800648e:	4605      	mov	r5, r0
 8006490:	4639      	mov	r1, r7
 8006492:	4630      	mov	r0, r6
 8006494:	f7ff fbbc 	bl	8005c10 <_malloc_r>
 8006498:	b948      	cbnz	r0, 80064ae <__smakebuf_r+0x46>
 800649a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800649e:	059a      	lsls	r2, r3, #22
 80064a0:	d4ee      	bmi.n	8006480 <__smakebuf_r+0x18>
 80064a2:	f023 0303 	bic.w	r3, r3, #3
 80064a6:	f043 0302 	orr.w	r3, r3, #2
 80064aa:	81a3      	strh	r3, [r4, #12]
 80064ac:	e7e2      	b.n	8006474 <__smakebuf_r+0xc>
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	6020      	str	r0, [r4, #0]
 80064b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b6:	81a3      	strh	r3, [r4, #12]
 80064b8:	9b01      	ldr	r3, [sp, #4]
 80064ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064be:	b15b      	cbz	r3, 80064d8 <__smakebuf_r+0x70>
 80064c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064c4:	4630      	mov	r0, r6
 80064c6:	f000 f81d 	bl	8006504 <_isatty_r>
 80064ca:	b128      	cbz	r0, 80064d8 <__smakebuf_r+0x70>
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	f023 0303 	bic.w	r3, r3, #3
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	81a3      	strh	r3, [r4, #12]
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	431d      	orrs	r5, r3
 80064dc:	81a5      	strh	r5, [r4, #12]
 80064de:	e7cf      	b.n	8006480 <__smakebuf_r+0x18>

080064e0 <_fstat_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4d07      	ldr	r5, [pc, #28]	@ (8006500 <_fstat_r+0x20>)
 80064e4:	2300      	movs	r3, #0
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	4611      	mov	r1, r2
 80064ec:	602b      	str	r3, [r5, #0]
 80064ee:	f7fa fb07 	bl	8000b00 <_fstat>
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	d102      	bne.n	80064fc <_fstat_r+0x1c>
 80064f6:	682b      	ldr	r3, [r5, #0]
 80064f8:	b103      	cbz	r3, 80064fc <_fstat_r+0x1c>
 80064fa:	6023      	str	r3, [r4, #0]
 80064fc:	bd38      	pop	{r3, r4, r5, pc}
 80064fe:	bf00      	nop
 8006500:	24000260 	.word	0x24000260

08006504 <_isatty_r>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	4d06      	ldr	r5, [pc, #24]	@ (8006520 <_isatty_r+0x1c>)
 8006508:	2300      	movs	r3, #0
 800650a:	4604      	mov	r4, r0
 800650c:	4608      	mov	r0, r1
 800650e:	602b      	str	r3, [r5, #0]
 8006510:	f7fa fb06 	bl	8000b20 <_isatty>
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	d102      	bne.n	800651e <_isatty_r+0x1a>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	b103      	cbz	r3, 800651e <_isatty_r+0x1a>
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	bd38      	pop	{r3, r4, r5, pc}
 8006520:	24000260 	.word	0x24000260

08006524 <_sbrk_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	4d06      	ldr	r5, [pc, #24]	@ (8006540 <_sbrk_r+0x1c>)
 8006528:	2300      	movs	r3, #0
 800652a:	4604      	mov	r4, r0
 800652c:	4608      	mov	r0, r1
 800652e:	602b      	str	r3, [r5, #0]
 8006530:	f7fa fb0e 	bl	8000b50 <_sbrk>
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d102      	bne.n	800653e <_sbrk_r+0x1a>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	b103      	cbz	r3, 800653e <_sbrk_r+0x1a>
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	24000260 	.word	0x24000260

08006544 <_init>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	bf00      	nop
 8006548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654a:	bc08      	pop	{r3}
 800654c:	469e      	mov	lr, r3
 800654e:	4770      	bx	lr

08006550 <_fini>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	bf00      	nop
 8006554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006556:	bc08      	pop	{r3}
 8006558:	469e      	mov	lr, r3
 800655a:	4770      	bx	lr
