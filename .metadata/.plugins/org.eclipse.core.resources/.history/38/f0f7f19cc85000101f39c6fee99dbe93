
20250624_TimeWatch_StopWatch2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002a50  08002a50  00003a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a6c  08002a6c  0000406c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002a6c  08002a6c  00003a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a74  08002a74  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a74  08002a74  00003a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a78  08002a78  00003a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08002a7c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000006c  08002ae8  0000406c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002ae8  00004110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b9d  00000000  00000000  0000409c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002001  00000000  00000000  0000dc39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0000fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081c  00000000  00000000  000106f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ed9  00000000  00000000  00010f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7ee  00000000  00000000  00026de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000882e8  00000000  00000000  000345d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc8bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a20  00000000  00000000  000bc900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000bf320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000006c 	.word	0x2000006c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002a38 	.word	0x08002a38

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000070 	.word	0x20000070
 80001d4:	08002a38 	.word	0x08002a38

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	@ 0x28
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b49      	ldr	r3, [pc, #292]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a48      	ldr	r2, [pc, #288]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
 800052a:	4b46      	ldr	r3, [pc, #280]	@ (8000644 <MX_GPIO_Init+0x140>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b42      	ldr	r3, [pc, #264]	@ (8000644 <MX_GPIO_Init+0x140>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a41      	ldr	r2, [pc, #260]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b3f      	ldr	r3, [pc, #252]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b3b      	ldr	r3, [pc, #236]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a3a      	ldr	r2, [pc, #232]	@ (8000644 <MX_GPIO_Init+0x140>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b38      	ldr	r3, [pc, #224]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b34      	ldr	r3, [pc, #208]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	4a33      	ldr	r2, [pc, #204]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6313      	str	r3, [r2, #48]	@ 0x30
 800057e:	4b31      	ldr	r3, [pc, #196]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8000590:	482d      	ldr	r0, [pc, #180]	@ (8000648 <MX_GPIO_Init+0x144>)
 8000592:	f001 f973 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000596:	2200      	movs	r2, #0
 8000598:	f24f 0106 	movw	r1, #61446	@ 0xf006
 800059c:	482b      	ldr	r0, [pc, #172]	@ (800064c <MX_GPIO_Init+0x148>)
 800059e:	f001 f96d 	bl	800187c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80005a8:	4829      	ldr	r0, [pc, #164]	@ (8000650 <MX_GPIO_Init+0x14c>)
 80005aa:	f001 f967 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80005ae:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	4820      	ldr	r0, [pc, #128]	@ (8000648 <MX_GPIO_Init+0x144>)
 80005c8:	f000 ffbc 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80005cc:	f24f 0306 	movw	r3, #61446	@ 0xf006
 80005d0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	4819      	ldr	r0, [pc, #100]	@ (800064c <MX_GPIO_Init+0x148>)
 80005e6:	f000 ffad 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	4814      	ldr	r0, [pc, #80]	@ (8000650 <MX_GPIO_Init+0x14c>)
 8000600:	f000 ffa0 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000604:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <MX_GPIO_Init+0x14c>)
 800061e:	f000 ff91 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000622:	2328      	movs	r3, #40	@ 0x28
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_GPIO_Init+0x148>)
 8000636:	f000 ff85 	bl	8001544 <HAL_GPIO_Init>

}
 800063a:	bf00      	nop
 800063c:	3728      	adds	r7, #40	@ 0x28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40020800 	.word	0x40020800
 800064c:	40020400 	.word	0x40020400
 8000650:	40020000 	.word	0x40020000

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 fdcc 	bl	80011f4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f80a 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f7ff ff50 	bl	8000504 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000664:	f000 f8e8 	bl	8000838 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 8000668:	f000 f9c2 	bl	80009f0 <ap_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ap_main();
 800066c:	f000 f992 	bl	8000994 <ap_main>
 8000670:	e7fc      	b.n	800066c <main+0x18>
	...

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	@ 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	@ 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f002 f9ac 	bl	80029e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b27      	ldr	r3, [pc, #156]	@ (800073c <SystemClock_Config+0xc8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	4a26      	ldr	r2, [pc, #152]	@ (800073c <SystemClock_Config+0xc8>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a8:	4b24      	ldr	r3, [pc, #144]	@ (800073c <SystemClock_Config+0xc8>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <SystemClock_Config+0xcc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a20      	ldr	r2, [pc, #128]	@ (8000740 <SystemClock_Config+0xcc>)
 80006be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <SystemClock_Config+0xcc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006e8:	2364      	movs	r3, #100	@ 0x64
 80006ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 f8d9 	bl	80018b0 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000704:	f000 f81e 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2103      	movs	r1, #3
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fb3b 	bl	8001da0 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000730:	f000 f808 	bl	8000744 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3750      	adds	r7, #80	@ 0x50
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <Error_Handler+0x8>

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <HAL_MspInit+0x4c>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000764:	6453      	str	r3, [r2, #68]	@ 0x44
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	4a08      	ldr	r2, [pc, #32]	@ (800079c <HAL_MspInit+0x4c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	@ 0x40
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <NMI_Handler+0x4>

080007a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <MemManage_Handler+0x4>

080007b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f6:	f000 fd4f 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000804:	4802      	ldr	r0, [pc, #8]	@ (8000810 <TIM2_IRQHandler+0x10>)
 8000806:	f001 fd69 	bl	80022dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000088 	.word	0x20000088

08000814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <SystemInit+0x20>)
 800081a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800081e:	4a05      	ldr	r2, [pc, #20]	@ (8000834 <SystemInit+0x20>)
 8000820:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000824:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000854:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <MX_TIM2_Init+0x94>)
 8000856:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800085a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 800085c:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <MX_TIM2_Init+0x94>)
 800085e:	2263      	movs	r2, #99	@ 0x63
 8000860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <MX_TIM2_Init+0x94>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000868:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <MX_TIM2_Init+0x94>)
 800086a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800086e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <MX_TIM2_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <MX_TIM2_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800087c:	4813      	ldr	r0, [pc, #76]	@ (80008cc <MX_TIM2_Init+0x94>)
 800087e:	f001 fc7b 	bl	8002178 <HAL_TIM_Base_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000888:	f7ff ff5c 	bl	8000744 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	@ (80008cc <MX_TIM2_Init+0x94>)
 800089a:	f001 fe0f 	bl	80024bc <HAL_TIM_ConfigClockSource>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008a4:	f7ff ff4e 	bl	8000744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	@ (80008cc <MX_TIM2_Init+0x94>)
 80008b6:	f002 f811 	bl	80028dc <HAL_TIMEx_MasterConfigSynchronization>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008c0:	f7ff ff40 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000088 	.word	0x20000088

080008d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008e0:	d115      	bne.n	800090e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <HAL_TIM_Base_MspInit+0x48>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000918 <HAL_TIM_Base_MspInit+0x48>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <HAL_TIM_Base_MspInit+0x48>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	201c      	movs	r0, #28
 8000904:	f000 fde7 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000908:	201c      	movs	r0, #28
 800090a:	f000 fe00 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000954 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000920:	f7ff ff78 	bl	8000814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000924:	480c      	ldr	r0, [pc, #48]	@ (8000958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000926:	490d      	ldr	r1, [pc, #52]	@ (800095c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000928:	4a0d      	ldr	r2, [pc, #52]	@ (8000960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800093c:	4c0a      	ldr	r4, [pc, #40]	@ (8000968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094a:	f002 f851 	bl	80029f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094e:	f7ff fe81 	bl	8000654 <main>
  bx  lr    
 8000952:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000960:	08002a7c 	.word	0x08002a7c
  ldr r2, =_sbss
 8000964:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000968:	20000110 	.word	0x20000110

0800096c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC_IRQHandler>

0800096e <HAL_TIM_PeriodElapsedCallback>:

typedef enum {TIME_WATCH, STOP_WATCH} watch_state_t;

uint32_t tick_count;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800097e:	d105      	bne.n	800098c <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		FND_DispDataCallBack();
 8000980:	f000 fa5e 	bl	8000e40 <FND_DispDataCallBack>



	    TimeWatch_IncTimeCallBack();
 8000984:	f000 f9b6 	bl	8000cf4 <TimeWatch_IncTimeCallBack>
	    StopWatch_IncTimeCallBack();
 8000988:	f000 f86a 	bl	8000a60 <StopWatch_IncTimeCallBack>
	}
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <ap_main>:


int ap_main()
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim2);
 800099a:	4813      	ldr	r0, [pc, #76]	@ (80009e8 <ap_main+0x54>)
 800099c:	f001 fc3c 	bl	8002218 <HAL_TIM_Base_Start_IT>
    watch_state_t modstate = STOP_WATCH;
 80009a0:	2301      	movs	r3, #1
 80009a2:	71fb      	strb	r3, [r7, #7]

    while(1)
    {

        switch (modstate)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <ap_main+0x1c>
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d00b      	beq.n	80009c6 <ap_main+0x32>
 80009ae:	e7f9      	b.n	80009a4 <ap_main+0x10>
        {
        case TIME_WATCH:
            if(Button_GetState(&hBtnMode) == ACT_RELEASED){
 80009b0:	480e      	ldr	r0, [pc, #56]	@ (80009ec <ap_main+0x58>)
 80009b2:	f000 fbed 	bl	8001190 <Button_GetState>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d101      	bne.n	80009c0 <ap_main+0x2c>
                modstate = STOP_WATCH;
 80009bc:	2301      	movs	r3, #1
 80009be:	71fb      	strb	r3, [r7, #7]

            }
            Timewatch_excute();   // 함수 이름 정확히 맞추기
 80009c0:	f000 f9da 	bl	8000d78 <Timewatch_excute>
            break;
 80009c4:	e00e      	b.n	80009e4 <ap_main+0x50>

        case STOP_WATCH:
            if(Button_GetState(&hBtnMode) == ACT_RELEASED)
 80009c6:	4809      	ldr	r0, [pc, #36]	@ (80009ec <ap_main+0x58>)
 80009c8:	f000 fbe2 	bl	8001190 <Button_GetState>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d105      	bne.n	80009de <ap_main+0x4a>
            {
                modstate = TIME_WATCH;
 80009d2:	2300      	movs	r3, #0
 80009d4:	71fb      	strb	r3, [r7, #7]
                FND_WriteDp(0b1111, FND_DP_OFF);
 80009d6:	2100      	movs	r1, #0
 80009d8:	200f      	movs	r0, #15
 80009da:	f000 fa09 	bl	8000df0 <FND_WriteDp>
            }
            Stopwatch_excute();  // 함수 이름 정확히 맞추기
 80009de:	f000 f825 	bl	8000a2c <Stopwatch_excute>
            break;
 80009e2:	bf00      	nop
        switch (modstate)
 80009e4:	e7de      	b.n	80009a4 <ap_main+0x10>
 80009e6:	bf00      	nop
 80009e8:	20000088 	.word	0x20000088
 80009ec:	200000e8 	.word	0x200000e8

080009f0 <ap_init>:
    return 0;
}


void ap_init()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	Button_Init(&hBtnMode, GPIOB, GPIO_PIN_3);
 80009f4:	2208      	movs	r2, #8
 80009f6:	4908      	ldr	r1, [pc, #32]	@ (8000a18 <ap_init+0x28>)
 80009f8:	4808      	ldr	r0, [pc, #32]	@ (8000a1c <ap_init+0x2c>)
 80009fa:	f000 fbb3 	bl	8001164 <Button_Init>
	Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_5);
 80009fe:	2220      	movs	r2, #32
 8000a00:	4905      	ldr	r1, [pc, #20]	@ (8000a18 <ap_init+0x28>)
 8000a02:	4807      	ldr	r0, [pc, #28]	@ (8000a20 <ap_init+0x30>)
 8000a04:	f000 fbae 	bl	8001164 <Button_Init>
	Button_Init(&hBtnClear, GPIOA, GPIO_PIN_10);
 8000a08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a0c:	4905      	ldr	r1, [pc, #20]	@ (8000a24 <ap_init+0x34>)
 8000a0e:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <ap_init+0x38>)
 8000a10:	f000 fba8 	bl	8001164 <Button_Init>
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40020400 	.word	0x40020400
 8000a1c:	200000e8 	.word	0x200000e8
 8000a20:	200000dc 	.word	0x200000dc
 8000a24:	40020000 	.word	0x40020000
 8000a28:	200000d0 	.word	0x200000d0

08000a2c <Stopwatch_excute>:
stopWatchState_t stopWatchState = STOP;



void  Stopwatch_excute()
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	switch (stopWatchState)
 8000a30:	4b0a      	ldr	r3, [pc, #40]	@ (8000a5c <Stopwatch_excute+0x30>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d00c      	beq.n	8000a52 <Stopwatch_excute+0x26>
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	dc0d      	bgt.n	8000a58 <Stopwatch_excute+0x2c>
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <Stopwatch_excute+0x1a>
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d003      	beq.n	8000a4c <Stopwatch_excute+0x20>
		break;
	case CLEAR:
		StopWatch_Clear();
		break;
	}
}
 8000a44:	e008      	b.n	8000a58 <Stopwatch_excute+0x2c>
		StopWatch_Stop();
 8000a46:	f000 f859 	bl	8000afc <StopWatch_Stop>
		break;
 8000a4a:	e005      	b.n	8000a58 <Stopwatch_excute+0x2c>
		StopWatch_Run();
 8000a4c:	f000 f8a6 	bl	8000b9c <StopWatch_Run>
		break;
 8000a50:	e002      	b.n	8000a58 <Stopwatch_excute+0x2c>
		StopWatch_Clear();
 8000a52:	f000 f90b 	bl	8000c6c <StopWatch_Clear>
		break;
 8000a56:	bf00      	nop
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200000fa 	.word	0x200000fa

08000a60 <StopWatch_IncTimeCallBack>:



void StopWatch_IncTimeCallBack()
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	if(stopWatchState == RUN){
 8000a64:	4b03      	ldr	r3, [pc, #12]	@ (8000a74 <StopWatch_IncTimeCallBack+0x14>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d101      	bne.n	8000a70 <StopWatch_IncTimeCallBack+0x10>
		StopWatch_IncTime();
 8000a6c:	f000 f804 	bl	8000a78 <StopWatch_IncTime>

	}
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200000fa 	.word	0x200000fa

08000a78 <StopWatch_IncTime>:

void StopWatch_IncTime()
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

	if(stopWatch.msec < 1000 - 1) {
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d806      	bhi.n	8000a96 <StopWatch_IncTime+0x1e>
		stopWatch.msec ++;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000a92:	801a      	strh	r2, [r3, #0]
		return;
 8000a94:	e02c      	b.n	8000af0 <StopWatch_IncTime+0x78>
	}
	stopWatch.msec = 0;
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	801a      	strh	r2, [r3, #0]

	if (stopWatch.sec < 60 -1)
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000a9e:	789b      	ldrb	r3, [r3, #2]
 8000aa0:	2b3a      	cmp	r3, #58	@ 0x3a
 8000aa2:	d806      	bhi.n	8000ab2 <StopWatch_IncTime+0x3a>
	{
		stopWatch.sec++;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000aa6:	789b      	ldrb	r3, [r3, #2]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000aae:	709a      	strb	r2, [r3, #2]
		return;
 8000ab0:	e01e      	b.n	8000af0 <StopWatch_IncTime+0x78>
	}
	stopWatch.sec = 0;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	709a      	strb	r2, [r3, #2]

	if (stopWatch.min < 60 - 1) {
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000aba:	78db      	ldrb	r3, [r3, #3]
 8000abc:	2b3a      	cmp	r3, #58	@ 0x3a
 8000abe:	d806      	bhi.n	8000ace <StopWatch_IncTime+0x56>
		stopWatch.min++;
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000ac2:	78db      	ldrb	r3, [r3, #3]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000aca:	70da      	strb	r2, [r3, #3]
		return;
 8000acc:	e010      	b.n	8000af0 <StopWatch_IncTime+0x78>
	}
	stopWatch.min = 0;
 8000ace:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	70da      	strb	r2, [r3, #3]


	if (stopWatch.hour < 24 - 1) {
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000ad6:	791b      	ldrb	r3, [r3, #4]
 8000ad8:	2b16      	cmp	r3, #22
 8000ada:	d806      	bhi.n	8000aea <StopWatch_IncTime+0x72>
		stopWatch.hour++;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000ade:	791b      	ldrb	r3, [r3, #4]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000ae6:	711a      	strb	r2, [r3, #4]
		return;
 8000ae8:	e002      	b.n	8000af0 <StopWatch_IncTime+0x78>
	}
	stopWatch.hour = 0;
 8000aea:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <StopWatch_IncTime+0x80>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	711a      	strb	r2, [r3, #4]

}
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	200000f4 	.word	0x200000f4

08000afc <StopWatch_Stop>:

void StopWatch_Stop()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	 FND_WriteDp(0b0110, FND_DP_OFF);
 8000b00:	2100      	movs	r1, #0
 8000b02:	2006      	movs	r0, #6
 8000b04:	f000 f974 	bl	8000df0 <FND_WriteDp>
	if(Button_GetState(&hBtnRunStop) == ACT_PUSHED){
 8000b08:	481e      	ldr	r0, [pc, #120]	@ (8000b84 <StopWatch_Stop+0x88>)
 8000b0a:	f000 fb41 	bl	8001190 <Button_GetState>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d103      	bne.n	8000b1c <StopWatch_Stop+0x20>
		stopWatchState = RUN;
 8000b14:	4b1c      	ldr	r3, [pc, #112]	@ (8000b88 <StopWatch_Stop+0x8c>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	e008      	b.n	8000b2e <StopWatch_Stop+0x32>
	}
	else if(Button_GetState(&hBtnClear) == ACT_PUSHED){
 8000b1c:	481b      	ldr	r0, [pc, #108]	@ (8000b8c <StopWatch_Stop+0x90>)
 8000b1e:	f000 fb37 	bl	8001190 <Button_GetState>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d102      	bne.n	8000b2e <StopWatch_Stop+0x32>
		stopWatchState = CLEAR;
 8000b28:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <StopWatch_Stop+0x8c>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	701a      	strb	r2, [r3, #0]
	}
	FND_writeData((stopWatch.min % 10 * 1000) + (stopWatch.sec *10) + (stopWatch.msec/100));
 8000b2e:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <StopWatch_Stop+0x94>)
 8000b30:	78da      	ldrb	r2, [r3, #3]
 8000b32:	4b18      	ldr	r3, [pc, #96]	@ (8000b94 <StopWatch_Stop+0x98>)
 8000b34:	fba3 1302 	umull	r1, r3, r3, r2
 8000b38:	08d9      	lsrs	r1, r3, #3
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	440b      	add	r3, r1
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	461a      	mov	r2, r3
 8000b48:	0152      	lsls	r2, r2, #5
 8000b4a:	1ad2      	subs	r2, r2, r3
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <StopWatch_Stop+0x94>)
 8000b56:	789b      	ldrb	r3, [r3, #2]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	0089      	lsls	r1, r1, #2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	4413      	add	r3, r2
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <StopWatch_Stop+0x94>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	490b      	ldr	r1, [pc, #44]	@ (8000b98 <StopWatch_Stop+0x9c>)
 8000b6c:	fba1 1303 	umull	r1, r3, r1, r3
 8000b70:	095b      	lsrs	r3, r3, #5
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	4413      	add	r3, r2
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f929 	bl	8000dd0 <FND_writeData>

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000dc 	.word	0x200000dc
 8000b88:	200000fa 	.word	0x200000fa
 8000b8c:	200000d0 	.word	0x200000d0
 8000b90:	200000f4 	.word	0x200000f4
 8000b94:	cccccccd 	.word	0xcccccccd
 8000b98:	51eb851f 	.word	0x51eb851f

08000b9c <StopWatch_Run>:

void StopWatch_Run()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	if(Button_GetState(&hBtnRunStop) == ACT_PUSHED){
 8000ba0:	482d      	ldr	r0, [pc, #180]	@ (8000c58 <StopWatch_Run+0xbc>)
 8000ba2:	f000 faf5 	bl	8001190 <Button_GetState>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d102      	bne.n	8000bb2 <StopWatch_Run+0x16>
		stopWatchState = STOP;
 8000bac:	4b2b      	ldr	r3, [pc, #172]	@ (8000c5c <StopWatch_Run+0xc0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
	}

	 FND_WriteDp(0b0110, FND_DP_OFF);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2006      	movs	r0, #6
 8000bb6:	f000 f91b 	bl	8000df0 <FND_WriteDp>
	FND_writeData((stopWatch.min % 10 * 1000) + (stopWatch.sec *10) + (stopWatch.msec/100));
 8000bba:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <StopWatch_Run+0xc4>)
 8000bbc:	78da      	ldrb	r2, [r3, #3]
 8000bbe:	4b29      	ldr	r3, [pc, #164]	@ (8000c64 <StopWatch_Run+0xc8>)
 8000bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8000bc4:	08d9      	lsrs	r1, r3, #3
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	440b      	add	r3, r1
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	0152      	lsls	r2, r2, #5
 8000bd6:	1ad2      	subs	r2, r2, r3
 8000bd8:	0092      	lsls	r2, r2, #2
 8000bda:	4413      	add	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <StopWatch_Run+0xc4>)
 8000be2:	789b      	ldrb	r3, [r3, #2]
 8000be4:	4619      	mov	r1, r3
 8000be6:	0089      	lsls	r1, r1, #2
 8000be8:	440b      	add	r3, r1
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	4413      	add	r3, r2
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <StopWatch_Run+0xc4>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	491c      	ldr	r1, [pc, #112]	@ (8000c68 <StopWatch_Run+0xcc>)
 8000bf8:	fba1 1303 	umull	r1, r3, r1, r3
 8000bfc:	095b      	lsrs	r3, r3, #5
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 f8e3 	bl	8000dd0 <FND_writeData>
	if(stopWatch.msec%100 <50)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <StopWatch_Run+0xc4>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	4a16      	ldr	r2, [pc, #88]	@ (8000c68 <StopWatch_Run+0xcc>)
 8000c10:	fba2 1203 	umull	r1, r2, r2, r3
 8000c14:	0952      	lsrs	r2, r2, #5
 8000c16:	2164      	movs	r1, #100	@ 0x64
 8000c18:	fb01 f202 	mul.w	r2, r1, r2
 8000c1c:	1a9b      	subs	r3, r3, r2
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	2b31      	cmp	r3, #49	@ 0x31
 8000c22:	d804      	bhi.n	8000c2e <StopWatch_Run+0x92>
	{
		FND_WriteDp(FND_DP_10, FND_DP_ON);
 8000c24:	2101      	movs	r1, #1
 8000c26:	2002      	movs	r0, #2
 8000c28:	f000 f8e2 	bl	8000df0 <FND_WriteDp>
 8000c2c:	e003      	b.n	8000c36 <StopWatch_Run+0x9a>
	}
	else {
		FND_WriteDp(FND_DP_10, FND_DP_OFF);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2002      	movs	r0, #2
 8000c32:	f000 f8dd 	bl	8000df0 <FND_WriteDp>
	}

	if(stopWatch.msec <500)
 8000c36:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <StopWatch_Run+0xc4>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c3e:	d204      	bcs.n	8000c4a <StopWatch_Run+0xae>
	{
		FND_WriteDp(FND_DP_1000, FND_DP_ON);
 8000c40:	2101      	movs	r1, #1
 8000c42:	2008      	movs	r0, #8
 8000c44:	f000 f8d4 	bl	8000df0 <FND_WriteDp>
	}
	else {
		FND_WriteDp(FND_DP_1000, FND_DP_OFF);
	}

}
 8000c48:	e003      	b.n	8000c52 <StopWatch_Run+0xb6>
		FND_WriteDp(FND_DP_1000, FND_DP_OFF);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2008      	movs	r0, #8
 8000c4e:	f000 f8cf 	bl	8000df0 <FND_WriteDp>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200000dc 	.word	0x200000dc
 8000c5c:	200000fa 	.word	0x200000fa
 8000c60:	200000f4 	.word	0x200000f4
 8000c64:	cccccccd 	.word	0xcccccccd
 8000c68:	51eb851f 	.word	0x51eb851f

08000c6c <StopWatch_Clear>:

void StopWatch_Clear()
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	stopWatchState = STOP;
 8000c70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <StopWatch_Clear+0x78>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
	stopWatch.msec = 0;
 8000c76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <StopWatch_Clear+0x7c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	801a      	strh	r2, [r3, #0]
	stopWatch.sec = 0;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <StopWatch_Clear+0x7c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	709a      	strb	r2, [r3, #2]
	stopWatch.min = 0;
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <StopWatch_Clear+0x7c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	70da      	strb	r2, [r3, #3]
	stopWatch.hour = 0;
 8000c88:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <StopWatch_Clear+0x7c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	711a      	strb	r2, [r3, #4]
	FND_writeData((stopWatch.min % 10 * 1000) + (stopWatch.sec *10) + (stopWatch.msec/100));
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <StopWatch_Clear+0x7c>)
 8000c90:	78da      	ldrb	r2, [r3, #3]
 8000c92:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <StopWatch_Clear+0x80>)
 8000c94:	fba3 1302 	umull	r1, r3, r3, r2
 8000c98:	08d9      	lsrs	r1, r3, #3
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	0152      	lsls	r2, r2, #5
 8000caa:	1ad2      	subs	r2, r2, r3
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <StopWatch_Clear+0x7c>)
 8000cb6:	789b      	ldrb	r3, [r3, #2]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	0089      	lsls	r1, r1, #2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	4413      	add	r3, r2
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <StopWatch_Clear+0x7c>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	4909      	ldr	r1, [pc, #36]	@ (8000cf0 <StopWatch_Clear+0x84>)
 8000ccc:	fba1 1303 	umull	r1, r3, r1, r3
 8000cd0:	095b      	lsrs	r3, r3, #5
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	4413      	add	r3, r2
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f879 	bl	8000dd0 <FND_writeData>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000fa 	.word	0x200000fa
 8000ce8:	200000f4 	.word	0x200000f4
 8000cec:	cccccccd 	.word	0xcccccccd
 8000cf0:	51eb851f 	.word	0x51eb851f

08000cf4 <TimeWatch_IncTimeCallBack>:


timeWatch_t timeWatch = {0};

void TimeWatch_IncTimeCallBack()
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

	if(timeWatch.msec < 1000 - 1) {
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d806      	bhi.n	8000d12 <TimeWatch_IncTimeCallBack+0x1e>
		timeWatch.msec ++;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000d0e:	801a      	strh	r2, [r3, #0]
		return;
 8000d10:	e02c      	b.n	8000d6c <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.msec = 0;
 8000d12:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	801a      	strh	r2, [r3, #0]

	if (timeWatch.sec < 60 -1)
 8000d18:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000d1a:	789b      	ldrb	r3, [r3, #2]
 8000d1c:	2b3a      	cmp	r3, #58	@ 0x3a
 8000d1e:	d806      	bhi.n	8000d2e <TimeWatch_IncTimeCallBack+0x3a>
	{
		timeWatch.sec++;
 8000d20:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000d22:	789b      	ldrb	r3, [r3, #2]
 8000d24:	3301      	adds	r3, #1
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000d2a:	709a      	strb	r2, [r3, #2]
		return;
 8000d2c:	e01e      	b.n	8000d6c <TimeWatch_IncTimeCallBack+0x78>
	}
timeWatch.sec = 0;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	709a      	strb	r2, [r3, #2]

	if (timeWatch.min < 60 - 1) {
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000d36:	78db      	ldrb	r3, [r3, #3]
 8000d38:	2b3a      	cmp	r3, #58	@ 0x3a
 8000d3a:	d806      	bhi.n	8000d4a <TimeWatch_IncTimeCallBack+0x56>
		timeWatch.min++;
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000d3e:	78db      	ldrb	r3, [r3, #3]
 8000d40:	3301      	adds	r3, #1
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000d46:	70da      	strb	r2, [r3, #3]
		return;
 8000d48:	e010      	b.n	8000d6c <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.min = 0;
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	70da      	strb	r2, [r3, #3]


	if (timeWatch.hour < 24 - 1) {
 8000d50:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000d52:	791b      	ldrb	r3, [r3, #4]
 8000d54:	2b16      	cmp	r3, #22
 8000d56:	d806      	bhi.n	8000d66 <TimeWatch_IncTimeCallBack+0x72>
		timeWatch.hour++;
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000d5a:	791b      	ldrb	r3, [r3, #4]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000d62:	711a      	strb	r2, [r3, #4]
		return;
 8000d64:	e002      	b.n	8000d6c <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.hour = 0;
 8000d66:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <TimeWatch_IncTimeCallBack+0x80>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	711a      	strb	r2, [r3, #4]

};
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	200000fc 	.word	0x200000fc

08000d78 <Timewatch_excute>:


void Timewatch_excute()
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	FND_WriteDp(0b1011, FND_DP_OFF);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	200b      	movs	r0, #11
 8000d80:	f000 f836 	bl	8000df0 <FND_WriteDp>
	FND_writeData(timeWatch.hour*100 + timeWatch.min);
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <Timewatch_excute+0x54>)
 8000d86:	791b      	ldrb	r3, [r3, #4]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	461a      	mov	r2, r3
 8000d90:	0091      	lsls	r1, r2, #2
 8000d92:	461a      	mov	r2, r3
 8000d94:	460b      	mov	r3, r1
 8000d96:	4413      	add	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dcc <Timewatch_excute+0x54>)
 8000d9e:	78d2      	ldrb	r2, [r2, #3]
 8000da0:	4413      	add	r3, r2
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f813 	bl	8000dd0 <FND_writeData>
	if (timeWatch.msec < 500)
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <Timewatch_excute+0x54>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000db2:	d204      	bcs.n	8000dbe <Timewatch_excute+0x46>
	{
		FND_WriteDp(FND_DP_100, FND_DP_ON);
 8000db4:	2101      	movs	r1, #1
 8000db6:	2004      	movs	r0, #4
 8000db8:	f000 f81a 	bl	8000df0 <FND_WriteDp>
	}
	else
	{
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
	}
}
 8000dbc:	e003      	b.n	8000dc6 <Timewatch_excute+0x4e>
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2004      	movs	r0, #4
 8000dc2:	f000 f815 	bl	8000df0 <FND_WriteDp>
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000fc 	.word	0x200000fc

08000dd0 <FND_writeData>:
uint16_t fndDispNum = 0; //fnd Display Num 전역변수에 스태틱을 붙이면 외부에서 접근못함
static uint8_t fndDispDp = 0;

//write fndDispNum
void FND_writeData(uint16_t data)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 8000dda:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <FND_writeData+0x1c>)
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	8013      	strh	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	20000102 	.word	0x20000102

08000df0 <FND_WriteDp>:
}
//display fnd DispNum


void FND_WriteDp(uint8_t dpData, uint8_t dpState)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	460a      	mov	r2, r1
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	71bb      	strb	r3, [r7, #6]
	if(dpState == FND_DP_ON)
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d107      	bne.n	8000e16 <FND_WriteDp+0x26>
	    fndDispDp |= dpData;
 8000e06:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <FND_WriteDp+0x4c>)
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <FND_WriteDp+0x4c>)
 8000e12:	701a      	strb	r2, [r3, #0]
	else
		fndDispDp &= ~dpData;
}
 8000e14:	e00b      	b.n	8000e2e <FND_WriteDp+0x3e>
		fndDispDp &= ~dpData;
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	b25a      	sxtb	r2, r3
 8000e1e:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <FND_WriteDp+0x4c>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	4013      	ands	r3, r2
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <FND_WriteDp+0x4c>)
 8000e2c:	701a      	strb	r2, [r3, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000104 	.word	0x20000104

08000e40 <FND_DispDataCallBack>:
{GPIOB,GPIO_PIN_13},
{GPIOC,GPIO_PIN_4}
};

void FND_DispDataCallBack()
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	static int digitPos = 0;


	digitPos = (digitPos + 1) % 8;
 8000e44:	4b80      	ldr	r3, [pc, #512]	@ (8001048 <FND_DispDataCallBack+0x208>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	425a      	negs	r2, r3
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	f002 0207 	and.w	r2, r2, #7
 8000e54:	bf58      	it	pl
 8000e56:	4253      	negpl	r3, r2
 8000e58:	4a7b      	ldr	r2, [pc, #492]	@ (8001048 <FND_DispDataCallBack+0x208>)
 8000e5a:	6013      	str	r3, [r2, #0]
	switch(digitPos)
 8000e5c:	4b7a      	ldr	r3, [pc, #488]	@ (8001048 <FND_DispDataCallBack+0x208>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b07      	cmp	r3, #7
 8000e62:	f200 80ee 	bhi.w	8001042 <FND_DispDataCallBack+0x202>
 8000e66:	a201      	add	r2, pc, #4	@ (adr r2, 8000e6c <FND_DispDataCallBack+0x2c>)
 8000e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6c:	08000e8d 	.word	0x08000e8d
 8000e70:	08000ebb 	.word	0x08000ebb
 8000e74:	08000ef3 	.word	0x08000ef3
 8000e78:	08000f2b 	.word	0x08000f2b
 8000e7c:	08000f63 	.word	0x08000f63
 8000e80:	08000f9b 	.word	0x08000f9b
 8000e84:	08000fd3 	.word	0x08000fd3
 8000e88:	0800100b 	.word	0x0800100b
	{
	case DIGIT_1:
		FND_DispOffAll();
 8000e8c:	f000 f900 	bl	8001090 <FND_DispOffAll>
		FND_DispDigit(fndDispNum%10);
 8000e90:	4b6e      	ldr	r3, [pc, #440]	@ (800104c <FND_DispDataCallBack+0x20c>)
 8000e92:	881a      	ldrh	r2, [r3, #0]
 8000e94:	4b6e      	ldr	r3, [pc, #440]	@ (8001050 <FND_DispDataCallBack+0x210>)
 8000e96:	fba3 1302 	umull	r1, r3, r3, r2
 8000e9a:	08d9      	lsrs	r1, r3, #3
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f913 	bl	80010d4 <FND_DispDigit>
		FND_DispOn(digitPos);
 8000eae:	4b66      	ldr	r3, [pc, #408]	@ (8001048 <FND_DispDataCallBack+0x208>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f8d4 	bl	8001060 <FND_DispOn>
	break;
 8000eb8:	e0c3      	b.n	8001042 <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		FND_DispOffAll();
 8000eba:	f000 f8e9 	bl	8001090 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/10 % 10);
 8000ebe:	4b63      	ldr	r3, [pc, #396]	@ (800104c <FND_DispDataCallBack+0x20c>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	4a63      	ldr	r2, [pc, #396]	@ (8001050 <FND_DispDataCallBack+0x210>)
 8000ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	4b60      	ldr	r3, [pc, #384]	@ (8001050 <FND_DispDataCallBack+0x210>)
 8000ece:	fba3 1302 	umull	r1, r3, r3, r2
 8000ed2:	08d9      	lsrs	r1, r3, #3
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f8f7 	bl	80010d4 <FND_DispDigit>
		FND_DispOn(digitPos);
 8000ee6:	4b58      	ldr	r3, [pc, #352]	@ (8001048 <FND_DispDataCallBack+0x208>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f8b8 	bl	8001060 <FND_DispOn>
	break;
 8000ef0:	e0a7      	b.n	8001042 <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		FND_DispOffAll();
 8000ef2:	f000 f8cd 	bl	8001090 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/100%10);
 8000ef6:	4b55      	ldr	r3, [pc, #340]	@ (800104c <FND_DispDataCallBack+0x20c>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	4a56      	ldr	r2, [pc, #344]	@ (8001054 <FND_DispDataCallBack+0x214>)
 8000efc:	fba2 2303 	umull	r2, r3, r2, r3
 8000f00:	095b      	lsrs	r3, r3, #5
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b52      	ldr	r3, [pc, #328]	@ (8001050 <FND_DispDataCallBack+0x210>)
 8000f06:	fba3 1302 	umull	r1, r3, r3, r2
 8000f0a:	08d9      	lsrs	r1, r3, #3
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f8db 	bl	80010d4 <FND_DispDigit>
		FND_DispOn(digitPos);
 8000f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001048 <FND_DispDataCallBack+0x208>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f89c 	bl	8001060 <FND_DispOn>
	break;
 8000f28:	e08b      	b.n	8001042 <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		FND_DispOffAll();
 8000f2a:	f000 f8b1 	bl	8001090 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/1000%10);
 8000f2e:	4b47      	ldr	r3, [pc, #284]	@ (800104c <FND_DispDataCallBack+0x20c>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	4a49      	ldr	r2, [pc, #292]	@ (8001058 <FND_DispDataCallBack+0x218>)
 8000f34:	fba2 2303 	umull	r2, r3, r2, r3
 8000f38:	099b      	lsrs	r3, r3, #6
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b44      	ldr	r3, [pc, #272]	@ (8001050 <FND_DispDataCallBack+0x210>)
 8000f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8000f42:	08d9      	lsrs	r1, r3, #3
 8000f44:	460b      	mov	r3, r1
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f8bf 	bl	80010d4 <FND_DispDigit>
		FND_DispOn(digitPos);
 8000f56:	4b3c      	ldr	r3, [pc, #240]	@ (8001048 <FND_DispDataCallBack+0x208>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f880 	bl	8001060 <FND_DispOn>
	break;
 8000f60:	e06f      	b.n	8001042 <FND_DispDataCallBack+0x202>
	case DIGIT_1_DP:
		FND_DispOffAll();
 8000f62:	f000 f895 	bl	8001090 <FND_DispOffAll>
		if(fndDispDp & (1<<0)){
 8000f66:	4b3d      	ldr	r3, [pc, #244]	@ (800105c <FND_DispDataCallBack+0x21c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <FND_DispDataCallBack+0x13a>
		FND_DispDigit(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f000 f8ae 	bl	80010d4 <FND_DispDigit>
 8000f78:	e002      	b.n	8000f80 <FND_DispDataCallBack+0x140>
		}
		else {
			FND_DispDigit(11);
 8000f7a:	200b      	movs	r0, #11
 8000f7c:	f000 f8aa 	bl	80010d4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8000f80:	4b31      	ldr	r3, [pc, #196]	@ (8001048 <FND_DispDataCallBack+0x208>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	425a      	negs	r2, r3
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	f002 0203 	and.w	r2, r2, #3
 8000f8e:	bf58      	it	pl
 8000f90:	4253      	negpl	r3, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f864 	bl	8001060 <FND_DispOn>
	break;
 8000f98:	e053      	b.n	8001042 <FND_DispDataCallBack+0x202>
	case DIGIT_10_DP:
		FND_DispOffAll();
 8000f9a:	f000 f879 	bl	8001090 <FND_DispOffAll>
		if(fndDispDp & (1<<1)){
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800105c <FND_DispDataCallBack+0x21c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <FND_DispDataCallBack+0x172>
		FND_DispDigit(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f000 f892 	bl	80010d4 <FND_DispDigit>
 8000fb0:	e002      	b.n	8000fb8 <FND_DispDataCallBack+0x178>
		}
		else {
			FND_DispDigit(11);
 8000fb2:	200b      	movs	r0, #11
 8000fb4:	f000 f88e 	bl	80010d4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8000fb8:	4b23      	ldr	r3, [pc, #140]	@ (8001048 <FND_DispDataCallBack+0x208>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	425a      	negs	r2, r3
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	f002 0203 	and.w	r2, r2, #3
 8000fc6:	bf58      	it	pl
 8000fc8:	4253      	negpl	r3, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f848 	bl	8001060 <FND_DispOn>
	break;
 8000fd0:	e037      	b.n	8001042 <FND_DispDataCallBack+0x202>
	case DIGIT_100_DP:
		FND_DispOffAll();
 8000fd2:	f000 f85d 	bl	8001090 <FND_DispOffAll>
		if(fndDispDp & (1<<2)){
 8000fd6:	4b21      	ldr	r3, [pc, #132]	@ (800105c <FND_DispDataCallBack+0x21c>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <FND_DispDataCallBack+0x1aa>
		FND_DispDigit(10);
 8000fe2:	200a      	movs	r0, #10
 8000fe4:	f000 f876 	bl	80010d4 <FND_DispDigit>
 8000fe8:	e002      	b.n	8000ff0 <FND_DispDataCallBack+0x1b0>
		}
		else {
			FND_DispDigit(11);
 8000fea:	200b      	movs	r0, #11
 8000fec:	f000 f872 	bl	80010d4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8000ff0:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <FND_DispDataCallBack+0x208>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	425a      	negs	r2, r3
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	f002 0203 	and.w	r2, r2, #3
 8000ffe:	bf58      	it	pl
 8001000:	4253      	negpl	r3, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f82c 	bl	8001060 <FND_DispOn>
	break;
 8001008:	e01b      	b.n	8001042 <FND_DispDataCallBack+0x202>
	case DIGIT_1000_DP:
		FND_DispOffAll();
 800100a:	f000 f841 	bl	8001090 <FND_DispOffAll>
		if(fndDispDp & (1<<3)){
 800100e:	4b13      	ldr	r3, [pc, #76]	@ (800105c <FND_DispDataCallBack+0x21c>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <FND_DispDataCallBack+0x1e2>
		FND_DispDigit(10);
 800101a:	200a      	movs	r0, #10
 800101c:	f000 f85a 	bl	80010d4 <FND_DispDigit>
 8001020:	e002      	b.n	8001028 <FND_DispDataCallBack+0x1e8>
		}
		else {
			FND_DispDigit(11);
 8001022:	200b      	movs	r0, #11
 8001024:	f000 f856 	bl	80010d4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001028:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <FND_DispDataCallBack+0x208>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	425a      	negs	r2, r3
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	f002 0203 	and.w	r2, r2, #3
 8001036:	bf58      	it	pl
 8001038:	4253      	negpl	r3, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f810 	bl	8001060 <FND_DispOn>
	break;
 8001040:	bf00      	nop
	}
	//인터럽트가 발생하면 한 자리씩 출력한다.

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000108 	.word	0x20000108
 800104c:	20000102 	.word	0x20000102
 8001050:	cccccccd 	.word	0xcccccccd
 8001054:	51eb851f 	.word	0x51eb851f
 8001058:	10624dd3 	.word	0x10624dd3
 800105c:	20000104 	.word	0x20000104

08001060 <FND_DispOn>:
{
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
}

void FND_DispOn(int fndPos)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8001068:	4a08      	ldr	r2, [pc, #32]	@ (800108c <FND_DispOn+0x2c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001070:	4a06      	ldr	r2, [pc, #24]	@ (800108c <FND_DispOn+0x2c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	b29b      	uxth	r3, r3
 800107c:	2200      	movs	r2, #0
 800107e:	4619      	mov	r1, r3
 8001080:	f000 fbfc 	bl	800187c <HAL_GPIO_WritePin>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000004 	.word	0x20000004

08001090 <FND_DispOffAll>:


void FND_DispOffAll()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	for(int i = 0; i<4; i++)
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	e010      	b.n	80010be <FND_DispOffAll+0x2e>
	{
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 800109c:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <FND_DispOffAll+0x40>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80010a4:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <FND_DispOffAll+0x40>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	2201      	movs	r2, #1
 80010b2:	4619      	mov	r1, r3
 80010b4:	f000 fbe2 	bl	800187c <HAL_GPIO_WritePin>
	for(int i = 0; i<4; i++)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3301      	adds	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	ddeb      	ble.n	800109c <FND_DispOffAll+0xc>
	}

}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000004 	.word	0x20000004

080010d4 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	80fb      	strh	r3, [r7, #6]
	 const uint8_t segFont[12] = {
 80010de:	4a1f      	ldr	r2, [pc, #124]	@ (800115c <FND_DispDigit+0x88>)
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	         0x6F,
	         0x80,
	         0x00
	   };

	for(int i =0; i<8; i++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	e02c      	b.n	800114a <FND_DispDigit+0x76>
	{
		if(!(segFont[digit] &(1<<i))){
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	3318      	adds	r3, #24
 80010f4:	443b      	add	r3, r7
 80010f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010fa:	461a      	mov	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa42 f303 	asr.w	r3, r2, r3
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10e      	bne.n	8001128 <FND_DispDigit+0x54>
		HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 800110a:	4a15      	ldr	r2, [pc, #84]	@ (8001160 <FND_DispDigit+0x8c>)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001112:	4a13      	ldr	r2, [pc, #76]	@ (8001160 <FND_DispDigit+0x8c>)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	4413      	add	r3, r2
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	b29b      	uxth	r3, r3
 800111e:	2200      	movs	r2, #0
 8001120:	4619      	mov	r1, r3
 8001122:	f000 fbab 	bl	800187c <HAL_GPIO_WritePin>
 8001126:	e00d      	b.n	8001144 <FND_DispDigit+0x70>
		}
	 else {
		 HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 8001128:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <FND_DispDigit+0x8c>)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001130:	4a0b      	ldr	r2, [pc, #44]	@ (8001160 <FND_DispDigit+0x8c>)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	4413      	add	r3, r2
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	b29b      	uxth	r3, r3
 800113c:	2201      	movs	r2, #1
 800113e:	4619      	mov	r1, r3
 8001140:	f000 fb9c 	bl	800187c <HAL_GPIO_WritePin>
	for(int i =0; i<8; i++)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2b07      	cmp	r3, #7
 800114e:	ddcf      	ble.n	80010f0 <FND_DispDigit+0x1c>
	   }
	}

}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	08002a50 	.word	0x08002a50
 8001160:	20000024 	.word	0x20000024

08001164 <Button_Init>:

enum {PUSHED=0, RELEASED};


void Button_Init(Button_Handler_t *hbtn,GPIO_TypeDef *GPIOx, uint16_t pinNum )
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	4613      	mov	r3, r2
 8001170:	80fb      	strh	r3, [r7, #6]
    hbtn->GPIOx = GPIOx;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	601a      	str	r2, [r3, #0]
    hbtn->pinNum = pinNum;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	88fa      	ldrh	r2, [r7, #6]
 800117c:	809a      	strh	r2, [r3, #4]
    hbtn->prevState = RELEASED;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2201      	movs	r2, #1
 8001182:	609a      	str	r2, [r3, #8]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <Button_GetState>:


button_state_t Button_GetState(Button_Handler_t *hbtn){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

    uint32_t curState;
    curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); // normal state is 1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	889b      	ldrh	r3, [r3, #4]
 80011a0:	4619      	mov	r1, r3
 80011a2:	4610      	mov	r0, r2
 80011a4:	f000 fb52 	bl	800184c <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	60fb      	str	r3, [r7, #12]

    if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) // 버튼 눌렀을 때
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d10a      	bne.n	80011ca <Button_GetState+0x3a>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d107      	bne.n	80011ca <Button_GetState+0x3a>
    {
        HAL_Delay(2); // debounce
 80011ba:	2002      	movs	r0, #2
 80011bc:	f000 f88c 	bl	80012d8 <HAL_Delay>
        hbtn->prevState = PUSHED;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
        return ACT_PUSHED;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00f      	b.n	80011ea <Button_GetState+0x5a>
    }
    else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) // 버튼 땠을 때
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10a      	bne.n	80011e8 <Button_GetState+0x58>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d107      	bne.n	80011e8 <Button_GetState+0x58>
    {
    	HAL_Delay(2); // debounce
 80011d8:	2002      	movs	r0, #2
 80011da:	f000 f87d 	bl	80012d8 <HAL_Delay>
        hbtn->prevState = RELEASED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	609a      	str	r2, [r3, #8]
        return ACT_RELEASED;
 80011e4:	2302      	movs	r3, #2
 80011e6:	e000      	b.n	80011ea <Button_GetState+0x5a>
    }

    return NO_ACT;
 80011e8:	2300      	movs	r3, #0

}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001234 <HAL_Init+0x40>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <HAL_Init+0x40>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800120e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	@ (8001234 <HAL_Init+0x40>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800121a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f94f 	bl	80014c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	200f      	movs	r0, #15
 8001224:	f000 f808 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fa92 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023c00 	.word	0x40023c00

08001238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <HAL_InitTick+0x54>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <HAL_InitTick+0x58>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f967 	bl	800152a <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f000 f92f 	bl	80014d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	@ (8001294 <HAL_InitTick+0x5c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000000 	.word	0x20000000
 8001290:	20000068 	.word	0x20000068
 8001294:	20000064 	.word	0x20000064

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000068 	.word	0x20000068
 80012bc:	2000010c 	.word	0x2000010c

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	2000010c 	.word	0x2000010c

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <HAL_Delay+0x44>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000068 	.word	0x20000068

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4907      	ldr	r1, [pc, #28]	@ (80013bc <__NVIC_EnableIRQ+0x38>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	@ (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	@ (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	@ 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	@ 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800148c:	d301      	bcc.n	8001492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148e:	2301      	movs	r3, #1
 8001490:	e00f      	b.n	80014b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001492:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <SysTick_Config+0x40>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149a:	210f      	movs	r1, #15
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f7ff ff8e 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <SysTick_Config+0x40>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	4b04      	ldr	r3, [pc, #16]	@ (80014bc <SysTick_Config+0x40>)
 80014ac:	2207      	movs	r2, #7
 80014ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff29 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff3e 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff8e 	bl	8001414 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5d 	bl	80013c0 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff31 	bl	8001384 <__NVIC_EnableIRQ>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffa2 	bl	800147c <SysTick_Config>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	@ 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	e159      	b.n	8001814 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001560:	2201      	movs	r2, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	429a      	cmp	r2, r3
 800157a:	f040 8148 	bne.w	800180e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b01      	cmp	r3, #1
 8001588:	d005      	beq.n	8001596 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001592:	2b02      	cmp	r3, #2
 8001594:	d130      	bne.n	80015f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015cc:	2201      	movs	r2, #1
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	f003 0201 	and.w	r2, r3, #1
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b03      	cmp	r3, #3
 8001602:	d017      	beq.n	8001634 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d123      	bne.n	8001688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	08da      	lsrs	r2, r3, #3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3208      	adds	r2, #8
 8001648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	220f      	movs	r2, #15
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	08da      	lsrs	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3208      	adds	r2, #8
 8001682:	69b9      	ldr	r1, [r7, #24]
 8001684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0203 	and.w	r2, r3, #3
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80a2 	beq.w	800180e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b57      	ldr	r3, [pc, #348]	@ (800182c <HAL_GPIO_Init+0x2e8>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	4a56      	ldr	r2, [pc, #344]	@ (800182c <HAL_GPIO_Init+0x2e8>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016da:	4b54      	ldr	r3, [pc, #336]	@ (800182c <HAL_GPIO_Init+0x2e8>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016e6:	4a52      	ldr	r2, [pc, #328]	@ (8001830 <HAL_GPIO_Init+0x2ec>)
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	3302      	adds	r3, #2
 80016ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	220f      	movs	r2, #15
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a49      	ldr	r2, [pc, #292]	@ (8001834 <HAL_GPIO_Init+0x2f0>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <HAL_GPIO_Init+0x202>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a48      	ldr	r2, [pc, #288]	@ (8001838 <HAL_GPIO_Init+0x2f4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0x1fe>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a47      	ldr	r2, [pc, #284]	@ (800183c <HAL_GPIO_Init+0x2f8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00d      	beq.n	800173e <HAL_GPIO_Init+0x1fa>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a46      	ldr	r2, [pc, #280]	@ (8001840 <HAL_GPIO_Init+0x2fc>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x1f6>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a45      	ldr	r2, [pc, #276]	@ (8001844 <HAL_GPIO_Init+0x300>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_GPIO_Init+0x1f2>
 8001732:	2304      	movs	r3, #4
 8001734:	e008      	b.n	8001748 <HAL_GPIO_Init+0x204>
 8001736:	2307      	movs	r3, #7
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x204>
 800173a:	2303      	movs	r3, #3
 800173c:	e004      	b.n	8001748 <HAL_GPIO_Init+0x204>
 800173e:	2302      	movs	r3, #2
 8001740:	e002      	b.n	8001748 <HAL_GPIO_Init+0x204>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_GPIO_Init+0x204>
 8001746:	2300      	movs	r3, #0
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	f002 0203 	and.w	r2, r2, #3
 800174e:	0092      	lsls	r2, r2, #2
 8001750:	4093      	lsls	r3, r2
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001758:	4935      	ldr	r1, [pc, #212]	@ (8001830 <HAL_GPIO_Init+0x2ec>)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001766:	4b38      	ldr	r3, [pc, #224]	@ (8001848 <HAL_GPIO_Init+0x304>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178a:	4a2f      	ldr	r2, [pc, #188]	@ (8001848 <HAL_GPIO_Init+0x304>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001790:	4b2d      	ldr	r3, [pc, #180]	@ (8001848 <HAL_GPIO_Init+0x304>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b4:	4a24      	ldr	r2, [pc, #144]	@ (8001848 <HAL_GPIO_Init+0x304>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ba:	4b23      	ldr	r3, [pc, #140]	@ (8001848 <HAL_GPIO_Init+0x304>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017de:	4a1a      	ldr	r2, [pc, #104]	@ (8001848 <HAL_GPIO_Init+0x304>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e4:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <HAL_GPIO_Init+0x304>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001808:	4a0f      	ldr	r2, [pc, #60]	@ (8001848 <HAL_GPIO_Init+0x304>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3301      	adds	r3, #1
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	2b0f      	cmp	r3, #15
 8001818:	f67f aea2 	bls.w	8001560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3724      	adds	r7, #36	@ 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40013800 	.word	0x40013800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020400 	.word	0x40020400
 800183c:	40020800 	.word	0x40020800
 8001840:	40020c00 	.word	0x40020c00
 8001844:	40021000 	.word	0x40021000
 8001848:	40013c00 	.word	0x40013c00

0800184c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	887b      	ldrh	r3, [r7, #2]
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e001      	b.n	800186e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	807b      	strh	r3, [r7, #2]
 8001888:	4613      	mov	r3, r2
 800188a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800188c:	787b      	ldrb	r3, [r7, #1]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001898:	e003      	b.n	80018a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800189a:	887b      	ldrh	r3, [r7, #2]
 800189c:	041a      	lsls	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	619a      	str	r2, [r3, #24]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e267      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d075      	beq.n	80019ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018ce:	4b88      	ldr	r3, [pc, #544]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d00c      	beq.n	80018f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018da:	4b85      	ldr	r3, [pc, #532]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d112      	bne.n	800190c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e6:	4b82      	ldr	r3, [pc, #520]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018f2:	d10b      	bne.n	800190c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f4:	4b7e      	ldr	r3, [pc, #504]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d05b      	beq.n	80019b8 <HAL_RCC_OscConfig+0x108>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d157      	bne.n	80019b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e242      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001914:	d106      	bne.n	8001924 <HAL_RCC_OscConfig+0x74>
 8001916:	4b76      	ldr	r3, [pc, #472]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a75      	ldr	r2, [pc, #468]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 800191c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e01d      	b.n	8001960 <HAL_RCC_OscConfig+0xb0>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0x98>
 800192e:	4b70      	ldr	r3, [pc, #448]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a6f      	ldr	r2, [pc, #444]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 8001934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b6d      	ldr	r3, [pc, #436]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a6c      	ldr	r2, [pc, #432]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 8001940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e00b      	b.n	8001960 <HAL_RCC_OscConfig+0xb0>
 8001948:	4b69      	ldr	r3, [pc, #420]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a68      	ldr	r2, [pc, #416]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 800194e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b66      	ldr	r3, [pc, #408]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a65      	ldr	r2, [pc, #404]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 800195a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800195e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d013      	beq.n	8001990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fcaa 	bl	80012c0 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fca6 	bl	80012c0 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	@ 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e207      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b5b      	ldr	r3, [pc, #364]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0xc0>
 800198e:	e014      	b.n	80019ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fc96 	bl	80012c0 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fc92 	bl	80012c0 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	@ 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1f3      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	4b51      	ldr	r3, [pc, #324]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0xe8>
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d063      	beq.n	8001a8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019c6:	4b4a      	ldr	r3, [pc, #296]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00b      	beq.n	80019ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019d2:	4b47      	ldr	r3, [pc, #284]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d11c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019de:	4b44      	ldr	r3, [pc, #272]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d116      	bne.n	8001a18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ea:	4b41      	ldr	r3, [pc, #260]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_RCC_OscConfig+0x152>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e1c7      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a02:	4b3b      	ldr	r3, [pc, #236]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4937      	ldr	r1, [pc, #220]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a16:	e03a      	b.n	8001a8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d020      	beq.n	8001a62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a20:	4b34      	ldr	r3, [pc, #208]	@ (8001af4 <HAL_RCC_OscConfig+0x244>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7ff fc4b 	bl	80012c0 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2e:	f7ff fc47 	bl	80012c0 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e1a8      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	4b2b      	ldr	r3, [pc, #172]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4c:	4b28      	ldr	r3, [pc, #160]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4925      	ldr	r1, [pc, #148]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
 8001a60:	e015      	b.n	8001a8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a62:	4b24      	ldr	r3, [pc, #144]	@ (8001af4 <HAL_RCC_OscConfig+0x244>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff fc2a 	bl	80012c0 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a70:	f7ff fc26 	bl	80012c0 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e187      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d036      	beq.n	8001b08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d016      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <HAL_RCC_OscConfig+0x248>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fc0a 	bl	80012c0 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fc06 	bl	80012c0 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e167      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x200>
 8001ace:	e01b      	b.n	8001b08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad0:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_RCC_OscConfig+0x248>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fbf3 	bl	80012c0 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001adc:	e00e      	b.n	8001afc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ade:	f7ff fbef 	bl	80012c0 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d907      	bls.n	8001afc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e150      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
 8001af0:	40023800 	.word	0x40023800
 8001af4:	42470000 	.word	0x42470000
 8001af8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	4b88      	ldr	r3, [pc, #544]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1ea      	bne.n	8001ade <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 8097 	beq.w	8001c44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1a:	4b81      	ldr	r3, [pc, #516]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10f      	bne.n	8001b46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	4a7c      	ldr	r2, [pc, #496]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b36:	4b7a      	ldr	r3, [pc, #488]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b46:	4b77      	ldr	r3, [pc, #476]	@ (8001d24 <HAL_RCC_OscConfig+0x474>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d118      	bne.n	8001b84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b52:	4b74      	ldr	r3, [pc, #464]	@ (8001d24 <HAL_RCC_OscConfig+0x474>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a73      	ldr	r2, [pc, #460]	@ (8001d24 <HAL_RCC_OscConfig+0x474>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff fbaf 	bl	80012c0 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b66:	f7ff fbab 	bl	80012c0 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e10c      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	4b6a      	ldr	r3, [pc, #424]	@ (8001d24 <HAL_RCC_OscConfig+0x474>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x2ea>
 8001b8c:	4b64      	ldr	r3, [pc, #400]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b90:	4a63      	ldr	r2, [pc, #396]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b98:	e01c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x324>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b05      	cmp	r3, #5
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x30c>
 8001ba2:	4b5f      	ldr	r3, [pc, #380]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba6:	4a5e      	ldr	r2, [pc, #376]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bae:	4b5c      	ldr	r3, [pc, #368]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb2:	4a5b      	ldr	r2, [pc, #364]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bba:	e00b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x324>
 8001bbc:	4b58      	ldr	r3, [pc, #352]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc0:	4a57      	ldr	r2, [pc, #348]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001bc2:	f023 0301 	bic.w	r3, r3, #1
 8001bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bc8:	4b55      	ldr	r3, [pc, #340]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bcc:	4a54      	ldr	r2, [pc, #336]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001bce:	f023 0304 	bic.w	r3, r3, #4
 8001bd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d015      	beq.n	8001c08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7ff fb70 	bl	80012c0 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7ff fb6c 	bl	80012c0 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e0cb      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfa:	4b49      	ldr	r3, [pc, #292]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0ee      	beq.n	8001be4 <HAL_RCC_OscConfig+0x334>
 8001c06:	e014      	b.n	8001c32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c08:	f7ff fb5a 	bl	80012c0 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c10:	f7ff fb56 	bl	80012c0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e0b5      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c26:	4b3e      	ldr	r3, [pc, #248]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1ee      	bne.n	8001c10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d105      	bne.n	8001c44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c38:	4b39      	ldr	r3, [pc, #228]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	4a38      	ldr	r2, [pc, #224]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001c3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80a1 	beq.w	8001d90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c4e:	4b34      	ldr	r3, [pc, #208]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d05c      	beq.n	8001d14 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d141      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c62:	4b31      	ldr	r3, [pc, #196]	@ (8001d28 <HAL_RCC_OscConfig+0x478>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fb2a 	bl	80012c0 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff fb26 	bl	80012c0 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e087      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69da      	ldr	r2, [r3, #28]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9c:	019b      	lsls	r3, r3, #6
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca4:	085b      	lsrs	r3, r3, #1
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	041b      	lsls	r3, r3, #16
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb0:	061b      	lsls	r3, r3, #24
 8001cb2:	491b      	ldr	r1, [pc, #108]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d28 <HAL_RCC_OscConfig+0x478>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7ff faff 	bl	80012c0 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc6:	f7ff fafb 	bl	80012c0 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e05c      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x416>
 8001ce4:	e054      	b.n	8001d90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <HAL_RCC_OscConfig+0x478>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff fae8 	bl	80012c0 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7ff fae4 	bl	80012c0 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e045      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_RCC_OscConfig+0x470>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x444>
 8001d12:	e03d      	b.n	8001d90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e038      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40007000 	.word	0x40007000
 8001d28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_RCC_OscConfig+0x4ec>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d028      	beq.n	8001d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d121      	bne.n	8001d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d11a      	bne.n	8001d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d111      	bne.n	8001d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d72:	085b      	lsrs	r3, r3, #1
 8001d74:	3b01      	subs	r3, #1
 8001d76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800

08001da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0cc      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001db4:	4b68      	ldr	r3, [pc, #416]	@ (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d90c      	bls.n	8001ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b65      	ldr	r3, [pc, #404]	@ (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	4b63      	ldr	r3, [pc, #396]	@ (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0b8      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d020      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df4:	4b59      	ldr	r3, [pc, #356]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4a58      	ldr	r2, [pc, #352]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001dfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e0c:	4b53      	ldr	r3, [pc, #332]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a52      	ldr	r2, [pc, #328]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e18:	4b50      	ldr	r3, [pc, #320]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	494d      	ldr	r1, [pc, #308]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d044      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	4b47      	ldr	r3, [pc, #284]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d119      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e07f      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d003      	beq.n	8001e5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e06f      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e067      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7e:	4b37      	ldr	r3, [pc, #220]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f023 0203 	bic.w	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4934      	ldr	r1, [pc, #208]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e90:	f7ff fa16 	bl	80012c0 <HAL_GetTick>
 8001e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e98:	f7ff fa12 	bl	80012c0 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e04f      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	4b2b      	ldr	r3, [pc, #172]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 020c 	and.w	r2, r3, #12
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d1eb      	bne.n	8001e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b25      	ldr	r3, [pc, #148]	@ (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d20c      	bcs.n	8001ee8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e032      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef4:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4916      	ldr	r1, [pc, #88]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f12:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	490e      	ldr	r1, [pc, #56]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f26:	f000 f821 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	490a      	ldr	r1, [pc, #40]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	5ccb      	ldrb	r3, [r1, r3]
 8001f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3e:	4a09      	ldr	r2, [pc, #36]	@ (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f42:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff f976 	bl	8001238 <HAL_InitTick>

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023c00 	.word	0x40023c00
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	08002a5c 	.word	0x08002a5c
 8001f64:	20000000 	.word	0x20000000
 8001f68:	20000064 	.word	0x20000064

08001f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f70:	b094      	sub	sp, #80	@ 0x50
 8001f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f84:	4b79      	ldr	r3, [pc, #484]	@ (800216c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d00d      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0x40>
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	f200 80e1 	bhi.w	8002158 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d003      	beq.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f9e:	e0db      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fa0:	4b73      	ldr	r3, [pc, #460]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fa4:	e0db      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fa6:	4b73      	ldr	r3, [pc, #460]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x208>)
 8001fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001faa:	e0d8      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fac:	4b6f      	ldr	r3, [pc, #444]	@ (800216c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb6:	4b6d      	ldr	r3, [pc, #436]	@ (800216c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d063      	beq.n	800208a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800216c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	099b      	lsrs	r3, r3, #6
 8001fc8:	2200      	movs	r2, #0
 8001fca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001fde:	4622      	mov	r2, r4
 8001fe0:	462b      	mov	r3, r5
 8001fe2:	f04f 0000 	mov.w	r0, #0
 8001fe6:	f04f 0100 	mov.w	r1, #0
 8001fea:	0159      	lsls	r1, r3, #5
 8001fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ff0:	0150      	lsls	r0, r2, #5
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	1a51      	subs	r1, r2, r1
 8001ffa:	6139      	str	r1, [r7, #16]
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	eb63 0301 	sbc.w	r3, r3, r1
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002010:	4659      	mov	r1, fp
 8002012:	018b      	lsls	r3, r1, #6
 8002014:	4651      	mov	r1, sl
 8002016:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800201a:	4651      	mov	r1, sl
 800201c:	018a      	lsls	r2, r1, #6
 800201e:	4651      	mov	r1, sl
 8002020:	ebb2 0801 	subs.w	r8, r2, r1
 8002024:	4659      	mov	r1, fp
 8002026:	eb63 0901 	sbc.w	r9, r3, r1
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800203a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800203e:	4690      	mov	r8, r2
 8002040:	4699      	mov	r9, r3
 8002042:	4623      	mov	r3, r4
 8002044:	eb18 0303 	adds.w	r3, r8, r3
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	462b      	mov	r3, r5
 800204c:	eb49 0303 	adc.w	r3, r9, r3
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800205e:	4629      	mov	r1, r5
 8002060:	024b      	lsls	r3, r1, #9
 8002062:	4621      	mov	r1, r4
 8002064:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002068:	4621      	mov	r1, r4
 800206a:	024a      	lsls	r2, r1, #9
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002072:	2200      	movs	r2, #0
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002076:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002078:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800207c:	f7fe f8ac 	bl	80001d8 <__aeabi_uldivmod>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4613      	mov	r3, r2
 8002086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002088:	e058      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800208a:	4b38      	ldr	r3, [pc, #224]	@ (800216c <HAL_RCC_GetSysClockFreq+0x200>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	099b      	lsrs	r3, r3, #6
 8002090:	2200      	movs	r2, #0
 8002092:	4618      	mov	r0, r3
 8002094:	4611      	mov	r1, r2
 8002096:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800209a:	623b      	str	r3, [r7, #32]
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	@ 0x24
 80020a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020a4:	4642      	mov	r2, r8
 80020a6:	464b      	mov	r3, r9
 80020a8:	f04f 0000 	mov.w	r0, #0
 80020ac:	f04f 0100 	mov.w	r1, #0
 80020b0:	0159      	lsls	r1, r3, #5
 80020b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020b6:	0150      	lsls	r0, r2, #5
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4641      	mov	r1, r8
 80020be:	ebb2 0a01 	subs.w	sl, r2, r1
 80020c2:	4649      	mov	r1, r9
 80020c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020dc:	ebb2 040a 	subs.w	r4, r2, sl
 80020e0:	eb63 050b 	sbc.w	r5, r3, fp
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	00eb      	lsls	r3, r5, #3
 80020ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020f2:	00e2      	lsls	r2, r4, #3
 80020f4:	4614      	mov	r4, r2
 80020f6:	461d      	mov	r5, r3
 80020f8:	4643      	mov	r3, r8
 80020fa:	18e3      	adds	r3, r4, r3
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	464b      	mov	r3, r9
 8002100:	eb45 0303 	adc.w	r3, r5, r3
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	f04f 0300 	mov.w	r3, #0
 800210e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002112:	4629      	mov	r1, r5
 8002114:	028b      	lsls	r3, r1, #10
 8002116:	4621      	mov	r1, r4
 8002118:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800211c:	4621      	mov	r1, r4
 800211e:	028a      	lsls	r2, r1, #10
 8002120:	4610      	mov	r0, r2
 8002122:	4619      	mov	r1, r3
 8002124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002126:	2200      	movs	r2, #0
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	61fa      	str	r2, [r7, #28]
 800212c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002130:	f7fe f852 	bl	80001d8 <__aeabi_uldivmod>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4613      	mov	r3, r2
 800213a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCC_GetSysClockFreq+0x200>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	3301      	adds	r3, #1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800214c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800214e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002156:	e002      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002158:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x204>)
 800215a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800215c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002160:	4618      	mov	r0, r3
 8002162:	3750      	adds	r7, #80	@ 0x50
 8002164:	46bd      	mov	sp, r7
 8002166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800
 8002170:	00f42400 	.word	0x00f42400
 8002174:	007a1200 	.word	0x007a1200

08002178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e041      	b.n	800220e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fb96 	bl	80008d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f000 fa70 	bl	800269c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d001      	beq.n	8002230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e044      	b.n	80022ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1e      	ldr	r2, [pc, #120]	@ (80022c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d018      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x6c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800225a:	d013      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x6c>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1a      	ldr	r2, [pc, #104]	@ (80022cc <HAL_TIM_Base_Start_IT+0xb4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00e      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x6c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a19      	ldr	r2, [pc, #100]	@ (80022d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d009      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x6c>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a17      	ldr	r2, [pc, #92]	@ (80022d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d004      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x6c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a16      	ldr	r2, [pc, #88]	@ (80022d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d111      	bne.n	80022a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b06      	cmp	r3, #6
 8002294:	d010      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0201 	orr.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a6:	e007      	b.n	80022b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40010000 	.word	0x40010000
 80022cc:	40000400 	.word	0x40000400
 80022d0:	40000800 	.word	0x40000800
 80022d4:	40000c00 	.word	0x40000c00
 80022d8:	40014000 	.word	0x40014000

080022dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d020      	beq.n	8002340 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01b      	beq.n	8002340 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0202 	mvn.w	r2, #2
 8002310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f999 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 800232c:	e005      	b.n	800233a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f98b 	bl	800264a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f99c 	bl	8002672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	d020      	beq.n	800238c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01b      	beq.n	800238c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0204 	mvn.w	r2, #4
 800235c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2202      	movs	r2, #2
 8002362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f973 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 8002378:	e005      	b.n	8002386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f965 	bl	800264a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f976 	bl	8002672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d020      	beq.n	80023d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01b      	beq.n	80023d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0208 	mvn.w	r2, #8
 80023a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2204      	movs	r2, #4
 80023ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f94d 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 80023c4:	e005      	b.n	80023d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f93f 	bl	800264a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f950 	bl	8002672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d020      	beq.n	8002424 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01b      	beq.n	8002424 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0210 	mvn.w	r2, #16
 80023f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2208      	movs	r2, #8
 80023fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f927 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 8002410:	e005      	b.n	800241e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f919 	bl	800264a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f92a 	bl	8002672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00c      	beq.n	8002448 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d007      	beq.n	8002448 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0201 	mvn.w	r2, #1
 8002440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe fa93 	bl	800096e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00c      	beq.n	800246c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fab0 	bl	80029cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00c      	beq.n	8002490 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f8fb 	bl	8002686 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00c      	beq.n	80024b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0220 	mvn.w	r2, #32
 80024ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fa82 	bl	80029b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_TIM_ConfigClockSource+0x1c>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e0b4      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x186>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80024f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002510:	d03e      	beq.n	8002590 <HAL_TIM_ConfigClockSource+0xd4>
 8002512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002516:	f200 8087 	bhi.w	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 800251a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800251e:	f000 8086 	beq.w	800262e <HAL_TIM_ConfigClockSource+0x172>
 8002522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002526:	d87f      	bhi.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 8002528:	2b70      	cmp	r3, #112	@ 0x70
 800252a:	d01a      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0xa6>
 800252c:	2b70      	cmp	r3, #112	@ 0x70
 800252e:	d87b      	bhi.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 8002530:	2b60      	cmp	r3, #96	@ 0x60
 8002532:	d050      	beq.n	80025d6 <HAL_TIM_ConfigClockSource+0x11a>
 8002534:	2b60      	cmp	r3, #96	@ 0x60
 8002536:	d877      	bhi.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 8002538:	2b50      	cmp	r3, #80	@ 0x50
 800253a:	d03c      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0xfa>
 800253c:	2b50      	cmp	r3, #80	@ 0x50
 800253e:	d873      	bhi.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 8002540:	2b40      	cmp	r3, #64	@ 0x40
 8002542:	d058      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x13a>
 8002544:	2b40      	cmp	r3, #64	@ 0x40
 8002546:	d86f      	bhi.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 8002548:	2b30      	cmp	r3, #48	@ 0x30
 800254a:	d064      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0x15a>
 800254c:	2b30      	cmp	r3, #48	@ 0x30
 800254e:	d86b      	bhi.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 8002550:	2b20      	cmp	r3, #32
 8002552:	d060      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0x15a>
 8002554:	2b20      	cmp	r3, #32
 8002556:	d867      	bhi.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 8002558:	2b00      	cmp	r3, #0
 800255a:	d05c      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0x15a>
 800255c:	2b10      	cmp	r3, #16
 800255e:	d05a      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0x15a>
 8002560:	e062      	b.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002572:	f000 f993 	bl	800289c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002584:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	609a      	str	r2, [r3, #8]
      break;
 800258e:	e04f      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025a0:	f000 f97c 	bl	800289c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025b2:	609a      	str	r2, [r3, #8]
      break;
 80025b4:	e03c      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c2:	461a      	mov	r2, r3
 80025c4:	f000 f8f0 	bl	80027a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2150      	movs	r1, #80	@ 0x50
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f949 	bl	8002866 <TIM_ITRx_SetConfig>
      break;
 80025d4:	e02c      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025e2:	461a      	mov	r2, r3
 80025e4:	f000 f90f 	bl	8002806 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2160      	movs	r1, #96	@ 0x60
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f939 	bl	8002866 <TIM_ITRx_SetConfig>
      break;
 80025f4:	e01c      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002602:	461a      	mov	r2, r3
 8002604:	f000 f8d0 	bl	80027a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2140      	movs	r1, #64	@ 0x40
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f929 	bl	8002866 <TIM_ITRx_SetConfig>
      break;
 8002614:	e00c      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4619      	mov	r1, r3
 8002620:	4610      	mov	r0, r2
 8002622:	f000 f920 	bl	8002866 <TIM_ITRx_SetConfig>
      break;
 8002626:	e003      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
      break;
 800262c:	e000      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800262e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002640:	7bfb      	ldrb	r3, [r7, #15]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a37      	ldr	r2, [pc, #220]	@ (800278c <TIM_Base_SetConfig+0xf0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d00f      	beq.n	80026d4 <TIM_Base_SetConfig+0x38>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ba:	d00b      	beq.n	80026d4 <TIM_Base_SetConfig+0x38>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a34      	ldr	r2, [pc, #208]	@ (8002790 <TIM_Base_SetConfig+0xf4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d007      	beq.n	80026d4 <TIM_Base_SetConfig+0x38>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a33      	ldr	r2, [pc, #204]	@ (8002794 <TIM_Base_SetConfig+0xf8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d003      	beq.n	80026d4 <TIM_Base_SetConfig+0x38>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a32      	ldr	r2, [pc, #200]	@ (8002798 <TIM_Base_SetConfig+0xfc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d108      	bne.n	80026e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a28      	ldr	r2, [pc, #160]	@ (800278c <TIM_Base_SetConfig+0xf0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01b      	beq.n	8002726 <TIM_Base_SetConfig+0x8a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f4:	d017      	beq.n	8002726 <TIM_Base_SetConfig+0x8a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a25      	ldr	r2, [pc, #148]	@ (8002790 <TIM_Base_SetConfig+0xf4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <TIM_Base_SetConfig+0x8a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a24      	ldr	r2, [pc, #144]	@ (8002794 <TIM_Base_SetConfig+0xf8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00f      	beq.n	8002726 <TIM_Base_SetConfig+0x8a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a23      	ldr	r2, [pc, #140]	@ (8002798 <TIM_Base_SetConfig+0xfc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00b      	beq.n	8002726 <TIM_Base_SetConfig+0x8a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a22      	ldr	r2, [pc, #136]	@ (800279c <TIM_Base_SetConfig+0x100>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d007      	beq.n	8002726 <TIM_Base_SetConfig+0x8a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a21      	ldr	r2, [pc, #132]	@ (80027a0 <TIM_Base_SetConfig+0x104>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d003      	beq.n	8002726 <TIM_Base_SetConfig+0x8a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a20      	ldr	r2, [pc, #128]	@ (80027a4 <TIM_Base_SetConfig+0x108>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d108      	bne.n	8002738 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800272c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	4313      	orrs	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a0c      	ldr	r2, [pc, #48]	@ (800278c <TIM_Base_SetConfig+0xf0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d103      	bne.n	8002766 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f043 0204 	orr.w	r2, r3, #4
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	601a      	str	r2, [r3, #0]
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40010000 	.word	0x40010000
 8002790:	40000400 	.word	0x40000400
 8002794:	40000800 	.word	0x40000800
 8002798:	40000c00 	.word	0x40000c00
 800279c:	40014000 	.word	0x40014000
 80027a0:	40014400 	.word	0x40014400
 80027a4:	40014800 	.word	0x40014800

080027a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f023 0201 	bic.w	r2, r3, #1
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f023 030a 	bic.w	r3, r3, #10
 80027e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	621a      	str	r2, [r3, #32]
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002806:	b480      	push	{r7}
 8002808:	b087      	sub	sp, #28
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f023 0210 	bic.w	r2, r3, #16
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002830:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	031b      	lsls	r3, r3, #12
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002842:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	621a      	str	r2, [r3, #32]
}
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002866:	b480      	push	{r7}
 8002868:	b085      	sub	sp, #20
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800287c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	f043 0307 	orr.w	r3, r3, #7
 8002888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	609a      	str	r2, [r3, #8]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	021a      	lsls	r2, r3, #8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	431a      	orrs	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	609a      	str	r2, [r3, #8]
}
 80028d0:	bf00      	nop
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e050      	b.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800291a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1c      	ldr	r2, [pc, #112]	@ (80029a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d018      	beq.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002940:	d013      	beq.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a18      	ldr	r2, [pc, #96]	@ (80029a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00e      	beq.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a16      	ldr	r2, [pc, #88]	@ (80029ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a15      	ldr	r2, [pc, #84]	@ (80029b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d004      	beq.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a13      	ldr	r2, [pc, #76]	@ (80029b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10c      	bne.n	8002984 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	4313      	orrs	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40010000 	.word	0x40010000
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40000800 	.word	0x40000800
 80029b0:	40000c00 	.word	0x40000c00
 80029b4:	40014000 	.word	0x40014000

080029b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <memset>:
 80029e0:	4402      	add	r2, r0
 80029e2:	4603      	mov	r3, r0
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d100      	bne.n	80029ea <memset+0xa>
 80029e8:	4770      	bx	lr
 80029ea:	f803 1b01 	strb.w	r1, [r3], #1
 80029ee:	e7f9      	b.n	80029e4 <memset+0x4>

080029f0 <__libc_init_array>:
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	4d0d      	ldr	r5, [pc, #52]	@ (8002a28 <__libc_init_array+0x38>)
 80029f4:	4c0d      	ldr	r4, [pc, #52]	@ (8002a2c <__libc_init_array+0x3c>)
 80029f6:	1b64      	subs	r4, r4, r5
 80029f8:	10a4      	asrs	r4, r4, #2
 80029fa:	2600      	movs	r6, #0
 80029fc:	42a6      	cmp	r6, r4
 80029fe:	d109      	bne.n	8002a14 <__libc_init_array+0x24>
 8002a00:	4d0b      	ldr	r5, [pc, #44]	@ (8002a30 <__libc_init_array+0x40>)
 8002a02:	4c0c      	ldr	r4, [pc, #48]	@ (8002a34 <__libc_init_array+0x44>)
 8002a04:	f000 f818 	bl	8002a38 <_init>
 8002a08:	1b64      	subs	r4, r4, r5
 8002a0a:	10a4      	asrs	r4, r4, #2
 8002a0c:	2600      	movs	r6, #0
 8002a0e:	42a6      	cmp	r6, r4
 8002a10:	d105      	bne.n	8002a1e <__libc_init_array+0x2e>
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
 8002a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a18:	4798      	blx	r3
 8002a1a:	3601      	adds	r6, #1
 8002a1c:	e7ee      	b.n	80029fc <__libc_init_array+0xc>
 8002a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a22:	4798      	blx	r3
 8002a24:	3601      	adds	r6, #1
 8002a26:	e7f2      	b.n	8002a0e <__libc_init_array+0x1e>
 8002a28:	08002a74 	.word	0x08002a74
 8002a2c:	08002a74 	.word	0x08002a74
 8002a30:	08002a74 	.word	0x08002a74
 8002a34:	08002a78 	.word	0x08002a78

08002a38 <_init>:
 8002a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3a:	bf00      	nop
 8002a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a3e:	bc08      	pop	{r3}
 8002a40:	469e      	mov	lr, r3
 8002a42:	4770      	bx	lr

08002a44 <_fini>:
 8002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a46:	bf00      	nop
 8002a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4a:	bc08      	pop	{r3}
 8002a4c:	469e      	mov	lr, r3
 8002a4e:	4770      	bx	lr
