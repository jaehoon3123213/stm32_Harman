
20250625_TimeWatch_StopWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c34  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08005dcc  08005dcc  00006dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e10  08005e10  0000707c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005e10  08005e10  00006e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e18  08005e18  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e18  08005e18  00006e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e1c  08005e1c  00006e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08005e20  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2000007c  08005e9c  0000707c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08005e9c  00007368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154b6  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003abf  00000000  00000000  0001c562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00020028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ead  00000000  00000000  00021330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184d3  00000000  00000000  000221dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac8f  00000000  00000000  0003a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000913f5  00000000  00000000  0005533f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6734  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c18  00000000  00000000  000e6778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000eb390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005db4 	.word	0x08005db4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08005db4 	.word	0x08005db4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	@ 0x28
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b49      	ldr	r3, [pc, #292]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a48      	ldr	r2, [pc, #288]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
 800052a:	4b46      	ldr	r3, [pc, #280]	@ (8000644 <MX_GPIO_Init+0x140>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b42      	ldr	r3, [pc, #264]	@ (8000644 <MX_GPIO_Init+0x140>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a41      	ldr	r2, [pc, #260]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b3f      	ldr	r3, [pc, #252]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b3b      	ldr	r3, [pc, #236]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a3a      	ldr	r2, [pc, #232]	@ (8000644 <MX_GPIO_Init+0x140>)
 800055c:	f043 0304 	orr.w	r3, r3, #4
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b38      	ldr	r3, [pc, #224]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b34      	ldr	r3, [pc, #208]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	4a33      	ldr	r2, [pc, #204]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	6313      	str	r3, [r2, #48]	@ 0x30
 800057e:	4b31      	ldr	r3, [pc, #196]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 51c2 	mov.w	r1, #6208	@ 0x1840
 8000590:	482d      	ldr	r0, [pc, #180]	@ (8000648 <MX_GPIO_Init+0x144>)
 8000592:	f001 fefb 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 800059c:	482b      	ldr	r0, [pc, #172]	@ (800064c <MX_GPIO_Init+0x148>)
 800059e:	f001 fef5 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80005a2:	2200      	movs	r2, #0
 80005a4:	f24f 0106 	movw	r1, #61446	@ 0xf006
 80005a8:	4829      	ldr	r0, [pc, #164]	@ (8000650 <MX_GPIO_Init+0x14c>)
 80005aa:	f001 feef 	bl	800238c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA6 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 80005ae:	f44f 53c2 	mov.w	r3, #6208	@ 0x1840
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	4820      	ldr	r0, [pc, #128]	@ (8000648 <MX_GPIO_Init+0x144>)
 80005c8:	f001 fd5c 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80005cc:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80005d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	4819      	ldr	r0, [pc, #100]	@ (800064c <MX_GPIO_Init+0x148>)
 80005e6:	f001 fd4d 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80005ea:	f24f 0306 	movw	r3, #61446	@ 0xf006
 80005ee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	2300      	movs	r3, #0
 80005fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4619      	mov	r1, r3
 8000602:	4813      	ldr	r0, [pc, #76]	@ (8000650 <MX_GPIO_Init+0x14c>)
 8000604:	f001 fd3e 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000608:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	480a      	ldr	r0, [pc, #40]	@ (8000648 <MX_GPIO_Init+0x144>)
 800061e:	f001 fd31 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000622:	2328      	movs	r3, #40	@ 0x28
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	4806      	ldr	r0, [pc, #24]	@ (8000650 <MX_GPIO_Init+0x14c>)
 8000636:	f001 fd25 	bl	8002084 <HAL_GPIO_Init>

}
 800063a:	bf00      	nop
 800063c:	3728      	adds	r7, #40	@ 0x28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40020000 	.word	0x40020000
 800064c:	40020800 	.word	0x40020800
 8000650:	40020400 	.word	0x40020400

08000654 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000658:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800065a:	4a13      	ldr	r2, [pc, #76]	@ (80006a8 <MX_I2C1_Init+0x54>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000660:	4a12      	ldr	r2, [pc, #72]	@ (80006ac <MX_I2C1_Init+0x58>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000664:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000670:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000672:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000692:	f001 fe95 	bl	80023c0 <HAL_I2C_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 f8d4 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000098 	.word	0x20000098
 80006a8:	40005400 	.word	0x40005400
 80006ac:	000186a0 	.word	0x000186a0

080006b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a19      	ldr	r2, [pc, #100]	@ (8000734 <HAL_I2C_MspInit+0x84>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d12c      	bne.n	800072c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a17      	ldr	r2, [pc, #92]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f4:	2312      	movs	r3, #18
 80006f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000700:	2304      	movs	r3, #4
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	480c      	ldr	r0, [pc, #48]	@ (800073c <HAL_I2C_MspInit+0x8c>)
 800070c:	f001 fcba 	bl	8002084 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 800071a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000720:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	@ 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40005400 	.word	0x40005400
 8000738:	40023800 	.word	0x40023800
 800073c:	40020400 	.word	0x40020400

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000744:	f001 fa64 	bl	8001c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000748:	f000 f816 	bl	8000778 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  DWT_Init();
 800074c:	f000 fcea 	bl	8001124 <DWT_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f7ff fed8 	bl	8000504 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000754:	f000 f98a 	bl	8000a6c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000758:	f000 fbce 	bl	8000ef8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800075c:	f7ff ff7a 	bl	8000654 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000760:	f000 f9d0 	bl	8000b04 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000764:	f000 f8fe 	bl	8000964 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000768:	f000 fa42 	bl	8000bf0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 800076c:	f000 fd10 	bl	8001190 <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 8000770:	f000 fcf2 	bl	8001158 <ap_main>
 8000774:	e7fc      	b.n	8000770 <main+0x30>
	...

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	@ 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	@ 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f005 fae8 	bl	8005d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b27      	ldr	r3, [pc, #156]	@ (8000840 <SystemClock_Config+0xc8>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	4a26      	ldr	r2, [pc, #152]	@ (8000840 <SystemClock_Config+0xc8>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ac:	4b24      	ldr	r3, [pc, #144]	@ (8000840 <SystemClock_Config+0xc8>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b21      	ldr	r3, [pc, #132]	@ (8000844 <SystemClock_Config+0xcc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a20      	ldr	r2, [pc, #128]	@ (8000844 <SystemClock_Config+0xcc>)
 80007c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000844 <SystemClock_Config+0xcc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e8:	2304      	movs	r3, #4
 80007ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007ec:	2364      	movs	r3, #100	@ 0x64
 80007ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f4:	2304      	movs	r3, #4
 80007f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fa7d 	bl	8002cfc <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000808:	f000 f81e 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2302      	movs	r3, #2
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2103      	movs	r1, #3
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fcdf 	bl	80031ec <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000834:	f000 f808 	bl	8000848 <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3750      	adds	r7, #80	@ 0x50
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <Error_Handler+0x8>

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000862:	4a0f      	ldr	r2, [pc, #60]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000868:	6453      	str	r3, [r2, #68]	@ 0x44
 800086a:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <NMI_Handler+0x4>

080008ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <MemManage_Handler+0x4>

080008bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <UsageFault_Handler+0x4>

080008cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fa:	f001 f9db 	bl	8001cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000908:	4802      	ldr	r0, [pc, #8]	@ (8000914 <TIM2_IRQHandler+0x10>)
 800090a:	f003 fa63 	bl	8003dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000134 	.word	0x20000134

08000918 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800091c:	4802      	ldr	r0, [pc, #8]	@ (8000928 <TIM4_IRQHandler+0x10>)
 800091e:	f003 fa59 	bl	8003dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200001c4 	.word	0x200001c4

0800092c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000930:	4802      	ldr	r0, [pc, #8]	@ (800093c <USART2_IRQHandler+0x10>)
 8000932:	f004 fb01 	bl	8004f38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000020c 	.word	0x2000020c

08000940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <SystemInit+0x20>)
 8000946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800094a:	4a05      	ldr	r2, [pc, #20]	@ (8000960 <SystemInit+0x20>)
 800094c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000950:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b092      	sub	sp, #72	@ 0x48
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	615a      	str	r2, [r3, #20]
 8000986:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2220      	movs	r2, #32
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f005 f9e4 	bl	8005d5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000994:	4b33      	ldr	r3, [pc, #204]	@ (8000a64 <MX_TIM1_Init+0x100>)
 8000996:	4a34      	ldr	r2, [pc, #208]	@ (8000a68 <MX_TIM1_Init+0x104>)
 8000998:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 800099a:	4b32      	ldr	r3, [pc, #200]	@ (8000a64 <MX_TIM1_Init+0x100>)
 800099c:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a2:	4b30      	ldr	r3, [pc, #192]	@ (8000a64 <MX_TIM1_Init+0x100>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80009a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000a64 <MX_TIM1_Init+0x100>)
 80009aa:	2263      	movs	r2, #99	@ 0x63
 80009ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000a64 <MX_TIM1_Init+0x100>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a64 <MX_TIM1_Init+0x100>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000a64 <MX_TIM1_Init+0x100>)
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009c0:	4828      	ldr	r0, [pc, #160]	@ (8000a64 <MX_TIM1_Init+0x100>)
 80009c2:	f002 fee5 	bl	8003790 <HAL_TIM_PWM_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80009cc:	f7ff ff3c 	bl	8000848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009dc:	4619      	mov	r1, r3
 80009de:	4821      	ldr	r0, [pc, #132]	@ (8000a64 <MX_TIM1_Init+0x100>)
 80009e0:	f004 f960 	bl	8004ca4 <HAL_TIMEx_MasterConfigSynchronization>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80009ea:	f7ff ff2d 	bl	8000848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ee:	2360      	movs	r3, #96	@ 0x60
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 50-1;
 80009f2:	2331      	movs	r3, #49	@ 0x31
 80009f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009fa:	2300      	movs	r3, #0
 80009fc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4619      	mov	r1, r3
 8000a12:	4814      	ldr	r0, [pc, #80]	@ (8000a64 <MX_TIM1_Init+0x100>)
 8000a14:	f003 fb6a 	bl	80040ec <HAL_TIM_PWM_ConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000a1e:	f7ff ff13 	bl	8000848 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a3a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	4807      	ldr	r0, [pc, #28]	@ (8000a64 <MX_TIM1_Init+0x100>)
 8000a46:	f004 f99b 	bl	8004d80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000a50:	f7ff fefa 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a54:	4803      	ldr	r0, [pc, #12]	@ (8000a64 <MX_TIM1_Init+0x100>)
 8000a56:	f000 f9ed 	bl	8000e34 <HAL_TIM_MspPostInit>

}
 8000a5a:	bf00      	nop
 8000a5c:	3748      	adds	r7, #72	@ 0x48
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000ec 	.word	0x200000ec
 8000a68:	40010000 	.word	0x40010000

08000a6c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a88:	4b1d      	ldr	r3, [pc, #116]	@ (8000b00 <MX_TIM2_Init+0x94>)
 8000a8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <MX_TIM2_Init+0x94>)
 8000a92:	2263      	movs	r2, #99	@ 0x63
 8000a94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <MX_TIM2_Init+0x94>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <MX_TIM2_Init+0x94>)
 8000a9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <MX_TIM2_Init+0x94>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_TIM2_Init+0x94>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ab0:	4813      	ldr	r0, [pc, #76]	@ (8000b00 <MX_TIM2_Init+0x94>)
 8000ab2:	f002 fdbb 	bl	800362c <HAL_TIM_Base_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000abc:	f7ff fec4 	bl	8000848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	4619      	mov	r1, r3
 8000acc:	480c      	ldr	r0, [pc, #48]	@ (8000b00 <MX_TIM2_Init+0x94>)
 8000ace:	f003 fbcf 	bl	8004270 <HAL_TIM_ConfigClockSource>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ad8:	f7ff feb6 	bl	8000848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_TIM2_Init+0x94>)
 8000aea:	f004 f8db 	bl	8004ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000af4:	f7ff fea8 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000134 	.word	0x20000134

08000b04 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	@ 0x38
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b18:	f107 0320 	add.w	r3, r7, #32
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	615a      	str	r2, [r3, #20]
 8000b32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b34:	4b2c      	ldr	r3, [pc, #176]	@ (8000be8 <MX_TIM3_Init+0xe4>)
 8000b36:	4a2d      	ldr	r2, [pc, #180]	@ (8000bec <MX_TIM3_Init+0xe8>)
 8000b38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000be8 <MX_TIM3_Init+0xe4>)
 8000b3c:	2263      	movs	r2, #99	@ 0x63
 8000b3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b29      	ldr	r3, [pc, #164]	@ (8000be8 <MX_TIM3_Init+0xe4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000b46:	4b28      	ldr	r3, [pc, #160]	@ (8000be8 <MX_TIM3_Init+0xe4>)
 8000b48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4e:	4b26      	ldr	r3, [pc, #152]	@ (8000be8 <MX_TIM3_Init+0xe4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b54:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <MX_TIM3_Init+0xe4>)
 8000b56:	2280      	movs	r2, #128	@ 0x80
 8000b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b5a:	4823      	ldr	r0, [pc, #140]	@ (8000be8 <MX_TIM3_Init+0xe4>)
 8000b5c:	f002 fd66 	bl	800362c <HAL_TIM_Base_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b66:	f7ff fe6f 	bl	8000848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b74:	4619      	mov	r1, r3
 8000b76:	481c      	ldr	r0, [pc, #112]	@ (8000be8 <MX_TIM3_Init+0xe4>)
 8000b78:	f003 fb7a 	bl	8004270 <HAL_TIM_ConfigClockSource>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b82:	f7ff fe61 	bl	8000848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b86:	4818      	ldr	r0, [pc, #96]	@ (8000be8 <MX_TIM3_Init+0xe4>)
 8000b88:	f002 fe02 	bl	8003790 <HAL_TIM_PWM_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b92:	f7ff fe59 	bl	8000848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b9e:	f107 0320 	add.w	r3, r7, #32
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4810      	ldr	r0, [pc, #64]	@ (8000be8 <MX_TIM3_Init+0xe4>)
 8000ba6:	f004 f87d 	bl	8004ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bb0:	f7ff fe4a 	bl	8000848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb4:	2360      	movs	r3, #96	@ 0x60
 8000bb6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4807      	ldr	r0, [pc, #28]	@ (8000be8 <MX_TIM3_Init+0xe4>)
 8000bcc:	f003 fa8e 	bl	80040ec <HAL_TIM_PWM_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000bd6:	f7ff fe37 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bda:	4803      	ldr	r0, [pc, #12]	@ (8000be8 <MX_TIM3_Init+0xe4>)
 8000bdc:	f000 f92a 	bl	8000e34 <HAL_TIM_MspPostInit>

}
 8000be0:	bf00      	nop
 8000be2:	3738      	adds	r7, #56	@ 0x38
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000017c 	.word	0x2000017c
 8000bec:	40000400 	.word	0x40000400

08000bf0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	@ 0x28
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0318 	add.w	r3, r7, #24
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c0e:	463b      	mov	r3, r7
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ce4 <MX_TIM4_Init+0xf4>)
 8000c1c:	4a32      	ldr	r2, [pc, #200]	@ (8000ce8 <MX_TIM4_Init+0xf8>)
 8000c1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000c20:	4b30      	ldr	r3, [pc, #192]	@ (8000ce4 <MX_TIM4_Init+0xf4>)
 8000c22:	2253      	movs	r2, #83	@ 0x53
 8000c24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce4 <MX_TIM4_Init+0xf4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce4 <MX_TIM4_Init+0xf4>)
 8000c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce4 <MX_TIM4_Init+0xf4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce4 <MX_TIM4_Init+0xf4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c40:	4828      	ldr	r0, [pc, #160]	@ (8000ce4 <MX_TIM4_Init+0xf4>)
 8000c42:	f002 fcf3 	bl	800362c <HAL_TIM_Base_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000c4c:	f7ff fdfc 	bl	8000848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c54:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4821      	ldr	r0, [pc, #132]	@ (8000ce4 <MX_TIM4_Init+0xf4>)
 8000c5e:	f003 fb07 	bl	8004270 <HAL_TIM_ConfigClockSource>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000c68:	f7ff fdee 	bl	8000848 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000c6c:	481d      	ldr	r0, [pc, #116]	@ (8000ce4 <MX_TIM4_Init+0xf4>)
 8000c6e:	f002 fe8f 	bl	8003990 <HAL_TIM_IC_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000c78:	f7ff fde6 	bl	8000848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4816      	ldr	r0, [pc, #88]	@ (8000ce4 <MX_TIM4_Init+0xf4>)
 8000c8c:	f004 f80a 	bl	8004ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8000c96:	f7ff fdd7 	bl	8000848 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000caa:	463b      	mov	r3, r7
 8000cac:	2200      	movs	r2, #0
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <MX_TIM4_Init+0xf4>)
 8000cb2:	f003 f97f 	bl	8003fb4 <HAL_TIM_IC_ConfigChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000cbc:	f7ff fdc4 	bl	8000848 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <MX_TIM4_Init+0xf4>)
 8000ccc:	f003 f972 	bl	8003fb4 <HAL_TIM_IC_ConfigChannel>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000cd6:	f7ff fdb7 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	@ 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200001c4 	.word	0x200001c4
 8000ce8:	40000800 	.word	0x40000800

08000cec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8000d28 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10d      	bne.n	8000d1a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x40>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	4a09      	ldr	r2, [pc, #36]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x40>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x40>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40010000 	.word	0x40010000
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	@ 0x30
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d50:	d116      	bne.n	8000d80 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	4b33      	ldr	r3, [pc, #204]	@ (8000e24 <HAL_TIM_Base_MspInit+0xf4>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	4a32      	ldr	r2, [pc, #200]	@ (8000e24 <HAL_TIM_Base_MspInit+0xf4>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d62:	4b30      	ldr	r3, [pc, #192]	@ (8000e24 <HAL_TIM_Base_MspInit+0xf4>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	61bb      	str	r3, [r7, #24]
 8000d6c:	69bb      	ldr	r3, [r7, #24]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	201c      	movs	r0, #28
 8000d74:	f001 f8bd 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d78:	201c      	movs	r0, #28
 8000d7a:	f001 f8d6 	bl	8001f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000d7e:	e04c      	b.n	8000e1a <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM3)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a28      	ldr	r2, [pc, #160]	@ (8000e28 <HAL_TIM_Base_MspInit+0xf8>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d10e      	bne.n	8000da8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	4b25      	ldr	r3, [pc, #148]	@ (8000e24 <HAL_TIM_Base_MspInit+0xf4>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	4a24      	ldr	r2, [pc, #144]	@ (8000e24 <HAL_TIM_Base_MspInit+0xf4>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9a:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <HAL_TIM_Base_MspInit+0xf4>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]
}
 8000da6:	e038      	b.n	8000e1a <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM4)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a1f      	ldr	r2, [pc, #124]	@ (8000e2c <HAL_TIM_Base_MspInit+0xfc>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d133      	bne.n	8000e1a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <HAL_TIM_Base_MspInit+0xf4>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	4a1a      	ldr	r2, [pc, #104]	@ (8000e24 <HAL_TIM_Base_MspInit+0xf4>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc2:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <HAL_TIM_Base_MspInit+0xf4>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <HAL_TIM_Base_MspInit+0xf4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a13      	ldr	r2, [pc, #76]	@ (8000e24 <HAL_TIM_Base_MspInit+0xf4>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <HAL_TIM_Base_MspInit+0xf4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dea:	23c0      	movs	r3, #192	@ 0xc0
 8000dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	480a      	ldr	r0, [pc, #40]	@ (8000e30 <HAL_TIM_Base_MspInit+0x100>)
 8000e06:	f001 f93d 	bl	8002084 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	201e      	movs	r0, #30
 8000e10:	f001 f86f 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e14:	201e      	movs	r0, #30
 8000e16:	f001 f888 	bl	8001f2a <HAL_NVIC_EnableIRQ>
}
 8000e1a:	bf00      	nop
 8000e1c:	3730      	adds	r7, #48	@ 0x30
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40000400 	.word	0x40000400
 8000e2c:	40000800 	.word	0x40000800
 8000e30:	40020400 	.word	0x40020400

08000e34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	@ 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a24      	ldr	r2, [pc, #144]	@ (8000ee4 <HAL_TIM_MspPostInit+0xb0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d11f      	bne.n	8000e96 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ee8 <HAL_TIM_MspPostInit+0xb4>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a22      	ldr	r2, [pc, #136]	@ (8000ee8 <HAL_TIM_MspPostInit+0xb4>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b20      	ldr	r3, [pc, #128]	@ (8000ee8 <HAL_TIM_MspPostInit+0xb4>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4817      	ldr	r0, [pc, #92]	@ (8000eec <HAL_TIM_MspPostInit+0xb8>)
 8000e90:	f001 f8f8 	bl	8002084 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e94:	e022      	b.n	8000edc <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a15      	ldr	r2, [pc, #84]	@ (8000ef0 <HAL_TIM_MspPostInit+0xbc>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d11d      	bne.n	8000edc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <HAL_TIM_MspPostInit+0xb4>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee8 <HAL_TIM_MspPostInit+0xb4>)
 8000eaa:	f043 0302 	orr.w	r3, r3, #2
 8000eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <HAL_TIM_MspPostInit+0xb4>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4807      	ldr	r0, [pc, #28]	@ (8000ef4 <HAL_TIM_MspPostInit+0xc0>)
 8000ed8:	f001 f8d4 	bl	8002084 <HAL_GPIO_Init>
}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	@ 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	40000400 	.word	0x40000400
 8000ef4:	40020400 	.word	0x40020400

08000ef8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <MX_USART2_UART_Init+0x50>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f30:	f003 ff8c 	bl	8004e4c <HAL_UART_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f3a:	f7ff fc85 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000020c 	.word	0x2000020c
 8000f48:	40004400 	.word	0x40004400

08000f4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	@ 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe0 <HAL_UART_MspInit+0x94>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d133      	bne.n	8000fd6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a14      	ldr	r2, [pc, #80]	@ (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <HAL_UART_MspInit+0x98>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fa6:	230c      	movs	r3, #12
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4809      	ldr	r0, [pc, #36]	@ (8000fe8 <HAL_UART_MspInit+0x9c>)
 8000fc2:	f001 f85f 	bl	8002084 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2026      	movs	r0, #38	@ 0x26
 8000fcc:	f000 ff91 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fd0:	2026      	movs	r0, #38	@ 0x26
 8000fd2:	f000 ffaa 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	@ 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40004400 	.word	0x40004400
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020000 	.word	0x40020000

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001024 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff0:	f7ff fca6 	bl	8000940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	@ (800102c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	@ (8001038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101a:	f004 fea7 	bl	8005d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff fb8f 	bl	8000740 <main>
  bx  lr    
 8001022:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001024:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001030:	08005e20 	.word	0x08005e20
  ldr r2, =_sbss
 8001034:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001038:	20000368 	.word	0x20000368

0800103c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC_IRQHandler>
	...

08001040 <Listener_Init>:

static uint8_t rcvData = 0;
static Que_TypeDef uartRxQue;

void Listener_Init()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	Button_Init(&hBtnMode, GPIOB, GPIO_PIN_5);
 8001044:	2220      	movs	r2, #32
 8001046:	490c      	ldr	r1, [pc, #48]	@ (8001078 <Listener_Init+0x38>)
 8001048:	480c      	ldr	r0, [pc, #48]	@ (800107c <Listener_Init+0x3c>)
 800104a:	f000 f9a5 	bl	8001398 <Button_Init>
	Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_3);
 800104e:	2208      	movs	r2, #8
 8001050:	4909      	ldr	r1, [pc, #36]	@ (8001078 <Listener_Init+0x38>)
 8001052:	480b      	ldr	r0, [pc, #44]	@ (8001080 <Listener_Init+0x40>)
 8001054:	f000 f9a0 	bl	8001398 <Button_Init>
	Button_Init(&hBtnClear, GPIOA, GPIO_PIN_10);
 8001058:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800105c:	4909      	ldr	r1, [pc, #36]	@ (8001084 <Listener_Init+0x44>)
 800105e:	480a      	ldr	r0, [pc, #40]	@ (8001088 <Listener_Init+0x48>)
 8001060:	f000 f99a 	bl	8001398 <Button_Init>

	Que_Init(&uartRxQue);
 8001064:	4809      	ldr	r0, [pc, #36]	@ (800108c <Listener_Init+0x4c>)
 8001066:	f000 f8af 	bl	80011c8 <Que_Init>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
 800106a:	2201      	movs	r2, #1
 800106c:	4908      	ldr	r1, [pc, #32]	@ (8001090 <Listener_Init+0x50>)
 800106e:	4809      	ldr	r0, [pc, #36]	@ (8001094 <Listener_Init+0x54>)
 8001070:	f003 ff3c 	bl	8004eec <HAL_UART_Receive_IT>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40020400 	.word	0x40020400
 800107c:	20000274 	.word	0x20000274
 8001080:	20000280 	.word	0x20000280
 8001084:	40020000 	.word	0x40020000
 8001088:	2000028c 	.word	0x2000028c
 800108c:	20000258 	.word	0x20000258
 8001090:	20000254 	.word	0x20000254
 8001094:	2000020c 	.word	0x2000020c

08001098 <Listener_UartCallBack>:
		Controller_SetInputData(inputData);
	}
}

void Listener_UartCallBack()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	enQue(&uartRxQue, rcvData);
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <Listener_UartCallBack+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	@ (80010bc <Listener_UartCallBack+0x24>)
 80010a4:	f000 f8bb 	bl	800121e <enQue>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // interrupt enable
 80010a8:	2201      	movs	r2, #1
 80010aa:	4903      	ldr	r1, [pc, #12]	@ (80010b8 <Listener_UartCallBack+0x20>)
 80010ac:	4804      	ldr	r0, [pc, #16]	@ (80010c0 <Listener_UartCallBack+0x28>)
 80010ae:	f003 ff1d 	bl	8004eec <HAL_UART_Receive_IT>
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000254 	.word	0x20000254
 80010bc:	20000258 	.word	0x20000258
 80010c0:	2000020c 	.word	0x2000020c

080010c4 <Presenter_Init>:


static watch_t dispData = {TIME_WATCH, 12, 0, 0, 0};

void Presenter_Init()
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <Presenter_Init+0x10>)
 80010ca:	f000 fbcb 	bl	8001864 <LCD_Init>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000098 	.word	0x20000098

080010d8 <HAL_TIM_PeriodElapsedCallback>:

#include "ap_main.h"
#include "dht11.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010e8:	d105      	bne.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		FND_DispDataCallBack();
 80010ea:	f000 fa29 	bl	8001540 <FND_DispDataCallBack>

		TimeWatch_IncTimeCallBack();
 80010ee:	f000 f911 	bl	8001314 <TimeWatch_IncTimeCallBack>
		StopWatch_IncTimeCallBack();
 80010f2:	f000 f8c1 	bl	8001278 <StopWatch_IncTimeCallBack>
	}
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_UART_RxCpltCallback+0x20>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_UART_RxCpltCallback+0x16>
		Listener_UartCallBack();
 8001112:	f7ff ffc1 	bl	8001098 <Listener_UartCallBack>
	}
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40004400 	.word	0x40004400

08001124 <DWT_Init>:

void DWT_Init(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // DWT 사용 허용
 8001128:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <DWT_Init+0x2c>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	4a08      	ldr	r2, [pc, #32]	@ (8001150 <DWT_Init+0x2c>)
 800112e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001132:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;                                // 초기화
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <DWT_Init+0x30>)
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // 사이클 카운터 시작
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <DWT_Init+0x30>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <DWT_Init+0x30>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6013      	str	r3, [r2, #0]
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000edf0 	.word	0xe000edf0
 8001154:	e0001000 	.word	0xe0001000

08001158 <ap_main>:


int ap_main()
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim2);
 800115c:	4809      	ldr	r0, [pc, #36]	@ (8001184 <ap_main+0x2c>)
 800115e:	f002 fab5 	bl	80036cc <HAL_TIM_Base_Start_IT>


	LCD_writeStringXY(0, 0, "Hello World!");
 8001162:	4a09      	ldr	r2, [pc, #36]	@ (8001188 <ap_main+0x30>)
 8001164:	2100      	movs	r1, #0
 8001166:	2000      	movs	r0, #0
 8001168:	f000 fccb 	bl	8001b02 <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, "Hello STM32!");
 800116c:	4a07      	ldr	r2, [pc, #28]	@ (800118c <ap_main+0x34>)
 800116e:	2100      	movs	r1, #0
 8001170:	2001      	movs	r0, #1
 8001172:	f000 fcc6 	bl	8001b02 <LCD_writeStringXY>
	motor_Start();
 8001176:	f000 fd3b 	bl	8001bf0 <motor_Start>
	dht_start();
 800117a:	f000 f97b 	bl	8001474 <dht_start>
	while(1)
 800117e:	bf00      	nop
 8001180:	e7fd      	b.n	800117e <ap_main+0x26>
 8001182:	bf00      	nop
 8001184:	20000134 	.word	0x20000134
 8001188:	08005dcc 	.word	0x08005dcc
 800118c:	08005ddc 	.word	0x08005ddc

08001190 <ap_init>:

	return 0;
}

void ap_init()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	Listener_Init();
 8001194:	f7ff ff54 	bl	8001040 <Listener_Init>
	Presenter_Init();
 8001198:	f7ff ff94 	bl	80010c4 <Presenter_Init>
	Sound_Init();
 800119c:	f000 f862 	bl	8001264 <Sound_Init>
	DWT_Init();
 80011a0:	f7ff ffc0 	bl	8001124 <DWT_Init>
	motor_Init(&htim1, TIM_CHANNEL_1);
 80011a4:	2100      	movs	r1, #0
 80011a6:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <ap_init+0x30>)
 80011a8:	f000 fcd6 	bl	8001b58 <motor_Init>
	motor_SetDuty(80);
 80011ac:	2050      	movs	r0, #80	@ 0x50
 80011ae:	f000 fce9 	bl	8001b84 <motor_SetDuty>
	DHT11_Init(GPIOA, GPIO_PIN_6);
 80011b2:	2140      	movs	r1, #64	@ 0x40
 80011b4:	4803      	ldr	r0, [pc, #12]	@ (80011c4 <ap_init+0x34>)
 80011b6:	f000 f905 	bl	80013c4 <DHT11_Init>
//	Sound_PowerOn();
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200000ec 	.word	0x200000ec
 80011c4:	40020000 	.word	0x40020000

080011c8 <Que_Init>:
#include "queue.h"



void Que_Init(Que_TypeDef *q)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	q->front = 0;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	605a      	str	r2, [r3, #4]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <isQueFull>:

int isQueFull(Que_TypeDef *q)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	return q->front == ((q->rear+1) % QUE_SIZE);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	3301      	adds	r3, #1
 80011fa:	4259      	negs	r1, r3
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	f001 0103 	and.w	r1, r1, #3
 8001204:	bf58      	it	pl
 8001206:	424b      	negpl	r3, r1
 8001208:	429a      	cmp	r2, r3
 800120a:	bf0c      	ite	eq
 800120c:	2301      	moveq	r3, #1
 800120e:	2300      	movne	r3, #0
 8001210:	b2db      	uxtb	r3, r3
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <enQue>:
{
	return q->front == q->rear;
}

void enQue(Que_TypeDef *q, int data)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
	if (isQueFull(q)) {
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffdd 	bl	80011e8 <isQueFull>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d113      	bne.n	800125c <enQue+0x3e>
		return;
	}
	q->queData[q->rear] = data;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3202      	adds	r2, #2
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	q->rear = (q->rear+1) % QUE_SIZE;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	425a      	negs	r2, r3
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	f002 0203 	and.w	r2, r2, #3
 8001252:	bf58      	it	pl
 8001254:	4253      	negpl	r3, r2
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	6053      	str	r3, [r2, #4]
 800125a:	e000      	b.n	800125e <enQue+0x40>
		return;
 800125c:	bf00      	nop
}
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <Sound_Init>:
 */

#include "sound.h"

void Sound_Init()
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
 Buzzer_Init(&htim3, TIM_CHANNEL_1);
 8001268:	2100      	movs	r1, #0
 800126a:	4802      	ldr	r0, [pc, #8]	@ (8001274 <Sound_Init+0x10>)
 800126c:	f000 fc5e 	bl	8001b2c <Buzzer_Init>
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2000017c 	.word	0x2000017c

08001278 <StopWatch_IncTimeCallBack>:
extern inputData_TypeDef controlData;
static stopWatchState_t stopWatchState = STOP;
static watch_t stopWatch = {STOP_WATCH, 12, 0, 0, 0};

void StopWatch_IncTimeCallBack()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	if (stopWatchState == RUN) {
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <StopWatch_IncTimeCallBack+0x14>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d101      	bne.n	8001288 <StopWatch_IncTimeCallBack+0x10>
		StopWatch_IncTime();
 8001284:	f000 f804 	bl	8001290 <StopWatch_IncTime>
	}
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000270 	.word	0x20000270

08001290 <StopWatch_IncTime>:

void StopWatch_IncTime()
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
	if (stopWatch.msec < 1000-1) {
 8001294:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <StopWatch_IncTime+0x80>)
 8001296:	889b      	ldrh	r3, [r3, #4]
 8001298:	f240 32e6 	movw	r2, #998	@ 0x3e6
 800129c:	4293      	cmp	r3, r2
 800129e:	d806      	bhi.n	80012ae <StopWatch_IncTime+0x1e>
		stopWatch.msec++;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <StopWatch_IncTime+0x80>)
 80012a2:	889b      	ldrh	r3, [r3, #4]
 80012a4:	3301      	adds	r3, #1
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <StopWatch_IncTime+0x80>)
 80012aa:	809a      	strh	r2, [r3, #4]
		return;
 80012ac:	e02c      	b.n	8001308 <StopWatch_IncTime+0x78>
	}
	stopWatch.msec = 0;
 80012ae:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <StopWatch_IncTime+0x80>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	809a      	strh	r2, [r3, #4]

	if (stopWatch.sec < 60-1) {
 80012b4:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <StopWatch_IncTime+0x80>)
 80012b6:	78db      	ldrb	r3, [r3, #3]
 80012b8:	2b3a      	cmp	r3, #58	@ 0x3a
 80012ba:	d806      	bhi.n	80012ca <StopWatch_IncTime+0x3a>
		stopWatch.sec++;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <StopWatch_IncTime+0x80>)
 80012be:	78db      	ldrb	r3, [r3, #3]
 80012c0:	3301      	adds	r3, #1
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <StopWatch_IncTime+0x80>)
 80012c6:	70da      	strb	r2, [r3, #3]
		return;
 80012c8:	e01e      	b.n	8001308 <StopWatch_IncTime+0x78>
	}
	stopWatch.sec = 0;
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <StopWatch_IncTime+0x80>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	70da      	strb	r2, [r3, #3]

	if (stopWatch.min < 60-1) {
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <StopWatch_IncTime+0x80>)
 80012d2:	789b      	ldrb	r3, [r3, #2]
 80012d4:	2b3a      	cmp	r3, #58	@ 0x3a
 80012d6:	d806      	bhi.n	80012e6 <StopWatch_IncTime+0x56>
		stopWatch.min++;
 80012d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <StopWatch_IncTime+0x80>)
 80012da:	789b      	ldrb	r3, [r3, #2]
 80012dc:	3301      	adds	r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <StopWatch_IncTime+0x80>)
 80012e2:	709a      	strb	r2, [r3, #2]
		return;
 80012e4:	e010      	b.n	8001308 <StopWatch_IncTime+0x78>
	}
	stopWatch.min = 0;
 80012e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <StopWatch_IncTime+0x80>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	709a      	strb	r2, [r3, #2]

	if (stopWatch.hour < 24-1) {
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <StopWatch_IncTime+0x80>)
 80012ee:	785b      	ldrb	r3, [r3, #1]
 80012f0:	2b16      	cmp	r3, #22
 80012f2:	d806      	bhi.n	8001302 <StopWatch_IncTime+0x72>
		stopWatch.hour++;
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <StopWatch_IncTime+0x80>)
 80012f6:	785b      	ldrb	r3, [r3, #1]
 80012f8:	3301      	adds	r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <StopWatch_IncTime+0x80>)
 80012fe:	705a      	strb	r2, [r3, #1]
		return;
 8001300:	e002      	b.n	8001308 <StopWatch_IncTime+0x78>
	}
	stopWatch.hour = 0;
 8001302:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <StopWatch_IncTime+0x80>)
 8001304:	2200      	movs	r2, #0
 8001306:	705a      	strb	r2, [r3, #1]
}
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	20000004 	.word	0x20000004

08001314 <TimeWatch_IncTimeCallBack>:
#include "timeWatch.h"

static watch_t timeWatch = {TIME_WATCH, 12,0,0,0};

void TimeWatch_IncTimeCallBack()
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	if (timeWatch.msec < 1000-1) {
 8001318:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 800131a:	889b      	ldrh	r3, [r3, #4]
 800131c:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001320:	4293      	cmp	r3, r2
 8001322:	d806      	bhi.n	8001332 <TimeWatch_IncTimeCallBack+0x1e>
		timeWatch.msec++;
 8001324:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 8001326:	889b      	ldrh	r3, [r3, #4]
 8001328:	3301      	adds	r3, #1
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 800132e:	809a      	strh	r2, [r3, #4]
		return;
 8001330:	e02c      	b.n	800138c <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.msec = 0;
 8001332:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 8001334:	2200      	movs	r2, #0
 8001336:	809a      	strh	r2, [r3, #4]

	if (timeWatch.sec < 60-1) {
 8001338:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 800133a:	78db      	ldrb	r3, [r3, #3]
 800133c:	2b3a      	cmp	r3, #58	@ 0x3a
 800133e:	d806      	bhi.n	800134e <TimeWatch_IncTimeCallBack+0x3a>
		timeWatch.sec++;
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 8001342:	78db      	ldrb	r3, [r3, #3]
 8001344:	3301      	adds	r3, #1
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 800134a:	70da      	strb	r2, [r3, #3]
		return;
 800134c:	e01e      	b.n	800138c <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.sec = 0;
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 8001350:	2200      	movs	r2, #0
 8001352:	70da      	strb	r2, [r3, #3]

	if (timeWatch.min < 60-1) {
 8001354:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 8001356:	789b      	ldrb	r3, [r3, #2]
 8001358:	2b3a      	cmp	r3, #58	@ 0x3a
 800135a:	d806      	bhi.n	800136a <TimeWatch_IncTimeCallBack+0x56>
		timeWatch.min++;
 800135c:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 800135e:	789b      	ldrb	r3, [r3, #2]
 8001360:	3301      	adds	r3, #1
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 8001366:	709a      	strb	r2, [r3, #2]
		return;
 8001368:	e010      	b.n	800138c <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.min = 0;
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 800136c:	2200      	movs	r2, #0
 800136e:	709a      	strb	r2, [r3, #2]

	if (timeWatch.hour < 24-1) {
 8001370:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 8001372:	785b      	ldrb	r3, [r3, #1]
 8001374:	2b16      	cmp	r3, #22
 8001376:	d806      	bhi.n	8001386 <TimeWatch_IncTimeCallBack+0x72>
		timeWatch.hour++;
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 800137a:	785b      	ldrb	r3, [r3, #1]
 800137c:	3301      	adds	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 8001382:	705a      	strb	r2, [r3, #1]
		return;
 8001384:	e002      	b.n	800138c <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.hour = 0;
 8001386:	4b03      	ldr	r3, [pc, #12]	@ (8001394 <TimeWatch_IncTimeCallBack+0x80>)
 8001388:	2200      	movs	r2, #0
 800138a:	705a      	strb	r2, [r3, #1]
}
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	2000000c 	.word	0x2000000c

08001398 <Button_Init>:
Button_Handler_t hBtnRunStop;
Button_Handler_t hBtnClear;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	4613      	mov	r3, r2
 80013a4:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	88fa      	ldrh	r2, [r7, #6]
 80013b0:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2201      	movs	r2, #1
 80013b6:	609a      	str	r2, [r3, #8]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <DHT11_Init>:

GPIO_TypeDef * dht11port;
uint32_t dht11pin;

void DHT11_Init(GPIO_TypeDef * port, uint16_t GPIO_Pin)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
	dht11port = port;
 80013d0:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <DHT11_Init+0x24>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6013      	str	r3, [r2, #0]
	dht11pin = GPIO_Pin;
 80013d6:	887b      	ldrh	r3, [r7, #2]
 80013d8:	4a04      	ldr	r2, [pc, #16]	@ (80013ec <DHT11_Init+0x28>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	20000298 	.word	0x20000298
 80013ec:	2000029c 	.word	0x2000029c

080013f0 <Set_Pin_Output>:

void Set_Pin_Output()
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = dht11pin;
 8001404:	4b09      	ldr	r3, [pc, #36]	@ (800142c <Set_Pin_Output+0x3c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	2301      	movs	r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(dht11port, &GPIO_InitStruct);
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <Set_Pin_Output+0x40>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	1d3a      	adds	r2, r7, #4
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f000 fe30 	bl	8002084 <HAL_GPIO_Init>
}
 8001424:	bf00      	nop
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000029c 	.word	0x2000029c
 8001430:	20000298 	.word	0x20000298

08001434 <Set_Pin_Input>:

void Set_Pin_Input()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = dht11pin;
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <Set_Pin_Input+0x38>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(dht11port, &GPIO_InitStruct);
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <Set_Pin_Input+0x3c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	1d3a      	adds	r2, r7, #4
 800145c:	4611      	mov	r1, r2
 800145e:	4618      	mov	r0, r3
 8001460:	f000 fe10 	bl	8002084 <HAL_GPIO_Init>
}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2000029c 	.word	0x2000029c
 8001470:	20000298 	.word	0x20000298

08001474 <dht_start>:

void dht_start()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(dht11port, dht11pin, RESET);
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <dht_start+0x38>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0c      	ldr	r2, [pc, #48]	@ (80014b0 <dht_start+0x3c>)
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	b291      	uxth	r1, r2
 8001482:	2200      	movs	r2, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f000 ff81 	bl	800238c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dht11port, dht11pin, SET);
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <dht_start+0x38>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a08      	ldr	r2, [pc, #32]	@ (80014b0 <dht_start+0x3c>)
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	b291      	uxth	r1, r2
 8001494:	2201      	movs	r2, #1
 8001496:	4618      	mov	r0, r3
 8001498:	f000 ff78 	bl	800238c <HAL_GPIO_WritePin>
	Set_Pin_Input();
 800149c:	f7ff ffca 	bl	8001434 <Set_Pin_Input>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80014a0:	2100      	movs	r1, #0
 80014a2:	4804      	ldr	r0, [pc, #16]	@ (80014b4 <dht_start+0x40>)
 80014a4:	f002 face 	bl	8003a44 <HAL_TIM_IC_Start_IT>
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000298 	.word	0x20000298
 80014b0:	2000029c 	.word	0x2000029c
 80014b4:	200001c4 	.word	0x200001c4

080014b8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
		static uint8_t index = 0;
		static uint32_t data[40];
	   if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7f1b      	ldrb	r3, [r3, #28]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d103      	bne.n	80014d0 <HAL_TIM_IC_CaptureCallback+0x18>
	   {
		   __HAL_TIM_SET_COUNTER(&htim4, 0);
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	@ 0x24
	   }

	   if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7f1b      	ldrb	r3, [r3, #28]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d11b      	bne.n	8001510 <HAL_TIM_IC_CaptureCallback+0x58>
	   {
		   if(HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) > 40)
 80014d8:	2104      	movs	r1, #4
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f002 ff90 	bl	8004400 <HAL_TIM_ReadCapturedValue>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b28      	cmp	r3, #40	@ 0x28
 80014e4:	d907      	bls.n	80014f6 <HAL_TIM_IC_CaptureCallback+0x3e>
			   {
			   data[index] = 1;
 80014e6:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <HAL_TIM_IC_CaptureCallback+0x80>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4619      	mov	r1, r3
 80014ec:	4b13      	ldr	r3, [pc, #76]	@ (800153c <HAL_TIM_IC_CaptureCallback+0x84>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80014f4:	e006      	b.n	8001504 <HAL_TIM_IC_CaptureCallback+0x4c>
			   }
		   else {
			   data[index] = 0;
 80014f6:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <HAL_TIM_IC_CaptureCallback+0x80>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <HAL_TIM_IC_CaptureCallback+0x84>)
 80014fe:	2200      	movs	r2, #0
 8001500:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		   }
		   index++;
 8001504:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <HAL_TIM_IC_CaptureCallback+0x80>)
 800150e:	701a      	strb	r2, [r3, #0]
	   }


	   if (index < 35) {
 8001510:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b22      	cmp	r3, #34	@ 0x22
 8001516:	d909      	bls.n	800152c <HAL_TIM_IC_CaptureCallback+0x74>
	       // 기록
	   } else {
	       // 수신 완료 처리
	       HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001518:	2100      	movs	r1, #0
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f002 fbac 	bl	8003c78 <HAL_TIM_IC_Stop_IT>
	       HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_2);
 8001520:	2104      	movs	r1, #4
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f002 fba8 	bl	8003c78 <HAL_TIM_IC_Stop_IT>
	       Set_Pin_Output();
 8001528:	f7ff ff62 	bl	80013f0 <Set_Pin_Output>
	   }

}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200001c4 	.word	0x200001c4
 8001538:	200002a0 	.word	0x200002a0
 800153c:	200002a4 	.word	0x200002a4

08001540 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 8001544:	4b80      	ldr	r3, [pc, #512]	@ (8001748 <FND_DispDataCallBack+0x208>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	425a      	negs	r2, r3
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	f002 0207 	and.w	r2, r2, #7
 8001554:	bf58      	it	pl
 8001556:	4253      	negpl	r3, r2
 8001558:	4a7b      	ldr	r2, [pc, #492]	@ (8001748 <FND_DispDataCallBack+0x208>)
 800155a:	6013      	str	r3, [r2, #0]

	switch(digitPos)
 800155c:	4b7a      	ldr	r3, [pc, #488]	@ (8001748 <FND_DispDataCallBack+0x208>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b07      	cmp	r3, #7
 8001562:	f200 80ee 	bhi.w	8001742 <FND_DispDataCallBack+0x202>
 8001566:	a201      	add	r2, pc, #4	@ (adr r2, 800156c <FND_DispDataCallBack+0x2c>)
 8001568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156c:	0800158d 	.word	0x0800158d
 8001570:	080015bb 	.word	0x080015bb
 8001574:	080015f3 	.word	0x080015f3
 8001578:	0800162b 	.word	0x0800162b
 800157c:	08001663 	.word	0x08001663
 8001580:	0800169b 	.word	0x0800169b
 8001584:	080016d3 	.word	0x080016d3
 8001588:	0800170b 	.word	0x0800170b
	{
	case DIGIT_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 800158c:	f000 f900 	bl	8001790 <FND_DispOffAll>
		FND_DispDigit(fndDispNum%10);
 8001590:	4b6e      	ldr	r3, [pc, #440]	@ (800174c <FND_DispDataCallBack+0x20c>)
 8001592:	881a      	ldrh	r2, [r3, #0]
 8001594:	4b6e      	ldr	r3, [pc, #440]	@ (8001750 <FND_DispDataCallBack+0x210>)
 8001596:	fba3 1302 	umull	r1, r3, r3, r2
 800159a:	08d9      	lsrs	r1, r3, #3
 800159c:	460b      	mov	r3, r1
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f913 	bl	80017d4 <FND_DispDigit>
		FND_DispOn(digitPos);
 80015ae:	4b66      	ldr	r3, [pc, #408]	@ (8001748 <FND_DispDataCallBack+0x208>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f8d4 	bl	8001760 <FND_DispOn>
		break;
 80015b8:	e0c3      	b.n	8001742 <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80015ba:	f000 f8e9 	bl	8001790 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/10%10);
 80015be:	4b63      	ldr	r3, [pc, #396]	@ (800174c <FND_DispDataCallBack+0x20c>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	4a63      	ldr	r2, [pc, #396]	@ (8001750 <FND_DispDataCallBack+0x210>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	08db      	lsrs	r3, r3, #3
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4b60      	ldr	r3, [pc, #384]	@ (8001750 <FND_DispDataCallBack+0x210>)
 80015ce:	fba3 1302 	umull	r1, r3, r3, r2
 80015d2:	08d9      	lsrs	r1, r3, #3
 80015d4:	460b      	mov	r3, r1
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f8f7 	bl	80017d4 <FND_DispDigit>
		FND_DispOn(digitPos);
 80015e6:	4b58      	ldr	r3, [pc, #352]	@ (8001748 <FND_DispDataCallBack+0x208>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f8b8 	bl	8001760 <FND_DispOn>
		break;
 80015f0:	e0a7      	b.n	8001742 <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80015f2:	f000 f8cd 	bl	8001790 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/100%10);
 80015f6:	4b55      	ldr	r3, [pc, #340]	@ (800174c <FND_DispDataCallBack+0x20c>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	4a56      	ldr	r2, [pc, #344]	@ (8001754 <FND_DispDataCallBack+0x214>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	095b      	lsrs	r3, r3, #5
 8001602:	b29a      	uxth	r2, r3
 8001604:	4b52      	ldr	r3, [pc, #328]	@ (8001750 <FND_DispDataCallBack+0x210>)
 8001606:	fba3 1302 	umull	r1, r3, r3, r2
 800160a:	08d9      	lsrs	r1, r3, #3
 800160c:	460b      	mov	r3, r1
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	b29b      	uxth	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f8db 	bl	80017d4 <FND_DispDigit>
		FND_DispOn(digitPos);
 800161e:	4b4a      	ldr	r3, [pc, #296]	@ (8001748 <FND_DispDataCallBack+0x208>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f89c 	bl	8001760 <FND_DispOn>
		break;
 8001628:	e08b      	b.n	8001742 <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 800162a:	f000 f8b1 	bl	8001790 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/1000%10);
 800162e:	4b47      	ldr	r3, [pc, #284]	@ (800174c <FND_DispDataCallBack+0x20c>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	4a49      	ldr	r2, [pc, #292]	@ (8001758 <FND_DispDataCallBack+0x218>)
 8001634:	fba2 2303 	umull	r2, r3, r2, r3
 8001638:	099b      	lsrs	r3, r3, #6
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b44      	ldr	r3, [pc, #272]	@ (8001750 <FND_DispDataCallBack+0x210>)
 800163e:	fba3 1302 	umull	r1, r3, r3, r2
 8001642:	08d9      	lsrs	r1, r3, #3
 8001644:	460b      	mov	r3, r1
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	b29b      	uxth	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f8bf 	bl	80017d4 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001656:	4b3c      	ldr	r3, [pc, #240]	@ (8001748 <FND_DispDataCallBack+0x208>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f880 	bl	8001760 <FND_DispOn>
		break;
 8001660:	e06f      	b.n	8001742 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001662:	f000 f895 	bl	8001790 <FND_DispOffAll>
		if (fndDispDp & (1<<0)){
 8001666:	4b3d      	ldr	r3, [pc, #244]	@ (800175c <FND_DispDataCallBack+0x21c>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 8001672:	200a      	movs	r0, #10
 8001674:	f000 f8ae 	bl	80017d4 <FND_DispDigit>
 8001678:	e002      	b.n	8001680 <FND_DispDataCallBack+0x140>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 800167a:	200b      	movs	r0, #11
 800167c:	f000 f8aa 	bl	80017d4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001680:	4b31      	ldr	r3, [pc, #196]	@ (8001748 <FND_DispDataCallBack+0x208>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	425a      	negs	r2, r3
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	f002 0203 	and.w	r2, r2, #3
 800168e:	bf58      	it	pl
 8001690:	4253      	negpl	r3, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f864 	bl	8001760 <FND_DispOn>
		break;
 8001698:	e053      	b.n	8001742 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 800169a:	f000 f879 	bl	8001790 <FND_DispOffAll>
		if (fndDispDp & (1<<1)){
 800169e:	4b2f      	ldr	r3, [pc, #188]	@ (800175c <FND_DispDataCallBack+0x21c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 80016aa:	200a      	movs	r0, #10
 80016ac:	f000 f892 	bl	80017d4 <FND_DispDigit>
 80016b0:	e002      	b.n	80016b8 <FND_DispDataCallBack+0x178>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 80016b2:	200b      	movs	r0, #11
 80016b4:	f000 f88e 	bl	80017d4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80016b8:	4b23      	ldr	r3, [pc, #140]	@ (8001748 <FND_DispDataCallBack+0x208>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	425a      	negs	r2, r3
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	f002 0203 	and.w	r2, r2, #3
 80016c6:	bf58      	it	pl
 80016c8:	4253      	negpl	r3, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f848 	bl	8001760 <FND_DispOn>
		break;
 80016d0:	e037      	b.n	8001742 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80016d2:	f000 f85d 	bl	8001790 <FND_DispOffAll>
		if (fndDispDp & (1<<2)){
 80016d6:	4b21      	ldr	r3, [pc, #132]	@ (800175c <FND_DispDataCallBack+0x21c>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 80016e2:	200a      	movs	r0, #10
 80016e4:	f000 f876 	bl	80017d4 <FND_DispDigit>
 80016e8:	e002      	b.n	80016f0 <FND_DispDataCallBack+0x1b0>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 80016ea:	200b      	movs	r0, #11
 80016ec:	f000 f872 	bl	80017d4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80016f0:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <FND_DispDataCallBack+0x208>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	425a      	negs	r2, r3
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	f002 0203 	and.w	r2, r2, #3
 80016fe:	bf58      	it	pl
 8001700:	4253      	negpl	r3, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f82c 	bl	8001760 <FND_DispOn>
		break;
 8001708:	e01b      	b.n	8001742 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 800170a:	f000 f841 	bl	8001790 <FND_DispOffAll>
		if (fndDispDp & (1<<3)){
 800170e:	4b13      	ldr	r3, [pc, #76]	@ (800175c <FND_DispDataCallBack+0x21c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 800171a:	200a      	movs	r0, #10
 800171c:	f000 f85a 	bl	80017d4 <FND_DispDigit>
 8001720:	e002      	b.n	8001728 <FND_DispDataCallBack+0x1e8>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8001722:	200b      	movs	r0, #11
 8001724:	f000 f856 	bl	80017d4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001728:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <FND_DispDataCallBack+0x208>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	425a      	negs	r2, r3
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	f002 0203 	and.w	r2, r2, #3
 8001736:	bf58      	it	pl
 8001738:	4253      	negpl	r3, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f810 	bl	8001760 <FND_DispOn>
		break;
 8001740:	bf00      	nop
	}
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000348 	.word	0x20000348
 800174c:	20000344 	.word	0x20000344
 8001750:	cccccccd 	.word	0xcccccccd
 8001754:	51eb851f 	.word	0x51eb851f
 8001758:	10624dd3 	.word	0x10624dd3
 800175c:	20000346 	.word	0x20000346

08001760 <FND_DispOn>:
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
}
*/

void FND_DispOn(int fndPos)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, RESET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8001768:	4a08      	ldr	r2, [pc, #32]	@ (800178c <FND_DispOn+0x2c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001770:	4a06      	ldr	r2, [pc, #24]	@ (800178c <FND_DispOn+0x2c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4413      	add	r3, r2
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	b29b      	uxth	r3, r3
 800177c:	2200      	movs	r2, #0
 800177e:	4619      	mov	r1, r3
 8001780:	f000 fe04 	bl	800238c <HAL_GPIO_WritePin>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000014 	.word	0x20000014

08001790 <FND_DispOffAll>:

void FND_DispOffAll()
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	e010      	b.n	80017be <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 800179c:	4a0c      	ldr	r2, [pc, #48]	@ (80017d0 <FND_DispOffAll+0x40>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80017a4:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <FND_DispOffAll+0x40>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	2201      	movs	r2, #1
 80017b2:	4619      	mov	r1, r3
 80017b4:	f000 fdea 	bl	800238c <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3301      	adds	r3, #1
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	ddeb      	ble.n	800179c <FND_DispOffAll+0xc>
	}
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000014 	.word	0x20000014

080017d4 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 80017de:	4a1f      	ldr	r2, [pc, #124]	@ (800185c <FND_DispDigit+0x88>)
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80017e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    0x6F,  // 9 => 01101111
	    0x80,  // 10(dp) => 10000000
	    0x00,  // 11(off)=> 00000000
	};

	for (int i=0; i<8; i++) {
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	e02c      	b.n	800184a <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	3318      	adds	r3, #24
 80017f4:	443b      	add	r3, r7
 80017f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80017fa:	461a      	mov	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	fa42 f303 	asr.w	r3, r2, r3
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10e      	bne.n	8001828 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 800180a:	4a15      	ldr	r2, [pc, #84]	@ (8001860 <FND_DispDigit+0x8c>)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001812:	4a13      	ldr	r2, [pc, #76]	@ (8001860 <FND_DispDigit+0x8c>)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4413      	add	r3, r2
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	b29b      	uxth	r3, r3
 800181e:	2200      	movs	r2, #0
 8001820:	4619      	mov	r1, r3
 8001822:	f000 fdb3 	bl	800238c <HAL_GPIO_WritePin>
 8001826:	e00d      	b.n	8001844 <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 8001828:	4a0d      	ldr	r2, [pc, #52]	@ (8001860 <FND_DispDigit+0x8c>)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001830:	4a0b      	ldr	r2, [pc, #44]	@ (8001860 <FND_DispDigit+0x8c>)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	b29b      	uxth	r3, r3
 800183c:	2201      	movs	r2, #1
 800183e:	4619      	mov	r1, r3
 8001840:	f000 fda4 	bl	800238c <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b07      	cmp	r3, #7
 800184e:	ddcf      	ble.n	80017f0 <FND_DispDigit+0x1c>
		}
	}
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	08005dec 	.word	0x08005dec
 8001860:	20000034 	.word	0x20000034

08001864 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 800186c:	4a18      	ldr	r2, [pc, #96]	@ (80018d0 <LCD_Init+0x6c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 8001872:	2032      	movs	r0, #50	@ 0x32
 8001874:	f000 fa3e 	bl	8001cf4 <HAL_Delay>
	LCD_cmdMode();
 8001878:	f000 f852 	bl	8001920 <LCD_cmdMode>
	LCD_writeMode();
 800187c:	f000 f874 	bl	8001968 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 8001880:	2030      	movs	r0, #48	@ 0x30
 8001882:	f000 f8a7 	bl	80019d4 <LCD_sendNibbleData>
	HAL_Delay(5);
 8001886:	2005      	movs	r0, #5
 8001888:	f000 fa34 	bl	8001cf4 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 800188c:	2030      	movs	r0, #48	@ 0x30
 800188e:	f000 f8a1 	bl	80019d4 <LCD_sendNibbleData>
	HAL_Delay(1);
 8001892:	2001      	movs	r0, #1
 8001894:	f000 fa2e 	bl	8001cf4 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001898:	2030      	movs	r0, #48	@ 0x30
 800189a:	f000 f89b 	bl	80019d4 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 800189e:	2020      	movs	r0, #32
 80018a0:	f000 f898 	bl	80019d4 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 80018a4:	2028      	movs	r0, #40	@ 0x28
 80018a6:	f000 f8b9 	bl	8001a1c <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 80018aa:	2008      	movs	r0, #8
 80018ac:	f000 f8b6 	bl	8001a1c <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 80018b0:	2001      	movs	r0, #1
 80018b2:	f000 f8b3 	bl	8001a1c <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 80018b6:	2006      	movs	r0, #6
 80018b8:	f000 f8b0 	bl	8001a1c <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 80018bc:	200c      	movs	r0, #12
 80018be:	f000 f8ad 	bl	8001a1c <LCD_sendData>
	LCD_backLightOn();
 80018c2:	f000 f81d 	bl	8001900 <LCD_backLightOn>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000350 	.word	0x20000350

080018d4 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af02      	add	r7, sp, #8
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 80018de:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <LCD_sendI2C+0x28>)
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	1dfa      	adds	r2, r7, #7
 80018e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2301      	movs	r3, #1
 80018ec:	214e      	movs	r1, #78	@ 0x4e
 80018ee:	f000 feab 	bl	8002648 <HAL_I2C_Master_Transmit>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000350 	.word	0x20000350

08001900 <LCD_backLightOn>:

void LCD_backLightOn()
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <LCD_backLightOn+0x1c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4b03      	ldr	r3, [pc, #12]	@ (800191c <LCD_backLightOn+0x1c>)
 8001910:	701a      	strb	r2, [r3, #0]
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	2000034c 	.word	0x2000034c

08001920 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <LCD_cmdMode+0x20>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <LCD_cmdMode+0x20>)
 8001930:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001932:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <LCD_cmdMode+0x20>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ffcc 	bl	80018d4 <LCD_sendI2C>
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2000034c 	.word	0x2000034c

08001944 <LCD_charMode>:

void LCD_charMode()
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <LCD_charMode+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <LCD_charMode+0x20>)
 8001954:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001956:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <LCD_charMode+0x20>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ffba 	bl	80018d4 <LCD_sendI2C>
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	2000034c 	.word	0x2000034c

08001968 <LCD_writeMode>:

void LCD_writeMode()
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <LCD_writeMode+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	f023 0302 	bic.w	r3, r3, #2
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <LCD_writeMode+0x20>)
 8001978:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800197a:	4b03      	ldr	r3, [pc, #12]	@ (8001988 <LCD_writeMode+0x20>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ffa8 	bl	80018d4 <LCD_sendI2C>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2000034c 	.word	0x2000034c

0800198c <LCD_E_High>:

void LCD_E_High()
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <LCD_E_High+0x20>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <LCD_E_High+0x20>)
 800199c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800199e:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <LCD_E_High+0x20>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ff96 	bl	80018d4 <LCD_sendI2C>
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000034c 	.word	0x2000034c

080019b0 <LCD_E_Low>:

void LCD_E_Low()
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <LCD_E_Low+0x20>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	f023 0304 	bic.w	r3, r3, #4
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <LCD_E_Low+0x20>)
 80019c0:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80019c2:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <LCD_E_Low+0x20>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff84 	bl	80018d4 <LCD_sendI2C>
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	2000034c 	.word	0x2000034c

080019d4 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 80019de:	f7ff ffd5 	bl	800198c <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	f023 030f 	bic.w	r3, r3, #15
 80019ea:	b25a      	sxtb	r2, r3
 80019ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <LCD_sendNibbleData+0x44>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b25b      	sxtb	r3, r3
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <LCD_sendNibbleData+0x44>)
 8001a00:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001a02:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <LCD_sendNibbleData+0x44>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ff64 	bl	80018d4 <LCD_sendI2C>
	LCD_E_Low();
 8001a0c:	f7ff ffd0 	bl	80019b0 <LCD_E_Low>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	2000034c 	.word	0x2000034c

08001a1c <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ffd3 	bl	80019d4 <LCD_sendNibbleData>

	data = data << 4;
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ffcc 	bl	80019d4 <LCD_sendNibbleData>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8001a4e:	f7ff ff8b 	bl	8001968 <LCD_writeMode>
	LCD_cmdMode();
 8001a52:	f7ff ff65 	bl	8001920 <LCD_cmdMode>
	LCD_sendData(data);
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ffdf 	bl	8001a1c <LCD_sendData>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8001a70:	f7ff ff7a 	bl	8001968 <LCD_writeMode>
	LCD_charMode();
 8001a74:	f7ff ff66 	bl	8001944 <LCD_charMode>
	LCD_sendData(data);
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ffce 	bl	8001a1c <LCD_sendData>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <LCD_writeString>:

void LCD_writeString(char *str)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++) {
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	e009      	b.n	8001aaa <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ffe1 	bl	8001a66 <LCD_writeCharData>
	for (int i=0; str[i]; i++) {
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ef      	bne.n	8001a96 <LCD_writeString+0xe>
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	460a      	mov	r2, r1
 8001aca:	71fb      	strb	r3, [r7, #7]
 8001acc:	4613      	mov	r3, r2
 8001ace:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8001ad0:	79bb      	ldrb	r3, [r7, #6]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	019b      	lsls	r3, r3, #6
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	79bb      	ldrb	r3, [r7, #6]
 8001ae8:	4413      	add	r3, r2
 8001aea:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	3b80      	subs	r3, #128	@ 0x80
 8001af0:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8001af2:	7bbb      	ldrb	r3, [r7, #14]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ffa5 	bl	8001a44 <LCD_writeCmdData>
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	603a      	str	r2, [r7, #0]
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 8001b12:	79ba      	ldrb	r2, [r7, #6]
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ffd1 	bl	8001ac0 <LCD_gotoXY>
	LCD_writeString(str);
 8001b1e:	6838      	ldr	r0, [r7, #0]
 8001b20:	f7ff ffb2 	bl	8001a88 <LCD_writeString>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <Buzzer_Init>:

static TIM_HandleTypeDef *hbuzzerTim;
static uint32_t hbuzzerTimChannel;

void Buzzer_Init(TIM_HandleTypeDef *hTim,uint32_t Channel)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
	hbuzzerTim = hTim;
 8001b36:	4a06      	ldr	r2, [pc, #24]	@ (8001b50 <Buzzer_Init+0x24>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6013      	str	r3, [r2, #0]
	hbuzzerTimChannel = Channel;
 8001b3c:	4a05      	ldr	r2, [pc, #20]	@ (8001b54 <Buzzer_Init+0x28>)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6013      	str	r3, [r2, #0]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000354 	.word	0x20000354
 8001b54:	20000358 	.word	0x20000358

08001b58 <motor_Init>:

static TIM_HandleTypeDef *hmotorTim;
static uint32_t hmotorTimChannel;

void motor_Init(TIM_HandleTypeDef *hTim,uint32_t Channel)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
	hmotorTim = hTim;
 8001b62:	4a06      	ldr	r2, [pc, #24]	@ (8001b7c <motor_Init+0x24>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6013      	str	r3, [r2, #0]
	hmotorTimChannel = Channel;
 8001b68:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <motor_Init+0x28>)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6013      	str	r3, [r2, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	2000035c 	.word	0x2000035c
 8001b80:	20000360 	.word	0x20000360

08001b84 <motor_SetDuty>:


void motor_SetDuty(uint32_t Duty)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	if(Duty > 100) Duty = 100;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b64      	cmp	r3, #100	@ 0x64
 8001b90:	d901      	bls.n	8001b96 <motor_SetDuty+0x12>
 8001b92:	2364      	movs	r3, #100	@ 0x64
 8001b94:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(hmotorTim,hmotorTimChannel,Duty);
 8001b96:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <motor_SetDuty+0x64>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d105      	bne.n	8001baa <motor_SetDuty+0x26>
 8001b9e:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <motor_SetDuty+0x68>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ba8:	e018      	b.n	8001bdc <motor_SetDuty+0x58>
	__HAL_TIM_SET_COMPARE(hmotorTim,hmotorTimChannel,Duty);
 8001baa:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <motor_SetDuty+0x64>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d105      	bne.n	8001bbe <motor_SetDuty+0x3a>
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <motor_SetDuty+0x68>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001bbc:	e00e      	b.n	8001bdc <motor_SetDuty+0x58>
	__HAL_TIM_SET_COMPARE(hmotorTim,hmotorTimChannel,Duty);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <motor_SetDuty+0x64>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d105      	bne.n	8001bd2 <motor_SetDuty+0x4e>
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <motor_SetDuty+0x68>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001bd0:	e004      	b.n	8001bdc <motor_SetDuty+0x58>
	__HAL_TIM_SET_COMPARE(hmotorTim,hmotorTimChannel,Duty);
 8001bd2:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <motor_SetDuty+0x68>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	20000360 	.word	0x20000360
 8001bec:	2000035c 	.word	0x2000035c

08001bf0 <motor_Start>:

void motor_Start()
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hmotorTim, hmotorTimChannel);
 8001bf4:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <motor_Start+0x18>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a04      	ldr	r2, [pc, #16]	@ (8001c0c <motor_Start+0x1c>)
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f001 fe16 	bl	8003830 <HAL_TIM_PWM_Start>
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	2000035c 	.word	0x2000035c
 8001c0c:	20000360 	.word	0x20000360

08001c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c14:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <HAL_Init+0x40>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0d      	ldr	r2, [pc, #52]	@ (8001c50 <HAL_Init+0x40>)
 8001c1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c20:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <HAL_Init+0x40>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <HAL_Init+0x40>)
 8001c26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c2c:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <HAL_Init+0x40>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a07      	ldr	r2, [pc, #28]	@ (8001c50 <HAL_Init+0x40>)
 8001c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f000 f94f 	bl	8001edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3e:	200f      	movs	r0, #15
 8001c40:	f000 f808 	bl	8001c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c44:	f7fe fe06 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023c00 	.word	0x40023c00

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <HAL_InitTick+0x54>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <HAL_InitTick+0x58>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f967 	bl	8001f46 <HAL_SYSTICK_Config>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00e      	b.n	8001ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d80a      	bhi.n	8001c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f000 f92f 	bl	8001ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c94:	4a06      	ldr	r2, [pc, #24]	@ (8001cb0 <HAL_InitTick+0x5c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	20000078 	.word	0x20000078
 8001cb0:	20000074 	.word	0x20000074

08001cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_IncTick+0x20>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_IncTick+0x24>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <HAL_IncTick+0x24>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000078 	.word	0x20000078
 8001cd8:	20000364 	.word	0x20000364

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	@ (8001cf0 <HAL_GetTick+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000364 	.word	0x20000364

08001cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff ffee 	bl	8001cdc <HAL_GetTick>
 8001d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0c:	d005      	beq.n	8001d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <HAL_Delay+0x44>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d1a:	bf00      	nop
 8001d1c:	f7ff ffde 	bl	8001cdc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d8f7      	bhi.n	8001d1c <HAL_Delay+0x28>
  {
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000078 	.word	0x20000078

08001d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	@ (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	@ (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	db0b      	blt.n	8001dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	f003 021f 	and.w	r2, r3, #31
 8001db8:	4907      	ldr	r1, [pc, #28]	@ (8001dd8 <__NVIC_EnableIRQ+0x38>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000e100 	.word	0xe000e100

08001ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db0a      	blt.n	8001e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	490c      	ldr	r1, [pc, #48]	@ (8001e28 <__NVIC_SetPriority+0x4c>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	0112      	lsls	r2, r2, #4
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e04:	e00a      	b.n	8001e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4908      	ldr	r1, [pc, #32]	@ (8001e2c <__NVIC_SetPriority+0x50>)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	3b04      	subs	r3, #4
 8001e14:	0112      	lsls	r2, r2, #4
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	440b      	add	r3, r1
 8001e1a:	761a      	strb	r2, [r3, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000e100 	.word	0xe000e100
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	@ 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f1c3 0307 	rsb	r3, r3, #7
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	bf28      	it	cs
 8001e4e:	2304      	movcs	r3, #4
 8001e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3304      	adds	r3, #4
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d902      	bls.n	8001e60 <NVIC_EncodePriority+0x30>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3b03      	subs	r3, #3
 8001e5e:	e000      	b.n	8001e62 <NVIC_EncodePriority+0x32>
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	401a      	ands	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43d9      	mvns	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	4313      	orrs	r3, r2
         );
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3724      	adds	r7, #36	@ 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ea8:	d301      	bcc.n	8001eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00f      	b.n	8001ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <SysTick_Config+0x40>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb6:	210f      	movs	r1, #15
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	f7ff ff8e 	bl	8001ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec0:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <SysTick_Config+0x40>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec6:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <SysTick_Config+0x40>)
 8001ec8:	2207      	movs	r2, #7
 8001eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	e000e010 	.word	0xe000e010

08001edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff29 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f04:	f7ff ff3e 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f7ff ff8e 	bl	8001e30 <NVIC_EncodePriority>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff5d 	bl	8001ddc <__NVIC_SetPriority>
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff31 	bl	8001da0 <__NVIC_EnableIRQ>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffa2 	bl	8001e98 <SysTick_Config>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f6c:	f7ff feb6 	bl	8001cdc <HAL_GetTick>
 8001f70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d008      	beq.n	8001f90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2280      	movs	r2, #128	@ 0x80
 8001f82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e052      	b.n	8002036 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0216 	bic.w	r2, r2, #22
 8001f9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695a      	ldr	r2, [r3, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d103      	bne.n	8001fc0 <HAL_DMA_Abort+0x62>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0208 	bic.w	r2, r2, #8
 8001fce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe0:	e013      	b.n	800200a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe2:	f7ff fe7b 	bl	8001cdc <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d90c      	bls.n	800200a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e015      	b.n	8002036 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1e4      	bne.n	8001fe2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201c:	223f      	movs	r2, #63	@ 0x3f
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d004      	beq.n	800205c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2280      	movs	r2, #128	@ 0x80
 8002056:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e00c      	b.n	8002076 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2205      	movs	r2, #5
 8002060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	@ 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	e159      	b.n	8002354 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	f040 8148 	bne.w	800234e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d005      	beq.n	80020d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d130      	bne.n	8002138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 0201 	and.w	r2, r3, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b03      	cmp	r3, #3
 8002142:	d017      	beq.n	8002174 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d123      	bne.n	80021c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	08da      	lsrs	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3208      	adds	r2, #8
 8002188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	220f      	movs	r2, #15
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	08da      	lsrs	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3208      	adds	r2, #8
 80021c2:	69b9      	ldr	r1, [r7, #24]
 80021c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0203 	and.w	r2, r3, #3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80a2 	beq.w	800234e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b57      	ldr	r3, [pc, #348]	@ (800236c <HAL_GPIO_Init+0x2e8>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	4a56      	ldr	r2, [pc, #344]	@ (800236c <HAL_GPIO_Init+0x2e8>)
 8002214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002218:	6453      	str	r3, [r2, #68]	@ 0x44
 800221a:	4b54      	ldr	r3, [pc, #336]	@ (800236c <HAL_GPIO_Init+0x2e8>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002226:	4a52      	ldr	r2, [pc, #328]	@ (8002370 <HAL_GPIO_Init+0x2ec>)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3302      	adds	r3, #2
 800222e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	220f      	movs	r2, #15
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a49      	ldr	r2, [pc, #292]	@ (8002374 <HAL_GPIO_Init+0x2f0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d019      	beq.n	8002286 <HAL_GPIO_Init+0x202>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a48      	ldr	r2, [pc, #288]	@ (8002378 <HAL_GPIO_Init+0x2f4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d013      	beq.n	8002282 <HAL_GPIO_Init+0x1fe>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a47      	ldr	r2, [pc, #284]	@ (800237c <HAL_GPIO_Init+0x2f8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00d      	beq.n	800227e <HAL_GPIO_Init+0x1fa>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a46      	ldr	r2, [pc, #280]	@ (8002380 <HAL_GPIO_Init+0x2fc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <HAL_GPIO_Init+0x1f6>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a45      	ldr	r2, [pc, #276]	@ (8002384 <HAL_GPIO_Init+0x300>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_GPIO_Init+0x1f2>
 8002272:	2304      	movs	r3, #4
 8002274:	e008      	b.n	8002288 <HAL_GPIO_Init+0x204>
 8002276:	2307      	movs	r3, #7
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x204>
 800227a:	2303      	movs	r3, #3
 800227c:	e004      	b.n	8002288 <HAL_GPIO_Init+0x204>
 800227e:	2302      	movs	r3, #2
 8002280:	e002      	b.n	8002288 <HAL_GPIO_Init+0x204>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_GPIO_Init+0x204>
 8002286:	2300      	movs	r3, #0
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	f002 0203 	and.w	r2, r2, #3
 800228e:	0092      	lsls	r2, r2, #2
 8002290:	4093      	lsls	r3, r2
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002298:	4935      	ldr	r1, [pc, #212]	@ (8002370 <HAL_GPIO_Init+0x2ec>)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	3302      	adds	r3, #2
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a6:	4b38      	ldr	r3, [pc, #224]	@ (8002388 <HAL_GPIO_Init+0x304>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002388 <HAL_GPIO_Init+0x304>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002388 <HAL_GPIO_Init+0x304>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f4:	4a24      	ldr	r2, [pc, #144]	@ (8002388 <HAL_GPIO_Init+0x304>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022fa:	4b23      	ldr	r3, [pc, #140]	@ (8002388 <HAL_GPIO_Init+0x304>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800231e:	4a1a      	ldr	r2, [pc, #104]	@ (8002388 <HAL_GPIO_Init+0x304>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002324:	4b18      	ldr	r3, [pc, #96]	@ (8002388 <HAL_GPIO_Init+0x304>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002348:	4a0f      	ldr	r2, [pc, #60]	@ (8002388 <HAL_GPIO_Init+0x304>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3301      	adds	r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b0f      	cmp	r3, #15
 8002358:	f67f aea2 	bls.w	80020a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3724      	adds	r7, #36	@ 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40013800 	.word	0x40013800
 8002374:	40020000 	.word	0x40020000
 8002378:	40020400 	.word	0x40020400
 800237c:	40020800 	.word	0x40020800
 8002380:	40020c00 	.word	0x40020c00
 8002384:	40021000 	.word	0x40021000
 8002388:	40013c00 	.word	0x40013c00

0800238c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]
 8002398:	4613      	mov	r3, r2
 800239a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800239c:	787b      	ldrb	r3, [r7, #1]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a2:	887a      	ldrh	r2, [r7, #2]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023a8:	e003      	b.n	80023b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023aa:	887b      	ldrh	r3, [r7, #2]
 80023ac:	041a      	lsls	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	619a      	str	r2, [r3, #24]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e12b      	b.n	800262a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe f962 	bl	80006b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2224      	movs	r2, #36	@ 0x24
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002412:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002422:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002424:	f001 f8da 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 8002428:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4a81      	ldr	r2, [pc, #516]	@ (8002634 <HAL_I2C_Init+0x274>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d807      	bhi.n	8002444 <HAL_I2C_Init+0x84>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4a80      	ldr	r2, [pc, #512]	@ (8002638 <HAL_I2C_Init+0x278>)
 8002438:	4293      	cmp	r3, r2
 800243a:	bf94      	ite	ls
 800243c:	2301      	movls	r3, #1
 800243e:	2300      	movhi	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e006      	b.n	8002452 <HAL_I2C_Init+0x92>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4a7d      	ldr	r2, [pc, #500]	@ (800263c <HAL_I2C_Init+0x27c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	bf94      	ite	ls
 800244c:	2301      	movls	r3, #1
 800244e:	2300      	movhi	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e0e7      	b.n	800262a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4a78      	ldr	r2, [pc, #480]	@ (8002640 <HAL_I2C_Init+0x280>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	0c9b      	lsrs	r3, r3, #18
 8002464:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	430a      	orrs	r2, r1
 8002478:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a6a      	ldr	r2, [pc, #424]	@ (8002634 <HAL_I2C_Init+0x274>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d802      	bhi.n	8002494 <HAL_I2C_Init+0xd4>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	3301      	adds	r3, #1
 8002492:	e009      	b.n	80024a8 <HAL_I2C_Init+0xe8>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	4a69      	ldr	r2, [pc, #420]	@ (8002644 <HAL_I2C_Init+0x284>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	099b      	lsrs	r3, r3, #6
 80024a6:	3301      	adds	r3, #1
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	430b      	orrs	r3, r1
 80024ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	495c      	ldr	r1, [pc, #368]	@ (8002634 <HAL_I2C_Init+0x274>)
 80024c4:	428b      	cmp	r3, r1
 80024c6:	d819      	bhi.n	80024fc <HAL_I2C_Init+0x13c>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1e59      	subs	r1, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80024d6:	1c59      	adds	r1, r3, #1
 80024d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024dc:	400b      	ands	r3, r1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_I2C_Init+0x138>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1e59      	subs	r1, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f0:	3301      	adds	r3, #1
 80024f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f6:	e051      	b.n	800259c <HAL_I2C_Init+0x1dc>
 80024f8:	2304      	movs	r3, #4
 80024fa:	e04f      	b.n	800259c <HAL_I2C_Init+0x1dc>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d111      	bne.n	8002528 <HAL_I2C_Init+0x168>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1e58      	subs	r0, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	440b      	add	r3, r1
 8002512:	fbb0 f3f3 	udiv	r3, r0, r3
 8002516:	3301      	adds	r3, #1
 8002518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	e012      	b.n	800254e <HAL_I2C_Init+0x18e>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1e58      	subs	r0, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	0099      	lsls	r1, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	fbb0 f3f3 	udiv	r3, r0, r3
 800253e:	3301      	adds	r3, #1
 8002540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_I2C_Init+0x196>
 8002552:	2301      	movs	r3, #1
 8002554:	e022      	b.n	800259c <HAL_I2C_Init+0x1dc>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10e      	bne.n	800257c <HAL_I2C_Init+0x1bc>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1e58      	subs	r0, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6859      	ldr	r1, [r3, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	440b      	add	r3, r1
 800256c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002570:	3301      	adds	r3, #1
 8002572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800257a:	e00f      	b.n	800259c <HAL_I2C_Init+0x1dc>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1e58      	subs	r0, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	0099      	lsls	r1, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002592:	3301      	adds	r3, #1
 8002594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002598:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	6809      	ldr	r1, [r1, #0]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6911      	ldr	r1, [r2, #16]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68d2      	ldr	r2, [r2, #12]
 80025d6:	4311      	orrs	r1, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	430b      	orrs	r3, r1
 80025de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	000186a0 	.word	0x000186a0
 8002638:	001e847f 	.word	0x001e847f
 800263c:	003d08ff 	.word	0x003d08ff
 8002640:	431bde83 	.word	0x431bde83
 8002644:	10624dd3 	.word	0x10624dd3

08002648 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	461a      	mov	r2, r3
 8002654:	460b      	mov	r3, r1
 8002656:	817b      	strh	r3, [r7, #10]
 8002658:	4613      	mov	r3, r2
 800265a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800265c:	f7ff fb3e 	bl	8001cdc <HAL_GetTick>
 8002660:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b20      	cmp	r3, #32
 800266c:	f040 80e0 	bne.w	8002830 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2319      	movs	r3, #25
 8002676:	2201      	movs	r2, #1
 8002678:	4970      	ldr	r1, [pc, #448]	@ (800283c <HAL_I2C_Master_Transmit+0x1f4>)
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f964 	bl	8002948 <I2C_WaitOnFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002686:	2302      	movs	r3, #2
 8002688:	e0d3      	b.n	8002832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_I2C_Master_Transmit+0x50>
 8002694:	2302      	movs	r3, #2
 8002696:	e0cc      	b.n	8002832 <HAL_I2C_Master_Transmit+0x1ea>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d007      	beq.n	80026be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2221      	movs	r2, #33	@ 0x21
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2210      	movs	r2, #16
 80026da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	893a      	ldrh	r2, [r7, #8]
 80026ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4a50      	ldr	r2, [pc, #320]	@ (8002840 <HAL_I2C_Master_Transmit+0x1f8>)
 80026fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002700:	8979      	ldrh	r1, [r7, #10]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	6a3a      	ldr	r2, [r7, #32]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f89c 	bl	8002844 <I2C_MasterRequestWrite>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e08d      	b.n	8002832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800272c:	e066      	b.n	80027fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	6a39      	ldr	r1, [r7, #32]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fa22 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00d      	beq.n	800275a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	2b04      	cmp	r3, #4
 8002744:	d107      	bne.n	8002756 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002754:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e06b      	b.n	8002832 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	781a      	ldrb	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b04      	cmp	r3, #4
 8002796:	d11b      	bne.n	80027d0 <HAL_I2C_Master_Transmit+0x188>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279c:	2b00      	cmp	r3, #0
 800279e:	d017      	beq.n	80027d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	6a39      	ldr	r1, [r7, #32]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 fa19 	bl	8002c0c <I2C_WaitOnBTFFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00d      	beq.n	80027fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d107      	bne.n	80027f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e01a      	b.n	8002832 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	d194      	bne.n	800272e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	e000      	b.n	8002832 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002830:	2302      	movs	r3, #2
  }
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	00100002 	.word	0x00100002
 8002840:	ffff0000 	.word	0xffff0000

08002844 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af02      	add	r7, sp, #8
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	460b      	mov	r3, r1
 8002852:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002858:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b08      	cmp	r3, #8
 800285e:	d006      	beq.n	800286e <I2C_MasterRequestWrite+0x2a>
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d003      	beq.n	800286e <I2C_MasterRequestWrite+0x2a>
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800286c:	d108      	bne.n	8002880 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e00b      	b.n	8002898 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002884:	2b12      	cmp	r3, #18
 8002886:	d107      	bne.n	8002898 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002896:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f84f 	bl	8002948 <I2C_WaitOnFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00d      	beq.n	80028cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028be:	d103      	bne.n	80028c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e035      	b.n	8002938 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028d4:	d108      	bne.n	80028e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028d6:	897b      	ldrh	r3, [r7, #10]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028e4:	611a      	str	r2, [r3, #16]
 80028e6:	e01b      	b.n	8002920 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028e8:	897b      	ldrh	r3, [r7, #10]
 80028ea:	11db      	asrs	r3, r3, #7
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f003 0306 	and.w	r3, r3, #6
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f063 030f 	orn	r3, r3, #15
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	490e      	ldr	r1, [pc, #56]	@ (8002940 <I2C_MasterRequestWrite+0xfc>)
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f898 	bl	8002a3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e010      	b.n	8002938 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002916:	897b      	ldrh	r3, [r7, #10]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	4907      	ldr	r1, [pc, #28]	@ (8002944 <I2C_MasterRequestWrite+0x100>)
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f888 	bl	8002a3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	00010008 	.word	0x00010008
 8002944:	00010002 	.word	0x00010002

08002948 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002958:	e048      	b.n	80029ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002960:	d044      	beq.n	80029ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002962:	f7ff f9bb 	bl	8001cdc <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d302      	bcc.n	8002978 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d139      	bne.n	80029ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	0c1b      	lsrs	r3, r3, #16
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d10d      	bne.n	800299e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	43da      	mvns	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4013      	ands	r3, r2
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	e00c      	b.n	80029b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	43da      	mvns	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	4013      	ands	r3, r2
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d116      	bne.n	80029ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	f043 0220 	orr.w	r2, r3, #32
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e023      	b.n	8002a34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	0c1b      	lsrs	r3, r3, #16
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d10d      	bne.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0xca>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	43da      	mvns	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	4013      	ands	r3, r2
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf0c      	ite	eq
 8002a08:	2301      	moveq	r3, #1
 8002a0a:	2300      	movne	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	e00c      	b.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	43da      	mvns	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d093      	beq.n	800295a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a4a:	e071      	b.n	8002b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a5a:	d123      	bne.n	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	f043 0204 	orr.w	r2, r3, #4
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e067      	b.n	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aaa:	d041      	beq.n	8002b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aac:	f7ff f916 	bl	8001cdc <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d302      	bcc.n	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d136      	bne.n	8002b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	0c1b      	lsrs	r3, r3, #16
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d10c      	bne.n	8002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	bf14      	ite	ne
 8002ade:	2301      	movne	r3, #1
 8002ae0:	2300      	moveq	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	e00b      	b.n	8002afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	43da      	mvns	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4013      	ands	r3, r2
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e021      	b.n	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	0c1b      	lsrs	r3, r3, #16
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10c      	bne.n	8002b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	43da      	mvns	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4013      	ands	r3, r2
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf14      	ite	ne
 8002b4c:	2301      	movne	r3, #1
 8002b4e:	2300      	moveq	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	e00b      	b.n	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bf14      	ite	ne
 8002b66:	2301      	movne	r3, #1
 8002b68:	2300      	moveq	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f47f af6d 	bne.w	8002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b88:	e034      	b.n	8002bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f886 	bl	8002c9c <I2C_IsAcknowledgeFailed>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e034      	b.n	8002c04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d028      	beq.n	8002bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba2:	f7ff f89b 	bl	8001cdc <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d302      	bcc.n	8002bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d11d      	bne.n	8002bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc2:	2b80      	cmp	r3, #128	@ 0x80
 8002bc4:	d016      	beq.n	8002bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e007      	b.n	8002c04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfe:	2b80      	cmp	r3, #128	@ 0x80
 8002c00:	d1c3      	bne.n	8002b8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c18:	e034      	b.n	8002c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f83e 	bl	8002c9c <I2C_IsAcknowledgeFailed>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e034      	b.n	8002c94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d028      	beq.n	8002c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c32:	f7ff f853 	bl	8001cdc <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d302      	bcc.n	8002c48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d11d      	bne.n	8002c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d016      	beq.n	8002c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	f043 0220 	orr.w	r2, r3, #32
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e007      	b.n	8002c94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d1c3      	bne.n	8002c1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb2:	d11b      	bne.n	8002cec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	f043 0204 	orr.w	r2, r3, #4
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e267      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d075      	beq.n	8002e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d1a:	4b88      	ldr	r3, [pc, #544]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d00c      	beq.n	8002d40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b85      	ldr	r3, [pc, #532]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d112      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b82      	ldr	r3, [pc, #520]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d3e:	d10b      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	4b7e      	ldr	r3, [pc, #504]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d05b      	beq.n	8002e04 <HAL_RCC_OscConfig+0x108>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d157      	bne.n	8002e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e242      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d60:	d106      	bne.n	8002d70 <HAL_RCC_OscConfig+0x74>
 8002d62:	4b76      	ldr	r3, [pc, #472]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a75      	ldr	r2, [pc, #468]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e01d      	b.n	8002dac <HAL_RCC_OscConfig+0xb0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x98>
 8002d7a:	4b70      	ldr	r3, [pc, #448]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6f      	ldr	r2, [pc, #444]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b6d      	ldr	r3, [pc, #436]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6c      	ldr	r2, [pc, #432]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0xb0>
 8002d94:	4b69      	ldr	r3, [pc, #420]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a68      	ldr	r2, [pc, #416]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4b66      	ldr	r3, [pc, #408]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a65      	ldr	r2, [pc, #404]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d013      	beq.n	8002ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe ff92 	bl	8001cdc <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fe ff8e 	bl	8001cdc <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	@ 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e207      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b5b      	ldr	r3, [pc, #364]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0xc0>
 8002dda:	e014      	b.n	8002e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fe ff7e 	bl	8001cdc <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe ff7a 	bl	8001cdc <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	@ 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e1f3      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	4b51      	ldr	r3, [pc, #324]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0xe8>
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d063      	beq.n	8002eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e12:	4b4a      	ldr	r3, [pc, #296]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b47      	ldr	r3, [pc, #284]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d11c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b44      	ldr	r3, [pc, #272]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d116      	bne.n	8002e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	4b41      	ldr	r3, [pc, #260]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_RCC_OscConfig+0x152>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e1c7      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4937      	ldr	r1, [pc, #220]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e62:	e03a      	b.n	8002eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e6c:	4b34      	ldr	r3, [pc, #208]	@ (8002f40 <HAL_RCC_OscConfig+0x244>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e72:	f7fe ff33 	bl	8001cdc <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7a:	f7fe ff2f 	bl	8001cdc <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e1a8      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e98:	4b28      	ldr	r3, [pc, #160]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4925      	ldr	r1, [pc, #148]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]
 8002eac:	e015      	b.n	8002eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eae:	4b24      	ldr	r3, [pc, #144]	@ (8002f40 <HAL_RCC_OscConfig+0x244>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe ff12 	bl	8001cdc <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ebc:	f7fe ff0e 	bl	8001cdc <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e187      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	4b1b      	ldr	r3, [pc, #108]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d036      	beq.n	8002f54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d016      	beq.n	8002f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eee:	4b15      	ldr	r3, [pc, #84]	@ (8002f44 <HAL_RCC_OscConfig+0x248>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fe fef2 	bl	8001cdc <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efc:	f7fe feee 	bl	8001cdc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e167      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x200>
 8002f1a:	e01b      	b.n	8002f54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1c:	4b09      	ldr	r3, [pc, #36]	@ (8002f44 <HAL_RCC_OscConfig+0x248>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f22:	f7fe fedb 	bl	8001cdc <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	e00e      	b.n	8002f48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f2a:	f7fe fed7 	bl	8001cdc <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d907      	bls.n	8002f48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e150      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	42470000 	.word	0x42470000
 8002f44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f48:	4b88      	ldr	r3, [pc, #544]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ea      	bne.n	8002f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8097 	beq.w	8003090 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f66:	4b81      	ldr	r3, [pc, #516]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	4b7d      	ldr	r3, [pc, #500]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	4a7c      	ldr	r2, [pc, #496]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f82:	4b7a      	ldr	r3, [pc, #488]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b77      	ldr	r3, [pc, #476]	@ (8003170 <HAL_RCC_OscConfig+0x474>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b74      	ldr	r3, [pc, #464]	@ (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a73      	ldr	r2, [pc, #460]	@ (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7fe fe97 	bl	8001cdc <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7fe fe93 	bl	8001cdc <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e10c      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x2ea>
 8002fd8:	4b64      	ldr	r3, [pc, #400]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fdc:	4a63      	ldr	r2, [pc, #396]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe4:	e01c      	b.n	8003020 <HAL_RCC_OscConfig+0x324>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b05      	cmp	r3, #5
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x30c>
 8002fee:	4b5f      	ldr	r3, [pc, #380]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff2:	4a5e      	ldr	r2, [pc, #376]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ffa:	4b5c      	ldr	r3, [pc, #368]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffe:	4a5b      	ldr	r2, [pc, #364]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6713      	str	r3, [r2, #112]	@ 0x70
 8003006:	e00b      	b.n	8003020 <HAL_RCC_OscConfig+0x324>
 8003008:	4b58      	ldr	r3, [pc, #352]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300c:	4a57      	ldr	r2, [pc, #348]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	@ 0x70
 8003014:	4b55      	ldr	r3, [pc, #340]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003018:	4a54      	ldr	r2, [pc, #336]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 0304 	bic.w	r3, r3, #4
 800301e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003028:	f7fe fe58 	bl	8001cdc <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fe fe54 	bl	8001cdc <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0cb      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003046:	4b49      	ldr	r3, [pc, #292]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ee      	beq.n	8003030 <HAL_RCC_OscConfig+0x334>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003054:	f7fe fe42 	bl	8001cdc <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305a:	e00a      	b.n	8003072 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7fe fe3e 	bl	8001cdc <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e0b5      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003072:	4b3e      	ldr	r3, [pc, #248]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1ee      	bne.n	800305c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800307e:	7dfb      	ldrb	r3, [r7, #23]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d105      	bne.n	8003090 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003084:	4b39      	ldr	r3, [pc, #228]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	4a38      	ldr	r2, [pc, #224]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 800308a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800308e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80a1 	beq.w	80031dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800309a:	4b34      	ldr	r3, [pc, #208]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d05c      	beq.n	8003160 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d141      	bne.n	8003132 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	4b31      	ldr	r3, [pc, #196]	@ (8003174 <HAL_RCC_OscConfig+0x478>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7fe fe12 	bl	8001cdc <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fe fe0e 	bl	8001cdc <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e087      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	4b27      	ldr	r3, [pc, #156]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	019b      	lsls	r3, r3, #6
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	3b01      	subs	r3, #1
 80030f4:	041b      	lsls	r3, r3, #16
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fc:	061b      	lsls	r3, r3, #24
 80030fe:	491b      	ldr	r1, [pc, #108]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003104:	4b1b      	ldr	r3, [pc, #108]	@ (8003174 <HAL_RCC_OscConfig+0x478>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7fe fde7 	bl	8001cdc <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003112:	f7fe fde3 	bl	8001cdc <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e05c      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003124:	4b11      	ldr	r3, [pc, #68]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x416>
 8003130:	e054      	b.n	80031dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b10      	ldr	r3, [pc, #64]	@ (8003174 <HAL_RCC_OscConfig+0x478>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fe fdd0 	bl	8001cdc <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003140:	f7fe fdcc 	bl	8001cdc <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e045      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	4b06      	ldr	r3, [pc, #24]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x444>
 800315e:	e03d      	b.n	80031dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e038      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
 800316c:	40023800 	.word	0x40023800
 8003170:	40007000 	.word	0x40007000
 8003174:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003178:	4b1b      	ldr	r3, [pc, #108]	@ (80031e8 <HAL_RCC_OscConfig+0x4ec>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d028      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d121      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d11a      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031a8:	4013      	ands	r3, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d111      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	3b01      	subs	r3, #1
 80031c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800

080031ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0cc      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b68      	ldr	r3, [pc, #416]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d90c      	bls.n	8003228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b65      	ldr	r3, [pc, #404]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b63      	ldr	r3, [pc, #396]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0b8      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003240:	4b59      	ldr	r3, [pc, #356]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a58      	ldr	r2, [pc, #352]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800324a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003258:	4b53      	ldr	r3, [pc, #332]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a52      	ldr	r2, [pc, #328]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003264:	4b50      	ldr	r3, [pc, #320]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	494d      	ldr	r1, [pc, #308]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d044      	beq.n	800330c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	4b47      	ldr	r3, [pc, #284]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d119      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e07f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	4b3f      	ldr	r3, [pc, #252]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e06f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	4b3b      	ldr	r3, [pc, #236]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e067      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b37      	ldr	r3, [pc, #220]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4934      	ldr	r1, [pc, #208]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032dc:	f7fe fcfe 	bl	8001cdc <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7fe fcfa 	bl	8001cdc <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e04f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b2b      	ldr	r3, [pc, #172]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b25      	ldr	r3, [pc, #148]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d20c      	bcs.n	8003334 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b22      	ldr	r3, [pc, #136]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e032      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003340:	4b19      	ldr	r3, [pc, #100]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4916      	ldr	r1, [pc, #88]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800335e:	4b12      	ldr	r3, [pc, #72]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	490e      	ldr	r1, [pc, #56]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003372:	f000 f821 	bl	80033b8 <HAL_RCC_GetSysClockFreq>
 8003376:	4602      	mov	r2, r0
 8003378:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	490a      	ldr	r1, [pc, #40]	@ (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	5ccb      	ldrb	r3, [r1, r3]
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	4a09      	ldr	r2, [pc, #36]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800338e:	4b09      	ldr	r3, [pc, #36]	@ (80033b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fc5e 	bl	8001c54 <HAL_InitTick>

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40023c00 	.word	0x40023c00
 80033a8:	40023800 	.word	0x40023800
 80033ac:	08005df8 	.word	0x08005df8
 80033b0:	20000000 	.word	0x20000000
 80033b4:	20000074 	.word	0x20000074

080033b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033bc:	b094      	sub	sp, #80	@ 0x50
 80033be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d0:	4b79      	ldr	r3, [pc, #484]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d00d      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x40>
 80033dc:	2b08      	cmp	r3, #8
 80033de:	f200 80e1 	bhi.w	80035a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x34>
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d003      	beq.n	80033f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ea:	e0db      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ec:	4b73      	ldr	r3, [pc, #460]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x204>)
 80033ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033f0:	e0db      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033f2:	4b73      	ldr	r3, [pc, #460]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80033f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033f6:	e0d8      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f8:	4b6f      	ldr	r3, [pc, #444]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003400:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003402:	4b6d      	ldr	r3, [pc, #436]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d063      	beq.n	80034d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800340e:	4b6a      	ldr	r3, [pc, #424]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	2200      	movs	r2, #0
 8003416:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003418:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800341a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800341c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003420:	633b      	str	r3, [r7, #48]	@ 0x30
 8003422:	2300      	movs	r3, #0
 8003424:	637b      	str	r3, [r7, #52]	@ 0x34
 8003426:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800342a:	4622      	mov	r2, r4
 800342c:	462b      	mov	r3, r5
 800342e:	f04f 0000 	mov.w	r0, #0
 8003432:	f04f 0100 	mov.w	r1, #0
 8003436:	0159      	lsls	r1, r3, #5
 8003438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800343c:	0150      	lsls	r0, r2, #5
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4621      	mov	r1, r4
 8003444:	1a51      	subs	r1, r2, r1
 8003446:	6139      	str	r1, [r7, #16]
 8003448:	4629      	mov	r1, r5
 800344a:	eb63 0301 	sbc.w	r3, r3, r1
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800345c:	4659      	mov	r1, fp
 800345e:	018b      	lsls	r3, r1, #6
 8003460:	4651      	mov	r1, sl
 8003462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003466:	4651      	mov	r1, sl
 8003468:	018a      	lsls	r2, r1, #6
 800346a:	4651      	mov	r1, sl
 800346c:	ebb2 0801 	subs.w	r8, r2, r1
 8003470:	4659      	mov	r1, fp
 8003472:	eb63 0901 	sbc.w	r9, r3, r1
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800348a:	4690      	mov	r8, r2
 800348c:	4699      	mov	r9, r3
 800348e:	4623      	mov	r3, r4
 8003490:	eb18 0303 	adds.w	r3, r8, r3
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	462b      	mov	r3, r5
 8003498:	eb49 0303 	adc.w	r3, r9, r3
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034aa:	4629      	mov	r1, r5
 80034ac:	024b      	lsls	r3, r1, #9
 80034ae:	4621      	mov	r1, r4
 80034b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034b4:	4621      	mov	r1, r4
 80034b6:	024a      	lsls	r2, r1, #9
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034be:	2200      	movs	r2, #0
 80034c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034c8:	f7fc fe86 	bl	80001d8 <__aeabi_uldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4613      	mov	r3, r2
 80034d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034d4:	e058      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d6:	4b38      	ldr	r3, [pc, #224]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	099b      	lsrs	r3, r3, #6
 80034dc:	2200      	movs	r2, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	4611      	mov	r1, r2
 80034e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034e6:	623b      	str	r3, [r7, #32]
 80034e8:	2300      	movs	r3, #0
 80034ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034f0:	4642      	mov	r2, r8
 80034f2:	464b      	mov	r3, r9
 80034f4:	f04f 0000 	mov.w	r0, #0
 80034f8:	f04f 0100 	mov.w	r1, #0
 80034fc:	0159      	lsls	r1, r3, #5
 80034fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003502:	0150      	lsls	r0, r2, #5
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4641      	mov	r1, r8
 800350a:	ebb2 0a01 	subs.w	sl, r2, r1
 800350e:	4649      	mov	r1, r9
 8003510:	eb63 0b01 	sbc.w	fp, r3, r1
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003520:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003524:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003528:	ebb2 040a 	subs.w	r4, r2, sl
 800352c:	eb63 050b 	sbc.w	r5, r3, fp
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	00eb      	lsls	r3, r5, #3
 800353a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800353e:	00e2      	lsls	r2, r4, #3
 8003540:	4614      	mov	r4, r2
 8003542:	461d      	mov	r5, r3
 8003544:	4643      	mov	r3, r8
 8003546:	18e3      	adds	r3, r4, r3
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	464b      	mov	r3, r9
 800354c:	eb45 0303 	adc.w	r3, r5, r3
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800355e:	4629      	mov	r1, r5
 8003560:	028b      	lsls	r3, r1, #10
 8003562:	4621      	mov	r1, r4
 8003564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003568:	4621      	mov	r1, r4
 800356a:	028a      	lsls	r2, r1, #10
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003572:	2200      	movs	r2, #0
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	61fa      	str	r2, [r7, #28]
 8003578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800357c:	f7fc fe2c 	bl	80001d8 <__aeabi_uldivmod>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4613      	mov	r3, r2
 8003586:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003588:	4b0b      	ldr	r3, [pc, #44]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	0c1b      	lsrs	r3, r3, #16
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	3301      	adds	r3, #1
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003598:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800359a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035a2:	e002      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035a4:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x204>)
 80035a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3750      	adds	r7, #80	@ 0x50
 80035b0:	46bd      	mov	sp, r7
 80035b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800
 80035bc:	00f42400 	.word	0x00f42400
 80035c0:	007a1200 	.word	0x007a1200

080035c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c8:	4b03      	ldr	r3, [pc, #12]	@ (80035d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	20000000 	.word	0x20000000

080035dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035e0:	f7ff fff0 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	0a9b      	lsrs	r3, r3, #10
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	4903      	ldr	r1, [pc, #12]	@ (8003600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40023800 	.word	0x40023800
 8003600:	08005e08 	.word	0x08005e08

08003604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003608:	f7ff ffdc 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0b5b      	lsrs	r3, r3, #13
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	@ (8003628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	08005e08 	.word	0x08005e08

0800362c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e041      	b.n	80036c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fd fb6c 	bl	8000d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3304      	adds	r3, #4
 8003668:	4619      	mov	r1, r3
 800366a:	4610      	mov	r0, r2
 800366c:	f000 ff2a 	bl	80044c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d001      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e044      	b.n	800376e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1e      	ldr	r2, [pc, #120]	@ (800377c <HAL_TIM_Base_Start_IT+0xb0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d018      	beq.n	8003738 <HAL_TIM_Base_Start_IT+0x6c>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800370e:	d013      	beq.n	8003738 <HAL_TIM_Base_Start_IT+0x6c>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1a      	ldr	r2, [pc, #104]	@ (8003780 <HAL_TIM_Base_Start_IT+0xb4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00e      	beq.n	8003738 <HAL_TIM_Base_Start_IT+0x6c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a19      	ldr	r2, [pc, #100]	@ (8003784 <HAL_TIM_Base_Start_IT+0xb8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d009      	beq.n	8003738 <HAL_TIM_Base_Start_IT+0x6c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a17      	ldr	r2, [pc, #92]	@ (8003788 <HAL_TIM_Base_Start_IT+0xbc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_TIM_Base_Start_IT+0x6c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a16      	ldr	r2, [pc, #88]	@ (800378c <HAL_TIM_Base_Start_IT+0xc0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d111      	bne.n	800375c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b06      	cmp	r3, #6
 8003748:	d010      	beq.n	800376c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375a:	e007      	b.n	800376c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40010000 	.word	0x40010000
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800
 8003788:	40000c00 	.word	0x40000c00
 800378c:	40014000 	.word	0x40014000

08003790 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e041      	b.n	8003826 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd fa98 	bl	8000cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3304      	adds	r3, #4
 80037cc:	4619      	mov	r1, r3
 80037ce:	4610      	mov	r0, r2
 80037d0:	f000 fe78 	bl	80044c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <HAL_TIM_PWM_Start+0x24>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b01      	cmp	r3, #1
 800384a:	bf14      	ite	ne
 800384c:	2301      	movne	r3, #1
 800384e:	2300      	moveq	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	e022      	b.n	800389a <HAL_TIM_PWM_Start+0x6a>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b04      	cmp	r3, #4
 8003858:	d109      	bne.n	800386e <HAL_TIM_PWM_Start+0x3e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b01      	cmp	r3, #1
 8003864:	bf14      	ite	ne
 8003866:	2301      	movne	r3, #1
 8003868:	2300      	moveq	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	e015      	b.n	800389a <HAL_TIM_PWM_Start+0x6a>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b08      	cmp	r3, #8
 8003872:	d109      	bne.n	8003888 <HAL_TIM_PWM_Start+0x58>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	bf14      	ite	ne
 8003880:	2301      	movne	r3, #1
 8003882:	2300      	moveq	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e008      	b.n	800389a <HAL_TIM_PWM_Start+0x6a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	bf14      	ite	ne
 8003894:	2301      	movne	r3, #1
 8003896:	2300      	moveq	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e068      	b.n	8003974 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d104      	bne.n	80038b2 <HAL_TIM_PWM_Start+0x82>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038b0:	e013      	b.n	80038da <HAL_TIM_PWM_Start+0xaa>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d104      	bne.n	80038c2 <HAL_TIM_PWM_Start+0x92>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038c0:	e00b      	b.n	80038da <HAL_TIM_PWM_Start+0xaa>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d104      	bne.n	80038d2 <HAL_TIM_PWM_Start+0xa2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038d0:	e003      	b.n	80038da <HAL_TIM_PWM_Start+0xaa>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2201      	movs	r2, #1
 80038e0:	6839      	ldr	r1, [r7, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 f9b8 	bl	8004c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a23      	ldr	r2, [pc, #140]	@ (800397c <HAL_TIM_PWM_Start+0x14c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d107      	bne.n	8003902 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003900:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1d      	ldr	r2, [pc, #116]	@ (800397c <HAL_TIM_PWM_Start+0x14c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d018      	beq.n	800393e <HAL_TIM_PWM_Start+0x10e>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003914:	d013      	beq.n	800393e <HAL_TIM_PWM_Start+0x10e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a19      	ldr	r2, [pc, #100]	@ (8003980 <HAL_TIM_PWM_Start+0x150>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00e      	beq.n	800393e <HAL_TIM_PWM_Start+0x10e>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a17      	ldr	r2, [pc, #92]	@ (8003984 <HAL_TIM_PWM_Start+0x154>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d009      	beq.n	800393e <HAL_TIM_PWM_Start+0x10e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a16      	ldr	r2, [pc, #88]	@ (8003988 <HAL_TIM_PWM_Start+0x158>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d004      	beq.n	800393e <HAL_TIM_PWM_Start+0x10e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a14      	ldr	r2, [pc, #80]	@ (800398c <HAL_TIM_PWM_Start+0x15c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d111      	bne.n	8003962 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b06      	cmp	r3, #6
 800394e:	d010      	beq.n	8003972 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003960:	e007      	b.n	8003972 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0201 	orr.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40010000 	.word	0x40010000
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800
 8003988:	40000c00 	.word	0x40000c00
 800398c:	40014000 	.word	0x40014000

08003990 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e041      	b.n	8003a26 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f839 	bl	8003a2e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	4619      	mov	r1, r3
 80039ce:	4610      	mov	r0, r2
 80039d0:	f000 fd78 	bl	80044c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d104      	bne.n	8003a62 <HAL_TIM_IC_Start_IT+0x1e>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	e013      	b.n	8003a8a <HAL_TIM_IC_Start_IT+0x46>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d104      	bne.n	8003a72 <HAL_TIM_IC_Start_IT+0x2e>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	e00b      	b.n	8003a8a <HAL_TIM_IC_Start_IT+0x46>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d104      	bne.n	8003a82 <HAL_TIM_IC_Start_IT+0x3e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	e003      	b.n	8003a8a <HAL_TIM_IC_Start_IT+0x46>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <HAL_TIM_IC_Start_IT+0x58>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	e013      	b.n	8003ac4 <HAL_TIM_IC_Start_IT+0x80>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d104      	bne.n	8003aac <HAL_TIM_IC_Start_IT+0x68>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	e00b      	b.n	8003ac4 <HAL_TIM_IC_Start_IT+0x80>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d104      	bne.n	8003abc <HAL_TIM_IC_Start_IT+0x78>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e003      	b.n	8003ac4 <HAL_TIM_IC_Start_IT+0x80>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ac6:	7bbb      	ldrb	r3, [r7, #14]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d102      	bne.n	8003ad2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003acc:	7b7b      	ldrb	r3, [r7, #13]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d001      	beq.n	8003ad6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e0c2      	b.n	8003c5c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d104      	bne.n	8003ae6 <HAL_TIM_IC_Start_IT+0xa2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ae4:	e013      	b.n	8003b0e <HAL_TIM_IC_Start_IT+0xca>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d104      	bne.n	8003af6 <HAL_TIM_IC_Start_IT+0xb2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003af4:	e00b      	b.n	8003b0e <HAL_TIM_IC_Start_IT+0xca>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d104      	bne.n	8003b06 <HAL_TIM_IC_Start_IT+0xc2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b04:	e003      	b.n	8003b0e <HAL_TIM_IC_Start_IT+0xca>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d104      	bne.n	8003b1e <HAL_TIM_IC_Start_IT+0xda>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b1c:	e013      	b.n	8003b46 <HAL_TIM_IC_Start_IT+0x102>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d104      	bne.n	8003b2e <HAL_TIM_IC_Start_IT+0xea>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b2c:	e00b      	b.n	8003b46 <HAL_TIM_IC_Start_IT+0x102>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d104      	bne.n	8003b3e <HAL_TIM_IC_Start_IT+0xfa>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b3c:	e003      	b.n	8003b46 <HAL_TIM_IC_Start_IT+0x102>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b0c      	cmp	r3, #12
 8003b4a:	d841      	bhi.n	8003bd0 <HAL_TIM_IC_Start_IT+0x18c>
 8003b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b54 <HAL_TIM_IC_Start_IT+0x110>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003b89 	.word	0x08003b89
 8003b58:	08003bd1 	.word	0x08003bd1
 8003b5c:	08003bd1 	.word	0x08003bd1
 8003b60:	08003bd1 	.word	0x08003bd1
 8003b64:	08003b9b 	.word	0x08003b9b
 8003b68:	08003bd1 	.word	0x08003bd1
 8003b6c:	08003bd1 	.word	0x08003bd1
 8003b70:	08003bd1 	.word	0x08003bd1
 8003b74:	08003bad 	.word	0x08003bad
 8003b78:	08003bd1 	.word	0x08003bd1
 8003b7c:	08003bd1 	.word	0x08003bd1
 8003b80:	08003bd1 	.word	0x08003bd1
 8003b84:	08003bbf 	.word	0x08003bbf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0202 	orr.w	r2, r2, #2
 8003b96:	60da      	str	r2, [r3, #12]
      break;
 8003b98:	e01d      	b.n	8003bd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0204 	orr.w	r2, r2, #4
 8003ba8:	60da      	str	r2, [r3, #12]
      break;
 8003baa:	e014      	b.n	8003bd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0208 	orr.w	r2, r2, #8
 8003bba:	60da      	str	r2, [r3, #12]
      break;
 8003bbc:	e00b      	b.n	8003bd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0210 	orr.w	r2, r2, #16
 8003bcc:	60da      	str	r2, [r3, #12]
      break;
 8003bce:	e002      	b.n	8003bd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d13e      	bne.n	8003c5a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2201      	movs	r2, #1
 8003be2:	6839      	ldr	r1, [r7, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f001 f837 	bl	8004c58 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1d      	ldr	r2, [pc, #116]	@ (8003c64 <HAL_TIM_IC_Start_IT+0x220>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d018      	beq.n	8003c26 <HAL_TIM_IC_Start_IT+0x1e2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bfc:	d013      	beq.n	8003c26 <HAL_TIM_IC_Start_IT+0x1e2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a19      	ldr	r2, [pc, #100]	@ (8003c68 <HAL_TIM_IC_Start_IT+0x224>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00e      	beq.n	8003c26 <HAL_TIM_IC_Start_IT+0x1e2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a17      	ldr	r2, [pc, #92]	@ (8003c6c <HAL_TIM_IC_Start_IT+0x228>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d009      	beq.n	8003c26 <HAL_TIM_IC_Start_IT+0x1e2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a16      	ldr	r2, [pc, #88]	@ (8003c70 <HAL_TIM_IC_Start_IT+0x22c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_TIM_IC_Start_IT+0x1e2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a14      	ldr	r2, [pc, #80]	@ (8003c74 <HAL_TIM_IC_Start_IT+0x230>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d111      	bne.n	8003c4a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b06      	cmp	r3, #6
 8003c36:	d010      	beq.n	8003c5a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c48:	e007      	b.n	8003c5a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f042 0201 	orr.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40010000 	.word	0x40010000
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40000800 	.word	0x40000800
 8003c70:	40000c00 	.word	0x40000c00
 8003c74:	40014000 	.word	0x40014000

08003c78 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b0c      	cmp	r3, #12
 8003c8a:	d841      	bhi.n	8003d10 <HAL_TIM_IC_Stop_IT+0x98>
 8003c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c94 <HAL_TIM_IC_Stop_IT+0x1c>)
 8003c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c92:	bf00      	nop
 8003c94:	08003cc9 	.word	0x08003cc9
 8003c98:	08003d11 	.word	0x08003d11
 8003c9c:	08003d11 	.word	0x08003d11
 8003ca0:	08003d11 	.word	0x08003d11
 8003ca4:	08003cdb 	.word	0x08003cdb
 8003ca8:	08003d11 	.word	0x08003d11
 8003cac:	08003d11 	.word	0x08003d11
 8003cb0:	08003d11 	.word	0x08003d11
 8003cb4:	08003ced 	.word	0x08003ced
 8003cb8:	08003d11 	.word	0x08003d11
 8003cbc:	08003d11 	.word	0x08003d11
 8003cc0:	08003d11 	.word	0x08003d11
 8003cc4:	08003cff 	.word	0x08003cff
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0202 	bic.w	r2, r2, #2
 8003cd6:	60da      	str	r2, [r3, #12]
      break;
 8003cd8:	e01d      	b.n	8003d16 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0204 	bic.w	r2, r2, #4
 8003ce8:	60da      	str	r2, [r3, #12]
      break;
 8003cea:	e014      	b.n	8003d16 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0208 	bic.w	r2, r2, #8
 8003cfa:	60da      	str	r2, [r3, #12]
      break;
 8003cfc:	e00b      	b.n	8003d16 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0210 	bic.w	r2, r2, #16
 8003d0c:	60da      	str	r2, [r3, #12]
      break;
 8003d0e:	e002      	b.n	8003d16 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
      break;
 8003d14:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d156      	bne.n	8003dca <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2200      	movs	r2, #0
 8003d22:	6839      	ldr	r1, [r7, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 ff97 	bl	8004c58 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6a1a      	ldr	r2, [r3, #32]
 8003d30:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10f      	bne.n	8003d5a <HAL_TIM_IC_Stop_IT+0xe2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a1a      	ldr	r2, [r3, #32]
 8003d40:	f240 4344 	movw	r3, #1092	@ 0x444
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d107      	bne.n	8003d5a <HAL_TIM_IC_Stop_IT+0xe2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0201 	bic.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <HAL_TIM_IC_Stop_IT+0xf2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d68:	e013      	b.n	8003d92 <HAL_TIM_IC_Stop_IT+0x11a>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d104      	bne.n	8003d7a <HAL_TIM_IC_Stop_IT+0x102>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d78:	e00b      	b.n	8003d92 <HAL_TIM_IC_Stop_IT+0x11a>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d104      	bne.n	8003d8a <HAL_TIM_IC_Stop_IT+0x112>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d88:	e003      	b.n	8003d92 <HAL_TIM_IC_Stop_IT+0x11a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_IC_Stop_IT+0x12a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003da0:	e013      	b.n	8003dca <HAL_TIM_IC_Stop_IT+0x152>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_IC_Stop_IT+0x13a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003db0:	e00b      	b.n	8003dca <HAL_TIM_IC_Stop_IT+0x152>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d104      	bne.n	8003dc2 <HAL_TIM_IC_Stop_IT+0x14a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dc0:	e003      	b.n	8003dca <HAL_TIM_IC_Stop_IT+0x152>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d020      	beq.n	8003e38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01b      	beq.n	8003e38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0202 	mvn.w	r2, #2
 8003e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd fb4a 	bl	80014b8 <HAL_TIM_IC_CaptureCallback>
 8003e24:	e005      	b.n	8003e32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fb2e 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fb35 	bl	800449c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d020      	beq.n	8003e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01b      	beq.n	8003e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0204 	mvn.w	r2, #4
 8003e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fd fb24 	bl	80014b8 <HAL_TIM_IC_CaptureCallback>
 8003e70:	e005      	b.n	8003e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fb08 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fb0f 	bl	800449c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d020      	beq.n	8003ed0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01b      	beq.n	8003ed0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0208 	mvn.w	r2, #8
 8003ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2204      	movs	r2, #4
 8003ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7fd fafe 	bl	80014b8 <HAL_TIM_IC_CaptureCallback>
 8003ebc:	e005      	b.n	8003eca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fae2 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fae9 	bl	800449c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d020      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01b      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0210 	mvn.w	r2, #16
 8003eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fd fad8 	bl	80014b8 <HAL_TIM_IC_CaptureCallback>
 8003f08:	e005      	b.n	8003f16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fabc 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fac3 	bl	800449c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00c      	beq.n	8003f40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0201 	mvn.w	r2, #1
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd f8cc 	bl	80010d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00c      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 ff6a 	bl	8004e38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fa94 	bl	80044b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00c      	beq.n	8003fac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0220 	mvn.w	r2, #32
 8003fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 ff3c 	bl	8004e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e088      	b.n	80040e4 <HAL_TIM_IC_ConfigChannel+0x130>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d11b      	bne.n	8004018 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003ff0:	f000 fc7a 	bl	80048e8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 020c 	bic.w	r2, r2, #12
 8004002:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6999      	ldr	r1, [r3, #24]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	619a      	str	r2, [r3, #24]
 8004016:	e060      	b.n	80040da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b04      	cmp	r3, #4
 800401c:	d11c      	bne.n	8004058 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800402e:	f000 fcf2 	bl	8004a16 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699a      	ldr	r2, [r3, #24]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004040:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6999      	ldr	r1, [r3, #24]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	021a      	lsls	r2, r3, #8
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	619a      	str	r2, [r3, #24]
 8004056:	e040      	b.n	80040da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b08      	cmp	r3, #8
 800405c:	d11b      	bne.n	8004096 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800406e:	f000 fd3f 	bl	8004af0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 020c 	bic.w	r2, r2, #12
 8004080:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69d9      	ldr	r1, [r3, #28]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	61da      	str	r2, [r3, #28]
 8004094:	e021      	b.n	80040da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b0c      	cmp	r3, #12
 800409a:	d11c      	bne.n	80040d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80040ac:	f000 fd5c 	bl	8004b68 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80040be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69d9      	ldr	r1, [r3, #28]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	021a      	lsls	r2, r3, #8
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	61da      	str	r2, [r3, #28]
 80040d4:	e001      	b.n	80040da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004106:	2302      	movs	r3, #2
 8004108:	e0ae      	b.n	8004268 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b0c      	cmp	r3, #12
 8004116:	f200 809f 	bhi.w	8004258 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800411a:	a201      	add	r2, pc, #4	@ (adr r2, 8004120 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004155 	.word	0x08004155
 8004124:	08004259 	.word	0x08004259
 8004128:	08004259 	.word	0x08004259
 800412c:	08004259 	.word	0x08004259
 8004130:	08004195 	.word	0x08004195
 8004134:	08004259 	.word	0x08004259
 8004138:	08004259 	.word	0x08004259
 800413c:	08004259 	.word	0x08004259
 8004140:	080041d7 	.word	0x080041d7
 8004144:	08004259 	.word	0x08004259
 8004148:	08004259 	.word	0x08004259
 800414c:	08004259 	.word	0x08004259
 8004150:	08004217 	.word	0x08004217
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fa38 	bl	80045d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0208 	orr.w	r2, r2, #8
 800416e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0204 	bic.w	r2, r2, #4
 800417e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6999      	ldr	r1, [r3, #24]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	619a      	str	r2, [r3, #24]
      break;
 8004192:	e064      	b.n	800425e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fa7e 	bl	800469c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6999      	ldr	r1, [r3, #24]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	021a      	lsls	r2, r3, #8
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	619a      	str	r2, [r3, #24]
      break;
 80041d4:	e043      	b.n	800425e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fac9 	bl	8004774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0208 	orr.w	r2, r2, #8
 80041f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0204 	bic.w	r2, r2, #4
 8004200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69d9      	ldr	r1, [r3, #28]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	61da      	str	r2, [r3, #28]
      break;
 8004214:	e023      	b.n	800425e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fb13 	bl	8004848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69da      	ldr	r2, [r3, #28]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69d9      	ldr	r1, [r3, #28]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	021a      	lsls	r2, r3, #8
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	61da      	str	r2, [r3, #28]
      break;
 8004256:	e002      	b.n	800425e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	75fb      	strb	r3, [r7, #23]
      break;
 800425c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004266:	7dfb      	ldrb	r3, [r7, #23]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_TIM_ConfigClockSource+0x1c>
 8004288:	2302      	movs	r3, #2
 800428a:	e0b4      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x186>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042c4:	d03e      	beq.n	8004344 <HAL_TIM_ConfigClockSource+0xd4>
 80042c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ca:	f200 8087 	bhi.w	80043dc <HAL_TIM_ConfigClockSource+0x16c>
 80042ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d2:	f000 8086 	beq.w	80043e2 <HAL_TIM_ConfigClockSource+0x172>
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042da:	d87f      	bhi.n	80043dc <HAL_TIM_ConfigClockSource+0x16c>
 80042dc:	2b70      	cmp	r3, #112	@ 0x70
 80042de:	d01a      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0xa6>
 80042e0:	2b70      	cmp	r3, #112	@ 0x70
 80042e2:	d87b      	bhi.n	80043dc <HAL_TIM_ConfigClockSource+0x16c>
 80042e4:	2b60      	cmp	r3, #96	@ 0x60
 80042e6:	d050      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x11a>
 80042e8:	2b60      	cmp	r3, #96	@ 0x60
 80042ea:	d877      	bhi.n	80043dc <HAL_TIM_ConfigClockSource+0x16c>
 80042ec:	2b50      	cmp	r3, #80	@ 0x50
 80042ee:	d03c      	beq.n	800436a <HAL_TIM_ConfigClockSource+0xfa>
 80042f0:	2b50      	cmp	r3, #80	@ 0x50
 80042f2:	d873      	bhi.n	80043dc <HAL_TIM_ConfigClockSource+0x16c>
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	d058      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x13a>
 80042f8:	2b40      	cmp	r3, #64	@ 0x40
 80042fa:	d86f      	bhi.n	80043dc <HAL_TIM_ConfigClockSource+0x16c>
 80042fc:	2b30      	cmp	r3, #48	@ 0x30
 80042fe:	d064      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x15a>
 8004300:	2b30      	cmp	r3, #48	@ 0x30
 8004302:	d86b      	bhi.n	80043dc <HAL_TIM_ConfigClockSource+0x16c>
 8004304:	2b20      	cmp	r3, #32
 8004306:	d060      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x15a>
 8004308:	2b20      	cmp	r3, #32
 800430a:	d867      	bhi.n	80043dc <HAL_TIM_ConfigClockSource+0x16c>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d05c      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x15a>
 8004310:	2b10      	cmp	r3, #16
 8004312:	d05a      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x15a>
 8004314:	e062      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004326:	f000 fc77 	bl	8004c18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004338:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	609a      	str	r2, [r3, #8]
      break;
 8004342:	e04f      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004354:	f000 fc60 	bl	8004c18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004366:	609a      	str	r2, [r3, #8]
      break;
 8004368:	e03c      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004376:	461a      	mov	r2, r3
 8004378:	f000 fb1e 	bl	80049b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2150      	movs	r1, #80	@ 0x50
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fc2d 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 8004388:	e02c      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004396:	461a      	mov	r2, r3
 8004398:	f000 fb7a 	bl	8004a90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2160      	movs	r1, #96	@ 0x60
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fc1d 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 80043a8:	e01c      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b6:	461a      	mov	r2, r3
 80043b8:	f000 fafe 	bl	80049b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2140      	movs	r1, #64	@ 0x40
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fc0d 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 80043c8:	e00c      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4619      	mov	r1, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f000 fc04 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 80043da:	e003      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
      break;
 80043e0:	e000      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b0c      	cmp	r3, #12
 8004412:	d831      	bhi.n	8004478 <HAL_TIM_ReadCapturedValue+0x78>
 8004414:	a201      	add	r2, pc, #4	@ (adr r2, 800441c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	08004451 	.word	0x08004451
 8004420:	08004479 	.word	0x08004479
 8004424:	08004479 	.word	0x08004479
 8004428:	08004479 	.word	0x08004479
 800442c:	0800445b 	.word	0x0800445b
 8004430:	08004479 	.word	0x08004479
 8004434:	08004479 	.word	0x08004479
 8004438:	08004479 	.word	0x08004479
 800443c:	08004465 	.word	0x08004465
 8004440:	08004479 	.word	0x08004479
 8004444:	08004479 	.word	0x08004479
 8004448:	08004479 	.word	0x08004479
 800444c:	0800446f 	.word	0x0800446f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004456:	60fb      	str	r3, [r7, #12]

      break;
 8004458:	e00f      	b.n	800447a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004460:	60fb      	str	r3, [r7, #12]

      break;
 8004462:	e00a      	b.n	800447a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446a:	60fb      	str	r3, [r7, #12]

      break;
 800446c:	e005      	b.n	800447a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	60fb      	str	r3, [r7, #12]

      break;
 8004476:	e000      	b.n	800447a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004478:	bf00      	nop
  }

  return tmpreg;
 800447a:	68fb      	ldr	r3, [r7, #12]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a37      	ldr	r2, [pc, #220]	@ (80045b4 <TIM_Base_SetConfig+0xf0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00f      	beq.n	80044fc <TIM_Base_SetConfig+0x38>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e2:	d00b      	beq.n	80044fc <TIM_Base_SetConfig+0x38>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a34      	ldr	r2, [pc, #208]	@ (80045b8 <TIM_Base_SetConfig+0xf4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d007      	beq.n	80044fc <TIM_Base_SetConfig+0x38>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a33      	ldr	r2, [pc, #204]	@ (80045bc <TIM_Base_SetConfig+0xf8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d003      	beq.n	80044fc <TIM_Base_SetConfig+0x38>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a32      	ldr	r2, [pc, #200]	@ (80045c0 <TIM_Base_SetConfig+0xfc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d108      	bne.n	800450e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a28      	ldr	r2, [pc, #160]	@ (80045b4 <TIM_Base_SetConfig+0xf0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d01b      	beq.n	800454e <TIM_Base_SetConfig+0x8a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800451c:	d017      	beq.n	800454e <TIM_Base_SetConfig+0x8a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a25      	ldr	r2, [pc, #148]	@ (80045b8 <TIM_Base_SetConfig+0xf4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d013      	beq.n	800454e <TIM_Base_SetConfig+0x8a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a24      	ldr	r2, [pc, #144]	@ (80045bc <TIM_Base_SetConfig+0xf8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00f      	beq.n	800454e <TIM_Base_SetConfig+0x8a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a23      	ldr	r2, [pc, #140]	@ (80045c0 <TIM_Base_SetConfig+0xfc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00b      	beq.n	800454e <TIM_Base_SetConfig+0x8a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a22      	ldr	r2, [pc, #136]	@ (80045c4 <TIM_Base_SetConfig+0x100>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d007      	beq.n	800454e <TIM_Base_SetConfig+0x8a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a21      	ldr	r2, [pc, #132]	@ (80045c8 <TIM_Base_SetConfig+0x104>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d003      	beq.n	800454e <TIM_Base_SetConfig+0x8a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a20      	ldr	r2, [pc, #128]	@ (80045cc <TIM_Base_SetConfig+0x108>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d108      	bne.n	8004560 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a0c      	ldr	r2, [pc, #48]	@ (80045b4 <TIM_Base_SetConfig+0xf0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d103      	bne.n	800458e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f043 0204 	orr.w	r2, r3, #4
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	601a      	str	r2, [r3, #0]
}
 80045a6:	bf00      	nop
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40000c00 	.word	0x40000c00
 80045c4:	40014000 	.word	0x40014000
 80045c8:	40014400 	.word	0x40014400
 80045cc:	40014800 	.word	0x40014800

080045d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f023 0201 	bic.w	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f023 0302 	bic.w	r3, r3, #2
 8004618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a1c      	ldr	r2, [pc, #112]	@ (8004698 <TIM_OC1_SetConfig+0xc8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d10c      	bne.n	8004646 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 0308 	bic.w	r3, r3, #8
 8004632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f023 0304 	bic.w	r3, r3, #4
 8004644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a13      	ldr	r2, [pc, #76]	@ (8004698 <TIM_OC1_SetConfig+0xc8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d111      	bne.n	8004672 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800465c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	621a      	str	r2, [r3, #32]
}
 800468c:	bf00      	nop
 800468e:	371c      	adds	r7, #28
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	40010000 	.word	0x40010000

0800469c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	f023 0210 	bic.w	r2, r3, #16
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	021b      	lsls	r3, r3, #8
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f023 0320 	bic.w	r3, r3, #32
 80046e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004770 <TIM_OC2_SetConfig+0xd4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d10d      	bne.n	8004718 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004716:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a15      	ldr	r2, [pc, #84]	@ (8004770 <TIM_OC2_SetConfig+0xd4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d113      	bne.n	8004748 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800472e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	621a      	str	r2, [r3, #32]
}
 8004762:	bf00      	nop
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40010000 	.word	0x40010000

08004774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0303 	bic.w	r3, r3, #3
 80047aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004844 <TIM_OC3_SetConfig+0xd0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d10d      	bne.n	80047ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	021b      	lsls	r3, r3, #8
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a14      	ldr	r2, [pc, #80]	@ (8004844 <TIM_OC3_SetConfig+0xd0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d113      	bne.n	800481e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	621a      	str	r2, [r3, #32]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	40010000 	.word	0x40010000

08004848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800487e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	021b      	lsls	r3, r3, #8
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	031b      	lsls	r3, r3, #12
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a10      	ldr	r2, [pc, #64]	@ (80048e4 <TIM_OC4_SetConfig+0x9c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d109      	bne.n	80048bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	019b      	lsls	r3, r3, #6
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40010000 	.word	0x40010000

080048e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	f023 0201 	bic.w	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4a24      	ldr	r2, [pc, #144]	@ (80049a4 <TIM_TI1_SetConfig+0xbc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <TIM_TI1_SetConfig+0x56>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800491c:	d00f      	beq.n	800493e <TIM_TI1_SetConfig+0x56>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4a21      	ldr	r2, [pc, #132]	@ (80049a8 <TIM_TI1_SetConfig+0xc0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_TI1_SetConfig+0x56>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a20      	ldr	r2, [pc, #128]	@ (80049ac <TIM_TI1_SetConfig+0xc4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_TI1_SetConfig+0x56>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a1f      	ldr	r2, [pc, #124]	@ (80049b0 <TIM_TI1_SetConfig+0xc8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_TI1_SetConfig+0x56>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a1e      	ldr	r2, [pc, #120]	@ (80049b4 <TIM_TI1_SetConfig+0xcc>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d101      	bne.n	8004942 <TIM_TI1_SetConfig+0x5a>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <TIM_TI1_SetConfig+0x5c>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0303 	bic.w	r3, r3, #3
 800494e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e003      	b.n	8004962 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	b2db      	uxtb	r3, r3
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f023 030a 	bic.w	r3, r3, #10
 800497c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f003 030a 	and.w	r3, r3, #10
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	4313      	orrs	r3, r2
 8004988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	621a      	str	r2, [r3, #32]
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40000800 	.word	0x40000800
 80049b0:	40000c00 	.word	0x40000c00
 80049b4:	40014000 	.word	0x40014000

080049b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f023 0201 	bic.w	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f023 030a 	bic.w	r3, r3, #10
 80049f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b087      	sub	sp, #28
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
 8004a22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f023 0210 	bic.w	r2, r3, #16
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	031b      	lsls	r3, r3, #12
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a68:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	621a      	str	r2, [r3, #32]
}
 8004a84:	bf00      	nop
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f023 0210 	bic.w	r2, r3, #16
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	031b      	lsls	r3, r3, #12
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004acc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	621a      	str	r2, [r3, #32]
}
 8004ae4:	bf00      	nop
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f023 0303 	bic.w	r3, r3, #3
 8004b1c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b2c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004b40:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	621a      	str	r2, [r3, #32]
}
 8004b5c:	bf00      	nop
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b94:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ba6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	031b      	lsls	r3, r3, #12
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004bba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	031b      	lsls	r3, r3, #12
 8004bc0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	621a      	str	r2, [r3, #32]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f043 0307 	orr.w	r3, r3, #7
 8004c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	609a      	str	r2, [r3, #8]
}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	021a      	lsls	r2, r3, #8
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	609a      	str	r2, [r3, #8]
}
 8004c4c:	bf00      	nop
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f003 031f 	and.w	r3, r3, #31
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a1a      	ldr	r2, [r3, #32]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a1a      	ldr	r2, [r3, #32]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 031f 	and.w	r3, r3, #31
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c90:	431a      	orrs	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e050      	b.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d018      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d08:	d013      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a18      	ldr	r2, [pc, #96]	@ (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00e      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a16      	ldr	r2, [pc, #88]	@ (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d009      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a15      	ldr	r2, [pc, #84]	@ (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d004      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a13      	ldr	r2, [pc, #76]	@ (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d10c      	bne.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40014000 	.word	0x40014000

08004d80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e03d      	b.n	8004e18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e042      	b.n	8004ee4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fc f86a 	bl	8000f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2224      	movs	r2, #36	@ 0x24
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fcef 	bl	8005874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	d112      	bne.n	8004f2c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <HAL_UART_Receive_IT+0x26>
 8004f0c:	88fb      	ldrh	r3, [r7, #6]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e00b      	b.n	8004f2e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fad2 	bl	80054cc <UART_Start_Receive_IT>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	e000      	b.n	8004f2e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004f2c:	2302      	movs	r3, #2
  }
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b0ba      	sub	sp, #232	@ 0xe8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10f      	bne.n	8004f9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <HAL_UART_IRQHandler+0x66>
 8004f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fbae 	bl	80056f8 <UART_Receive_IT>
      return;
 8004f9c:	e273      	b.n	8005486 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80de 	beq.w	8005164 <HAL_UART_IRQHandler+0x22c>
 8004fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80d1 	beq.w	8005164 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00b      	beq.n	8004fe6 <HAL_UART_IRQHandler+0xae>
 8004fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fde:	f043 0201 	orr.w	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00b      	beq.n	800500a <HAL_UART_IRQHandler+0xd2>
 8004ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005002:	f043 0202 	orr.w	r2, r3, #2
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800500a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00b      	beq.n	800502e <HAL_UART_IRQHandler+0xf6>
 8005016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005026:	f043 0204 	orr.w	r2, r3, #4
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800502e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d011      	beq.n	800505e <HAL_UART_IRQHandler+0x126>
 800503a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b00      	cmp	r3, #0
 8005044:	d105      	bne.n	8005052 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005056:	f043 0208 	orr.w	r2, r3, #8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 820a 	beq.w	800547c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <HAL_UART_IRQHandler+0x14e>
 8005074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fb39 	bl	80056f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005090:	2b40      	cmp	r3, #64	@ 0x40
 8005092:	bf0c      	ite	eq
 8005094:	2301      	moveq	r3, #1
 8005096:	2300      	movne	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <HAL_UART_IRQHandler+0x17a>
 80050aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d04f      	beq.n	8005152 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fa44 	bl	8005540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c2:	2b40      	cmp	r3, #64	@ 0x40
 80050c4:	d141      	bne.n	800514a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3314      	adds	r3, #20
 80050cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80050dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3314      	adds	r3, #20
 80050ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80050f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80050f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80050fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800510a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1d9      	bne.n	80050c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005116:	2b00      	cmp	r3, #0
 8005118:	d013      	beq.n	8005142 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511e:	4a8a      	ldr	r2, [pc, #552]	@ (8005348 <HAL_UART_IRQHandler+0x410>)
 8005120:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005126:	4618      	mov	r0, r3
 8005128:	f7fc ff89 	bl	800203e <HAL_DMA_Abort_IT>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d016      	beq.n	8005160 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800513c:	4610      	mov	r0, r2
 800513e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005140:	e00e      	b.n	8005160 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f9ac 	bl	80054a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005148:	e00a      	b.n	8005160 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f9a8 	bl	80054a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005150:	e006      	b.n	8005160 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f9a4 	bl	80054a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800515e:	e18d      	b.n	800547c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005160:	bf00      	nop
    return;
 8005162:	e18b      	b.n	800547c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005168:	2b01      	cmp	r3, #1
 800516a:	f040 8167 	bne.w	800543c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800516e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 8160 	beq.w	800543c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800517c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8159 	beq.w	800543c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800518a:	2300      	movs	r3, #0
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	60bb      	str	r3, [r7, #8]
 800519e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051aa:	2b40      	cmp	r3, #64	@ 0x40
 80051ac:	f040 80ce 	bne.w	800534c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 80a9 	beq.w	8005318 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051ce:	429a      	cmp	r2, r3
 80051d0:	f080 80a2 	bcs.w	8005318 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051e6:	f000 8088 	beq.w	80052fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	330c      	adds	r3, #12
 80051f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005200:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005208:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005216:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800521a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005222:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800522e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1d9      	bne.n	80051ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3314      	adds	r3, #20
 800523c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005246:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005248:	f023 0301 	bic.w	r3, r3, #1
 800524c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3314      	adds	r3, #20
 8005256:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800525a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800525e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005262:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800526c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e1      	bne.n	8005236 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3314      	adds	r3, #20
 8005278:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005282:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005288:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3314      	adds	r3, #20
 8005292:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005296:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005298:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800529c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e3      	bne.n	8005272 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	330c      	adds	r3, #12
 80052be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052ca:	f023 0310 	bic.w	r3, r3, #16
 80052ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80052dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80052de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e3      	bne.n	80052b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fc fe32 	bl	8001f5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005308:	b29b      	uxth	r3, r3
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	b29b      	uxth	r3, r3
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f8cf 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005316:	e0b3      	b.n	8005480 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800531c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005320:	429a      	cmp	r2, r3
 8005322:	f040 80ad 	bne.w	8005480 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005330:	f040 80a6 	bne.w	8005480 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f8b7 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
      return;
 8005346:	e09b      	b.n	8005480 <HAL_UART_IRQHandler+0x548>
 8005348:	08005607 	.word	0x08005607
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005354:	b29b      	uxth	r3, r3
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 808e 	beq.w	8005484 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 8089 	beq.w	8005484 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	330c      	adds	r3, #12
 8005378:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005384:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005388:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	330c      	adds	r3, #12
 8005392:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005396:	647a      	str	r2, [r7, #68]	@ 0x44
 8005398:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800539c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e3      	bne.n	8005372 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3314      	adds	r3, #20
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	623b      	str	r3, [r7, #32]
   return(result);
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	f023 0301 	bic.w	r3, r3, #1
 80053c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3314      	adds	r3, #20
 80053ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80053d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e3      	bne.n	80053aa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	330c      	adds	r3, #12
 80053f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0310 	bic.w	r3, r3, #16
 8005406:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	330c      	adds	r3, #12
 8005410:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005414:	61fa      	str	r2, [r7, #28]
 8005416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	69b9      	ldr	r1, [r7, #24]
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	617b      	str	r3, [r7, #20]
   return(result);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e3      	bne.n	80053f0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800542e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f83d 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800543a:	e023      	b.n	8005484 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800543c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005444:	2b00      	cmp	r3, #0
 8005446:	d009      	beq.n	800545c <HAL_UART_IRQHandler+0x524>
 8005448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f8e7 	bl	8005628 <UART_Transmit_IT>
    return;
 800545a:	e014      	b.n	8005486 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800545c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00e      	beq.n	8005486 <HAL_UART_IRQHandler+0x54e>
 8005468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800546c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f927 	bl	80056c8 <UART_EndTransmit_IT>
    return;
 800547a:	e004      	b.n	8005486 <HAL_UART_IRQHandler+0x54e>
    return;
 800547c:	bf00      	nop
 800547e:	e002      	b.n	8005486 <HAL_UART_IRQHandler+0x54e>
      return;
 8005480:	bf00      	nop
 8005482:	e000      	b.n	8005486 <HAL_UART_IRQHandler+0x54e>
      return;
 8005484:	bf00      	nop
  }
}
 8005486:	37e8      	adds	r7, #232	@ 0xe8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	4613      	mov	r3, r2
 80054d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	88fa      	ldrh	r2, [r7, #6]
 80054ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2222      	movs	r2, #34	@ 0x22
 80054f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d007      	beq.n	8005512 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005510:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695a      	ldr	r2, [r3, #20]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0201 	orr.w	r2, r2, #1
 8005520:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0220 	orr.w	r2, r2, #32
 8005530:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005540:	b480      	push	{r7}
 8005542:	b095      	sub	sp, #84	@ 0x54
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	330c      	adds	r3, #12
 800554e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800555e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	330c      	adds	r3, #12
 8005566:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005568:	643a      	str	r2, [r7, #64]	@ 0x40
 800556a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800556e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e5      	bne.n	8005548 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3314      	adds	r3, #20
 8005582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	61fb      	str	r3, [r7, #28]
   return(result);
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3314      	adds	r3, #20
 800559a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800559c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800559e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e5      	bne.n	800557c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d119      	bne.n	80055ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	330c      	adds	r3, #12
 80055be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f023 0310 	bic.w	r3, r3, #16
 80055ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	330c      	adds	r3, #12
 80055d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055d8:	61ba      	str	r2, [r7, #24]
 80055da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6979      	ldr	r1, [r7, #20]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	613b      	str	r3, [r7, #16]
   return(result);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e5      	bne.n	80055b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055fa:	bf00      	nop
 80055fc:	3754      	adds	r7, #84	@ 0x54
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005612:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f7ff ff40 	bl	80054a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b21      	cmp	r3, #33	@ 0x21
 800563a:	d13e      	bne.n	80056ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005644:	d114      	bne.n	8005670 <UART_Transmit_IT+0x48>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d110      	bne.n	8005670 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005662:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	1c9a      	adds	r2, r3, #2
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	621a      	str	r2, [r3, #32]
 800566e:	e008      	b.n	8005682 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	1c59      	adds	r1, r3, #1
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6211      	str	r1, [r2, #32]
 800567a:	781a      	ldrb	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29b      	uxth	r3, r3
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	4619      	mov	r1, r3
 8005690:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10f      	bne.n	80056b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68da      	ldr	r2, [r3, #12]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e000      	b.n	80056bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056ba:	2302      	movs	r3, #2
  }
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff fecf 	bl	800548c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08c      	sub	sp, #48	@ 0x30
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005704:	2300      	movs	r3, #0
 8005706:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b22      	cmp	r3, #34	@ 0x22
 8005712:	f040 80aa 	bne.w	800586a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800571e:	d115      	bne.n	800574c <UART_Receive_IT+0x54>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d111      	bne.n	800574c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	b29b      	uxth	r3, r3
 8005736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573a:	b29a      	uxth	r2, r3
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005744:	1c9a      	adds	r2, r3, #2
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	629a      	str	r2, [r3, #40]	@ 0x28
 800574a:	e024      	b.n	8005796 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005750:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800575a:	d007      	beq.n	800576c <UART_Receive_IT+0x74>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <UART_Receive_IT+0x82>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	b2da      	uxtb	r2, r3
 8005774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	e008      	b.n	800578c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005786:	b2da      	uxtb	r2, r3
 8005788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29b      	uxth	r3, r3
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	4619      	mov	r1, r3
 80057a4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d15d      	bne.n	8005866 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0220 	bic.w	r2, r2, #32
 80057b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695a      	ldr	r2, [r3, #20]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0201 	bic.w	r2, r2, #1
 80057d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d135      	bne.n	800585c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	330c      	adds	r3, #12
 80057fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	613b      	str	r3, [r7, #16]
   return(result);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f023 0310 	bic.w	r3, r3, #16
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	330c      	adds	r3, #12
 8005814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005816:	623a      	str	r2, [r7, #32]
 8005818:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	69f9      	ldr	r1, [r7, #28]
 800581c:	6a3a      	ldr	r2, [r7, #32]
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	61bb      	str	r3, [r7, #24]
   return(result);
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e5      	bne.n	80057f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b10      	cmp	r3, #16
 8005836:	d10a      	bne.n	800584e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005852:	4619      	mov	r1, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff fe2d 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
 800585a:	e002      	b.n	8005862 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7fb fc4f 	bl	8001100 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	e002      	b.n	800586c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	e000      	b.n	800586c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800586a:	2302      	movs	r3, #2
  }
}
 800586c:	4618      	mov	r0, r3
 800586e:	3730      	adds	r7, #48	@ 0x30
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005878:	b0c0      	sub	sp, #256	@ 0x100
 800587a:	af00      	add	r7, sp, #0
 800587c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	68d9      	ldr	r1, [r3, #12]
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	ea40 0301 	orr.w	r3, r0, r1
 800589c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800589e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058cc:	f021 010c 	bic.w	r1, r1, #12
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058da:	430b      	orrs	r3, r1
 80058dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ee:	6999      	ldr	r1, [r3, #24]
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	ea40 0301 	orr.w	r3, r0, r1
 80058fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	4b8f      	ldr	r3, [pc, #572]	@ (8005b40 <UART_SetConfig+0x2cc>)
 8005904:	429a      	cmp	r2, r3
 8005906:	d005      	beq.n	8005914 <UART_SetConfig+0xa0>
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b44 <UART_SetConfig+0x2d0>)
 8005910:	429a      	cmp	r2, r3
 8005912:	d104      	bne.n	800591e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005914:	f7fd fe76 	bl	8003604 <HAL_RCC_GetPCLK2Freq>
 8005918:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800591c:	e003      	b.n	8005926 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800591e:	f7fd fe5d 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 8005922:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005930:	f040 810c 	bne.w	8005b4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005938:	2200      	movs	r2, #0
 800593a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800593e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005946:	4622      	mov	r2, r4
 8005948:	462b      	mov	r3, r5
 800594a:	1891      	adds	r1, r2, r2
 800594c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800594e:	415b      	adcs	r3, r3
 8005950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005952:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005956:	4621      	mov	r1, r4
 8005958:	eb12 0801 	adds.w	r8, r2, r1
 800595c:	4629      	mov	r1, r5
 800595e:	eb43 0901 	adc.w	r9, r3, r1
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800596e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005976:	4690      	mov	r8, r2
 8005978:	4699      	mov	r9, r3
 800597a:	4623      	mov	r3, r4
 800597c:	eb18 0303 	adds.w	r3, r8, r3
 8005980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005984:	462b      	mov	r3, r5
 8005986:	eb49 0303 	adc.w	r3, r9, r3
 800598a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800598e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800599a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800599e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059a2:	460b      	mov	r3, r1
 80059a4:	18db      	adds	r3, r3, r3
 80059a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80059a8:	4613      	mov	r3, r2
 80059aa:	eb42 0303 	adc.w	r3, r2, r3
 80059ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80059b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059b8:	f7fa fc0e 	bl	80001d8 <__aeabi_uldivmod>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4b61      	ldr	r3, [pc, #388]	@ (8005b48 <UART_SetConfig+0x2d4>)
 80059c2:	fba3 2302 	umull	r2, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	011c      	lsls	r4, r3, #4
 80059ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	1891      	adds	r1, r2, r2
 80059e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059e4:	415b      	adcs	r3, r3
 80059e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059ec:	4641      	mov	r1, r8
 80059ee:	eb12 0a01 	adds.w	sl, r2, r1
 80059f2:	4649      	mov	r1, r9
 80059f4:	eb43 0b01 	adc.w	fp, r3, r1
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a0c:	4692      	mov	sl, r2
 8005a0e:	469b      	mov	fp, r3
 8005a10:	4643      	mov	r3, r8
 8005a12:	eb1a 0303 	adds.w	r3, sl, r3
 8005a16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a1a:	464b      	mov	r3, r9
 8005a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8005a20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	18db      	adds	r3, r3, r3
 8005a3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a3e:	4613      	mov	r3, r2
 8005a40:	eb42 0303 	adc.w	r3, r2, r3
 8005a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a4e:	f7fa fbc3 	bl	80001d8 <__aeabi_uldivmod>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4611      	mov	r1, r2
 8005a58:	4b3b      	ldr	r3, [pc, #236]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	2264      	movs	r2, #100	@ 0x64
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	1acb      	subs	r3, r1, r3
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a6e:	4b36      	ldr	r3, [pc, #216]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005a70:	fba3 2302 	umull	r2, r3, r3, r2
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a7c:	441c      	add	r4, r3
 8005a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a90:	4642      	mov	r2, r8
 8005a92:	464b      	mov	r3, r9
 8005a94:	1891      	adds	r1, r2, r2
 8005a96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a98:	415b      	adcs	r3, r3
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	1851      	adds	r1, r2, r1
 8005aa4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	414b      	adcs	r3, r1
 8005aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ab8:	4659      	mov	r1, fp
 8005aba:	00cb      	lsls	r3, r1, #3
 8005abc:	4651      	mov	r1, sl
 8005abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac2:	4651      	mov	r1, sl
 8005ac4:	00ca      	lsls	r2, r1, #3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4603      	mov	r3, r0
 8005acc:	4642      	mov	r2, r8
 8005ace:	189b      	adds	r3, r3, r2
 8005ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ad4:	464b      	mov	r3, r9
 8005ad6:	460a      	mov	r2, r1
 8005ad8:	eb42 0303 	adc.w	r3, r2, r3
 8005adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005aec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005af4:	460b      	mov	r3, r1
 8005af6:	18db      	adds	r3, r3, r3
 8005af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005afa:	4613      	mov	r3, r2
 8005afc:	eb42 0303 	adc.w	r3, r2, r3
 8005b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b0a:	f7fa fb65 	bl	80001d8 <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005b14:	fba3 1302 	umull	r1, r3, r3, r2
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	2164      	movs	r1, #100	@ 0x64
 8005b1c:	fb01 f303 	mul.w	r3, r1, r3
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	3332      	adds	r3, #50	@ 0x32
 8005b26:	4a08      	ldr	r2, [pc, #32]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005b28:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	f003 0207 	and.w	r2, r3, #7
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4422      	add	r2, r4
 8005b3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b3c:	e106      	b.n	8005d4c <UART_SetConfig+0x4d8>
 8005b3e:	bf00      	nop
 8005b40:	40011000 	.word	0x40011000
 8005b44:	40011400 	.word	0x40011400
 8005b48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b5e:	4642      	mov	r2, r8
 8005b60:	464b      	mov	r3, r9
 8005b62:	1891      	adds	r1, r2, r2
 8005b64:	6239      	str	r1, [r7, #32]
 8005b66:	415b      	adcs	r3, r3
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b6e:	4641      	mov	r1, r8
 8005b70:	1854      	adds	r4, r2, r1
 8005b72:	4649      	mov	r1, r9
 8005b74:	eb43 0501 	adc.w	r5, r3, r1
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	00eb      	lsls	r3, r5, #3
 8005b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b86:	00e2      	lsls	r2, r4, #3
 8005b88:	4614      	mov	r4, r2
 8005b8a:	461d      	mov	r5, r3
 8005b8c:	4643      	mov	r3, r8
 8005b8e:	18e3      	adds	r3, r4, r3
 8005b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b94:	464b      	mov	r3, r9
 8005b96:	eb45 0303 	adc.w	r3, r5, r3
 8005b9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005baa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bba:	4629      	mov	r1, r5
 8005bbc:	008b      	lsls	r3, r1, #2
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	008a      	lsls	r2, r1, #2
 8005bc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bcc:	f7fa fb04 	bl	80001d8 <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4b60      	ldr	r3, [pc, #384]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	011c      	lsls	r4, r3, #4
 8005bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005be8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	1891      	adds	r1, r2, r2
 8005bf6:	61b9      	str	r1, [r7, #24]
 8005bf8:	415b      	adcs	r3, r3
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c00:	4641      	mov	r1, r8
 8005c02:	1851      	adds	r1, r2, r1
 8005c04:	6139      	str	r1, [r7, #16]
 8005c06:	4649      	mov	r1, r9
 8005c08:	414b      	adcs	r3, r1
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c18:	4659      	mov	r1, fp
 8005c1a:	00cb      	lsls	r3, r1, #3
 8005c1c:	4651      	mov	r1, sl
 8005c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c22:	4651      	mov	r1, sl
 8005c24:	00ca      	lsls	r2, r1, #3
 8005c26:	4610      	mov	r0, r2
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	189b      	adds	r3, r3, r2
 8005c30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c34:	464b      	mov	r3, r9
 8005c36:	460a      	mov	r2, r1
 8005c38:	eb42 0303 	adc.w	r3, r2, r3
 8005c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c58:	4649      	mov	r1, r9
 8005c5a:	008b      	lsls	r3, r1, #2
 8005c5c:	4641      	mov	r1, r8
 8005c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c62:	4641      	mov	r1, r8
 8005c64:	008a      	lsls	r2, r1, #2
 8005c66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c6a:	f7fa fab5 	bl	80001d8 <__aeabi_uldivmod>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4611      	mov	r1, r2
 8005c74:	4b38      	ldr	r3, [pc, #224]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005c76:	fba3 2301 	umull	r2, r3, r3, r1
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	2264      	movs	r2, #100	@ 0x64
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	1acb      	subs	r3, r1, r3
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	3332      	adds	r3, #50	@ 0x32
 8005c88:	4a33      	ldr	r2, [pc, #204]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c94:	441c      	add	r4, r3
 8005c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ca0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	1891      	adds	r1, r2, r2
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	415b      	adcs	r3, r3
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	1851      	adds	r1, r2, r1
 8005cb8:	6039      	str	r1, [r7, #0]
 8005cba:	4649      	mov	r1, r9
 8005cbc:	414b      	adcs	r3, r1
 8005cbe:	607b      	str	r3, [r7, #4]
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ccc:	4659      	mov	r1, fp
 8005cce:	00cb      	lsls	r3, r1, #3
 8005cd0:	4651      	mov	r1, sl
 8005cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cd6:	4651      	mov	r1, sl
 8005cd8:	00ca      	lsls	r2, r1, #3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	189b      	adds	r3, r3, r2
 8005ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	460a      	mov	r2, r1
 8005cea:	eb42 0303 	adc.w	r3, r2, r3
 8005cee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cfa:	667a      	str	r2, [r7, #100]	@ 0x64
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d08:	4649      	mov	r1, r9
 8005d0a:	008b      	lsls	r3, r1, #2
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d12:	4641      	mov	r1, r8
 8005d14:	008a      	lsls	r2, r1, #2
 8005d16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d1a:	f7fa fa5d 	bl	80001d8 <__aeabi_uldivmod>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4b0d      	ldr	r3, [pc, #52]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005d24:	fba3 1302 	umull	r1, r3, r3, r2
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	2164      	movs	r1, #100	@ 0x64
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	3332      	adds	r3, #50	@ 0x32
 8005d36:	4a08      	ldr	r2, [pc, #32]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	f003 020f 	and.w	r2, r3, #15
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4422      	add	r2, r4
 8005d4a:	609a      	str	r2, [r3, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d52:	46bd      	mov	sp, r7
 8005d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d58:	51eb851f 	.word	0x51eb851f

08005d5c <memset>:
 8005d5c:	4402      	add	r2, r0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d100      	bne.n	8005d66 <memset+0xa>
 8005d64:	4770      	bx	lr
 8005d66:	f803 1b01 	strb.w	r1, [r3], #1
 8005d6a:	e7f9      	b.n	8005d60 <memset+0x4>

08005d6c <__libc_init_array>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	4d0d      	ldr	r5, [pc, #52]	@ (8005da4 <__libc_init_array+0x38>)
 8005d70:	4c0d      	ldr	r4, [pc, #52]	@ (8005da8 <__libc_init_array+0x3c>)
 8005d72:	1b64      	subs	r4, r4, r5
 8005d74:	10a4      	asrs	r4, r4, #2
 8005d76:	2600      	movs	r6, #0
 8005d78:	42a6      	cmp	r6, r4
 8005d7a:	d109      	bne.n	8005d90 <__libc_init_array+0x24>
 8005d7c:	4d0b      	ldr	r5, [pc, #44]	@ (8005dac <__libc_init_array+0x40>)
 8005d7e:	4c0c      	ldr	r4, [pc, #48]	@ (8005db0 <__libc_init_array+0x44>)
 8005d80:	f000 f818 	bl	8005db4 <_init>
 8005d84:	1b64      	subs	r4, r4, r5
 8005d86:	10a4      	asrs	r4, r4, #2
 8005d88:	2600      	movs	r6, #0
 8005d8a:	42a6      	cmp	r6, r4
 8005d8c:	d105      	bne.n	8005d9a <__libc_init_array+0x2e>
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
 8005d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d94:	4798      	blx	r3
 8005d96:	3601      	adds	r6, #1
 8005d98:	e7ee      	b.n	8005d78 <__libc_init_array+0xc>
 8005d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d9e:	4798      	blx	r3
 8005da0:	3601      	adds	r6, #1
 8005da2:	e7f2      	b.n	8005d8a <__libc_init_array+0x1e>
 8005da4:	08005e18 	.word	0x08005e18
 8005da8:	08005e18 	.word	0x08005e18
 8005dac:	08005e18 	.word	0x08005e18
 8005db0:	08005e1c 	.word	0x08005e1c

08005db4 <_init>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	bf00      	nop
 8005db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dba:	bc08      	pop	{r3}
 8005dbc:	469e      	mov	lr, r3
 8005dbe:	4770      	bx	lr

08005dc0 <_fini>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	bf00      	nop
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr
