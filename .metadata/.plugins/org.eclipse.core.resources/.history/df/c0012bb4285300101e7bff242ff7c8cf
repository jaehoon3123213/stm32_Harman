
MiniProject_Dog_Feed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007500  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080076a0  080076a0  000086a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a8  080078a8  000090c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080078a8  080078a8  000088a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078b0  080078b0  000090c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078b0  080078b0  000088b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078b4  080078b4  000088b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  080078b8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  200000c8  08007980  000090c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08007980  00009568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171ee  00000000  00000000  000090f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041e5  00000000  00000000  000202e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  000244d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc3  00000000  00000000  00025950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a212  00000000  00000000  00026913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc2a  00000000  00000000  00040b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000938ff  00000000  00000000  0005d74f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f104e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be8  00000000  00000000  000f1094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000f6c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c8 	.word	0x200000c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007688 	.word	0x08007688

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000cc 	.word	0x200000cc
 80001dc:	08007688 	.word	0x08007688

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	@ 0x28
 80005d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b5a      	ldr	r3, [pc, #360]	@ (8000750 <MX_GPIO_Init+0x184>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a59      	ldr	r2, [pc, #356]	@ (8000750 <MX_GPIO_Init+0x184>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b57      	ldr	r3, [pc, #348]	@ (8000750 <MX_GPIO_Init+0x184>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b53      	ldr	r3, [pc, #332]	@ (8000750 <MX_GPIO_Init+0x184>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a52      	ldr	r2, [pc, #328]	@ (8000750 <MX_GPIO_Init+0x184>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b50      	ldr	r3, [pc, #320]	@ (8000750 <MX_GPIO_Init+0x184>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b4c      	ldr	r3, [pc, #304]	@ (8000750 <MX_GPIO_Init+0x184>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a4b      	ldr	r2, [pc, #300]	@ (8000750 <MX_GPIO_Init+0x184>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b49      	ldr	r3, [pc, #292]	@ (8000750 <MX_GPIO_Init+0x184>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b45      	ldr	r3, [pc, #276]	@ (8000750 <MX_GPIO_Init+0x184>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a44      	ldr	r2, [pc, #272]	@ (8000750 <MX_GPIO_Init+0x184>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b42      	ldr	r3, [pc, #264]	@ (8000750 <MX_GPIO_Init+0x184>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8000658:	483e      	ldr	r0, [pc, #248]	@ (8000754 <MX_GPIO_Init+0x188>)
 800065a:	f002 fe2f 	bl	80032bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800065e:	2200      	movs	r2, #0
 8000660:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000664:	483c      	ldr	r0, [pc, #240]	@ (8000758 <MX_GPIO_Init+0x18c>)
 8000666:	f002 fe29 	bl	80032bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 8000670:	483a      	ldr	r0, [pc, #232]	@ (800075c <MX_GPIO_Init+0x190>)
 8000672:	f002 fe23 	bl	80032bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000676:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4619      	mov	r1, r3
 800068e:	4831      	ldr	r0, [pc, #196]	@ (8000754 <MX_GPIO_Init+0x188>)
 8000690:	f002 fc78 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000694:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000698:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	482a      	ldr	r0, [pc, #168]	@ (8000758 <MX_GPIO_Init+0x18c>)
 80006ae:	f002 fc69 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006b8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	4823      	ldr	r0, [pc, #140]	@ (8000758 <MX_GPIO_Init+0x18c>)
 80006ca:	f002 fc5b 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006ce:	2380      	movs	r3, #128	@ 0x80
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	481c      	ldr	r0, [pc, #112]	@ (8000754 <MX_GPIO_Init+0x188>)
 80006e2:	f002 fc4f 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 80006e6:	f44f 53d0 	mov.w	r3, #6656	@ 0x1a00
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	4817      	ldr	r0, [pc, #92]	@ (800075c <MX_GPIO_Init+0x190>)
 8000700:	f002 fc40 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	4810      	ldr	r0, [pc, #64]	@ (800075c <MX_GPIO_Init+0x190>)
 800071a:	f002 fc33 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800071e:	2328      	movs	r3, #40	@ 0x28
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	4809      	ldr	r0, [pc, #36]	@ (8000758 <MX_GPIO_Init+0x18c>)
 8000732:	f002 fc27 	bl	8002f84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2028      	movs	r0, #40	@ 0x28
 800073c:	f002 fb3d 	bl	8002dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000740:	2028      	movs	r0, #40	@ 0x28
 8000742:	f002 fb56 	bl	8002df2 <HAL_NVIC_EnableIRQ>

}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	@ 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40020800 	.word	0x40020800
 8000758:	40020400 	.word	0x40020400
 800075c:	40020000 	.word	0x40020000

08000760 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000766:	4a13      	ldr	r2, [pc, #76]	@ (80007b4 <MX_I2C1_Init+0x54>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800076c:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <MX_I2C1_Init+0x58>)
 800076e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800077e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000782:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800079e:	f002 fdcb 	bl	8003338 <HAL_I2C_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a8:	f000 f8d4 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000e4 	.word	0x200000e4
 80007b4:	40005400 	.word	0x40005400
 80007b8:	000186a0 	.word	0x000186a0

080007bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	@ 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a19      	ldr	r2, [pc, #100]	@ (8000840 <HAL_I2C_MspInit+0x84>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d12c      	bne.n	8000838 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <HAL_I2C_MspInit+0x88>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a17      	ldr	r2, [pc, #92]	@ (8000844 <HAL_I2C_MspInit+0x88>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <HAL_I2C_MspInit+0x88>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000800:	2312      	movs	r3, #18
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800080c:	2304      	movs	r3, #4
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	480c      	ldr	r0, [pc, #48]	@ (8000848 <HAL_I2C_MspInit+0x8c>)
 8000818:	f002 fbb4 	bl	8002f84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <HAL_I2C_MspInit+0x88>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	4a07      	ldr	r2, [pc, #28]	@ (8000844 <HAL_I2C_MspInit+0x88>)
 8000826:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800082a:	6413      	str	r3, [r2, #64]	@ 0x40
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <HAL_I2C_MspInit+0x88>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	@ 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40005400 	.word	0x40005400
 8000844:	40023800 	.word	0x40023800
 8000848:	40020400 	.word	0x40020400

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f002 f900 	bl	8002a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f816 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f7ff feb8 	bl	80005cc <MX_GPIO_Init>
  MX_TIM2_Init();
 800085c:	f000 fa30 	bl	8000cc0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000860:	f000 fc7a 	bl	8001158 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000864:	f7ff ff7c 	bl	8000760 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000868:	f000 fa76 	bl	8000d58 <MX_TIM3_Init>
  MX_TIM1_Init();
 800086c:	f000 f9a4 	bl	8000bb8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000870:	f000 faea 	bl	8000e48 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000874:	f000 fb36 	bl	8000ee4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 8000878:	f001 f9ca 	bl	8001c10 <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 800087c:	f001 f9b4 	bl	8001be8 <ap_main>
 8000880:	e7fc      	b.n	800087c <main+0x30>
	...

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	@ 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2230      	movs	r2, #48	@ 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f005 ff23 	bl	80066de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b27      	ldr	r3, [pc, #156]	@ (800094c <SystemClock_Config+0xc8>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	4a26      	ldr	r2, [pc, #152]	@ (800094c <SystemClock_Config+0xc8>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b8:	4b24      	ldr	r3, [pc, #144]	@ (800094c <SystemClock_Config+0xc8>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <SystemClock_Config+0xcc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a20      	ldr	r2, [pc, #128]	@ (8000950 <SystemClock_Config+0xcc>)
 80008ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <SystemClock_Config+0xcc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008f8:	2364      	movs	r3, #100	@ 0x64
 80008fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 0320 	add.w	r3, r7, #32
 8000908:	4618      	mov	r0, r3
 800090a:	f003 f9b3 	bl	8003c74 <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000914:	f000 f81e 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2302      	movs	r3, #2
 800091e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2103      	movs	r1, #3
 8000934:	4618      	mov	r0, r3
 8000936:	f003 fc15 	bl	8004164 <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000940:	f000 f808 	bl	8000954 <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3750      	adds	r7, #80	@ 0x50
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40007000 	.word	0x40007000

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <Error_Handler+0x8>

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	4a0f      	ldr	r2, [pc, #60]	@ (80009ac <HAL_MspInit+0x4c>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000974:	6453      	str	r3, [r2, #68]	@ 0x44
 8000976:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <HAL_MspInit+0x4c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	@ 0x40
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <NMI_Handler+0x4>

080009b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <MemManage_Handler+0x4>

080009c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a06:	f002 f877 	bl	8002af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a14:	4802      	ldr	r0, [pc, #8]	@ (8000a20 <TIM2_IRQHandler+0x10>)
 8000a16:	f003 ff48 	bl	80048aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000184 	.word	0x20000184

08000a24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a28:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <USART2_IRQHandler+0x10>)
 8000a2a:	f004 fdd7 	bl	80055dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200002a4 	.word	0x200002a4

08000a38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000a3c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000a40:	f002 fc56 	bl	80032f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
   DHT11_EXTI_Callback();
 8000a44:	f001 fb8a 	bl	800215c <DHT11_EXTI_Callback>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	e00a      	b.n	8000a74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a5e:	f3af 8000 	nop.w
 8000a62:	4601      	mov	r1, r0
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	60ba      	str	r2, [r7, #8]
 8000a6a:	b2ca      	uxtb	r2, r1
 8000a6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	3301      	adds	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	dbf0      	blt.n	8000a5e <_read+0x12>
  }

  return len;
 8000a7c:	687b      	ldr	r3, [r7, #4]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	60f8      	str	r0, [r7, #12]
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	e009      	b.n	8000aac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	60ba      	str	r2, [r7, #8]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbf1      	blt.n	8000a98 <_write+0x12>
  }
  return len;
 8000ab4:	687b      	ldr	r3, [r7, #4]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <_close>:

int _close(int file)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ae6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <_isatty>:

int _isatty(int file)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b30:	4a14      	ldr	r2, [pc, #80]	@ (8000b84 <_sbrk+0x5c>)
 8000b32:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <_sbrk+0x60>)
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b44:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <_sbrk+0x64>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	@ (8000b90 <_sbrk+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d207      	bcs.n	8000b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b58:	f005 fe10 	bl	800677c <__errno>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	220c      	movs	r2, #12
 8000b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	e009      	b.n	8000b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a05      	ldr	r2, [pc, #20]	@ (8000b8c <_sbrk+0x64>)
 8000b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20020000 	.word	0x20020000
 8000b88:	00000400 	.word	0x00000400
 8000b8c:	20000138 	.word	0x20000138
 8000b90:	20000568 	.word	0x20000568

08000b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	@ (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b092      	sub	sp, #72	@ 0x48
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
 8000bd8:	615a      	str	r2, [r3, #20]
 8000bda:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2220      	movs	r2, #32
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f005 fd7b 	bl	80066de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be8:	4b33      	ldr	r3, [pc, #204]	@ (8000cb8 <MX_TIM1_Init+0x100>)
 8000bea:	4a34      	ldr	r2, [pc, #208]	@ (8000cbc <MX_TIM1_Init+0x104>)
 8000bec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8000bee:	4b32      	ldr	r3, [pc, #200]	@ (8000cb8 <MX_TIM1_Init+0x100>)
 8000bf0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000bf4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b30      	ldr	r3, [pc, #192]	@ (8000cb8 <MX_TIM1_Init+0x100>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb8 <MX_TIM1_Init+0x100>)
 8000bfe:	2263      	movs	r2, #99	@ 0x63
 8000c00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c02:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb8 <MX_TIM1_Init+0x100>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c08:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb8 <MX_TIM1_Init+0x100>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb8 <MX_TIM1_Init+0x100>)
 8000c10:	2280      	movs	r2, #128	@ 0x80
 8000c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c14:	4828      	ldr	r0, [pc, #160]	@ (8000cb8 <MX_TIM1_Init+0x100>)
 8000c16:	f003 fdf9 	bl	800480c <HAL_TIM_PWM_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000c20:	f7ff fe98 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c2c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c30:	4619      	mov	r1, r3
 8000c32:	4821      	ldr	r0, [pc, #132]	@ (8000cb8 <MX_TIM1_Init+0x100>)
 8000c34:	f004 fb88 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c3e:	f7ff fe89 	bl	8000954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c42:	2360      	movs	r3, #96	@ 0x60
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 50-1;
 8000c46:	2331      	movs	r3, #49	@ 0x31
 8000c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c62:	2200      	movs	r2, #0
 8000c64:	4619      	mov	r1, r3
 8000c66:	4814      	ldr	r0, [pc, #80]	@ (8000cb8 <MX_TIM1_Init+0x100>)
 8000c68:	f003 ff10 	bl	8004a8c <HAL_TIM_PWM_ConfigChannel>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000c72:	f7ff fe6f 	bl	8000954 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4807      	ldr	r0, [pc, #28]	@ (8000cb8 <MX_TIM1_Init+0x100>)
 8000c9a:	f004 fbc3 	bl	8005424 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000ca4:	f7ff fe56 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ca8:	4803      	ldr	r0, [pc, #12]	@ (8000cb8 <MX_TIM1_Init+0x100>)
 8000caa:	f000 f9f3 	bl	8001094 <HAL_TIM_MspPostInit>

}
 8000cae:	bf00      	nop
 8000cb0:	3748      	adds	r7, #72	@ 0x48
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000013c 	.word	0x2000013c
 8000cbc:	40010000 	.word	0x40010000

08000cc0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <MX_TIM2_Init+0x94>)
 8000cde:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ce2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <MX_TIM2_Init+0x94>)
 8000ce6:	2263      	movs	r2, #99	@ 0x63
 8000ce8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <MX_TIM2_Init+0x94>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <MX_TIM2_Init+0x94>)
 8000cf2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cf6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf8:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <MX_TIM2_Init+0x94>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <MX_TIM2_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d04:	4813      	ldr	r0, [pc, #76]	@ (8000d54 <MX_TIM2_Init+0x94>)
 8000d06:	f003 fc4d 	bl	80045a4 <HAL_TIM_Base_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d10:	f7ff fe20 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <MX_TIM2_Init+0x94>)
 8000d22:	f003 ff75 	bl	8004c10 <HAL_TIM_ConfigClockSource>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d2c:	f7ff fe12 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d38:	463b      	mov	r3, r7
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <MX_TIM2_Init+0x94>)
 8000d3e:	f004 fb03 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d48:	f7ff fe04 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000184 	.word	0x20000184

08000d58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08e      	sub	sp, #56	@ 0x38
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d88:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <MX_TIM3_Init+0xe8>)
 8000d8a:	4a2e      	ldr	r2, [pc, #184]	@ (8000e44 <MX_TIM3_Init+0xec>)
 8000d8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e40 <MX_TIM3_Init+0xe8>)
 8000d90:	2263      	movs	r2, #99	@ 0x63
 8000d92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <MX_TIM3_Init+0xe8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000d9a:	4b29      	ldr	r3, [pc, #164]	@ (8000e40 <MX_TIM3_Init+0xe8>)
 8000d9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000da0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da2:	4b27      	ldr	r3, [pc, #156]	@ (8000e40 <MX_TIM3_Init+0xe8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000da8:	4b25      	ldr	r3, [pc, #148]	@ (8000e40 <MX_TIM3_Init+0xe8>)
 8000daa:	2280      	movs	r2, #128	@ 0x80
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dae:	4824      	ldr	r0, [pc, #144]	@ (8000e40 <MX_TIM3_Init+0xe8>)
 8000db0:	f003 fbf8 	bl	80045a4 <HAL_TIM_Base_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000dba:	f7ff fdcb 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dc4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481d      	ldr	r0, [pc, #116]	@ (8000e40 <MX_TIM3_Init+0xe8>)
 8000dcc:	f003 ff20 	bl	8004c10 <HAL_TIM_ConfigClockSource>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000dd6:	f7ff fdbd 	bl	8000954 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dda:	4819      	ldr	r0, [pc, #100]	@ (8000e40 <MX_TIM3_Init+0xe8>)
 8000ddc:	f003 fd16 	bl	800480c <HAL_TIM_PWM_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000de6:	f7ff fdb5 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000df2:	f107 0320 	add.w	r3, r7, #32
 8000df6:	4619      	mov	r1, r3
 8000df8:	4811      	ldr	r0, [pc, #68]	@ (8000e40 <MX_TIM3_Init+0xe8>)
 8000dfa:	f004 faa5 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e04:	f7ff fda6 	bl	8000954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e08:	2360      	movs	r3, #96	@ 0x60
 8000e0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000e0c:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000e10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4807      	ldr	r0, [pc, #28]	@ (8000e40 <MX_TIM3_Init+0xe8>)
 8000e22:	f003 fe33 	bl	8004a8c <HAL_TIM_PWM_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000e2c:	f7ff fd92 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e30:	4803      	ldr	r0, [pc, #12]	@ (8000e40 <MX_TIM3_Init+0xe8>)
 8000e32:	f000 f92f 	bl	8001094 <HAL_TIM_MspPostInit>

}
 8000e36:	bf00      	nop
 8000e38:	3738      	adds	r7, #56	@ 0x38
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200001cc 	.word	0x200001cc
 8000e44:	40000400 	.word	0x40000400

08000e48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e64:	4b1d      	ldr	r3, [pc, #116]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000e66:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee0 <MX_TIM4_Init+0x98>)
 8000e68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000e6c:	2263      	movs	r2, #99	@ 0x63
 8000e6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e76:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000e78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e84:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e8a:	4814      	ldr	r0, [pc, #80]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000e8c:	f003 fb8a 	bl	80045a4 <HAL_TIM_Base_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e96:	f7ff fd5d 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480d      	ldr	r0, [pc, #52]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000ea8:	f003 feb2 	bl	8004c10 <HAL_TIM_ConfigClockSource>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000eb2:	f7ff fd4f 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000ec4:	f004 fa40 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000ece:	f7ff fd41 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000214 	.word	0x20000214
 8000ee0:	40000800 	.word	0x40000800

08000ee4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <MX_TIM5_Init+0x94>)
 8000f02:	4a1e      	ldr	r2, [pc, #120]	@ (8000f7c <MX_TIM5_Init+0x98>)
 8000f04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <MX_TIM5_Init+0x94>)
 8000f08:	2263      	movs	r2, #99	@ 0x63
 8000f0a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <MX_TIM5_Init+0x94>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f12:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <MX_TIM5_Init+0x94>)
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <MX_TIM5_Init+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f20:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <MX_TIM5_Init+0x94>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f26:	4814      	ldr	r0, [pc, #80]	@ (8000f78 <MX_TIM5_Init+0x94>)
 8000f28:	f003 fb3c 	bl	80045a4 <HAL_TIM_Base_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000f32:	f7ff fd0f 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	4619      	mov	r1, r3
 8000f42:	480d      	ldr	r0, [pc, #52]	@ (8000f78 <MX_TIM5_Init+0x94>)
 8000f44:	f003 fe64 	bl	8004c10 <HAL_TIM_ConfigClockSource>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f7ff fd01 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <MX_TIM5_Init+0x94>)
 8000f60:	f004 f9f2 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000f6a:	f7ff fcf3 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000025c 	.word	0x2000025c
 8000f7c:	40000c00 	.word	0x40000c00

08000f80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fbc <HAL_TIM_PWM_MspInit+0x3c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d10d      	bne.n	8000fae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <HAL_TIM_PWM_MspInit+0x40>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	4a09      	ldr	r2, [pc, #36]	@ (8000fc0 <HAL_TIM_PWM_MspInit+0x40>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <HAL_TIM_PWM_MspInit+0x40>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fd4:	d116      	bne.n	8001004 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <HAL_TIM_Base_MspInit+0xc0>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	4a29      	ldr	r2, [pc, #164]	@ (8001084 <HAL_TIM_Base_MspInit+0xc0>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe6:	4b27      	ldr	r3, [pc, #156]	@ (8001084 <HAL_TIM_Base_MspInit+0xc0>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	201c      	movs	r0, #28
 8000ff8:	f001 fedf 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ffc:	201c      	movs	r0, #28
 8000ffe:	f001 fef8 	bl	8002df2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001002:	e03a      	b.n	800107a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a1f      	ldr	r2, [pc, #124]	@ (8001088 <HAL_TIM_Base_MspInit+0xc4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10e      	bne.n	800102c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <HAL_TIM_Base_MspInit+0xc0>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	4a1b      	ldr	r2, [pc, #108]	@ (8001084 <HAL_TIM_Base_MspInit+0xc0>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6413      	str	r3, [r2, #64]	@ 0x40
 800101e:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <HAL_TIM_Base_MspInit+0xc0>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
}
 800102a:	e026      	b.n	800107a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a16      	ldr	r2, [pc, #88]	@ (800108c <HAL_TIM_Base_MspInit+0xc8>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d10e      	bne.n	8001054 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_TIM_Base_MspInit+0xc0>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	4a11      	ldr	r2, [pc, #68]	@ (8001084 <HAL_TIM_Base_MspInit+0xc0>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6413      	str	r3, [r2, #64]	@ 0x40
 8001046:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <HAL_TIM_Base_MspInit+0xc0>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
}
 8001052:	e012      	b.n	800107a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	@ (8001090 <HAL_TIM_Base_MspInit+0xcc>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10d      	bne.n	800107a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <HAL_TIM_Base_MspInit+0xc0>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	4a07      	ldr	r2, [pc, #28]	@ (8001084 <HAL_TIM_Base_MspInit+0xc0>)
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	6413      	str	r3, [r2, #64]	@ 0x40
 800106e:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <HAL_TIM_Base_MspInit+0xc0>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40000400 	.word	0x40000400
 800108c:	40000800 	.word	0x40000800
 8001090:	40000c00 	.word	0x40000c00

08001094 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a24      	ldr	r2, [pc, #144]	@ (8001144 <HAL_TIM_MspPostInit+0xb0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d11f      	bne.n	80010f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	4b23      	ldr	r3, [pc, #140]	@ (8001148 <HAL_TIM_MspPostInit+0xb4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a22      	ldr	r2, [pc, #136]	@ (8001148 <HAL_TIM_MspPostInit+0xb4>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <HAL_TIM_MspPostInit+0xb4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	4817      	ldr	r0, [pc, #92]	@ (800114c <HAL_TIM_MspPostInit+0xb8>)
 80010f0:	f001 ff48 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010f4:	e022      	b.n	800113c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a15      	ldr	r2, [pc, #84]	@ (8001150 <HAL_TIM_MspPostInit+0xbc>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d11d      	bne.n	800113c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <HAL_TIM_MspPostInit+0xb4>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001108:	4a0f      	ldr	r2, [pc, #60]	@ (8001148 <HAL_TIM_MspPostInit+0xb4>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001110:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <HAL_TIM_MspPostInit+0xb4>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800111c:	2310      	movs	r3, #16
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800112c:	2302      	movs	r3, #2
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4807      	ldr	r0, [pc, #28]	@ (8001154 <HAL_TIM_MspPostInit+0xc0>)
 8001138:	f001 ff24 	bl	8002f84 <HAL_GPIO_Init>
}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	@ 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40010000 	.word	0x40010000
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000
 8001150:	40000400 	.word	0x40000400
 8001154:	40020400 	.word	0x40020400

08001158 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 800115e:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <MX_USART2_UART_Init+0x50>)
 8001160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001190:	f004 f9ae 	bl	80054f0 <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800119a:	f7ff fbdb 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200002a4 	.word	0x200002a4
 80011a8:	40004400 	.word	0x40004400

080011ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001240 <HAL_UART_MspInit+0x94>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d133      	bne.n	8001236 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a14      	ldr	r2, [pc, #80]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001206:	230c      	movs	r3, #12
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001216:	2307      	movs	r3, #7
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4809      	ldr	r0, [pc, #36]	@ (8001248 <HAL_UART_MspInit+0x9c>)
 8001222:	f001 feaf 	bl	8002f84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2026      	movs	r0, #38	@ 0x26
 800122c:	f001 fdc5 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001230:	2026      	movs	r0, #38	@ 0x26
 8001232:	f001 fdde 	bl	8002df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	@ 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40004400 	.word	0x40004400
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001284 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001250:	f7ff fca0 	bl	8000b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001256:	490d      	ldr	r1, [pc, #52]	@ (800128c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800126c:	4c0a      	ldr	r4, [pc, #40]	@ (8001298 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127a:	f005 fa85 	bl	8006788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127e:	f7ff fae5 	bl	800084c <main>
  bx  lr    
 8001282:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001284:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8001290:	080078b8 	.word	0x080078b8
  ldr r2, =_sbss
 8001294:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001298:	20000568 	.word	0x20000568

0800129c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC_IRQHandler>
	...

080012a0 <Controller_Excute>:
static uint8_t Controller_CheckEnvironmentStatus(void);

extern time_TypeDef time_feed_period;

void Controller_Excute()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
    // 전체 FSM 동작
   Control_TOP_FSM();
 80012a4:	f000 f968 	bl	8001578 <Control_TOP_FSM>
    // flag 업데이트
   controlFlag.feedEmptyFlag = (Controller_CheckFeedRemainAlarm() == 1);
 80012a8:	f000 f87c 	bl	80013a4 <Controller_CheckFeedRemainAlarm>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	bf0c      	ite	eq
 80012b2:	2301      	moveq	r3, #1
 80012b4:	2300      	movne	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <Controller_Excute+0x44>)
 80012bc:	701a      	strb	r2, [r3, #0]
   controlFlag.feedEnvironmentFlag = (Controller_CheckEnvironmentStatus() == 1);
 80012be:	f000 f887 	bl	80013d0 <Controller_CheckEnvironmentStatus>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	bf0c      	ite	eq
 80012c8:	2301      	moveq	r3, #1
 80012ca:	2300      	movne	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <Controller_Excute+0x44>)
 80012d2:	705a      	strb	r2, [r3, #1]
   // feed_remain 업데이트
   controlDataOut.feed_remain = MAX_HEIGHT - controlData.US_dist;
 80012d4:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <Controller_Excute+0x48>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f1c3 030f 	rsb	r3, r3, #15
 80012dc:	4a03      	ldr	r2, [pc, #12]	@ (80012ec <Controller_Excute+0x4c>)
 80012de:	6093      	str	r3, [r2, #8]
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	2000030c 	.word	0x2000030c
 80012e8:	200002ec 	.word	0x200002ec
 80012ec:	20000300 	.word	0x20000300

080012f0 <Controller_SetInputData>:




void Controller_SetInputData(inputData_TypeDef inputData)
{
 80012f0:	b084      	sub	sp, #16
 80012f2:	b490      	push	{r4, r7}
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	f107 0408 	add.w	r4, r7, #8
 80012fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   // 사용자 입력 데이터 (배급 주기,양)
       if (inputData.id == MODE || inputData.id == DATA_UP || inputData.id == DATA_DOWN)
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d005      	beq.n	8001310 <Controller_SetInputData+0x20>
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d002      	beq.n	8001310 <Controller_SetInputData+0x20>
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2b03      	cmp	r3, #3
 800130e:	d106      	bne.n	800131e <Controller_SetInputData+0x2e>
       {
           controlData.id = inputData.id;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4a19      	ldr	r2, [pc, #100]	@ (8001378 <Controller_SetInputData+0x88>)
 8001314:	6013      	str	r3, [r2, #0]
           controlData.input_act = inputData.input_act;
 8001316:	7b3a      	ldrb	r2, [r7, #12]
 8001318:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <Controller_SetInputData+0x88>)
 800131a:	711a      	strb	r2, [r3, #4]
      else if (inputData.id == HUMID) {
         controlData.humid = inputData.humid;
      }
   
   
}
 800131c:	e027      	b.n	800136e <Controller_SetInputData+0x7e>
       else if (inputData.id == INPUT_DONE)
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2b04      	cmp	r3, #4
 8001322:	d106      	bne.n	8001332 <Controller_SetInputData+0x42>
           controlData.id = INPUT_DONE;
 8001324:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <Controller_SetInputData+0x88>)
 8001326:	2204      	movs	r2, #4
 8001328:	601a      	str	r2, [r3, #0]
           controlData.input_act = inputData.input_act;
 800132a:	7b3a      	ldrb	r2, [r7, #12]
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <Controller_SetInputData+0x88>)
 800132e:	711a      	strb	r2, [r3, #4]
}
 8001330:	e01d      	b.n	800136e <Controller_SetInputData+0x7e>
      else if (inputData.id == INPUT_DONE)
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b04      	cmp	r3, #4
 8001336:	d106      	bne.n	8001346 <Controller_SetInputData+0x56>
           controlData.id = INPUT_DONE;
 8001338:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <Controller_SetInputData+0x88>)
 800133a:	2204      	movs	r2, #4
 800133c:	601a      	str	r2, [r3, #0]
           controlData.input_act = inputData.input_act;
 800133e:	7b3a      	ldrb	r2, [r7, #12]
 8001340:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <Controller_SetInputData+0x88>)
 8001342:	711a      	strb	r2, [r3, #4]
}
 8001344:	e013      	b.n	800136e <Controller_SetInputData+0x7e>
      else if (inputData.id == US_DIST) {
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b05      	cmp	r3, #5
 800134a:	d103      	bne.n	8001354 <Controller_SetInputData+0x64>
            controlData.US_dist = inputData.US_dist;
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <Controller_SetInputData+0x88>)
 8001350:	6093      	str	r3, [r2, #8]
}
 8001352:	e00c      	b.n	800136e <Controller_SetInputData+0x7e>
      else if (inputData.id == TEMP) {
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	2b06      	cmp	r3, #6
 8001358:	d103      	bne.n	8001362 <Controller_SetInputData+0x72>
         controlData.temp = inputData.temp;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	4a06      	ldr	r2, [pc, #24]	@ (8001378 <Controller_SetInputData+0x88>)
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	e005      	b.n	800136e <Controller_SetInputData+0x7e>
      else if (inputData.id == HUMID) {
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	2b07      	cmp	r3, #7
 8001366:	d102      	bne.n	800136e <Controller_SetInputData+0x7e>
         controlData.humid = inputData.humid;
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	4a03      	ldr	r2, [pc, #12]	@ (8001378 <Controller_SetInputData+0x88>)
 800136c:	6113      	str	r3, [r2, #16]
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc90      	pop	{r4, r7}
 8001374:	b004      	add	sp, #16
 8001376:	4770      	bx	lr
 8001378:	200002ec 	.word	0x200002ec

0800137c <Controller_UpdateFeedTimer>:


// 사용자 입력값 적용함수
// feed_period 주기에 따라 배급하도록 타이머 주기 설정 함수
void Controller_UpdateFeedTimer(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
    if (controlDataOut.feed_period > 0) {
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <Controller_UpdateFeedTimer+0x20>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <Controller_UpdateFeedTimer+0x16>
        time_feed_period.min = controlDataOut.feed_period;
 8001388:	4b04      	ldr	r3, [pc, #16]	@ (800139c <Controller_UpdateFeedTimer+0x20>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <Controller_UpdateFeedTimer+0x24>)
 8001390:	801a      	strh	r2, [r3, #0]
    }
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	20000300 	.word	0x20000300
 80013a0:	20000390 	.word	0x20000390

080013a4 <Controller_CheckFeedRemainAlarm>:
}

// 환경값에 따라 경보 울리는 함수 
// feed_remain 값에 따라 남아있는 값이 적으면 경보 울리는 신호 데이터 발생 함수
uint8_t Controller_CheckFeedRemainAlarm(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
    const uint32_t THRESHOLD = 3; // 예시
 80013aa:	2303      	movs	r3, #3
 80013ac:	607b      	str	r3, [r7, #4]
    return (controlDataOut.feed_remain < THRESHOLD) ? 1 : 0;
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <Controller_CheckFeedRemainAlarm+0x28>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	bf8c      	ite	hi
 80013b8:	2301      	movhi	r3, #1
 80013ba:	2300      	movls	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000300 	.word	0x20000300

080013d0 <Controller_CheckEnvironmentStatus>:

uint8_t Controller_CheckEnvironmentStatus(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
    const uint32_t TEMP_MAX = 3500;
 80013d6:	f640 53ac 	movw	r3, #3500	@ 0xdac
 80013da:	607b      	str	r3, [r7, #4]
    const uint32_t HUMID_MAX = 8000;
 80013dc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80013e0:	603b      	str	r3, [r7, #0]
    return ((controlData.temp > TEMP_MAX) || (controlData.humid > HUMID_MAX)) ? 1 : 0;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <Controller_CheckEnvironmentStatus+0x3c>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d304      	bcc.n	80013f6 <Controller_CheckEnvironmentStatus+0x26>
 80013ec:	4b07      	ldr	r3, [pc, #28]	@ (800140c <Controller_CheckEnvironmentStatus+0x3c>)
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d201      	bcs.n	80013fa <Controller_CheckEnvironmentStatus+0x2a>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <Controller_CheckEnvironmentStatus+0x2c>
 80013fa:	2300      	movs	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200002ec 	.word	0x200002ec

08001410 <Control_Input_FSM>:



void Control_Input_FSM()
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
   switch (input_state)
 8001414:	4b55      	ldr	r3, [pc, #340]	@ (800156c <Control_Input_FSM+0x15c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b05      	cmp	r3, #5
 800141a:	f200 80a2 	bhi.w	8001562 <Control_Input_FSM+0x152>
 800141e:	a201      	add	r2, pc, #4	@ (adr r2, 8001424 <Control_Input_FSM+0x14>)
 8001420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001424:	0800143d 	.word	0x0800143d
 8001428:	08001499 	.word	0x08001499
 800142c:	080014b3 	.word	0x080014b3
 8001430:	080014cd 	.word	0x080014cd
 8001434:	08001529 	.word	0x08001529
 8001438:	08001543 	.word	0x08001543
   {
   case PERIOD_IDLE:
      if (controlData.id == MODE && controlData.input_act == 1)
 800143c:	4b4c      	ldr	r3, [pc, #304]	@ (8001570 <Control_Input_FSM+0x160>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d10a      	bne.n	800145a <Control_Input_FSM+0x4a>
 8001444:	4b4a      	ldr	r3, [pc, #296]	@ (8001570 <Control_Input_FSM+0x160>)
 8001446:	791b      	ldrb	r3, [r3, #4]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d106      	bne.n	800145a <Control_Input_FSM+0x4a>
      {
         input_state = AMOUNT_IDLE;
 800144c:	4b47      	ldr	r3, [pc, #284]	@ (800156c <Control_Input_FSM+0x15c>)
 800144e:	2203      	movs	r2, #3
 8001450:	701a      	strb	r2, [r3, #0]
         controlData.input_act = 0;
 8001452:	4b47      	ldr	r3, [pc, #284]	@ (8001570 <Control_Input_FSM+0x160>)
 8001454:	2200      	movs	r2, #0
 8001456:	711a      	strb	r2, [r3, #4]
 8001458:	e01d      	b.n	8001496 <Control_Input_FSM+0x86>
      }
      else if (controlData.id == DATA_UP && controlData.input_act == 1)
 800145a:	4b45      	ldr	r3, [pc, #276]	@ (8001570 <Control_Input_FSM+0x160>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d10a      	bne.n	8001478 <Control_Input_FSM+0x68>
 8001462:	4b43      	ldr	r3, [pc, #268]	@ (8001570 <Control_Input_FSM+0x160>)
 8001464:	791b      	ldrb	r3, [r3, #4]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d106      	bne.n	8001478 <Control_Input_FSM+0x68>
      {
         input_state = PERIOD_UP;
 800146a:	4b40      	ldr	r3, [pc, #256]	@ (800156c <Control_Input_FSM+0x15c>)
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
         controlData.input_act =0;
 8001470:	4b3f      	ldr	r3, [pc, #252]	@ (8001570 <Control_Input_FSM+0x160>)
 8001472:	2200      	movs	r2, #0
 8001474:	711a      	strb	r2, [r3, #4]
 8001476:	e00e      	b.n	8001496 <Control_Input_FSM+0x86>
      }
      else if (controlData.id == DATA_DOWN && controlData.input_act == 1)
 8001478:	4b3d      	ldr	r3, [pc, #244]	@ (8001570 <Control_Input_FSM+0x160>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b03      	cmp	r3, #3
 800147e:	d16d      	bne.n	800155c <Control_Input_FSM+0x14c>
 8001480:	4b3b      	ldr	r3, [pc, #236]	@ (8001570 <Control_Input_FSM+0x160>)
 8001482:	791b      	ldrb	r3, [r3, #4]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d169      	bne.n	800155c <Control_Input_FSM+0x14c>
      {
         input_state = PERIOD_DOWN;
 8001488:	4b38      	ldr	r3, [pc, #224]	@ (800156c <Control_Input_FSM+0x15c>)
 800148a:	2202      	movs	r2, #2
 800148c:	701a      	strb	r2, [r3, #0]
         controlData.input_act =0;
 800148e:	4b38      	ldr	r3, [pc, #224]	@ (8001570 <Control_Input_FSM+0x160>)
 8001490:	2200      	movs	r2, #0
 8001492:	711a      	strb	r2, [r3, #4]
      }

      break;
 8001494:	e062      	b.n	800155c <Control_Input_FSM+0x14c>
 8001496:	e061      	b.n	800155c <Control_Input_FSM+0x14c>

   case PERIOD_UP:
      if (controlDataOut.feed_period <= 10)
 8001498:	4b36      	ldr	r3, [pc, #216]	@ (8001574 <Control_Input_FSM+0x164>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b0a      	cmp	r3, #10
 800149e:	d804      	bhi.n	80014aa <Control_Input_FSM+0x9a>
      {
         controlDataOut.feed_period++;
 80014a0:	4b34      	ldr	r3, [pc, #208]	@ (8001574 <Control_Input_FSM+0x164>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a33      	ldr	r2, [pc, #204]	@ (8001574 <Control_Input_FSM+0x164>)
 80014a8:	6013      	str	r3, [r2, #0]
      }
      input_state =  PERIOD_IDLE;
 80014aa:	4b30      	ldr	r3, [pc, #192]	@ (800156c <Control_Input_FSM+0x15c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
      break;
 80014b0:	e057      	b.n	8001562 <Control_Input_FSM+0x152>

   case PERIOD_DOWN:
      if (controlDataOut.feed_period != 0)
 80014b2:	4b30      	ldr	r3, [pc, #192]	@ (8001574 <Control_Input_FSM+0x164>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d004      	beq.n	80014c4 <Control_Input_FSM+0xb4>
      {
         controlDataOut.feed_period--;
 80014ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001574 <Control_Input_FSM+0x164>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3b01      	subs	r3, #1
 80014c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001574 <Control_Input_FSM+0x164>)
 80014c2:	6013      	str	r3, [r2, #0]
      }
      input_state = PERIOD_IDLE;
 80014c4:	4b29      	ldr	r3, [pc, #164]	@ (800156c <Control_Input_FSM+0x15c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
      break;
 80014ca:	e04a      	b.n	8001562 <Control_Input_FSM+0x152>

   case AMOUNT_IDLE:
      if (controlData.id == MODE && controlData.input_act == 1)
 80014cc:	4b28      	ldr	r3, [pc, #160]	@ (8001570 <Control_Input_FSM+0x160>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d10a      	bne.n	80014ea <Control_Input_FSM+0xda>
 80014d4:	4b26      	ldr	r3, [pc, #152]	@ (8001570 <Control_Input_FSM+0x160>)
 80014d6:	791b      	ldrb	r3, [r3, #4]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d106      	bne.n	80014ea <Control_Input_FSM+0xda>
         {
            input_state = PERIOD_IDLE;
 80014dc:	4b23      	ldr	r3, [pc, #140]	@ (800156c <Control_Input_FSM+0x15c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
            controlData.input_act = 0;
 80014e2:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <Control_Input_FSM+0x160>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	711a      	strb	r2, [r3, #4]
 80014e8:	e01d      	b.n	8001526 <Control_Input_FSM+0x116>
         }
         else if (controlData.id == DATA_UP && controlData.input_act == 1)
 80014ea:	4b21      	ldr	r3, [pc, #132]	@ (8001570 <Control_Input_FSM+0x160>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d10a      	bne.n	8001508 <Control_Input_FSM+0xf8>
 80014f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <Control_Input_FSM+0x160>)
 80014f4:	791b      	ldrb	r3, [r3, #4]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d106      	bne.n	8001508 <Control_Input_FSM+0xf8>
         {
            input_state = AMOUNT_UP;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <Control_Input_FSM+0x15c>)
 80014fc:	2204      	movs	r2, #4
 80014fe:	701a      	strb	r2, [r3, #0]
            controlData.input_act =0;
 8001500:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <Control_Input_FSM+0x160>)
 8001502:	2200      	movs	r2, #0
 8001504:	711a      	strb	r2, [r3, #4]
 8001506:	e00e      	b.n	8001526 <Control_Input_FSM+0x116>
         }
         else if (controlData.id == DATA_DOWN && controlData.input_act == 1)
 8001508:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <Control_Input_FSM+0x160>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b03      	cmp	r3, #3
 800150e:	d127      	bne.n	8001560 <Control_Input_FSM+0x150>
 8001510:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <Control_Input_FSM+0x160>)
 8001512:	791b      	ldrb	r3, [r3, #4]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d123      	bne.n	8001560 <Control_Input_FSM+0x150>
         {
            input_state = AMOUNT_DOWN;
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <Control_Input_FSM+0x15c>)
 800151a:	2205      	movs	r2, #5
 800151c:	701a      	strb	r2, [r3, #0]
            controlData.input_act =0;
 800151e:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <Control_Input_FSM+0x160>)
 8001520:	2200      	movs	r2, #0
 8001522:	711a      	strb	r2, [r3, #4]
         }

      break;
 8001524:	e01c      	b.n	8001560 <Control_Input_FSM+0x150>
 8001526:	e01b      	b.n	8001560 <Control_Input_FSM+0x150>

   case AMOUNT_UP:
      if (controlDataOut.feed_amount <=5)
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <Control_Input_FSM+0x164>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b05      	cmp	r3, #5
 800152e:	d804      	bhi.n	800153a <Control_Input_FSM+0x12a>
      {
         controlDataOut.feed_amount++;
 8001530:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <Control_Input_FSM+0x164>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	3301      	adds	r3, #1
 8001536:	4a0f      	ldr	r2, [pc, #60]	@ (8001574 <Control_Input_FSM+0x164>)
 8001538:	6053      	str	r3, [r2, #4]
      }

       input_state = AMOUNT_IDLE;
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <Control_Input_FSM+0x15c>)
 800153c:	2203      	movs	r2, #3
 800153e:	701a      	strb	r2, [r3, #0]
       break;
 8001540:	e00f      	b.n	8001562 <Control_Input_FSM+0x152>

   case AMOUNT_DOWN:
       if (controlDataOut.feed_amount != 0)
 8001542:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <Control_Input_FSM+0x164>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <Control_Input_FSM+0x144>
      {
         controlDataOut.feed_amount--;
 800154a:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <Control_Input_FSM+0x164>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	4a08      	ldr	r2, [pc, #32]	@ (8001574 <Control_Input_FSM+0x164>)
 8001552:	6053      	str	r3, [r2, #4]
      }
       input_state = AMOUNT_IDLE;
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <Control_Input_FSM+0x15c>)
 8001556:	2203      	movs	r2, #3
 8001558:	701a      	strb	r2, [r3, #0]
       break;
 800155a:	e002      	b.n	8001562 <Control_Input_FSM+0x152>
      break;
 800155c:	bf00      	nop
 800155e:	e000      	b.n	8001562 <Control_Input_FSM+0x152>
      break;
 8001560:	bf00      	nop


   }
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	20000310 	.word	0x20000310
 8001570:	200002ec 	.word	0x200002ec
 8001574:	20000300 	.word	0x20000300

08001578 <Control_TOP_FSM>:




void Control_TOP_FSM()
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
   switch (fsm_state)
 800157c:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <Control_TOP_FSM+0x88>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d030      	beq.n	80015e6 <Control_TOP_FSM+0x6e>
 8001584:	2b02      	cmp	r3, #2
 8001586:	dc39      	bgt.n	80015fc <Control_TOP_FSM+0x84>
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <Control_TOP_FSM+0x1a>
 800158c:	2b01      	cmp	r3, #1
 800158e:	d014      	beq.n	80015ba <Control_TOP_FSM+0x42>
          }
          break;

   }

}
 8001590:	e034      	b.n	80015fc <Control_TOP_FSM+0x84>
          if (controlData.input_act == 1 && controlData.id == INPUT_DONE) {
 8001592:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <Control_TOP_FSM+0x8c>)
 8001594:	791b      	ldrb	r3, [r3, #4]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d10c      	bne.n	80015b4 <Control_TOP_FSM+0x3c>
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <Control_TOP_FSM+0x8c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d108      	bne.n	80015b4 <Control_TOP_FSM+0x3c>
              fsm_state = WAIT_MODE;
 80015a2:	4b17      	ldr	r3, [pc, #92]	@ (8001600 <Control_TOP_FSM+0x88>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	701a      	strb	r2, [r3, #0]
            Controller_UpdateFeedTimer();
 80015a8:	f7ff fee8 	bl	800137c <Controller_UpdateFeedTimer>
              controlData.input_act = 0;
 80015ac:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <Control_TOP_FSM+0x8c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	711a      	strb	r2, [r3, #4]
       break;
 80015b2:	e023      	b.n	80015fc <Control_TOP_FSM+0x84>
              Control_Input_FSM(); // 항상 입력 FSM은 동작
 80015b4:	f7ff ff2c 	bl	8001410 <Control_Input_FSM>
       break;
 80015b8:	e020      	b.n	80015fc <Control_TOP_FSM+0x84>
          if (controlFlag.feedtimeoutFlag == 1) {
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <Control_TOP_FSM+0x90>)
 80015bc:	789b      	ldrb	r3, [r3, #2]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d102      	bne.n	80015c8 <Control_TOP_FSM+0x50>
              fsm_state = FEED_MODE;
 80015c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <Control_TOP_FSM+0x88>)
 80015c4:	2202      	movs	r2, #2
 80015c6:	701a      	strb	r2, [r3, #0]
         if (controlData.input_act == 1 && controlData.id == INPUT_DONE) {
 80015c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <Control_TOP_FSM+0x8c>)
 80015ca:	791b      	ldrb	r3, [r3, #4]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d112      	bne.n	80015f6 <Control_TOP_FSM+0x7e>
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <Control_TOP_FSM+0x8c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d10e      	bne.n	80015f6 <Control_TOP_FSM+0x7e>
              fsm_state = INPUT_MODE;
 80015d8:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <Control_TOP_FSM+0x88>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
              controlData.input_act = 0;
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <Control_TOP_FSM+0x8c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	711a      	strb	r2, [r3, #4]
       break;
 80015e4:	e007      	b.n	80015f6 <Control_TOP_FSM+0x7e>
          if (controlFlag.feedtimeoutFlag == 0) {
 80015e6:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <Control_TOP_FSM+0x90>)
 80015e8:	789b      	ldrb	r3, [r3, #2]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d105      	bne.n	80015fa <Control_TOP_FSM+0x82>
              fsm_state = WAIT_MODE;
 80015ee:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <Control_TOP_FSM+0x88>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
          break;
 80015f4:	e001      	b.n	80015fa <Control_TOP_FSM+0x82>
       break;
 80015f6:	bf00      	nop
 80015f8:	e000      	b.n	80015fc <Control_TOP_FSM+0x84>
          break;
 80015fa:	bf00      	nop
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000030f 	.word	0x2000030f
 8001604:	200002ec 	.word	0x200002ec
 8001608:	2000030c 	.word	0x2000030c

0800160c <SetFeedTimeOutFlag>:

void SetFeedTimeOutFlag(uint8_t flag) // remain_time.c에서 호출
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
    controlFlag.feedtimeoutFlag = flag;
 8001616:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <SetFeedTimeOutFlag+0x1c>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	7093      	strb	r3, [r2, #2]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	2000030c 	.word	0x2000030c

0800162c <Controller_GetOutput>:
        default: return "UNKNOWN";
    }
}


outputData_TypeDef* Controller_GetOutput(void) {
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
    return &controlDataOut;
 8001630:	4b02      	ldr	r3, [pc, #8]	@ (800163c <Controller_GetOutput+0x10>)
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	20000300 	.word	0x20000300

08001640 <Controller_GetFlags>:


ControlFlag_TypeDef* Controller_GetFlags(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
    return &controlFlag;
 8001644:	4b02      	ldr	r3, [pc, #8]	@ (8001650 <Controller_GetFlags+0x10>)
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	2000030c 	.word	0x2000030c

08001654 <Listener_Init>:
static Que_TypeDef uartRxQue;



void Listener_Init()
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	Button_Init(&hBtnMode, GPIOB, GPIO_PIN_5);
 8001658:	2220      	movs	r2, #32
 800165a:	4913      	ldr	r1, [pc, #76]	@ (80016a8 <Listener_Init+0x54>)
 800165c:	4813      	ldr	r0, [pc, #76]	@ (80016ac <Listener_Init+0x58>)
 800165e:	f000 fc73 	bl	8001f48 <Button_Init>
	Button_Init(&hBtnUp, GPIOB, GPIO_PIN_3);
 8001662:	2208      	movs	r2, #8
 8001664:	4910      	ldr	r1, [pc, #64]	@ (80016a8 <Listener_Init+0x54>)
 8001666:	4812      	ldr	r0, [pc, #72]	@ (80016b0 <Listener_Init+0x5c>)
 8001668:	f000 fc6e 	bl	8001f48 <Button_Init>
	Button_Init(&hBtnDown, GPIOA, GPIO_PIN_10);
 800166c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001670:	4910      	ldr	r1, [pc, #64]	@ (80016b4 <Listener_Init+0x60>)
 8001672:	4811      	ldr	r0, [pc, #68]	@ (80016b8 <Listener_Init+0x64>)
 8001674:	f000 fc68 	bl	8001f48 <Button_Init>
	Button_Init(&hBtnInputDone, GPIOC, GPIO_PIN_13);
 8001678:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800167c:	490f      	ldr	r1, [pc, #60]	@ (80016bc <Listener_Init+0x68>)
 800167e:	4810      	ldr	r0, [pc, #64]	@ (80016c0 <Listener_Init+0x6c>)
 8001680:	f000 fc62 	bl	8001f48 <Button_Init>
	UltraSonic_Init (GPIOA, GPIO_PIN_9, GPIOC, GPIO_PIN_7);
 8001684:	2380      	movs	r3, #128	@ 0x80
 8001686:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <Listener_Init+0x68>)
 8001688:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800168c:	4809      	ldr	r0, [pc, #36]	@ (80016b4 <Listener_Init+0x60>)
 800168e:	f001 f959 	bl	8002944 <UltraSonic_Init>

	Que_Init(&uartRxQue);
 8001692:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <Listener_Init+0x70>)
 8001694:	f000 fad0 	bl	8001c38 <Que_Init>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
 8001698:	2201      	movs	r2, #1
 800169a:	490b      	ldr	r1, [pc, #44]	@ (80016c8 <Listener_Init+0x74>)
 800169c:	480b      	ldr	r0, [pc, #44]	@ (80016cc <Listener_Init+0x78>)
 800169e:	f003 ff77 	bl	8005590 <HAL_UART_Receive_IT>
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40020400 	.word	0x40020400
 80016ac:	200003a8 	.word	0x200003a8
 80016b0:	200003b4 	.word	0x200003b4
 80016b4:	40020000 	.word	0x40020000
 80016b8:	200003c0 	.word	0x200003c0
 80016bc:	40020800 	.word	0x40020800
 80016c0:	200003cc 	.word	0x200003cc
 80016c4:	20000314 	.word	0x20000314
 80016c8:	20000311 	.word	0x20000311
 80016cc:	200002a4 	.word	0x200002a4

080016d0 <Listener_Excute>:

void Listener_tempData();

void Listener_Excute()
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	Listener_CheckButton();
 80016d4:	f000 f806 	bl	80016e4 <Listener_CheckButton>
	Listener_CheckUart();
 80016d8:	f000 f866 	bl	80017a8 <Listener_CheckUart>
	Listener_tempData();
 80016dc:	f000 f8c0 	bl	8001860 <Listener_tempData>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <Listener_CheckButton>:

void Listener_CheckButton()
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af02      	add	r7, sp, #8
	inputData_TypeDef inputData;
	static uint32_t prevChkBtnTime = 0;
	uint32_t curTick = HAL_GetTick();
 80016ea:	f001 fa19 	bl	8002b20 <HAL_GetTick>
 80016ee:	6178      	str	r0, [r7, #20]
	if (curTick - prevChkBtnTime < 100) {
 80016f0:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <Listener_CheckButton+0xb0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b63      	cmp	r3, #99	@ 0x63
 80016fa:	d946      	bls.n	800178a <Listener_CheckButton+0xa6>
		return;
	}
	prevChkBtnTime = curTick;
 80016fc:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <Listener_CheckButton+0xb0>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	6013      	str	r3, [r2, #0]

	if (Button_GetState(&hBtnMode) == ACT_RELEASED) {
 8001702:	4825      	ldr	r0, [pc, #148]	@ (8001798 <Listener_CheckButton+0xb4>)
 8001704:	f000 fc36 	bl	8001f74 <Button_GetState>
 8001708:	4603      	mov	r3, r0
 800170a:	2b02      	cmp	r3, #2
 800170c:	d10a      	bne.n	8001724 <Listener_CheckButton+0x40>
		inputData.id = MODE;
 800170e:	2301      	movs	r3, #1
 8001710:	603b      	str	r3, [r7, #0]
		inputData.input_act = 1;
 8001712:	2301      	movs	r3, #1
 8001714:	713b      	strb	r3, [r7, #4]
		Controller_SetInputData(inputData);
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	463b      	mov	r3, r7
 800171c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800171e:	f7ff fde7 	bl	80012f0 <Controller_SetInputData>
 8001722:	e033      	b.n	800178c <Listener_CheckButton+0xa8>
	}
	else if (Button_GetState(&hBtnUp) == ACT_PUSHED) {
 8001724:	481d      	ldr	r0, [pc, #116]	@ (800179c <Listener_CheckButton+0xb8>)
 8001726:	f000 fc25 	bl	8001f74 <Button_GetState>
 800172a:	4603      	mov	r3, r0
 800172c:	2b01      	cmp	r3, #1
 800172e:	d10a      	bne.n	8001746 <Listener_CheckButton+0x62>
		inputData.id = DATA_UP;
 8001730:	2302      	movs	r3, #2
 8001732:	603b      	str	r3, [r7, #0]
		inputData.input_act = 1;
 8001734:	2301      	movs	r3, #1
 8001736:	713b      	strb	r3, [r7, #4]
		Controller_SetInputData(inputData);
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	463b      	mov	r3, r7
 800173e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001740:	f7ff fdd6 	bl	80012f0 <Controller_SetInputData>
 8001744:	e022      	b.n	800178c <Listener_CheckButton+0xa8>
	}
	else if (Button_GetState(&hBtnDown) == ACT_PUSHED) {
 8001746:	4816      	ldr	r0, [pc, #88]	@ (80017a0 <Listener_CheckButton+0xbc>)
 8001748:	f000 fc14 	bl	8001f74 <Button_GetState>
 800174c:	4603      	mov	r3, r0
 800174e:	2b01      	cmp	r3, #1
 8001750:	d10a      	bne.n	8001768 <Listener_CheckButton+0x84>
		inputData.id = DATA_DOWN;
 8001752:	2303      	movs	r3, #3
 8001754:	603b      	str	r3, [r7, #0]
		inputData.input_act = 1;
 8001756:	2301      	movs	r3, #1
 8001758:	713b      	strb	r3, [r7, #4]
		Controller_SetInputData(inputData);
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	463b      	mov	r3, r7
 8001760:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001762:	f7ff fdc5 	bl	80012f0 <Controller_SetInputData>
 8001766:	e011      	b.n	800178c <Listener_CheckButton+0xa8>
	}
	else if (Button_GetState(&hBtnInputDone) == ACT_PUSHED) {
 8001768:	480e      	ldr	r0, [pc, #56]	@ (80017a4 <Listener_CheckButton+0xc0>)
 800176a:	f000 fc03 	bl	8001f74 <Button_GetState>
 800176e:	4603      	mov	r3, r0
 8001770:	2b01      	cmp	r3, #1
 8001772:	d10b      	bne.n	800178c <Listener_CheckButton+0xa8>
		inputData.id = INPUT_DONE;
 8001774:	2304      	movs	r3, #4
 8001776:	603b      	str	r3, [r7, #0]
		inputData.input_act = 1;
 8001778:	2301      	movs	r3, #1
 800177a:	713b      	strb	r3, [r7, #4]
		Controller_SetInputData(inputData);
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	463b      	mov	r3, r7
 8001782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001784:	f7ff fdb4 	bl	80012f0 <Controller_SetInputData>
 8001788:	e000      	b.n	800178c <Listener_CheckButton+0xa8>
		return;
 800178a:	bf00      	nop
	}

}
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000032c 	.word	0x2000032c
 8001798:	200003a8 	.word	0x200003a8
 800179c:	200003b4 	.word	0x200003b4
 80017a0:	200003c0 	.word	0x200003c0
 80017a4:	200003cc 	.word	0x200003cc

080017a8 <Listener_CheckUart>:

void Listener_CheckUart()
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af02      	add	r7, sp, #8
    inputData_TypeDef inputData;
    if (isQueEmpty(&uartRxQue)) {
 80017ae:	482b      	ldr	r0, [pc, #172]	@ (800185c <Listener_CheckUart+0xb4>)
 80017b0:	f000 fa6d 	bl	8001c8e <isQueEmpty>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d149      	bne.n	800184e <Listener_CheckUart+0xa6>
        return;
    }

    int uartRxData = deQue(&uartRxQue);
 80017ba:	4828      	ldr	r0, [pc, #160]	@ (800185c <Listener_CheckUart+0xb4>)
 80017bc:	f000 fa9d 	bl	8001cfa <deQue>
 80017c0:	6178      	str	r0, [r7, #20]

    switch (uartRxData) {
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3b64      	subs	r3, #100	@ 0x64
 80017c6:	2b11      	cmp	r3, #17
 80017c8:	d843      	bhi.n	8001852 <Listener_CheckUart+0xaa>
 80017ca:	a201      	add	r2, pc, #4	@ (adr r2, 80017d0 <Listener_CheckUart+0x28>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	0800182d 	.word	0x0800182d
 80017d4:	08001853 	.word	0x08001853
 80017d8:	08001853 	.word	0x08001853
 80017dc:	08001853 	.word	0x08001853
 80017e0:	08001853 	.word	0x08001853
 80017e4:	08001853 	.word	0x08001853
 80017e8:	08001853 	.word	0x08001853
 80017ec:	08001853 	.word	0x08001853
 80017f0:	08001853 	.word	0x08001853
 80017f4:	08001819 	.word	0x08001819
 80017f8:	08001853 	.word	0x08001853
 80017fc:	08001853 	.word	0x08001853
 8001800:	08001853 	.word	0x08001853
 8001804:	08001853 	.word	0x08001853
 8001808:	08001853 	.word	0x08001853
 800180c:	08001837 	.word	0x08001837
 8001810:	08001853 	.word	0x08001853
 8001814:	08001823 	.word	0x08001823
        case 'm':
            inputData.id = MODE;
 8001818:	2301      	movs	r3, #1
 800181a:	603b      	str	r3, [r7, #0]
            inputData.input_act = 1;
 800181c:	2301      	movs	r3, #1
 800181e:	713b      	strb	r3, [r7, #4]
            break;
 8001820:	e00e      	b.n	8001840 <Listener_CheckUart+0x98>

        case 'u':
            inputData.id = DATA_UP;
 8001822:	2302      	movs	r3, #2
 8001824:	603b      	str	r3, [r7, #0]
            inputData.input_act = 1;
 8001826:	2301      	movs	r3, #1
 8001828:	713b      	strb	r3, [r7, #4]
            break;
 800182a:	e009      	b.n	8001840 <Listener_CheckUart+0x98>

        case 'd':
            inputData.id = DATA_DOWN;
 800182c:	2303      	movs	r3, #3
 800182e:	603b      	str	r3, [r7, #0]
            inputData.input_act = 1;
 8001830:	2301      	movs	r3, #1
 8001832:	713b      	strb	r3, [r7, #4]
            break;
 8001834:	e004      	b.n	8001840 <Listener_CheckUart+0x98>

        case 's':
            inputData.id = INPUT_DONE;
 8001836:	2304      	movs	r3, #4
 8001838:	603b      	str	r3, [r7, #0]
            inputData.input_act = 1;
 800183a:	2301      	movs	r3, #1
 800183c:	713b      	strb	r3, [r7, #4]
            break;
 800183e:	bf00      	nop

        default:
            return;  // 정의되지 않은 입력은 무시
    }

    Controller_SetInputData(inputData);
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	463b      	mov	r3, r7
 8001846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001848:	f7ff fd52 	bl	80012f0 <Controller_SetInputData>
 800184c:	e002      	b.n	8001854 <Listener_CheckUart+0xac>
        return;
 800184e:	bf00      	nop
 8001850:	e000      	b.n	8001854 <Listener_CheckUart+0xac>
            return;  // 정의되지 않은 입력은 무시
 8001852:	bf00      	nop
}
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000314 	.word	0x20000314

08001860 <Listener_tempData>:


void Listener_tempData()
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af02      	add	r7, sp, #8
   static uint8_t temperature;
   static uint32_t prevChktempTime = 0;
   static uint32_t prevChkhumiTime = 0;
   static inputData_TypeDef inputData;
   static uint32_t distance;
   uint32_t curTick = HAL_GetTick();
 8001866:	f001 f95b 	bl	8002b20 <HAL_GetTick>
 800186a:	6078      	str	r0, [r7, #4]
   if ((curTick - prevChkhumiTime > 5000) || !first_flag) {
 800186c:	4b2c      	ldr	r3, [pc, #176]	@ (8001920 <Listener_tempData+0xc0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001878:	4293      	cmp	r3, r2
 800187a:	d803      	bhi.n	8001884 <Listener_tempData+0x24>
 800187c:	4b29      	ldr	r3, [pc, #164]	@ (8001924 <Listener_tempData+0xc4>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d115      	bne.n	80018b0 <Listener_tempData+0x50>
       distance = UltraSonic_GetDistance();
 8001884:	f001 f87c 	bl	8002980 <UltraSonic_GetDistance>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	4b26      	ldr	r3, [pc, #152]	@ (8001928 <Listener_tempData+0xc8>)
 800188e:	601a      	str	r2, [r3, #0]
       inputData.id = US_DIST;
 8001890:	4b26      	ldr	r3, [pc, #152]	@ (800192c <Listener_tempData+0xcc>)
 8001892:	2205      	movs	r2, #5
 8001894:	601a      	str	r2, [r3, #0]
       inputData.US_dist = distance;
 8001896:	4b24      	ldr	r3, [pc, #144]	@ (8001928 <Listener_tempData+0xc8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a24      	ldr	r2, [pc, #144]	@ (800192c <Listener_tempData+0xcc>)
 800189c:	6093      	str	r3, [r2, #8]
       prevChkhumiTime = curTick;
 800189e:	4a20      	ldr	r2, [pc, #128]	@ (8001920 <Listener_tempData+0xc0>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6013      	str	r3, [r2, #0]
       Controller_SetInputData(inputData);
 80018a4:	4b21      	ldr	r3, [pc, #132]	@ (800192c <Listener_tempData+0xcc>)
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	9200      	str	r2, [sp, #0]
 80018aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018ac:	f7ff fd20 	bl	80012f0 <Controller_SetInputData>
   }

   if ((curTick - prevChktempTime < 60000)&& first_flag) {
 80018b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <Listener_tempData+0xd0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80018bc:	4293      	cmp	r3, r2
 80018be:	d803      	bhi.n	80018c8 <Listener_tempData+0x68>
 80018c0:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <Listener_tempData+0xc4>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d126      	bne.n	8001916 <Listener_tempData+0xb6>
      return;
   }
   prevChktempTime = curTick;
 80018c8:	4a19      	ldr	r2, [pc, #100]	@ (8001930 <Listener_tempData+0xd0>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
   first_flag = 1;
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <Listener_tempData+0xc4>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
    DHT11_ReadData(&humidity, &temperature);
 80018d4:	4917      	ldr	r1, [pc, #92]	@ (8001934 <Listener_tempData+0xd4>)
 80018d6:	4818      	ldr	r0, [pc, #96]	@ (8001938 <Listener_tempData+0xd8>)
 80018d8:	f000 fc00 	bl	80020dc <DHT11_ReadData>
    inputData.id = TEMP;
 80018dc:	4b13      	ldr	r3, [pc, #76]	@ (800192c <Listener_tempData+0xcc>)
 80018de:	2206      	movs	r2, #6
 80018e0:	601a      	str	r2, [r3, #0]
    inputData.temp = temperature;
 80018e2:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <Listener_tempData+0xd4>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <Listener_tempData+0xcc>)
 80018ea:	60da      	str	r2, [r3, #12]
    Controller_SetInputData(inputData);
 80018ec:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <Listener_tempData+0xcc>)
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	9200      	str	r2, [sp, #0]
 80018f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f4:	f7ff fcfc 	bl	80012f0 <Controller_SetInputData>
    inputData.id = HUMID;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <Listener_tempData+0xcc>)
 80018fa:	2207      	movs	r2, #7
 80018fc:	601a      	str	r2, [r3, #0]
    inputData.humid = humidity;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <Listener_tempData+0xd8>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	4b09      	ldr	r3, [pc, #36]	@ (800192c <Listener_tempData+0xcc>)
 8001906:	611a      	str	r2, [r3, #16]
    Controller_SetInputData(inputData);
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <Listener_tempData+0xcc>)
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	9200      	str	r2, [sp, #0]
 800190e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001910:	f7ff fcee 	bl	80012f0 <Controller_SetInputData>
 8001914:	e000      	b.n	8001918 <Listener_tempData+0xb8>
      return;
 8001916:	bf00      	nop
}
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000330 	.word	0x20000330
 8001924:	20000334 	.word	0x20000334
 8001928:	20000338 	.word	0x20000338
 800192c:	2000033c 	.word	0x2000033c
 8001930:	20000350 	.word	0x20000350
 8001934:	20000355 	.word	0x20000355
 8001938:	20000354 	.word	0x20000354

0800193c <Listener_UartCallBack>:

void Listener_UartCallBack()
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	enQue(&uartRxQue, rcvData);
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <Listener_UartCallBack+0x20>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	4806      	ldr	r0, [pc, #24]	@ (8001960 <Listener_UartCallBack+0x24>)
 8001948:	f000 f9b4 	bl	8001cb4 <enQue>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // interrupt enable
 800194c:	2201      	movs	r2, #1
 800194e:	4903      	ldr	r1, [pc, #12]	@ (800195c <Listener_UartCallBack+0x20>)
 8001950:	4804      	ldr	r0, [pc, #16]	@ (8001964 <Listener_UartCallBack+0x28>)
 8001952:	f003 fe1d 	bl	8005590 <HAL_UART_Receive_IT>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000311 	.word	0x20000311
 8001960:	20000314 	.word	0x20000314
 8001964:	200002a4 	.word	0x200002a4

08001968 <Presenter_Excute>:
ControlFlag_TypeDef feed_Output_Flag = {0};

uint32_t temp_output = 0;
uint32_t humid_output = 0;


 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0

 800196c:	f7ff fe5e 	bl	800162c <Controller_GetOutput>
 8001970:	4602      	mov	r2, r0
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <Presenter_Excute+0x44>)
 8001974:	ca07      	ldmia	r2, {r0, r1, r2}
 8001976:	e883 0007 	stmia.w	r3, {r0, r1, r2}
void Presenter_Excute()
 800197a:	f7ff fe61 	bl	8001640 <Controller_GetFlags>
 800197e:	4602      	mov	r2, r0
 8001980:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <Presenter_Excute+0x48>)
 8001982:	8811      	ldrh	r1, [r2, #0]
 8001984:	7892      	ldrb	r2, [r2, #2]
 8001986:	8019      	strh	r1, [r3, #0]
 8001988:	709a      	strb	r2, [r3, #2]
{
 800198a:	f000 f817 	bl	80019bc <Presenter_DispFeedStateFND>
   feed_Output_Data = *Controller_GetOutput();  
 800198e:	f000 f85d 	bl	8001a4c <Presenter_DispFeedStateLCD>
   feed_Output_Flag = *Controller_GetFlags();    
   temp_output = Read_Temp();
   humid_output = Read_Humid();
 8001992:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <Presenter_Excute+0x4c>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d106      	bne.n	80019a8 <Presenter_Excute+0x40>

   Presenter_DispFeedStateFND();
 800199a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800199e:	f001 f8cb 	bl	8002b38 <HAL_Delay>
   Presenter_DispFeedStateLCD();
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <Presenter_Excute+0x50>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	709a      	strb	r2, [r3, #2]
   Presenter_DispFeedStateUART();

   if (fsm_state == FEED_MODE)
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000358 	.word	0x20000358
 80019b0:	20000364 	.word	0x20000364
 80019b4:	2000030f 	.word	0x2000030f
 80019b8:	2000030c 	.word	0x2000030c

080019bc <Presenter_DispFeedStateFND>:
      controlFlag.feedtimeoutFlag = 0;
   }
   else if(fsm_state == WAIT_MODE)
   {
      uint8_t scaled_remain = (feed_Output_Data.feed_remain * 255) / 15;
      LedBar_Write(0x01);
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
   }
 80019c0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <Presenter_DispFeedStateFND+0x80>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d030      	beq.n	8001a2a <Presenter_DispFeedStateFND+0x6e>
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	dc34      	bgt.n	8001a36 <Presenter_DispFeedStateFND+0x7a>
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <Presenter_DispFeedStateFND+0x1a>
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d016      	beq.n	8001a02 <Presenter_DispFeedStateFND+0x46>
         FND_WriteData(feed_Output_Data.feed_amount); // 단위: g
      }
      break;

   case WAIT_MODE:
      FND_WriteData(time_feed_remain.min * 100 + time_feed_remain.sec);
 80019d4:	e02f      	b.n	8001a36 <Presenter_DispFeedStateFND+0x7a>

 80019d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <Presenter_DispFeedStateFND+0x84>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <Presenter_DispFeedStateFND+0x30>

 80019de:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <Presenter_DispFeedStateFND+0x88>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fc29 	bl	800223c <FND_WriteData>
   case INPUT_MODE:
 80019ea:	e023      	b.n	8001a34 <Presenter_DispFeedStateFND+0x78>
{
 80019ec:	4b14      	ldr	r3, [pc, #80]	@ (8001a40 <Presenter_DispFeedStateFND+0x84>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d11f      	bne.n	8001a34 <Presenter_DispFeedStateFND+0x78>
   switch (fsm_state)
 80019f4:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <Presenter_DispFeedStateFND+0x88>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 fc1e 	bl	800223c <FND_WriteData>
   case INPUT_MODE:
 8001a00:	e018      	b.n	8001a34 <Presenter_DispFeedStateFND+0x78>
      }
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <Presenter_DispFeedStateFND+0x8c>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	0092      	lsls	r2, r2, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	0091      	lsls	r1, r2, #2
 8001a10:	461a      	mov	r2, r3
 8001a12:	460b      	mov	r3, r1
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <Presenter_DispFeedStateFND+0x8c>)
 8001a1c:	885b      	ldrh	r3, [r3, #2]
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fc0a 	bl	800223c <FND_WriteData>
      else if (input_state == AMOUNT_IDLE) {
 8001a28:	e005      	b.n	8001a36 <Presenter_DispFeedStateFND+0x7a>
      break;
 8001a2a:	f242 20b8 	movw	r0, #8888	@ 0x22b8
 8001a2e:	f000 fc05 	bl	800223c <FND_WriteData>

 8001a32:	e000      	b.n	8001a36 <Presenter_DispFeedStateFND+0x7a>
   case INPUT_MODE:
 8001a34:	bf00      	nop
      FND_WriteData(time_feed_remain.min * 100 + time_feed_remain.sec);
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000030f 	.word	0x2000030f
 8001a40:	20000310 	.word	0x20000310
 8001a44:	20000358 	.word	0x20000358
 8001a48:	200003a0 	.word	0x200003a0

08001a4c <Presenter_DispFeedStateLCD>:
      break;

   case FEED_MODE:
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b09c      	sub	sp, #112	@ 0x70
 8001a50:	af02      	add	r7, sp, #8
      break;
   }
}

void Presenter_DispFeedStateLCD()
{
 8001a52:	4b3d      	ldr	r3, [pc, #244]	@ (8001b48 <Presenter_DispFeedStateLCD+0xfc>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d02d      	beq.n	8001ab6 <Presenter_DispFeedStateLCD+0x6a>
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	dc38      	bgt.n	8001ad0 <Presenter_DispFeedStateLCD+0x84>
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <Presenter_DispFeedStateLCD+0x1c>
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d011      	beq.n	8001a8a <Presenter_DispFeedStateLCD+0x3e>
 8001a66:	e033      	b.n	8001ad0 <Presenter_DispFeedStateLCD+0x84>
    static char last_str0[17] = "";
    static char last_str1[17] = "";

 8001a68:	4b38      	ldr	r3, [pc, #224]	@ (8001b4c <Presenter_DispFeedStateLCD+0x100>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a70:	4937      	ldr	r1, [pc, #220]	@ (8001b50 <Presenter_DispFeedStateLCD+0x104>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	f004 fdce 	bl	8006614 <siprintf>
    char temp0[32], temp1[32];
 8001a78:	4b34      	ldr	r3, [pc, #208]	@ (8001b4c <Presenter_DispFeedStateLCD+0x100>)
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a80:	4934      	ldr	r1, [pc, #208]	@ (8001b54 <Presenter_DispFeedStateLCD+0x108>)
 8001a82:	4618      	mov	r0, r3
 8001a84:	f004 fdc6 	bl	8006614 <siprintf>
    char line0[17], line1[17];
 8001a88:	e022      	b.n	8001ad0 <Presenter_DispFeedStateLCD+0x84>

    switch (fsm_state)
    {
 8001a8a:	4b33      	ldr	r3, [pc, #204]	@ (8001b58 <Presenter_DispFeedStateLCD+0x10c>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b31      	ldr	r3, [pc, #196]	@ (8001b58 <Presenter_DispFeedStateLCD+0x10c>)
 8001a92:	885b      	ldrh	r3, [r3, #2]
 8001a94:	4619      	mov	r1, r3
 8001a96:	4b2d      	ldr	r3, [pc, #180]	@ (8001b4c <Presenter_DispFeedStateLCD+0x100>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	492e      	ldr	r1, [pc, #184]	@ (8001b5c <Presenter_DispFeedStateLCD+0x110>)
 8001aa4:	f004 fdb6 	bl	8006614 <siprintf>
    case INPUT_MODE:
 8001aa8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aac:	492c      	ldr	r1, [pc, #176]	@ (8001b60 <Presenter_DispFeedStateLCD+0x114>)
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f004 fdb0 	bl	8006614 <siprintf>
        sprintf(temp0, "TIME: %2lu min", feed_Output_Data.feed_period);
 8001ab4:	e00c      	b.n	8001ad0 <Presenter_DispFeedStateLCD+0x84>
        sprintf(temp1, "AMOUNT: %2lu mode", feed_Output_Data.feed_amount);
        break;

 8001ab6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001aba:	492a      	ldr	r1, [pc, #168]	@ (8001b64 <Presenter_DispFeedStateLCD+0x118>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f004 fda9 	bl	8006614 <siprintf>
    case WAIT_MODE:
 8001ac2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ac6:	4928      	ldr	r1, [pc, #160]	@ (8001b68 <Presenter_DispFeedStateLCD+0x11c>)
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f004 fda3 	bl	8006614 <siprintf>
        sprintf(temp0, "T:%02d:%02dM:%1luR:%2lu", time_feed_remain.min, time_feed_remain.sec, feed_Output_Data.feed_amount, feed_Output_Data.feed_remain);
 8001ace:	bf00      	nop
        sprintf(temp1, "T/H: %02d / %02d", temp_output, humid_output);
        break;

    case FEED_MODE:
 8001ad0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ad4:	f107 0014 	add.w	r0, r7, #20
 8001ad8:	4a24      	ldr	r2, [pc, #144]	@ (8001b6c <Presenter_DispFeedStateLCD+0x120>)
 8001ada:	2111      	movs	r1, #17
 8001adc:	f004 fd64 	bl	80065a8 <sniprintf>
        sprintf(temp0, "   FEED TIME!!  ");
 8001ae0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ae4:	4638      	mov	r0, r7
 8001ae6:	4a21      	ldr	r2, [pc, #132]	@ (8001b6c <Presenter_DispFeedStateLCD+0x120>)
 8001ae8:	2111      	movs	r1, #17
 8001aea:	f004 fd5d 	bl	80065a8 <sniprintf>
        sprintf(temp1, "     YUMMY~~    ");
        break;
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	481e      	ldr	r0, [pc, #120]	@ (8001b70 <Presenter_DispFeedStateLCD+0x124>)
 8001af6:	f7fe fb73 	bl	80001e0 <strcmp>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00c      	beq.n	8001b1a <Presenter_DispFeedStateLCD+0xce>
    }
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	481a      	ldr	r0, [pc, #104]	@ (8001b70 <Presenter_DispFeedStateLCD+0x124>)
 8001b08:	f004 fe65 	bl	80067d6 <strcpy>

 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	461a      	mov	r2, r3
 8001b12:	2100      	movs	r1, #0
 8001b14:	2000      	movs	r0, #0
 8001b16:	f000 fe82 	bl	800281e <LCD_writeStringXY>
    // 고정 길이로 포맷
    snprintf(line0, sizeof(line0), "%-16s", temp0);
    snprintf(line1, sizeof(line1), "%-16s", temp1);
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4815      	ldr	r0, [pc, #84]	@ (8001b74 <Presenter_DispFeedStateLCD+0x128>)
 8001b20:	f7fe fb5e 	bl	80001e0 <strcmp>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00a      	beq.n	8001b40 <Presenter_DispFeedStateLCD+0xf4>

 8001b2a:	463b      	mov	r3, r7
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4811      	ldr	r0, [pc, #68]	@ (8001b74 <Presenter_DispFeedStateLCD+0x128>)
 8001b30:	f004 fe51 	bl	80067d6 <strcpy>
    if (strcmp(last_str0, line0) != 0) {
 8001b34:	463b      	mov	r3, r7
 8001b36:	461a      	mov	r2, r3
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f000 fe6f 	bl	800281e <LCD_writeStringXY>
        strcpy(last_str0, line0);
        LCD_writeStringXY(0, 0, line0);
 8001b40:	bf00      	nop
 8001b42:	3768      	adds	r7, #104	@ 0x68
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	2000030f 	.word	0x2000030f
 8001b4c:	20000358 	.word	0x20000358
 8001b50:	080076a0 	.word	0x080076a0
 8001b54:	080076b0 	.word	0x080076b0
 8001b58:	200003a0 	.word	0x200003a0
 8001b5c:	080076c4 	.word	0x080076c4
 8001b60:	080076d8 	.word	0x080076d8
 8001b64:	080076ec 	.word	0x080076ec
 8001b68:	08007700 	.word	0x08007700
 8001b6c:	08007714 	.word	0x08007714
 8001b70:	20000368 	.word	0x20000368
 8001b74:	2000037c 	.word	0x2000037c

08001b78 <Presenter_Init>:






 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0

 8001b7c:	4806      	ldr	r0, [pc, #24]	@ (8001b98 <Presenter_Init+0x20>)
 8001b7e:	f000 fcff 	bl	8002580 <LCD_Init>

 8001b82:	f000 f9d7 	bl	8001f34 <Sound_Init>

 8001b86:	2100      	movs	r1, #0
 8001b88:	4804      	ldr	r0, [pc, #16]	@ (8001b9c <Presenter_Init+0x24>)
 8001b8a:	f000 fe73 	bl	8002874 <motor_Init>

 8001b8e:	2050      	movs	r0, #80	@ 0x50
 8001b90:	f000 fe86 	bl	80028a0 <motor_SetDuty>

 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200000e4 	.word	0x200000e4
 8001b9c:	2000013c 	.word	0x2000013c

08001ba0 <HAL_TIM_PeriodElapsedCallback>:
 */

#include "ap_main.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb0:	d103      	bne.n	8001bba <HAL_TIM_PeriodElapsedCallback+0x1a>
		FND_DispDataCallBack();
 8001bb2:	f000 fb53 	bl	800225c <FND_DispDataCallBack>
		// 남은 시간 계산하기
		RemainTime_CallBack();
 8001bb6:	f000 f8c5 	bl	8001d44 <RemainTime_CallBack>

	}
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <HAL_UART_RxCpltCallback+0x20>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_UART_RxCpltCallback+0x16>
		Listener_UartCallBack();
 8001bd6:	f7ff feb1 	bl	800193c <Listener_UartCallBack>
	}
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40004400 	.word	0x40004400

08001be8 <ap_main>:


int ap_main()
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001bec:	4806      	ldr	r0, [pc, #24]	@ (8001c08 <ap_main+0x20>)
 8001bee:	f002 fdab 	bl	8004748 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim4);
 8001bf2:	4806      	ldr	r0, [pc, #24]	@ (8001c0c <ap_main+0x24>)
 8001bf4:	f002 fd26 	bl	8004644 <HAL_TIM_Base_Start>
	while(1)
	{
		Listener_Excute();
 8001bf8:	f7ff fd6a 	bl	80016d0 <Listener_Excute>
		Controller_Excute();
 8001bfc:	f7ff fb50 	bl	80012a0 <Controller_Excute>
		Presenter_Excute();
 8001c00:	f7ff feb2 	bl	8001968 <Presenter_Excute>
		Listener_Excute();
 8001c04:	bf00      	nop
 8001c06:	e7f7      	b.n	8001bf8 <ap_main+0x10>
 8001c08:	20000184 	.word	0x20000184
 8001c0c:	20000214 	.word	0x20000214

08001c10 <ap_init>:

	return 0;
}

void ap_init()
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
	Listener_Init();
 8001c14:	f7ff fd1e 	bl	8001654 <Listener_Init>
	Presenter_Init();
 8001c18:	f7ff ffae 	bl	8001b78 <Presenter_Init>
	Sound_Init();
 8001c1c:	f000 f98a 	bl	8001f34 <Sound_Init>
	motor_Init(&htim1, TIM_CHANNEL_1);
 8001c20:	2100      	movs	r1, #0
 8001c22:	4804      	ldr	r0, [pc, #16]	@ (8001c34 <ap_init+0x24>)
 8001c24:	f000 fe26 	bl	8002874 <motor_Init>
	motor_SetDuty(80);
 8001c28:	2050      	movs	r0, #80	@ 0x50
 8001c2a:	f000 fe39 	bl	80028a0 <motor_SetDuty>

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	2000013c 	.word	0x2000013c

08001c38 <Que_Init>:
#include "queue.h"



void Que_Init(Que_TypeDef *q)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	q->front = 0;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <isQueFull>:

int isQueFull(Que_TypeDef *q)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	return q->front == ((q->rear+1) % QUE_SIZE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	4259      	negs	r1, r3
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	f001 0103 	and.w	r1, r1, #3
 8001c74:	bf58      	it	pl
 8001c76:	424b      	negpl	r3, r1
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <isQueEmpty>:

int isQueEmpty(Que_TypeDef *q)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
	return q->front == q->rear;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	bf0c      	ite	eq
 8001ca2:	2301      	moveq	r3, #1
 8001ca4:	2300      	movne	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <enQue>:

void enQue(Que_TypeDef *q, int data)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
	if (isQueFull(q)) {
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffca 	bl	8001c58 <isQueFull>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d113      	bne.n	8001cf2 <enQue+0x3e>
		return;
	}
	q->queData[q->rear] = data;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3202      	adds	r2, #2
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	q->rear = (q->rear+1) % QUE_SIZE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	425a      	negs	r2, r3
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	f002 0203 	and.w	r2, r2, #3
 8001ce8:	bf58      	it	pl
 8001cea:	4253      	negpl	r3, r2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6053      	str	r3, [r2, #4]
 8001cf0:	e000      	b.n	8001cf4 <enQue+0x40>
		return;
 8001cf2:	bf00      	nop
}
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <deQue>:

int deQue(Que_TypeDef *q)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
	if (isQueEmpty(q)) {
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ffc3 	bl	8001c8e <isQueEmpty>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d114      	bne.n	8001d38 <deQue+0x3e>
		return;
	}
	int data = q->queData[q->front];
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3202      	adds	r2, #2
 8001d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1a:	60fb      	str	r3, [r7, #12]
	q->front = (q->front+1) % QUE_SIZE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3301      	adds	r3, #1
 8001d22:	425a      	negs	r2, r3
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	f002 0203 	and.w	r2, r2, #3
 8001d2c:	bf58      	it	pl
 8001d2e:	4253      	negpl	r3, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6013      	str	r3, [r2, #0]
	return data;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	e001      	b.n	8001d3c <deQue+0x42>
		return;
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <RemainTime_CallBack>:
static uint64_t TimeToSec(time_TypeDef t);



void RemainTime_CallBack()
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
	if (fsm_state == WAIT_MODE) {
 8001d4a:	4b28      	ldr	r3, [pc, #160]	@ (8001dec <RemainTime_CallBack+0xa8>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d13a      	bne.n	8001dc8 <RemainTime_CallBack+0x84>
		Calculate_Elapsed_Time();
 8001d52:	f000 f855 	bl	8001e00 <Calculate_Elapsed_Time>
        Compare_Time();
 8001d56:	f000 f8c7 	bl	8001ee8 <Compare_Time>

        int total_period_sec  = TimeToSec(time_feed_period);
 8001d5a:	4b25      	ldr	r3, [pc, #148]	@ (8001df0 <RemainTime_CallBack+0xac>)
 8001d5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d60:	f000 f884 	bl	8001e6c <TimeToSec>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4613      	mov	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        int total_elapsed_sec = TimeToSec(time_feed_elapsed);
 8001d6c:	4b21      	ldr	r3, [pc, #132]	@ (8001df4 <RemainTime_CallBack+0xb0>)
 8001d6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d72:	f000 f87b 	bl	8001e6c <TimeToSec>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
        int remain_sec = total_period_sec - total_elapsed_sec;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	617b      	str	r3, [r7, #20]
        if (remain_sec < 0) remain_sec = 0;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	da01      	bge.n	8001d90 <RemainTime_CallBack+0x4c>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]


        time_feed_remain.min = remain_sec / 60;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	4a19      	ldr	r2, [pc, #100]	@ (8001df8 <RemainTime_CallBack+0xb4>)
 8001d94:	fb82 1203 	smull	r1, r2, r2, r3
 8001d98:	441a      	add	r2, r3
 8001d9a:	1152      	asrs	r2, r2, #5
 8001d9c:	17db      	asrs	r3, r3, #31
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <RemainTime_CallBack+0xb8>)
 8001da4:	801a      	strh	r2, [r3, #0]
        time_feed_remain.sec = remain_sec % 60;
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <RemainTime_CallBack+0xb4>)
 8001daa:	fb83 1302 	smull	r1, r3, r3, r2
 8001dae:	4413      	add	r3, r2
 8001db0:	1159      	asrs	r1, r3, #5
 8001db2:	17d3      	asrs	r3, r2, #31
 8001db4:	1ac9      	subs	r1, r1, r3
 8001db6:	460b      	mov	r3, r1
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	1a5b      	subs	r3, r3, r1
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	1ad1      	subs	r1, r2, r3
 8001dc0:	b28a      	uxth	r2, r1
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <RemainTime_CallBack+0xb8>)
 8001dc4:	805a      	strh	r2, [r3, #2]
    {
        time_feed_elapsed = (time_TypeDef){0,0,0};
        // feed_time_out = 0; ← 이건 Controller 또는 Output에서 클리어하자
    }
    
}
 8001dc6:	e00c      	b.n	8001de2 <RemainTime_CallBack+0x9e>
    else if (fsm_state == FEED_MODE || fsm_state == INPUT_MODE)
 8001dc8:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <RemainTime_CallBack+0xa8>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d108      	bne.n	8001de2 <RemainTime_CallBack+0x9e>
        time_feed_elapsed = (time_TypeDef){0,0,0};
 8001dd0:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <RemainTime_CallBack+0xb0>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	801a      	strh	r2, [r3, #0]
 8001dd6:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <RemainTime_CallBack+0xb0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	805a      	strh	r2, [r3, #2]
 8001ddc:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <RemainTime_CallBack+0xb0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	809a      	strh	r2, [r3, #4]
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	2000030f 	.word	0x2000030f
 8001df0:	20000390 	.word	0x20000390
 8001df4:	20000398 	.word	0x20000398
 8001df8:	88888889 	.word	0x88888889
 8001dfc:	200003a0 	.word	0x200003a0

08001e00 <Calculate_Elapsed_Time>:

void Calculate_Elapsed_Time()
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
    if (time_feed_elapsed.msec == 1000 - 1) {
 8001e04:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <Calculate_Elapsed_Time+0x68>)
 8001e06:	889b      	ldrh	r3, [r3, #4]
 8001e08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d11f      	bne.n	8001e50 <Calculate_Elapsed_Time+0x50>
        time_feed_elapsed.msec = 0;
 8001e10:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <Calculate_Elapsed_Time+0x68>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	809a      	strh	r2, [r3, #4]

        if (time_feed_elapsed.sec == 60 - 1) {
 8001e16:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <Calculate_Elapsed_Time+0x68>)
 8001e18:	885b      	ldrh	r3, [r3, #2]
 8001e1a:	2b3b      	cmp	r3, #59	@ 0x3b
 8001e1c:	d111      	bne.n	8001e42 <Calculate_Elapsed_Time+0x42>
            time_feed_elapsed.sec = 0;
 8001e1e:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <Calculate_Elapsed_Time+0x68>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	805a      	strh	r2, [r3, #2]

            if (time_feed_elapsed.min == 60 - 1) {
 8001e24:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <Calculate_Elapsed_Time+0x68>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	2b3b      	cmp	r3, #59	@ 0x3b
 8001e2a:	d103      	bne.n	8001e34 <Calculate_Elapsed_Time+0x34>
                time_feed_elapsed.min = 0; 
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <Calculate_Elapsed_Time+0x68>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	801a      	strh	r2, [r3, #0]
        }

    } else {
        time_feed_elapsed.msec++;
    }
}
 8001e32:	e013      	b.n	8001e5c <Calculate_Elapsed_Time+0x5c>
                time_feed_elapsed.min++;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <Calculate_Elapsed_Time+0x68>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <Calculate_Elapsed_Time+0x68>)
 8001e3e:	801a      	strh	r2, [r3, #0]
}
 8001e40:	e00c      	b.n	8001e5c <Calculate_Elapsed_Time+0x5c>
            time_feed_elapsed.sec++;
 8001e42:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <Calculate_Elapsed_Time+0x68>)
 8001e44:	885b      	ldrh	r3, [r3, #2]
 8001e46:	3301      	adds	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	4b07      	ldr	r3, [pc, #28]	@ (8001e68 <Calculate_Elapsed_Time+0x68>)
 8001e4c:	805a      	strh	r2, [r3, #2]
}
 8001e4e:	e005      	b.n	8001e5c <Calculate_Elapsed_Time+0x5c>
        time_feed_elapsed.msec++;
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <Calculate_Elapsed_Time+0x68>)
 8001e52:	889b      	ldrh	r3, [r3, #4]
 8001e54:	3301      	adds	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	4b03      	ldr	r3, [pc, #12]	@ (8001e68 <Calculate_Elapsed_Time+0x68>)
 8001e5a:	809a      	strh	r2, [r3, #4]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000398 	.word	0x20000398

08001e6c <TimeToSec>:


uint64_t TimeToSec(time_TypeDef t)
{
 8001e6c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001e70:	b085      	sub	sp, #20
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	e883 0003 	stmia.w	r3, {r0, r1}
    return ((uint64_t)t.min * 60) + t.sec;
 8001e7c:	893b      	ldrh	r3, [r7, #8]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	2200      	movs	r2, #0
 8001e82:	4698      	mov	r8, r3
 8001e84:	4691      	mov	r9, r2
 8001e86:	4642      	mov	r2, r8
 8001e88:	464b      	mov	r3, r9
 8001e8a:	f04f 0000 	mov.w	r0, #0
 8001e8e:	f04f 0100 	mov.w	r1, #0
 8001e92:	0119      	lsls	r1, r3, #4
 8001e94:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001e98:	0110      	lsls	r0, r2, #4
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	ebb2 0408 	subs.w	r4, r2, r8
 8001ea2:	eb63 0509 	sbc.w	r5, r3, r9
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	00ab      	lsls	r3, r5, #2
 8001eb0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001eb4:	00a2      	lsls	r2, r4, #2
 8001eb6:	4614      	mov	r4, r2
 8001eb8:	461d      	mov	r5, r3
 8001eba:	4622      	mov	r2, r4
 8001ebc:	462b      	mov	r3, r5
 8001ebe:	8979      	ldrh	r1, [r7, #10]
 8001ec0:	b289      	uxth	r1, r1
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	468a      	mov	sl, r1
 8001ec6:	4683      	mov	fp, r0
 8001ec8:	eb12 010a 	adds.w	r1, r2, sl
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	eb43 030b 	adc.w	r3, r3, fp
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001ee4:	4770      	bx	lr
	...

08001ee8 <Compare_Time>:


void Compare_Time()
{
 8001ee8:	b5b0      	push	{r4, r5, r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
    uint8_t timeout = (TimeToSec(time_feed_elapsed) >= TimeToSec(time_feed_period)) ? 1 : 0;
 8001eee:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <Compare_Time+0x44>)
 8001ef0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ef4:	f7ff ffba 	bl	8001e6c <TimeToSec>
 8001ef8:	4604      	mov	r4, r0
 8001efa:	460d      	mov	r5, r1
 8001efc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <Compare_Time+0x48>)
 8001efe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f02:	f7ff ffb3 	bl	8001e6c <TimeToSec>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4294      	cmp	r4, r2
 8001f0c:	eb75 0303 	sbcs.w	r3, r5, r3
 8001f10:	bf2c      	ite	cs
 8001f12:	2301      	movcs	r3, #1
 8001f14:	2300      	movcc	r3, #0
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	71fb      	strb	r3, [r7, #7]
    SetFeedTimeOutFlag(timeout);  // 내부 상태가 아닌 Controller 상태에 전달
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fb75 	bl	800160c <SetFeedTimeOutFlag>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bdb0      	pop	{r4, r5, r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000398 	.word	0x20000398
 8001f30:	20000390 	.word	0x20000390

08001f34 <Sound_Init>:
 */

#include "sound.h"

void Sound_Init()
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
 Buzzer_Init(&htim3, TIM_CHANNEL_1);
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4802      	ldr	r0, [pc, #8]	@ (8001f44 <Sound_Init+0x10>)
 8001f3c:	f000 fc84 	bl	8002848 <Buzzer_Init>
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200001cc 	.word	0x200001cc

08001f48 <Button_Init>:
Button_Handler_t hBtnDown;
Button_Handler_t hBtnInputDone;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	4613      	mov	r3, r2
 8001f54:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	88fa      	ldrh	r2, [r7, #6]
 8001f60:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	609a      	str	r2, [r3, #8]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); // normal state is high.
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	889b      	ldrh	r3, [r3, #4]
 8001f84:	4619      	mov	r1, r3
 8001f86:	4610      	mov	r0, r2
 8001f88:	f001 f980 	bl	800328c <HAL_GPIO_ReadPin>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	60fb      	str	r3, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d10a      	bne.n	8001fae <Button_GetState+0x3a>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d107      	bne.n	8001fae <Button_GetState+0x3a>
		HAL_Delay(2); // debounce
 8001f9e:	2002      	movs	r0, #2
 8001fa0:	f000 fdca 	bl	8002b38 <HAL_Delay>
		hbtn->prevState = PUSHED;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00f      	b.n	8001fce <Button_GetState+0x5a>
	}
	else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10a      	bne.n	8001fcc <Button_GetState+0x58>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d107      	bne.n	8001fcc <Button_GetState+0x58>
		HAL_Delay(2); // debounce
 8001fbc:	2002      	movs	r0, #2
 8001fbe:	f000 fdbb 	bl	8002b38 <HAL_Delay>
		hbtn->prevState = RELEASED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e000      	b.n	8001fce <Button_GetState+0x5a>
	}
	return NO_ACT;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <DHT11_DelayUs>:
//   GPIO_InitStruct.Pull = GPIO_NOPULL;
//   HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
//}

void DHT11_DelayUs(uint32_t us)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
   __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <DHT11_DelayUs+0x2c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	625a      	str	r2, [r3, #36]	@ 0x24
   while(__HAL_TIM_GET_COUNTER(&htim4) < us);
 8001fe8:	bf00      	nop
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <DHT11_DelayUs+0x2c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d8f9      	bhi.n	8001fea <DHT11_DelayUs+0x12>
}
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	20000214 	.word	0x20000214

08002008 <DHT11_SendStartSignal>:

// 18ms Low, 20~40us High
void DHT11_SendStartSignal()
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200e:	463b      	mov	r3, r7
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
   GPIO_InitStruct.Pin = DHT11_PIN;
 800201c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002020:	603b      	str	r3, [r7, #0]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002022:	2311      	movs	r3, #17
 8002024:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
   HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 800202a:	463b      	mov	r3, r7
 800202c:	4619      	mov	r1, r3
 800202e:	4825      	ldr	r0, [pc, #148]	@ (80020c4 <DHT11_SendStartSignal+0xbc>)
 8002030:	f000 ffa8 	bl	8002f84 <HAL_GPIO_Init>

   HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, RESET);   // Low 18ms 유지
 8002034:	2200      	movs	r2, #0
 8002036:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800203a:	4822      	ldr	r0, [pc, #136]	@ (80020c4 <DHT11_SendStartSignal+0xbc>)
 800203c:	f001 f93e 	bl	80032bc <HAL_GPIO_WritePin>
   HAL_Delay(18);    // 18ms Low
 8002040:	2012      	movs	r0, #18
 8002042:	f000 fd79 	bl	8002b38 <HAL_Delay>
   HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, SET);
 8002046:	2201      	movs	r2, #1
 8002048:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800204c:	481d      	ldr	r0, [pc, #116]	@ (80020c4 <DHT11_SendStartSignal+0xbc>)
 800204e:	f001 f935 	bl	80032bc <HAL_GPIO_WritePin>
   DHT11_DelayUs(30);
 8002052:	201e      	movs	r0, #30
 8002054:	f7ff ffc0 	bl	8001fd8 <DHT11_DelayUs>

   // Input Mode + Exti 설정 외부 인터럽트 가능하게 설정
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002058:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800205c:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
   HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8002062:	463b      	mov	r3, r7
 8002064:	4619      	mov	r1, r3
 8002066:	4817      	ldr	r0, [pc, #92]	@ (80020c4 <DHT11_SendStartSignal+0xbc>)
 8002068:	f000 ff8c 	bl	8002f84 <HAL_GPIO_Init>

   HAL_TIM_Base_Stop(&htim4);
 800206c:	4816      	ldr	r0, [pc, #88]	@ (80020c8 <DHT11_SendStartSignal+0xc0>)
 800206e:	f002 fb43 	bl	80046f8 <HAL_TIM_Base_Stop>
   __HAL_TIM_SET_COUNTER(&htim4, 0);
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <DHT11_SendStartSignal+0xc0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2200      	movs	r2, #0
 8002078:	625a      	str	r2, [r3, #36]	@ 0x24
   HAL_TIM_Base_Start(&htim4);
 800207a:	4813      	ldr	r0, [pc, #76]	@ (80020c8 <DHT11_SendStartSignal+0xc0>)
 800207c:	f002 fae2 	bl	8004644 <HAL_TIM_Base_Start>

   // 수신 전에 초기화
   bit_index = 0;
 8002080:	4b12      	ldr	r3, [pc, #72]	@ (80020cc <DHT11_SendStartSignal+0xc4>)
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
   last_time =0;
 8002086:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <DHT11_SendStartSignal+0xc8>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

   for (int i = 0; i < 5; i++) {
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	e007      	b.n	80020a2 <DHT11_SendStartSignal+0x9a>
      data[i] = 0;
 8002092:	4a10      	ldr	r2, [pc, #64]	@ (80020d4 <DHT11_SendStartSignal+0xcc>)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	4413      	add	r3, r2
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < 5; i++) {
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3301      	adds	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	ddf4      	ble.n	8002092 <DHT11_SendStartSignal+0x8a>
   }

   __HAL_GPIO_EXTI_CLEAR_FLAG(DHT11_PIN);
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <DHT11_SendStartSignal+0xd0>)
 80020aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020ae:	615a      	str	r2, [r3, #20]
   HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80020b0:	2028      	movs	r0, #40	@ 0x28
 80020b2:	f000 fec6 	bl	8002e42 <HAL_NVIC_ClearPendingIRQ>
   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); //GPIO 10번에서 15번까지 인터럽트 처리
 80020b6:	2028      	movs	r0, #40	@ 0x28
 80020b8:	f000 fe9b 	bl	8002df2 <HAL_NVIC_EnableIRQ>
}
 80020bc:	bf00      	nop
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40020400 	.word	0x40020400
 80020c8:	20000214 	.word	0x20000214
 80020cc:	200003dc 	.word	0x200003dc
 80020d0:	200003d8 	.word	0x200003d8
 80020d4:	200003e0 	.word	0x200003e0
 80020d8:	40013c00 	.word	0x40013c00

080020dc <DHT11_ReadData>:

void DHT11_ReadData(uint8_t *humidity, uint8_t *temperature)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
   DHT11_SendStartSignal();
 80020e6:	f7ff ff8f 	bl	8002008 <DHT11_SendStartSignal>

   HAL_Delay(5);  // 최대 4ms 정도 데이터 수신 시간 대기
 80020ea:	2005      	movs	r0, #5
 80020ec:	f000 fd24 	bl	8002b38 <HAL_Delay>

   HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80020f0:	2028      	movs	r0, #40	@ 0x28
 80020f2:	f000 fe8c 	bl	8002e0e <HAL_NVIC_DisableIRQ>

//   if (data[4] == (data[0] + data[1] + data[2] + data[3]))
//   {
      *humidity = data[0];
 80020f6:	4b17      	ldr	r3, [pc, #92]	@ (8002154 <DHT11_ReadData+0x78>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	4619      	mov	r1, r3
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <DHT11_ReadData+0x78>)
 8002100:	785b      	ldrb	r3, [r3, #1]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4a14      	ldr	r2, [pc, #80]	@ (8002158 <DHT11_ReadData+0x7c>)
 8002106:	fb82 0203 	smull	r0, r2, r2, r3
 800210a:	1192      	asrs	r2, r2, #6
 800210c:	17db      	asrs	r3, r3, #31
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	440b      	add	r3, r1
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	edc3 7a00 	vstr	s15, [r3]
      *temperature = data[2];
 8002120:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <DHT11_ReadData+0x78>)
 8002122:	789b      	ldrb	r3, [r3, #2]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4619      	mov	r1, r3
 8002128:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <DHT11_ReadData+0x78>)
 800212a:	78db      	ldrb	r3, [r3, #3]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	4a0a      	ldr	r2, [pc, #40]	@ (8002158 <DHT11_ReadData+0x7c>)
 8002130:	fb82 0203 	smull	r0, r2, r2, r3
 8002134:	1192      	asrs	r2, r2, #6
 8002136:	17db      	asrs	r3, r3, #31
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	440b      	add	r3, r1
 800213c:	ee07 3a90 	vmov	s15, r3
 8002140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	edc3 7a00 	vstr	s15, [r3]
//      return 1;
//   }
//   return 0;
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200003e0 	.word	0x200003e0
 8002158:	10624dd3 	.word	0x10624dd3

0800215c <DHT11_EXTI_Callback>:

void DHT11_EXTI_Callback()
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
   uint32_t now = __HAL_TIM_GET_COUNTER(&htim4);
 8002162:	4b30      	ldr	r3, [pc, #192]	@ (8002224 <DHT11_EXTI_Callback+0xc8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002168:	60fb      	str	r3, [r7, #12]
   uint32_t duration = now - last_time;
 800216a:	4b2f      	ldr	r3, [pc, #188]	@ (8002228 <DHT11_EXTI_Callback+0xcc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	60bb      	str	r3, [r7, #8]
   last_time = now;
 8002174:	4a2c      	ldr	r2, [pc, #176]	@ (8002228 <DHT11_EXTI_Callback+0xcc>)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6013      	str	r3, [r2, #0]

   if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET)
 800217a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800217e:	482b      	ldr	r0, [pc, #172]	@ (800222c <DHT11_EXTI_Callback+0xd0>)
 8002180:	f001 f884 	bl	800328c <HAL_GPIO_ReadPin>
 8002184:	4603      	mov	r3, r0
 8002186:	2b01      	cmp	r3, #1
 8002188:	d047      	beq.n	800221a <DHT11_EXTI_Callback+0xbe>
      // Rising edge
   }
   else
   {
      // Falling edge (bit 해석)
      if (bit_index == 0) {
 800218a:	4b29      	ldr	r3, [pc, #164]	@ (8002230 <DHT11_EXTI_Callback+0xd4>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10a      	bne.n	80021aa <DHT11_EXTI_Callback+0x4e>
         if (duration < 70 || duration > 90) {
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b45      	cmp	r3, #69	@ 0x45
 8002198:	d902      	bls.n	80021a0 <DHT11_EXTI_Callback+0x44>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b5a      	cmp	r3, #90	@ 0x5a
 800219e:	d92d      	bls.n	80021fc <DHT11_EXTI_Callback+0xa0>
            printf("DHT11 LOW : %lu\n", duration);
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	4824      	ldr	r0, [pc, #144]	@ (8002234 <DHT11_EXTI_Callback+0xd8>)
 80021a4:	f004 f9ee 	bl	8006584 <iprintf>
 80021a8:	e028      	b.n	80021fc <DHT11_EXTI_Callback+0xa0>
         }
//      } else if (bit_index == 1) {
//         if (duration < 70 || duration > 90) {
//            printf("DHT11 HIGH : %lu \n", duration);
//         }
      } else if (bit_index >= 1 && bit_index <= 40) {
 80021aa:	4b21      	ldr	r3, [pc, #132]	@ (8002230 <DHT11_EXTI_Callback+0xd4>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d023      	beq.n	80021fc <DHT11_EXTI_Callback+0xa0>
 80021b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002230 <DHT11_EXTI_Callback+0xd4>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b28      	cmp	r3, #40	@ 0x28
 80021bc:	d81e      	bhi.n	80021fc <DHT11_EXTI_Callback+0xa0>
         // bit_index 1~40 이 실제 40bit 데이터
         uint8_t byte_idx = (bit_index - 1) / 8;
 80021be:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <DHT11_EXTI_Callback+0xd4>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	da00      	bge.n	80021cc <DHT11_EXTI_Callback+0x70>
 80021ca:	3307      	adds	r3, #7
 80021cc:	10db      	asrs	r3, r3, #3
 80021ce:	71fb      	strb	r3, [r7, #7]

         data[byte_idx] <<= 1;
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	4a19      	ldr	r2, [pc, #100]	@ (8002238 <DHT11_EXTI_Callback+0xdc>)
 80021d4:	5cd3      	ldrb	r3, [r2, r3]
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	0052      	lsls	r2, r2, #1
 80021dc:	b2d1      	uxtb	r1, r2
 80021de:	4a16      	ldr	r2, [pc, #88]	@ (8002238 <DHT11_EXTI_Callback+0xdc>)
 80021e0:	54d1      	strb	r1, [r2, r3]

         if (duration > 40)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b28      	cmp	r3, #40	@ 0x28
 80021e6:	d909      	bls.n	80021fc <DHT11_EXTI_Callback+0xa0>
            data[byte_idx] |= 1;
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	4a13      	ldr	r2, [pc, #76]	@ (8002238 <DHT11_EXTI_Callback+0xdc>)
 80021ec:	5cd3      	ldrb	r3, [r2, r3]
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	b2d1      	uxtb	r1, r2
 80021f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002238 <DHT11_EXTI_Callback+0xdc>)
 80021fa:	54d1      	strb	r1, [r2, r3]

      }
      bit_index++;
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <DHT11_EXTI_Callback+0xd4>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	3301      	adds	r3, #1
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <DHT11_EXTI_Callback+0xd4>)
 8002208:	701a      	strb	r2, [r3, #0]

      //40비트 수신 완료후 외부 인터럽트 비활성화
      if (bit_index > 40)
 800220a:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <DHT11_EXTI_Callback+0xd4>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b28      	cmp	r3, #40	@ 0x28
 8002212:	d902      	bls.n	800221a <DHT11_EXTI_Callback+0xbe>
      {
         HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002214:	2028      	movs	r0, #40	@ 0x28
 8002216:	f000 fdfa 	bl	8002e0e <HAL_NVIC_DisableIRQ>
      }
   }
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000214 	.word	0x20000214
 8002228:	200003d8 	.word	0x200003d8
 800222c:	40020400 	.word	0x40020400
 8002230:	200003dc 	.word	0x200003dc
 8002234:	0800783c 	.word	0x0800783c
 8002238:	200003e0 	.word	0x200003e0

0800223c <FND_WriteData>:
		fndDispDp &= ~dpData;
}

// write fndDispNum
void FND_WriteData(uint16_t data)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 8002246:	4a04      	ldr	r2, [pc, #16]	@ (8002258 <FND_WriteData+0x1c>)
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	8013      	strh	r3, [r2, #0]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	200003e6 	.word	0x200003e6

0800225c <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 8002260:	4b80      	ldr	r3, [pc, #512]	@ (8002464 <FND_DispDataCallBack+0x208>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	425a      	negs	r2, r3
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	f002 0207 	and.w	r2, r2, #7
 8002270:	bf58      	it	pl
 8002272:	4253      	negpl	r3, r2
 8002274:	4a7b      	ldr	r2, [pc, #492]	@ (8002464 <FND_DispDataCallBack+0x208>)
 8002276:	6013      	str	r3, [r2, #0]

	switch(digitPos)
 8002278:	4b7a      	ldr	r3, [pc, #488]	@ (8002464 <FND_DispDataCallBack+0x208>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b07      	cmp	r3, #7
 800227e:	f200 80ee 	bhi.w	800245e <FND_DispDataCallBack+0x202>
 8002282:	a201      	add	r2, pc, #4	@ (adr r2, 8002288 <FND_DispDataCallBack+0x2c>)
 8002284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002288:	080022a9 	.word	0x080022a9
 800228c:	080022d7 	.word	0x080022d7
 8002290:	0800230f 	.word	0x0800230f
 8002294:	08002347 	.word	0x08002347
 8002298:	0800237f 	.word	0x0800237f
 800229c:	080023b7 	.word	0x080023b7
 80022a0:	080023ef 	.word	0x080023ef
 80022a4:	08002427 	.word	0x08002427
	{
	case DIGIT_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80022a8:	f000 f900 	bl	80024ac <FND_DispOffAll>
		FND_DispDigit(fndDispNum%10);
 80022ac:	4b6e      	ldr	r3, [pc, #440]	@ (8002468 <FND_DispDataCallBack+0x20c>)
 80022ae:	881a      	ldrh	r2, [r3, #0]
 80022b0:	4b6e      	ldr	r3, [pc, #440]	@ (800246c <FND_DispDataCallBack+0x210>)
 80022b2:	fba3 1302 	umull	r1, r3, r3, r2
 80022b6:	08d9      	lsrs	r1, r3, #3
 80022b8:	460b      	mov	r3, r1
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f913 	bl	80024f0 <FND_DispDigit>
		FND_DispOn(digitPos);
 80022ca:	4b66      	ldr	r3, [pc, #408]	@ (8002464 <FND_DispDataCallBack+0x208>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f8d4 	bl	800247c <FND_DispOn>
		break;
 80022d4:	e0c3      	b.n	800245e <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80022d6:	f000 f8e9 	bl	80024ac <FND_DispOffAll>
		FND_DispDigit(fndDispNum/10%10);
 80022da:	4b63      	ldr	r3, [pc, #396]	@ (8002468 <FND_DispDataCallBack+0x20c>)
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	4a63      	ldr	r2, [pc, #396]	@ (800246c <FND_DispDataCallBack+0x210>)
 80022e0:	fba2 2303 	umull	r2, r3, r2, r3
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	4b60      	ldr	r3, [pc, #384]	@ (800246c <FND_DispDataCallBack+0x210>)
 80022ea:	fba3 1302 	umull	r1, r3, r3, r2
 80022ee:	08d9      	lsrs	r1, r3, #3
 80022f0:	460b      	mov	r3, r1
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 f8f7 	bl	80024f0 <FND_DispDigit>
		FND_DispOn(digitPos);
 8002302:	4b58      	ldr	r3, [pc, #352]	@ (8002464 <FND_DispDataCallBack+0x208>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f8b8 	bl	800247c <FND_DispOn>
		break;
 800230c:	e0a7      	b.n	800245e <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 800230e:	f000 f8cd 	bl	80024ac <FND_DispOffAll>
		FND_DispDigit(fndDispNum/100%10);
 8002312:	4b55      	ldr	r3, [pc, #340]	@ (8002468 <FND_DispDataCallBack+0x20c>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	4a56      	ldr	r2, [pc, #344]	@ (8002470 <FND_DispDataCallBack+0x214>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	b29a      	uxth	r2, r3
 8002320:	4b52      	ldr	r3, [pc, #328]	@ (800246c <FND_DispDataCallBack+0x210>)
 8002322:	fba3 1302 	umull	r1, r3, r3, r2
 8002326:	08d9      	lsrs	r1, r3, #3
 8002328:	460b      	mov	r3, r1
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	b29b      	uxth	r3, r3
 8002334:	4618      	mov	r0, r3
 8002336:	f000 f8db 	bl	80024f0 <FND_DispDigit>
		FND_DispOn(digitPos);
 800233a:	4b4a      	ldr	r3, [pc, #296]	@ (8002464 <FND_DispDataCallBack+0x208>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f000 f89c 	bl	800247c <FND_DispOn>
		break;
 8002344:	e08b      	b.n	800245e <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8002346:	f000 f8b1 	bl	80024ac <FND_DispOffAll>
		FND_DispDigit(fndDispNum/1000%10);
 800234a:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <FND_DispDataCallBack+0x20c>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	4a49      	ldr	r2, [pc, #292]	@ (8002474 <FND_DispDataCallBack+0x218>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	099b      	lsrs	r3, r3, #6
 8002356:	b29a      	uxth	r2, r3
 8002358:	4b44      	ldr	r3, [pc, #272]	@ (800246c <FND_DispDataCallBack+0x210>)
 800235a:	fba3 1302 	umull	r1, r3, r3, r2
 800235e:	08d9      	lsrs	r1, r3, #3
 8002360:	460b      	mov	r3, r1
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	b29b      	uxth	r3, r3
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f8bf 	bl	80024f0 <FND_DispDigit>
		FND_DispOn(digitPos);
 8002372:	4b3c      	ldr	r3, [pc, #240]	@ (8002464 <FND_DispDataCallBack+0x208>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f880 	bl	800247c <FND_DispOn>
		break;
 800237c:	e06f      	b.n	800245e <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 800237e:	f000 f895 	bl	80024ac <FND_DispOffAll>
		if (fndDispDp & (1<<0)){
 8002382:	4b3d      	ldr	r3, [pc, #244]	@ (8002478 <FND_DispDataCallBack+0x21c>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 800238e:	200a      	movs	r0, #10
 8002390:	f000 f8ae 	bl	80024f0 <FND_DispDigit>
 8002394:	e002      	b.n	800239c <FND_DispDataCallBack+0x140>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8002396:	200b      	movs	r0, #11
 8002398:	f000 f8aa 	bl	80024f0 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 800239c:	4b31      	ldr	r3, [pc, #196]	@ (8002464 <FND_DispDataCallBack+0x208>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	425a      	negs	r2, r3
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	f002 0203 	and.w	r2, r2, #3
 80023aa:	bf58      	it	pl
 80023ac:	4253      	negpl	r3, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f864 	bl	800247c <FND_DispOn>
		break;
 80023b4:	e053      	b.n	800245e <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80023b6:	f000 f879 	bl	80024ac <FND_DispOffAll>
		if (fndDispDp & (1<<1)){
 80023ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002478 <FND_DispDataCallBack+0x21c>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 80023c6:	200a      	movs	r0, #10
 80023c8:	f000 f892 	bl	80024f0 <FND_DispDigit>
 80023cc:	e002      	b.n	80023d4 <FND_DispDataCallBack+0x178>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 80023ce:	200b      	movs	r0, #11
 80023d0:	f000 f88e 	bl	80024f0 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80023d4:	4b23      	ldr	r3, [pc, #140]	@ (8002464 <FND_DispDataCallBack+0x208>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	425a      	negs	r2, r3
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	f002 0203 	and.w	r2, r2, #3
 80023e2:	bf58      	it	pl
 80023e4:	4253      	negpl	r3, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f848 	bl	800247c <FND_DispOn>
		break;
 80023ec:	e037      	b.n	800245e <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80023ee:	f000 f85d 	bl	80024ac <FND_DispOffAll>
		if (fndDispDp & (1<<2)){
 80023f2:	4b21      	ldr	r3, [pc, #132]	@ (8002478 <FND_DispDataCallBack+0x21c>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 80023fe:	200a      	movs	r0, #10
 8002400:	f000 f876 	bl	80024f0 <FND_DispDigit>
 8002404:	e002      	b.n	800240c <FND_DispDataCallBack+0x1b0>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8002406:	200b      	movs	r0, #11
 8002408:	f000 f872 	bl	80024f0 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 800240c:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <FND_DispDataCallBack+0x208>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	425a      	negs	r2, r3
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	f002 0203 	and.w	r2, r2, #3
 800241a:	bf58      	it	pl
 800241c:	4253      	negpl	r3, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f82c 	bl	800247c <FND_DispOn>
		break;
 8002424:	e01b      	b.n	800245e <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8002426:	f000 f841 	bl	80024ac <FND_DispOffAll>
		if (fndDispDp & (1<<3)){
 800242a:	4b13      	ldr	r3, [pc, #76]	@ (8002478 <FND_DispDataCallBack+0x21c>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 8002436:	200a      	movs	r0, #10
 8002438:	f000 f85a 	bl	80024f0 <FND_DispDigit>
 800243c:	e002      	b.n	8002444 <FND_DispDataCallBack+0x1e8>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 800243e:	200b      	movs	r0, #11
 8002440:	f000 f856 	bl	80024f0 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002444:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <FND_DispDataCallBack+0x208>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	425a      	negs	r2, r3
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	f002 0203 	and.w	r2, r2, #3
 8002452:	bf58      	it	pl
 8002454:	4253      	negpl	r3, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f810 	bl	800247c <FND_DispOn>
		break;
 800245c:	bf00      	nop
	}
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200003ec 	.word	0x200003ec
 8002468:	200003e6 	.word	0x200003e6
 800246c:	cccccccd 	.word	0xcccccccd
 8002470:	51eb851f 	.word	0x51eb851f
 8002474:	10624dd3 	.word	0x10624dd3
 8002478:	200003e8 	.word	0x200003e8

0800247c <FND_DispOn>:
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
}
*/

void FND_DispOn(int fndPos)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, RESET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8002484:	4a08      	ldr	r2, [pc, #32]	@ (80024a8 <FND_DispOn+0x2c>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800248c:	4a06      	ldr	r2, [pc, #24]	@ (80024a8 <FND_DispOn+0x2c>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	b29b      	uxth	r3, r3
 8002498:	2200      	movs	r2, #0
 800249a:	4619      	mov	r1, r3
 800249c:	f000 ff0e 	bl	80032bc <HAL_GPIO_WritePin>
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000004 	.word	0x20000004

080024ac <FND_DispOffAll>:

void FND_DispOffAll()
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++) {
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	e010      	b.n	80024da <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 80024b8:	4a0c      	ldr	r2, [pc, #48]	@ (80024ec <FND_DispOffAll+0x40>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <FND_DispOffAll+0x40>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2201      	movs	r2, #1
 80024ce:	4619      	mov	r1, r3
 80024d0:	f000 fef4 	bl	80032bc <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3301      	adds	r3, #1
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	ddeb      	ble.n	80024b8 <FND_DispOffAll+0xc>
	}
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000004 	.word	0x20000004

080024f0 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 80024fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002578 <FND_DispDigit+0x88>)
 80024fc:	f107 0308 	add.w	r3, r7, #8
 8002500:	ca07      	ldmia	r2, {r0, r1, r2}
 8002502:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    0x6F,  // 9 => 01101111
	    0x80,  // 10(dp) => 10000000
	    0x00,  // 11(off)=> 00000000
	};

	for (int i=0; i<8; i++) {
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e02c      	b.n	8002566 <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	3318      	adds	r3, #24
 8002510:	443b      	add	r3, r7
 8002512:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002516:	461a      	mov	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa42 f303 	asr.w	r3, r2, r3
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10e      	bne.n	8002544 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 8002526:	4a15      	ldr	r2, [pc, #84]	@ (800257c <FND_DispDigit+0x8c>)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800252e:	4a13      	ldr	r2, [pc, #76]	@ (800257c <FND_DispDigit+0x8c>)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	b29b      	uxth	r3, r3
 800253a:	2200      	movs	r2, #0
 800253c:	4619      	mov	r1, r3
 800253e:	f000 febd 	bl	80032bc <HAL_GPIO_WritePin>
 8002542:	e00d      	b.n	8002560 <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 8002544:	4a0d      	ldr	r2, [pc, #52]	@ (800257c <FND_DispDigit+0x8c>)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800254c:	4a0b      	ldr	r2, [pc, #44]	@ (800257c <FND_DispDigit+0x8c>)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	b29b      	uxth	r3, r3
 8002558:	2201      	movs	r2, #1
 800255a:	4619      	mov	r1, r3
 800255c:	f000 feae 	bl	80032bc <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3301      	adds	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b07      	cmp	r3, #7
 800256a:	ddcf      	ble.n	800250c <FND_DispDigit+0x1c>
		}
	}
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	08007850 	.word	0x08007850
 800257c:	20000024 	.word	0x20000024

08002580 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8002588:	4a18      	ldr	r2, [pc, #96]	@ (80025ec <LCD_Init+0x6c>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 800258e:	2032      	movs	r0, #50	@ 0x32
 8002590:	f000 fad2 	bl	8002b38 <HAL_Delay>
	LCD_cmdMode();
 8002594:	f000 f852 	bl	800263c <LCD_cmdMode>
	LCD_writeMode();
 8002598:	f000 f874 	bl	8002684 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 800259c:	2030      	movs	r0, #48	@ 0x30
 800259e:	f000 f8a7 	bl	80026f0 <LCD_sendNibbleData>
	HAL_Delay(5);
 80025a2:	2005      	movs	r0, #5
 80025a4:	f000 fac8 	bl	8002b38 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 80025a8:	2030      	movs	r0, #48	@ 0x30
 80025aa:	f000 f8a1 	bl	80026f0 <LCD_sendNibbleData>
	HAL_Delay(1);
 80025ae:	2001      	movs	r0, #1
 80025b0:	f000 fac2 	bl	8002b38 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 80025b4:	2030      	movs	r0, #48	@ 0x30
 80025b6:	f000 f89b 	bl	80026f0 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 80025ba:	2020      	movs	r0, #32
 80025bc:	f000 f898 	bl	80026f0 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 80025c0:	2028      	movs	r0, #40	@ 0x28
 80025c2:	f000 f8b9 	bl	8002738 <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 80025c6:	2008      	movs	r0, #8
 80025c8:	f000 f8b6 	bl	8002738 <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 80025cc:	2001      	movs	r0, #1
 80025ce:	f000 f8b3 	bl	8002738 <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 80025d2:	2006      	movs	r0, #6
 80025d4:	f000 f8b0 	bl	8002738 <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 80025d8:	200c      	movs	r0, #12
 80025da:	f000 f8ad 	bl	8002738 <LCD_sendData>
	LCD_backLightOn();
 80025de:	f000 f81d 	bl	800261c <LCD_backLightOn>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	200003f4 	.word	0x200003f4

080025f0 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 80025fa:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <LCD_sendI2C+0x28>)
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	1dfa      	adds	r2, r7, #7
 8002600:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2301      	movs	r3, #1
 8002608:	214e      	movs	r1, #78	@ 0x4e
 800260a:	f000 ffd9 	bl	80035c0 <HAL_I2C_Master_Transmit>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200003f4 	.word	0x200003f4

0800261c <LCD_backLightOn>:

void LCD_backLightOn()
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8002620:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <LCD_backLightOn+0x1c>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	f043 0308 	orr.w	r3, r3, #8
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b03      	ldr	r3, [pc, #12]	@ (8002638 <LCD_backLightOn+0x1c>)
 800262c:	701a      	strb	r2, [r3, #0]
}
 800262e:	bf00      	nop
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	200003f0 	.word	0x200003f0

0800263c <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8002640:	4b06      	ldr	r3, [pc, #24]	@ (800265c <LCD_cmdMode+0x20>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4b04      	ldr	r3, [pc, #16]	@ (800265c <LCD_cmdMode+0x20>)
 800264c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800264e:	4b03      	ldr	r3, [pc, #12]	@ (800265c <LCD_cmdMode+0x20>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ffcc 	bl	80025f0 <LCD_sendI2C>
}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}
 800265c:	200003f0 	.word	0x200003f0

08002660 <LCD_charMode>:

void LCD_charMode()
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <LCD_charMode+0x20>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <LCD_charMode+0x20>)
 8002670:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002672:	4b03      	ldr	r3, [pc, #12]	@ (8002680 <LCD_charMode+0x20>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff ffba 	bl	80025f0 <LCD_sendI2C>
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	200003f0 	.word	0x200003f0

08002684 <LCD_writeMode>:

void LCD_writeMode()
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <LCD_writeMode+0x20>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	f023 0302 	bic.w	r3, r3, #2
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <LCD_writeMode+0x20>)
 8002694:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002696:	4b03      	ldr	r3, [pc, #12]	@ (80026a4 <LCD_writeMode+0x20>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ffa8 	bl	80025f0 <LCD_sendI2C>
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200003f0 	.word	0x200003f0

080026a8 <LCD_E_High>:

void LCD_E_High()
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 80026ac:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <LCD_E_High+0x20>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <LCD_E_High+0x20>)
 80026b8:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80026ba:	4b03      	ldr	r3, [pc, #12]	@ (80026c8 <LCD_E_High+0x20>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff ff96 	bl	80025f0 <LCD_sendI2C>
}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200003f0 	.word	0x200003f0

080026cc <LCD_E_Low>:

void LCD_E_Low()
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 80026d0:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <LCD_E_Low+0x20>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	f023 0304 	bic.w	r3, r3, #4
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4b04      	ldr	r3, [pc, #16]	@ (80026ec <LCD_E_Low+0x20>)
 80026dc:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80026de:	4b03      	ldr	r3, [pc, #12]	@ (80026ec <LCD_E_Low+0x20>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff84 	bl	80025f0 <LCD_sendI2C>
}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	200003f0 	.word	0x200003f0

080026f0 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 80026fa:	f7ff ffd5 	bl	80026a8 <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	f023 030f 	bic.w	r3, r3, #15
 8002706:	b25a      	sxtb	r2, r3
 8002708:	4b0a      	ldr	r3, [pc, #40]	@ (8002734 <LCD_sendNibbleData+0x44>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	b25b      	sxtb	r3, r3
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	b25b      	sxtb	r3, r3
 8002714:	4313      	orrs	r3, r2
 8002716:	b25b      	sxtb	r3, r3
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <LCD_sendNibbleData+0x44>)
 800271c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800271e:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <LCD_sendNibbleData+0x44>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ff64 	bl	80025f0 <LCD_sendI2C>
	LCD_E_Low();
 8002728:	f7ff ffd0 	bl	80026cc <LCD_E_Low>
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	200003f0 	.word	0x200003f0

08002738 <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ffd3 	bl	80026f0 <LCD_sendNibbleData>

	data = data << 4;
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff ffcc 	bl	80026f0 <LCD_sendNibbleData>
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 800276a:	f7ff ff8b 	bl	8002684 <LCD_writeMode>
	LCD_cmdMode();
 800276e:	f7ff ff65 	bl	800263c <LCD_cmdMode>
	LCD_sendData(data);
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ffdf 	bl	8002738 <LCD_sendData>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 800278c:	f7ff ff7a 	bl	8002684 <LCD_writeMode>
	LCD_charMode();
 8002790:	f7ff ff66 	bl	8002660 <LCD_charMode>
	LCD_sendData(data);
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ffce 	bl	8002738 <LCD_sendData>
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <LCD_writeString>:

void LCD_writeString(char *str)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++) {
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e009      	b.n	80027c6 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ffe1 	bl	8002782 <LCD_writeCharData>
	for (int i=0; str[i]; i++) {
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3301      	adds	r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	4413      	add	r3, r2
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1ef      	bne.n	80027b2 <LCD_writeString+0xe>
	}
}
 80027d2:	bf00      	nop
 80027d4:	bf00      	nop
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	460a      	mov	r2, r1
 80027e6:	71fb      	strb	r3, [r7, #7]
 80027e8:	4613      	mov	r3, r2
 80027ea:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 80027ec:	79bb      	ldrb	r3, [r7, #6]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	019b      	lsls	r3, r3, #6
 8002800:	b2da      	uxtb	r2, r3
 8002802:	79bb      	ldrb	r3, [r7, #6]
 8002804:	4413      	add	r3, r2
 8002806:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	3b80      	subs	r3, #128	@ 0x80
 800280c:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 800280e:	7bbb      	ldrb	r3, [r7, #14]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ffa5 	bl	8002760 <LCD_writeCmdData>
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	603a      	str	r2, [r7, #0]
 8002828:	71fb      	strb	r3, [r7, #7]
 800282a:	460b      	mov	r3, r1
 800282c:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 800282e:	79ba      	ldrb	r2, [r7, #6]
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ffd1 	bl	80027dc <LCD_gotoXY>
	LCD_writeString(str);
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	f7ff ffb2 	bl	80027a4 <LCD_writeString>
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <Buzzer_Init>:

static TIM_HandleTypeDef *hbuzzerTim;
static uint32_t hbuzzerTimChannel;

void Buzzer_Init(TIM_HandleTypeDef *hTim,uint32_t Channel)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
	hbuzzerTim = hTim;
 8002852:	4a06      	ldr	r2, [pc, #24]	@ (800286c <Buzzer_Init+0x24>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6013      	str	r3, [r2, #0]
	hbuzzerTimChannel = Channel;
 8002858:	4a05      	ldr	r2, [pc, #20]	@ (8002870 <Buzzer_Init+0x28>)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6013      	str	r3, [r2, #0]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	200003f8 	.word	0x200003f8
 8002870:	200003fc 	.word	0x200003fc

08002874 <motor_Init>:

static TIM_HandleTypeDef *hmotorTim;
static uint32_t hmotorTimChannel;

void motor_Init(TIM_HandleTypeDef *hTim,uint32_t Channel)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
	hmotorTim = hTim;
 800287e:	4a06      	ldr	r2, [pc, #24]	@ (8002898 <motor_Init+0x24>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6013      	str	r3, [r2, #0]
	hmotorTimChannel = Channel;
 8002884:	4a05      	ldr	r2, [pc, #20]	@ (800289c <motor_Init+0x28>)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6013      	str	r3, [r2, #0]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000400 	.word	0x20000400
 800289c:	20000404 	.word	0x20000404

080028a0 <motor_SetDuty>:


void motor_SetDuty(uint32_t Duty)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	if(Duty > 100) Duty = 100;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b64      	cmp	r3, #100	@ 0x64
 80028ac:	d901      	bls.n	80028b2 <motor_SetDuty+0x12>
 80028ae:	2364      	movs	r3, #100	@ 0x64
 80028b0:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(hmotorTim,hmotorTimChannel,Duty);
 80028b2:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <motor_SetDuty+0x64>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <motor_SetDuty+0x26>
 80028ba:	4b13      	ldr	r3, [pc, #76]	@ (8002908 <motor_SetDuty+0x68>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80028c4:	e018      	b.n	80028f8 <motor_SetDuty+0x58>
	__HAL_TIM_SET_COMPARE(hmotorTim,hmotorTimChannel,Duty);
 80028c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <motor_SetDuty+0x64>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d105      	bne.n	80028da <motor_SetDuty+0x3a>
 80028ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002908 <motor_SetDuty+0x68>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80028d8:	e00e      	b.n	80028f8 <motor_SetDuty+0x58>
	__HAL_TIM_SET_COMPARE(hmotorTim,hmotorTimChannel,Duty);
 80028da:	4b0a      	ldr	r3, [pc, #40]	@ (8002904 <motor_SetDuty+0x64>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d105      	bne.n	80028ee <motor_SetDuty+0x4e>
 80028e2:	4b09      	ldr	r3, [pc, #36]	@ (8002908 <motor_SetDuty+0x68>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80028ec:	e004      	b.n	80028f8 <motor_SetDuty+0x58>
	__HAL_TIM_SET_COMPARE(hmotorTim,hmotorTimChannel,Duty);
 80028ee:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <motor_SetDuty+0x68>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	20000404 	.word	0x20000404
 8002908:	20000400 	.word	0x20000400

0800290c <delay_us>:
#define FILTER_SIZE 5

UltraSonic_TypeDef hultra;

void delay_us(uint16_t us)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	80fb      	strh	r3, [r7, #6]
   __HAL_TIM_SET_COUNTER(&htim5, 0);
 8002916:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <delay_us+0x34>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2200      	movs	r2, #0
 800291c:	625a      	str	r2, [r3, #36]	@ 0x24
   HAL_TIM_Base_Start(&htim5);
 800291e:	4808      	ldr	r0, [pc, #32]	@ (8002940 <delay_us+0x34>)
 8002920:	f001 fe90 	bl	8004644 <HAL_TIM_Base_Start>

   while(__HAL_TIM_GET_COUNTER(&htim5) < us);
 8002924:	bf00      	nop
 8002926:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <delay_us+0x34>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	429a      	cmp	r2, r3
 8002930:	d3f9      	bcc.n	8002926 <delay_us+0x1a>
   HAL_TIM_Base_Stop(&htim5);
 8002932:	4803      	ldr	r0, [pc, #12]	@ (8002940 <delay_us+0x34>)
 8002934:	f001 fee0 	bl	80046f8 <HAL_TIM_Base_Stop>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	2000025c 	.word	0x2000025c

08002944 <UltraSonic_Init>:

void UltraSonic_Init(GPIO_TypeDef *Trig_GPIOx, uint16_t Trig_pinNum,  GPIO_TypeDef *Echo_GPIOx, uint16_t Echo_pinNum) {
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	461a      	mov	r2, r3
 8002950:	460b      	mov	r3, r1
 8002952:	817b      	strh	r3, [r7, #10]
 8002954:	4613      	mov	r3, r2
 8002956:	813b      	strh	r3, [r7, #8]
   hultra.Trig_GPIOx = Trig_GPIOx;
 8002958:	4a08      	ldr	r2, [pc, #32]	@ (800297c <UltraSonic_Init+0x38>)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6013      	str	r3, [r2, #0]
   hultra.Trig_pinNum = Trig_pinNum;
 800295e:	4a07      	ldr	r2, [pc, #28]	@ (800297c <UltraSonic_Init+0x38>)
 8002960:	897b      	ldrh	r3, [r7, #10]
 8002962:	8093      	strh	r3, [r2, #4]
   hultra.Echo_GPIOx = Echo_GPIOx;
 8002964:	4a05      	ldr	r2, [pc, #20]	@ (800297c <UltraSonic_Init+0x38>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6093      	str	r3, [r2, #8]
   hultra.Echo_pinNum = Echo_pinNum;
 800296a:	4a04      	ldr	r2, [pc, #16]	@ (800297c <UltraSonic_Init+0x38>)
 800296c:	893b      	ldrh	r3, [r7, #8]
 800296e:	8193      	strh	r3, [r2, #12]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	20000408 	.word	0x20000408

08002980 <UltraSonic_GetDistance>:

int UltraSonic_GetDistance ()
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
   uint32_t count = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
   int distance = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	607b      	str	r3, [r7, #4]

   // trig
   HAL_GPIO_WritePin(hultra.Trig_GPIOx, hultra.Trig_pinNum, GPIO_PIN_SET);
 800298e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a48 <UltraSonic_GetDistance+0xc8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a2d      	ldr	r2, [pc, #180]	@ (8002a48 <UltraSonic_GetDistance+0xc8>)
 8002994:	8891      	ldrh	r1, [r2, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fc8f 	bl	80032bc <HAL_GPIO_WritePin>
   delay_us(10);
 800299e:	200a      	movs	r0, #10
 80029a0:	f7ff ffb4 	bl	800290c <delay_us>
   HAL_GPIO_WritePin(hultra.Trig_GPIOx, hultra.Trig_pinNum, GPIO_PIN_RESET);
 80029a4:	4b28      	ldr	r3, [pc, #160]	@ (8002a48 <UltraSonic_GetDistance+0xc8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a27      	ldr	r2, [pc, #156]	@ (8002a48 <UltraSonic_GetDistance+0xc8>)
 80029aa:	8891      	ldrh	r1, [r2, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fc84 	bl	80032bc <HAL_GPIO_WritePin>

   // wait echo . high
   uint32_t timeout = 60000;
 80029b4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80029b8:	60fb      	str	r3, [r7, #12]
   while(!(HAL_GPIO_ReadPin(hultra.Echo_GPIOx, hultra.Echo_pinNum)))
 80029ba:	e008      	b.n	80029ce <UltraSonic_GetDistance+0x4e>
   {
      if (--timeout == 0)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3b01      	subs	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <UltraSonic_GetDistance+0x4e>
         return -1;
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295
 80029cc:	e037      	b.n	8002a3e <UltraSonic_GetDistance+0xbe>
   while(!(HAL_GPIO_ReadPin(hultra.Echo_GPIOx, hultra.Echo_pinNum)))
 80029ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002a48 <UltraSonic_GetDistance+0xc8>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a48 <UltraSonic_GetDistance+0xc8>)
 80029d4:	8992      	ldrh	r2, [r2, #12]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fc57 	bl	800328c <HAL_GPIO_ReadPin>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0eb      	beq.n	80029bc <UltraSonic_GetDistance+0x3c>
   }

   // timer start
   __HAL_TIM_SET_COUNTER(&htim5, 0);
 80029e4:	4b19      	ldr	r3, [pc, #100]	@ (8002a4c <UltraSonic_GetDistance+0xcc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2200      	movs	r2, #0
 80029ea:	625a      	str	r2, [r3, #36]	@ 0x24
   HAL_TIM_Base_Start(&htim5);
 80029ec:	4817      	ldr	r0, [pc, #92]	@ (8002a4c <UltraSonic_GetDistance+0xcc>)
 80029ee:	f001 fe29 	bl	8004644 <HAL_TIM_Base_Start>

   // wait echo . low
   timeout = 60000;
 80029f2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80029f6:	60fb      	str	r3, [r7, #12]
   while(HAL_GPIO_ReadPin(hultra.Echo_GPIOx, hultra.Echo_pinNum))
 80029f8:	e008      	b.n	8002a0c <UltraSonic_GetDistance+0x8c>
   {
      if (--timeout == 0)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d102      	bne.n	8002a0c <UltraSonic_GetDistance+0x8c>
         return -1;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0a:	e018      	b.n	8002a3e <UltraSonic_GetDistance+0xbe>
   while(HAL_GPIO_ReadPin(hultra.Echo_GPIOx, hultra.Echo_pinNum))
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <UltraSonic_GetDistance+0xc8>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a0d      	ldr	r2, [pc, #52]	@ (8002a48 <UltraSonic_GetDistance+0xc8>)
 8002a12:	8992      	ldrh	r2, [r2, #12]
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fc38 	bl	800328c <HAL_GPIO_ReadPin>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1eb      	bne.n	80029fa <UltraSonic_GetDistance+0x7a>
   }

   // timer stop
   HAL_TIM_Base_Stop(&htim5);
 8002a22:	480a      	ldr	r0, [pc, #40]	@ (8002a4c <UltraSonic_GetDistance+0xcc>)
 8002a24:	f001 fe68 	bl	80046f8 <HAL_TIM_Base_Stop>
   count = __HAL_TIM_GET_COUNTER(&htim5);
 8002a28:	4b08      	ldr	r3, [pc, #32]	@ (8002a4c <UltraSonic_GetDistance+0xcc>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	60bb      	str	r3, [r7, #8]

   distance = count / 58;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4a07      	ldr	r2, [pc, #28]	@ (8002a50 <UltraSonic_GetDistance+0xd0>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	607b      	str	r3, [r7, #4]

   return distance;
 8002a3c:	687b      	ldr	r3, [r7, #4]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000408 	.word	0x20000408
 8002a4c:	2000025c 	.word	0x2000025c
 8002a50:	8d3dcb09 	.word	0x8d3dcb09

08002a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a58:	4b0e      	ldr	r3, [pc, #56]	@ (8002a94 <HAL_Init+0x40>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a94 <HAL_Init+0x40>)
 8002a5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_Init+0x40>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0a      	ldr	r2, [pc, #40]	@ (8002a94 <HAL_Init+0x40>)
 8002a6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a70:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <HAL_Init+0x40>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a07      	ldr	r2, [pc, #28]	@ (8002a94 <HAL_Init+0x40>)
 8002a76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a7c:	2003      	movs	r0, #3
 8002a7e:	f000 f991 	bl	8002da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a82:	200f      	movs	r0, #15
 8002a84:	f000 f808 	bl	8002a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a88:	f7fd ff6a 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023c00 	.word	0x40023c00

08002a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa0:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_InitTick+0x54>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <HAL_InitTick+0x58>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f9b7 	bl	8002e2a <HAL_SYSTICK_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00e      	b.n	8002ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b0f      	cmp	r3, #15
 8002aca:	d80a      	bhi.n	8002ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002acc:	2200      	movs	r2, #0
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f000 f971 	bl	8002dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad8:	4a06      	ldr	r2, [pc, #24]	@ (8002af4 <HAL_InitTick+0x5c>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e000      	b.n	8002ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000000 	.word	0x20000000
 8002af0:	20000068 	.word	0x20000068
 8002af4:	20000064 	.word	0x20000064

08002af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_IncTick+0x20>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_IncTick+0x24>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <HAL_IncTick+0x24>)
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000068 	.word	0x20000068
 8002b1c:	20000418 	.word	0x20000418

08002b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return uwTick;
 8002b24:	4b03      	ldr	r3, [pc, #12]	@ (8002b34 <HAL_GetTick+0x14>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20000418 	.word	0x20000418

08002b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b40:	f7ff ffee 	bl	8002b20 <HAL_GetTick>
 8002b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d005      	beq.n	8002b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b52:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <HAL_Delay+0x44>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b5e:	bf00      	nop
 8002b60:	f7ff ffde 	bl	8002b20 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d8f7      	bhi.n	8002b60 <HAL_Delay+0x28>
  {
  }
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000068 	.word	0x20000068

08002b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b90:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb2:	4a04      	ldr	r2, [pc, #16]	@ (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	60d3      	str	r3, [r2, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bcc:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	f003 0307 	and.w	r3, r3, #7
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	db0b      	blt.n	8002c0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4907      	ldr	r1, [pc, #28]	@ (8002c1c <__NVIC_EnableIRQ+0x38>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2001      	movs	r0, #1
 8002c06:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000e100 	.word	0xe000e100

08002c20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	db12      	blt.n	8002c58 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	f003 021f 	and.w	r2, r3, #31
 8002c38:	490a      	ldr	r1, [pc, #40]	@ (8002c64 <__NVIC_DisableIRQ+0x44>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2001      	movs	r0, #1
 8002c42:	fa00 f202 	lsl.w	r2, r0, r2
 8002c46:	3320      	adds	r3, #32
 8002c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c4c:	f3bf 8f4f 	dsb	sy
}
 8002c50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c52:	f3bf 8f6f 	isb	sy
}
 8002c56:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000e100 	.word	0xe000e100

08002c68 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	db0c      	blt.n	8002c94 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	4907      	ldr	r1, [pc, #28]	@ (8002ca0 <__NVIC_ClearPendingIRQ+0x38>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2001      	movs	r0, #1
 8002c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8e:	3360      	adds	r3, #96	@ 0x60
 8002c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000e100 	.word	0xe000e100

08002ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	6039      	str	r1, [r7, #0]
 8002cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	db0a      	blt.n	8002cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	490c      	ldr	r1, [pc, #48]	@ (8002cf0 <__NVIC_SetPriority+0x4c>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ccc:	e00a      	b.n	8002ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4908      	ldr	r1, [pc, #32]	@ (8002cf4 <__NVIC_SetPriority+0x50>)
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	3b04      	subs	r3, #4
 8002cdc:	0112      	lsls	r2, r2, #4
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	761a      	strb	r2, [r3, #24]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000e100 	.word	0xe000e100
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	@ 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f1c3 0307 	rsb	r3, r3, #7
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	bf28      	it	cs
 8002d16:	2304      	movcs	r3, #4
 8002d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2b06      	cmp	r3, #6
 8002d20:	d902      	bls.n	8002d28 <NVIC_EncodePriority+0x30>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3b03      	subs	r3, #3
 8002d26:	e000      	b.n	8002d2a <NVIC_EncodePriority+0x32>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43da      	mvns	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d40:	f04f 31ff 	mov.w	r1, #4294967295
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	43d9      	mvns	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	4313      	orrs	r3, r2
         );
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3724      	adds	r7, #36	@ 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d70:	d301      	bcc.n	8002d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d72:	2301      	movs	r3, #1
 8002d74:	e00f      	b.n	8002d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d76:	4a0a      	ldr	r2, [pc, #40]	@ (8002da0 <SysTick_Config+0x40>)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7e:	210f      	movs	r1, #15
 8002d80:	f04f 30ff 	mov.w	r0, #4294967295
 8002d84:	f7ff ff8e 	bl	8002ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d88:	4b05      	ldr	r3, [pc, #20]	@ (8002da0 <SysTick_Config+0x40>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8e:	4b04      	ldr	r3, [pc, #16]	@ (8002da0 <SysTick_Config+0x40>)
 8002d90:	2207      	movs	r2, #7
 8002d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	e000e010 	.word	0xe000e010

08002da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff fee7 	bl	8002b80 <__NVIC_SetPriorityGrouping>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dcc:	f7ff fefc 	bl	8002bc8 <__NVIC_GetPriorityGrouping>
 8002dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	6978      	ldr	r0, [r7, #20]
 8002dd8:	f7ff ff8e 	bl	8002cf8 <NVIC_EncodePriority>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff5d 	bl	8002ca4 <__NVIC_SetPriority>
}
 8002dea:	bf00      	nop
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	4603      	mov	r3, r0
 8002dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff feef 	bl	8002be4 <__NVIC_EnableIRQ>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff feff 	bl	8002c20 <__NVIC_DisableIRQ>
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ff94 	bl	8002d60 <SysTick_Config>
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	4603      	mov	r3, r0
 8002e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff09 	bl	8002c68 <__NVIC_ClearPendingIRQ>
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e6c:	f7ff fe58 	bl	8002b20 <HAL_GetTick>
 8002e70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d008      	beq.n	8002e90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2280      	movs	r2, #128	@ 0x80
 8002e82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e052      	b.n	8002f36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0216 	bic.w	r2, r2, #22
 8002e9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002eae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d103      	bne.n	8002ec0 <HAL_DMA_Abort+0x62>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d007      	beq.n	8002ed0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0208 	bic.w	r2, r2, #8
 8002ece:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee0:	e013      	b.n	8002f0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ee2:	f7ff fe1d 	bl	8002b20 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b05      	cmp	r3, #5
 8002eee:	d90c      	bls.n	8002f0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2203      	movs	r2, #3
 8002efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e015      	b.n	8002f36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e4      	bne.n	8002ee2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	223f      	movs	r2, #63	@ 0x3f
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d004      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2280      	movs	r2, #128	@ 0x80
 8002f56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e00c      	b.n	8002f76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2205      	movs	r2, #5
 8002f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b089      	sub	sp, #36	@ 0x24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	e159      	b.n	8003254 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	f040 8148 	bne.w	800324e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d005      	beq.n	8002fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d130      	bne.n	8003038 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800300c:	2201      	movs	r2, #1
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 0201 	and.w	r2, r3, #1
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b03      	cmp	r3, #3
 8003042:	d017      	beq.n	8003074 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	2203      	movs	r2, #3
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d123      	bne.n	80030c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	08da      	lsrs	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3208      	adds	r2, #8
 8003088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	220f      	movs	r2, #15
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	08da      	lsrs	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3208      	adds	r2, #8
 80030c2:	69b9      	ldr	r1, [r7, #24]
 80030c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0203 	and.w	r2, r3, #3
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80a2 	beq.w	800324e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	4b57      	ldr	r3, [pc, #348]	@ (800326c <HAL_GPIO_Init+0x2e8>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003112:	4a56      	ldr	r2, [pc, #344]	@ (800326c <HAL_GPIO_Init+0x2e8>)
 8003114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003118:	6453      	str	r3, [r2, #68]	@ 0x44
 800311a:	4b54      	ldr	r3, [pc, #336]	@ (800326c <HAL_GPIO_Init+0x2e8>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003126:	4a52      	ldr	r2, [pc, #328]	@ (8003270 <HAL_GPIO_Init+0x2ec>)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	3302      	adds	r3, #2
 800312e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	220f      	movs	r2, #15
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a49      	ldr	r2, [pc, #292]	@ (8003274 <HAL_GPIO_Init+0x2f0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d019      	beq.n	8003186 <HAL_GPIO_Init+0x202>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a48      	ldr	r2, [pc, #288]	@ (8003278 <HAL_GPIO_Init+0x2f4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_GPIO_Init+0x1fe>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a47      	ldr	r2, [pc, #284]	@ (800327c <HAL_GPIO_Init+0x2f8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00d      	beq.n	800317e <HAL_GPIO_Init+0x1fa>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a46      	ldr	r2, [pc, #280]	@ (8003280 <HAL_GPIO_Init+0x2fc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <HAL_GPIO_Init+0x1f6>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a45      	ldr	r2, [pc, #276]	@ (8003284 <HAL_GPIO_Init+0x300>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_GPIO_Init+0x1f2>
 8003172:	2304      	movs	r3, #4
 8003174:	e008      	b.n	8003188 <HAL_GPIO_Init+0x204>
 8003176:	2307      	movs	r3, #7
 8003178:	e006      	b.n	8003188 <HAL_GPIO_Init+0x204>
 800317a:	2303      	movs	r3, #3
 800317c:	e004      	b.n	8003188 <HAL_GPIO_Init+0x204>
 800317e:	2302      	movs	r3, #2
 8003180:	e002      	b.n	8003188 <HAL_GPIO_Init+0x204>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_GPIO_Init+0x204>
 8003186:	2300      	movs	r3, #0
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	f002 0203 	and.w	r2, r2, #3
 800318e:	0092      	lsls	r2, r2, #2
 8003190:	4093      	lsls	r3, r2
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003198:	4935      	ldr	r1, [pc, #212]	@ (8003270 <HAL_GPIO_Init+0x2ec>)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	3302      	adds	r3, #2
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031a6:	4b38      	ldr	r3, [pc, #224]	@ (8003288 <HAL_GPIO_Init+0x304>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003288 <HAL_GPIO_Init+0x304>)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003288 <HAL_GPIO_Init+0x304>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031f4:	4a24      	ldr	r2, [pc, #144]	@ (8003288 <HAL_GPIO_Init+0x304>)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031fa:	4b23      	ldr	r3, [pc, #140]	@ (8003288 <HAL_GPIO_Init+0x304>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800321e:	4a1a      	ldr	r2, [pc, #104]	@ (8003288 <HAL_GPIO_Init+0x304>)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003224:	4b18      	ldr	r3, [pc, #96]	@ (8003288 <HAL_GPIO_Init+0x304>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003248:	4a0f      	ldr	r2, [pc, #60]	@ (8003288 <HAL_GPIO_Init+0x304>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3301      	adds	r3, #1
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	2b0f      	cmp	r3, #15
 8003258:	f67f aea2 	bls.w	8002fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	3724      	adds	r7, #36	@ 0x24
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800
 8003270:	40013800 	.word	0x40013800
 8003274:	40020000 	.word	0x40020000
 8003278:	40020400 	.word	0x40020400
 800327c:	40020800 	.word	0x40020800
 8003280:	40020c00 	.word	0x40020c00
 8003284:	40021000 	.word	0x40021000
 8003288:	40013c00 	.word	0x40013c00

0800328c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	887b      	ldrh	r3, [r7, #2]
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
 80032a8:	e001      	b.n	80032ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	807b      	strh	r3, [r7, #2]
 80032c8:	4613      	mov	r3, r2
 80032ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032cc:	787b      	ldrb	r3, [r7, #1]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032d2:	887a      	ldrh	r2, [r7, #2]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032d8:	e003      	b.n	80032e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032da:	887b      	ldrh	r3, [r7, #2]
 80032dc:	041a      	lsls	r2, r3, #16
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	619a      	str	r2, [r3, #24]
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
	...

080032f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032fa:	4b08      	ldr	r3, [pc, #32]	@ (800331c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d006      	beq.n	8003314 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003306:	4a05      	ldr	r2, [pc, #20]	@ (800331c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f806 	bl	8003320 <HAL_GPIO_EXTI_Callback>
  }
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40013c00 	.word	0x40013c00

08003320 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e12b      	b.n	80035a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fd fa2c 	bl	80007bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2224      	movs	r2, #36	@ 0x24
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800338a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800339a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800339c:	f001 f8da 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 80033a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	4a81      	ldr	r2, [pc, #516]	@ (80035ac <HAL_I2C_Init+0x274>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d807      	bhi.n	80033bc <HAL_I2C_Init+0x84>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a80      	ldr	r2, [pc, #512]	@ (80035b0 <HAL_I2C_Init+0x278>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	bf94      	ite	ls
 80033b4:	2301      	movls	r3, #1
 80033b6:	2300      	movhi	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e006      	b.n	80033ca <HAL_I2C_Init+0x92>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a7d      	ldr	r2, [pc, #500]	@ (80035b4 <HAL_I2C_Init+0x27c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	bf94      	ite	ls
 80033c4:	2301      	movls	r3, #1
 80033c6:	2300      	movhi	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e0e7      	b.n	80035a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4a78      	ldr	r2, [pc, #480]	@ (80035b8 <HAL_I2C_Init+0x280>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	0c9b      	lsrs	r3, r3, #18
 80033dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4a6a      	ldr	r2, [pc, #424]	@ (80035ac <HAL_I2C_Init+0x274>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d802      	bhi.n	800340c <HAL_I2C_Init+0xd4>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	3301      	adds	r3, #1
 800340a:	e009      	b.n	8003420 <HAL_I2C_Init+0xe8>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	4a69      	ldr	r2, [pc, #420]	@ (80035bc <HAL_I2C_Init+0x284>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	099b      	lsrs	r3, r3, #6
 800341e:	3301      	adds	r3, #1
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	430b      	orrs	r3, r1
 8003426:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003432:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	495c      	ldr	r1, [pc, #368]	@ (80035ac <HAL_I2C_Init+0x274>)
 800343c:	428b      	cmp	r3, r1
 800343e:	d819      	bhi.n	8003474 <HAL_I2C_Init+0x13c>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1e59      	subs	r1, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	fbb1 f3f3 	udiv	r3, r1, r3
 800344e:	1c59      	adds	r1, r3, #1
 8003450:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003454:	400b      	ands	r3, r1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_I2C_Init+0x138>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1e59      	subs	r1, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fbb1 f3f3 	udiv	r3, r1, r3
 8003468:	3301      	adds	r3, #1
 800346a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346e:	e051      	b.n	8003514 <HAL_I2C_Init+0x1dc>
 8003470:	2304      	movs	r3, #4
 8003472:	e04f      	b.n	8003514 <HAL_I2C_Init+0x1dc>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d111      	bne.n	80034a0 <HAL_I2C_Init+0x168>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e58      	subs	r0, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	440b      	add	r3, r1
 800348a:	fbb0 f3f3 	udiv	r3, r0, r3
 800348e:	3301      	adds	r3, #1
 8003490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	e012      	b.n	80034c6 <HAL_I2C_Init+0x18e>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1e58      	subs	r0, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	0099      	lsls	r1, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b6:	3301      	adds	r3, #1
 80034b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf0c      	ite	eq
 80034c0:	2301      	moveq	r3, #1
 80034c2:	2300      	movne	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_I2C_Init+0x196>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e022      	b.n	8003514 <HAL_I2C_Init+0x1dc>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10e      	bne.n	80034f4 <HAL_I2C_Init+0x1bc>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1e58      	subs	r0, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6859      	ldr	r1, [r3, #4]
 80034de:	460b      	mov	r3, r1
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	440b      	add	r3, r1
 80034e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e8:	3301      	adds	r3, #1
 80034ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034f2:	e00f      	b.n	8003514 <HAL_I2C_Init+0x1dc>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1e58      	subs	r0, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6859      	ldr	r1, [r3, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	0099      	lsls	r1, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	fbb0 f3f3 	udiv	r3, r0, r3
 800350a:	3301      	adds	r3, #1
 800350c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003510:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	6809      	ldr	r1, [r1, #0]
 8003518:	4313      	orrs	r3, r2
 800351a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003542:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6911      	ldr	r1, [r2, #16]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	68d2      	ldr	r2, [r2, #12]
 800354e:	4311      	orrs	r1, r2
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	430b      	orrs	r3, r1
 8003556:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	000186a0 	.word	0x000186a0
 80035b0:	001e847f 	.word	0x001e847f
 80035b4:	003d08ff 	.word	0x003d08ff
 80035b8:	431bde83 	.word	0x431bde83
 80035bc:	10624dd3 	.word	0x10624dd3

080035c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	461a      	mov	r2, r3
 80035cc:	460b      	mov	r3, r1
 80035ce:	817b      	strh	r3, [r7, #10]
 80035d0:	4613      	mov	r3, r2
 80035d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035d4:	f7ff faa4 	bl	8002b20 <HAL_GetTick>
 80035d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	f040 80e0 	bne.w	80037a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	2319      	movs	r3, #25
 80035ee:	2201      	movs	r2, #1
 80035f0:	4970      	ldr	r1, [pc, #448]	@ (80037b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f964 	bl	80038c0 <I2C_WaitOnFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035fe:	2302      	movs	r3, #2
 8003600:	e0d3      	b.n	80037aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_I2C_Master_Transmit+0x50>
 800360c:	2302      	movs	r3, #2
 800360e:	e0cc      	b.n	80037aa <HAL_I2C_Master_Transmit+0x1ea>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b01      	cmp	r3, #1
 8003624:	d007      	beq.n	8003636 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0201 	orr.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003644:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2221      	movs	r2, #33	@ 0x21
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2210      	movs	r2, #16
 8003652:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	893a      	ldrh	r2, [r7, #8]
 8003666:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4a50      	ldr	r2, [pc, #320]	@ (80037b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003676:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003678:	8979      	ldrh	r1, [r7, #10]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	6a3a      	ldr	r2, [r7, #32]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f89c 	bl	80037bc <I2C_MasterRequestWrite>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e08d      	b.n	80037aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036a4:	e066      	b.n	8003774 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	6a39      	ldr	r1, [r7, #32]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fa22 	bl	8003af4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00d      	beq.n	80036d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d107      	bne.n	80036ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e06b      	b.n	80037aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	781a      	ldrb	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b04      	cmp	r3, #4
 800370e:	d11b      	bne.n	8003748 <HAL_I2C_Master_Transmit+0x188>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003714:	2b00      	cmp	r3, #0
 8003716:	d017      	beq.n	8003748 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	6a39      	ldr	r1, [r7, #32]
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fa19 	bl	8003b84 <I2C_WaitOnBTFFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00d      	beq.n	8003774 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	2b04      	cmp	r3, #4
 800375e:	d107      	bne.n	8003770 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800376e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e01a      	b.n	80037aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d194      	bne.n	80036a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800378a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	e000      	b.n	80037aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037a8:	2302      	movs	r3, #2
  }
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	00100002 	.word	0x00100002
 80037b8:	ffff0000 	.word	0xffff0000

080037bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	460b      	mov	r3, r1
 80037ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d006      	beq.n	80037e6 <I2C_MasterRequestWrite+0x2a>
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d003      	beq.n	80037e6 <I2C_MasterRequestWrite+0x2a>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037e4:	d108      	bne.n	80037f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e00b      	b.n	8003810 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fc:	2b12      	cmp	r3, #18
 80037fe:	d107      	bne.n	8003810 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800380e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f84f 	bl	80038c0 <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00d      	beq.n	8003844 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003836:	d103      	bne.n	8003840 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800383e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e035      	b.n	80038b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800384c:	d108      	bne.n	8003860 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800384e:	897b      	ldrh	r3, [r7, #10]
 8003850:	b2db      	uxtb	r3, r3
 8003852:	461a      	mov	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800385c:	611a      	str	r2, [r3, #16]
 800385e:	e01b      	b.n	8003898 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003860:	897b      	ldrh	r3, [r7, #10]
 8003862:	11db      	asrs	r3, r3, #7
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f003 0306 	and.w	r3, r3, #6
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f063 030f 	orn	r3, r3, #15
 8003870:	b2da      	uxtb	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	490e      	ldr	r1, [pc, #56]	@ (80038b8 <I2C_MasterRequestWrite+0xfc>)
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f898 	bl	80039b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e010      	b.n	80038b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800388e:	897b      	ldrh	r3, [r7, #10]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	4907      	ldr	r1, [pc, #28]	@ (80038bc <I2C_MasterRequestWrite+0x100>)
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f888 	bl	80039b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	00010008 	.word	0x00010008
 80038bc:	00010002 	.word	0x00010002

080038c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	4613      	mov	r3, r2
 80038ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038d0:	e048      	b.n	8003964 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d044      	beq.n	8003964 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038da:	f7ff f921 	bl	8002b20 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d302      	bcc.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d139      	bne.n	8003964 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	0c1b      	lsrs	r3, r3, #16
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d10d      	bne.n	8003916 <I2C_WaitOnFlagUntilTimeout+0x56>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	43da      	mvns	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4013      	ands	r3, r2
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf0c      	ite	eq
 800390c:	2301      	moveq	r3, #1
 800390e:	2300      	movne	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	e00c      	b.n	8003930 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	43da      	mvns	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	4013      	ands	r3, r2
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	429a      	cmp	r2, r3
 8003934:	d116      	bne.n	8003964 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e023      	b.n	80039ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	0c1b      	lsrs	r3, r3, #16
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b01      	cmp	r3, #1
 800396c:	d10d      	bne.n	800398a <I2C_WaitOnFlagUntilTimeout+0xca>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	43da      	mvns	r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	4013      	ands	r3, r2
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	e00c      	b.n	80039a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	43da      	mvns	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4013      	ands	r3, r2
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d093      	beq.n	80038d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039c2:	e071      	b.n	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d2:	d123      	bne.n	8003a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	f043 0204 	orr.w	r2, r3, #4
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e067      	b.n	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d041      	beq.n	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a24:	f7ff f87c 	bl	8002b20 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d302      	bcc.n	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d136      	bne.n	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	0c1b      	lsrs	r3, r3, #16
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d10c      	bne.n	8003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bf14      	ite	ne
 8003a56:	2301      	movne	r3, #1
 8003a58:	2300      	moveq	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	e00b      	b.n	8003a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	43da      	mvns	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d016      	beq.n	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e021      	b.n	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	0c1b      	lsrs	r3, r3, #16
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d10c      	bne.n	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	43da      	mvns	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	4013      	ands	r3, r2
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf14      	ite	ne
 8003ac4:	2301      	movne	r3, #1
 8003ac6:	2300      	moveq	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	e00b      	b.n	8003ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bf14      	ite	ne
 8003ade:	2301      	movne	r3, #1
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f47f af6d 	bne.w	80039c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b00:	e034      	b.n	8003b6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f886 	bl	8003c14 <I2C_IsAcknowledgeFailed>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e034      	b.n	8003b7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d028      	beq.n	8003b6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1a:	f7ff f801 	bl	8002b20 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d302      	bcc.n	8003b30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d11d      	bne.n	8003b6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3a:	2b80      	cmp	r3, #128	@ 0x80
 8003b3c:	d016      	beq.n	8003b6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e007      	b.n	8003b7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b76:	2b80      	cmp	r3, #128	@ 0x80
 8003b78:	d1c3      	bne.n	8003b02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b90:	e034      	b.n	8003bfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f83e 	bl	8003c14 <I2C_IsAcknowledgeFailed>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e034      	b.n	8003c0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d028      	beq.n	8003bfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003baa:	f7fe ffb9 	bl	8002b20 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d302      	bcc.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d11d      	bne.n	8003bfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d016      	beq.n	8003bfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	f043 0220 	orr.w	r2, r3, #32
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e007      	b.n	8003c0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d1c3      	bne.n	8003b92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c2a:	d11b      	bne.n	8003c64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c50:	f043 0204 	orr.w	r2, r3, #4
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e267      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d075      	beq.n	8003d7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c92:	4b88      	ldr	r3, [pc, #544]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d00c      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c9e:	4b85      	ldr	r3, [pc, #532]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d112      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003caa:	4b82      	ldr	r3, [pc, #520]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	4b7e      	ldr	r3, [pc, #504]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d05b      	beq.n	8003d7c <HAL_RCC_OscConfig+0x108>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d157      	bne.n	8003d7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e242      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd8:	d106      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x74>
 8003cda:	4b76      	ldr	r3, [pc, #472]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a75      	ldr	r2, [pc, #468]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	e01d      	b.n	8003d24 <HAL_RCC_OscConfig+0xb0>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x98>
 8003cf2:	4b70      	ldr	r3, [pc, #448]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a6f      	ldr	r2, [pc, #444]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a6c      	ldr	r2, [pc, #432]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	e00b      	b.n	8003d24 <HAL_RCC_OscConfig+0xb0>
 8003d0c:	4b69      	ldr	r3, [pc, #420]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a68      	ldr	r2, [pc, #416]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	4b66      	ldr	r3, [pc, #408]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a65      	ldr	r2, [pc, #404]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d013      	beq.n	8003d54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fe fef8 	bl	8002b20 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d34:	f7fe fef4 	bl	8002b20 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	@ 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e207      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	4b5b      	ldr	r3, [pc, #364]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0xc0>
 8003d52:	e014      	b.n	8003d7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7fe fee4 	bl	8002b20 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7fe fee0 	bl	8002b20 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	@ 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e1f3      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6e:	4b51      	ldr	r3, [pc, #324]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0xe8>
 8003d7a:	e000      	b.n	8003d7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d063      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d96:	4b47      	ldr	r3, [pc, #284]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d11c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da2:	4b44      	ldr	r3, [pc, #272]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d116      	bne.n	8003ddc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dae:	4b41      	ldr	r3, [pc, #260]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x152>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d001      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e1c7      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4937      	ldr	r1, [pc, #220]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dda:	e03a      	b.n	8003e52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d020      	beq.n	8003e26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003de4:	4b34      	ldr	r3, [pc, #208]	@ (8003eb8 <HAL_RCC_OscConfig+0x244>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7fe fe99 	bl	8002b20 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df2:	f7fe fe95 	bl	8002b20 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e1a8      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e04:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e10:	4b28      	ldr	r3, [pc, #160]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4925      	ldr	r1, [pc, #148]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]
 8003e24:	e015      	b.n	8003e52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e26:	4b24      	ldr	r3, [pc, #144]	@ (8003eb8 <HAL_RCC_OscConfig+0x244>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fe fe78 	bl	8002b20 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e34:	f7fe fe74 	bl	8002b20 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e187      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e46:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d036      	beq.n	8003ecc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d016      	beq.n	8003e94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e66:	4b15      	ldr	r3, [pc, #84]	@ (8003ebc <HAL_RCC_OscConfig+0x248>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6c:	f7fe fe58 	bl	8002b20 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e74:	f7fe fe54 	bl	8002b20 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e167      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e86:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x200>
 8003e92:	e01b      	b.n	8003ecc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e94:	4b09      	ldr	r3, [pc, #36]	@ (8003ebc <HAL_RCC_OscConfig+0x248>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9a:	f7fe fe41 	bl	8002b20 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea0:	e00e      	b.n	8003ec0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ea2:	f7fe fe3d 	bl	8002b20 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d907      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e150      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	42470000 	.word	0x42470000
 8003ebc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec0:	4b88      	ldr	r3, [pc, #544]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1ea      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8097 	beq.w	8004008 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eda:	2300      	movs	r3, #0
 8003edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ede:	4b81      	ldr	r3, [pc, #516]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10f      	bne.n	8003f0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	4b7d      	ldr	r3, [pc, #500]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	4a7c      	ldr	r2, [pc, #496]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003efa:	4b7a      	ldr	r3, [pc, #488]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f06:	2301      	movs	r3, #1
 8003f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0a:	4b77      	ldr	r3, [pc, #476]	@ (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d118      	bne.n	8003f48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f16:	4b74      	ldr	r3, [pc, #464]	@ (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a73      	ldr	r2, [pc, #460]	@ (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f22:	f7fe fdfd 	bl	8002b20 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2a:	f7fe fdf9 	bl	8002b20 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e10c      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3c:	4b6a      	ldr	r3, [pc, #424]	@ (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f0      	beq.n	8003f2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCC_OscConfig+0x2ea>
 8003f50:	4b64      	ldr	r3, [pc, #400]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f54:	4a63      	ldr	r2, [pc, #396]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f5c:	e01c      	b.n	8003f98 <HAL_RCC_OscConfig+0x324>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b05      	cmp	r3, #5
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x30c>
 8003f66:	4b5f      	ldr	r3, [pc, #380]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6a:	4a5e      	ldr	r2, [pc, #376]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	f043 0304 	orr.w	r3, r3, #4
 8003f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f72:	4b5c      	ldr	r3, [pc, #368]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f76:	4a5b      	ldr	r2, [pc, #364]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f7e:	e00b      	b.n	8003f98 <HAL_RCC_OscConfig+0x324>
 8003f80:	4b58      	ldr	r3, [pc, #352]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f84:	4a57      	ldr	r2, [pc, #348]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f8c:	4b55      	ldr	r3, [pc, #340]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f90:	4a54      	ldr	r2, [pc, #336]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f92:	f023 0304 	bic.w	r3, r3, #4
 8003f96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d015      	beq.n	8003fcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa0:	f7fe fdbe 	bl	8002b20 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa8:	f7fe fdba 	bl	8002b20 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e0cb      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbe:	4b49      	ldr	r3, [pc, #292]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0ee      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x334>
 8003fca:	e014      	b.n	8003ff6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fcc:	f7fe fda8 	bl	8002b20 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd4:	f7fe fda4 	bl	8002b20 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e0b5      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fea:	4b3e      	ldr	r3, [pc, #248]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1ee      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d105      	bne.n	8004008 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffc:	4b39      	ldr	r3, [pc, #228]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	4a38      	ldr	r2, [pc, #224]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004002:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004006:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80a1 	beq.w	8004154 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004012:	4b34      	ldr	r3, [pc, #208]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b08      	cmp	r3, #8
 800401c:	d05c      	beq.n	80040d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d141      	bne.n	80040aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004026:	4b31      	ldr	r3, [pc, #196]	@ (80040ec <HAL_RCC_OscConfig+0x478>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fe fd78 	bl	8002b20 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fe fd74 	bl	8002b20 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e087      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004046:	4b27      	ldr	r3, [pc, #156]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69da      	ldr	r2, [r3, #28]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	019b      	lsls	r3, r3, #6
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	085b      	lsrs	r3, r3, #1
 800406a:	3b01      	subs	r3, #1
 800406c:	041b      	lsls	r3, r3, #16
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	061b      	lsls	r3, r3, #24
 8004076:	491b      	ldr	r1, [pc, #108]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800407c:	4b1b      	ldr	r3, [pc, #108]	@ (80040ec <HAL_RCC_OscConfig+0x478>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004082:	f7fe fd4d 	bl	8002b20 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408a:	f7fe fd49 	bl	8002b20 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e05c      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409c:	4b11      	ldr	r3, [pc, #68]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x416>
 80040a8:	e054      	b.n	8004154 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040aa:	4b10      	ldr	r3, [pc, #64]	@ (80040ec <HAL_RCC_OscConfig+0x478>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fe fd36 	bl	8002b20 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fe fd32 	bl	8002b20 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e045      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ca:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x444>
 80040d6:	e03d      	b.n	8004154 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d107      	bne.n	80040f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e038      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40007000 	.word	0x40007000
 80040ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004160 <HAL_RCC_OscConfig+0x4ec>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d028      	beq.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d121      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d11a      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004120:	4013      	ands	r3, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004126:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004128:	4293      	cmp	r3, r2
 800412a:	d111      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004136:	085b      	lsrs	r3, r3, #1
 8004138:	3b01      	subs	r3, #1
 800413a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d107      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800

08004164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0cc      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004178:	4b68      	ldr	r3, [pc, #416]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d90c      	bls.n	80041a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004186:	4b65      	ldr	r3, [pc, #404]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b63      	ldr	r3, [pc, #396]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0b8      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d020      	beq.n	80041ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b8:	4b59      	ldr	r3, [pc, #356]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4a58      	ldr	r2, [pc, #352]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d0:	4b53      	ldr	r3, [pc, #332]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4a52      	ldr	r2, [pc, #328]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041dc:	4b50      	ldr	r3, [pc, #320]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	494d      	ldr	r1, [pc, #308]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d044      	beq.n	8004284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004202:	4b47      	ldr	r3, [pc, #284]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d119      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e07f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d003      	beq.n	8004222 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800421e:	2b03      	cmp	r3, #3
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	4b3f      	ldr	r3, [pc, #252]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e06f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	4b3b      	ldr	r3, [pc, #236]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e067      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004242:	4b37      	ldr	r3, [pc, #220]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4934      	ldr	r1, [pc, #208]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	4313      	orrs	r3, r2
 8004252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004254:	f7fe fc64 	bl	8002b20 <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	e00a      	b.n	8004272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425c:	f7fe fc60 	bl	8002b20 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e04f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	4b2b      	ldr	r3, [pc, #172]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 020c 	and.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	429a      	cmp	r2, r3
 8004282:	d1eb      	bne.n	800425c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004284:	4b25      	ldr	r3, [pc, #148]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d20c      	bcs.n	80042ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004292:	4b22      	ldr	r3, [pc, #136]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429a:	4b20      	ldr	r3, [pc, #128]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e032      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b8:	4b19      	ldr	r3, [pc, #100]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4916      	ldr	r1, [pc, #88]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d009      	beq.n	80042ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d6:	4b12      	ldr	r3, [pc, #72]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	490e      	ldr	r1, [pc, #56]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042ea:	f000 f821 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80042ee:	4602      	mov	r2, r0
 80042f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	091b      	lsrs	r3, r3, #4
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	490a      	ldr	r1, [pc, #40]	@ (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 80042fc:	5ccb      	ldrb	r3, [r1, r3]
 80042fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004302:	4a09      	ldr	r2, [pc, #36]	@ (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004306:	4b09      	ldr	r3, [pc, #36]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe fbc4 	bl	8002a98 <HAL_InitTick>

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023c00 	.word	0x40023c00
 8004320:	40023800 	.word	0x40023800
 8004324:	0800785c 	.word	0x0800785c
 8004328:	20000000 	.word	0x20000000
 800432c:	20000064 	.word	0x20000064

08004330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004334:	b094      	sub	sp, #80	@ 0x50
 8004336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004348:	4b79      	ldr	r3, [pc, #484]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b08      	cmp	r3, #8
 8004352:	d00d      	beq.n	8004370 <HAL_RCC_GetSysClockFreq+0x40>
 8004354:	2b08      	cmp	r3, #8
 8004356:	f200 80e1 	bhi.w	800451c <HAL_RCC_GetSysClockFreq+0x1ec>
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0x34>
 800435e:	2b04      	cmp	r3, #4
 8004360:	d003      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x3a>
 8004362:	e0db      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004364:	4b73      	ldr	r3, [pc, #460]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x204>)
 8004366:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004368:	e0db      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800436a:	4b73      	ldr	r3, [pc, #460]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x208>)
 800436c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800436e:	e0d8      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004370:	4b6f      	ldr	r3, [pc, #444]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004378:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800437a:	4b6d      	ldr	r3, [pc, #436]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d063      	beq.n	800444e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004386:	4b6a      	ldr	r3, [pc, #424]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	099b      	lsrs	r3, r3, #6
 800438c:	2200      	movs	r2, #0
 800438e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004390:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004398:	633b      	str	r3, [r7, #48]	@ 0x30
 800439a:	2300      	movs	r3, #0
 800439c:	637b      	str	r3, [r7, #52]	@ 0x34
 800439e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043a2:	4622      	mov	r2, r4
 80043a4:	462b      	mov	r3, r5
 80043a6:	f04f 0000 	mov.w	r0, #0
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	0159      	lsls	r1, r3, #5
 80043b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b4:	0150      	lsls	r0, r2, #5
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4621      	mov	r1, r4
 80043bc:	1a51      	subs	r1, r2, r1
 80043be:	6139      	str	r1, [r7, #16]
 80043c0:	4629      	mov	r1, r5
 80043c2:	eb63 0301 	sbc.w	r3, r3, r1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043d4:	4659      	mov	r1, fp
 80043d6:	018b      	lsls	r3, r1, #6
 80043d8:	4651      	mov	r1, sl
 80043da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043de:	4651      	mov	r1, sl
 80043e0:	018a      	lsls	r2, r1, #6
 80043e2:	4651      	mov	r1, sl
 80043e4:	ebb2 0801 	subs.w	r8, r2, r1
 80043e8:	4659      	mov	r1, fp
 80043ea:	eb63 0901 	sbc.w	r9, r3, r1
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004402:	4690      	mov	r8, r2
 8004404:	4699      	mov	r9, r3
 8004406:	4623      	mov	r3, r4
 8004408:	eb18 0303 	adds.w	r3, r8, r3
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	462b      	mov	r3, r5
 8004410:	eb49 0303 	adc.w	r3, r9, r3
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004422:	4629      	mov	r1, r5
 8004424:	024b      	lsls	r3, r1, #9
 8004426:	4621      	mov	r1, r4
 8004428:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800442c:	4621      	mov	r1, r4
 800442e:	024a      	lsls	r2, r1, #9
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004436:	2200      	movs	r2, #0
 8004438:	62bb      	str	r3, [r7, #40]	@ 0x28
 800443a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800443c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004440:	f7fb ff2e 	bl	80002a0 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4613      	mov	r3, r2
 800444a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800444c:	e058      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444e:	4b38      	ldr	r3, [pc, #224]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	099b      	lsrs	r3, r3, #6
 8004454:	2200      	movs	r2, #0
 8004456:	4618      	mov	r0, r3
 8004458:	4611      	mov	r1, r2
 800445a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800445e:	623b      	str	r3, [r7, #32]
 8004460:	2300      	movs	r3, #0
 8004462:	627b      	str	r3, [r7, #36]	@ 0x24
 8004464:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004468:	4642      	mov	r2, r8
 800446a:	464b      	mov	r3, r9
 800446c:	f04f 0000 	mov.w	r0, #0
 8004470:	f04f 0100 	mov.w	r1, #0
 8004474:	0159      	lsls	r1, r3, #5
 8004476:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800447a:	0150      	lsls	r0, r2, #5
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4641      	mov	r1, r8
 8004482:	ebb2 0a01 	subs.w	sl, r2, r1
 8004486:	4649      	mov	r1, r9
 8004488:	eb63 0b01 	sbc.w	fp, r3, r1
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004498:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800449c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044a0:	ebb2 040a 	subs.w	r4, r2, sl
 80044a4:	eb63 050b 	sbc.w	r5, r3, fp
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	00eb      	lsls	r3, r5, #3
 80044b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044b6:	00e2      	lsls	r2, r4, #3
 80044b8:	4614      	mov	r4, r2
 80044ba:	461d      	mov	r5, r3
 80044bc:	4643      	mov	r3, r8
 80044be:	18e3      	adds	r3, r4, r3
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	464b      	mov	r3, r9
 80044c4:	eb45 0303 	adc.w	r3, r5, r3
 80044c8:	607b      	str	r3, [r7, #4]
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044d6:	4629      	mov	r1, r5
 80044d8:	028b      	lsls	r3, r1, #10
 80044da:	4621      	mov	r1, r4
 80044dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e0:	4621      	mov	r1, r4
 80044e2:	028a      	lsls	r2, r1, #10
 80044e4:	4610      	mov	r0, r2
 80044e6:	4619      	mov	r1, r3
 80044e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ea:	2200      	movs	r2, #0
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	61fa      	str	r2, [r7, #28]
 80044f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f4:	f7fb fed4 	bl	80002a0 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004500:	4b0b      	ldr	r3, [pc, #44]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	3301      	adds	r3, #1
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004510:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800451a:	e002      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800451c:	4b05      	ldr	r3, [pc, #20]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x204>)
 800451e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004524:	4618      	mov	r0, r3
 8004526:	3750      	adds	r7, #80	@ 0x50
 8004528:	46bd      	mov	sp, r7
 800452a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800
 8004534:	00f42400 	.word	0x00f42400
 8004538:	007a1200 	.word	0x007a1200

0800453c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004540:	4b03      	ldr	r3, [pc, #12]	@ (8004550 <HAL_RCC_GetHCLKFreq+0x14>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000000 	.word	0x20000000

08004554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004558:	f7ff fff0 	bl	800453c <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	0a9b      	lsrs	r3, r3, #10
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4903      	ldr	r1, [pc, #12]	@ (8004578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40023800 	.word	0x40023800
 8004578:	0800786c 	.word	0x0800786c

0800457c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004580:	f7ff ffdc 	bl	800453c <HAL_RCC_GetHCLKFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b05      	ldr	r3, [pc, #20]	@ (800459c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	0b5b      	lsrs	r3, r3, #13
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	4903      	ldr	r1, [pc, #12]	@ (80045a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004598:	4618      	mov	r0, r3
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40023800 	.word	0x40023800
 80045a0:	0800786c 	.word	0x0800786c

080045a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e041      	b.n	800463a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fc fcfa 	bl	8000fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f000 fc04 	bl	8004df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b01      	cmp	r3, #1
 8004656:	d001      	beq.n	800465c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e03c      	b.n	80046d6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1e      	ldr	r2, [pc, #120]	@ (80046e4 <HAL_TIM_Base_Start+0xa0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d018      	beq.n	80046a0 <HAL_TIM_Base_Start+0x5c>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004676:	d013      	beq.n	80046a0 <HAL_TIM_Base_Start+0x5c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1a      	ldr	r2, [pc, #104]	@ (80046e8 <HAL_TIM_Base_Start+0xa4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00e      	beq.n	80046a0 <HAL_TIM_Base_Start+0x5c>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a19      	ldr	r2, [pc, #100]	@ (80046ec <HAL_TIM_Base_Start+0xa8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d009      	beq.n	80046a0 <HAL_TIM_Base_Start+0x5c>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a17      	ldr	r2, [pc, #92]	@ (80046f0 <HAL_TIM_Base_Start+0xac>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <HAL_TIM_Base_Start+0x5c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a16      	ldr	r2, [pc, #88]	@ (80046f4 <HAL_TIM_Base_Start+0xb0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d111      	bne.n	80046c4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d010      	beq.n	80046d4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0201 	orr.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c2:	e007      	b.n	80046d4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	40014000 	.word	0x40014000

080046f8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6a1a      	ldr	r2, [r3, #32]
 8004706:	f241 1311 	movw	r3, #4369	@ 0x1111
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10f      	bne.n	8004730 <HAL_TIM_Base_Stop+0x38>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6a1a      	ldr	r2, [r3, #32]
 8004716:	f240 4344 	movw	r3, #1092	@ 0x444
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d107      	bne.n	8004730 <HAL_TIM_Base_Stop+0x38>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d001      	beq.n	8004760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e044      	b.n	80047ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1e      	ldr	r2, [pc, #120]	@ (80047f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d018      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x6c>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800478a:	d013      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x6c>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1a      	ldr	r2, [pc, #104]	@ (80047fc <HAL_TIM_Base_Start_IT+0xb4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00e      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x6c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a19      	ldr	r2, [pc, #100]	@ (8004800 <HAL_TIM_Base_Start_IT+0xb8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d009      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x6c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a17      	ldr	r2, [pc, #92]	@ (8004804 <HAL_TIM_Base_Start_IT+0xbc>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d004      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x6c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a16      	ldr	r2, [pc, #88]	@ (8004808 <HAL_TIM_Base_Start_IT+0xc0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d111      	bne.n	80047d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b06      	cmp	r3, #6
 80047c4:	d010      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0201 	orr.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d6:	e007      	b.n	80047e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40014000 	.word	0x40014000

0800480c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e041      	b.n	80048a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fc fba4 	bl	8000f80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4610      	mov	r0, r2
 800484c:	f000 fad0 	bl	8004df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d020      	beq.n	800490e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01b      	beq.n	800490e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f06f 0202 	mvn.w	r2, #2
 80048de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fa5c 	bl	8004db2 <HAL_TIM_IC_CaptureCallback>
 80048fa:	e005      	b.n	8004908 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fa4e 	bl	8004d9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fa5f 	bl	8004dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d020      	beq.n	800495a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	d01b      	beq.n	800495a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f06f 0204 	mvn.w	r2, #4
 800492a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fa36 	bl	8004db2 <HAL_TIM_IC_CaptureCallback>
 8004946:	e005      	b.n	8004954 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fa28 	bl	8004d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fa39 	bl	8004dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01b      	beq.n	80049a6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f06f 0208 	mvn.w	r2, #8
 8004976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2204      	movs	r2, #4
 800497c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fa10 	bl	8004db2 <HAL_TIM_IC_CaptureCallback>
 8004992:	e005      	b.n	80049a0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fa02 	bl	8004d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fa13 	bl	8004dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d020      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01b      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f06f 0210 	mvn.w	r2, #16
 80049c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2208      	movs	r2, #8
 80049c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f9ea 	bl	8004db2 <HAL_TIM_IC_CaptureCallback>
 80049de:	e005      	b.n	80049ec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f9dc 	bl	8004d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f9ed 	bl	8004dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00c      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f06f 0201 	mvn.w	r2, #1
 8004a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7fd f8c5 	bl	8001ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00c      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fd51 	bl	80054dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00c      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f9be 	bl	8004dda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00c      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d007      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f06f 0220 	mvn.w	r2, #32
 8004a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fd23 	bl	80054c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a82:	bf00      	nop
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e0ae      	b.n	8004c08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b0c      	cmp	r3, #12
 8004ab6:	f200 809f 	bhi.w	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004aba:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac0:	08004af5 	.word	0x08004af5
 8004ac4:	08004bf9 	.word	0x08004bf9
 8004ac8:	08004bf9 	.word	0x08004bf9
 8004acc:	08004bf9 	.word	0x08004bf9
 8004ad0:	08004b35 	.word	0x08004b35
 8004ad4:	08004bf9 	.word	0x08004bf9
 8004ad8:	08004bf9 	.word	0x08004bf9
 8004adc:	08004bf9 	.word	0x08004bf9
 8004ae0:	08004b77 	.word	0x08004b77
 8004ae4:	08004bf9 	.word	0x08004bf9
 8004ae8:	08004bf9 	.word	0x08004bf9
 8004aec:	08004bf9 	.word	0x08004bf9
 8004af0:	08004bb7 	.word	0x08004bb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 f9fe 	bl	8004efc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0208 	orr.w	r2, r2, #8
 8004b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0204 	bic.w	r2, r2, #4
 8004b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6999      	ldr	r1, [r3, #24]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	619a      	str	r2, [r3, #24]
      break;
 8004b32:	e064      	b.n	8004bfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fa44 	bl	8004fc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6999      	ldr	r1, [r3, #24]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	021a      	lsls	r2, r3, #8
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	619a      	str	r2, [r3, #24]
      break;
 8004b74:	e043      	b.n	8004bfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fa8f 	bl	80050a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0208 	orr.w	r2, r2, #8
 8004b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0204 	bic.w	r2, r2, #4
 8004ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69d9      	ldr	r1, [r3, #28]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	61da      	str	r2, [r3, #28]
      break;
 8004bb4:	e023      	b.n	8004bfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fad9 	bl	8005174 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69d9      	ldr	r1, [r3, #28]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	021a      	lsls	r2, r3, #8
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	61da      	str	r2, [r3, #28]
      break;
 8004bf6:	e002      	b.n	8004bfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8004bfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_TIM_ConfigClockSource+0x1c>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e0b4      	b.n	8004d96 <HAL_TIM_ConfigClockSource+0x186>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c64:	d03e      	beq.n	8004ce4 <HAL_TIM_ConfigClockSource+0xd4>
 8004c66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c6a:	f200 8087 	bhi.w	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c72:	f000 8086 	beq.w	8004d82 <HAL_TIM_ConfigClockSource+0x172>
 8004c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7a:	d87f      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b70      	cmp	r3, #112	@ 0x70
 8004c7e:	d01a      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0xa6>
 8004c80:	2b70      	cmp	r3, #112	@ 0x70
 8004c82:	d87b      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b60      	cmp	r3, #96	@ 0x60
 8004c86:	d050      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x11a>
 8004c88:	2b60      	cmp	r3, #96	@ 0x60
 8004c8a:	d877      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004c8c:	2b50      	cmp	r3, #80	@ 0x50
 8004c8e:	d03c      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0xfa>
 8004c90:	2b50      	cmp	r3, #80	@ 0x50
 8004c92:	d873      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b40      	cmp	r3, #64	@ 0x40
 8004c96:	d058      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x13a>
 8004c98:	2b40      	cmp	r3, #64	@ 0x40
 8004c9a:	d86f      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b30      	cmp	r3, #48	@ 0x30
 8004c9e:	d064      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ca0:	2b30      	cmp	r3, #48	@ 0x30
 8004ca2:	d86b      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d060      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d867      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d05c      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x15a>
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d05a      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x15a>
 8004cb4:	e062      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cc6:	f000 fb1f 	bl	8005308 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	609a      	str	r2, [r3, #8]
      break;
 8004ce2:	e04f      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cf4:	f000 fb08 	bl	8005308 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d06:	609a      	str	r2, [r3, #8]
      break;
 8004d08:	e03c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d16:	461a      	mov	r2, r3
 8004d18:	f000 fa7c 	bl	8005214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2150      	movs	r1, #80	@ 0x50
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fad5 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 8004d28:	e02c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d36:	461a      	mov	r2, r3
 8004d38:	f000 fa9b 	bl	8005272 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2160      	movs	r1, #96	@ 0x60
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fac5 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 8004d48:	e01c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d56:	461a      	mov	r2, r3
 8004d58:	f000 fa5c 	bl	8005214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2140      	movs	r1, #64	@ 0x40
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fab5 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 8004d68:	e00c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f000 faac 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 8004d7a:	e003      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d80:	e000      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a37      	ldr	r2, [pc, #220]	@ (8004ee0 <TIM_Base_SetConfig+0xf0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00f      	beq.n	8004e28 <TIM_Base_SetConfig+0x38>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e0e:	d00b      	beq.n	8004e28 <TIM_Base_SetConfig+0x38>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a34      	ldr	r2, [pc, #208]	@ (8004ee4 <TIM_Base_SetConfig+0xf4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d007      	beq.n	8004e28 <TIM_Base_SetConfig+0x38>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a33      	ldr	r2, [pc, #204]	@ (8004ee8 <TIM_Base_SetConfig+0xf8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d003      	beq.n	8004e28 <TIM_Base_SetConfig+0x38>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a32      	ldr	r2, [pc, #200]	@ (8004eec <TIM_Base_SetConfig+0xfc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d108      	bne.n	8004e3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a28      	ldr	r2, [pc, #160]	@ (8004ee0 <TIM_Base_SetConfig+0xf0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01b      	beq.n	8004e7a <TIM_Base_SetConfig+0x8a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e48:	d017      	beq.n	8004e7a <TIM_Base_SetConfig+0x8a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a25      	ldr	r2, [pc, #148]	@ (8004ee4 <TIM_Base_SetConfig+0xf4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <TIM_Base_SetConfig+0x8a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a24      	ldr	r2, [pc, #144]	@ (8004ee8 <TIM_Base_SetConfig+0xf8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00f      	beq.n	8004e7a <TIM_Base_SetConfig+0x8a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a23      	ldr	r2, [pc, #140]	@ (8004eec <TIM_Base_SetConfig+0xfc>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00b      	beq.n	8004e7a <TIM_Base_SetConfig+0x8a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a22      	ldr	r2, [pc, #136]	@ (8004ef0 <TIM_Base_SetConfig+0x100>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d007      	beq.n	8004e7a <TIM_Base_SetConfig+0x8a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a21      	ldr	r2, [pc, #132]	@ (8004ef4 <TIM_Base_SetConfig+0x104>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d003      	beq.n	8004e7a <TIM_Base_SetConfig+0x8a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a20      	ldr	r2, [pc, #128]	@ (8004ef8 <TIM_Base_SetConfig+0x108>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d108      	bne.n	8004e8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a0c      	ldr	r2, [pc, #48]	@ (8004ee0 <TIM_Base_SetConfig+0xf0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d103      	bne.n	8004eba <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f043 0204 	orr.w	r2, r3, #4
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	601a      	str	r2, [r3, #0]
}
 8004ed2:	bf00      	nop
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40010000 	.word	0x40010000
 8004ee4:	40000400 	.word	0x40000400
 8004ee8:	40000800 	.word	0x40000800
 8004eec:	40000c00 	.word	0x40000c00
 8004ef0:	40014000 	.word	0x40014000
 8004ef4:	40014400 	.word	0x40014400
 8004ef8:	40014800 	.word	0x40014800

08004efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	f023 0201 	bic.w	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0303 	bic.w	r3, r3, #3
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 0302 	bic.w	r3, r3, #2
 8004f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc4 <TIM_OC1_SetConfig+0xc8>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d10c      	bne.n	8004f72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f023 0308 	bic.w	r3, r3, #8
 8004f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f023 0304 	bic.w	r3, r3, #4
 8004f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a13      	ldr	r2, [pc, #76]	@ (8004fc4 <TIM_OC1_SetConfig+0xc8>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d111      	bne.n	8004f9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	621a      	str	r2, [r3, #32]
}
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	40010000 	.word	0x40010000

08004fc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f023 0210 	bic.w	r2, r3, #16
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f023 0320 	bic.w	r3, r3, #32
 8005012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a1e      	ldr	r2, [pc, #120]	@ (800509c <TIM_OC2_SetConfig+0xd4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d10d      	bne.n	8005044 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800502e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005042:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a15      	ldr	r2, [pc, #84]	@ (800509c <TIM_OC2_SetConfig+0xd4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d113      	bne.n	8005074 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800505a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000

080050a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0303 	bic.w	r3, r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005170 <TIM_OC3_SetConfig+0xd0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d10d      	bne.n	800511a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a14      	ldr	r2, [pc, #80]	@ (8005170 <TIM_OC3_SetConfig+0xd0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d113      	bne.n	800514a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	621a      	str	r2, [r3, #32]
}
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	40010000 	.word	0x40010000

08005174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	031b      	lsls	r3, r3, #12
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a10      	ldr	r2, [pc, #64]	@ (8005210 <TIM_OC4_SetConfig+0x9c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d109      	bne.n	80051e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	019b      	lsls	r3, r3, #6
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40010000 	.word	0x40010000

08005214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	f023 0201 	bic.w	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800523e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f023 030a 	bic.w	r3, r3, #10
 8005250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005272:	b480      	push	{r7}
 8005274:	b087      	sub	sp, #28
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f023 0210 	bic.w	r2, r3, #16
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800529c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	031b      	lsls	r3, r3, #12
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f043 0307 	orr.w	r3, r3, #7
 80052f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	609a      	str	r2, [r3, #8]
}
 80052fc:	bf00      	nop
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	021a      	lsls	r2, r3, #8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	431a      	orrs	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4313      	orrs	r3, r2
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	609a      	str	r2, [r3, #8]
}
 800533c:	bf00      	nop
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800535c:	2302      	movs	r3, #2
 800535e:	e050      	b.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1c      	ldr	r2, [pc, #112]	@ (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d018      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ac:	d013      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a18      	ldr	r2, [pc, #96]	@ (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00e      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a16      	ldr	r2, [pc, #88]	@ (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d009      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a15      	ldr	r2, [pc, #84]	@ (800541c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d004      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a13      	ldr	r2, [pc, #76]	@ (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d10c      	bne.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40010000 	.word	0x40010000
 8005414:	40000400 	.word	0x40000400
 8005418:	40000800 	.word	0x40000800
 800541c:	40000c00 	.word	0x40000c00
 8005420:	40014000 	.word	0x40014000

08005424 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800543c:	2302      	movs	r3, #2
 800543e:	e03d      	b.n	80054bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e042      	b.n	8005588 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fb fe48 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2224      	movs	r2, #36	@ 0x24
 8005520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fcef 	bl	8005f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695a      	ldr	r2, [r3, #20]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	4613      	mov	r3, r2
 800559c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	d112      	bne.n	80055d0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <HAL_UART_Receive_IT+0x26>
 80055b0:	88fb      	ldrh	r3, [r7, #6]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e00b      	b.n	80055d2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055c0:	88fb      	ldrh	r3, [r7, #6]
 80055c2:	461a      	mov	r2, r3
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 fad2 	bl	8005b70 <UART_Start_Receive_IT>
 80055cc:	4603      	mov	r3, r0
 80055ce:	e000      	b.n	80055d2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b0ba      	sub	sp, #232	@ 0xe8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005602:	2300      	movs	r3, #0
 8005604:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005608:	2300      	movs	r3, #0
 800560a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800560e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800561a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10f      	bne.n	8005642 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b00      	cmp	r3, #0
 800562c:	d009      	beq.n	8005642 <HAL_UART_IRQHandler+0x66>
 800562e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fbae 	bl	8005d9c <UART_Receive_IT>
      return;
 8005640:	e273      	b.n	8005b2a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005642:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80de 	beq.w	8005808 <HAL_UART_IRQHandler+0x22c>
 800564c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d106      	bne.n	8005666 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800565c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80d1 	beq.w	8005808 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <HAL_UART_IRQHandler+0xae>
 8005672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800567a:	2b00      	cmp	r3, #0
 800567c:	d005      	beq.n	800568a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005682:	f043 0201 	orr.w	r2, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <HAL_UART_IRQHandler+0xd2>
 8005696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a6:	f043 0202 	orr.w	r2, r3, #2
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00b      	beq.n	80056d2 <HAL_UART_IRQHandler+0xf6>
 80056ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ca:	f043 0204 	orr.w	r2, r3, #4
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d011      	beq.n	8005702 <HAL_UART_IRQHandler+0x126>
 80056de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d105      	bne.n	80056f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fa:	f043 0208 	orr.w	r2, r3, #8
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 820a 	beq.w	8005b20 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800570c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d008      	beq.n	800572a <HAL_UART_IRQHandler+0x14e>
 8005718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fb39 	bl	8005d9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005734:	2b40      	cmp	r3, #64	@ 0x40
 8005736:	bf0c      	ite	eq
 8005738:	2301      	moveq	r3, #1
 800573a:	2300      	movne	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <HAL_UART_IRQHandler+0x17a>
 800574e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005752:	2b00      	cmp	r3, #0
 8005754:	d04f      	beq.n	80057f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fa44 	bl	8005be4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005766:	2b40      	cmp	r3, #64	@ 0x40
 8005768:	d141      	bne.n	80057ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3314      	adds	r3, #20
 8005770:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005780:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005788:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3314      	adds	r3, #20
 8005792:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005796:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800579a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80057a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1d9      	bne.n	800576a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d013      	beq.n	80057e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c2:	4a8a      	ldr	r2, [pc, #552]	@ (80059ec <HAL_UART_IRQHandler+0x410>)
 80057c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fd fbb7 	bl	8002f3e <HAL_DMA_Abort_IT>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d016      	beq.n	8005804 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057e0:	4610      	mov	r0, r2
 80057e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e4:	e00e      	b.n	8005804 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f9ac 	bl	8005b44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ec:	e00a      	b.n	8005804 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f9a8 	bl	8005b44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f4:	e006      	b.n	8005804 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f9a4 	bl	8005b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005802:	e18d      	b.n	8005b20 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005804:	bf00      	nop
    return;
 8005806:	e18b      	b.n	8005b20 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580c:	2b01      	cmp	r3, #1
 800580e:	f040 8167 	bne.w	8005ae0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005816:	f003 0310 	and.w	r3, r3, #16
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 8160 	beq.w	8005ae0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005824:	f003 0310 	and.w	r3, r3, #16
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8159 	beq.w	8005ae0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800582e:	2300      	movs	r3, #0
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60bb      	str	r3, [r7, #8]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800584e:	2b40      	cmp	r3, #64	@ 0x40
 8005850:	f040 80ce 	bne.w	80059f0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005860:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 80a9 	beq.w	80059bc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800586e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005872:	429a      	cmp	r2, r3
 8005874:	f080 80a2 	bcs.w	80059bc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800587e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800588a:	f000 8088 	beq.w	800599e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	330c      	adds	r3, #12
 8005894:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80058a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80058ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1d9      	bne.n	800588e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3314      	adds	r3, #20
 80058e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058ec:	f023 0301 	bic.w	r3, r3, #1
 80058f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3314      	adds	r3, #20
 80058fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005902:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005904:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005906:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e1      	bne.n	80058da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3314      	adds	r3, #20
 800591c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005928:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800592c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3314      	adds	r3, #20
 8005936:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800593a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800593c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005940:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005948:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e3      	bne.n	8005916 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800596c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800596e:	f023 0310 	bic.w	r3, r3, #16
 8005972:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	330c      	adds	r3, #12
 800597c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005980:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005982:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005986:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800598e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e3      	bne.n	800595c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005998:	4618      	mov	r0, r3
 800599a:	f7fd fa60 	bl	8002e5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f8cf 	bl	8005b58 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80059ba:	e0b3      	b.n	8005b24 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059c4:	429a      	cmp	r2, r3
 80059c6:	f040 80ad 	bne.w	8005b24 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059d4:	f040 80a6 	bne.w	8005b24 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059e2:	4619      	mov	r1, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f8b7 	bl	8005b58 <HAL_UARTEx_RxEventCallback>
      return;
 80059ea:	e09b      	b.n	8005b24 <HAL_UART_IRQHandler+0x548>
 80059ec:	08005cab 	.word	0x08005cab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 808e 	beq.w	8005b28 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005a0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 8089 	beq.w	8005b28 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	330c      	adds	r3, #12
 8005a36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e3      	bne.n	8005a16 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3314      	adds	r3, #20
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	e853 3f00 	ldrex	r3, [r3]
 8005a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	f023 0301 	bic.w	r3, r3, #1
 8005a64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3314      	adds	r3, #20
 8005a6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a72:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e3      	bne.n	8005a4e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	e853 3f00 	ldrex	r3, [r3]
 8005aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0310 	bic.w	r3, r3, #16
 8005aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	330c      	adds	r3, #12
 8005ab4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ab8:	61fa      	str	r2, [r7, #28]
 8005aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	69b9      	ldr	r1, [r7, #24]
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e3      	bne.n	8005a94 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ad2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f83d 	bl	8005b58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ade:	e023      	b.n	8005b28 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d009      	beq.n	8005b00 <HAL_UART_IRQHandler+0x524>
 8005aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f8e7 	bl	8005ccc <UART_Transmit_IT>
    return;
 8005afe:	e014      	b.n	8005b2a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00e      	beq.n	8005b2a <HAL_UART_IRQHandler+0x54e>
 8005b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f927 	bl	8005d6c <UART_EndTransmit_IT>
    return;
 8005b1e:	e004      	b.n	8005b2a <HAL_UART_IRQHandler+0x54e>
    return;
 8005b20:	bf00      	nop
 8005b22:	e002      	b.n	8005b2a <HAL_UART_IRQHandler+0x54e>
      return;
 8005b24:	bf00      	nop
 8005b26:	e000      	b.n	8005b2a <HAL_UART_IRQHandler+0x54e>
      return;
 8005b28:	bf00      	nop
  }
}
 8005b2a:	37e8      	adds	r7, #232	@ 0xe8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	88fa      	ldrh	r2, [r7, #6]
 8005b88:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	88fa      	ldrh	r2, [r7, #6]
 8005b8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2222      	movs	r2, #34	@ 0x22
 8005b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bb4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695a      	ldr	r2, [r3, #20]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0201 	orr.w	r2, r2, #1
 8005bc4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0220 	orr.w	r2, r2, #32
 8005bd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b095      	sub	sp, #84	@ 0x54
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	330c      	adds	r3, #12
 8005c0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e5      	bne.n	8005bec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3314      	adds	r3, #20
 8005c26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	e853 3f00 	ldrex	r3, [r3]
 8005c2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f023 0301 	bic.w	r3, r3, #1
 8005c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3314      	adds	r3, #20
 8005c3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c48:	e841 2300 	strex	r3, r2, [r1]
 8005c4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e5      	bne.n	8005c20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d119      	bne.n	8005c90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	330c      	adds	r3, #12
 8005c62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	e853 3f00 	ldrex	r3, [r3]
 8005c6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f023 0310 	bic.w	r3, r3, #16
 8005c72:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	330c      	adds	r3, #12
 8005c7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c7c:	61ba      	str	r2, [r7, #24]
 8005c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6979      	ldr	r1, [r7, #20]
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	613b      	str	r3, [r7, #16]
   return(result);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e5      	bne.n	8005c5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c9e:	bf00      	nop
 8005ca0:	3754      	adds	r7, #84	@ 0x54
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff ff40 	bl	8005b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b21      	cmp	r3, #33	@ 0x21
 8005cde:	d13e      	bne.n	8005d5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ce8:	d114      	bne.n	8005d14 <UART_Transmit_IT+0x48>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d110      	bne.n	8005d14 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	1c9a      	adds	r2, r3, #2
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	621a      	str	r2, [r3, #32]
 8005d12:	e008      	b.n	8005d26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	1c59      	adds	r1, r3, #1
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6211      	str	r1, [r2, #32]
 8005d1e:	781a      	ldrb	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	4619      	mov	r1, r3
 8005d34:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10f      	bne.n	8005d5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e000      	b.n	8005d60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d5e:	2302      	movs	r3, #2
  }
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7ff fecf 	bl	8005b30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08c      	sub	sp, #48	@ 0x30
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b22      	cmp	r3, #34	@ 0x22
 8005db6:	f040 80aa 	bne.w	8005f0e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dc2:	d115      	bne.n	8005df0 <UART_Receive_IT+0x54>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d111      	bne.n	8005df0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de8:	1c9a      	adds	r2, r3, #2
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	629a      	str	r2, [r3, #40]	@ 0x28
 8005dee:	e024      	b.n	8005e3a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dfe:	d007      	beq.n	8005e10 <UART_Receive_IT+0x74>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10a      	bne.n	8005e1e <UART_Receive_IT+0x82>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	e008      	b.n	8005e30 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	4619      	mov	r1, r3
 8005e48:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d15d      	bne.n	8005f0a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0220 	bic.w	r2, r2, #32
 8005e5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	695a      	ldr	r2, [r3, #20]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0201 	bic.w	r2, r2, #1
 8005e7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d135      	bne.n	8005f00 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	330c      	adds	r3, #12
 8005ea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f023 0310 	bic.w	r3, r3, #16
 8005eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	330c      	adds	r3, #12
 8005eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eba:	623a      	str	r2, [r7, #32]
 8005ebc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	69f9      	ldr	r1, [r7, #28]
 8005ec0:	6a3a      	ldr	r2, [r7, #32]
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e5      	bne.n	8005e9a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0310 	and.w	r3, r3, #16
 8005ed8:	2b10      	cmp	r3, #16
 8005eda:	d10a      	bne.n	8005ef2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff fe2d 	bl	8005b58 <HAL_UARTEx_RxEventCallback>
 8005efe:	e002      	b.n	8005f06 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7fb fe5f 	bl	8001bc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e002      	b.n	8005f10 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	e000      	b.n	8005f10 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f0e:	2302      	movs	r3, #2
  }
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3730      	adds	r7, #48	@ 0x30
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f1c:	b0c0      	sub	sp, #256	@ 0x100
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f34:	68d9      	ldr	r1, [r3, #12]
 8005f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	ea40 0301 	orr.w	r3, r0, r1
 8005f40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f70:	f021 010c 	bic.w	r1, r1, #12
 8005f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f7e:	430b      	orrs	r3, r1
 8005f80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f92:	6999      	ldr	r1, [r3, #24]
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	ea40 0301 	orr.w	r3, r0, r1
 8005f9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4b8f      	ldr	r3, [pc, #572]	@ (80061e4 <UART_SetConfig+0x2cc>)
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d005      	beq.n	8005fb8 <UART_SetConfig+0xa0>
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4b8d      	ldr	r3, [pc, #564]	@ (80061e8 <UART_SetConfig+0x2d0>)
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d104      	bne.n	8005fc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fb8:	f7fe fae0 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 8005fbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005fc0:	e003      	b.n	8005fca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fc2:	f7fe fac7 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8005fc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fd4:	f040 810c 	bne.w	80061f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fe2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005fe6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005fea:	4622      	mov	r2, r4
 8005fec:	462b      	mov	r3, r5
 8005fee:	1891      	adds	r1, r2, r2
 8005ff0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ff2:	415b      	adcs	r3, r3
 8005ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ff6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	eb12 0801 	adds.w	r8, r2, r1
 8006000:	4629      	mov	r1, r5
 8006002:	eb43 0901 	adc.w	r9, r3, r1
 8006006:	f04f 0200 	mov.w	r2, #0
 800600a:	f04f 0300 	mov.w	r3, #0
 800600e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800601a:	4690      	mov	r8, r2
 800601c:	4699      	mov	r9, r3
 800601e:	4623      	mov	r3, r4
 8006020:	eb18 0303 	adds.w	r3, r8, r3
 8006024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006028:	462b      	mov	r3, r5
 800602a:	eb49 0303 	adc.w	r3, r9, r3
 800602e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800603e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006042:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006046:	460b      	mov	r3, r1
 8006048:	18db      	adds	r3, r3, r3
 800604a:	653b      	str	r3, [r7, #80]	@ 0x50
 800604c:	4613      	mov	r3, r2
 800604e:	eb42 0303 	adc.w	r3, r2, r3
 8006052:	657b      	str	r3, [r7, #84]	@ 0x54
 8006054:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006058:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800605c:	f7fa f920 	bl	80002a0 <__aeabi_uldivmod>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4b61      	ldr	r3, [pc, #388]	@ (80061ec <UART_SetConfig+0x2d4>)
 8006066:	fba3 2302 	umull	r2, r3, r3, r2
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	011c      	lsls	r4, r3, #4
 800606e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006072:	2200      	movs	r2, #0
 8006074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006078:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800607c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006080:	4642      	mov	r2, r8
 8006082:	464b      	mov	r3, r9
 8006084:	1891      	adds	r1, r2, r2
 8006086:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006088:	415b      	adcs	r3, r3
 800608a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800608c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006090:	4641      	mov	r1, r8
 8006092:	eb12 0a01 	adds.w	sl, r2, r1
 8006096:	4649      	mov	r1, r9
 8006098:	eb43 0b01 	adc.w	fp, r3, r1
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	f04f 0300 	mov.w	r3, #0
 80060a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060b0:	4692      	mov	sl, r2
 80060b2:	469b      	mov	fp, r3
 80060b4:	4643      	mov	r3, r8
 80060b6:	eb1a 0303 	adds.w	r3, sl, r3
 80060ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060be:	464b      	mov	r3, r9
 80060c0:	eb4b 0303 	adc.w	r3, fp, r3
 80060c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80060d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80060dc:	460b      	mov	r3, r1
 80060de:	18db      	adds	r3, r3, r3
 80060e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80060e2:	4613      	mov	r3, r2
 80060e4:	eb42 0303 	adc.w	r3, r2, r3
 80060e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80060ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80060ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80060f2:	f7fa f8d5 	bl	80002a0 <__aeabi_uldivmod>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	4611      	mov	r1, r2
 80060fc:	4b3b      	ldr	r3, [pc, #236]	@ (80061ec <UART_SetConfig+0x2d4>)
 80060fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	2264      	movs	r2, #100	@ 0x64
 8006106:	fb02 f303 	mul.w	r3, r2, r3
 800610a:	1acb      	subs	r3, r1, r3
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006112:	4b36      	ldr	r3, [pc, #216]	@ (80061ec <UART_SetConfig+0x2d4>)
 8006114:	fba3 2302 	umull	r2, r3, r3, r2
 8006118:	095b      	lsrs	r3, r3, #5
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006120:	441c      	add	r4, r3
 8006122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006126:	2200      	movs	r2, #0
 8006128:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800612c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006130:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006134:	4642      	mov	r2, r8
 8006136:	464b      	mov	r3, r9
 8006138:	1891      	adds	r1, r2, r2
 800613a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800613c:	415b      	adcs	r3, r3
 800613e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006140:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006144:	4641      	mov	r1, r8
 8006146:	1851      	adds	r1, r2, r1
 8006148:	6339      	str	r1, [r7, #48]	@ 0x30
 800614a:	4649      	mov	r1, r9
 800614c:	414b      	adcs	r3, r1
 800614e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800615c:	4659      	mov	r1, fp
 800615e:	00cb      	lsls	r3, r1, #3
 8006160:	4651      	mov	r1, sl
 8006162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006166:	4651      	mov	r1, sl
 8006168:	00ca      	lsls	r2, r1, #3
 800616a:	4610      	mov	r0, r2
 800616c:	4619      	mov	r1, r3
 800616e:	4603      	mov	r3, r0
 8006170:	4642      	mov	r2, r8
 8006172:	189b      	adds	r3, r3, r2
 8006174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006178:	464b      	mov	r3, r9
 800617a:	460a      	mov	r2, r1
 800617c:	eb42 0303 	adc.w	r3, r2, r3
 8006180:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006190:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006194:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006198:	460b      	mov	r3, r1
 800619a:	18db      	adds	r3, r3, r3
 800619c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800619e:	4613      	mov	r3, r2
 80061a0:	eb42 0303 	adc.w	r3, r2, r3
 80061a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80061ae:	f7fa f877 	bl	80002a0 <__aeabi_uldivmod>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4b0d      	ldr	r3, [pc, #52]	@ (80061ec <UART_SetConfig+0x2d4>)
 80061b8:	fba3 1302 	umull	r1, r3, r3, r2
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	2164      	movs	r1, #100	@ 0x64
 80061c0:	fb01 f303 	mul.w	r3, r1, r3
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	3332      	adds	r3, #50	@ 0x32
 80061ca:	4a08      	ldr	r2, [pc, #32]	@ (80061ec <UART_SetConfig+0x2d4>)
 80061cc:	fba2 2303 	umull	r2, r3, r2, r3
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	f003 0207 	and.w	r2, r3, #7
 80061d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4422      	add	r2, r4
 80061de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061e0:	e106      	b.n	80063f0 <UART_SetConfig+0x4d8>
 80061e2:	bf00      	nop
 80061e4:	40011000 	.word	0x40011000
 80061e8:	40011400 	.word	0x40011400
 80061ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061f4:	2200      	movs	r2, #0
 80061f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80061fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80061fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006202:	4642      	mov	r2, r8
 8006204:	464b      	mov	r3, r9
 8006206:	1891      	adds	r1, r2, r2
 8006208:	6239      	str	r1, [r7, #32]
 800620a:	415b      	adcs	r3, r3
 800620c:	627b      	str	r3, [r7, #36]	@ 0x24
 800620e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006212:	4641      	mov	r1, r8
 8006214:	1854      	adds	r4, r2, r1
 8006216:	4649      	mov	r1, r9
 8006218:	eb43 0501 	adc.w	r5, r3, r1
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	00eb      	lsls	r3, r5, #3
 8006226:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800622a:	00e2      	lsls	r2, r4, #3
 800622c:	4614      	mov	r4, r2
 800622e:	461d      	mov	r5, r3
 8006230:	4643      	mov	r3, r8
 8006232:	18e3      	adds	r3, r4, r3
 8006234:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006238:	464b      	mov	r3, r9
 800623a:	eb45 0303 	adc.w	r3, r5, r3
 800623e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800624e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006252:	f04f 0200 	mov.w	r2, #0
 8006256:	f04f 0300 	mov.w	r3, #0
 800625a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800625e:	4629      	mov	r1, r5
 8006260:	008b      	lsls	r3, r1, #2
 8006262:	4621      	mov	r1, r4
 8006264:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006268:	4621      	mov	r1, r4
 800626a:	008a      	lsls	r2, r1, #2
 800626c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006270:	f7fa f816 	bl	80002a0 <__aeabi_uldivmod>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4b60      	ldr	r3, [pc, #384]	@ (80063fc <UART_SetConfig+0x4e4>)
 800627a:	fba3 2302 	umull	r2, r3, r3, r2
 800627e:	095b      	lsrs	r3, r3, #5
 8006280:	011c      	lsls	r4, r3, #4
 8006282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006286:	2200      	movs	r2, #0
 8006288:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800628c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006290:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006294:	4642      	mov	r2, r8
 8006296:	464b      	mov	r3, r9
 8006298:	1891      	adds	r1, r2, r2
 800629a:	61b9      	str	r1, [r7, #24]
 800629c:	415b      	adcs	r3, r3
 800629e:	61fb      	str	r3, [r7, #28]
 80062a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062a4:	4641      	mov	r1, r8
 80062a6:	1851      	adds	r1, r2, r1
 80062a8:	6139      	str	r1, [r7, #16]
 80062aa:	4649      	mov	r1, r9
 80062ac:	414b      	adcs	r3, r1
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	f04f 0200 	mov.w	r2, #0
 80062b4:	f04f 0300 	mov.w	r3, #0
 80062b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062bc:	4659      	mov	r1, fp
 80062be:	00cb      	lsls	r3, r1, #3
 80062c0:	4651      	mov	r1, sl
 80062c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062c6:	4651      	mov	r1, sl
 80062c8:	00ca      	lsls	r2, r1, #3
 80062ca:	4610      	mov	r0, r2
 80062cc:	4619      	mov	r1, r3
 80062ce:	4603      	mov	r3, r0
 80062d0:	4642      	mov	r2, r8
 80062d2:	189b      	adds	r3, r3, r2
 80062d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062d8:	464b      	mov	r3, r9
 80062da:	460a      	mov	r2, r1
 80062dc:	eb42 0303 	adc.w	r3, r2, r3
 80062e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80062ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80062fc:	4649      	mov	r1, r9
 80062fe:	008b      	lsls	r3, r1, #2
 8006300:	4641      	mov	r1, r8
 8006302:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006306:	4641      	mov	r1, r8
 8006308:	008a      	lsls	r2, r1, #2
 800630a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800630e:	f7f9 ffc7 	bl	80002a0 <__aeabi_uldivmod>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4611      	mov	r1, r2
 8006318:	4b38      	ldr	r3, [pc, #224]	@ (80063fc <UART_SetConfig+0x4e4>)
 800631a:	fba3 2301 	umull	r2, r3, r3, r1
 800631e:	095b      	lsrs	r3, r3, #5
 8006320:	2264      	movs	r2, #100	@ 0x64
 8006322:	fb02 f303 	mul.w	r3, r2, r3
 8006326:	1acb      	subs	r3, r1, r3
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	3332      	adds	r3, #50	@ 0x32
 800632c:	4a33      	ldr	r2, [pc, #204]	@ (80063fc <UART_SetConfig+0x4e4>)
 800632e:	fba2 2303 	umull	r2, r3, r2, r3
 8006332:	095b      	lsrs	r3, r3, #5
 8006334:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006338:	441c      	add	r4, r3
 800633a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800633e:	2200      	movs	r2, #0
 8006340:	673b      	str	r3, [r7, #112]	@ 0x70
 8006342:	677a      	str	r2, [r7, #116]	@ 0x74
 8006344:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006348:	4642      	mov	r2, r8
 800634a:	464b      	mov	r3, r9
 800634c:	1891      	adds	r1, r2, r2
 800634e:	60b9      	str	r1, [r7, #8]
 8006350:	415b      	adcs	r3, r3
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006358:	4641      	mov	r1, r8
 800635a:	1851      	adds	r1, r2, r1
 800635c:	6039      	str	r1, [r7, #0]
 800635e:	4649      	mov	r1, r9
 8006360:	414b      	adcs	r3, r1
 8006362:	607b      	str	r3, [r7, #4]
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006370:	4659      	mov	r1, fp
 8006372:	00cb      	lsls	r3, r1, #3
 8006374:	4651      	mov	r1, sl
 8006376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800637a:	4651      	mov	r1, sl
 800637c:	00ca      	lsls	r2, r1, #3
 800637e:	4610      	mov	r0, r2
 8006380:	4619      	mov	r1, r3
 8006382:	4603      	mov	r3, r0
 8006384:	4642      	mov	r2, r8
 8006386:	189b      	adds	r3, r3, r2
 8006388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800638a:	464b      	mov	r3, r9
 800638c:	460a      	mov	r2, r1
 800638e:	eb42 0303 	adc.w	r3, r2, r3
 8006392:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	663b      	str	r3, [r7, #96]	@ 0x60
 800639e:	667a      	str	r2, [r7, #100]	@ 0x64
 80063a0:	f04f 0200 	mov.w	r2, #0
 80063a4:	f04f 0300 	mov.w	r3, #0
 80063a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80063ac:	4649      	mov	r1, r9
 80063ae:	008b      	lsls	r3, r1, #2
 80063b0:	4641      	mov	r1, r8
 80063b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063b6:	4641      	mov	r1, r8
 80063b8:	008a      	lsls	r2, r1, #2
 80063ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80063be:	f7f9 ff6f 	bl	80002a0 <__aeabi_uldivmod>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4b0d      	ldr	r3, [pc, #52]	@ (80063fc <UART_SetConfig+0x4e4>)
 80063c8:	fba3 1302 	umull	r1, r3, r3, r2
 80063cc:	095b      	lsrs	r3, r3, #5
 80063ce:	2164      	movs	r1, #100	@ 0x64
 80063d0:	fb01 f303 	mul.w	r3, r1, r3
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	3332      	adds	r3, #50	@ 0x32
 80063da:	4a08      	ldr	r2, [pc, #32]	@ (80063fc <UART_SetConfig+0x4e4>)
 80063dc:	fba2 2303 	umull	r2, r3, r2, r3
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	f003 020f 	and.w	r2, r3, #15
 80063e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4422      	add	r2, r4
 80063ee:	609a      	str	r2, [r3, #8]
}
 80063f0:	bf00      	nop
 80063f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80063f6:	46bd      	mov	sp, r7
 80063f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063fc:	51eb851f 	.word	0x51eb851f

08006400 <std>:
 8006400:	2300      	movs	r3, #0
 8006402:	b510      	push	{r4, lr}
 8006404:	4604      	mov	r4, r0
 8006406:	e9c0 3300 	strd	r3, r3, [r0]
 800640a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800640e:	6083      	str	r3, [r0, #8]
 8006410:	8181      	strh	r1, [r0, #12]
 8006412:	6643      	str	r3, [r0, #100]	@ 0x64
 8006414:	81c2      	strh	r2, [r0, #14]
 8006416:	6183      	str	r3, [r0, #24]
 8006418:	4619      	mov	r1, r3
 800641a:	2208      	movs	r2, #8
 800641c:	305c      	adds	r0, #92	@ 0x5c
 800641e:	f000 f95e 	bl	80066de <memset>
 8006422:	4b0d      	ldr	r3, [pc, #52]	@ (8006458 <std+0x58>)
 8006424:	6263      	str	r3, [r4, #36]	@ 0x24
 8006426:	4b0d      	ldr	r3, [pc, #52]	@ (800645c <std+0x5c>)
 8006428:	62a3      	str	r3, [r4, #40]	@ 0x28
 800642a:	4b0d      	ldr	r3, [pc, #52]	@ (8006460 <std+0x60>)
 800642c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800642e:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <std+0x64>)
 8006430:	6323      	str	r3, [r4, #48]	@ 0x30
 8006432:	4b0d      	ldr	r3, [pc, #52]	@ (8006468 <std+0x68>)
 8006434:	6224      	str	r4, [r4, #32]
 8006436:	429c      	cmp	r4, r3
 8006438:	d006      	beq.n	8006448 <std+0x48>
 800643a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800643e:	4294      	cmp	r4, r2
 8006440:	d002      	beq.n	8006448 <std+0x48>
 8006442:	33d0      	adds	r3, #208	@ 0xd0
 8006444:	429c      	cmp	r4, r3
 8006446:	d105      	bne.n	8006454 <std+0x54>
 8006448:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800644c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006450:	f000 b9be 	b.w	80067d0 <__retarget_lock_init_recursive>
 8006454:	bd10      	pop	{r4, pc}
 8006456:	bf00      	nop
 8006458:	08006659 	.word	0x08006659
 800645c:	0800667b 	.word	0x0800667b
 8006460:	080066b3 	.word	0x080066b3
 8006464:	080066d7 	.word	0x080066d7
 8006468:	2000041c 	.word	0x2000041c

0800646c <stdio_exit_handler>:
 800646c:	4a02      	ldr	r2, [pc, #8]	@ (8006478 <stdio_exit_handler+0xc>)
 800646e:	4903      	ldr	r1, [pc, #12]	@ (800647c <stdio_exit_handler+0x10>)
 8006470:	4803      	ldr	r0, [pc, #12]	@ (8006480 <stdio_exit_handler+0x14>)
 8006472:	f000 b869 	b.w	8006548 <_fwalk_sglue>
 8006476:	bf00      	nop
 8006478:	2000006c 	.word	0x2000006c
 800647c:	0800732d 	.word	0x0800732d
 8006480:	2000007c 	.word	0x2000007c

08006484 <cleanup_stdio>:
 8006484:	6841      	ldr	r1, [r0, #4]
 8006486:	4b0c      	ldr	r3, [pc, #48]	@ (80064b8 <cleanup_stdio+0x34>)
 8006488:	4299      	cmp	r1, r3
 800648a:	b510      	push	{r4, lr}
 800648c:	4604      	mov	r4, r0
 800648e:	d001      	beq.n	8006494 <cleanup_stdio+0x10>
 8006490:	f000 ff4c 	bl	800732c <_fflush_r>
 8006494:	68a1      	ldr	r1, [r4, #8]
 8006496:	4b09      	ldr	r3, [pc, #36]	@ (80064bc <cleanup_stdio+0x38>)
 8006498:	4299      	cmp	r1, r3
 800649a:	d002      	beq.n	80064a2 <cleanup_stdio+0x1e>
 800649c:	4620      	mov	r0, r4
 800649e:	f000 ff45 	bl	800732c <_fflush_r>
 80064a2:	68e1      	ldr	r1, [r4, #12]
 80064a4:	4b06      	ldr	r3, [pc, #24]	@ (80064c0 <cleanup_stdio+0x3c>)
 80064a6:	4299      	cmp	r1, r3
 80064a8:	d004      	beq.n	80064b4 <cleanup_stdio+0x30>
 80064aa:	4620      	mov	r0, r4
 80064ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b0:	f000 bf3c 	b.w	800732c <_fflush_r>
 80064b4:	bd10      	pop	{r4, pc}
 80064b6:	bf00      	nop
 80064b8:	2000041c 	.word	0x2000041c
 80064bc:	20000484 	.word	0x20000484
 80064c0:	200004ec 	.word	0x200004ec

080064c4 <global_stdio_init.part.0>:
 80064c4:	b510      	push	{r4, lr}
 80064c6:	4b0b      	ldr	r3, [pc, #44]	@ (80064f4 <global_stdio_init.part.0+0x30>)
 80064c8:	4c0b      	ldr	r4, [pc, #44]	@ (80064f8 <global_stdio_init.part.0+0x34>)
 80064ca:	4a0c      	ldr	r2, [pc, #48]	@ (80064fc <global_stdio_init.part.0+0x38>)
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	4620      	mov	r0, r4
 80064d0:	2200      	movs	r2, #0
 80064d2:	2104      	movs	r1, #4
 80064d4:	f7ff ff94 	bl	8006400 <std>
 80064d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064dc:	2201      	movs	r2, #1
 80064de:	2109      	movs	r1, #9
 80064e0:	f7ff ff8e 	bl	8006400 <std>
 80064e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064e8:	2202      	movs	r2, #2
 80064ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064ee:	2112      	movs	r1, #18
 80064f0:	f7ff bf86 	b.w	8006400 <std>
 80064f4:	20000554 	.word	0x20000554
 80064f8:	2000041c 	.word	0x2000041c
 80064fc:	0800646d 	.word	0x0800646d

08006500 <__sfp_lock_acquire>:
 8006500:	4801      	ldr	r0, [pc, #4]	@ (8006508 <__sfp_lock_acquire+0x8>)
 8006502:	f000 b966 	b.w	80067d2 <__retarget_lock_acquire_recursive>
 8006506:	bf00      	nop
 8006508:	2000055d 	.word	0x2000055d

0800650c <__sfp_lock_release>:
 800650c:	4801      	ldr	r0, [pc, #4]	@ (8006514 <__sfp_lock_release+0x8>)
 800650e:	f000 b961 	b.w	80067d4 <__retarget_lock_release_recursive>
 8006512:	bf00      	nop
 8006514:	2000055d 	.word	0x2000055d

08006518 <__sinit>:
 8006518:	b510      	push	{r4, lr}
 800651a:	4604      	mov	r4, r0
 800651c:	f7ff fff0 	bl	8006500 <__sfp_lock_acquire>
 8006520:	6a23      	ldr	r3, [r4, #32]
 8006522:	b11b      	cbz	r3, 800652c <__sinit+0x14>
 8006524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006528:	f7ff bff0 	b.w	800650c <__sfp_lock_release>
 800652c:	4b04      	ldr	r3, [pc, #16]	@ (8006540 <__sinit+0x28>)
 800652e:	6223      	str	r3, [r4, #32]
 8006530:	4b04      	ldr	r3, [pc, #16]	@ (8006544 <__sinit+0x2c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1f5      	bne.n	8006524 <__sinit+0xc>
 8006538:	f7ff ffc4 	bl	80064c4 <global_stdio_init.part.0>
 800653c:	e7f2      	b.n	8006524 <__sinit+0xc>
 800653e:	bf00      	nop
 8006540:	08006485 	.word	0x08006485
 8006544:	20000554 	.word	0x20000554

08006548 <_fwalk_sglue>:
 8006548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800654c:	4607      	mov	r7, r0
 800654e:	4688      	mov	r8, r1
 8006550:	4614      	mov	r4, r2
 8006552:	2600      	movs	r6, #0
 8006554:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006558:	f1b9 0901 	subs.w	r9, r9, #1
 800655c:	d505      	bpl.n	800656a <_fwalk_sglue+0x22>
 800655e:	6824      	ldr	r4, [r4, #0]
 8006560:	2c00      	cmp	r4, #0
 8006562:	d1f7      	bne.n	8006554 <_fwalk_sglue+0xc>
 8006564:	4630      	mov	r0, r6
 8006566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800656a:	89ab      	ldrh	r3, [r5, #12]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d907      	bls.n	8006580 <_fwalk_sglue+0x38>
 8006570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006574:	3301      	adds	r3, #1
 8006576:	d003      	beq.n	8006580 <_fwalk_sglue+0x38>
 8006578:	4629      	mov	r1, r5
 800657a:	4638      	mov	r0, r7
 800657c:	47c0      	blx	r8
 800657e:	4306      	orrs	r6, r0
 8006580:	3568      	adds	r5, #104	@ 0x68
 8006582:	e7e9      	b.n	8006558 <_fwalk_sglue+0x10>

08006584 <iprintf>:
 8006584:	b40f      	push	{r0, r1, r2, r3}
 8006586:	b507      	push	{r0, r1, r2, lr}
 8006588:	4906      	ldr	r1, [pc, #24]	@ (80065a4 <iprintf+0x20>)
 800658a:	ab04      	add	r3, sp, #16
 800658c:	6808      	ldr	r0, [r1, #0]
 800658e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006592:	6881      	ldr	r1, [r0, #8]
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	f000 fba1 	bl	8006cdc <_vfiprintf_r>
 800659a:	b003      	add	sp, #12
 800659c:	f85d eb04 	ldr.w	lr, [sp], #4
 80065a0:	b004      	add	sp, #16
 80065a2:	4770      	bx	lr
 80065a4:	20000078 	.word	0x20000078

080065a8 <sniprintf>:
 80065a8:	b40c      	push	{r2, r3}
 80065aa:	b530      	push	{r4, r5, lr}
 80065ac:	4b18      	ldr	r3, [pc, #96]	@ (8006610 <sniprintf+0x68>)
 80065ae:	1e0c      	subs	r4, r1, #0
 80065b0:	681d      	ldr	r5, [r3, #0]
 80065b2:	b09d      	sub	sp, #116	@ 0x74
 80065b4:	da08      	bge.n	80065c8 <sniprintf+0x20>
 80065b6:	238b      	movs	r3, #139	@ 0x8b
 80065b8:	602b      	str	r3, [r5, #0]
 80065ba:	f04f 30ff 	mov.w	r0, #4294967295
 80065be:	b01d      	add	sp, #116	@ 0x74
 80065c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065c4:	b002      	add	sp, #8
 80065c6:	4770      	bx	lr
 80065c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80065cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80065d6:	bf14      	ite	ne
 80065d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80065dc:	4623      	moveq	r3, r4
 80065de:	9304      	str	r3, [sp, #16]
 80065e0:	9307      	str	r3, [sp, #28]
 80065e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80065e6:	9002      	str	r0, [sp, #8]
 80065e8:	9006      	str	r0, [sp, #24]
 80065ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80065ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80065f0:	ab21      	add	r3, sp, #132	@ 0x84
 80065f2:	a902      	add	r1, sp, #8
 80065f4:	4628      	mov	r0, r5
 80065f6:	9301      	str	r3, [sp, #4]
 80065f8:	f000 fa4a 	bl	8006a90 <_svfiprintf_r>
 80065fc:	1c43      	adds	r3, r0, #1
 80065fe:	bfbc      	itt	lt
 8006600:	238b      	movlt	r3, #139	@ 0x8b
 8006602:	602b      	strlt	r3, [r5, #0]
 8006604:	2c00      	cmp	r4, #0
 8006606:	d0da      	beq.n	80065be <sniprintf+0x16>
 8006608:	9b02      	ldr	r3, [sp, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	e7d6      	b.n	80065be <sniprintf+0x16>
 8006610:	20000078 	.word	0x20000078

08006614 <siprintf>:
 8006614:	b40e      	push	{r1, r2, r3}
 8006616:	b510      	push	{r4, lr}
 8006618:	b09d      	sub	sp, #116	@ 0x74
 800661a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800661c:	9002      	str	r0, [sp, #8]
 800661e:	9006      	str	r0, [sp, #24]
 8006620:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006624:	480a      	ldr	r0, [pc, #40]	@ (8006650 <siprintf+0x3c>)
 8006626:	9107      	str	r1, [sp, #28]
 8006628:	9104      	str	r1, [sp, #16]
 800662a:	490a      	ldr	r1, [pc, #40]	@ (8006654 <siprintf+0x40>)
 800662c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006630:	9105      	str	r1, [sp, #20]
 8006632:	2400      	movs	r4, #0
 8006634:	a902      	add	r1, sp, #8
 8006636:	6800      	ldr	r0, [r0, #0]
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800663c:	f000 fa28 	bl	8006a90 <_svfiprintf_r>
 8006640:	9b02      	ldr	r3, [sp, #8]
 8006642:	701c      	strb	r4, [r3, #0]
 8006644:	b01d      	add	sp, #116	@ 0x74
 8006646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800664a:	b003      	add	sp, #12
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	20000078 	.word	0x20000078
 8006654:	ffff0208 	.word	0xffff0208

08006658 <__sread>:
 8006658:	b510      	push	{r4, lr}
 800665a:	460c      	mov	r4, r1
 800665c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006660:	f000 f868 	bl	8006734 <_read_r>
 8006664:	2800      	cmp	r0, #0
 8006666:	bfab      	itete	ge
 8006668:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800666a:	89a3      	ldrhlt	r3, [r4, #12]
 800666c:	181b      	addge	r3, r3, r0
 800666e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006672:	bfac      	ite	ge
 8006674:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006676:	81a3      	strhlt	r3, [r4, #12]
 8006678:	bd10      	pop	{r4, pc}

0800667a <__swrite>:
 800667a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800667e:	461f      	mov	r7, r3
 8006680:	898b      	ldrh	r3, [r1, #12]
 8006682:	05db      	lsls	r3, r3, #23
 8006684:	4605      	mov	r5, r0
 8006686:	460c      	mov	r4, r1
 8006688:	4616      	mov	r6, r2
 800668a:	d505      	bpl.n	8006698 <__swrite+0x1e>
 800668c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006690:	2302      	movs	r3, #2
 8006692:	2200      	movs	r2, #0
 8006694:	f000 f83c 	bl	8006710 <_lseek_r>
 8006698:	89a3      	ldrh	r3, [r4, #12]
 800669a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800669e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066a2:	81a3      	strh	r3, [r4, #12]
 80066a4:	4632      	mov	r2, r6
 80066a6:	463b      	mov	r3, r7
 80066a8:	4628      	mov	r0, r5
 80066aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ae:	f000 b853 	b.w	8006758 <_write_r>

080066b2 <__sseek>:
 80066b2:	b510      	push	{r4, lr}
 80066b4:	460c      	mov	r4, r1
 80066b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ba:	f000 f829 	bl	8006710 <_lseek_r>
 80066be:	1c43      	adds	r3, r0, #1
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	bf15      	itete	ne
 80066c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066ce:	81a3      	strheq	r3, [r4, #12]
 80066d0:	bf18      	it	ne
 80066d2:	81a3      	strhne	r3, [r4, #12]
 80066d4:	bd10      	pop	{r4, pc}

080066d6 <__sclose>:
 80066d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066da:	f000 b809 	b.w	80066f0 <_close_r>

080066de <memset>:
 80066de:	4402      	add	r2, r0
 80066e0:	4603      	mov	r3, r0
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d100      	bne.n	80066e8 <memset+0xa>
 80066e6:	4770      	bx	lr
 80066e8:	f803 1b01 	strb.w	r1, [r3], #1
 80066ec:	e7f9      	b.n	80066e2 <memset+0x4>
	...

080066f0 <_close_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d06      	ldr	r5, [pc, #24]	@ (800670c <_close_r+0x1c>)
 80066f4:	2300      	movs	r3, #0
 80066f6:	4604      	mov	r4, r0
 80066f8:	4608      	mov	r0, r1
 80066fa:	602b      	str	r3, [r5, #0]
 80066fc:	f7fa f9df 	bl	8000abe <_close>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	d102      	bne.n	800670a <_close_r+0x1a>
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	b103      	cbz	r3, 800670a <_close_r+0x1a>
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	bd38      	pop	{r3, r4, r5, pc}
 800670c:	20000558 	.word	0x20000558

08006710 <_lseek_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	4d07      	ldr	r5, [pc, #28]	@ (8006730 <_lseek_r+0x20>)
 8006714:	4604      	mov	r4, r0
 8006716:	4608      	mov	r0, r1
 8006718:	4611      	mov	r1, r2
 800671a:	2200      	movs	r2, #0
 800671c:	602a      	str	r2, [r5, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	f7fa f9f4 	bl	8000b0c <_lseek>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d102      	bne.n	800672e <_lseek_r+0x1e>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	b103      	cbz	r3, 800672e <_lseek_r+0x1e>
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	bd38      	pop	{r3, r4, r5, pc}
 8006730:	20000558 	.word	0x20000558

08006734 <_read_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4d07      	ldr	r5, [pc, #28]	@ (8006754 <_read_r+0x20>)
 8006738:	4604      	mov	r4, r0
 800673a:	4608      	mov	r0, r1
 800673c:	4611      	mov	r1, r2
 800673e:	2200      	movs	r2, #0
 8006740:	602a      	str	r2, [r5, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f7fa f982 	bl	8000a4c <_read>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d102      	bne.n	8006752 <_read_r+0x1e>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	b103      	cbz	r3, 8006752 <_read_r+0x1e>
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	20000558 	.word	0x20000558

08006758 <_write_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4d07      	ldr	r5, [pc, #28]	@ (8006778 <_write_r+0x20>)
 800675c:	4604      	mov	r4, r0
 800675e:	4608      	mov	r0, r1
 8006760:	4611      	mov	r1, r2
 8006762:	2200      	movs	r2, #0
 8006764:	602a      	str	r2, [r5, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	f7fa f98d 	bl	8000a86 <_write>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d102      	bne.n	8006776 <_write_r+0x1e>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	b103      	cbz	r3, 8006776 <_write_r+0x1e>
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	bd38      	pop	{r3, r4, r5, pc}
 8006778:	20000558 	.word	0x20000558

0800677c <__errno>:
 800677c:	4b01      	ldr	r3, [pc, #4]	@ (8006784 <__errno+0x8>)
 800677e:	6818      	ldr	r0, [r3, #0]
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20000078 	.word	0x20000078

08006788 <__libc_init_array>:
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	4d0d      	ldr	r5, [pc, #52]	@ (80067c0 <__libc_init_array+0x38>)
 800678c:	4c0d      	ldr	r4, [pc, #52]	@ (80067c4 <__libc_init_array+0x3c>)
 800678e:	1b64      	subs	r4, r4, r5
 8006790:	10a4      	asrs	r4, r4, #2
 8006792:	2600      	movs	r6, #0
 8006794:	42a6      	cmp	r6, r4
 8006796:	d109      	bne.n	80067ac <__libc_init_array+0x24>
 8006798:	4d0b      	ldr	r5, [pc, #44]	@ (80067c8 <__libc_init_array+0x40>)
 800679a:	4c0c      	ldr	r4, [pc, #48]	@ (80067cc <__libc_init_array+0x44>)
 800679c:	f000 ff74 	bl	8007688 <_init>
 80067a0:	1b64      	subs	r4, r4, r5
 80067a2:	10a4      	asrs	r4, r4, #2
 80067a4:	2600      	movs	r6, #0
 80067a6:	42a6      	cmp	r6, r4
 80067a8:	d105      	bne.n	80067b6 <__libc_init_array+0x2e>
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b0:	4798      	blx	r3
 80067b2:	3601      	adds	r6, #1
 80067b4:	e7ee      	b.n	8006794 <__libc_init_array+0xc>
 80067b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ba:	4798      	blx	r3
 80067bc:	3601      	adds	r6, #1
 80067be:	e7f2      	b.n	80067a6 <__libc_init_array+0x1e>
 80067c0:	080078b0 	.word	0x080078b0
 80067c4:	080078b0 	.word	0x080078b0
 80067c8:	080078b0 	.word	0x080078b0
 80067cc:	080078b4 	.word	0x080078b4

080067d0 <__retarget_lock_init_recursive>:
 80067d0:	4770      	bx	lr

080067d2 <__retarget_lock_acquire_recursive>:
 80067d2:	4770      	bx	lr

080067d4 <__retarget_lock_release_recursive>:
 80067d4:	4770      	bx	lr

080067d6 <strcpy>:
 80067d6:	4603      	mov	r3, r0
 80067d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067dc:	f803 2b01 	strb.w	r2, [r3], #1
 80067e0:	2a00      	cmp	r2, #0
 80067e2:	d1f9      	bne.n	80067d8 <strcpy+0x2>
 80067e4:	4770      	bx	lr
	...

080067e8 <_free_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4605      	mov	r5, r0
 80067ec:	2900      	cmp	r1, #0
 80067ee:	d041      	beq.n	8006874 <_free_r+0x8c>
 80067f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067f4:	1f0c      	subs	r4, r1, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bfb8      	it	lt
 80067fa:	18e4      	addlt	r4, r4, r3
 80067fc:	f000 f8e0 	bl	80069c0 <__malloc_lock>
 8006800:	4a1d      	ldr	r2, [pc, #116]	@ (8006878 <_free_r+0x90>)
 8006802:	6813      	ldr	r3, [r2, #0]
 8006804:	b933      	cbnz	r3, 8006814 <_free_r+0x2c>
 8006806:	6063      	str	r3, [r4, #4]
 8006808:	6014      	str	r4, [r2, #0]
 800680a:	4628      	mov	r0, r5
 800680c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006810:	f000 b8dc 	b.w	80069cc <__malloc_unlock>
 8006814:	42a3      	cmp	r3, r4
 8006816:	d908      	bls.n	800682a <_free_r+0x42>
 8006818:	6820      	ldr	r0, [r4, #0]
 800681a:	1821      	adds	r1, r4, r0
 800681c:	428b      	cmp	r3, r1
 800681e:	bf01      	itttt	eq
 8006820:	6819      	ldreq	r1, [r3, #0]
 8006822:	685b      	ldreq	r3, [r3, #4]
 8006824:	1809      	addeq	r1, r1, r0
 8006826:	6021      	streq	r1, [r4, #0]
 8006828:	e7ed      	b.n	8006806 <_free_r+0x1e>
 800682a:	461a      	mov	r2, r3
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	b10b      	cbz	r3, 8006834 <_free_r+0x4c>
 8006830:	42a3      	cmp	r3, r4
 8006832:	d9fa      	bls.n	800682a <_free_r+0x42>
 8006834:	6811      	ldr	r1, [r2, #0]
 8006836:	1850      	adds	r0, r2, r1
 8006838:	42a0      	cmp	r0, r4
 800683a:	d10b      	bne.n	8006854 <_free_r+0x6c>
 800683c:	6820      	ldr	r0, [r4, #0]
 800683e:	4401      	add	r1, r0
 8006840:	1850      	adds	r0, r2, r1
 8006842:	4283      	cmp	r3, r0
 8006844:	6011      	str	r1, [r2, #0]
 8006846:	d1e0      	bne.n	800680a <_free_r+0x22>
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	6053      	str	r3, [r2, #4]
 800684e:	4408      	add	r0, r1
 8006850:	6010      	str	r0, [r2, #0]
 8006852:	e7da      	b.n	800680a <_free_r+0x22>
 8006854:	d902      	bls.n	800685c <_free_r+0x74>
 8006856:	230c      	movs	r3, #12
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	e7d6      	b.n	800680a <_free_r+0x22>
 800685c:	6820      	ldr	r0, [r4, #0]
 800685e:	1821      	adds	r1, r4, r0
 8006860:	428b      	cmp	r3, r1
 8006862:	bf04      	itt	eq
 8006864:	6819      	ldreq	r1, [r3, #0]
 8006866:	685b      	ldreq	r3, [r3, #4]
 8006868:	6063      	str	r3, [r4, #4]
 800686a:	bf04      	itt	eq
 800686c:	1809      	addeq	r1, r1, r0
 800686e:	6021      	streq	r1, [r4, #0]
 8006870:	6054      	str	r4, [r2, #4]
 8006872:	e7ca      	b.n	800680a <_free_r+0x22>
 8006874:	bd38      	pop	{r3, r4, r5, pc}
 8006876:	bf00      	nop
 8006878:	20000564 	.word	0x20000564

0800687c <sbrk_aligned>:
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	4e0f      	ldr	r6, [pc, #60]	@ (80068bc <sbrk_aligned+0x40>)
 8006880:	460c      	mov	r4, r1
 8006882:	6831      	ldr	r1, [r6, #0]
 8006884:	4605      	mov	r5, r0
 8006886:	b911      	cbnz	r1, 800688e <sbrk_aligned+0x12>
 8006888:	f000 fe26 	bl	80074d8 <_sbrk_r>
 800688c:	6030      	str	r0, [r6, #0]
 800688e:	4621      	mov	r1, r4
 8006890:	4628      	mov	r0, r5
 8006892:	f000 fe21 	bl	80074d8 <_sbrk_r>
 8006896:	1c43      	adds	r3, r0, #1
 8006898:	d103      	bne.n	80068a2 <sbrk_aligned+0x26>
 800689a:	f04f 34ff 	mov.w	r4, #4294967295
 800689e:	4620      	mov	r0, r4
 80068a0:	bd70      	pop	{r4, r5, r6, pc}
 80068a2:	1cc4      	adds	r4, r0, #3
 80068a4:	f024 0403 	bic.w	r4, r4, #3
 80068a8:	42a0      	cmp	r0, r4
 80068aa:	d0f8      	beq.n	800689e <sbrk_aligned+0x22>
 80068ac:	1a21      	subs	r1, r4, r0
 80068ae:	4628      	mov	r0, r5
 80068b0:	f000 fe12 	bl	80074d8 <_sbrk_r>
 80068b4:	3001      	adds	r0, #1
 80068b6:	d1f2      	bne.n	800689e <sbrk_aligned+0x22>
 80068b8:	e7ef      	b.n	800689a <sbrk_aligned+0x1e>
 80068ba:	bf00      	nop
 80068bc:	20000560 	.word	0x20000560

080068c0 <_malloc_r>:
 80068c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c4:	1ccd      	adds	r5, r1, #3
 80068c6:	f025 0503 	bic.w	r5, r5, #3
 80068ca:	3508      	adds	r5, #8
 80068cc:	2d0c      	cmp	r5, #12
 80068ce:	bf38      	it	cc
 80068d0:	250c      	movcc	r5, #12
 80068d2:	2d00      	cmp	r5, #0
 80068d4:	4606      	mov	r6, r0
 80068d6:	db01      	blt.n	80068dc <_malloc_r+0x1c>
 80068d8:	42a9      	cmp	r1, r5
 80068da:	d904      	bls.n	80068e6 <_malloc_r+0x26>
 80068dc:	230c      	movs	r3, #12
 80068de:	6033      	str	r3, [r6, #0]
 80068e0:	2000      	movs	r0, #0
 80068e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069bc <_malloc_r+0xfc>
 80068ea:	f000 f869 	bl	80069c0 <__malloc_lock>
 80068ee:	f8d8 3000 	ldr.w	r3, [r8]
 80068f2:	461c      	mov	r4, r3
 80068f4:	bb44      	cbnz	r4, 8006948 <_malloc_r+0x88>
 80068f6:	4629      	mov	r1, r5
 80068f8:	4630      	mov	r0, r6
 80068fa:	f7ff ffbf 	bl	800687c <sbrk_aligned>
 80068fe:	1c43      	adds	r3, r0, #1
 8006900:	4604      	mov	r4, r0
 8006902:	d158      	bne.n	80069b6 <_malloc_r+0xf6>
 8006904:	f8d8 4000 	ldr.w	r4, [r8]
 8006908:	4627      	mov	r7, r4
 800690a:	2f00      	cmp	r7, #0
 800690c:	d143      	bne.n	8006996 <_malloc_r+0xd6>
 800690e:	2c00      	cmp	r4, #0
 8006910:	d04b      	beq.n	80069aa <_malloc_r+0xea>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	4639      	mov	r1, r7
 8006916:	4630      	mov	r0, r6
 8006918:	eb04 0903 	add.w	r9, r4, r3
 800691c:	f000 fddc 	bl	80074d8 <_sbrk_r>
 8006920:	4581      	cmp	r9, r0
 8006922:	d142      	bne.n	80069aa <_malloc_r+0xea>
 8006924:	6821      	ldr	r1, [r4, #0]
 8006926:	1a6d      	subs	r5, r5, r1
 8006928:	4629      	mov	r1, r5
 800692a:	4630      	mov	r0, r6
 800692c:	f7ff ffa6 	bl	800687c <sbrk_aligned>
 8006930:	3001      	adds	r0, #1
 8006932:	d03a      	beq.n	80069aa <_malloc_r+0xea>
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	442b      	add	r3, r5
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	f8d8 3000 	ldr.w	r3, [r8]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	bb62      	cbnz	r2, 800699c <_malloc_r+0xdc>
 8006942:	f8c8 7000 	str.w	r7, [r8]
 8006946:	e00f      	b.n	8006968 <_malloc_r+0xa8>
 8006948:	6822      	ldr	r2, [r4, #0]
 800694a:	1b52      	subs	r2, r2, r5
 800694c:	d420      	bmi.n	8006990 <_malloc_r+0xd0>
 800694e:	2a0b      	cmp	r2, #11
 8006950:	d917      	bls.n	8006982 <_malloc_r+0xc2>
 8006952:	1961      	adds	r1, r4, r5
 8006954:	42a3      	cmp	r3, r4
 8006956:	6025      	str	r5, [r4, #0]
 8006958:	bf18      	it	ne
 800695a:	6059      	strne	r1, [r3, #4]
 800695c:	6863      	ldr	r3, [r4, #4]
 800695e:	bf08      	it	eq
 8006960:	f8c8 1000 	streq.w	r1, [r8]
 8006964:	5162      	str	r2, [r4, r5]
 8006966:	604b      	str	r3, [r1, #4]
 8006968:	4630      	mov	r0, r6
 800696a:	f000 f82f 	bl	80069cc <__malloc_unlock>
 800696e:	f104 000b 	add.w	r0, r4, #11
 8006972:	1d23      	adds	r3, r4, #4
 8006974:	f020 0007 	bic.w	r0, r0, #7
 8006978:	1ac2      	subs	r2, r0, r3
 800697a:	bf1c      	itt	ne
 800697c:	1a1b      	subne	r3, r3, r0
 800697e:	50a3      	strne	r3, [r4, r2]
 8006980:	e7af      	b.n	80068e2 <_malloc_r+0x22>
 8006982:	6862      	ldr	r2, [r4, #4]
 8006984:	42a3      	cmp	r3, r4
 8006986:	bf0c      	ite	eq
 8006988:	f8c8 2000 	streq.w	r2, [r8]
 800698c:	605a      	strne	r2, [r3, #4]
 800698e:	e7eb      	b.n	8006968 <_malloc_r+0xa8>
 8006990:	4623      	mov	r3, r4
 8006992:	6864      	ldr	r4, [r4, #4]
 8006994:	e7ae      	b.n	80068f4 <_malloc_r+0x34>
 8006996:	463c      	mov	r4, r7
 8006998:	687f      	ldr	r7, [r7, #4]
 800699a:	e7b6      	b.n	800690a <_malloc_r+0x4a>
 800699c:	461a      	mov	r2, r3
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	d1fb      	bne.n	800699c <_malloc_r+0xdc>
 80069a4:	2300      	movs	r3, #0
 80069a6:	6053      	str	r3, [r2, #4]
 80069a8:	e7de      	b.n	8006968 <_malloc_r+0xa8>
 80069aa:	230c      	movs	r3, #12
 80069ac:	6033      	str	r3, [r6, #0]
 80069ae:	4630      	mov	r0, r6
 80069b0:	f000 f80c 	bl	80069cc <__malloc_unlock>
 80069b4:	e794      	b.n	80068e0 <_malloc_r+0x20>
 80069b6:	6005      	str	r5, [r0, #0]
 80069b8:	e7d6      	b.n	8006968 <_malloc_r+0xa8>
 80069ba:	bf00      	nop
 80069bc:	20000564 	.word	0x20000564

080069c0 <__malloc_lock>:
 80069c0:	4801      	ldr	r0, [pc, #4]	@ (80069c8 <__malloc_lock+0x8>)
 80069c2:	f7ff bf06 	b.w	80067d2 <__retarget_lock_acquire_recursive>
 80069c6:	bf00      	nop
 80069c8:	2000055c 	.word	0x2000055c

080069cc <__malloc_unlock>:
 80069cc:	4801      	ldr	r0, [pc, #4]	@ (80069d4 <__malloc_unlock+0x8>)
 80069ce:	f7ff bf01 	b.w	80067d4 <__retarget_lock_release_recursive>
 80069d2:	bf00      	nop
 80069d4:	2000055c 	.word	0x2000055c

080069d8 <__ssputs_r>:
 80069d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069dc:	688e      	ldr	r6, [r1, #8]
 80069de:	461f      	mov	r7, r3
 80069e0:	42be      	cmp	r6, r7
 80069e2:	680b      	ldr	r3, [r1, #0]
 80069e4:	4682      	mov	sl, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	4690      	mov	r8, r2
 80069ea:	d82d      	bhi.n	8006a48 <__ssputs_r+0x70>
 80069ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80069f4:	d026      	beq.n	8006a44 <__ssputs_r+0x6c>
 80069f6:	6965      	ldr	r5, [r4, #20]
 80069f8:	6909      	ldr	r1, [r1, #16]
 80069fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069fe:	eba3 0901 	sub.w	r9, r3, r1
 8006a02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a06:	1c7b      	adds	r3, r7, #1
 8006a08:	444b      	add	r3, r9
 8006a0a:	106d      	asrs	r5, r5, #1
 8006a0c:	429d      	cmp	r5, r3
 8006a0e:	bf38      	it	cc
 8006a10:	461d      	movcc	r5, r3
 8006a12:	0553      	lsls	r3, r2, #21
 8006a14:	d527      	bpl.n	8006a66 <__ssputs_r+0x8e>
 8006a16:	4629      	mov	r1, r5
 8006a18:	f7ff ff52 	bl	80068c0 <_malloc_r>
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	b360      	cbz	r0, 8006a7a <__ssputs_r+0xa2>
 8006a20:	6921      	ldr	r1, [r4, #16]
 8006a22:	464a      	mov	r2, r9
 8006a24:	f000 fd68 	bl	80074f8 <memcpy>
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a32:	81a3      	strh	r3, [r4, #12]
 8006a34:	6126      	str	r6, [r4, #16]
 8006a36:	6165      	str	r5, [r4, #20]
 8006a38:	444e      	add	r6, r9
 8006a3a:	eba5 0509 	sub.w	r5, r5, r9
 8006a3e:	6026      	str	r6, [r4, #0]
 8006a40:	60a5      	str	r5, [r4, #8]
 8006a42:	463e      	mov	r6, r7
 8006a44:	42be      	cmp	r6, r7
 8006a46:	d900      	bls.n	8006a4a <__ssputs_r+0x72>
 8006a48:	463e      	mov	r6, r7
 8006a4a:	6820      	ldr	r0, [r4, #0]
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	4641      	mov	r1, r8
 8006a50:	f000 fd28 	bl	80074a4 <memmove>
 8006a54:	68a3      	ldr	r3, [r4, #8]
 8006a56:	1b9b      	subs	r3, r3, r6
 8006a58:	60a3      	str	r3, [r4, #8]
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	4433      	add	r3, r6
 8006a5e:	6023      	str	r3, [r4, #0]
 8006a60:	2000      	movs	r0, #0
 8006a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a66:	462a      	mov	r2, r5
 8006a68:	f000 fd54 	bl	8007514 <_realloc_r>
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d1e0      	bne.n	8006a34 <__ssputs_r+0x5c>
 8006a72:	6921      	ldr	r1, [r4, #16]
 8006a74:	4650      	mov	r0, sl
 8006a76:	f7ff feb7 	bl	80067e8 <_free_r>
 8006a7a:	230c      	movs	r3, #12
 8006a7c:	f8ca 3000 	str.w	r3, [sl]
 8006a80:	89a3      	ldrh	r3, [r4, #12]
 8006a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a86:	81a3      	strh	r3, [r4, #12]
 8006a88:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8c:	e7e9      	b.n	8006a62 <__ssputs_r+0x8a>
	...

08006a90 <_svfiprintf_r>:
 8006a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	4698      	mov	r8, r3
 8006a96:	898b      	ldrh	r3, [r1, #12]
 8006a98:	061b      	lsls	r3, r3, #24
 8006a9a:	b09d      	sub	sp, #116	@ 0x74
 8006a9c:	4607      	mov	r7, r0
 8006a9e:	460d      	mov	r5, r1
 8006aa0:	4614      	mov	r4, r2
 8006aa2:	d510      	bpl.n	8006ac6 <_svfiprintf_r+0x36>
 8006aa4:	690b      	ldr	r3, [r1, #16]
 8006aa6:	b973      	cbnz	r3, 8006ac6 <_svfiprintf_r+0x36>
 8006aa8:	2140      	movs	r1, #64	@ 0x40
 8006aaa:	f7ff ff09 	bl	80068c0 <_malloc_r>
 8006aae:	6028      	str	r0, [r5, #0]
 8006ab0:	6128      	str	r0, [r5, #16]
 8006ab2:	b930      	cbnz	r0, 8006ac2 <_svfiprintf_r+0x32>
 8006ab4:	230c      	movs	r3, #12
 8006ab6:	603b      	str	r3, [r7, #0]
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8006abc:	b01d      	add	sp, #116	@ 0x74
 8006abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac2:	2340      	movs	r3, #64	@ 0x40
 8006ac4:	616b      	str	r3, [r5, #20]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006aca:	2320      	movs	r3, #32
 8006acc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ad0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ad4:	2330      	movs	r3, #48	@ 0x30
 8006ad6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006c74 <_svfiprintf_r+0x1e4>
 8006ada:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ade:	f04f 0901 	mov.w	r9, #1
 8006ae2:	4623      	mov	r3, r4
 8006ae4:	469a      	mov	sl, r3
 8006ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aea:	b10a      	cbz	r2, 8006af0 <_svfiprintf_r+0x60>
 8006aec:	2a25      	cmp	r2, #37	@ 0x25
 8006aee:	d1f9      	bne.n	8006ae4 <_svfiprintf_r+0x54>
 8006af0:	ebba 0b04 	subs.w	fp, sl, r4
 8006af4:	d00b      	beq.n	8006b0e <_svfiprintf_r+0x7e>
 8006af6:	465b      	mov	r3, fp
 8006af8:	4622      	mov	r2, r4
 8006afa:	4629      	mov	r1, r5
 8006afc:	4638      	mov	r0, r7
 8006afe:	f7ff ff6b 	bl	80069d8 <__ssputs_r>
 8006b02:	3001      	adds	r0, #1
 8006b04:	f000 80a7 	beq.w	8006c56 <_svfiprintf_r+0x1c6>
 8006b08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b0a:	445a      	add	r2, fp
 8006b0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 809f 	beq.w	8006c56 <_svfiprintf_r+0x1c6>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b22:	f10a 0a01 	add.w	sl, sl, #1
 8006b26:	9304      	str	r3, [sp, #16]
 8006b28:	9307      	str	r3, [sp, #28]
 8006b2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b30:	4654      	mov	r4, sl
 8006b32:	2205      	movs	r2, #5
 8006b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b38:	484e      	ldr	r0, [pc, #312]	@ (8006c74 <_svfiprintf_r+0x1e4>)
 8006b3a:	f7f9 fb61 	bl	8000200 <memchr>
 8006b3e:	9a04      	ldr	r2, [sp, #16]
 8006b40:	b9d8      	cbnz	r0, 8006b7a <_svfiprintf_r+0xea>
 8006b42:	06d0      	lsls	r0, r2, #27
 8006b44:	bf44      	itt	mi
 8006b46:	2320      	movmi	r3, #32
 8006b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b4c:	0711      	lsls	r1, r2, #28
 8006b4e:	bf44      	itt	mi
 8006b50:	232b      	movmi	r3, #43	@ 0x2b
 8006b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b56:	f89a 3000 	ldrb.w	r3, [sl]
 8006b5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b5c:	d015      	beq.n	8006b8a <_svfiprintf_r+0xfa>
 8006b5e:	9a07      	ldr	r2, [sp, #28]
 8006b60:	4654      	mov	r4, sl
 8006b62:	2000      	movs	r0, #0
 8006b64:	f04f 0c0a 	mov.w	ip, #10
 8006b68:	4621      	mov	r1, r4
 8006b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b6e:	3b30      	subs	r3, #48	@ 0x30
 8006b70:	2b09      	cmp	r3, #9
 8006b72:	d94b      	bls.n	8006c0c <_svfiprintf_r+0x17c>
 8006b74:	b1b0      	cbz	r0, 8006ba4 <_svfiprintf_r+0x114>
 8006b76:	9207      	str	r2, [sp, #28]
 8006b78:	e014      	b.n	8006ba4 <_svfiprintf_r+0x114>
 8006b7a:	eba0 0308 	sub.w	r3, r0, r8
 8006b7e:	fa09 f303 	lsl.w	r3, r9, r3
 8006b82:	4313      	orrs	r3, r2
 8006b84:	9304      	str	r3, [sp, #16]
 8006b86:	46a2      	mov	sl, r4
 8006b88:	e7d2      	b.n	8006b30 <_svfiprintf_r+0xa0>
 8006b8a:	9b03      	ldr	r3, [sp, #12]
 8006b8c:	1d19      	adds	r1, r3, #4
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	9103      	str	r1, [sp, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	bfbb      	ittet	lt
 8006b96:	425b      	neglt	r3, r3
 8006b98:	f042 0202 	orrlt.w	r2, r2, #2
 8006b9c:	9307      	strge	r3, [sp, #28]
 8006b9e:	9307      	strlt	r3, [sp, #28]
 8006ba0:	bfb8      	it	lt
 8006ba2:	9204      	strlt	r2, [sp, #16]
 8006ba4:	7823      	ldrb	r3, [r4, #0]
 8006ba6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ba8:	d10a      	bne.n	8006bc0 <_svfiprintf_r+0x130>
 8006baa:	7863      	ldrb	r3, [r4, #1]
 8006bac:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bae:	d132      	bne.n	8006c16 <_svfiprintf_r+0x186>
 8006bb0:	9b03      	ldr	r3, [sp, #12]
 8006bb2:	1d1a      	adds	r2, r3, #4
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	9203      	str	r2, [sp, #12]
 8006bb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bbc:	3402      	adds	r4, #2
 8006bbe:	9305      	str	r3, [sp, #20]
 8006bc0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006c84 <_svfiprintf_r+0x1f4>
 8006bc4:	7821      	ldrb	r1, [r4, #0]
 8006bc6:	2203      	movs	r2, #3
 8006bc8:	4650      	mov	r0, sl
 8006bca:	f7f9 fb19 	bl	8000200 <memchr>
 8006bce:	b138      	cbz	r0, 8006be0 <_svfiprintf_r+0x150>
 8006bd0:	9b04      	ldr	r3, [sp, #16]
 8006bd2:	eba0 000a 	sub.w	r0, r0, sl
 8006bd6:	2240      	movs	r2, #64	@ 0x40
 8006bd8:	4082      	lsls	r2, r0
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	3401      	adds	r4, #1
 8006bde:	9304      	str	r3, [sp, #16]
 8006be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006be4:	4824      	ldr	r0, [pc, #144]	@ (8006c78 <_svfiprintf_r+0x1e8>)
 8006be6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006bea:	2206      	movs	r2, #6
 8006bec:	f7f9 fb08 	bl	8000200 <memchr>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d036      	beq.n	8006c62 <_svfiprintf_r+0x1d2>
 8006bf4:	4b21      	ldr	r3, [pc, #132]	@ (8006c7c <_svfiprintf_r+0x1ec>)
 8006bf6:	bb1b      	cbnz	r3, 8006c40 <_svfiprintf_r+0x1b0>
 8006bf8:	9b03      	ldr	r3, [sp, #12]
 8006bfa:	3307      	adds	r3, #7
 8006bfc:	f023 0307 	bic.w	r3, r3, #7
 8006c00:	3308      	adds	r3, #8
 8006c02:	9303      	str	r3, [sp, #12]
 8006c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c06:	4433      	add	r3, r6
 8006c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c0a:	e76a      	b.n	8006ae2 <_svfiprintf_r+0x52>
 8006c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c10:	460c      	mov	r4, r1
 8006c12:	2001      	movs	r0, #1
 8006c14:	e7a8      	b.n	8006b68 <_svfiprintf_r+0xd8>
 8006c16:	2300      	movs	r3, #0
 8006c18:	3401      	adds	r4, #1
 8006c1a:	9305      	str	r3, [sp, #20]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	f04f 0c0a 	mov.w	ip, #10
 8006c22:	4620      	mov	r0, r4
 8006c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c28:	3a30      	subs	r2, #48	@ 0x30
 8006c2a:	2a09      	cmp	r2, #9
 8006c2c:	d903      	bls.n	8006c36 <_svfiprintf_r+0x1a6>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0c6      	beq.n	8006bc0 <_svfiprintf_r+0x130>
 8006c32:	9105      	str	r1, [sp, #20]
 8006c34:	e7c4      	b.n	8006bc0 <_svfiprintf_r+0x130>
 8006c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e7f0      	b.n	8006c22 <_svfiprintf_r+0x192>
 8006c40:	ab03      	add	r3, sp, #12
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	462a      	mov	r2, r5
 8006c46:	4b0e      	ldr	r3, [pc, #56]	@ (8006c80 <_svfiprintf_r+0x1f0>)
 8006c48:	a904      	add	r1, sp, #16
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	f3af 8000 	nop.w
 8006c50:	1c42      	adds	r2, r0, #1
 8006c52:	4606      	mov	r6, r0
 8006c54:	d1d6      	bne.n	8006c04 <_svfiprintf_r+0x174>
 8006c56:	89ab      	ldrh	r3, [r5, #12]
 8006c58:	065b      	lsls	r3, r3, #25
 8006c5a:	f53f af2d 	bmi.w	8006ab8 <_svfiprintf_r+0x28>
 8006c5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c60:	e72c      	b.n	8006abc <_svfiprintf_r+0x2c>
 8006c62:	ab03      	add	r3, sp, #12
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	462a      	mov	r2, r5
 8006c68:	4b05      	ldr	r3, [pc, #20]	@ (8006c80 <_svfiprintf_r+0x1f0>)
 8006c6a:	a904      	add	r1, sp, #16
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	f000 f9bb 	bl	8006fe8 <_printf_i>
 8006c72:	e7ed      	b.n	8006c50 <_svfiprintf_r+0x1c0>
 8006c74:	08007874 	.word	0x08007874
 8006c78:	0800787e 	.word	0x0800787e
 8006c7c:	00000000 	.word	0x00000000
 8006c80:	080069d9 	.word	0x080069d9
 8006c84:	0800787a 	.word	0x0800787a

08006c88 <__sfputc_r>:
 8006c88:	6893      	ldr	r3, [r2, #8]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	b410      	push	{r4}
 8006c90:	6093      	str	r3, [r2, #8]
 8006c92:	da08      	bge.n	8006ca6 <__sfputc_r+0x1e>
 8006c94:	6994      	ldr	r4, [r2, #24]
 8006c96:	42a3      	cmp	r3, r4
 8006c98:	db01      	blt.n	8006c9e <__sfputc_r+0x16>
 8006c9a:	290a      	cmp	r1, #10
 8006c9c:	d103      	bne.n	8006ca6 <__sfputc_r+0x1e>
 8006c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ca2:	f000 bb6b 	b.w	800737c <__swbuf_r>
 8006ca6:	6813      	ldr	r3, [r2, #0]
 8006ca8:	1c58      	adds	r0, r3, #1
 8006caa:	6010      	str	r0, [r2, #0]
 8006cac:	7019      	strb	r1, [r3, #0]
 8006cae:	4608      	mov	r0, r1
 8006cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <__sfputs_r>:
 8006cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb8:	4606      	mov	r6, r0
 8006cba:	460f      	mov	r7, r1
 8006cbc:	4614      	mov	r4, r2
 8006cbe:	18d5      	adds	r5, r2, r3
 8006cc0:	42ac      	cmp	r4, r5
 8006cc2:	d101      	bne.n	8006cc8 <__sfputs_r+0x12>
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	e007      	b.n	8006cd8 <__sfputs_r+0x22>
 8006cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ccc:	463a      	mov	r2, r7
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f7ff ffda 	bl	8006c88 <__sfputc_r>
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	d1f3      	bne.n	8006cc0 <__sfputs_r+0xa>
 8006cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cdc <_vfiprintf_r>:
 8006cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	460d      	mov	r5, r1
 8006ce2:	b09d      	sub	sp, #116	@ 0x74
 8006ce4:	4614      	mov	r4, r2
 8006ce6:	4698      	mov	r8, r3
 8006ce8:	4606      	mov	r6, r0
 8006cea:	b118      	cbz	r0, 8006cf4 <_vfiprintf_r+0x18>
 8006cec:	6a03      	ldr	r3, [r0, #32]
 8006cee:	b90b      	cbnz	r3, 8006cf4 <_vfiprintf_r+0x18>
 8006cf0:	f7ff fc12 	bl	8006518 <__sinit>
 8006cf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cf6:	07d9      	lsls	r1, r3, #31
 8006cf8:	d405      	bmi.n	8006d06 <_vfiprintf_r+0x2a>
 8006cfa:	89ab      	ldrh	r3, [r5, #12]
 8006cfc:	059a      	lsls	r2, r3, #22
 8006cfe:	d402      	bmi.n	8006d06 <_vfiprintf_r+0x2a>
 8006d00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d02:	f7ff fd66 	bl	80067d2 <__retarget_lock_acquire_recursive>
 8006d06:	89ab      	ldrh	r3, [r5, #12]
 8006d08:	071b      	lsls	r3, r3, #28
 8006d0a:	d501      	bpl.n	8006d10 <_vfiprintf_r+0x34>
 8006d0c:	692b      	ldr	r3, [r5, #16]
 8006d0e:	b99b      	cbnz	r3, 8006d38 <_vfiprintf_r+0x5c>
 8006d10:	4629      	mov	r1, r5
 8006d12:	4630      	mov	r0, r6
 8006d14:	f000 fb70 	bl	80073f8 <__swsetup_r>
 8006d18:	b170      	cbz	r0, 8006d38 <_vfiprintf_r+0x5c>
 8006d1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d1c:	07dc      	lsls	r4, r3, #31
 8006d1e:	d504      	bpl.n	8006d2a <_vfiprintf_r+0x4e>
 8006d20:	f04f 30ff 	mov.w	r0, #4294967295
 8006d24:	b01d      	add	sp, #116	@ 0x74
 8006d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d2a:	89ab      	ldrh	r3, [r5, #12]
 8006d2c:	0598      	lsls	r0, r3, #22
 8006d2e:	d4f7      	bmi.n	8006d20 <_vfiprintf_r+0x44>
 8006d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d32:	f7ff fd4f 	bl	80067d4 <__retarget_lock_release_recursive>
 8006d36:	e7f3      	b.n	8006d20 <_vfiprintf_r+0x44>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d3c:	2320      	movs	r3, #32
 8006d3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d42:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d46:	2330      	movs	r3, #48	@ 0x30
 8006d48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006ef8 <_vfiprintf_r+0x21c>
 8006d4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d50:	f04f 0901 	mov.w	r9, #1
 8006d54:	4623      	mov	r3, r4
 8006d56:	469a      	mov	sl, r3
 8006d58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d5c:	b10a      	cbz	r2, 8006d62 <_vfiprintf_r+0x86>
 8006d5e:	2a25      	cmp	r2, #37	@ 0x25
 8006d60:	d1f9      	bne.n	8006d56 <_vfiprintf_r+0x7a>
 8006d62:	ebba 0b04 	subs.w	fp, sl, r4
 8006d66:	d00b      	beq.n	8006d80 <_vfiprintf_r+0xa4>
 8006d68:	465b      	mov	r3, fp
 8006d6a:	4622      	mov	r2, r4
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f7ff ffa1 	bl	8006cb6 <__sfputs_r>
 8006d74:	3001      	adds	r0, #1
 8006d76:	f000 80a7 	beq.w	8006ec8 <_vfiprintf_r+0x1ec>
 8006d7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d7c:	445a      	add	r2, fp
 8006d7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d80:	f89a 3000 	ldrb.w	r3, [sl]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 809f 	beq.w	8006ec8 <_vfiprintf_r+0x1ec>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d94:	f10a 0a01 	add.w	sl, sl, #1
 8006d98:	9304      	str	r3, [sp, #16]
 8006d9a:	9307      	str	r3, [sp, #28]
 8006d9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006da0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006da2:	4654      	mov	r4, sl
 8006da4:	2205      	movs	r2, #5
 8006da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006daa:	4853      	ldr	r0, [pc, #332]	@ (8006ef8 <_vfiprintf_r+0x21c>)
 8006dac:	f7f9 fa28 	bl	8000200 <memchr>
 8006db0:	9a04      	ldr	r2, [sp, #16]
 8006db2:	b9d8      	cbnz	r0, 8006dec <_vfiprintf_r+0x110>
 8006db4:	06d1      	lsls	r1, r2, #27
 8006db6:	bf44      	itt	mi
 8006db8:	2320      	movmi	r3, #32
 8006dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dbe:	0713      	lsls	r3, r2, #28
 8006dc0:	bf44      	itt	mi
 8006dc2:	232b      	movmi	r3, #43	@ 0x2b
 8006dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8006dcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dce:	d015      	beq.n	8006dfc <_vfiprintf_r+0x120>
 8006dd0:	9a07      	ldr	r2, [sp, #28]
 8006dd2:	4654      	mov	r4, sl
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	f04f 0c0a 	mov.w	ip, #10
 8006dda:	4621      	mov	r1, r4
 8006ddc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006de0:	3b30      	subs	r3, #48	@ 0x30
 8006de2:	2b09      	cmp	r3, #9
 8006de4:	d94b      	bls.n	8006e7e <_vfiprintf_r+0x1a2>
 8006de6:	b1b0      	cbz	r0, 8006e16 <_vfiprintf_r+0x13a>
 8006de8:	9207      	str	r2, [sp, #28]
 8006dea:	e014      	b.n	8006e16 <_vfiprintf_r+0x13a>
 8006dec:	eba0 0308 	sub.w	r3, r0, r8
 8006df0:	fa09 f303 	lsl.w	r3, r9, r3
 8006df4:	4313      	orrs	r3, r2
 8006df6:	9304      	str	r3, [sp, #16]
 8006df8:	46a2      	mov	sl, r4
 8006dfa:	e7d2      	b.n	8006da2 <_vfiprintf_r+0xc6>
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	1d19      	adds	r1, r3, #4
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	9103      	str	r1, [sp, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	bfbb      	ittet	lt
 8006e08:	425b      	neglt	r3, r3
 8006e0a:	f042 0202 	orrlt.w	r2, r2, #2
 8006e0e:	9307      	strge	r3, [sp, #28]
 8006e10:	9307      	strlt	r3, [sp, #28]
 8006e12:	bfb8      	it	lt
 8006e14:	9204      	strlt	r2, [sp, #16]
 8006e16:	7823      	ldrb	r3, [r4, #0]
 8006e18:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e1a:	d10a      	bne.n	8006e32 <_vfiprintf_r+0x156>
 8006e1c:	7863      	ldrb	r3, [r4, #1]
 8006e1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e20:	d132      	bne.n	8006e88 <_vfiprintf_r+0x1ac>
 8006e22:	9b03      	ldr	r3, [sp, #12]
 8006e24:	1d1a      	adds	r2, r3, #4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	9203      	str	r2, [sp, #12]
 8006e2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e2e:	3402      	adds	r4, #2
 8006e30:	9305      	str	r3, [sp, #20]
 8006e32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006f08 <_vfiprintf_r+0x22c>
 8006e36:	7821      	ldrb	r1, [r4, #0]
 8006e38:	2203      	movs	r2, #3
 8006e3a:	4650      	mov	r0, sl
 8006e3c:	f7f9 f9e0 	bl	8000200 <memchr>
 8006e40:	b138      	cbz	r0, 8006e52 <_vfiprintf_r+0x176>
 8006e42:	9b04      	ldr	r3, [sp, #16]
 8006e44:	eba0 000a 	sub.w	r0, r0, sl
 8006e48:	2240      	movs	r2, #64	@ 0x40
 8006e4a:	4082      	lsls	r2, r0
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	3401      	adds	r4, #1
 8006e50:	9304      	str	r3, [sp, #16]
 8006e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e56:	4829      	ldr	r0, [pc, #164]	@ (8006efc <_vfiprintf_r+0x220>)
 8006e58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e5c:	2206      	movs	r2, #6
 8006e5e:	f7f9 f9cf 	bl	8000200 <memchr>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d03f      	beq.n	8006ee6 <_vfiprintf_r+0x20a>
 8006e66:	4b26      	ldr	r3, [pc, #152]	@ (8006f00 <_vfiprintf_r+0x224>)
 8006e68:	bb1b      	cbnz	r3, 8006eb2 <_vfiprintf_r+0x1d6>
 8006e6a:	9b03      	ldr	r3, [sp, #12]
 8006e6c:	3307      	adds	r3, #7
 8006e6e:	f023 0307 	bic.w	r3, r3, #7
 8006e72:	3308      	adds	r3, #8
 8006e74:	9303      	str	r3, [sp, #12]
 8006e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e78:	443b      	add	r3, r7
 8006e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e7c:	e76a      	b.n	8006d54 <_vfiprintf_r+0x78>
 8006e7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e82:	460c      	mov	r4, r1
 8006e84:	2001      	movs	r0, #1
 8006e86:	e7a8      	b.n	8006dda <_vfiprintf_r+0xfe>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	3401      	adds	r4, #1
 8006e8c:	9305      	str	r3, [sp, #20]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	f04f 0c0a 	mov.w	ip, #10
 8006e94:	4620      	mov	r0, r4
 8006e96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e9a:	3a30      	subs	r2, #48	@ 0x30
 8006e9c:	2a09      	cmp	r2, #9
 8006e9e:	d903      	bls.n	8006ea8 <_vfiprintf_r+0x1cc>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0c6      	beq.n	8006e32 <_vfiprintf_r+0x156>
 8006ea4:	9105      	str	r1, [sp, #20]
 8006ea6:	e7c4      	b.n	8006e32 <_vfiprintf_r+0x156>
 8006ea8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eac:	4604      	mov	r4, r0
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e7f0      	b.n	8006e94 <_vfiprintf_r+0x1b8>
 8006eb2:	ab03      	add	r3, sp, #12
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	462a      	mov	r2, r5
 8006eb8:	4b12      	ldr	r3, [pc, #72]	@ (8006f04 <_vfiprintf_r+0x228>)
 8006eba:	a904      	add	r1, sp, #16
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	f3af 8000 	nop.w
 8006ec2:	4607      	mov	r7, r0
 8006ec4:	1c78      	adds	r0, r7, #1
 8006ec6:	d1d6      	bne.n	8006e76 <_vfiprintf_r+0x19a>
 8006ec8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006eca:	07d9      	lsls	r1, r3, #31
 8006ecc:	d405      	bmi.n	8006eda <_vfiprintf_r+0x1fe>
 8006ece:	89ab      	ldrh	r3, [r5, #12]
 8006ed0:	059a      	lsls	r2, r3, #22
 8006ed2:	d402      	bmi.n	8006eda <_vfiprintf_r+0x1fe>
 8006ed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ed6:	f7ff fc7d 	bl	80067d4 <__retarget_lock_release_recursive>
 8006eda:	89ab      	ldrh	r3, [r5, #12]
 8006edc:	065b      	lsls	r3, r3, #25
 8006ede:	f53f af1f 	bmi.w	8006d20 <_vfiprintf_r+0x44>
 8006ee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ee4:	e71e      	b.n	8006d24 <_vfiprintf_r+0x48>
 8006ee6:	ab03      	add	r3, sp, #12
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	462a      	mov	r2, r5
 8006eec:	4b05      	ldr	r3, [pc, #20]	@ (8006f04 <_vfiprintf_r+0x228>)
 8006eee:	a904      	add	r1, sp, #16
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f000 f879 	bl	8006fe8 <_printf_i>
 8006ef6:	e7e4      	b.n	8006ec2 <_vfiprintf_r+0x1e6>
 8006ef8:	08007874 	.word	0x08007874
 8006efc:	0800787e 	.word	0x0800787e
 8006f00:	00000000 	.word	0x00000000
 8006f04:	08006cb7 	.word	0x08006cb7
 8006f08:	0800787a 	.word	0x0800787a

08006f0c <_printf_common>:
 8006f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f10:	4616      	mov	r6, r2
 8006f12:	4698      	mov	r8, r3
 8006f14:	688a      	ldr	r2, [r1, #8]
 8006f16:	690b      	ldr	r3, [r1, #16]
 8006f18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	bfb8      	it	lt
 8006f20:	4613      	movlt	r3, r2
 8006f22:	6033      	str	r3, [r6, #0]
 8006f24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f28:	4607      	mov	r7, r0
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	b10a      	cbz	r2, 8006f32 <_printf_common+0x26>
 8006f2e:	3301      	adds	r3, #1
 8006f30:	6033      	str	r3, [r6, #0]
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	0699      	lsls	r1, r3, #26
 8006f36:	bf42      	ittt	mi
 8006f38:	6833      	ldrmi	r3, [r6, #0]
 8006f3a:	3302      	addmi	r3, #2
 8006f3c:	6033      	strmi	r3, [r6, #0]
 8006f3e:	6825      	ldr	r5, [r4, #0]
 8006f40:	f015 0506 	ands.w	r5, r5, #6
 8006f44:	d106      	bne.n	8006f54 <_printf_common+0x48>
 8006f46:	f104 0a19 	add.w	sl, r4, #25
 8006f4a:	68e3      	ldr	r3, [r4, #12]
 8006f4c:	6832      	ldr	r2, [r6, #0]
 8006f4e:	1a9b      	subs	r3, r3, r2
 8006f50:	42ab      	cmp	r3, r5
 8006f52:	dc26      	bgt.n	8006fa2 <_printf_common+0x96>
 8006f54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f58:	6822      	ldr	r2, [r4, #0]
 8006f5a:	3b00      	subs	r3, #0
 8006f5c:	bf18      	it	ne
 8006f5e:	2301      	movne	r3, #1
 8006f60:	0692      	lsls	r2, r2, #26
 8006f62:	d42b      	bmi.n	8006fbc <_printf_common+0xb0>
 8006f64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f68:	4641      	mov	r1, r8
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	47c8      	blx	r9
 8006f6e:	3001      	adds	r0, #1
 8006f70:	d01e      	beq.n	8006fb0 <_printf_common+0xa4>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	6922      	ldr	r2, [r4, #16]
 8006f76:	f003 0306 	and.w	r3, r3, #6
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	bf02      	ittt	eq
 8006f7e:	68e5      	ldreq	r5, [r4, #12]
 8006f80:	6833      	ldreq	r3, [r6, #0]
 8006f82:	1aed      	subeq	r5, r5, r3
 8006f84:	68a3      	ldr	r3, [r4, #8]
 8006f86:	bf0c      	ite	eq
 8006f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f8c:	2500      	movne	r5, #0
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	bfc4      	itt	gt
 8006f92:	1a9b      	subgt	r3, r3, r2
 8006f94:	18ed      	addgt	r5, r5, r3
 8006f96:	2600      	movs	r6, #0
 8006f98:	341a      	adds	r4, #26
 8006f9a:	42b5      	cmp	r5, r6
 8006f9c:	d11a      	bne.n	8006fd4 <_printf_common+0xc8>
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	e008      	b.n	8006fb4 <_printf_common+0xa8>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	4652      	mov	r2, sl
 8006fa6:	4641      	mov	r1, r8
 8006fa8:	4638      	mov	r0, r7
 8006faa:	47c8      	blx	r9
 8006fac:	3001      	adds	r0, #1
 8006fae:	d103      	bne.n	8006fb8 <_printf_common+0xac>
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb8:	3501      	adds	r5, #1
 8006fba:	e7c6      	b.n	8006f4a <_printf_common+0x3e>
 8006fbc:	18e1      	adds	r1, r4, r3
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	2030      	movs	r0, #48	@ 0x30
 8006fc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fc6:	4422      	add	r2, r4
 8006fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fd0:	3302      	adds	r3, #2
 8006fd2:	e7c7      	b.n	8006f64 <_printf_common+0x58>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	4641      	mov	r1, r8
 8006fda:	4638      	mov	r0, r7
 8006fdc:	47c8      	blx	r9
 8006fde:	3001      	adds	r0, #1
 8006fe0:	d0e6      	beq.n	8006fb0 <_printf_common+0xa4>
 8006fe2:	3601      	adds	r6, #1
 8006fe4:	e7d9      	b.n	8006f9a <_printf_common+0x8e>
	...

08006fe8 <_printf_i>:
 8006fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fec:	7e0f      	ldrb	r7, [r1, #24]
 8006fee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ff0:	2f78      	cmp	r7, #120	@ 0x78
 8006ff2:	4691      	mov	r9, r2
 8006ff4:	4680      	mov	r8, r0
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	469a      	mov	sl, r3
 8006ffa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ffe:	d807      	bhi.n	8007010 <_printf_i+0x28>
 8007000:	2f62      	cmp	r7, #98	@ 0x62
 8007002:	d80a      	bhi.n	800701a <_printf_i+0x32>
 8007004:	2f00      	cmp	r7, #0
 8007006:	f000 80d1 	beq.w	80071ac <_printf_i+0x1c4>
 800700a:	2f58      	cmp	r7, #88	@ 0x58
 800700c:	f000 80b8 	beq.w	8007180 <_printf_i+0x198>
 8007010:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007014:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007018:	e03a      	b.n	8007090 <_printf_i+0xa8>
 800701a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800701e:	2b15      	cmp	r3, #21
 8007020:	d8f6      	bhi.n	8007010 <_printf_i+0x28>
 8007022:	a101      	add	r1, pc, #4	@ (adr r1, 8007028 <_printf_i+0x40>)
 8007024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007028:	08007081 	.word	0x08007081
 800702c:	08007095 	.word	0x08007095
 8007030:	08007011 	.word	0x08007011
 8007034:	08007011 	.word	0x08007011
 8007038:	08007011 	.word	0x08007011
 800703c:	08007011 	.word	0x08007011
 8007040:	08007095 	.word	0x08007095
 8007044:	08007011 	.word	0x08007011
 8007048:	08007011 	.word	0x08007011
 800704c:	08007011 	.word	0x08007011
 8007050:	08007011 	.word	0x08007011
 8007054:	08007193 	.word	0x08007193
 8007058:	080070bf 	.word	0x080070bf
 800705c:	0800714d 	.word	0x0800714d
 8007060:	08007011 	.word	0x08007011
 8007064:	08007011 	.word	0x08007011
 8007068:	080071b5 	.word	0x080071b5
 800706c:	08007011 	.word	0x08007011
 8007070:	080070bf 	.word	0x080070bf
 8007074:	08007011 	.word	0x08007011
 8007078:	08007011 	.word	0x08007011
 800707c:	08007155 	.word	0x08007155
 8007080:	6833      	ldr	r3, [r6, #0]
 8007082:	1d1a      	adds	r2, r3, #4
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6032      	str	r2, [r6, #0]
 8007088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800708c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007090:	2301      	movs	r3, #1
 8007092:	e09c      	b.n	80071ce <_printf_i+0x1e6>
 8007094:	6833      	ldr	r3, [r6, #0]
 8007096:	6820      	ldr	r0, [r4, #0]
 8007098:	1d19      	adds	r1, r3, #4
 800709a:	6031      	str	r1, [r6, #0]
 800709c:	0606      	lsls	r6, r0, #24
 800709e:	d501      	bpl.n	80070a4 <_printf_i+0xbc>
 80070a0:	681d      	ldr	r5, [r3, #0]
 80070a2:	e003      	b.n	80070ac <_printf_i+0xc4>
 80070a4:	0645      	lsls	r5, r0, #25
 80070a6:	d5fb      	bpl.n	80070a0 <_printf_i+0xb8>
 80070a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070ac:	2d00      	cmp	r5, #0
 80070ae:	da03      	bge.n	80070b8 <_printf_i+0xd0>
 80070b0:	232d      	movs	r3, #45	@ 0x2d
 80070b2:	426d      	negs	r5, r5
 80070b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070b8:	4858      	ldr	r0, [pc, #352]	@ (800721c <_printf_i+0x234>)
 80070ba:	230a      	movs	r3, #10
 80070bc:	e011      	b.n	80070e2 <_printf_i+0xfa>
 80070be:	6821      	ldr	r1, [r4, #0]
 80070c0:	6833      	ldr	r3, [r6, #0]
 80070c2:	0608      	lsls	r0, r1, #24
 80070c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80070c8:	d402      	bmi.n	80070d0 <_printf_i+0xe8>
 80070ca:	0649      	lsls	r1, r1, #25
 80070cc:	bf48      	it	mi
 80070ce:	b2ad      	uxthmi	r5, r5
 80070d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80070d2:	4852      	ldr	r0, [pc, #328]	@ (800721c <_printf_i+0x234>)
 80070d4:	6033      	str	r3, [r6, #0]
 80070d6:	bf14      	ite	ne
 80070d8:	230a      	movne	r3, #10
 80070da:	2308      	moveq	r3, #8
 80070dc:	2100      	movs	r1, #0
 80070de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070e2:	6866      	ldr	r6, [r4, #4]
 80070e4:	60a6      	str	r6, [r4, #8]
 80070e6:	2e00      	cmp	r6, #0
 80070e8:	db05      	blt.n	80070f6 <_printf_i+0x10e>
 80070ea:	6821      	ldr	r1, [r4, #0]
 80070ec:	432e      	orrs	r6, r5
 80070ee:	f021 0104 	bic.w	r1, r1, #4
 80070f2:	6021      	str	r1, [r4, #0]
 80070f4:	d04b      	beq.n	800718e <_printf_i+0x1a6>
 80070f6:	4616      	mov	r6, r2
 80070f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80070fc:	fb03 5711 	mls	r7, r3, r1, r5
 8007100:	5dc7      	ldrb	r7, [r0, r7]
 8007102:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007106:	462f      	mov	r7, r5
 8007108:	42bb      	cmp	r3, r7
 800710a:	460d      	mov	r5, r1
 800710c:	d9f4      	bls.n	80070f8 <_printf_i+0x110>
 800710e:	2b08      	cmp	r3, #8
 8007110:	d10b      	bne.n	800712a <_printf_i+0x142>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	07df      	lsls	r7, r3, #31
 8007116:	d508      	bpl.n	800712a <_printf_i+0x142>
 8007118:	6923      	ldr	r3, [r4, #16]
 800711a:	6861      	ldr	r1, [r4, #4]
 800711c:	4299      	cmp	r1, r3
 800711e:	bfde      	ittt	le
 8007120:	2330      	movle	r3, #48	@ 0x30
 8007122:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007126:	f106 36ff 	addle.w	r6, r6, #4294967295
 800712a:	1b92      	subs	r2, r2, r6
 800712c:	6122      	str	r2, [r4, #16]
 800712e:	f8cd a000 	str.w	sl, [sp]
 8007132:	464b      	mov	r3, r9
 8007134:	aa03      	add	r2, sp, #12
 8007136:	4621      	mov	r1, r4
 8007138:	4640      	mov	r0, r8
 800713a:	f7ff fee7 	bl	8006f0c <_printf_common>
 800713e:	3001      	adds	r0, #1
 8007140:	d14a      	bne.n	80071d8 <_printf_i+0x1f0>
 8007142:	f04f 30ff 	mov.w	r0, #4294967295
 8007146:	b004      	add	sp, #16
 8007148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	f043 0320 	orr.w	r3, r3, #32
 8007152:	6023      	str	r3, [r4, #0]
 8007154:	4832      	ldr	r0, [pc, #200]	@ (8007220 <_printf_i+0x238>)
 8007156:	2778      	movs	r7, #120	@ 0x78
 8007158:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	6831      	ldr	r1, [r6, #0]
 8007160:	061f      	lsls	r7, r3, #24
 8007162:	f851 5b04 	ldr.w	r5, [r1], #4
 8007166:	d402      	bmi.n	800716e <_printf_i+0x186>
 8007168:	065f      	lsls	r7, r3, #25
 800716a:	bf48      	it	mi
 800716c:	b2ad      	uxthmi	r5, r5
 800716e:	6031      	str	r1, [r6, #0]
 8007170:	07d9      	lsls	r1, r3, #31
 8007172:	bf44      	itt	mi
 8007174:	f043 0320 	orrmi.w	r3, r3, #32
 8007178:	6023      	strmi	r3, [r4, #0]
 800717a:	b11d      	cbz	r5, 8007184 <_printf_i+0x19c>
 800717c:	2310      	movs	r3, #16
 800717e:	e7ad      	b.n	80070dc <_printf_i+0xf4>
 8007180:	4826      	ldr	r0, [pc, #152]	@ (800721c <_printf_i+0x234>)
 8007182:	e7e9      	b.n	8007158 <_printf_i+0x170>
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	f023 0320 	bic.w	r3, r3, #32
 800718a:	6023      	str	r3, [r4, #0]
 800718c:	e7f6      	b.n	800717c <_printf_i+0x194>
 800718e:	4616      	mov	r6, r2
 8007190:	e7bd      	b.n	800710e <_printf_i+0x126>
 8007192:	6833      	ldr	r3, [r6, #0]
 8007194:	6825      	ldr	r5, [r4, #0]
 8007196:	6961      	ldr	r1, [r4, #20]
 8007198:	1d18      	adds	r0, r3, #4
 800719a:	6030      	str	r0, [r6, #0]
 800719c:	062e      	lsls	r6, r5, #24
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	d501      	bpl.n	80071a6 <_printf_i+0x1be>
 80071a2:	6019      	str	r1, [r3, #0]
 80071a4:	e002      	b.n	80071ac <_printf_i+0x1c4>
 80071a6:	0668      	lsls	r0, r5, #25
 80071a8:	d5fb      	bpl.n	80071a2 <_printf_i+0x1ba>
 80071aa:	8019      	strh	r1, [r3, #0]
 80071ac:	2300      	movs	r3, #0
 80071ae:	6123      	str	r3, [r4, #16]
 80071b0:	4616      	mov	r6, r2
 80071b2:	e7bc      	b.n	800712e <_printf_i+0x146>
 80071b4:	6833      	ldr	r3, [r6, #0]
 80071b6:	1d1a      	adds	r2, r3, #4
 80071b8:	6032      	str	r2, [r6, #0]
 80071ba:	681e      	ldr	r6, [r3, #0]
 80071bc:	6862      	ldr	r2, [r4, #4]
 80071be:	2100      	movs	r1, #0
 80071c0:	4630      	mov	r0, r6
 80071c2:	f7f9 f81d 	bl	8000200 <memchr>
 80071c6:	b108      	cbz	r0, 80071cc <_printf_i+0x1e4>
 80071c8:	1b80      	subs	r0, r0, r6
 80071ca:	6060      	str	r0, [r4, #4]
 80071cc:	6863      	ldr	r3, [r4, #4]
 80071ce:	6123      	str	r3, [r4, #16]
 80071d0:	2300      	movs	r3, #0
 80071d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071d6:	e7aa      	b.n	800712e <_printf_i+0x146>
 80071d8:	6923      	ldr	r3, [r4, #16]
 80071da:	4632      	mov	r2, r6
 80071dc:	4649      	mov	r1, r9
 80071de:	4640      	mov	r0, r8
 80071e0:	47d0      	blx	sl
 80071e2:	3001      	adds	r0, #1
 80071e4:	d0ad      	beq.n	8007142 <_printf_i+0x15a>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	079b      	lsls	r3, r3, #30
 80071ea:	d413      	bmi.n	8007214 <_printf_i+0x22c>
 80071ec:	68e0      	ldr	r0, [r4, #12]
 80071ee:	9b03      	ldr	r3, [sp, #12]
 80071f0:	4298      	cmp	r0, r3
 80071f2:	bfb8      	it	lt
 80071f4:	4618      	movlt	r0, r3
 80071f6:	e7a6      	b.n	8007146 <_printf_i+0x15e>
 80071f8:	2301      	movs	r3, #1
 80071fa:	4632      	mov	r2, r6
 80071fc:	4649      	mov	r1, r9
 80071fe:	4640      	mov	r0, r8
 8007200:	47d0      	blx	sl
 8007202:	3001      	adds	r0, #1
 8007204:	d09d      	beq.n	8007142 <_printf_i+0x15a>
 8007206:	3501      	adds	r5, #1
 8007208:	68e3      	ldr	r3, [r4, #12]
 800720a:	9903      	ldr	r1, [sp, #12]
 800720c:	1a5b      	subs	r3, r3, r1
 800720e:	42ab      	cmp	r3, r5
 8007210:	dcf2      	bgt.n	80071f8 <_printf_i+0x210>
 8007212:	e7eb      	b.n	80071ec <_printf_i+0x204>
 8007214:	2500      	movs	r5, #0
 8007216:	f104 0619 	add.w	r6, r4, #25
 800721a:	e7f5      	b.n	8007208 <_printf_i+0x220>
 800721c:	08007885 	.word	0x08007885
 8007220:	08007896 	.word	0x08007896

08007224 <__sflush_r>:
 8007224:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800722c:	0716      	lsls	r6, r2, #28
 800722e:	4605      	mov	r5, r0
 8007230:	460c      	mov	r4, r1
 8007232:	d454      	bmi.n	80072de <__sflush_r+0xba>
 8007234:	684b      	ldr	r3, [r1, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	dc02      	bgt.n	8007240 <__sflush_r+0x1c>
 800723a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800723c:	2b00      	cmp	r3, #0
 800723e:	dd48      	ble.n	80072d2 <__sflush_r+0xae>
 8007240:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007242:	2e00      	cmp	r6, #0
 8007244:	d045      	beq.n	80072d2 <__sflush_r+0xae>
 8007246:	2300      	movs	r3, #0
 8007248:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800724c:	682f      	ldr	r7, [r5, #0]
 800724e:	6a21      	ldr	r1, [r4, #32]
 8007250:	602b      	str	r3, [r5, #0]
 8007252:	d030      	beq.n	80072b6 <__sflush_r+0x92>
 8007254:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	0759      	lsls	r1, r3, #29
 800725a:	d505      	bpl.n	8007268 <__sflush_r+0x44>
 800725c:	6863      	ldr	r3, [r4, #4]
 800725e:	1ad2      	subs	r2, r2, r3
 8007260:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007262:	b10b      	cbz	r3, 8007268 <__sflush_r+0x44>
 8007264:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007266:	1ad2      	subs	r2, r2, r3
 8007268:	2300      	movs	r3, #0
 800726a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800726c:	6a21      	ldr	r1, [r4, #32]
 800726e:	4628      	mov	r0, r5
 8007270:	47b0      	blx	r6
 8007272:	1c43      	adds	r3, r0, #1
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	d106      	bne.n	8007286 <__sflush_r+0x62>
 8007278:	6829      	ldr	r1, [r5, #0]
 800727a:	291d      	cmp	r1, #29
 800727c:	d82b      	bhi.n	80072d6 <__sflush_r+0xb2>
 800727e:	4a2a      	ldr	r2, [pc, #168]	@ (8007328 <__sflush_r+0x104>)
 8007280:	40ca      	lsrs	r2, r1
 8007282:	07d6      	lsls	r6, r2, #31
 8007284:	d527      	bpl.n	80072d6 <__sflush_r+0xb2>
 8007286:	2200      	movs	r2, #0
 8007288:	6062      	str	r2, [r4, #4]
 800728a:	04d9      	lsls	r1, r3, #19
 800728c:	6922      	ldr	r2, [r4, #16]
 800728e:	6022      	str	r2, [r4, #0]
 8007290:	d504      	bpl.n	800729c <__sflush_r+0x78>
 8007292:	1c42      	adds	r2, r0, #1
 8007294:	d101      	bne.n	800729a <__sflush_r+0x76>
 8007296:	682b      	ldr	r3, [r5, #0]
 8007298:	b903      	cbnz	r3, 800729c <__sflush_r+0x78>
 800729a:	6560      	str	r0, [r4, #84]	@ 0x54
 800729c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800729e:	602f      	str	r7, [r5, #0]
 80072a0:	b1b9      	cbz	r1, 80072d2 <__sflush_r+0xae>
 80072a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072a6:	4299      	cmp	r1, r3
 80072a8:	d002      	beq.n	80072b0 <__sflush_r+0x8c>
 80072aa:	4628      	mov	r0, r5
 80072ac:	f7ff fa9c 	bl	80067e8 <_free_r>
 80072b0:	2300      	movs	r3, #0
 80072b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80072b4:	e00d      	b.n	80072d2 <__sflush_r+0xae>
 80072b6:	2301      	movs	r3, #1
 80072b8:	4628      	mov	r0, r5
 80072ba:	47b0      	blx	r6
 80072bc:	4602      	mov	r2, r0
 80072be:	1c50      	adds	r0, r2, #1
 80072c0:	d1c9      	bne.n	8007256 <__sflush_r+0x32>
 80072c2:	682b      	ldr	r3, [r5, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0c6      	beq.n	8007256 <__sflush_r+0x32>
 80072c8:	2b1d      	cmp	r3, #29
 80072ca:	d001      	beq.n	80072d0 <__sflush_r+0xac>
 80072cc:	2b16      	cmp	r3, #22
 80072ce:	d11e      	bne.n	800730e <__sflush_r+0xea>
 80072d0:	602f      	str	r7, [r5, #0]
 80072d2:	2000      	movs	r0, #0
 80072d4:	e022      	b.n	800731c <__sflush_r+0xf8>
 80072d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072da:	b21b      	sxth	r3, r3
 80072dc:	e01b      	b.n	8007316 <__sflush_r+0xf2>
 80072de:	690f      	ldr	r7, [r1, #16]
 80072e0:	2f00      	cmp	r7, #0
 80072e2:	d0f6      	beq.n	80072d2 <__sflush_r+0xae>
 80072e4:	0793      	lsls	r3, r2, #30
 80072e6:	680e      	ldr	r6, [r1, #0]
 80072e8:	bf08      	it	eq
 80072ea:	694b      	ldreq	r3, [r1, #20]
 80072ec:	600f      	str	r7, [r1, #0]
 80072ee:	bf18      	it	ne
 80072f0:	2300      	movne	r3, #0
 80072f2:	eba6 0807 	sub.w	r8, r6, r7
 80072f6:	608b      	str	r3, [r1, #8]
 80072f8:	f1b8 0f00 	cmp.w	r8, #0
 80072fc:	dde9      	ble.n	80072d2 <__sflush_r+0xae>
 80072fe:	6a21      	ldr	r1, [r4, #32]
 8007300:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007302:	4643      	mov	r3, r8
 8007304:	463a      	mov	r2, r7
 8007306:	4628      	mov	r0, r5
 8007308:	47b0      	blx	r6
 800730a:	2800      	cmp	r0, #0
 800730c:	dc08      	bgt.n	8007320 <__sflush_r+0xfc>
 800730e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007316:	81a3      	strh	r3, [r4, #12]
 8007318:	f04f 30ff 	mov.w	r0, #4294967295
 800731c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007320:	4407      	add	r7, r0
 8007322:	eba8 0800 	sub.w	r8, r8, r0
 8007326:	e7e7      	b.n	80072f8 <__sflush_r+0xd4>
 8007328:	20400001 	.word	0x20400001

0800732c <_fflush_r>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	690b      	ldr	r3, [r1, #16]
 8007330:	4605      	mov	r5, r0
 8007332:	460c      	mov	r4, r1
 8007334:	b913      	cbnz	r3, 800733c <_fflush_r+0x10>
 8007336:	2500      	movs	r5, #0
 8007338:	4628      	mov	r0, r5
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	b118      	cbz	r0, 8007346 <_fflush_r+0x1a>
 800733e:	6a03      	ldr	r3, [r0, #32]
 8007340:	b90b      	cbnz	r3, 8007346 <_fflush_r+0x1a>
 8007342:	f7ff f8e9 	bl	8006518 <__sinit>
 8007346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0f3      	beq.n	8007336 <_fflush_r+0xa>
 800734e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007350:	07d0      	lsls	r0, r2, #31
 8007352:	d404      	bmi.n	800735e <_fflush_r+0x32>
 8007354:	0599      	lsls	r1, r3, #22
 8007356:	d402      	bmi.n	800735e <_fflush_r+0x32>
 8007358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800735a:	f7ff fa3a 	bl	80067d2 <__retarget_lock_acquire_recursive>
 800735e:	4628      	mov	r0, r5
 8007360:	4621      	mov	r1, r4
 8007362:	f7ff ff5f 	bl	8007224 <__sflush_r>
 8007366:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007368:	07da      	lsls	r2, r3, #31
 800736a:	4605      	mov	r5, r0
 800736c:	d4e4      	bmi.n	8007338 <_fflush_r+0xc>
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	059b      	lsls	r3, r3, #22
 8007372:	d4e1      	bmi.n	8007338 <_fflush_r+0xc>
 8007374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007376:	f7ff fa2d 	bl	80067d4 <__retarget_lock_release_recursive>
 800737a:	e7dd      	b.n	8007338 <_fflush_r+0xc>

0800737c <__swbuf_r>:
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	460e      	mov	r6, r1
 8007380:	4614      	mov	r4, r2
 8007382:	4605      	mov	r5, r0
 8007384:	b118      	cbz	r0, 800738e <__swbuf_r+0x12>
 8007386:	6a03      	ldr	r3, [r0, #32]
 8007388:	b90b      	cbnz	r3, 800738e <__swbuf_r+0x12>
 800738a:	f7ff f8c5 	bl	8006518 <__sinit>
 800738e:	69a3      	ldr	r3, [r4, #24]
 8007390:	60a3      	str	r3, [r4, #8]
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	071a      	lsls	r2, r3, #28
 8007396:	d501      	bpl.n	800739c <__swbuf_r+0x20>
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	b943      	cbnz	r3, 80073ae <__swbuf_r+0x32>
 800739c:	4621      	mov	r1, r4
 800739e:	4628      	mov	r0, r5
 80073a0:	f000 f82a 	bl	80073f8 <__swsetup_r>
 80073a4:	b118      	cbz	r0, 80073ae <__swbuf_r+0x32>
 80073a6:	f04f 37ff 	mov.w	r7, #4294967295
 80073aa:	4638      	mov	r0, r7
 80073ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	6922      	ldr	r2, [r4, #16]
 80073b2:	1a98      	subs	r0, r3, r2
 80073b4:	6963      	ldr	r3, [r4, #20]
 80073b6:	b2f6      	uxtb	r6, r6
 80073b8:	4283      	cmp	r3, r0
 80073ba:	4637      	mov	r7, r6
 80073bc:	dc05      	bgt.n	80073ca <__swbuf_r+0x4e>
 80073be:	4621      	mov	r1, r4
 80073c0:	4628      	mov	r0, r5
 80073c2:	f7ff ffb3 	bl	800732c <_fflush_r>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	d1ed      	bne.n	80073a6 <__swbuf_r+0x2a>
 80073ca:	68a3      	ldr	r3, [r4, #8]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	60a3      	str	r3, [r4, #8]
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	6022      	str	r2, [r4, #0]
 80073d6:	701e      	strb	r6, [r3, #0]
 80073d8:	6962      	ldr	r2, [r4, #20]
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	429a      	cmp	r2, r3
 80073de:	d004      	beq.n	80073ea <__swbuf_r+0x6e>
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	07db      	lsls	r3, r3, #31
 80073e4:	d5e1      	bpl.n	80073aa <__swbuf_r+0x2e>
 80073e6:	2e0a      	cmp	r6, #10
 80073e8:	d1df      	bne.n	80073aa <__swbuf_r+0x2e>
 80073ea:	4621      	mov	r1, r4
 80073ec:	4628      	mov	r0, r5
 80073ee:	f7ff ff9d 	bl	800732c <_fflush_r>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d0d9      	beq.n	80073aa <__swbuf_r+0x2e>
 80073f6:	e7d6      	b.n	80073a6 <__swbuf_r+0x2a>

080073f8 <__swsetup_r>:
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	4b29      	ldr	r3, [pc, #164]	@ (80074a0 <__swsetup_r+0xa8>)
 80073fc:	4605      	mov	r5, r0
 80073fe:	6818      	ldr	r0, [r3, #0]
 8007400:	460c      	mov	r4, r1
 8007402:	b118      	cbz	r0, 800740c <__swsetup_r+0x14>
 8007404:	6a03      	ldr	r3, [r0, #32]
 8007406:	b90b      	cbnz	r3, 800740c <__swsetup_r+0x14>
 8007408:	f7ff f886 	bl	8006518 <__sinit>
 800740c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007410:	0719      	lsls	r1, r3, #28
 8007412:	d422      	bmi.n	800745a <__swsetup_r+0x62>
 8007414:	06da      	lsls	r2, r3, #27
 8007416:	d407      	bmi.n	8007428 <__swsetup_r+0x30>
 8007418:	2209      	movs	r2, #9
 800741a:	602a      	str	r2, [r5, #0]
 800741c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007420:	81a3      	strh	r3, [r4, #12]
 8007422:	f04f 30ff 	mov.w	r0, #4294967295
 8007426:	e033      	b.n	8007490 <__swsetup_r+0x98>
 8007428:	0758      	lsls	r0, r3, #29
 800742a:	d512      	bpl.n	8007452 <__swsetup_r+0x5a>
 800742c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800742e:	b141      	cbz	r1, 8007442 <__swsetup_r+0x4a>
 8007430:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007434:	4299      	cmp	r1, r3
 8007436:	d002      	beq.n	800743e <__swsetup_r+0x46>
 8007438:	4628      	mov	r0, r5
 800743a:	f7ff f9d5 	bl	80067e8 <_free_r>
 800743e:	2300      	movs	r3, #0
 8007440:	6363      	str	r3, [r4, #52]	@ 0x34
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007448:	81a3      	strh	r3, [r4, #12]
 800744a:	2300      	movs	r3, #0
 800744c:	6063      	str	r3, [r4, #4]
 800744e:	6923      	ldr	r3, [r4, #16]
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	89a3      	ldrh	r3, [r4, #12]
 8007454:	f043 0308 	orr.w	r3, r3, #8
 8007458:	81a3      	strh	r3, [r4, #12]
 800745a:	6923      	ldr	r3, [r4, #16]
 800745c:	b94b      	cbnz	r3, 8007472 <__swsetup_r+0x7a>
 800745e:	89a3      	ldrh	r3, [r4, #12]
 8007460:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007468:	d003      	beq.n	8007472 <__swsetup_r+0x7a>
 800746a:	4621      	mov	r1, r4
 800746c:	4628      	mov	r0, r5
 800746e:	f000 f8a5 	bl	80075bc <__smakebuf_r>
 8007472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007476:	f013 0201 	ands.w	r2, r3, #1
 800747a:	d00a      	beq.n	8007492 <__swsetup_r+0x9a>
 800747c:	2200      	movs	r2, #0
 800747e:	60a2      	str	r2, [r4, #8]
 8007480:	6962      	ldr	r2, [r4, #20]
 8007482:	4252      	negs	r2, r2
 8007484:	61a2      	str	r2, [r4, #24]
 8007486:	6922      	ldr	r2, [r4, #16]
 8007488:	b942      	cbnz	r2, 800749c <__swsetup_r+0xa4>
 800748a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800748e:	d1c5      	bne.n	800741c <__swsetup_r+0x24>
 8007490:	bd38      	pop	{r3, r4, r5, pc}
 8007492:	0799      	lsls	r1, r3, #30
 8007494:	bf58      	it	pl
 8007496:	6962      	ldrpl	r2, [r4, #20]
 8007498:	60a2      	str	r2, [r4, #8]
 800749a:	e7f4      	b.n	8007486 <__swsetup_r+0x8e>
 800749c:	2000      	movs	r0, #0
 800749e:	e7f7      	b.n	8007490 <__swsetup_r+0x98>
 80074a0:	20000078 	.word	0x20000078

080074a4 <memmove>:
 80074a4:	4288      	cmp	r0, r1
 80074a6:	b510      	push	{r4, lr}
 80074a8:	eb01 0402 	add.w	r4, r1, r2
 80074ac:	d902      	bls.n	80074b4 <memmove+0x10>
 80074ae:	4284      	cmp	r4, r0
 80074b0:	4623      	mov	r3, r4
 80074b2:	d807      	bhi.n	80074c4 <memmove+0x20>
 80074b4:	1e43      	subs	r3, r0, #1
 80074b6:	42a1      	cmp	r1, r4
 80074b8:	d008      	beq.n	80074cc <memmove+0x28>
 80074ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074c2:	e7f8      	b.n	80074b6 <memmove+0x12>
 80074c4:	4402      	add	r2, r0
 80074c6:	4601      	mov	r1, r0
 80074c8:	428a      	cmp	r2, r1
 80074ca:	d100      	bne.n	80074ce <memmove+0x2a>
 80074cc:	bd10      	pop	{r4, pc}
 80074ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074d6:	e7f7      	b.n	80074c8 <memmove+0x24>

080074d8 <_sbrk_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4d06      	ldr	r5, [pc, #24]	@ (80074f4 <_sbrk_r+0x1c>)
 80074dc:	2300      	movs	r3, #0
 80074de:	4604      	mov	r4, r0
 80074e0:	4608      	mov	r0, r1
 80074e2:	602b      	str	r3, [r5, #0]
 80074e4:	f7f9 fb20 	bl	8000b28 <_sbrk>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_sbrk_r+0x1a>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_sbrk_r+0x1a>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	20000558 	.word	0x20000558

080074f8 <memcpy>:
 80074f8:	440a      	add	r2, r1
 80074fa:	4291      	cmp	r1, r2
 80074fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007500:	d100      	bne.n	8007504 <memcpy+0xc>
 8007502:	4770      	bx	lr
 8007504:	b510      	push	{r4, lr}
 8007506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800750a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800750e:	4291      	cmp	r1, r2
 8007510:	d1f9      	bne.n	8007506 <memcpy+0xe>
 8007512:	bd10      	pop	{r4, pc}

08007514 <_realloc_r>:
 8007514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007518:	4607      	mov	r7, r0
 800751a:	4614      	mov	r4, r2
 800751c:	460d      	mov	r5, r1
 800751e:	b921      	cbnz	r1, 800752a <_realloc_r+0x16>
 8007520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007524:	4611      	mov	r1, r2
 8007526:	f7ff b9cb 	b.w	80068c0 <_malloc_r>
 800752a:	b92a      	cbnz	r2, 8007538 <_realloc_r+0x24>
 800752c:	f7ff f95c 	bl	80067e8 <_free_r>
 8007530:	4625      	mov	r5, r4
 8007532:	4628      	mov	r0, r5
 8007534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007538:	f000 f89e 	bl	8007678 <_malloc_usable_size_r>
 800753c:	4284      	cmp	r4, r0
 800753e:	4606      	mov	r6, r0
 8007540:	d802      	bhi.n	8007548 <_realloc_r+0x34>
 8007542:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007546:	d8f4      	bhi.n	8007532 <_realloc_r+0x1e>
 8007548:	4621      	mov	r1, r4
 800754a:	4638      	mov	r0, r7
 800754c:	f7ff f9b8 	bl	80068c0 <_malloc_r>
 8007550:	4680      	mov	r8, r0
 8007552:	b908      	cbnz	r0, 8007558 <_realloc_r+0x44>
 8007554:	4645      	mov	r5, r8
 8007556:	e7ec      	b.n	8007532 <_realloc_r+0x1e>
 8007558:	42b4      	cmp	r4, r6
 800755a:	4622      	mov	r2, r4
 800755c:	4629      	mov	r1, r5
 800755e:	bf28      	it	cs
 8007560:	4632      	movcs	r2, r6
 8007562:	f7ff ffc9 	bl	80074f8 <memcpy>
 8007566:	4629      	mov	r1, r5
 8007568:	4638      	mov	r0, r7
 800756a:	f7ff f93d 	bl	80067e8 <_free_r>
 800756e:	e7f1      	b.n	8007554 <_realloc_r+0x40>

08007570 <__swhatbuf_r>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	460c      	mov	r4, r1
 8007574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007578:	2900      	cmp	r1, #0
 800757a:	b096      	sub	sp, #88	@ 0x58
 800757c:	4615      	mov	r5, r2
 800757e:	461e      	mov	r6, r3
 8007580:	da0d      	bge.n	800759e <__swhatbuf_r+0x2e>
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007588:	f04f 0100 	mov.w	r1, #0
 800758c:	bf14      	ite	ne
 800758e:	2340      	movne	r3, #64	@ 0x40
 8007590:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007594:	2000      	movs	r0, #0
 8007596:	6031      	str	r1, [r6, #0]
 8007598:	602b      	str	r3, [r5, #0]
 800759a:	b016      	add	sp, #88	@ 0x58
 800759c:	bd70      	pop	{r4, r5, r6, pc}
 800759e:	466a      	mov	r2, sp
 80075a0:	f000 f848 	bl	8007634 <_fstat_r>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	dbec      	blt.n	8007582 <__swhatbuf_r+0x12>
 80075a8:	9901      	ldr	r1, [sp, #4]
 80075aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80075ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80075b2:	4259      	negs	r1, r3
 80075b4:	4159      	adcs	r1, r3
 80075b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075ba:	e7eb      	b.n	8007594 <__swhatbuf_r+0x24>

080075bc <__smakebuf_r>:
 80075bc:	898b      	ldrh	r3, [r1, #12]
 80075be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075c0:	079d      	lsls	r5, r3, #30
 80075c2:	4606      	mov	r6, r0
 80075c4:	460c      	mov	r4, r1
 80075c6:	d507      	bpl.n	80075d8 <__smakebuf_r+0x1c>
 80075c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	6123      	str	r3, [r4, #16]
 80075d0:	2301      	movs	r3, #1
 80075d2:	6163      	str	r3, [r4, #20]
 80075d4:	b003      	add	sp, #12
 80075d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075d8:	ab01      	add	r3, sp, #4
 80075da:	466a      	mov	r2, sp
 80075dc:	f7ff ffc8 	bl	8007570 <__swhatbuf_r>
 80075e0:	9f00      	ldr	r7, [sp, #0]
 80075e2:	4605      	mov	r5, r0
 80075e4:	4639      	mov	r1, r7
 80075e6:	4630      	mov	r0, r6
 80075e8:	f7ff f96a 	bl	80068c0 <_malloc_r>
 80075ec:	b948      	cbnz	r0, 8007602 <__smakebuf_r+0x46>
 80075ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075f2:	059a      	lsls	r2, r3, #22
 80075f4:	d4ee      	bmi.n	80075d4 <__smakebuf_r+0x18>
 80075f6:	f023 0303 	bic.w	r3, r3, #3
 80075fa:	f043 0302 	orr.w	r3, r3, #2
 80075fe:	81a3      	strh	r3, [r4, #12]
 8007600:	e7e2      	b.n	80075c8 <__smakebuf_r+0xc>
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	6020      	str	r0, [r4, #0]
 8007606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800760a:	81a3      	strh	r3, [r4, #12]
 800760c:	9b01      	ldr	r3, [sp, #4]
 800760e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007612:	b15b      	cbz	r3, 800762c <__smakebuf_r+0x70>
 8007614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007618:	4630      	mov	r0, r6
 800761a:	f000 f81d 	bl	8007658 <_isatty_r>
 800761e:	b128      	cbz	r0, 800762c <__smakebuf_r+0x70>
 8007620:	89a3      	ldrh	r3, [r4, #12]
 8007622:	f023 0303 	bic.w	r3, r3, #3
 8007626:	f043 0301 	orr.w	r3, r3, #1
 800762a:	81a3      	strh	r3, [r4, #12]
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	431d      	orrs	r5, r3
 8007630:	81a5      	strh	r5, [r4, #12]
 8007632:	e7cf      	b.n	80075d4 <__smakebuf_r+0x18>

08007634 <_fstat_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4d07      	ldr	r5, [pc, #28]	@ (8007654 <_fstat_r+0x20>)
 8007638:	2300      	movs	r3, #0
 800763a:	4604      	mov	r4, r0
 800763c:	4608      	mov	r0, r1
 800763e:	4611      	mov	r1, r2
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	f7f9 fa48 	bl	8000ad6 <_fstat>
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	d102      	bne.n	8007650 <_fstat_r+0x1c>
 800764a:	682b      	ldr	r3, [r5, #0]
 800764c:	b103      	cbz	r3, 8007650 <_fstat_r+0x1c>
 800764e:	6023      	str	r3, [r4, #0]
 8007650:	bd38      	pop	{r3, r4, r5, pc}
 8007652:	bf00      	nop
 8007654:	20000558 	.word	0x20000558

08007658 <_isatty_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d06      	ldr	r5, [pc, #24]	@ (8007674 <_isatty_r+0x1c>)
 800765c:	2300      	movs	r3, #0
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	f7f9 fa47 	bl	8000af6 <_isatty>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_isatty_r+0x1a>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_isatty_r+0x1a>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	20000558 	.word	0x20000558

08007678 <_malloc_usable_size_r>:
 8007678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800767c:	1f18      	subs	r0, r3, #4
 800767e:	2b00      	cmp	r3, #0
 8007680:	bfbc      	itt	lt
 8007682:	580b      	ldrlt	r3, [r1, r0]
 8007684:	18c0      	addlt	r0, r0, r3
 8007686:	4770      	bx	lr

08007688 <_init>:
 8007688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768a:	bf00      	nop
 800768c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768e:	bc08      	pop	{r3}
 8007690:	469e      	mov	lr, r3
 8007692:	4770      	bx	lr

08007694 <_fini>:
 8007694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007696:	bf00      	nop
 8007698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800769a:	bc08      	pop	{r3}
 800769c:	469e      	mov	lr, r3
 800769e:	4770      	bx	lr
