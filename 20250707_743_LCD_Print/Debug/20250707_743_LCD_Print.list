
20250707_743_LCD_Print.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f6c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006204  08006204  00007204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006270  08006270  00007270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006278  08006278  00007278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800627c  0800627c  0000727c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08006280  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000013c  24000010  08006290  00008010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400014c  08006290  0000814c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012c4d  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026a0  00000000  00000000  0001ac8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000cc8  00000000  00000000  0001d330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009c8  00000000  00000000  0001dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003610d  00000000  00000000  0001e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012a00  00000000  00000000  00054acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015b36e  00000000  00000000  000674cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c283b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000342c  00000000  00000000  001c2880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  001c5cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080061ec 	.word	0x080061ec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080061ec 	.word	0x080061ec

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <ILI9341_Select>:
		}
		else ILI9341_Unselect();
	}
}

static void ILI9341_Select() {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2140      	movs	r1, #64	@ 0x40
 800060c:	4802      	ldr	r0, [pc, #8]	@ (8000618 <ILI9341_Select+0x14>)
 800060e:	f001 fa83 	bl	8001b18 <HAL_GPIO_WritePin>
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	58021000 	.word	0x58021000

0800061c <ILI9341_Unselect>:

void ILI9341_Unselect() {
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2140      	movs	r1, #64	@ 0x40
 8000624:	4802      	ldr	r0, [pc, #8]	@ (8000630 <ILI9341_Unselect+0x14>)
 8000626:	f001 fa77 	bl	8001b18 <HAL_GPIO_WritePin>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	58021000 	.word	0x58021000

08000634 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063e:	4807      	ldr	r0, [pc, #28]	@ (800065c <ILI9341_Reset+0x28>)
 8000640:	f001 fa6a 	bl	8001b18 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000644:	2005      	movs	r0, #5
 8000646:	f000 ff2b 	bl	80014a0 <HAL_Delay>
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000650:	4802      	ldr	r0, [pc, #8]	@ (800065c <ILI9341_Reset+0x28>)
 8000652:	f001 fa61 	bl	8001b18 <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	58021800 	.word	0x58021800

08000660 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2110      	movs	r1, #16
 800066e:	4807      	ldr	r0, [pc, #28]	@ (800068c <ILI9341_WriteCommand+0x2c>)
 8000670:	f001 fa52 	bl	8001b18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000674:	1df9      	adds	r1, r7, #7
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	2201      	movs	r2, #1
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <ILI9341_WriteCommand+0x30>)
 800067e:	f004 f9d5 	bl	8004a2c <HAL_SPI_Transmit>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	58020400 	.word	0x58020400
 8000690:	2400002c 	.word	0x2400002c

08000694 <ILI9341_WriteData>:
		chunk_size = img_size > ILI9341_MAX_LENTH ? ILI9341_MAX_LENTH : img_size;
		HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, pImgData, chunk_size);
	}
}

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	4811      	ldr	r0, [pc, #68]	@ (80006e8 <ILI9341_WriteData+0x54>)
 80006a4:	f001 fa38 	bl	8001b18 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more then 64K at once
	while(buff_size > 0) {
 80006a8:	e015      	b.n	80006d6 <ILI9341_WriteData+0x42>
		uint16_t chunk_size = buff_size > ILI9341_MAX_LENTH ? ILI9341_MAX_LENTH : buff_size;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006b0:	4293      	cmp	r3, r2
 80006b2:	bf28      	it	cs
 80006b4:	4613      	movcs	r3, r2
 80006b6:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80006b8:	89fa      	ldrh	r2, [r7, #14]
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	480a      	ldr	r0, [pc, #40]	@ (80006ec <ILI9341_WriteData+0x58>)
 80006c2:	f004 f9b3 	bl	8004a2c <HAL_SPI_Transmit>
		buff += chunk_size;
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	4413      	add	r3, r2
 80006cc:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	603b      	str	r3, [r7, #0]
	while(buff_size > 0) {
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1e6      	bne.n	80006aa <ILI9341_WriteData+0x16>
	}
}
 80006dc:	bf00      	nop
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	58020400 	.word	0x58020400
 80006ec:	2400002c 	.word	0x2400002c

080006f0 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4604      	mov	r4, r0
 80006f8:	4608      	mov	r0, r1
 80006fa:	4611      	mov	r1, r2
 80006fc:	461a      	mov	r2, r3
 80006fe:	4623      	mov	r3, r4
 8000700:	80fb      	strh	r3, [r7, #6]
 8000702:	4603      	mov	r3, r0
 8000704:	80bb      	strh	r3, [r7, #4]
 8000706:	460b      	mov	r3, r1
 8000708:	807b      	strh	r3, [r7, #2]
 800070a:	4613      	mov	r3, r2
 800070c:	803b      	strh	r3, [r7, #0]
	// column address set
	ILI9341_WriteCommand(0x2A); // CASET
 800070e:	202a      	movs	r0, #42	@ 0x2a
 8000710:	f7ff ffa6 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000714:	88fb      	ldrh	r3, [r7, #6]
 8000716:	0a1b      	lsrs	r3, r3, #8
 8000718:	b29b      	uxth	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	733b      	strb	r3, [r7, #12]
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	737b      	strb	r3, [r7, #13]
 8000724:	887b      	ldrh	r3, [r7, #2]
 8000726:	0a1b      	lsrs	r3, r3, #8
 8000728:	b29b      	uxth	r3, r3
 800072a:	b2db      	uxtb	r3, r3
 800072c:	73bb      	strb	r3, [r7, #14]
 800072e:	887b      	ldrh	r3, [r7, #2]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	73fb      	strb	r3, [r7, #15]
		ILI9341_WriteData(data, sizeof(data));
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2104      	movs	r1, #4
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ffaa 	bl	8000694 <ILI9341_WriteData>
	}

	// row address set
	ILI9341_WriteCommand(0x2B); // RASET
 8000740:	202b      	movs	r0, #43	@ 0x2b
 8000742:	f7ff ff8d 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000746:	88bb      	ldrh	r3, [r7, #4]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	b29b      	uxth	r3, r3
 800074c:	b2db      	uxtb	r3, r3
 800074e:	723b      	strb	r3, [r7, #8]
 8000750:	88bb      	ldrh	r3, [r7, #4]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	727b      	strb	r3, [r7, #9]
 8000756:	883b      	ldrh	r3, [r7, #0]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	b29b      	uxth	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	72bb      	strb	r3, [r7, #10]
 8000760:	883b      	ldrh	r3, [r7, #0]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	72fb      	strb	r3, [r7, #11]
		ILI9341_WriteData(data, sizeof(data));
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	2104      	movs	r1, #4
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff91 	bl	8000694 <ILI9341_WriteData>
	}

	// write to RAM
	ILI9341_WriteCommand(0x2C); // RAMWR
 8000772:	202c      	movs	r0, #44	@ 0x2c
 8000774:	f7ff ff74 	bl	8000660 <ILI9341_WriteCommand>
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	bd90      	pop	{r4, r7, pc}

08000780 <ILI9341_Init>:

void ILI9341_Init() {
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b09b      	sub	sp, #108	@ 0x6c
 8000784:	af00      	add	r7, sp, #0
	ILI9341_Select();
 8000786:	f7ff ff3d 	bl	8000604 <ILI9341_Select>
	ILI9341_Reset();
 800078a:	f7ff ff53 	bl	8000634 <ILI9341_Reset>

	// command list is based on https://github.com/martnak/STM32-ILI9341

	// SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff ff66 	bl	8000660 <ILI9341_WriteCommand>
	HAL_Delay(1000);
 8000794:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000798:	f000 fe82 	bl	80014a0 <HAL_Delay>

	// POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 800079c:	20cb      	movs	r0, #203	@ 0xcb
 800079e:	f7ff ff5f 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80007a2:	4a87      	ldr	r2, [pc, #540]	@ (80009c0 <ILI9341_Init+0x240>)
 80007a4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007ac:	6018      	str	r0, [r3, #0]
 80007ae:	3304      	adds	r3, #4
 80007b0:	7019      	strb	r1, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 80007b2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007b6:	2105      	movs	r1, #5
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff6b 	bl	8000694 <ILI9341_WriteData>
	}

	// POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80007be:	20cf      	movs	r0, #207	@ 0xcf
 80007c0:	f7ff ff4e 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80007c4:	4a7f      	ldr	r2, [pc, #508]	@ (80009c4 <ILI9341_Init+0x244>)
 80007c6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007ca:	6812      	ldr	r2, [r2, #0]
 80007cc:	4611      	mov	r1, r2
 80007ce:	8019      	strh	r1, [r3, #0]
 80007d0:	3302      	adds	r3, #2
 80007d2:	0c12      	lsrs	r2, r2, #16
 80007d4:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 80007d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007da:	2103      	movs	r1, #3
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff59 	bl	8000694 <ILI9341_WriteData>
	}

	// DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80007e2:	20e8      	movs	r0, #232	@ 0xe8
 80007e4:	f7ff ff3c 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x85, 0x00, 0x78 };
 80007e8:	4a77      	ldr	r2, [pc, #476]	@ (80009c8 <ILI9341_Init+0x248>)
 80007ea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80007ee:	6812      	ldr	r2, [r2, #0]
 80007f0:	4611      	mov	r1, r2
 80007f2:	8019      	strh	r1, [r3, #0]
 80007f4:	3302      	adds	r3, #2
 80007f6:	0c12      	lsrs	r2, r2, #16
 80007f8:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 80007fa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80007fe:	2103      	movs	r1, #3
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff47 	bl	8000694 <ILI9341_WriteData>
	}

	// DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000806:	20ea      	movs	r0, #234	@ 0xea
 8000808:	f7ff ff2a 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x00 };
 800080c:	2300      	movs	r3, #0
 800080e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		ILI9341_WriteData(data, sizeof(data));
 8000812:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000816:	2102      	movs	r1, #2
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff3b 	bl	8000694 <ILI9341_WriteData>
	}

	// POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 800081e:	20ed      	movs	r0, #237	@ 0xed
 8000820:	f7ff ff1e 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000824:	4b69      	ldr	r3, [pc, #420]	@ (80009cc <ILI9341_Init+0x24c>)
 8000826:	653b      	str	r3, [r7, #80]	@ 0x50
		ILI9341_WriteData(data, sizeof(data));
 8000828:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800082c:	2104      	movs	r1, #4
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff30 	bl	8000694 <ILI9341_WriteData>
	}

	// PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000834:	20f7      	movs	r0, #247	@ 0xf7
 8000836:	f7ff ff13 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x20 };
 800083a:	2320      	movs	r3, #32
 800083c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		ILI9341_WriteData(data, sizeof(data));
 8000840:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000844:	2101      	movs	r1, #1
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff24 	bl	8000694 <ILI9341_WriteData>
	}

	// POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 800084c:	20c0      	movs	r0, #192	@ 0xc0
 800084e:	f7ff ff07 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x23 };
 8000852:	2323      	movs	r3, #35	@ 0x23
 8000854:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
		ILI9341_WriteData(data, sizeof(data));
 8000858:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800085c:	2101      	movs	r1, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff18 	bl	8000694 <ILI9341_WriteData>
	}

	// POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000864:	20c1      	movs	r0, #193	@ 0xc1
 8000866:	f7ff fefb 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x10 };
 800086a:	2310      	movs	r3, #16
 800086c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
		ILI9341_WriteData(data, sizeof(data));
 8000870:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000874:	2101      	movs	r1, #1
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff0c 	bl	8000694 <ILI9341_WriteData>
	}

	// VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 800087c:	20c5      	movs	r0, #197	@ 0xc5
 800087e:	f7ff feef 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x3E, 0x28 };
 8000882:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000886:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
		ILI9341_WriteData(data, sizeof(data));
 800088a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800088e:	2102      	movs	r1, #2
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff feff 	bl	8000694 <ILI9341_WriteData>
	}

	// VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000896:	20c7      	movs	r0, #199	@ 0xc7
 8000898:	f7ff fee2 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x86 };
 800089c:	2386      	movs	r3, #134	@ 0x86
 800089e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
		ILI9341_WriteData(data, sizeof(data));
 80008a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008a6:	2101      	movs	r1, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fef3 	bl	8000694 <ILI9341_WriteData>
	}

	// MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 80008ae:	2036      	movs	r0, #54	@ 0x36
 80008b0:	f7ff fed6 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x48 };
 80008b4:	2348      	movs	r3, #72	@ 0x48
 80008b6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
		ILI9341_WriteData(data, sizeof(data));
 80008ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008be:	2101      	movs	r1, #1
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fee7 	bl	8000694 <ILI9341_WriteData>
	}

	// PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 80008c6:	203a      	movs	r0, #58	@ 0x3a
 80008c8:	f7ff feca 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x55 };
 80008cc:	2355      	movs	r3, #85	@ 0x55
 80008ce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
		ILI9341_WriteData(data, sizeof(data));
 80008d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80008d6:	2101      	movs	r1, #1
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fedb 	bl	8000694 <ILI9341_WriteData>
	}

	// FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 80008de:	20b1      	movs	r0, #177	@ 0xb1
 80008e0:	f7ff febe 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x18 };
 80008e4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008e8:	863b      	strh	r3, [r7, #48]	@ 0x30
		ILI9341_WriteData(data, sizeof(data));
 80008ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008ee:	2102      	movs	r1, #2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fecf 	bl	8000694 <ILI9341_WriteData>
	}

	// DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 80008f6:	20b6      	movs	r0, #182	@ 0xb6
 80008f8:	f7ff feb2 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x08, 0x82, 0x27 };
 80008fc:	4a34      	ldr	r2, [pc, #208]	@ (80009d0 <ILI9341_Init+0x250>)
 80008fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000902:	6812      	ldr	r2, [r2, #0]
 8000904:	4611      	mov	r1, r2
 8000906:	8019      	strh	r1, [r3, #0]
 8000908:	3302      	adds	r3, #2
 800090a:	0c12      	lsrs	r2, r2, #16
 800090c:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 800090e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000912:	2103      	movs	r1, #3
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff febd 	bl	8000694 <ILI9341_WriteData>
	}

	// 3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 800091a:	20f2      	movs	r0, #242	@ 0xf2
 800091c:	f7ff fea0 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00 };
 8000920:	2300      	movs	r3, #0
 8000922:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		ILI9341_WriteData(data, sizeof(data));
 8000926:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800092a:	2101      	movs	r1, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff feb1 	bl	8000694 <ILI9341_WriteData>
	}

	// GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000932:	2026      	movs	r0, #38	@ 0x26
 8000934:	f7ff fe94 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x01 };
 8000938:	2301      	movs	r3, #1
 800093a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		ILI9341_WriteData(data, sizeof(data));
 800093e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000942:	2101      	movs	r1, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fea5 	bl	8000694 <ILI9341_WriteData>
	}

	// POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 800094a:	20e0      	movs	r0, #224	@ 0xe0
 800094c:	f7ff fe88 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000950:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <ILI9341_Init+0x254>)
 8000952:	f107 0414 	add.w	r4, r7, #20
 8000956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000958:	c407      	stmia	r4!, {r0, r1, r2}
 800095a:	8023      	strh	r3, [r4, #0]
 800095c:	3402      	adds	r4, #2
 800095e:	0c1b      	lsrs	r3, r3, #16
 8000960:	7023      	strb	r3, [r4, #0]
				0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
		ILI9341_WriteData(data, sizeof(data));
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	210f      	movs	r1, #15
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fe93 	bl	8000694 <ILI9341_WriteData>
	}

	// NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 800096e:	20e1      	movs	r0, #225	@ 0xe1
 8000970:	f7ff fe76 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000974:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <ILI9341_Init+0x258>)
 8000976:	1d3c      	adds	r4, r7, #4
 8000978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800097a:	c407      	stmia	r4!, {r0, r1, r2}
 800097c:	8023      	strh	r3, [r4, #0]
 800097e:	3402      	adds	r4, #2
 8000980:	0c1b      	lsrs	r3, r3, #16
 8000982:	7023      	strb	r3, [r4, #0]
				0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
		ILI9341_WriteData(data, sizeof(data));
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	210f      	movs	r1, #15
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fe83 	bl	8000694 <ILI9341_WriteData>
	}

	// EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 800098e:	2011      	movs	r0, #17
 8000990:	f7ff fe66 	bl	8000660 <ILI9341_WriteCommand>
	HAL_Delay(120);
 8000994:	2078      	movs	r0, #120	@ 0x78
 8000996:	f000 fd83 	bl	80014a0 <HAL_Delay>

	// TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 800099a:	2029      	movs	r0, #41	@ 0x29
 800099c:	f7ff fe60 	bl	8000660 <ILI9341_WriteCommand>

	// MADCTL
	ILI9341_WriteCommand(0x36);
 80009a0:	2036      	movs	r0, #54	@ 0x36
 80009a2:	f7ff fe5d 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { ILI9341_ROTATION };
 80009a6:	2348      	movs	r3, #72	@ 0x48
 80009a8:	703b      	strb	r3, [r7, #0]
		ILI9341_WriteData(data, sizeof(data));
 80009aa:	463b      	mov	r3, r7
 80009ac:	2101      	movs	r1, #1
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fe70 	bl	8000694 <ILI9341_WriteData>
	}

	ILI9341_Unselect();
 80009b4:	f7ff fe32 	bl	800061c <ILI9341_Unselect>
}
 80009b8:	bf00      	nop
 80009ba:	376c      	adds	r7, #108	@ 0x6c
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	08006204 	.word	0x08006204
 80009c4:	0800620c 	.word	0x0800620c
 80009c8:	08006210 	.word	0x08006210
 80009cc:	81120364 	.word	0x81120364
 80009d0:	08006214 	.word	0x08006214
 80009d4:	08006218 	.word	0x08006218
 80009d8:	08006228 	.word	0x08006228

080009dc <ILI9341_FillRectangle>:
	}

	ILI9341_Unselect();
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4604      	mov	r4, r0
 80009e4:	4608      	mov	r0, r1
 80009e6:	4611      	mov	r1, r2
 80009e8:	461a      	mov	r2, r3
 80009ea:	4623      	mov	r3, r4
 80009ec:	80fb      	strh	r3, [r7, #6]
 80009ee:	4603      	mov	r3, r0
 80009f0:	80bb      	strh	r3, [r7, #4]
 80009f2:	460b      	mov	r3, r1
 80009f4:	807b      	strh	r3, [r7, #2]
 80009f6:	4613      	mov	r3, r2
 80009f8:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	2bef      	cmp	r3, #239	@ 0xef
 80009fe:	d853      	bhi.n	8000aa8 <ILI9341_FillRectangle+0xcc>
 8000a00:	88bb      	ldrh	r3, [r7, #4]
 8000a02:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a06:	d24f      	bcs.n	8000aa8 <ILI9341_FillRectangle+0xcc>
	if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000a08:	88fa      	ldrh	r2, [r7, #6]
 8000a0a:	887b      	ldrh	r3, [r7, #2]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a10:	dd03      	ble.n	8000a1a <ILI9341_FillRectangle+0x3e>
 8000a12:	88fb      	ldrh	r3, [r7, #6]
 8000a14:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000a18:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000a1a:	88ba      	ldrh	r2, [r7, #4]
 8000a1c:	883b      	ldrh	r3, [r7, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a24:	dd03      	ble.n	8000a2e <ILI9341_FillRectangle+0x52>
 8000a26:	88bb      	ldrh	r3, [r7, #4]
 8000a28:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000a2c:	803b      	strh	r3, [r7, #0]

	ILI9341_Select();
 8000a2e:	f7ff fde9 	bl	8000604 <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000a32:	88fa      	ldrh	r2, [r7, #6]
 8000a34:	887b      	ldrh	r3, [r7, #2]
 8000a36:	4413      	add	r3, r2
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	b29c      	uxth	r4, r3
 8000a3e:	88ba      	ldrh	r2, [r7, #4]
 8000a40:	883b      	ldrh	r3, [r7, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	3b01      	subs	r3, #1
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	88b9      	ldrh	r1, [r7, #4]
 8000a4c:	88f8      	ldrh	r0, [r7, #6]
 8000a4e:	4622      	mov	r2, r4
 8000a50:	f7ff fe4e 	bl	80006f0 <ILI9341_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8000a54:	8c3b      	ldrh	r3, [r7, #32]
 8000a56:	0a1b      	lsrs	r3, r3, #8
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	733b      	strb	r3, [r7, #12]
 8000a5e:	8c3b      	ldrh	r3, [r7, #32]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2110      	movs	r1, #16
 8000a68:	4811      	ldr	r0, [pc, #68]	@ (8000ab0 <ILI9341_FillRectangle+0xd4>)
 8000a6a:	f001 f855 	bl	8001b18 <HAL_GPIO_WritePin>

	for(y = h; y > 0; y--) {
 8000a6e:	883b      	ldrh	r3, [r7, #0]
 8000a70:	80bb      	strh	r3, [r7, #4]
 8000a72:	e013      	b.n	8000a9c <ILI9341_FillRectangle+0xc0>
		for(x = w; x > 0; x--) {
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	80fb      	strh	r3, [r7, #6]
 8000a78:	e00a      	b.n	8000a90 <ILI9341_FillRectangle+0xb4>
			HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000a7a:	f107 010c 	add.w	r1, r7, #12
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	2202      	movs	r2, #2
 8000a84:	480b      	ldr	r0, [pc, #44]	@ (8000ab4 <ILI9341_FillRectangle+0xd8>)
 8000a86:	f003 ffd1 	bl	8004a2c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	80fb      	strh	r3, [r7, #6]
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1f1      	bne.n	8000a7a <ILI9341_FillRectangle+0x9e>
	for(y = h; y > 0; y--) {
 8000a96:	88bb      	ldrh	r3, [r7, #4]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	80bb      	strh	r3, [r7, #4]
 8000a9c:	88bb      	ldrh	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1e8      	bne.n	8000a74 <ILI9341_FillRectangle+0x98>
		}
	}

	ILI9341_Unselect();
 8000aa2:	f7ff fdbb 	bl	800061c <ILI9341_Unselect>
 8000aa6:	e000      	b.n	8000aaa <ILI9341_FillRectangle+0xce>
	if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000aa8:	bf00      	nop
}
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	58020400 	.word	0x58020400
 8000ab4:	2400002c 	.word	0x2400002c

08000ab8 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000aca:	22f0      	movs	r2, #240	@ 0xf0
 8000acc:	2100      	movs	r1, #0
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f7ff ff84 	bl	80009dc <ILI9341_FillRectangle>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	@ 0x30
 8000ae0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	4b57      	ldr	r3, [pc, #348]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af8:	4a55      	ldr	r2, [pc, #340]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b02:	4b53      	ldr	r3, [pc, #332]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
 8000b0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b4f      	ldr	r3, [pc, #316]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b16:	4a4e      	ldr	r2, [pc, #312]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b20:	4b4b      	ldr	r3, [pc, #300]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2e:	4b48      	ldr	r3, [pc, #288]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b34:	4a46      	ldr	r2, [pc, #280]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b3e:	4b44      	ldr	r3, [pc, #272]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4c:	4b40      	ldr	r3, [pc, #256]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b52:	4a3f      	ldr	r2, [pc, #252]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6a:	4b39      	ldr	r3, [pc, #228]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b70:	4a37      	ldr	r2, [pc, #220]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7a:	4b35      	ldr	r3, [pc, #212]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b88:	4b31      	ldr	r3, [pc, #196]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8e:	4a30      	ldr	r2, [pc, #192]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b98:	4b2d      	ldr	r3, [pc, #180]	@ (8000c50 <MX_GPIO_Init+0x174>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI_9341_DC_GPIO_Port, ILI_9341_DC_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	482a      	ldr	r0, [pc, #168]	@ (8000c54 <MX_GPIO_Init+0x178>)
 8000bac:	f000 ffb4 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_RESET_GPIO_Port, ILI9341_RESET_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bb6:	4828      	ldr	r0, [pc, #160]	@ (8000c58 <MX_GPIO_Init+0x17c>)
 8000bb8:	f000 ffae 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc2:	4826      	ldr	r0, [pc, #152]	@ (8000c5c <MX_GPIO_Init+0x180>)
 8000bc4:	f000 ffa8 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2140      	movs	r1, #64	@ 0x40
 8000bcc:	4824      	ldr	r0, [pc, #144]	@ (8000c60 <MX_GPIO_Init+0x184>)
 8000bce:	f000 ffa3 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ILI_9341_DC_Pin */
  GPIO_InitStruct.Pin = ILI_9341_DC_Pin;
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ILI_9341_DC_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	481a      	ldr	r0, [pc, #104]	@ (8000c54 <MX_GPIO_Init+0x178>)
 8000bea:	f000 fde5 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ILI9341_RESET_Pin */
  GPIO_InitStruct.Pin = ILI9341_RESET_Pin;
 8000bee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ILI9341_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	4814      	ldr	r0, [pc, #80]	@ (8000c58 <MX_GPIO_Init+0x17c>)
 8000c08:	f000 fdd6 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <MX_GPIO_Init+0x180>)
 8000c26:	f000 fdc7 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ILI9341_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_CS_Pin;
 8000c2a:	2340      	movs	r3, #64	@ 0x40
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ILI9341_CS_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <MX_GPIO_Init+0x184>)
 8000c42:	f000 fdb9 	bl	80017b8 <HAL_GPIO_Init>

}
 8000c46:	bf00      	nop
 8000c48:	3730      	adds	r7, #48	@ 0x30
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	58024400 	.word	0x58024400
 8000c54:	58020400 	.word	0x58020400
 8000c58:	58021800 	.word	0x58021800
 8000c5c:	58020800 	.word	0x58020800
 8000c60:	58021000 	.word	0x58021000

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c6a:	f000 f8a3 	bl	8000db4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6e:	f000 fb85 	bl	800137c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c72:	f000 f825 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c76:	f7ff ff31 	bl	8000adc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c7a:	f000 fa9d 	bl	80011b8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000c7e:	f000 f8cb 	bl	8000e18 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

ILI9341_Init();
 8000c82:	f7ff fd7d 	bl	8000780 <ILI9341_Init>
  uint32_t counter = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
  ILI9341_Init();
 8000c8a:	f7ff fd79 	bl	8000780 <ILI9341_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ILI9341_FillScreen(ILI9341_BLACK);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff ff12 	bl	8000ab8 <ILI9341_FillScreen>
	  HAL_Delay(500);
 8000c94:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c98:	f000 fc02 	bl	80014a0 <HAL_Delay>
	  ILI9341_FillScreen(ILI9341_RED);
 8000c9c:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000ca0:	f7ff ff0a 	bl	8000ab8 <ILI9341_FillScreen>
	  HAL_Delay(500);
 8000ca4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ca8:	f000 fbfa 	bl	80014a0 <HAL_Delay>
	  ILI9341_FillScreen(ILI9341_BLUE);
 8000cac:	201f      	movs	r0, #31
 8000cae:	f7ff ff03 	bl	8000ab8 <ILI9341_FillScreen>
	  HAL_Delay(500);
 8000cb2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cb6:	f000 fbf3 	bl	80014a0 <HAL_Delay>
	  ILI9341_FillScreen(ILI9341_BLACK);
 8000cba:	bf00      	nop
 8000cbc:	e7e7      	b.n	8000c8e <main+0x2a>
	...

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b09c      	sub	sp, #112	@ 0x70
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cca:	224c      	movs	r2, #76	@ 0x4c
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f005 fa60 	bl	8006194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f005 fa5a 	bl	8006194 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ce0:	2002      	movs	r0, #2
 8000ce2:	f000 ff33 	bl	8001b4c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b30      	ldr	r3, [pc, #192]	@ (8000dac <SystemClock_Config+0xec>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a2f      	ldr	r2, [pc, #188]	@ (8000dac <SystemClock_Config+0xec>)
 8000cf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8000dac <SystemClock_Config+0xec>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	4b2b      	ldr	r3, [pc, #172]	@ (8000db0 <SystemClock_Config+0xf0>)
 8000d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d04:	4a2a      	ldr	r2, [pc, #168]	@ (8000db0 <SystemClock_Config+0xf0>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d0c:	4b28      	ldr	r3, [pc, #160]	@ (8000db0 <SystemClock_Config+0xf0>)
 8000d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d18:	bf00      	nop
 8000d1a:	4b24      	ldr	r3, [pc, #144]	@ (8000dac <SystemClock_Config+0xec>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d26:	d1f8      	bne.n	8000d1a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d32:	2302      	movs	r3, #2
 8000d34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d36:	2302      	movs	r3, #2
 8000d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d3e:	23c0      	movs	r3, #192	@ 0xc0
 8000d40:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d42:	2302      	movs	r3, #2
 8000d44:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d46:	2302      	movs	r3, #2
 8000d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d4e:	2308      	movs	r3, #8
 8000d50:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 ff2e 	bl	8001bc0 <HAL_RCC_OscConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d6a:	f000 f84f 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6e:	233f      	movs	r3, #63	@ 0x3f
 8000d70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d72:	2303      	movs	r3, #3
 8000d74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d7e:	2340      	movs	r3, #64	@ 0x40
 8000d80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d82:	2340      	movs	r3, #64	@ 0x40
 8000d84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d8a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d8c:	2340      	movs	r3, #64	@ 0x40
 8000d8e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2104      	movs	r1, #4
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 fb6d 	bl	8002474 <HAL_RCC_ClockConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000da0:	f000 f834 	bl	8000e0c <Error_Handler>
  }
}
 8000da4:	bf00      	nop
 8000da6:	3770      	adds	r7, #112	@ 0x70
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	58024800 	.word	0x58024800
 8000db0:	58000400 	.word	0x58000400

08000db4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dba:	463b      	mov	r3, r7
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000dc6:	f000 fc7f 	bl	80016c8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000dd6:	231f      	movs	r3, #31
 8000dd8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000dda:	2387      	movs	r3, #135	@ 0x87
 8000ddc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000de2:	2300      	movs	r3, #0
 8000de4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000de6:	2301      	movs	r3, #1
 8000de8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000dea:	2301      	movs	r3, #1
 8000dec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000df6:	463b      	mov	r3, r7
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fc9d 	bl	8001738 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dfe:	2004      	movs	r0, #4
 8000e00:	f000 fc7a 	bl	80016f8 <HAL_MPU_Enable>

}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <Error_Handler+0x8>

08000e18 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e1c:	4b27      	ldr	r3, [pc, #156]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e1e:	4a28      	ldr	r2, [pc, #160]	@ (8000ec0 <MX_SPI1_Init+0xa8>)
 8000e20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e22:	4b26      	ldr	r3, [pc, #152]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e24:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000e2a:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e2c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e30:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e32:	4b22      	ldr	r3, [pc, #136]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e34:	2207      	movs	r2, #7
 8000e36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e38:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e44:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e46:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e58:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e64:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e70:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e72:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e78:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e84:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e90:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e96:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	@ (8000ebc <MX_SPI1_Init+0xa4>)
 8000eaa:	f003 fc9b 	bl	80047e4 <HAL_SPI_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000eb4:	f7ff ffaa 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2400002c 	.word	0x2400002c
 8000ec0:	40013000 	.word	0x40013000

08000ec4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0ba      	sub	sp, #232	@ 0xe8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	22c0      	movs	r2, #192	@ 0xc0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f005 f955 	bl	8006194 <memset>
  if(spiHandle->Instance==SPI1)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a2e      	ldr	r2, [pc, #184]	@ (8000fa8 <HAL_SPI_MspInit+0xe4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d155      	bne.n	8000fa0 <HAL_SPI_MspInit+0xdc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000ef4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000f00:	2319      	movs	r3, #25
 8000f02:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 8000f04:	23c8      	movs	r3, #200	@ 0xc8
 8000f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000f20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f24:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fe2e 	bl	8002b8c <HAL_RCCEx_PeriphCLKConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_SPI_MspInit+0x76>
    {
      Error_Handler();
 8000f36:	f7ff ff69 	bl	8000e0c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <HAL_SPI_MspInit+0xe8>)
 8000f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f40:	4a1a      	ldr	r2, [pc, #104]	@ (8000fac <HAL_SPI_MspInit+0xe8>)
 8000f42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f4a:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_SPI_MspInit+0xe8>)
 8000f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <HAL_SPI_MspInit+0xe8>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5e:	4a13      	ldr	r2, [pc, #76]	@ (8000fac <HAL_SPI_MspInit+0xe8>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f68:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <HAL_SPI_MspInit+0xe8>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8000f76:	2328      	movs	r3, #40	@ 0x28
 8000f78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f8e:	2305      	movs	r3, #5
 8000f90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <HAL_SPI_MspInit+0xec>)
 8000f9c:	f000 fc0c 	bl	80017b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	37e8      	adds	r7, #232	@ 0xe8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40013000 	.word	0x40013000
 8000fac:	58024400 	.word	0x58024400
 8000fb0:	58020400 	.word	0x58020400

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_MspInit+0x30>)
 8000fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fc0:	4a08      	ldr	r2, [pc, #32]	@ (8000fe4 <HAL_MspInit+0x30>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_MspInit+0x30>)
 8000fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	58024400 	.word	0x58024400

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <NMI_Handler+0x4>

08000ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <MemManage_Handler+0x4>

08001000 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <UsageFault_Handler+0x4>

08001010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103e:	f000 fa0f 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800104c:	4b43      	ldr	r3, [pc, #268]	@ (800115c <SystemInit+0x114>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001052:	4a42      	ldr	r2, [pc, #264]	@ (800115c <SystemInit+0x114>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800105c:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <SystemInit+0x118>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 030f 	and.w	r3, r3, #15
 8001064:	2b06      	cmp	r3, #6
 8001066:	d807      	bhi.n	8001078 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001068:	4b3d      	ldr	r3, [pc, #244]	@ (8001160 <SystemInit+0x118>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 030f 	bic.w	r3, r3, #15
 8001070:	4a3b      	ldr	r2, [pc, #236]	@ (8001160 <SystemInit+0x118>)
 8001072:	f043 0307 	orr.w	r3, r3, #7
 8001076:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001078:	4b3a      	ldr	r3, [pc, #232]	@ (8001164 <SystemInit+0x11c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a39      	ldr	r2, [pc, #228]	@ (8001164 <SystemInit+0x11c>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001084:	4b37      	ldr	r3, [pc, #220]	@ (8001164 <SystemInit+0x11c>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800108a:	4b36      	ldr	r3, [pc, #216]	@ (8001164 <SystemInit+0x11c>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4935      	ldr	r1, [pc, #212]	@ (8001164 <SystemInit+0x11c>)
 8001090:	4b35      	ldr	r3, [pc, #212]	@ (8001168 <SystemInit+0x120>)
 8001092:	4013      	ands	r3, r2
 8001094:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001096:	4b32      	ldr	r3, [pc, #200]	@ (8001160 <SystemInit+0x118>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d007      	beq.n	80010b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001160 <SystemInit+0x118>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 030f 	bic.w	r3, r3, #15
 80010aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001160 <SystemInit+0x118>)
 80010ac:	f043 0307 	orr.w	r3, r3, #7
 80010b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001164 <SystemInit+0x11c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001164 <SystemInit+0x11c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010be:	4b29      	ldr	r3, [pc, #164]	@ (8001164 <SystemInit+0x11c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010c4:	4b27      	ldr	r3, [pc, #156]	@ (8001164 <SystemInit+0x11c>)
 80010c6:	4a29      	ldr	r2, [pc, #164]	@ (800116c <SystemInit+0x124>)
 80010c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010ca:	4b26      	ldr	r3, [pc, #152]	@ (8001164 <SystemInit+0x11c>)
 80010cc:	4a28      	ldr	r2, [pc, #160]	@ (8001170 <SystemInit+0x128>)
 80010ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010d0:	4b24      	ldr	r3, [pc, #144]	@ (8001164 <SystemInit+0x11c>)
 80010d2:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <SystemInit+0x12c>)
 80010d4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010d6:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <SystemInit+0x11c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010dc:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <SystemInit+0x11c>)
 80010de:	4a25      	ldr	r2, [pc, #148]	@ (8001174 <SystemInit+0x12c>)
 80010e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010e2:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <SystemInit+0x11c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <SystemInit+0x11c>)
 80010ea:	4a22      	ldr	r2, [pc, #136]	@ (8001174 <SystemInit+0x12c>)
 80010ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <SystemInit+0x11c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <SystemInit+0x11c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001164 <SystemInit+0x11c>)
 80010fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001100:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <SystemInit+0x11c>)
 8001102:	2200      	movs	r2, #0
 8001104:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001106:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <SystemInit+0x130>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b1c      	ldr	r3, [pc, #112]	@ (800117c <SystemInit+0x134>)
 800110c:	4013      	ands	r3, r2
 800110e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001112:	d202      	bcs.n	800111a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001114:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <SystemInit+0x138>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800111a:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <SystemInit+0x11c>)
 800111c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d113      	bne.n	8001150 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001128:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <SystemInit+0x11c>)
 800112a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800112e:	4a0d      	ldr	r2, [pc, #52]	@ (8001164 <SystemInit+0x11c>)
 8001130:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001134:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <SystemInit+0x13c>)
 800113a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800113e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <SystemInit+0x11c>)
 8001142:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001146:	4a07      	ldr	r2, [pc, #28]	@ (8001164 <SystemInit+0x11c>)
 8001148:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800114c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00
 8001160:	52002000 	.word	0x52002000
 8001164:	58024400 	.word	0x58024400
 8001168:	eaf6ed7f 	.word	0xeaf6ed7f
 800116c:	02020200 	.word	0x02020200
 8001170:	01ff0000 	.word	0x01ff0000
 8001174:	01010280 	.word	0x01010280
 8001178:	5c001000 	.word	0x5c001000
 800117c:	ffff0000 	.word	0xffff0000
 8001180:	51008108 	.word	0x51008108
 8001184:	52004000 	.word	0x52004000

08001188 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <ExitRun0Mode+0x2c>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <ExitRun0Mode+0x2c>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001198:	bf00      	nop
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <ExitRun0Mode+0x2c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f9      	beq.n	800119a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	58024800 	.word	0x58024800

080011b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011bc:	4b22      	ldr	r3, [pc, #136]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011be:	4a23      	ldr	r2, [pc, #140]	@ (800124c <MX_USART1_UART_Init+0x94>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011c2:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fa:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001200:	4811      	ldr	r0, [pc, #68]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001202:	f003 feea 	bl	8004fda <HAL_UART_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800120c:	f7ff fdfe 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	480d      	ldr	r0, [pc, #52]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001214:	f004 fef3 	bl	8005ffe <HAL_UARTEx_SetTxFifoThreshold>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800121e:	f7ff fdf5 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001222:	2100      	movs	r1, #0
 8001224:	4808      	ldr	r0, [pc, #32]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001226:	f004 ff28 	bl	800607a <HAL_UARTEx_SetRxFifoThreshold>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001230:	f7ff fdec 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001236:	f004 fea9 	bl	8005f8c <HAL_UARTEx_DisableFifoMode>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001240:	f7ff fde4 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	240000b4 	.word	0x240000b4
 800124c:	40011000 	.word	0x40011000

08001250 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0ba      	sub	sp, #232	@ 0xe8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	22c0      	movs	r2, #192	@ 0xc0
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f004 ff8f 	bl	8006194 <memset>
  if(uartHandle->Instance==USART1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a27      	ldr	r2, [pc, #156]	@ (8001318 <HAL_UART_MspInit+0xc8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d146      	bne.n	800130e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001280:	f04f 0201 	mov.w	r2, #1
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	4618      	mov	r0, r3
 8001298:	f001 fc78 	bl	8002b8c <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012a2:	f7ff fdb3 	bl	8000e0c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012a6:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <HAL_UART_MspInit+0xcc>)
 80012a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012ac:	4a1b      	ldr	r2, [pc, #108]	@ (800131c <HAL_UART_MspInit+0xcc>)
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012b6:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_UART_MspInit+0xcc>)
 80012b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012bc:	f003 0310 	and.w	r3, r3, #16
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b15      	ldr	r3, [pc, #84]	@ (800131c <HAL_UART_MspInit+0xcc>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ca:	4a14      	ldr	r2, [pc, #80]	@ (800131c <HAL_UART_MspInit+0xcc>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <HAL_UART_MspInit+0xcc>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80012e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012fc:	2307      	movs	r3, #7
 80012fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	@ (8001320 <HAL_UART_MspInit+0xd0>)
 800130a:	f000 fa55 	bl	80017b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800130e:	bf00      	nop
 8001310:	37e8      	adds	r7, #232	@ 0xe8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40011000 	.word	0x40011000
 800131c:	58024400 	.word	0x58024400
 8001320:	58020000 	.word	0x58020000

08001324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001324:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001360 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001328:	f7ff ff2e 	bl	8001188 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800132c:	f7ff fe8c 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001330:	480c      	ldr	r0, [pc, #48]	@ (8001364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001332:	490d      	ldr	r1, [pc, #52]	@ (8001368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001334:	4a0d      	ldr	r2, [pc, #52]	@ (800136c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001348:	4c0a      	ldr	r4, [pc, #40]	@ (8001374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001356:	f004 ff25 	bl	80061a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135a:	f7ff fc83 	bl	8000c64 <main>
  bx  lr
 800135e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001360:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001364:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001368:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800136c:	08006280 	.word	0x08006280
  ldr r2, =_sbss
 8001370:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001374:	2400014c 	.word	0x2400014c

08001378 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC3_IRQHandler>
	...

0800137c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001382:	2003      	movs	r0, #3
 8001384:	f000 f96e 	bl	8001664 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001388:	f001 fa2a 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 800138c:	4602      	mov	r2, r0
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HAL_Init+0x68>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	4913      	ldr	r1, [pc, #76]	@ (80013e8 <HAL_Init+0x6c>)
 800139a:	5ccb      	ldrb	r3, [r1, r3]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	fa22 f303 	lsr.w	r3, r2, r3
 80013a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <HAL_Init+0x68>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	4a0e      	ldr	r2, [pc, #56]	@ (80013e8 <HAL_Init+0x6c>)
 80013b0:	5cd3      	ldrb	r3, [r2, r3]
 80013b2:	f003 031f 	and.w	r3, r3, #31
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
 80013bc:	4a0b      	ldr	r2, [pc, #44]	@ (80013ec <HAL_Init+0x70>)
 80013be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013c0:	4a0b      	ldr	r2, [pc, #44]	@ (80013f0 <HAL_Init+0x74>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c6:	200f      	movs	r0, #15
 80013c8:	f000 f814 	bl	80013f4 <HAL_InitTick>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e002      	b.n	80013dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013d6:	f7ff fded 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	58024400 	.word	0x58024400
 80013e8:	08006238 	.word	0x08006238
 80013ec:	24000004 	.word	0x24000004
 80013f0:	24000000 	.word	0x24000000

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013fc:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_InitTick+0x60>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e021      	b.n	800144c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001408:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <HAL_InitTick+0x64>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <HAL_InitTick+0x60>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f945 	bl	80016ae <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00e      	b.n	800144c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d80a      	bhi.n	800144a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f000 f91d 	bl	800167a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001440:	4a06      	ldr	r2, [pc, #24]	@ (800145c <HAL_InitTick+0x68>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2400000c 	.word	0x2400000c
 8001458:	24000000 	.word	0x24000000
 800145c:	24000008 	.word	0x24000008

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	2400000c 	.word	0x2400000c
 8001484:	24000148 	.word	0x24000148

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b03      	ldr	r3, [pc, #12]	@ (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	24000148 	.word	0x24000148

080014a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff ffee 	bl	8001488 <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ba:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <HAL_Delay+0x44>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c6:	bf00      	nop
 80014c8:	f7ff ffde 	bl	8001488 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2400000c 	.word	0x2400000c

080014e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014ec:	4b03      	ldr	r3, [pc, #12]	@ (80014fc <HAL_GetREVID+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0c1b      	lsrs	r3, r3, #16
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	5c001000 	.word	0x5c001000

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	4313      	orrs	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00
 8001544:	05fa0000 	.word	0x05fa0000

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	@ (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	@ (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	@ 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	bf28      	it	cs
 80015d6:	2304      	movcs	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3304      	adds	r3, #4
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d902      	bls.n	80015e8 <NVIC_EncodePriority+0x30>
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3b03      	subs	r3, #3
 80015e6:	e000      	b.n	80015ea <NVIC_EncodePriority+0x32>
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	@ 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001630:	d301      	bcc.n	8001636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001632:	2301      	movs	r3, #1
 8001634:	e00f      	b.n	8001656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001636:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <SysTick_Config+0x40>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163e:	210f      	movs	r1, #15
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f7ff ff8e 	bl	8001564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <SysTick_Config+0x40>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164e:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <SysTick_Config+0x40>)
 8001650:	2207      	movs	r2, #7
 8001652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	e000e010 	.word	0xe000e010

08001664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff47 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001688:	f7ff ff5e 	bl	8001548 <__NVIC_GetPriorityGrouping>
 800168c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff ff90 	bl	80015b8 <NVIC_EncodePriority>
 8001698:	4602      	mov	r2, r0
 800169a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff5f 	bl	8001564 <__NVIC_SetPriority>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffb2 	bl	8001620 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016cc:	f3bf 8f5f 	dmb	sy
}
 80016d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016d2:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <HAL_MPU_Disable+0x28>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	4a06      	ldr	r2, [pc, #24]	@ (80016f0 <HAL_MPU_Disable+0x28>)
 80016d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016dc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016de:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <HAL_MPU_Disable+0x2c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00
 80016f4:	e000ed90 	.word	0xe000ed90

080016f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001700:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <HAL_MPU_Enable+0x38>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_MPU_Enable+0x3c>)
 800170c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170e:	4a09      	ldr	r2, [pc, #36]	@ (8001734 <HAL_MPU_Enable+0x3c>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001714:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001716:	f3bf 8f4f 	dsb	sy
}
 800171a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800171c:	f3bf 8f6f 	isb	sy
}
 8001720:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed90 	.word	0xe000ed90
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	785a      	ldrb	r2, [r3, #1]
 8001744:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <HAL_MPU_ConfigRegion+0x7c>)
 8001746:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001748:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <HAL_MPU_ConfigRegion+0x7c>)
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	4a19      	ldr	r2, [pc, #100]	@ (80017b4 <HAL_MPU_ConfigRegion+0x7c>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001754:	4a17      	ldr	r2, [pc, #92]	@ (80017b4 <HAL_MPU_ConfigRegion+0x7c>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7b1b      	ldrb	r3, [r3, #12]
 8001760:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7adb      	ldrb	r3, [r3, #11]
 8001766:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001768:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7a9b      	ldrb	r3, [r3, #10]
 800176e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001770:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7b5b      	ldrb	r3, [r3, #13]
 8001776:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001778:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7b9b      	ldrb	r3, [r3, #14]
 800177e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001780:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7bdb      	ldrb	r3, [r3, #15]
 8001786:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001788:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7a5b      	ldrb	r3, [r3, #9]
 800178e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001790:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7a1b      	ldrb	r3, [r3, #8]
 8001796:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001798:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017a0:	4a04      	ldr	r2, [pc, #16]	@ (80017b4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017a2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017a4:	6113      	str	r3, [r2, #16]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed90 	.word	0xe000ed90

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	@ 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017c6:	4b89      	ldr	r3, [pc, #548]	@ (80019ec <HAL_GPIO_Init+0x234>)
 80017c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017ca:	e194      	b.n	8001af6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8186 	beq.w	8001af0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d005      	beq.n	80017fc <HAL_GPIO_Init+0x44>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d130      	bne.n	800185e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001832:	2201      	movs	r2, #1
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	f003 0201 	and.w	r2, r3, #1
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b03      	cmp	r3, #3
 8001868:	d017      	beq.n	800189a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d123      	bne.n	80018ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	08da      	lsrs	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3208      	adds	r2, #8
 80018ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	220f      	movs	r2, #15
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	08da      	lsrs	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3208      	adds	r2, #8
 80018e8:	69b9      	ldr	r1, [r7, #24]
 80018ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0203 	and.w	r2, r3, #3
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 80e0 	beq.w	8001af0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001930:	4b2f      	ldr	r3, [pc, #188]	@ (80019f0 <HAL_GPIO_Init+0x238>)
 8001932:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001936:	4a2e      	ldr	r2, [pc, #184]	@ (80019f0 <HAL_GPIO_Init+0x238>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001940:	4b2b      	ldr	r3, [pc, #172]	@ (80019f0 <HAL_GPIO_Init+0x238>)
 8001942:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800194e:	4a29      	ldr	r2, [pc, #164]	@ (80019f4 <HAL_GPIO_Init+0x23c>)
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	220f      	movs	r2, #15
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a20      	ldr	r2, [pc, #128]	@ (80019f8 <HAL_GPIO_Init+0x240>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d052      	beq.n	8001a20 <HAL_GPIO_Init+0x268>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a1f      	ldr	r2, [pc, #124]	@ (80019fc <HAL_GPIO_Init+0x244>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d031      	beq.n	80019e6 <HAL_GPIO_Init+0x22e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a1e      	ldr	r2, [pc, #120]	@ (8001a00 <HAL_GPIO_Init+0x248>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d02b      	beq.n	80019e2 <HAL_GPIO_Init+0x22a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a1d      	ldr	r2, [pc, #116]	@ (8001a04 <HAL_GPIO_Init+0x24c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d025      	beq.n	80019de <HAL_GPIO_Init+0x226>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a1c      	ldr	r2, [pc, #112]	@ (8001a08 <HAL_GPIO_Init+0x250>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d01f      	beq.n	80019da <HAL_GPIO_Init+0x222>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a1b      	ldr	r2, [pc, #108]	@ (8001a0c <HAL_GPIO_Init+0x254>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d019      	beq.n	80019d6 <HAL_GPIO_Init+0x21e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a10 <HAL_GPIO_Init+0x258>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_GPIO_Init+0x21a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a19      	ldr	r2, [pc, #100]	@ (8001a14 <HAL_GPIO_Init+0x25c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00d      	beq.n	80019ce <HAL_GPIO_Init+0x216>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a18      	ldr	r2, [pc, #96]	@ (8001a18 <HAL_GPIO_Init+0x260>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d007      	beq.n	80019ca <HAL_GPIO_Init+0x212>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a17      	ldr	r2, [pc, #92]	@ (8001a1c <HAL_GPIO_Init+0x264>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d101      	bne.n	80019c6 <HAL_GPIO_Init+0x20e>
 80019c2:	2309      	movs	r3, #9
 80019c4:	e02d      	b.n	8001a22 <HAL_GPIO_Init+0x26a>
 80019c6:	230a      	movs	r3, #10
 80019c8:	e02b      	b.n	8001a22 <HAL_GPIO_Init+0x26a>
 80019ca:	2308      	movs	r3, #8
 80019cc:	e029      	b.n	8001a22 <HAL_GPIO_Init+0x26a>
 80019ce:	2307      	movs	r3, #7
 80019d0:	e027      	b.n	8001a22 <HAL_GPIO_Init+0x26a>
 80019d2:	2306      	movs	r3, #6
 80019d4:	e025      	b.n	8001a22 <HAL_GPIO_Init+0x26a>
 80019d6:	2305      	movs	r3, #5
 80019d8:	e023      	b.n	8001a22 <HAL_GPIO_Init+0x26a>
 80019da:	2304      	movs	r3, #4
 80019dc:	e021      	b.n	8001a22 <HAL_GPIO_Init+0x26a>
 80019de:	2303      	movs	r3, #3
 80019e0:	e01f      	b.n	8001a22 <HAL_GPIO_Init+0x26a>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e01d      	b.n	8001a22 <HAL_GPIO_Init+0x26a>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e01b      	b.n	8001a22 <HAL_GPIO_Init+0x26a>
 80019ea:	bf00      	nop
 80019ec:	58000080 	.word	0x58000080
 80019f0:	58024400 	.word	0x58024400
 80019f4:	58000400 	.word	0x58000400
 80019f8:	58020000 	.word	0x58020000
 80019fc:	58020400 	.word	0x58020400
 8001a00:	58020800 	.word	0x58020800
 8001a04:	58020c00 	.word	0x58020c00
 8001a08:	58021000 	.word	0x58021000
 8001a0c:	58021400 	.word	0x58021400
 8001a10:	58021800 	.word	0x58021800
 8001a14:	58021c00 	.word	0x58021c00
 8001a18:	58022000 	.word	0x58022000
 8001a1c:	58022400 	.word	0x58022400
 8001a20:	2300      	movs	r3, #0
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	f002 0203 	and.w	r2, r2, #3
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	4093      	lsls	r3, r2
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a32:	4938      	ldr	r1, [pc, #224]	@ (8001b14 <HAL_GPIO_Init+0x35c>)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	3301      	adds	r3, #1
 8001af4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f47f ae63 	bne.w	80017cc <HAL_GPIO_Init+0x14>
  }
}
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
 8001b0a:	3724      	adds	r7, #36	@ 0x24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	58000400 	.word	0x58000400

08001b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
 8001b24:	4613      	mov	r3, r2
 8001b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b28:	787b      	ldrb	r3, [r7, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b34:	e003      	b.n	8001b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	041a      	lsls	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	619a      	str	r2, [r3, #24]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001b54:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <HAL_PWREx_ConfigSupply+0x70>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d00a      	beq.n	8001b76 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b60:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <HAL_PWREx_ConfigSupply+0x70>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d001      	beq.n	8001b72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e01f      	b.n	8001bb2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e01d      	b.n	8001bb2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_PWREx_ConfigSupply+0x70>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	f023 0207 	bic.w	r2, r3, #7
 8001b7e:	490f      	ldr	r1, [pc, #60]	@ (8001bbc <HAL_PWREx_ConfigSupply+0x70>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b86:	f7ff fc7f 	bl	8001488 <HAL_GetTick>
 8001b8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b8c:	e009      	b.n	8001ba2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b8e:	f7ff fc7b 	bl	8001488 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b9c:	d901      	bls.n	8001ba2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e007      	b.n	8001bb2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_PWREx_ConfigSupply+0x70>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bae:	d1ee      	bne.n	8001b8e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	58024800 	.word	0x58024800

08001bc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	@ 0x30
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f000 bc48 	b.w	8002464 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 8088 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be2:	4b99      	ldr	r3, [pc, #612]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bec:	4b96      	ldr	r3, [pc, #600]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf4:	2b10      	cmp	r3, #16
 8001bf6:	d007      	beq.n	8001c08 <HAL_RCC_OscConfig+0x48>
 8001bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bfa:	2b18      	cmp	r3, #24
 8001bfc:	d111      	bne.n	8001c22 <HAL_RCC_OscConfig+0x62>
 8001bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d10c      	bne.n	8001c22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	4b8f      	ldr	r3, [pc, #572]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d06d      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x130>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d169      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f000 bc21 	b.w	8002464 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x7a>
 8001c2c:	4b86      	ldr	r3, [pc, #536]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a85      	ldr	r2, [pc, #532]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	e02e      	b.n	8001c98 <HAL_RCC_OscConfig+0xd8>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x9c>
 8001c42:	4b81      	ldr	r3, [pc, #516]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a80      	ldr	r2, [pc, #512]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b7e      	ldr	r3, [pc, #504]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7d      	ldr	r2, [pc, #500]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e01d      	b.n	8001c98 <HAL_RCC_OscConfig+0xd8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0xc0>
 8001c66:	4b78      	ldr	r3, [pc, #480]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a77      	ldr	r2, [pc, #476]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b75      	ldr	r3, [pc, #468]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a74      	ldr	r2, [pc, #464]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e00b      	b.n	8001c98 <HAL_RCC_OscConfig+0xd8>
 8001c80:	4b71      	ldr	r3, [pc, #452]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a70      	ldr	r2, [pc, #448]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b6e      	ldr	r3, [pc, #440]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a6d      	ldr	r2, [pc, #436]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d013      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fbf2 	bl	8001488 <HAL_GetTick>
 8001ca4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fbee 	bl	8001488 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	@ 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e3d4      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cba:	4b63      	ldr	r3, [pc, #396]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0xe8>
 8001cc6:	e014      	b.n	8001cf2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fbde 	bl	8001488 <HAL_GetTick>
 8001ccc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff fbda 	bl	8001488 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	@ 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e3c0      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ce2:	4b59      	ldr	r3, [pc, #356]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x110>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80ca 	beq.w	8001e94 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d00:	4b51      	ldr	r3, [pc, #324]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d08:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d007      	beq.n	8001d26 <HAL_RCC_OscConfig+0x166>
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	2b18      	cmp	r3, #24
 8001d1a:	d156      	bne.n	8001dca <HAL_RCC_OscConfig+0x20a>
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d151      	bne.n	8001dca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d26:	4b48      	ldr	r3, [pc, #288]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <HAL_RCC_OscConfig+0x17e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e392      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d3e:	4b42      	ldr	r3, [pc, #264]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 0219 	bic.w	r2, r3, #25
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	493f      	ldr	r1, [pc, #252]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff fb9a 	bl	8001488 <HAL_GetTick>
 8001d54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff fb96 	bl	8001488 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e37c      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d6a:	4b37      	ldr	r3, [pc, #220]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d76:	f7ff fbb7 	bl	80014e8 <HAL_GetREVID>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d817      	bhi.n	8001db4 <HAL_RCC_OscConfig+0x1f4>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	2b40      	cmp	r3, #64	@ 0x40
 8001d8a:	d108      	bne.n	8001d9e <HAL_RCC_OscConfig+0x1de>
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d94:	4a2c      	ldr	r2, [pc, #176]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d9a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d9c:	e07a      	b.n	8001e94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	031b      	lsls	r3, r3, #12
 8001dac:	4926      	ldr	r1, [pc, #152]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db2:	e06f      	b.n	8001e94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	4b24      	ldr	r3, [pc, #144]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	061b      	lsls	r3, r3, #24
 8001dc2:	4921      	ldr	r1, [pc, #132]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc8:	e064      	b.n	8001e94 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d047      	beq.n	8001e62 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 0219 	bic.w	r2, r3, #25
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	491a      	ldr	r1, [pc, #104]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff fb50 	bl	8001488 <HAL_GetTick>
 8001de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff fb4c 	bl	8001488 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e332      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dfe:	4b12      	ldr	r3, [pc, #72]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0a:	f7ff fb6d 	bl	80014e8 <HAL_GetREVID>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d819      	bhi.n	8001e4c <HAL_RCC_OscConfig+0x28c>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	2b40      	cmp	r3, #64	@ 0x40
 8001e1e:	d108      	bne.n	8001e32 <HAL_RCC_OscConfig+0x272>
 8001e20:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001e28:	4a07      	ldr	r2, [pc, #28]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e2e:	6053      	str	r3, [r2, #4]
 8001e30:	e030      	b.n	8001e94 <HAL_RCC_OscConfig+0x2d4>
 8001e32:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	031b      	lsls	r3, r3, #12
 8001e40:	4901      	ldr	r1, [pc, #4]	@ (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
 8001e46:	e025      	b.n	8001e94 <HAL_RCC_OscConfig+0x2d4>
 8001e48:	58024400 	.word	0x58024400
 8001e4c:	4b9a      	ldr	r3, [pc, #616]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	061b      	lsls	r3, r3, #24
 8001e5a:	4997      	ldr	r1, [pc, #604]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
 8001e60:	e018      	b.n	8001e94 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e62:	4b95      	ldr	r3, [pc, #596]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a94      	ldr	r2, [pc, #592]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7ff fb0b 	bl	8001488 <HAL_GetTick>
 8001e72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e76:	f7ff fb07 	bl	8001488 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e2ed      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e88:	4b8b      	ldr	r3, [pc, #556]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80a9 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea2:	4b85      	ldr	r3, [pc, #532]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001eaa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001eac:	4b82      	ldr	r3, [pc, #520]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d007      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x308>
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2b18      	cmp	r3, #24
 8001ebc:	d13a      	bne.n	8001f34 <HAL_RCC_OscConfig+0x374>
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d135      	bne.n	8001f34 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ec8:	4b7b      	ldr	r3, [pc, #492]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x320>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	2b80      	cmp	r3, #128	@ 0x80
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e2c1      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ee0:	f7ff fb02 	bl	80014e8 <HAL_GetREVID>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d817      	bhi.n	8001f1e <HAL_RCC_OscConfig+0x35e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	d108      	bne.n	8001f08 <HAL_RCC_OscConfig+0x348>
 8001ef6:	4b70      	ldr	r3, [pc, #448]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001efe:	4a6e      	ldr	r2, [pc, #440]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f04:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f06:	e075      	b.n	8001ff4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f08:	4b6b      	ldr	r3, [pc, #428]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	069b      	lsls	r3, r3, #26
 8001f16:	4968      	ldr	r1, [pc, #416]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f1c:	e06a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f1e:	4b66      	ldr	r3, [pc, #408]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	061b      	lsls	r3, r3, #24
 8001f2c:	4962      	ldr	r1, [pc, #392]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f32:	e05f      	b.n	8001ff4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d042      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f3c:	4b5e      	ldr	r3, [pc, #376]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a5d      	ldr	r2, [pc, #372]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff fa9e 	bl	8001488 <HAL_GetTick>
 8001f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f50:	f7ff fa9a 	bl	8001488 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e280      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f62:	4b55      	ldr	r3, [pc, #340]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f6e:	f7ff fabb 	bl	80014e8 <HAL_GetREVID>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d817      	bhi.n	8001fac <HAL_RCC_OscConfig+0x3ec>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	d108      	bne.n	8001f96 <HAL_RCC_OscConfig+0x3d6>
 8001f84:	4b4c      	ldr	r3, [pc, #304]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f92:	6053      	str	r3, [r2, #4]
 8001f94:	e02e      	b.n	8001ff4 <HAL_RCC_OscConfig+0x434>
 8001f96:	4b48      	ldr	r3, [pc, #288]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	069b      	lsls	r3, r3, #26
 8001fa4:	4944      	ldr	r1, [pc, #272]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
 8001faa:	e023      	b.n	8001ff4 <HAL_RCC_OscConfig+0x434>
 8001fac:	4b42      	ldr	r3, [pc, #264]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	061b      	lsls	r3, r3, #24
 8001fba:	493f      	ldr	r1, [pc, #252]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60cb      	str	r3, [r1, #12]
 8001fc0:	e018      	b.n	8001ff4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a3c      	ldr	r2, [pc, #240]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001fc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7ff fa5b 	bl	8001488 <HAL_GetTick>
 8001fd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001fd6:	f7ff fa57 	bl	8001488 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e23d      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fe8:	4b33      	ldr	r3, [pc, #204]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f0      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d036      	beq.n	800206e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d019      	beq.n	800203c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002008:	4b2b      	ldr	r3, [pc, #172]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 800200a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800200c:	4a2a      	ldr	r2, [pc, #168]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002014:	f7ff fa38 	bl	8001488 <HAL_GetTick>
 8002018:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201c:	f7ff fa34 	bl	8001488 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e21a      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800202e:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8002030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x45c>
 800203a:	e018      	b.n	800206e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203c:	4b1e      	ldr	r3, [pc, #120]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 800203e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002040:	4a1d      	ldr	r2, [pc, #116]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7ff fa1e 	bl	8001488 <HAL_GetTick>
 800204c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff fa1a 	bl	8001488 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e200      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8002064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d039      	beq.n	80020ee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01c      	beq.n	80020bc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002082:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a0c      	ldr	r2, [pc, #48]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8002088:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800208c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800208e:	f7ff f9fb 	bl	8001488 <HAL_GetTick>
 8002092:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002096:	f7ff f9f7 	bl	8001488 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e1dd      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020a8:	4b03      	ldr	r3, [pc, #12]	@ (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x4d6>
 80020b4:	e01b      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
 80020b6:	bf00      	nop
 80020b8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020bc:	4b9b      	ldr	r3, [pc, #620]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a9a      	ldr	r2, [pc, #616]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80020c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020c8:	f7ff f9de 	bl	8001488 <HAL_GetTick>
 80020cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d0:	f7ff f9da 	bl	8001488 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1c0      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020e2:	4b92      	ldr	r3, [pc, #584]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8081 	beq.w	80021fe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002330 <HAL_RCC_OscConfig+0x770>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a8b      	ldr	r2, [pc, #556]	@ (8002330 <HAL_RCC_OscConfig+0x770>)
 8002102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002106:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002108:	f7ff f9be 	bl	8001488 <HAL_GetTick>
 800210c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002110:	f7ff f9ba 	bl	8001488 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	@ 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1a0      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002122:	4b83      	ldr	r3, [pc, #524]	@ (8002330 <HAL_RCC_OscConfig+0x770>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d106      	bne.n	8002144 <HAL_RCC_OscConfig+0x584>
 8002136:	4b7d      	ldr	r3, [pc, #500]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213a:	4a7c      	ldr	r2, [pc, #496]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6713      	str	r3, [r2, #112]	@ 0x70
 8002142:	e02d      	b.n	80021a0 <HAL_RCC_OscConfig+0x5e0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10c      	bne.n	8002166 <HAL_RCC_OscConfig+0x5a6>
 800214c:	4b77      	ldr	r3, [pc, #476]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002150:	4a76      	ldr	r2, [pc, #472]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	6713      	str	r3, [r2, #112]	@ 0x70
 8002158:	4b74      	ldr	r3, [pc, #464]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215c:	4a73      	ldr	r2, [pc, #460]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 800215e:	f023 0304 	bic.w	r3, r3, #4
 8002162:	6713      	str	r3, [r2, #112]	@ 0x70
 8002164:	e01c      	b.n	80021a0 <HAL_RCC_OscConfig+0x5e0>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b05      	cmp	r3, #5
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0x5c8>
 800216e:	4b6f      	ldr	r3, [pc, #444]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002172:	4a6e      	ldr	r2, [pc, #440]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	6713      	str	r3, [r2, #112]	@ 0x70
 800217a:	4b6c      	ldr	r3, [pc, #432]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800217e:	4a6b      	ldr	r2, [pc, #428]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6713      	str	r3, [r2, #112]	@ 0x70
 8002186:	e00b      	b.n	80021a0 <HAL_RCC_OscConfig+0x5e0>
 8002188:	4b68      	ldr	r3, [pc, #416]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218c:	4a67      	ldr	r2, [pc, #412]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	6713      	str	r3, [r2, #112]	@ 0x70
 8002194:	4b65      	ldr	r3, [pc, #404]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002198:	4a64      	ldr	r2, [pc, #400]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 800219a:	f023 0304 	bic.w	r3, r3, #4
 800219e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d015      	beq.n	80021d4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7ff f96e 	bl	8001488 <HAL_GetTick>
 80021ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b0:	f7ff f96a 	bl	8001488 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e14e      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021c6:	4b59      	ldr	r3, [pc, #356]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0ee      	beq.n	80021b0 <HAL_RCC_OscConfig+0x5f0>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7ff f958 	bl	8001488 <HAL_GetTick>
 80021d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7ff f954 	bl	8001488 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e138      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021f2:	4b4e      	ldr	r3, [pc, #312]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1ee      	bne.n	80021dc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 812d 	beq.w	8002462 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002208:	4b48      	ldr	r3, [pc, #288]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002210:	2b18      	cmp	r3, #24
 8002212:	f000 80bd 	beq.w	8002390 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	2b02      	cmp	r3, #2
 800221c:	f040 809e 	bne.w	800235c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002220:	4b42      	ldr	r3, [pc, #264]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a41      	ldr	r2, [pc, #260]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 8002226:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800222a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222c:	f7ff f92c 	bl	8001488 <HAL_GetTick>
 8002230:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002234:	f7ff f928 	bl	8001488 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e10e      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002246:	4b39      	ldr	r3, [pc, #228]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002252:	4b36      	ldr	r3, [pc, #216]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 8002254:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002256:	4b37      	ldr	r3, [pc, #220]	@ (8002334 <HAL_RCC_OscConfig+0x774>)
 8002258:	4013      	ands	r3, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002262:	0112      	lsls	r2, r2, #4
 8002264:	430a      	orrs	r2, r1
 8002266:	4931      	ldr	r1, [pc, #196]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 8002268:	4313      	orrs	r3, r2
 800226a:	628b      	str	r3, [r1, #40]	@ 0x28
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002270:	3b01      	subs	r3, #1
 8002272:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800227a:	3b01      	subs	r3, #1
 800227c:	025b      	lsls	r3, r3, #9
 800227e:	b29b      	uxth	r3, r3
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002286:	3b01      	subs	r3, #1
 8002288:	041b      	lsls	r3, r3, #16
 800228a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002294:	3b01      	subs	r3, #1
 8002296:	061b      	lsls	r3, r3, #24
 8002298:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800229c:	4923      	ldr	r1, [pc, #140]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80022a2:	4b22      	ldr	r3, [pc, #136]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	4a21      	ldr	r2, [pc, #132]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022ae:	4b1f      	ldr	r3, [pc, #124]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80022b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022b2:	4b21      	ldr	r3, [pc, #132]	@ (8002338 <HAL_RCC_OscConfig+0x778>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022ba:	00d2      	lsls	r2, r2, #3
 80022bc:	491b      	ldr	r1, [pc, #108]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022c2:	4b1a      	ldr	r3, [pc, #104]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80022c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c6:	f023 020c 	bic.w	r2, r3, #12
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	4917      	ldr	r1, [pc, #92]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022d4:	4b15      	ldr	r3, [pc, #84]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80022d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d8:	f023 0202 	bic.w	r2, r3, #2
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e0:	4912      	ldr	r1, [pc, #72]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022e6:	4b11      	ldr	r3, [pc, #68]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ea:	4a10      	ldr	r2, [pc, #64]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022f2:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f6:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 80022f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022fe:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 8002300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002302:	4a0a      	ldr	r2, [pc, #40]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 8002304:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002308:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800230a:	4b08      	ldr	r3, [pc, #32]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 800230c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230e:	4a07      	ldr	r2, [pc, #28]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002316:	4b05      	ldr	r3, [pc, #20]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a04      	ldr	r2, [pc, #16]	@ (800232c <HAL_RCC_OscConfig+0x76c>)
 800231c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7ff f8b1 	bl	8001488 <HAL_GetTick>
 8002326:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002328:	e011      	b.n	800234e <HAL_RCC_OscConfig+0x78e>
 800232a:	bf00      	nop
 800232c:	58024400 	.word	0x58024400
 8002330:	58024800 	.word	0x58024800
 8002334:	fffffc0c 	.word	0xfffffc0c
 8002338:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233c:	f7ff f8a4 	bl	8001488 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e08a      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800234e:	4b47      	ldr	r3, [pc, #284]	@ (800246c <HAL_RCC_OscConfig+0x8ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x77c>
 800235a:	e082      	b.n	8002462 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235c:	4b43      	ldr	r3, [pc, #268]	@ (800246c <HAL_RCC_OscConfig+0x8ac>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a42      	ldr	r2, [pc, #264]	@ (800246c <HAL_RCC_OscConfig+0x8ac>)
 8002362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7ff f88e 	bl	8001488 <HAL_GetTick>
 800236c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7ff f88a 	bl	8001488 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e070      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002382:	4b3a      	ldr	r3, [pc, #232]	@ (800246c <HAL_RCC_OscConfig+0x8ac>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x7b0>
 800238e:	e068      	b.n	8002462 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002390:	4b36      	ldr	r3, [pc, #216]	@ (800246c <HAL_RCC_OscConfig+0x8ac>)
 8002392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002394:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002396:	4b35      	ldr	r3, [pc, #212]	@ (800246c <HAL_RCC_OscConfig+0x8ac>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d031      	beq.n	8002408 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f003 0203 	and.w	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d12a      	bne.n	8002408 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d122      	bne.n	8002408 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d11a      	bne.n	8002408 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	0a5b      	lsrs	r3, r3, #9
 80023d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d111      	bne.n	8002408 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	0c1b      	lsrs	r3, r3, #16
 80023e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d108      	bne.n	8002408 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	0e1b      	lsrs	r3, r3, #24
 80023fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002402:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e02b      	b.n	8002464 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800240c:	4b17      	ldr	r3, [pc, #92]	@ (800246c <HAL_RCC_OscConfig+0x8ac>)
 800240e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002410:	08db      	lsrs	r3, r3, #3
 8002412:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002416:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	429a      	cmp	r2, r3
 8002420:	d01f      	beq.n	8002462 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002422:	4b12      	ldr	r3, [pc, #72]	@ (800246c <HAL_RCC_OscConfig+0x8ac>)
 8002424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002426:	4a11      	ldr	r2, [pc, #68]	@ (800246c <HAL_RCC_OscConfig+0x8ac>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800242e:	f7ff f82b 	bl	8001488 <HAL_GetTick>
 8002432:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002434:	bf00      	nop
 8002436:	f7ff f827 	bl	8001488 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	4293      	cmp	r3, r2
 8002440:	d0f9      	beq.n	8002436 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002442:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <HAL_RCC_OscConfig+0x8ac>)
 8002444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002446:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <HAL_RCC_OscConfig+0x8b0>)
 8002448:	4013      	ands	r3, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800244e:	00d2      	lsls	r2, r2, #3
 8002450:	4906      	ldr	r1, [pc, #24]	@ (800246c <HAL_RCC_OscConfig+0x8ac>)
 8002452:	4313      	orrs	r3, r2
 8002454:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002456:	4b05      	ldr	r3, [pc, #20]	@ (800246c <HAL_RCC_OscConfig+0x8ac>)
 8002458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245a:	4a04      	ldr	r2, [pc, #16]	@ (800246c <HAL_RCC_OscConfig+0x8ac>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3730      	adds	r7, #48	@ 0x30
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	58024400 	.word	0x58024400
 8002470:	ffff0007 	.word	0xffff0007

08002474 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e19c      	b.n	80027c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b8a      	ldr	r3, [pc, #552]	@ (80026b4 <HAL_RCC_ClockConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d910      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b87      	ldr	r3, [pc, #540]	@ (80026b4 <HAL_RCC_ClockConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 020f 	bic.w	r2, r3, #15
 800249e:	4985      	ldr	r1, [pc, #532]	@ (80026b4 <HAL_RCC_ClockConfig+0x240>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b83      	ldr	r3, [pc, #524]	@ (80026b4 <HAL_RCC_ClockConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e184      	b.n	80027c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d010      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	4b7b      	ldr	r3, [pc, #492]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d908      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024d4:	4b78      	ldr	r3, [pc, #480]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	4975      	ldr	r1, [pc, #468]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d010      	beq.n	8002514 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	4b70      	ldr	r3, [pc, #448]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024fe:	429a      	cmp	r2, r3
 8002500:	d908      	bls.n	8002514 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002502:	4b6d      	ldr	r3, [pc, #436]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	496a      	ldr	r1, [pc, #424]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002510:	4313      	orrs	r3, r2
 8002512:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	d010      	beq.n	8002542 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699a      	ldr	r2, [r3, #24]
 8002524:	4b64      	ldr	r3, [pc, #400]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800252c:	429a      	cmp	r2, r3
 800252e:	d908      	bls.n	8002542 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002530:	4b61      	ldr	r3, [pc, #388]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	495e      	ldr	r1, [pc, #376]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 800253e:	4313      	orrs	r3, r2
 8002540:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b00      	cmp	r3, #0
 800254c:	d010      	beq.n	8002570 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	4b59      	ldr	r3, [pc, #356]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800255a:	429a      	cmp	r2, r3
 800255c:	d908      	bls.n	8002570 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800255e:	4b56      	ldr	r3, [pc, #344]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4953      	ldr	r1, [pc, #332]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 800256c:	4313      	orrs	r3, r2
 800256e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d010      	beq.n	800259e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	4b4d      	ldr	r3, [pc, #308]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	429a      	cmp	r2, r3
 800258a:	d908      	bls.n	800259e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258c:	4b4a      	ldr	r3, [pc, #296]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f023 020f 	bic.w	r2, r3, #15
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4947      	ldr	r1, [pc, #284]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 800259a:	4313      	orrs	r3, r2
 800259c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d055      	beq.n	8002656 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80025aa:	4b43      	ldr	r3, [pc, #268]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	4940      	ldr	r1, [pc, #256]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025c4:	4b3c      	ldr	r3, [pc, #240]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d121      	bne.n	8002614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0f6      	b.n	80027c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d107      	bne.n	80025ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025dc:	4b36      	ldr	r3, [pc, #216]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d115      	bne.n	8002614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0ea      	b.n	80027c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d107      	bne.n	8002604 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025f4:	4b30      	ldr	r3, [pc, #192]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0de      	b.n	80027c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002604:	4b2c      	ldr	r3, [pc, #176]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0d6      	b.n	80027c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002614:	4b28      	ldr	r3, [pc, #160]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f023 0207 	bic.w	r2, r3, #7
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4925      	ldr	r1, [pc, #148]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002622:	4313      	orrs	r3, r2
 8002624:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002626:	f7fe ff2f 	bl	8001488 <HAL_GetTick>
 800262a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262c:	e00a      	b.n	8002644 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800262e:	f7fe ff2b 	bl	8001488 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e0be      	b.n	80027c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002644:	4b1c      	ldr	r3, [pc, #112]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	429a      	cmp	r2, r3
 8002654:	d1eb      	bne.n	800262e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d010      	beq.n	8002684 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	429a      	cmp	r2, r3
 8002670:	d208      	bcs.n	8002684 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002672:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f023 020f 	bic.w	r2, r3, #15
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	490e      	ldr	r1, [pc, #56]	@ (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002680:	4313      	orrs	r3, r2
 8002682:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002684:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_RCC_ClockConfig+0x240>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d214      	bcs.n	80026bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b08      	ldr	r3, [pc, #32]	@ (80026b4 <HAL_RCC_ClockConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 020f 	bic.w	r2, r3, #15
 800269a:	4906      	ldr	r1, [pc, #24]	@ (80026b4 <HAL_RCC_ClockConfig+0x240>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b04      	ldr	r3, [pc, #16]	@ (80026b4 <HAL_RCC_ClockConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e086      	b.n	80027c2 <HAL_RCC_ClockConfig+0x34e>
 80026b4:	52002000 	.word	0x52002000
 80026b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d010      	beq.n	80026ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	4b3f      	ldr	r3, [pc, #252]	@ (80027cc <HAL_RCC_ClockConfig+0x358>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d208      	bcs.n	80026ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026d8:	4b3c      	ldr	r3, [pc, #240]	@ (80027cc <HAL_RCC_ClockConfig+0x358>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	4939      	ldr	r1, [pc, #228]	@ (80027cc <HAL_RCC_ClockConfig+0x358>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d010      	beq.n	8002718 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	4b34      	ldr	r3, [pc, #208]	@ (80027cc <HAL_RCC_ClockConfig+0x358>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002702:	429a      	cmp	r2, r3
 8002704:	d208      	bcs.n	8002718 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002706:	4b31      	ldr	r3, [pc, #196]	@ (80027cc <HAL_RCC_ClockConfig+0x358>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	492e      	ldr	r1, [pc, #184]	@ (80027cc <HAL_RCC_ClockConfig+0x358>)
 8002714:	4313      	orrs	r3, r2
 8002716:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d010      	beq.n	8002746 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <HAL_RCC_ClockConfig+0x358>)
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002730:	429a      	cmp	r2, r3
 8002732:	d208      	bcs.n	8002746 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002734:	4b25      	ldr	r3, [pc, #148]	@ (80027cc <HAL_RCC_ClockConfig+0x358>)
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	4922      	ldr	r1, [pc, #136]	@ (80027cc <HAL_RCC_ClockConfig+0x358>)
 8002742:	4313      	orrs	r3, r2
 8002744:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b00      	cmp	r3, #0
 8002750:	d010      	beq.n	8002774 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	4b1d      	ldr	r3, [pc, #116]	@ (80027cc <HAL_RCC_ClockConfig+0x358>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800275e:	429a      	cmp	r2, r3
 8002760:	d208      	bcs.n	8002774 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002762:	4b1a      	ldr	r3, [pc, #104]	@ (80027cc <HAL_RCC_ClockConfig+0x358>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4917      	ldr	r1, [pc, #92]	@ (80027cc <HAL_RCC_ClockConfig+0x358>)
 8002770:	4313      	orrs	r3, r2
 8002772:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002774:	f000 f834 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <HAL_RCC_ClockConfig+0x358>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	4912      	ldr	r1, [pc, #72]	@ (80027d0 <HAL_RCC_ClockConfig+0x35c>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	fa22 f303 	lsr.w	r3, r2, r3
 8002790:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002792:	4b0e      	ldr	r3, [pc, #56]	@ (80027cc <HAL_RCC_ClockConfig+0x358>)
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	4a0d      	ldr	r2, [pc, #52]	@ (80027d0 <HAL_RCC_ClockConfig+0x35c>)
 800279c:	5cd3      	ldrb	r3, [r2, r3]
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
 80027a8:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <HAL_RCC_ClockConfig+0x360>)
 80027aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027ac:	4a0a      	ldr	r2, [pc, #40]	@ (80027d8 <HAL_RCC_ClockConfig+0x364>)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80027b2:	4b0a      	ldr	r3, [pc, #40]	@ (80027dc <HAL_RCC_ClockConfig+0x368>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fe1c 	bl	80013f4 <HAL_InitTick>
 80027bc:	4603      	mov	r3, r0
 80027be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	58024400 	.word	0x58024400
 80027d0:	08006238 	.word	0x08006238
 80027d4:	24000004 	.word	0x24000004
 80027d8:	24000000 	.word	0x24000000
 80027dc:	24000008 	.word	0x24000008

080027e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	@ 0x24
 80027e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027e6:	4bb3      	ldr	r3, [pc, #716]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027ee:	2b18      	cmp	r3, #24
 80027f0:	f200 8155 	bhi.w	8002a9e <HAL_RCC_GetSysClockFreq+0x2be>
 80027f4:	a201      	add	r2, pc, #4	@ (adr r2, 80027fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	08002861 	.word	0x08002861
 8002800:	08002a9f 	.word	0x08002a9f
 8002804:	08002a9f 	.word	0x08002a9f
 8002808:	08002a9f 	.word	0x08002a9f
 800280c:	08002a9f 	.word	0x08002a9f
 8002810:	08002a9f 	.word	0x08002a9f
 8002814:	08002a9f 	.word	0x08002a9f
 8002818:	08002a9f 	.word	0x08002a9f
 800281c:	08002887 	.word	0x08002887
 8002820:	08002a9f 	.word	0x08002a9f
 8002824:	08002a9f 	.word	0x08002a9f
 8002828:	08002a9f 	.word	0x08002a9f
 800282c:	08002a9f 	.word	0x08002a9f
 8002830:	08002a9f 	.word	0x08002a9f
 8002834:	08002a9f 	.word	0x08002a9f
 8002838:	08002a9f 	.word	0x08002a9f
 800283c:	0800288d 	.word	0x0800288d
 8002840:	08002a9f 	.word	0x08002a9f
 8002844:	08002a9f 	.word	0x08002a9f
 8002848:	08002a9f 	.word	0x08002a9f
 800284c:	08002a9f 	.word	0x08002a9f
 8002850:	08002a9f 	.word	0x08002a9f
 8002854:	08002a9f 	.word	0x08002a9f
 8002858:	08002a9f 	.word	0x08002a9f
 800285c:	08002893 	.word	0x08002893
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002860:	4b94      	ldr	r3, [pc, #592]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b00      	cmp	r3, #0
 800286a:	d009      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800286c:	4b91      	ldr	r3, [pc, #580]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	08db      	lsrs	r3, r3, #3
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	4a90      	ldr	r2, [pc, #576]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
 800287c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800287e:	e111      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002880:	4b8d      	ldr	r3, [pc, #564]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002882:	61bb      	str	r3, [r7, #24]
      break;
 8002884:	e10e      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002886:	4b8d      	ldr	r3, [pc, #564]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002888:	61bb      	str	r3, [r7, #24]
      break;
 800288a:	e10b      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800288c:	4b8c      	ldr	r3, [pc, #560]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800288e:	61bb      	str	r3, [r7, #24]
      break;
 8002890:	e108      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002892:	4b88      	ldr	r3, [pc, #544]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800289c:	4b85      	ldr	r3, [pc, #532]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800289e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028a8:	4b82      	ldr	r3, [pc, #520]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80028b2:	4b80      	ldr	r3, [pc, #512]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b6:	08db      	lsrs	r3, r3, #3
 80028b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80e1 	beq.w	8002a98 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	f000 8083 	beq.w	80029e4 <HAL_RCC_GetSysClockFreq+0x204>
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	f200 80a1 	bhi.w	8002a28 <HAL_RCC_GetSysClockFreq+0x248>
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x114>
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d056      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80028f2:	e099      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028f4:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d02d      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002900:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	08db      	lsrs	r3, r3, #3
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	4a6b      	ldr	r2, [pc, #428]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
 8002910:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	ee07 3a90 	vmov	s15, r3
 8002918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800292a:	4b62      	ldr	r3, [pc, #392]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002932:	ee07 3a90 	vmov	s15, r3
 8002936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800293a:	ed97 6a02 	vldr	s12, [r7, #8]
 800293e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800294a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800294e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002956:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800295a:	e087      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	ee07 3a90 	vmov	s15, r3
 8002962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002966:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002ac8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800296a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800296e:	4b51      	ldr	r3, [pc, #324]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800297e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002982:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800298a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800298e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800299e:	e065      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029aa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002acc <HAL_RCC_GetSysClockFreq+0x2ec>
 80029ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029b2:	4b40      	ldr	r3, [pc, #256]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80029c6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029e2:	e043      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002ad0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80029f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029f6:	4b2f      	ldr	r3, [pc, #188]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fe:	ee07 3a90 	vmov	s15, r3
 8002a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a0a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a26:	e021      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	ee07 3a90 	vmov	s15, r3
 8002a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a32:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002acc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a4e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a70:	0a5b      	lsrs	r3, r3, #9
 8002a72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a76:	3301      	adds	r3, #1
 8002a78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a84:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a90:	ee17 3a90 	vmov	r3, s15
 8002a94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002a96:	e005      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61bb      	str	r3, [r7, #24]
      break;
 8002a9c:	e002      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002a9e:	4b07      	ldr	r3, [pc, #28]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002aa0:	61bb      	str	r3, [r7, #24]
      break;
 8002aa2:	bf00      	nop
  }

  return sysclockfreq;
 8002aa4:	69bb      	ldr	r3, [r7, #24]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3724      	adds	r7, #36	@ 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	58024400 	.word	0x58024400
 8002ab8:	03d09000 	.word	0x03d09000
 8002abc:	003d0900 	.word	0x003d0900
 8002ac0:	017d7840 	.word	0x017d7840
 8002ac4:	46000000 	.word	0x46000000
 8002ac8:	4c742400 	.word	0x4c742400
 8002acc:	4a742400 	.word	0x4a742400
 8002ad0:	4bbebc20 	.word	0x4bbebc20

08002ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ada:	f7ff fe81 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	0a1b      	lsrs	r3, r3, #8
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	490f      	ldr	r1, [pc, #60]	@ (8002b28 <HAL_RCC_GetHCLKFreq+0x54>)
 8002aec:	5ccb      	ldrb	r3, [r1, r3]
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002af8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <HAL_RCC_GetHCLKFreq+0x50>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	4a09      	ldr	r2, [pc, #36]	@ (8002b28 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b02:	5cd3      	ldrb	r3, [r2, r3]
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0e:	4a07      	ldr	r2, [pc, #28]	@ (8002b2c <HAL_RCC_GetHCLKFreq+0x58>)
 8002b10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b12:	4a07      	ldr	r2, [pc, #28]	@ (8002b30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002b18:	4b04      	ldr	r3, [pc, #16]	@ (8002b2c <HAL_RCC_GetHCLKFreq+0x58>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	58024400 	.word	0x58024400
 8002b28:	08006238 	.word	0x08006238
 8002b2c:	24000004 	.word	0x24000004
 8002b30:	24000000 	.word	0x24000000

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002b38:	f7ff ffcc 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4904      	ldr	r1, [pc, #16]	@ (8002b5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	58024400 	.word	0x58024400
 8002b5c:	08006238 	.word	0x08006238

08002b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002b64:	f7ff ffb6 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	0a1b      	lsrs	r3, r3, #8
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	4904      	ldr	r1, [pc, #16]	@ (8002b88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	58024400 	.word	0x58024400
 8002b88:	08006238 	.word	0x08006238

08002b8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b90:	b0ca      	sub	sp, #296	@ 0x128
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002bb0:	2500      	movs	r5, #0
 8002bb2:	ea54 0305 	orrs.w	r3, r4, r5
 8002bb6:	d049      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002bc2:	d02f      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002bc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002bc8:	d828      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002bca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bce:	d01a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002bd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bd4:	d822      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002bda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bde:	d007      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002be0:	e01c      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002be2:	4bb8      	ldr	r3, [pc, #736]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be6:	4ab7      	ldr	r2, [pc, #732]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002bee:	e01a      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf4:	3308      	adds	r3, #8
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f001 fc8f 	bl	800451c <RCCEx_PLL2_Config>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c04:	e00f      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c0a:	3328      	adds	r3, #40	@ 0x28
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 fd36 	bl	8004680 <RCCEx_PLL3_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c1a:	e004      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c22:	e000      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10a      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c2e:	4ba5      	ldr	r3, [pc, #660]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c3c:	4aa1      	ldr	r2, [pc, #644]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c42:	e003      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002c58:	f04f 0900 	mov.w	r9, #0
 8002c5c:	ea58 0309 	orrs.w	r3, r8, r9
 8002c60:	d047      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d82a      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c72:	bf00      	nop
 8002c74:	08002c89 	.word	0x08002c89
 8002c78:	08002c97 	.word	0x08002c97
 8002c7c:	08002cad 	.word	0x08002cad
 8002c80:	08002ccb 	.word	0x08002ccb
 8002c84:	08002ccb 	.word	0x08002ccb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c88:	4b8e      	ldr	r3, [pc, #568]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	4a8d      	ldr	r2, [pc, #564]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c94:	e01a      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c9a:	3308      	adds	r3, #8
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f001 fc3c 	bl	800451c <RCCEx_PLL2_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002caa:	e00f      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb0:	3328      	adds	r3, #40	@ 0x28
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 fce3 	bl	8004680 <RCCEx_PLL3_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cc0:	e004      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cc8:	e000      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cd4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd8:	f023 0107 	bic.w	r1, r3, #7
 8002cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce2:	4a78      	ldr	r2, [pc, #480]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ce8:	e003      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002cfe:	f04f 0b00 	mov.w	fp, #0
 8002d02:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d06:	d04c      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d12:	d030      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002d14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d18:	d829      	bhi.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d1c:	d02d      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d20:	d825      	bhi.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d22:	2b80      	cmp	r3, #128	@ 0x80
 8002d24:	d018      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d26:	2b80      	cmp	r3, #128	@ 0x80
 8002d28:	d821      	bhi.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002d2e:	2b40      	cmp	r3, #64	@ 0x40
 8002d30:	d007      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002d32:	e01c      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d34:	4b63      	ldr	r3, [pc, #396]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	4a62      	ldr	r2, [pc, #392]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d40:	e01c      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d46:	3308      	adds	r3, #8
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 fbe6 	bl	800451c <RCCEx_PLL2_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d56:	e011      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d5c:	3328      	adds	r3, #40	@ 0x28
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 fc8d 	bl	8004680 <RCCEx_PLL3_Config>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d6c:	e006      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d74:	e002      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d76:	bf00      	nop
 8002d78:	e000      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002d84:	4b4f      	ldr	r3, [pc, #316]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d88:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d92:	4a4c      	ldr	r2, [pc, #304]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d94:	430b      	orrs	r3, r1
 8002d96:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d98:	e003      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002dae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002db2:	2300      	movs	r3, #0
 8002db4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002db8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	d053      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002dca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dce:	d035      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002dd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dd4:	d82e      	bhi.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002dd6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002dda:	d031      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002ddc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002de0:	d828      	bhi.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002de6:	d01a      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002de8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dec:	d822      	bhi.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002df2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002df6:	d007      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002df8:	e01c      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dfa:	4b32      	ldr	r3, [pc, #200]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfe:	4a31      	ldr	r2, [pc, #196]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e06:	e01c      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e0c:	3308      	adds	r3, #8
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4618      	mov	r0, r3
 8002e12:	f001 fb83 	bl	800451c <RCCEx_PLL2_Config>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e1c:	e011      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e22:	3328      	adds	r3, #40	@ 0x28
 8002e24:	2100      	movs	r1, #0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 fc2a 	bl	8004680 <RCCEx_PLL3_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e32:	e006      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e3a:	e002      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e3c:	bf00      	nop
 8002e3e:	e000      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10b      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e60:	e003      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002e76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002e80:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002e84:	460b      	mov	r3, r1
 8002e86:	4313      	orrs	r3, r2
 8002e88:	d056      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002e92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e96:	d038      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002e98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e9c:	d831      	bhi.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ea2:	d034      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002ea4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ea8:	d82b      	bhi.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002eaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002eae:	d01d      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002eb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002eb4:	d825      	bhi.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002eba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002ec0:	e01f      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ec2:	bf00      	nop
 8002ec4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec8:	4ba2      	ldr	r3, [pc, #648]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	4aa1      	ldr	r2, [pc, #644]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ed4:	e01c      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eda:	3308      	adds	r3, #8
 8002edc:	2100      	movs	r1, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 fb1c 	bl	800451c <RCCEx_PLL2_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002eea:	e011      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef0:	3328      	adds	r3, #40	@ 0x28
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f001 fbc3 	bl	8004680 <RCCEx_PLL3_Config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f00:	e006      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f08:	e002      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f18:	4b8e      	ldr	r3, [pc, #568]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002f28:	4a8a      	ldr	r2, [pc, #552]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f2e:	e003      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002f44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002f4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002f52:	460b      	mov	r3, r1
 8002f54:	4313      	orrs	r3, r2
 8002f56:	d03a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5e:	2b30      	cmp	r3, #48	@ 0x30
 8002f60:	d01f      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002f62:	2b30      	cmp	r3, #48	@ 0x30
 8002f64:	d819      	bhi.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	d00c      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d815      	bhi.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d019      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002f72:	2b10      	cmp	r3, #16
 8002f74:	d111      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f76:	4b77      	ldr	r3, [pc, #476]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	4a76      	ldr	r2, [pc, #472]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f82:	e011      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f88:	3308      	adds	r3, #8
 8002f8a:	2102      	movs	r1, #2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f001 fac5 	bl	800451c <RCCEx_PLL2_Config>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f98:	e006      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fa0:	e002      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002fa2:	bf00      	nop
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002fb0:	4b68      	ldr	r3, [pc, #416]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fbe:	4a65      	ldr	r2, [pc, #404]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fc4:	e003      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002fda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002fe4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4313      	orrs	r3, r2
 8002fec:	d051      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ff8:	d035      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002ffa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ffe:	d82e      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003000:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003004:	d031      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003006:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800300a:	d828      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800300c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003010:	d01a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003016:	d822      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003020:	d007      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003022:	e01c      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003024:	4b4b      	ldr	r3, [pc, #300]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003028:	4a4a      	ldr	r2, [pc, #296]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800302a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800302e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003030:	e01c      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003036:	3308      	adds	r3, #8
 8003038:	2100      	movs	r1, #0
 800303a:	4618      	mov	r0, r3
 800303c:	f001 fa6e 	bl	800451c <RCCEx_PLL2_Config>
 8003040:	4603      	mov	r3, r0
 8003042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003046:	e011      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304c:	3328      	adds	r3, #40	@ 0x28
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f001 fb15 	bl	8004680 <RCCEx_PLL3_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800305c:	e006      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003064:	e002      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003066:	bf00      	nop
 8003068:	e000      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800306a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800306c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003074:	4b37      	ldr	r3, [pc, #220]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003078:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800307c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003082:	4a34      	ldr	r2, [pc, #208]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003084:	430b      	orrs	r3, r1
 8003086:	6513      	str	r3, [r2, #80]	@ 0x50
 8003088:	e003      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800308e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800309e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80030a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80030ac:	460b      	mov	r3, r1
 80030ae:	4313      	orrs	r3, r2
 80030b0:	d056      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80030b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030bc:	d033      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80030be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030c2:	d82c      	bhi.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030c8:	d02f      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80030ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030ce:	d826      	bhi.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030d4:	d02b      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80030d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030da:	d820      	bhi.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030e0:	d012      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80030e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030e6:	d81a      	bhi.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d022      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030f0:	d115      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f6:	3308      	adds	r3, #8
 80030f8:	2101      	movs	r1, #1
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 fa0e 	bl	800451c <RCCEx_PLL2_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003106:	e015      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310c:	3328      	adds	r3, #40	@ 0x28
 800310e:	2101      	movs	r1, #1
 8003110:	4618      	mov	r0, r3
 8003112:	f001 fab5 	bl	8004680 <RCCEx_PLL3_Config>
 8003116:	4603      	mov	r3, r0
 8003118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800311c:	e00a      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003124:	e006      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003126:	bf00      	nop
 8003128:	e004      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800312a:	bf00      	nop
 800312c:	e002      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800312e:	bf00      	nop
 8003130:	e000      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003134:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10d      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800313c:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800313e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003140:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003148:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800314a:	4a02      	ldr	r2, [pc, #8]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800314c:	430b      	orrs	r3, r1
 800314e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003150:	e006      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003152:	bf00      	nop
 8003154:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003158:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800315c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800316c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003170:	2300      	movs	r3, #0
 8003172:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003176:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800317a:	460b      	mov	r3, r1
 800317c:	4313      	orrs	r3, r2
 800317e:	d055      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003184:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003188:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800318c:	d033      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800318e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003192:	d82c      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003198:	d02f      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800319a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800319e:	d826      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031a4:	d02b      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x672>
 80031a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031aa:	d820      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031b0:	d012      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80031b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031b6:	d81a      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d022      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80031bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031c0:	d115      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c6:	3308      	adds	r3, #8
 80031c8:	2101      	movs	r1, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 f9a6 	bl	800451c <RCCEx_PLL2_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031d6:	e015      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031dc:	3328      	adds	r3, #40	@ 0x28
 80031de:	2101      	movs	r1, #1
 80031e0:	4618      	mov	r0, r3
 80031e2:	f001 fa4d 	bl	8004680 <RCCEx_PLL3_Config>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031ec:	e00a      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031f4:	e006      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031f6:	bf00      	nop
 80031f8:	e004      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031fa:	bf00      	nop
 80031fc:	e002      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031fe:	bf00      	nop
 8003200:	e000      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10b      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800320c:	4ba3      	ldr	r3, [pc, #652]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800320e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003210:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003218:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800321c:	4a9f      	ldr	r2, [pc, #636]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800321e:	430b      	orrs	r3, r1
 8003220:	6593      	str	r3, [r2, #88]	@ 0x58
 8003222:	e003      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003228:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800322c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003234:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003238:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800323c:	2300      	movs	r3, #0
 800323e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003242:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003246:	460b      	mov	r3, r1
 8003248:	4313      	orrs	r3, r2
 800324a:	d037      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800324c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003256:	d00e      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800325c:	d816      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d018      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003262:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003266:	d111      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003268:	4b8c      	ldr	r3, [pc, #560]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	4a8b      	ldr	r2, [pc, #556]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800326e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003274:	e00f      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327a:	3308      	adds	r3, #8
 800327c:	2101      	movs	r1, #1
 800327e:	4618      	mov	r0, r3
 8003280:	f001 f94c 	bl	800451c <RCCEx_PLL2_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800328a:	e004      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003292:	e000      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10a      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800329e:	4b7f      	ldr	r3, [pc, #508]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80032a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ac:	4a7b      	ldr	r2, [pc, #492]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032ae:	430b      	orrs	r3, r1
 80032b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80032b2:	e003      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80032bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80032c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80032d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4313      	orrs	r3, r2
 80032da:	d039      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80032dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d81c      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80032e6:	a201      	add	r2, pc, #4	@ (adr r2, 80032ec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80032e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ec:	08003329 	.word	0x08003329
 80032f0:	080032fd 	.word	0x080032fd
 80032f4:	0800330b 	.word	0x0800330b
 80032f8:	08003329 	.word	0x08003329
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032fc:	4b67      	ldr	r3, [pc, #412]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003300:	4a66      	ldr	r2, [pc, #408]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003308:	e00f      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800330a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330e:	3308      	adds	r3, #8
 8003310:	2102      	movs	r1, #2
 8003312:	4618      	mov	r0, r3
 8003314:	f001 f902 	bl	800451c <RCCEx_PLL2_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800331e:	e004      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003326:	e000      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800332a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10a      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003332:	4b5a      	ldr	r3, [pc, #360]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003336:	f023 0103 	bic.w	r1, r3, #3
 800333a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003340:	4a56      	ldr	r2, [pc, #344]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003342:	430b      	orrs	r3, r1
 8003344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003346:	e003      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800334c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800335c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003360:	2300      	movs	r3, #0
 8003362:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003366:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800336a:	460b      	mov	r3, r1
 800336c:	4313      	orrs	r3, r2
 800336e:	f000 809f 	beq.w	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003372:	4b4b      	ldr	r3, [pc, #300]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a4a      	ldr	r2, [pc, #296]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800337c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800337e:	f7fe f883 	bl	8001488 <HAL_GetTick>
 8003382:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003386:	e00b      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003388:	f7fe f87e 	bl	8001488 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b64      	cmp	r3, #100	@ 0x64
 8003396:	d903      	bls.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800339e:	e005      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033a0:	4b3f      	ldr	r3, [pc, #252]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ed      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80033ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d179      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80033b4:	4b39      	ldr	r3, [pc, #228]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80033b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033c0:	4053      	eors	r3, r2
 80033c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d015      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033ca:	4b34      	ldr	r3, [pc, #208]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d6:	4b31      	ldr	r3, [pc, #196]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033da:	4a30      	ldr	r2, [pc, #192]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033e2:	4b2e      	ldr	r3, [pc, #184]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e6:	4a2d      	ldr	r2, [pc, #180]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80033ee:	4a2b      	ldr	r2, [pc, #172]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003402:	d118      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe f840 	bl	8001488 <HAL_GetTick>
 8003408:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800340c:	e00d      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe f83b 	bl	8001488 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003418:	1ad2      	subs	r2, r2, r3
 800341a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800341e:	429a      	cmp	r2, r3
 8003420:	d903      	bls.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003428:	e005      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800342a:	4b1c      	ldr	r3, [pc, #112]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0eb      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800343a:	2b00      	cmp	r3, #0
 800343c:	d129      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003442:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800344a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800344e:	d10e      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003450:	4b12      	ldr	r3, [pc, #72]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003460:	091a      	lsrs	r2, r3, #4
 8003462:	4b10      	ldr	r3, [pc, #64]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003464:	4013      	ands	r3, r2
 8003466:	4a0d      	ldr	r2, [pc, #52]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003468:	430b      	orrs	r3, r1
 800346a:	6113      	str	r3, [r2, #16]
 800346c:	e005      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800346e:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	4a0a      	ldr	r2, [pc, #40]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003474:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003478:	6113      	str	r3, [r2, #16]
 800347a:	4b08      	ldr	r3, [pc, #32]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800347c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800347e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003482:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348a:	4a04      	ldr	r2, [pc, #16]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800348c:	430b      	orrs	r3, r1
 800348e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003490:	e00e      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003496:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800349a:	e009      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800349c:	58024400 	.word	0x58024400
 80034a0:	58024800 	.word	0x58024800
 80034a4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80034b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b8:	f002 0301 	and.w	r3, r2, #1
 80034bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034c0:	2300      	movs	r3, #0
 80034c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f000 8089 	beq.w	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80034d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034d8:	2b28      	cmp	r3, #40	@ 0x28
 80034da:	d86b      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80034dc:	a201      	add	r2, pc, #4	@ (adr r2, 80034e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e2:	bf00      	nop
 80034e4:	080035bd 	.word	0x080035bd
 80034e8:	080035b5 	.word	0x080035b5
 80034ec:	080035b5 	.word	0x080035b5
 80034f0:	080035b5 	.word	0x080035b5
 80034f4:	080035b5 	.word	0x080035b5
 80034f8:	080035b5 	.word	0x080035b5
 80034fc:	080035b5 	.word	0x080035b5
 8003500:	080035b5 	.word	0x080035b5
 8003504:	08003589 	.word	0x08003589
 8003508:	080035b5 	.word	0x080035b5
 800350c:	080035b5 	.word	0x080035b5
 8003510:	080035b5 	.word	0x080035b5
 8003514:	080035b5 	.word	0x080035b5
 8003518:	080035b5 	.word	0x080035b5
 800351c:	080035b5 	.word	0x080035b5
 8003520:	080035b5 	.word	0x080035b5
 8003524:	0800359f 	.word	0x0800359f
 8003528:	080035b5 	.word	0x080035b5
 800352c:	080035b5 	.word	0x080035b5
 8003530:	080035b5 	.word	0x080035b5
 8003534:	080035b5 	.word	0x080035b5
 8003538:	080035b5 	.word	0x080035b5
 800353c:	080035b5 	.word	0x080035b5
 8003540:	080035b5 	.word	0x080035b5
 8003544:	080035bd 	.word	0x080035bd
 8003548:	080035b5 	.word	0x080035b5
 800354c:	080035b5 	.word	0x080035b5
 8003550:	080035b5 	.word	0x080035b5
 8003554:	080035b5 	.word	0x080035b5
 8003558:	080035b5 	.word	0x080035b5
 800355c:	080035b5 	.word	0x080035b5
 8003560:	080035b5 	.word	0x080035b5
 8003564:	080035bd 	.word	0x080035bd
 8003568:	080035b5 	.word	0x080035b5
 800356c:	080035b5 	.word	0x080035b5
 8003570:	080035b5 	.word	0x080035b5
 8003574:	080035b5 	.word	0x080035b5
 8003578:	080035b5 	.word	0x080035b5
 800357c:	080035b5 	.word	0x080035b5
 8003580:	080035b5 	.word	0x080035b5
 8003584:	080035bd 	.word	0x080035bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358c:	3308      	adds	r3, #8
 800358e:	2101      	movs	r1, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f000 ffc3 	bl	800451c <RCCEx_PLL2_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800359c:	e00f      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a2:	3328      	adds	r3, #40	@ 0x28
 80035a4:	2101      	movs	r1, #1
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 f86a 	bl	8004680 <RCCEx_PLL3_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80035b2:	e004      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035ba:	e000      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80035bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80035c6:	4bbf      	ldr	r3, [pc, #764]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035d4:	4abb      	ldr	r2, [pc, #748]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035d6:	430b      	orrs	r3, r1
 80035d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80035da:	e003      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f002 0302 	and.w	r3, r2, #2
 80035f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80035fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80035fe:	460b      	mov	r3, r1
 8003600:	4313      	orrs	r3, r2
 8003602:	d041      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003608:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800360a:	2b05      	cmp	r3, #5
 800360c:	d824      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800360e:	a201      	add	r2, pc, #4	@ (adr r2, 8003614 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003614:	08003661 	.word	0x08003661
 8003618:	0800362d 	.word	0x0800362d
 800361c:	08003643 	.word	0x08003643
 8003620:	08003661 	.word	0x08003661
 8003624:	08003661 	.word	0x08003661
 8003628:	08003661 	.word	0x08003661
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800362c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003630:	3308      	adds	r3, #8
 8003632:	2101      	movs	r1, #1
 8003634:	4618      	mov	r0, r3
 8003636:	f000 ff71 	bl	800451c <RCCEx_PLL2_Config>
 800363a:	4603      	mov	r3, r0
 800363c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003640:	e00f      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003646:	3328      	adds	r3, #40	@ 0x28
 8003648:	2101      	movs	r1, #1
 800364a:	4618      	mov	r0, r3
 800364c:	f001 f818 	bl	8004680 <RCCEx_PLL3_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003656:	e004      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800365e:	e000      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800366a:	4b96      	ldr	r3, [pc, #600]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800366c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366e:	f023 0107 	bic.w	r1, r3, #7
 8003672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003676:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003678:	4a92      	ldr	r2, [pc, #584]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800367a:	430b      	orrs	r3, r1
 800367c:	6553      	str	r3, [r2, #84]	@ 0x54
 800367e:	e003      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003684:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	f002 0304 	and.w	r3, r2, #4
 8003694:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800369e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4313      	orrs	r3, r2
 80036a6:	d044      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80036a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036b0:	2b05      	cmp	r3, #5
 80036b2:	d825      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80036b4:	a201      	add	r2, pc, #4	@ (adr r2, 80036bc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	08003709 	.word	0x08003709
 80036c0:	080036d5 	.word	0x080036d5
 80036c4:	080036eb 	.word	0x080036eb
 80036c8:	08003709 	.word	0x08003709
 80036cc:	08003709 	.word	0x08003709
 80036d0:	08003709 	.word	0x08003709
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d8:	3308      	adds	r3, #8
 80036da:	2101      	movs	r1, #1
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 ff1d 	bl	800451c <RCCEx_PLL2_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036e8:	e00f      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ee:	3328      	adds	r3, #40	@ 0x28
 80036f0:	2101      	movs	r1, #1
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 ffc4 	bl	8004680 <RCCEx_PLL3_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036fe:	e004      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003706:	e000      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10b      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003712:	4b6c      	ldr	r3, [pc, #432]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003716:	f023 0107 	bic.w	r1, r3, #7
 800371a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003722:	4a68      	ldr	r2, [pc, #416]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003724:	430b      	orrs	r3, r1
 8003726:	6593      	str	r3, [r2, #88]	@ 0x58
 8003728:	e003      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	f002 0320 	and.w	r3, r2, #32
 800373e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003742:	2300      	movs	r3, #0
 8003744:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800374c:	460b      	mov	r3, r1
 800374e:	4313      	orrs	r3, r2
 8003750:	d055      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800375e:	d033      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003760:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003764:	d82c      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376a:	d02f      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800376c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003770:	d826      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003772:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003776:	d02b      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003778:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800377c:	d820      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800377e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003782:	d012      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003788:	d81a      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d022      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800378e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003792:	d115      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003798:	3308      	adds	r3, #8
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f000 febd 	bl	800451c <RCCEx_PLL2_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037a8:	e015      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ae:	3328      	adds	r3, #40	@ 0x28
 80037b0:	2102      	movs	r1, #2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 ff64 	bl	8004680 <RCCEx_PLL3_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037be:	e00a      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037c6:	e006      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037c8:	bf00      	nop
 80037ca:	e004      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037cc:	bf00      	nop
 80037ce:	e002      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037d0:	bf00      	nop
 80037d2:	e000      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10b      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037de:	4b39      	ldr	r3, [pc, #228]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80037e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ee:	4a35      	ldr	r2, [pc, #212]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80037f4:	e003      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800380a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800380e:	2300      	movs	r3, #0
 8003810:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003814:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003818:	460b      	mov	r3, r1
 800381a:	4313      	orrs	r3, r2
 800381c:	d058      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003822:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003826:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800382a:	d033      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800382c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003830:	d82c      	bhi.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003836:	d02f      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383c:	d826      	bhi.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800383e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003842:	d02b      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003844:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003848:	d820      	bhi.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800384a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800384e:	d012      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003854:	d81a      	bhi.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d022      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800385a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800385e:	d115      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003864:	3308      	adds	r3, #8
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fe57 	bl	800451c <RCCEx_PLL2_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003874:	e015      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387a:	3328      	adds	r3, #40	@ 0x28
 800387c:	2102      	movs	r1, #2
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fefe 	bl	8004680 <RCCEx_PLL3_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800388a:	e00a      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003892:	e006      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003894:	bf00      	nop
 8003896:	e004      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003898:	bf00      	nop
 800389a:	e002      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800389c:	bf00      	nop
 800389e:	e000      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80038a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10e      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038aa:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038ba:	4a02      	ldr	r2, [pc, #8]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038bc:	430b      	orrs	r3, r1
 80038be:	6593      	str	r3, [r2, #88]	@ 0x58
 80038c0:	e006      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80038c2:	bf00      	nop
 80038c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80038d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80038dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038e0:	2300      	movs	r3, #0
 80038e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80038e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80038ea:	460b      	mov	r3, r1
 80038ec:	4313      	orrs	r3, r2
 80038ee:	d055      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038f8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80038fc:	d033      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80038fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003902:	d82c      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003904:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003908:	d02f      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800390a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800390e:	d826      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003910:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003914:	d02b      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003916:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800391a:	d820      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800391c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003920:	d012      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003922:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003926:	d81a      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d022      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800392c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003930:	d115      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003936:	3308      	adds	r3, #8
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fdee 	bl	800451c <RCCEx_PLL2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003946:	e015      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394c:	3328      	adds	r3, #40	@ 0x28
 800394e:	2102      	movs	r1, #2
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fe95 	bl	8004680 <RCCEx_PLL3_Config>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800395c:	e00a      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003966:	bf00      	nop
 8003968:	e004      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800396a:	bf00      	nop
 800396c:	e002      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10b      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800397c:	4ba1      	ldr	r3, [pc, #644]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003980:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003988:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800398c:	4a9d      	ldr	r2, [pc, #628]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800398e:	430b      	orrs	r3, r1
 8003990:	6593      	str	r3, [r2, #88]	@ 0x58
 8003992:	e003      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003998:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f002 0308 	and.w	r3, r2, #8
 80039a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039ac:	2300      	movs	r3, #0
 80039ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80039b6:	460b      	mov	r3, r1
 80039b8:	4313      	orrs	r3, r2
 80039ba:	d01e      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ce:	3328      	adds	r3, #40	@ 0x28
 80039d0:	2102      	movs	r1, #2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fe54 	bl	8004680 <RCCEx_PLL3_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80039e4:	4b87      	ldr	r3, [pc, #540]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039f4:	4a83      	ldr	r2, [pc, #524]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039f6:	430b      	orrs	r3, r1
 80039f8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	f002 0310 	and.w	r3, r2, #16
 8003a06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a10:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003a14:	460b      	mov	r3, r1
 8003a16:	4313      	orrs	r3, r2
 8003a18:	d01e      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a26:	d10c      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2c:	3328      	adds	r3, #40	@ 0x28
 8003a2e:	2102      	movs	r1, #2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fe25 	bl	8004680 <RCCEx_PLL3_Config>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a42:	4b70      	ldr	r3, [pc, #448]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a52:	4a6c      	ldr	r2, [pc, #432]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a60:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003a64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a6e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003a72:	460b      	mov	r3, r1
 8003a74:	4313      	orrs	r3, r2
 8003a76:	d03e      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a84:	d022      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003a86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a8a:	d81b      	bhi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a94:	d00b      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003a96:	e015      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fd3b 	bl	800451c <RCCEx_PLL2_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003aac:	e00f      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab2:	3328      	adds	r3, #40	@ 0x28
 8003ab4:	2102      	movs	r1, #2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fde2 	bl	8004680 <RCCEx_PLL3_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ac2:	e004      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aca:	e000      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10b      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ada:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ae6:	4a47      	ldr	r2, [pc, #284]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aec:	e003      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003b02:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b04:	2300      	movs	r3, #0
 8003b06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b08:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	d03b      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b1e:	d01f      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003b20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b24:	d818      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003b26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b2a:	d003      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003b2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b30:	d007      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003b32:	e011      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b34:	4b33      	ldr	r3, [pc, #204]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	4a32      	ldr	r2, [pc, #200]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b40:	e00f      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b46:	3328      	adds	r3, #40	@ 0x28
 8003b48:	2101      	movs	r1, #1
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fd98 	bl	8004680 <RCCEx_PLL3_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b56:	e004      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10b      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b6a:	4b26      	ldr	r3, [pc, #152]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7a:	4a22      	ldr	r2, [pc, #136]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b80:	e003      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003b96:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b98:	2300      	movs	r3, #0
 8003b9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b9c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	d034      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb4:	d007      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003bb6:	e011      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb8:	4b12      	ldr	r3, [pc, #72]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	4a11      	ldr	r2, [pc, #68]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003bc4:	e00e      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bca:	3308      	adds	r3, #8
 8003bcc:	2102      	movs	r1, #2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fca4 	bl	800451c <RCCEx_PLL2_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003bda:	e003      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10d      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003bec:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bfa:	4a02      	ldr	r2, [pc, #8]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c00:	e006      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003c02:	bf00      	nop
 8003c04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c1e:	2300      	movs	r3, #0
 8003c20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c22:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003c26:	460b      	mov	r3, r1
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	d00c      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c30:	3328      	adds	r3, #40	@ 0x28
 8003c32:	2102      	movs	r1, #2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fd23 	bl	8004680 <RCCEx_PLL3_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003c52:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c54:	2300      	movs	r3, #0
 8003c56:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c58:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	d038      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c6e:	d018      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003c70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c74:	d811      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003c76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c7a:	d014      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003c7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c80:	d80b      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d011      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c8a:	d106      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c8c:	4bc3      	ldr	r3, [pc, #780]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c90:	4ac2      	ldr	r2, [pc, #776]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003c98:	e008      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ca0:	e004      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003ca2:	bf00      	nop
 8003ca4:	e002      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003ca6:	bf00      	nop
 8003ca8:	e000      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cb4:	4bb9      	ldr	r3, [pc, #740]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cc4:	4ab5      	ldr	r2, [pc, #724]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cca:	e003      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003ce0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ce6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003cea:	460b      	mov	r3, r1
 8003cec:	4313      	orrs	r3, r2
 8003cee:	d009      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cf0:	4baa      	ldr	r3, [pc, #680]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cfe:	4aa7      	ldr	r2, [pc, #668]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003d10:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d12:	2300      	movs	r3, #0
 8003d14:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003d20:	4b9e      	ldr	r3, [pc, #632]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003d30:	4a9a      	ldr	r2, [pc, #616]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d32:	430b      	orrs	r3, r1
 8003d34:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003d42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d44:	2300      	movs	r3, #0
 8003d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d48:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	d009      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d52:	4b92      	ldr	r3, [pc, #584]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d56:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d60:	4a8e      	ldr	r2, [pc, #568]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d62:	430b      	orrs	r3, r1
 8003d64:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003d72:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d74:	2300      	movs	r3, #0
 8003d76:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d78:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	d00e      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d82:	4b86      	ldr	r3, [pc, #536]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	4a85      	ldr	r2, [pc, #532]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d8c:	6113      	str	r3, [r2, #16]
 8003d8e:	4b83      	ldr	r3, [pc, #524]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d90:	6919      	ldr	r1, [r3, #16]
 8003d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003d9a:	4a80      	ldr	r2, [pc, #512]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003dac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dae:	2300      	movs	r3, #0
 8003db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003db2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003db6:	460b      	mov	r3, r1
 8003db8:	4313      	orrs	r3, r2
 8003dba:	d009      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003dbc:	4b77      	ldr	r3, [pc, #476]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	4a74      	ldr	r2, [pc, #464]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003ddc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dde:	2300      	movs	r3, #0
 8003de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003de2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003de6:	460b      	mov	r3, r1
 8003de8:	4313      	orrs	r3, r2
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dec:	4b6b      	ldr	r3, [pc, #428]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dfc:	4a67      	ldr	r2, [pc, #412]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e14:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	d011      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e22:	3308      	adds	r3, #8
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fb78 	bl	800451c <RCCEx_PLL2_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	6239      	str	r1, [r7, #32]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e54:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	d011      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e62:	3308      	adds	r3, #8
 8003e64:	2101      	movs	r1, #1
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fb58 	bl	800451c <RCCEx_PLL2_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	61b9      	str	r1, [r7, #24]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	d011      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fb38 	bl	800451c <RCCEx_PLL2_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	2100      	movs	r1, #0
 8003ecc:	6139      	str	r1, [r7, #16]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4313      	orrs	r3, r2
 8003edc:	d011      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee2:	3328      	adds	r3, #40	@ 0x28
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fbca 	bl	8004680 <RCCEx_PLL3_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003efe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	d011      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f22:	3328      	adds	r3, #40	@ 0x28
 8003f24:	2101      	movs	r1, #1
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fbaa 	bl	8004680 <RCCEx_PLL3_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	6039      	str	r1, [r7, #0]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	607b      	str	r3, [r7, #4]
 8003f54:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	d011      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f62:	3328      	adds	r3, #40	@ 0x28
 8003f64:	2102      	movs	r1, #2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fb8a 	bl	8004680 <RCCEx_PLL3_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003f82:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e000      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003f96:	46bd      	mov	sp, r7
 8003f98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9c:	58024400 	.word	0x58024400

08003fa0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003fa4:	f7fe fd96 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b06      	ldr	r3, [pc, #24]	@ (8003fc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	091b      	lsrs	r3, r3, #4
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	4904      	ldr	r1, [pc, #16]	@ (8003fc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	58024400 	.word	0x58024400
 8003fc8:	08006238 	.word	0x08006238

08003fcc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b089      	sub	sp, #36	@ 0x24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fd4:	4ba1      	ldr	r3, [pc, #644]	@ (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003fde:	4b9f      	ldr	r3, [pc, #636]	@ (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe2:	0b1b      	lsrs	r3, r3, #12
 8003fe4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fe8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003fea:	4b9c      	ldr	r3, [pc, #624]	@ (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fee:	091b      	lsrs	r3, r3, #4
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003ff6:	4b99      	ldr	r3, [pc, #612]	@ (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffa:	08db      	lsrs	r3, r3, #3
 8003ffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8111 	beq.w	800423c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2b02      	cmp	r3, #2
 800401e:	f000 8083 	beq.w	8004128 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b02      	cmp	r3, #2
 8004026:	f200 80a1 	bhi.w	800416c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d056      	beq.n	80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004036:	e099      	b.n	800416c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004038:	4b88      	ldr	r3, [pc, #544]	@ (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d02d      	beq.n	80040a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004044:	4b85      	ldr	r3, [pc, #532]	@ (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	08db      	lsrs	r3, r3, #3
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	4a84      	ldr	r2, [pc, #528]	@ (8004260 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
 8004054:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800406e:	4b7b      	ldr	r3, [pc, #492]	@ (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004082:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800409e:	e087      	b.n	80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004268 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80040ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b2:	4b6a      	ldr	r3, [pc, #424]	@ (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040e2:	e065      	b.n	80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800426c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f6:	4b59      	ldr	r3, [pc, #356]	@ (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004106:	ed97 6a03 	vldr	s12, [r7, #12]
 800410a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800410e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800411a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004126:	e043      	b.n	80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004132:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800413a:	4b48      	ldr	r3, [pc, #288]	@ (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800413c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800414a:	ed97 6a03 	vldr	s12, [r7, #12]
 800414e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800415a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800415e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800416a:	e021      	b.n	80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004176:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800426c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800417a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800417e:	4b37      	ldr	r3, [pc, #220]	@ (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800418e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004192:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800419a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800419e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80041b0:	4b2a      	ldr	r3, [pc, #168]	@ (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b4:	0a5b      	lsrs	r3, r3, #9
 80041b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80041ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041d6:	ee17 2a90 	vmov	r2, s15
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80041de:	4b1f      	ldr	r3, [pc, #124]	@ (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041e8:	ee07 3a90 	vmov	s15, r3
 80041ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80041fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004204:	ee17 2a90 	vmov	r2, s15
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800420c:	4b13      	ldr	r3, [pc, #76]	@ (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800420e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004210:	0e1b      	lsrs	r3, r3, #24
 8004212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004222:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004226:	edd7 6a07 	vldr	s13, [r7, #28]
 800422a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800422e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004232:	ee17 2a90 	vmov	r2, s15
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800423a:	e008      	b.n	800424e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
}
 800424e:	bf00      	nop
 8004250:	3724      	adds	r7, #36	@ 0x24
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	58024400 	.word	0x58024400
 8004260:	03d09000 	.word	0x03d09000
 8004264:	46000000 	.word	0x46000000
 8004268:	4c742400 	.word	0x4c742400
 800426c:	4a742400 	.word	0x4a742400
 8004270:	4bbebc20 	.word	0x4bbebc20

08004274 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	@ 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800427c:	4ba1      	ldr	r3, [pc, #644]	@ (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800427e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004286:	4b9f      	ldr	r3, [pc, #636]	@ (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428a:	0d1b      	lsrs	r3, r3, #20
 800428c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004290:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004292:	4b9c      	ldr	r3, [pc, #624]	@ (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004296:	0a1b      	lsrs	r3, r3, #8
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800429e:	4b99      	ldr	r3, [pc, #612]	@ (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a2:	08db      	lsrs	r3, r3, #3
 80042a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	fb02 f303 	mul.w	r3, r2, r3
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8111 	beq.w	80044e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	f000 8083 	beq.w	80043d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	f200 80a1 	bhi.w	8004414 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d056      	beq.n	800438c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80042de:	e099      	b.n	8004414 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042e0:	4b88      	ldr	r3, [pc, #544]	@ (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d02d      	beq.n	8004348 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042ec:	4b85      	ldr	r3, [pc, #532]	@ (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	08db      	lsrs	r3, r3, #3
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	4a84      	ldr	r2, [pc, #528]	@ (8004508 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
 80042fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	ee07 3a90 	vmov	s15, r3
 8004304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004316:	4b7b      	ldr	r3, [pc, #492]	@ (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004326:	ed97 6a03 	vldr	s12, [r7, #12]
 800432a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800450c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800432e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004336:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800433a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800433e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004342:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004346:	e087      	b.n	8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004510 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435a:	4b6a      	ldr	r3, [pc, #424]	@ (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436a:	ed97 6a03 	vldr	s12, [r7, #12]
 800436e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800450c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800437e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800438a:	e065      	b.n	8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004396:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004514 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800439a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800439e:	4b59      	ldr	r3, [pc, #356]	@ (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80043b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800450c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043ce:	e043      	b.n	8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80043de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e2:	4b48      	ldr	r3, [pc, #288]	@ (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800450c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004412:	e021      	b.n	8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004514 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004426:	4b37      	ldr	r3, [pc, #220]	@ (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004436:	ed97 6a03 	vldr	s12, [r7, #12]
 800443a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800450c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800443e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800444a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800444e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004456:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004458:	4b2a      	ldr	r3, [pc, #168]	@ (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800445a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445c:	0a5b      	lsrs	r3, r3, #9
 800445e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800446e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004472:	edd7 6a07 	vldr	s13, [r7, #28]
 8004476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800447a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800447e:	ee17 2a90 	vmov	r2, s15
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004486:	4b1f      	ldr	r3, [pc, #124]	@ (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	0c1b      	lsrs	r3, r3, #16
 800448c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004490:	ee07 3a90 	vmov	s15, r3
 8004494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004498:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800449c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80044a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ac:	ee17 2a90 	vmov	r2, s15
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80044b4:	4b13      	ldr	r3, [pc, #76]	@ (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	0e1b      	lsrs	r3, r3, #24
 80044ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80044d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044da:	ee17 2a90 	vmov	r2, s15
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80044e2:	e008      	b.n	80044f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	609a      	str	r2, [r3, #8]
}
 80044f6:	bf00      	nop
 80044f8:	3724      	adds	r7, #36	@ 0x24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	58024400 	.word	0x58024400
 8004508:	03d09000 	.word	0x03d09000
 800450c:	46000000 	.word	0x46000000
 8004510:	4c742400 	.word	0x4c742400
 8004514:	4a742400 	.word	0x4a742400
 8004518:	4bbebc20 	.word	0x4bbebc20

0800451c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800452a:	4b53      	ldr	r3, [pc, #332]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 800452c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b03      	cmp	r3, #3
 8004534:	d101      	bne.n	800453a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e099      	b.n	800466e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800453a:	4b4f      	ldr	r3, [pc, #316]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a4e      	ldr	r2, [pc, #312]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004540:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004546:	f7fc ff9f 	bl	8001488 <HAL_GetTick>
 800454a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800454c:	e008      	b.n	8004560 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800454e:	f7fc ff9b 	bl	8001488 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e086      	b.n	800466e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004560:	4b45      	ldr	r3, [pc, #276]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f0      	bne.n	800454e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800456c:	4b42      	ldr	r3, [pc, #264]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 800456e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004570:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	031b      	lsls	r3, r3, #12
 800457a:	493f      	ldr	r1, [pc, #252]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 800457c:	4313      	orrs	r3, r2
 800457e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	3b01      	subs	r3, #1
 8004586:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	3b01      	subs	r3, #1
 8004590:	025b      	lsls	r3, r3, #9
 8004592:	b29b      	uxth	r3, r3
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	3b01      	subs	r3, #1
 800459c:	041b      	lsls	r3, r3, #16
 800459e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	061b      	lsls	r3, r3, #24
 80045ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80045b0:	4931      	ldr	r1, [pc, #196]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045b6:	4b30      	ldr	r3, [pc, #192]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	492d      	ldr	r1, [pc, #180]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	f023 0220 	bic.w	r2, r3, #32
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	4928      	ldr	r1, [pc, #160]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80045da:	4b27      	ldr	r3, [pc, #156]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	4a26      	ldr	r2, [pc, #152]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045e0:	f023 0310 	bic.w	r3, r3, #16
 80045e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045e6:	4b24      	ldr	r3, [pc, #144]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045ea:	4b24      	ldr	r3, [pc, #144]	@ (800467c <RCCEx_PLL2_Config+0x160>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	69d2      	ldr	r2, [r2, #28]
 80045f2:	00d2      	lsls	r2, r2, #3
 80045f4:	4920      	ldr	r1, [pc, #128]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80045fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004600:	f043 0310 	orr.w	r3, r3, #16
 8004604:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800460c:	4b1a      	ldr	r3, [pc, #104]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 800460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004610:	4a19      	ldr	r2, [pc, #100]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004612:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004616:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004618:	e00f      	b.n	800463a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d106      	bne.n	800462e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004620:	4b15      	ldr	r3, [pc, #84]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	4a14      	ldr	r2, [pc, #80]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800462a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800462c:	e005      	b.n	800463a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800462e:	4b12      	ldr	r3, [pc, #72]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004632:	4a11      	ldr	r2, [pc, #68]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004634:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004638:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800463a:	4b0f      	ldr	r3, [pc, #60]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a0e      	ldr	r2, [pc, #56]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004640:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004646:	f7fc ff1f 	bl	8001488 <HAL_GetTick>
 800464a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800464c:	e008      	b.n	8004660 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800464e:	f7fc ff1b 	bl	8001488 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e006      	b.n	800466e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004660:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800466c:	7bfb      	ldrb	r3, [r7, #15]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	58024400 	.word	0x58024400
 800467c:	ffff0007 	.word	0xffff0007

08004680 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800468e:	4b53      	ldr	r3, [pc, #332]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b03      	cmp	r3, #3
 8004698:	d101      	bne.n	800469e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e099      	b.n	80047d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800469e:	4b4f      	ldr	r3, [pc, #316]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a4e      	ldr	r2, [pc, #312]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 80046a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046aa:	f7fc feed 	bl	8001488 <HAL_GetTick>
 80046ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046b2:	f7fc fee9 	bl	8001488 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e086      	b.n	80047d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046c4:	4b45      	ldr	r3, [pc, #276]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f0      	bne.n	80046b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80046d0:	4b42      	ldr	r3, [pc, #264]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 80046d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	051b      	lsls	r3, r3, #20
 80046de:	493f      	ldr	r1, [pc, #252]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	025b      	lsls	r3, r3, #9
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	3b01      	subs	r3, #1
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	3b01      	subs	r3, #1
 800470e:	061b      	lsls	r3, r3, #24
 8004710:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004714:	4931      	ldr	r1, [pc, #196]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800471a:	4b30      	ldr	r3, [pc, #192]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 800471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	492d      	ldr	r1, [pc, #180]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004728:	4313      	orrs	r3, r2
 800472a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800472c:	4b2b      	ldr	r3, [pc, #172]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 800472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004730:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	4928      	ldr	r1, [pc, #160]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800473e:	4b27      	ldr	r3, [pc, #156]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004742:	4a26      	ldr	r2, [pc, #152]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004748:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800474a:	4b24      	ldr	r3, [pc, #144]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 800474c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800474e:	4b24      	ldr	r3, [pc, #144]	@ (80047e0 <RCCEx_PLL3_Config+0x160>)
 8004750:	4013      	ands	r3, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	69d2      	ldr	r2, [r2, #28]
 8004756:	00d2      	lsls	r2, r2, #3
 8004758:	4920      	ldr	r1, [pc, #128]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800475e:	4b1f      	ldr	r3, [pc, #124]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004762:	4a1e      	ldr	r2, [pc, #120]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004768:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d106      	bne.n	800477e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004770:	4b1a      	ldr	r3, [pc, #104]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004774:	4a19      	ldr	r2, [pc, #100]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004776:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800477a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800477c:	e00f      	b.n	800479e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d106      	bne.n	8004792 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004784:	4b15      	ldr	r3, [pc, #84]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	4a14      	ldr	r2, [pc, #80]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 800478a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800478e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004790:	e005      	b.n	800479e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004792:	4b12      	ldr	r3, [pc, #72]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	4a11      	ldr	r2, [pc, #68]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004798:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800479c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800479e:	4b0f      	ldr	r3, [pc, #60]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a0e      	ldr	r2, [pc, #56]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 80047a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047aa:	f7fc fe6d 	bl	8001488 <HAL_GetTick>
 80047ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047b0:	e008      	b.n	80047c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047b2:	f7fc fe69 	bl	8001488 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e006      	b.n	80047d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047c4:	4b05      	ldr	r3, [pc, #20]	@ (80047dc <RCCEx_PLL3_Config+0x15c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	58024400 	.word	0x58024400
 80047e0:	ffff0007 	.word	0xffff0007

080047e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e10f      	b.n	8004a16 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a87      	ldr	r2, [pc, #540]	@ (8004a20 <HAL_SPI_Init+0x23c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00f      	beq.n	8004826 <HAL_SPI_Init+0x42>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a86      	ldr	r2, [pc, #536]	@ (8004a24 <HAL_SPI_Init+0x240>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00a      	beq.n	8004826 <HAL_SPI_Init+0x42>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a84      	ldr	r2, [pc, #528]	@ (8004a28 <HAL_SPI_Init+0x244>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d005      	beq.n	8004826 <HAL_SPI_Init+0x42>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	2b0f      	cmp	r3, #15
 8004820:	d901      	bls.n	8004826 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e0f7      	b.n	8004a16 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fbbc 	bl	8004fa4 <SPI_GetPacketSize>
 800482c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a7b      	ldr	r2, [pc, #492]	@ (8004a20 <HAL_SPI_Init+0x23c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00c      	beq.n	8004852 <HAL_SPI_Init+0x6e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a79      	ldr	r2, [pc, #484]	@ (8004a24 <HAL_SPI_Init+0x240>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d007      	beq.n	8004852 <HAL_SPI_Init+0x6e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a78      	ldr	r2, [pc, #480]	@ (8004a28 <HAL_SPI_Init+0x244>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d002      	beq.n	8004852 <HAL_SPI_Init+0x6e>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b08      	cmp	r3, #8
 8004850:	d811      	bhi.n	8004876 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004856:	4a72      	ldr	r2, [pc, #456]	@ (8004a20 <HAL_SPI_Init+0x23c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d009      	beq.n	8004870 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a70      	ldr	r2, [pc, #448]	@ (8004a24 <HAL_SPI_Init+0x240>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_SPI_Init+0x8c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a6f      	ldr	r2, [pc, #444]	@ (8004a28 <HAL_SPI_Init+0x244>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d104      	bne.n	800487a <HAL_SPI_Init+0x96>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b10      	cmp	r3, #16
 8004874:	d901      	bls.n	800487a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e0cd      	b.n	8004a16 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fc fb18 	bl	8000ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80048b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048c0:	d119      	bne.n	80048f6 <HAL_SPI_Init+0x112>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048ca:	d103      	bne.n	80048d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10c      	bne.n	80048f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80048e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048e4:	d107      	bne.n	80048f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00f      	beq.n	8004922 <HAL_SPI_Init+0x13e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b06      	cmp	r3, #6
 8004908:	d90b      	bls.n	8004922 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e007      	b.n	8004932 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004930:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69da      	ldr	r2, [r3, #28]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493a:	431a      	orrs	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004944:	ea42 0103 	orr.w	r1, r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004992:	ea42 0103 	orr.w	r1, r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d113      	bne.n	80049d2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0201 	bic.w	r2, r2, #1
 80049e0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	40013000 	.word	0x40013000
 8004a24:	40003800 	.word	0x40003800
 8004a28:	40003c00 	.word	0x40003c00

08004a2c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3320      	adds	r3, #32
 8004a42:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a44:	f7fc fd20 	bl	8001488 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d001      	beq.n	8004a5a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
 8004a58:	e1d1      	b.n	8004dfe <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_SPI_Transmit+0x3a>
 8004a60:	88fb      	ldrh	r3, [r7, #6]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e1c9      	b.n	8004dfe <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_SPI_Transmit+0x4c>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e1c2      	b.n	8004dfe <HAL_SPI_Transmit+0x3d2>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2203      	movs	r2, #3
 8004a84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	88fa      	ldrh	r2, [r7, #6]
 8004a9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	88fa      	ldrh	r2, [r7, #6]
 8004aa2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004ad0:	d108      	bne.n	8004ae4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e009      	b.n	8004af8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004af6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	4b96      	ldr	r3, [pc, #600]	@ (8004d58 <HAL_SPI_Transmit+0x32c>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	88f9      	ldrh	r1, [r7, #6]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b24:	d107      	bne.n	8004b36 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2b0f      	cmp	r3, #15
 8004b3c:	d947      	bls.n	8004bce <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004b3e:	e03f      	b.n	8004bc0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d114      	bne.n	8004b78 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5e:	1d1a      	adds	r2, r3, #4
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004b76:	e023      	b.n	8004bc0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b78:	f7fc fc86 	bl	8001488 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d803      	bhi.n	8004b90 <HAL_SPI_Transmit+0x164>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	d102      	bne.n	8004b96 <HAL_SPI_Transmit+0x16a>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d114      	bne.n	8004bc0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f936 	bl	8004e08 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ba2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e11e      	b.n	8004dfe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1b9      	bne.n	8004b40 <HAL_SPI_Transmit+0x114>
 8004bcc:	e0f1      	b.n	8004db2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	2b07      	cmp	r3, #7
 8004bd4:	f240 80e6 	bls.w	8004da4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004bd8:	e05d      	b.n	8004c96 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d132      	bne.n	8004c4e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d918      	bls.n	8004c26 <HAL_SPI_Transmit+0x1fa>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d014      	beq.n	8004c26 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0c:	1d1a      	adds	r2, r3, #4
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b02      	subs	r3, #2
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004c24:	e037      	b.n	8004c96 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2a:	881a      	ldrh	r2, [r3, #0]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c34:	1c9a      	adds	r2, r3, #2
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004c4c:	e023      	b.n	8004c96 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c4e:	f7fc fc1b 	bl	8001488 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d803      	bhi.n	8004c66 <HAL_SPI_Transmit+0x23a>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d102      	bne.n	8004c6c <HAL_SPI_Transmit+0x240>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d114      	bne.n	8004c96 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f8cb 	bl	8004e08 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e0b3      	b.n	8004dfe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d19b      	bne.n	8004bda <HAL_SPI_Transmit+0x1ae>
 8004ca2:	e086      	b.n	8004db2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d154      	bne.n	8004d5c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d918      	bls.n	8004cf0 <HAL_SPI_Transmit+0x2c4>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc2:	2b40      	cmp	r3, #64	@ 0x40
 8004cc4:	d914      	bls.n	8004cf0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd6:	1d1a      	adds	r2, r3, #4
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b04      	subs	r3, #4
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004cee:	e059      	b.n	8004da4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d917      	bls.n	8004d2c <HAL_SPI_Transmit+0x300>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d013      	beq.n	8004d2c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d08:	881a      	ldrh	r2, [r3, #0]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d12:	1c9a      	adds	r2, r3, #2
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b02      	subs	r3, #2
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004d2a:	e03b      	b.n	8004da4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3320      	adds	r3, #32
 8004d36:	7812      	ldrb	r2, [r2, #0]
 8004d38:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004d56:	e025      	b.n	8004da4 <HAL_SPI_Transmit+0x378>
 8004d58:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d5c:	f7fc fb94 	bl	8001488 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d803      	bhi.n	8004d74 <HAL_SPI_Transmit+0x348>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d102      	bne.n	8004d7a <HAL_SPI_Transmit+0x34e>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d114      	bne.n	8004da4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f844 	bl	8004e08 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e02c      	b.n	8004dfe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f47f af79 	bne.w	8004ca4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2200      	movs	r2, #0
 8004dba:	2108      	movs	r1, #8
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 f8c3 	bl	8004f48 <SPI_WaitOnFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dce:	f043 0220 	orr.w	r2, r3, #32
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 f815 	bl	8004e08 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
  }
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop

08004e08 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0208 	orr.w	r2, r2, #8
 8004e26:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699a      	ldr	r2, [r3, #24]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0210 	orr.w	r2, r2, #16
 8004e36:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6919      	ldr	r1, [r3, #16]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4b3c      	ldr	r3, [pc, #240]	@ (8004f44 <SPI_CloseTransfer+0x13c>)
 8004e54:	400b      	ands	r3, r1
 8004e56:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004e66:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d014      	beq.n	8004e9e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00f      	beq.n	8004e9e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e84:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699a      	ldr	r2, [r3, #24]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0220 	orr.w	r2, r2, #32
 8004e9c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d014      	beq.n	8004ed4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00f      	beq.n	8004ed4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eba:	f043 0204 	orr.w	r2, r3, #4
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ed2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00f      	beq.n	8004efe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ee4:	f043 0201 	orr.w	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699a      	ldr	r2, [r3, #24]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004efc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00f      	beq.n	8004f28 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f0e:	f043 0208 	orr.w	r2, r3, #8
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f26:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8004f38:	bf00      	nop
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	fffffc90 	.word	0xfffffc90

08004f48 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004f58:	e010      	b.n	8004f7c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f5a:	f7fc fa95 	bl	8001488 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d803      	bhi.n	8004f72 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d102      	bne.n	8004f78 <SPI_WaitOnFlagUntilTimeout+0x30>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e00f      	b.n	8004f9c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695a      	ldr	r2, [r3, #20]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d0df      	beq.n	8004f5a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	3307      	adds	r3, #7
 8004fc2:	08db      	lsrs	r3, r3, #3
 8004fc4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	fb02 f303 	mul.w	r3, r2, r3
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e042      	b.n	8005072 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fc f926 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2224      	movs	r2, #36	@ 0x24
 8005008:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0201 	bic.w	r2, r2, #1
 800501a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fd91 	bl	8005b4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f826 	bl	800507c <UART_SetConfig>
 8005030:	4603      	mov	r3, r0
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e01b      	b.n	8005072 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005048:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005058:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0201 	orr.w	r2, r2, #1
 8005068:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fe10 	bl	8005c90 <UART_CheckIdleState>
 8005070:	4603      	mov	r3, r0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800507c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005080:	b092      	sub	sp, #72	@ 0x48
 8005082:	af00      	add	r7, sp, #0
 8005084:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	431a      	orrs	r2, r3
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	431a      	orrs	r2, r3
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	4bbe      	ldr	r3, [pc, #760]	@ (80053a4 <UART_SetConfig+0x328>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4ab3      	ldr	r2, [pc, #716]	@ (80053a8 <UART_SetConfig+0x32c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050e4:	4313      	orrs	r3, r2
 80050e6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	4baf      	ldr	r3, [pc, #700]	@ (80053ac <UART_SetConfig+0x330>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	6812      	ldr	r2, [r2, #0]
 80050f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80050f8:	430b      	orrs	r3, r1
 80050fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005102:	f023 010f 	bic.w	r1, r3, #15
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4aa6      	ldr	r2, [pc, #664]	@ (80053b0 <UART_SetConfig+0x334>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d177      	bne.n	800520c <UART_SetConfig+0x190>
 800511c:	4ba5      	ldr	r3, [pc, #660]	@ (80053b4 <UART_SetConfig+0x338>)
 800511e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005120:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005124:	2b28      	cmp	r3, #40	@ 0x28
 8005126:	d86d      	bhi.n	8005204 <UART_SetConfig+0x188>
 8005128:	a201      	add	r2, pc, #4	@ (adr r2, 8005130 <UART_SetConfig+0xb4>)
 800512a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512e:	bf00      	nop
 8005130:	080051d5 	.word	0x080051d5
 8005134:	08005205 	.word	0x08005205
 8005138:	08005205 	.word	0x08005205
 800513c:	08005205 	.word	0x08005205
 8005140:	08005205 	.word	0x08005205
 8005144:	08005205 	.word	0x08005205
 8005148:	08005205 	.word	0x08005205
 800514c:	08005205 	.word	0x08005205
 8005150:	080051dd 	.word	0x080051dd
 8005154:	08005205 	.word	0x08005205
 8005158:	08005205 	.word	0x08005205
 800515c:	08005205 	.word	0x08005205
 8005160:	08005205 	.word	0x08005205
 8005164:	08005205 	.word	0x08005205
 8005168:	08005205 	.word	0x08005205
 800516c:	08005205 	.word	0x08005205
 8005170:	080051e5 	.word	0x080051e5
 8005174:	08005205 	.word	0x08005205
 8005178:	08005205 	.word	0x08005205
 800517c:	08005205 	.word	0x08005205
 8005180:	08005205 	.word	0x08005205
 8005184:	08005205 	.word	0x08005205
 8005188:	08005205 	.word	0x08005205
 800518c:	08005205 	.word	0x08005205
 8005190:	080051ed 	.word	0x080051ed
 8005194:	08005205 	.word	0x08005205
 8005198:	08005205 	.word	0x08005205
 800519c:	08005205 	.word	0x08005205
 80051a0:	08005205 	.word	0x08005205
 80051a4:	08005205 	.word	0x08005205
 80051a8:	08005205 	.word	0x08005205
 80051ac:	08005205 	.word	0x08005205
 80051b0:	080051f5 	.word	0x080051f5
 80051b4:	08005205 	.word	0x08005205
 80051b8:	08005205 	.word	0x08005205
 80051bc:	08005205 	.word	0x08005205
 80051c0:	08005205 	.word	0x08005205
 80051c4:	08005205 	.word	0x08005205
 80051c8:	08005205 	.word	0x08005205
 80051cc:	08005205 	.word	0x08005205
 80051d0:	080051fd 	.word	0x080051fd
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051da:	e222      	b.n	8005622 <UART_SetConfig+0x5a6>
 80051dc:	2304      	movs	r3, #4
 80051de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051e2:	e21e      	b.n	8005622 <UART_SetConfig+0x5a6>
 80051e4:	2308      	movs	r3, #8
 80051e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ea:	e21a      	b.n	8005622 <UART_SetConfig+0x5a6>
 80051ec:	2310      	movs	r3, #16
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051f2:	e216      	b.n	8005622 <UART_SetConfig+0x5a6>
 80051f4:	2320      	movs	r3, #32
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051fa:	e212      	b.n	8005622 <UART_SetConfig+0x5a6>
 80051fc:	2340      	movs	r3, #64	@ 0x40
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005202:	e20e      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005204:	2380      	movs	r3, #128	@ 0x80
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800520a:	e20a      	b.n	8005622 <UART_SetConfig+0x5a6>
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a69      	ldr	r2, [pc, #420]	@ (80053b8 <UART_SetConfig+0x33c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d130      	bne.n	8005278 <UART_SetConfig+0x1fc>
 8005216:	4b67      	ldr	r3, [pc, #412]	@ (80053b4 <UART_SetConfig+0x338>)
 8005218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	2b05      	cmp	r3, #5
 8005220:	d826      	bhi.n	8005270 <UART_SetConfig+0x1f4>
 8005222:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <UART_SetConfig+0x1ac>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	08005241 	.word	0x08005241
 800522c:	08005249 	.word	0x08005249
 8005230:	08005251 	.word	0x08005251
 8005234:	08005259 	.word	0x08005259
 8005238:	08005261 	.word	0x08005261
 800523c:	08005269 	.word	0x08005269
 8005240:	2300      	movs	r3, #0
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005246:	e1ec      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005248:	2304      	movs	r3, #4
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800524e:	e1e8      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005250:	2308      	movs	r3, #8
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005256:	e1e4      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005258:	2310      	movs	r3, #16
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525e:	e1e0      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005260:	2320      	movs	r3, #32
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005266:	e1dc      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005268:	2340      	movs	r3, #64	@ 0x40
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800526e:	e1d8      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005270:	2380      	movs	r3, #128	@ 0x80
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005276:	e1d4      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a4f      	ldr	r2, [pc, #316]	@ (80053bc <UART_SetConfig+0x340>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d130      	bne.n	80052e4 <UART_SetConfig+0x268>
 8005282:	4b4c      	ldr	r3, [pc, #304]	@ (80053b4 <UART_SetConfig+0x338>)
 8005284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	2b05      	cmp	r3, #5
 800528c:	d826      	bhi.n	80052dc <UART_SetConfig+0x260>
 800528e:	a201      	add	r2, pc, #4	@ (adr r2, 8005294 <UART_SetConfig+0x218>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052ad 	.word	0x080052ad
 8005298:	080052b5 	.word	0x080052b5
 800529c:	080052bd 	.word	0x080052bd
 80052a0:	080052c5 	.word	0x080052c5
 80052a4:	080052cd 	.word	0x080052cd
 80052a8:	080052d5 	.word	0x080052d5
 80052ac:	2300      	movs	r3, #0
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b2:	e1b6      	b.n	8005622 <UART_SetConfig+0x5a6>
 80052b4:	2304      	movs	r3, #4
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ba:	e1b2      	b.n	8005622 <UART_SetConfig+0x5a6>
 80052bc:	2308      	movs	r3, #8
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c2:	e1ae      	b.n	8005622 <UART_SetConfig+0x5a6>
 80052c4:	2310      	movs	r3, #16
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ca:	e1aa      	b.n	8005622 <UART_SetConfig+0x5a6>
 80052cc:	2320      	movs	r3, #32
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d2:	e1a6      	b.n	8005622 <UART_SetConfig+0x5a6>
 80052d4:	2340      	movs	r3, #64	@ 0x40
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052da:	e1a2      	b.n	8005622 <UART_SetConfig+0x5a6>
 80052dc:	2380      	movs	r3, #128	@ 0x80
 80052de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052e2:	e19e      	b.n	8005622 <UART_SetConfig+0x5a6>
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a35      	ldr	r2, [pc, #212]	@ (80053c0 <UART_SetConfig+0x344>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d130      	bne.n	8005350 <UART_SetConfig+0x2d4>
 80052ee:	4b31      	ldr	r3, [pc, #196]	@ (80053b4 <UART_SetConfig+0x338>)
 80052f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	2b05      	cmp	r3, #5
 80052f8:	d826      	bhi.n	8005348 <UART_SetConfig+0x2cc>
 80052fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005300 <UART_SetConfig+0x284>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	08005319 	.word	0x08005319
 8005304:	08005321 	.word	0x08005321
 8005308:	08005329 	.word	0x08005329
 800530c:	08005331 	.word	0x08005331
 8005310:	08005339 	.word	0x08005339
 8005314:	08005341 	.word	0x08005341
 8005318:	2300      	movs	r3, #0
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531e:	e180      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005320:	2304      	movs	r3, #4
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005326:	e17c      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005328:	2308      	movs	r3, #8
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532e:	e178      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005330:	2310      	movs	r3, #16
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005336:	e174      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005338:	2320      	movs	r3, #32
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533e:	e170      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005340:	2340      	movs	r3, #64	@ 0x40
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005346:	e16c      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005348:	2380      	movs	r3, #128	@ 0x80
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534e:	e168      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1b      	ldr	r2, [pc, #108]	@ (80053c4 <UART_SetConfig+0x348>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d142      	bne.n	80053e0 <UART_SetConfig+0x364>
 800535a:	4b16      	ldr	r3, [pc, #88]	@ (80053b4 <UART_SetConfig+0x338>)
 800535c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	2b05      	cmp	r3, #5
 8005364:	d838      	bhi.n	80053d8 <UART_SetConfig+0x35c>
 8005366:	a201      	add	r2, pc, #4	@ (adr r2, 800536c <UART_SetConfig+0x2f0>)
 8005368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536c:	08005385 	.word	0x08005385
 8005370:	0800538d 	.word	0x0800538d
 8005374:	08005395 	.word	0x08005395
 8005378:	0800539d 	.word	0x0800539d
 800537c:	080053c9 	.word	0x080053c9
 8005380:	080053d1 	.word	0x080053d1
 8005384:	2300      	movs	r3, #0
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538a:	e14a      	b.n	8005622 <UART_SetConfig+0x5a6>
 800538c:	2304      	movs	r3, #4
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005392:	e146      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005394:	2308      	movs	r3, #8
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539a:	e142      	b.n	8005622 <UART_SetConfig+0x5a6>
 800539c:	2310      	movs	r3, #16
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a2:	e13e      	b.n	8005622 <UART_SetConfig+0x5a6>
 80053a4:	cfff69f3 	.word	0xcfff69f3
 80053a8:	58000c00 	.word	0x58000c00
 80053ac:	11fff4ff 	.word	0x11fff4ff
 80053b0:	40011000 	.word	0x40011000
 80053b4:	58024400 	.word	0x58024400
 80053b8:	40004400 	.word	0x40004400
 80053bc:	40004800 	.word	0x40004800
 80053c0:	40004c00 	.word	0x40004c00
 80053c4:	40005000 	.word	0x40005000
 80053c8:	2320      	movs	r3, #32
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ce:	e128      	b.n	8005622 <UART_SetConfig+0x5a6>
 80053d0:	2340      	movs	r3, #64	@ 0x40
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d6:	e124      	b.n	8005622 <UART_SetConfig+0x5a6>
 80053d8:	2380      	movs	r3, #128	@ 0x80
 80053da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053de:	e120      	b.n	8005622 <UART_SetConfig+0x5a6>
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4acb      	ldr	r2, [pc, #812]	@ (8005714 <UART_SetConfig+0x698>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d176      	bne.n	80054d8 <UART_SetConfig+0x45c>
 80053ea:	4bcb      	ldr	r3, [pc, #812]	@ (8005718 <UART_SetConfig+0x69c>)
 80053ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053f2:	2b28      	cmp	r3, #40	@ 0x28
 80053f4:	d86c      	bhi.n	80054d0 <UART_SetConfig+0x454>
 80053f6:	a201      	add	r2, pc, #4	@ (adr r2, 80053fc <UART_SetConfig+0x380>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	080054a1 	.word	0x080054a1
 8005400:	080054d1 	.word	0x080054d1
 8005404:	080054d1 	.word	0x080054d1
 8005408:	080054d1 	.word	0x080054d1
 800540c:	080054d1 	.word	0x080054d1
 8005410:	080054d1 	.word	0x080054d1
 8005414:	080054d1 	.word	0x080054d1
 8005418:	080054d1 	.word	0x080054d1
 800541c:	080054a9 	.word	0x080054a9
 8005420:	080054d1 	.word	0x080054d1
 8005424:	080054d1 	.word	0x080054d1
 8005428:	080054d1 	.word	0x080054d1
 800542c:	080054d1 	.word	0x080054d1
 8005430:	080054d1 	.word	0x080054d1
 8005434:	080054d1 	.word	0x080054d1
 8005438:	080054d1 	.word	0x080054d1
 800543c:	080054b1 	.word	0x080054b1
 8005440:	080054d1 	.word	0x080054d1
 8005444:	080054d1 	.word	0x080054d1
 8005448:	080054d1 	.word	0x080054d1
 800544c:	080054d1 	.word	0x080054d1
 8005450:	080054d1 	.word	0x080054d1
 8005454:	080054d1 	.word	0x080054d1
 8005458:	080054d1 	.word	0x080054d1
 800545c:	080054b9 	.word	0x080054b9
 8005460:	080054d1 	.word	0x080054d1
 8005464:	080054d1 	.word	0x080054d1
 8005468:	080054d1 	.word	0x080054d1
 800546c:	080054d1 	.word	0x080054d1
 8005470:	080054d1 	.word	0x080054d1
 8005474:	080054d1 	.word	0x080054d1
 8005478:	080054d1 	.word	0x080054d1
 800547c:	080054c1 	.word	0x080054c1
 8005480:	080054d1 	.word	0x080054d1
 8005484:	080054d1 	.word	0x080054d1
 8005488:	080054d1 	.word	0x080054d1
 800548c:	080054d1 	.word	0x080054d1
 8005490:	080054d1 	.word	0x080054d1
 8005494:	080054d1 	.word	0x080054d1
 8005498:	080054d1 	.word	0x080054d1
 800549c:	080054c9 	.word	0x080054c9
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a6:	e0bc      	b.n	8005622 <UART_SetConfig+0x5a6>
 80054a8:	2304      	movs	r3, #4
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ae:	e0b8      	b.n	8005622 <UART_SetConfig+0x5a6>
 80054b0:	2308      	movs	r3, #8
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b6:	e0b4      	b.n	8005622 <UART_SetConfig+0x5a6>
 80054b8:	2310      	movs	r3, #16
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054be:	e0b0      	b.n	8005622 <UART_SetConfig+0x5a6>
 80054c0:	2320      	movs	r3, #32
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c6:	e0ac      	b.n	8005622 <UART_SetConfig+0x5a6>
 80054c8:	2340      	movs	r3, #64	@ 0x40
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ce:	e0a8      	b.n	8005622 <UART_SetConfig+0x5a6>
 80054d0:	2380      	movs	r3, #128	@ 0x80
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d6:	e0a4      	b.n	8005622 <UART_SetConfig+0x5a6>
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a8f      	ldr	r2, [pc, #572]	@ (800571c <UART_SetConfig+0x6a0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d130      	bne.n	8005544 <UART_SetConfig+0x4c8>
 80054e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005718 <UART_SetConfig+0x69c>)
 80054e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b05      	cmp	r3, #5
 80054ec:	d826      	bhi.n	800553c <UART_SetConfig+0x4c0>
 80054ee:	a201      	add	r2, pc, #4	@ (adr r2, 80054f4 <UART_SetConfig+0x478>)
 80054f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f4:	0800550d 	.word	0x0800550d
 80054f8:	08005515 	.word	0x08005515
 80054fc:	0800551d 	.word	0x0800551d
 8005500:	08005525 	.word	0x08005525
 8005504:	0800552d 	.word	0x0800552d
 8005508:	08005535 	.word	0x08005535
 800550c:	2300      	movs	r3, #0
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005512:	e086      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005514:	2304      	movs	r3, #4
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551a:	e082      	b.n	8005622 <UART_SetConfig+0x5a6>
 800551c:	2308      	movs	r3, #8
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005522:	e07e      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005524:	2310      	movs	r3, #16
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552a:	e07a      	b.n	8005622 <UART_SetConfig+0x5a6>
 800552c:	2320      	movs	r3, #32
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005532:	e076      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005534:	2340      	movs	r3, #64	@ 0x40
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553a:	e072      	b.n	8005622 <UART_SetConfig+0x5a6>
 800553c:	2380      	movs	r3, #128	@ 0x80
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005542:	e06e      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a75      	ldr	r2, [pc, #468]	@ (8005720 <UART_SetConfig+0x6a4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d130      	bne.n	80055b0 <UART_SetConfig+0x534>
 800554e:	4b72      	ldr	r3, [pc, #456]	@ (8005718 <UART_SetConfig+0x69c>)
 8005550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	2b05      	cmp	r3, #5
 8005558:	d826      	bhi.n	80055a8 <UART_SetConfig+0x52c>
 800555a:	a201      	add	r2, pc, #4	@ (adr r2, 8005560 <UART_SetConfig+0x4e4>)
 800555c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005560:	08005579 	.word	0x08005579
 8005564:	08005581 	.word	0x08005581
 8005568:	08005589 	.word	0x08005589
 800556c:	08005591 	.word	0x08005591
 8005570:	08005599 	.word	0x08005599
 8005574:	080055a1 	.word	0x080055a1
 8005578:	2300      	movs	r3, #0
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800557e:	e050      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005580:	2304      	movs	r3, #4
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005586:	e04c      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005588:	2308      	movs	r3, #8
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800558e:	e048      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005590:	2310      	movs	r3, #16
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005596:	e044      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005598:	2320      	movs	r3, #32
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559e:	e040      	b.n	8005622 <UART_SetConfig+0x5a6>
 80055a0:	2340      	movs	r3, #64	@ 0x40
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a6:	e03c      	b.n	8005622 <UART_SetConfig+0x5a6>
 80055a8:	2380      	movs	r3, #128	@ 0x80
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ae:	e038      	b.n	8005622 <UART_SetConfig+0x5a6>
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a5b      	ldr	r2, [pc, #364]	@ (8005724 <UART_SetConfig+0x6a8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d130      	bne.n	800561c <UART_SetConfig+0x5a0>
 80055ba:	4b57      	ldr	r3, [pc, #348]	@ (8005718 <UART_SetConfig+0x69c>)
 80055bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	2b05      	cmp	r3, #5
 80055c4:	d826      	bhi.n	8005614 <UART_SetConfig+0x598>
 80055c6:	a201      	add	r2, pc, #4	@ (adr r2, 80055cc <UART_SetConfig+0x550>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	080055e5 	.word	0x080055e5
 80055d0:	080055ed 	.word	0x080055ed
 80055d4:	080055f5 	.word	0x080055f5
 80055d8:	080055fd 	.word	0x080055fd
 80055dc:	08005605 	.word	0x08005605
 80055e0:	0800560d 	.word	0x0800560d
 80055e4:	2302      	movs	r3, #2
 80055e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ea:	e01a      	b.n	8005622 <UART_SetConfig+0x5a6>
 80055ec:	2304      	movs	r3, #4
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f2:	e016      	b.n	8005622 <UART_SetConfig+0x5a6>
 80055f4:	2308      	movs	r3, #8
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fa:	e012      	b.n	8005622 <UART_SetConfig+0x5a6>
 80055fc:	2310      	movs	r3, #16
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005602:	e00e      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005604:	2320      	movs	r3, #32
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560a:	e00a      	b.n	8005622 <UART_SetConfig+0x5a6>
 800560c:	2340      	movs	r3, #64	@ 0x40
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005612:	e006      	b.n	8005622 <UART_SetConfig+0x5a6>
 8005614:	2380      	movs	r3, #128	@ 0x80
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561a:	e002      	b.n	8005622 <UART_SetConfig+0x5a6>
 800561c:	2380      	movs	r3, #128	@ 0x80
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a3f      	ldr	r2, [pc, #252]	@ (8005724 <UART_SetConfig+0x6a8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	f040 80f8 	bne.w	800581e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800562e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005632:	2b20      	cmp	r3, #32
 8005634:	dc46      	bgt.n	80056c4 <UART_SetConfig+0x648>
 8005636:	2b02      	cmp	r3, #2
 8005638:	f2c0 8082 	blt.w	8005740 <UART_SetConfig+0x6c4>
 800563c:	3b02      	subs	r3, #2
 800563e:	2b1e      	cmp	r3, #30
 8005640:	d87e      	bhi.n	8005740 <UART_SetConfig+0x6c4>
 8005642:	a201      	add	r2, pc, #4	@ (adr r2, 8005648 <UART_SetConfig+0x5cc>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	080056cb 	.word	0x080056cb
 800564c:	08005741 	.word	0x08005741
 8005650:	080056d3 	.word	0x080056d3
 8005654:	08005741 	.word	0x08005741
 8005658:	08005741 	.word	0x08005741
 800565c:	08005741 	.word	0x08005741
 8005660:	080056e3 	.word	0x080056e3
 8005664:	08005741 	.word	0x08005741
 8005668:	08005741 	.word	0x08005741
 800566c:	08005741 	.word	0x08005741
 8005670:	08005741 	.word	0x08005741
 8005674:	08005741 	.word	0x08005741
 8005678:	08005741 	.word	0x08005741
 800567c:	08005741 	.word	0x08005741
 8005680:	080056f3 	.word	0x080056f3
 8005684:	08005741 	.word	0x08005741
 8005688:	08005741 	.word	0x08005741
 800568c:	08005741 	.word	0x08005741
 8005690:	08005741 	.word	0x08005741
 8005694:	08005741 	.word	0x08005741
 8005698:	08005741 	.word	0x08005741
 800569c:	08005741 	.word	0x08005741
 80056a0:	08005741 	.word	0x08005741
 80056a4:	08005741 	.word	0x08005741
 80056a8:	08005741 	.word	0x08005741
 80056ac:	08005741 	.word	0x08005741
 80056b0:	08005741 	.word	0x08005741
 80056b4:	08005741 	.word	0x08005741
 80056b8:	08005741 	.word	0x08005741
 80056bc:	08005741 	.word	0x08005741
 80056c0:	08005733 	.word	0x08005733
 80056c4:	2b40      	cmp	r3, #64	@ 0x40
 80056c6:	d037      	beq.n	8005738 <UART_SetConfig+0x6bc>
 80056c8:	e03a      	b.n	8005740 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80056ca:	f7fe fc69 	bl	8003fa0 <HAL_RCCEx_GetD3PCLK1Freq>
 80056ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80056d0:	e03c      	b.n	800574c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe fc78 	bl	8003fcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056e0:	e034      	b.n	800574c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056e2:	f107 0318 	add.w	r3, r7, #24
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fdc4 	bl	8004274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056f0:	e02c      	b.n	800574c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056f2:	4b09      	ldr	r3, [pc, #36]	@ (8005718 <UART_SetConfig+0x69c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d016      	beq.n	800572c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056fe:	4b06      	ldr	r3, [pc, #24]	@ (8005718 <UART_SetConfig+0x69c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	08db      	lsrs	r3, r3, #3
 8005704:	f003 0303 	and.w	r3, r3, #3
 8005708:	4a07      	ldr	r2, [pc, #28]	@ (8005728 <UART_SetConfig+0x6ac>)
 800570a:	fa22 f303 	lsr.w	r3, r2, r3
 800570e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005710:	e01c      	b.n	800574c <UART_SetConfig+0x6d0>
 8005712:	bf00      	nop
 8005714:	40011400 	.word	0x40011400
 8005718:	58024400 	.word	0x58024400
 800571c:	40007800 	.word	0x40007800
 8005720:	40007c00 	.word	0x40007c00
 8005724:	58000c00 	.word	0x58000c00
 8005728:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800572c:	4b9d      	ldr	r3, [pc, #628]	@ (80059a4 <UART_SetConfig+0x928>)
 800572e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005730:	e00c      	b.n	800574c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005732:	4b9d      	ldr	r3, [pc, #628]	@ (80059a8 <UART_SetConfig+0x92c>)
 8005734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005736:	e009      	b.n	800574c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005738:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800573c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800573e:	e005      	b.n	800574c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800574a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800574c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 81de 	beq.w	8005b10 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005758:	4a94      	ldr	r2, [pc, #592]	@ (80059ac <UART_SetConfig+0x930>)
 800575a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800575e:	461a      	mov	r2, r3
 8005760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005762:	fbb3 f3f2 	udiv	r3, r3, r2
 8005766:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	4413      	add	r3, r2
 8005772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005774:	429a      	cmp	r2, r3
 8005776:	d305      	bcc.n	8005784 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800577e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005780:	429a      	cmp	r2, r3
 8005782:	d903      	bls.n	800578c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800578a:	e1c1      	b.n	8005b10 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800578c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800578e:	2200      	movs	r2, #0
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	60fa      	str	r2, [r7, #12]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005798:	4a84      	ldr	r2, [pc, #528]	@ (80059ac <UART_SetConfig+0x930>)
 800579a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	2200      	movs	r2, #0
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	607a      	str	r2, [r7, #4]
 80057a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057ae:	f7fa fd93 	bl	80002d8 <__aeabi_uldivmod>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4610      	mov	r0, r2
 80057b8:	4619      	mov	r1, r3
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	020b      	lsls	r3, r1, #8
 80057c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057c8:	0202      	lsls	r2, r0, #8
 80057ca:	6979      	ldr	r1, [r7, #20]
 80057cc:	6849      	ldr	r1, [r1, #4]
 80057ce:	0849      	lsrs	r1, r1, #1
 80057d0:	2000      	movs	r0, #0
 80057d2:	460c      	mov	r4, r1
 80057d4:	4605      	mov	r5, r0
 80057d6:	eb12 0804 	adds.w	r8, r2, r4
 80057da:	eb43 0905 	adc.w	r9, r3, r5
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	469a      	mov	sl, r3
 80057e6:	4693      	mov	fp, r2
 80057e8:	4652      	mov	r2, sl
 80057ea:	465b      	mov	r3, fp
 80057ec:	4640      	mov	r0, r8
 80057ee:	4649      	mov	r1, r9
 80057f0:	f7fa fd72 	bl	80002d8 <__aeabi_uldivmod>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4613      	mov	r3, r2
 80057fa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005802:	d308      	bcc.n	8005816 <UART_SetConfig+0x79a>
 8005804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800580a:	d204      	bcs.n	8005816 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005812:	60da      	str	r2, [r3, #12]
 8005814:	e17c      	b.n	8005b10 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800581c:	e178      	b.n	8005b10 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005826:	f040 80c5 	bne.w	80059b4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800582a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800582e:	2b20      	cmp	r3, #32
 8005830:	dc48      	bgt.n	80058c4 <UART_SetConfig+0x848>
 8005832:	2b00      	cmp	r3, #0
 8005834:	db7b      	blt.n	800592e <UART_SetConfig+0x8b2>
 8005836:	2b20      	cmp	r3, #32
 8005838:	d879      	bhi.n	800592e <UART_SetConfig+0x8b2>
 800583a:	a201      	add	r2, pc, #4	@ (adr r2, 8005840 <UART_SetConfig+0x7c4>)
 800583c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005840:	080058cb 	.word	0x080058cb
 8005844:	080058d3 	.word	0x080058d3
 8005848:	0800592f 	.word	0x0800592f
 800584c:	0800592f 	.word	0x0800592f
 8005850:	080058db 	.word	0x080058db
 8005854:	0800592f 	.word	0x0800592f
 8005858:	0800592f 	.word	0x0800592f
 800585c:	0800592f 	.word	0x0800592f
 8005860:	080058eb 	.word	0x080058eb
 8005864:	0800592f 	.word	0x0800592f
 8005868:	0800592f 	.word	0x0800592f
 800586c:	0800592f 	.word	0x0800592f
 8005870:	0800592f 	.word	0x0800592f
 8005874:	0800592f 	.word	0x0800592f
 8005878:	0800592f 	.word	0x0800592f
 800587c:	0800592f 	.word	0x0800592f
 8005880:	080058fb 	.word	0x080058fb
 8005884:	0800592f 	.word	0x0800592f
 8005888:	0800592f 	.word	0x0800592f
 800588c:	0800592f 	.word	0x0800592f
 8005890:	0800592f 	.word	0x0800592f
 8005894:	0800592f 	.word	0x0800592f
 8005898:	0800592f 	.word	0x0800592f
 800589c:	0800592f 	.word	0x0800592f
 80058a0:	0800592f 	.word	0x0800592f
 80058a4:	0800592f 	.word	0x0800592f
 80058a8:	0800592f 	.word	0x0800592f
 80058ac:	0800592f 	.word	0x0800592f
 80058b0:	0800592f 	.word	0x0800592f
 80058b4:	0800592f 	.word	0x0800592f
 80058b8:	0800592f 	.word	0x0800592f
 80058bc:	0800592f 	.word	0x0800592f
 80058c0:	08005921 	.word	0x08005921
 80058c4:	2b40      	cmp	r3, #64	@ 0x40
 80058c6:	d02e      	beq.n	8005926 <UART_SetConfig+0x8aa>
 80058c8:	e031      	b.n	800592e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058ca:	f7fd f933 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 80058ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058d0:	e033      	b.n	800593a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058d2:	f7fd f945 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 80058d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058d8:	e02f      	b.n	800593a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe fb74 	bl	8003fcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058e8:	e027      	b.n	800593a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058ea:	f107 0318 	add.w	r3, r7, #24
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe fcc0 	bl	8004274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058f8:	e01f      	b.n	800593a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058fa:	4b2d      	ldr	r3, [pc, #180]	@ (80059b0 <UART_SetConfig+0x934>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b00      	cmp	r3, #0
 8005904:	d009      	beq.n	800591a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005906:	4b2a      	ldr	r3, [pc, #168]	@ (80059b0 <UART_SetConfig+0x934>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	08db      	lsrs	r3, r3, #3
 800590c:	f003 0303 	and.w	r3, r3, #3
 8005910:	4a24      	ldr	r2, [pc, #144]	@ (80059a4 <UART_SetConfig+0x928>)
 8005912:	fa22 f303 	lsr.w	r3, r2, r3
 8005916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005918:	e00f      	b.n	800593a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800591a:	4b22      	ldr	r3, [pc, #136]	@ (80059a4 <UART_SetConfig+0x928>)
 800591c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800591e:	e00c      	b.n	800593a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005920:	4b21      	ldr	r3, [pc, #132]	@ (80059a8 <UART_SetConfig+0x92c>)
 8005922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005924:	e009      	b.n	800593a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800592a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800592c:	e005      	b.n	800593a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800593a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 80e7 	beq.w	8005b10 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	4a19      	ldr	r2, [pc, #100]	@ (80059ac <UART_SetConfig+0x930>)
 8005948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800594c:	461a      	mov	r2, r3
 800594e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005950:	fbb3 f3f2 	udiv	r3, r3, r2
 8005954:	005a      	lsls	r2, r3, #1
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	085b      	lsrs	r3, r3, #1
 800595c:	441a      	add	r2, r3
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	fbb2 f3f3 	udiv	r3, r2, r3
 8005966:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596a:	2b0f      	cmp	r3, #15
 800596c:	d916      	bls.n	800599c <UART_SetConfig+0x920>
 800596e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005974:	d212      	bcs.n	800599c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005978:	b29b      	uxth	r3, r3
 800597a:	f023 030f 	bic.w	r3, r3, #15
 800597e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005982:	085b      	lsrs	r3, r3, #1
 8005984:	b29b      	uxth	r3, r3
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	b29a      	uxth	r2, r3
 800598c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800598e:	4313      	orrs	r3, r2
 8005990:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005998:	60da      	str	r2, [r3, #12]
 800599a:	e0b9      	b.n	8005b10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80059a2:	e0b5      	b.n	8005b10 <UART_SetConfig+0xa94>
 80059a4:	03d09000 	.word	0x03d09000
 80059a8:	003d0900 	.word	0x003d0900
 80059ac:	08006248 	.word	0x08006248
 80059b0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80059b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	dc49      	bgt.n	8005a50 <UART_SetConfig+0x9d4>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	db7c      	blt.n	8005aba <UART_SetConfig+0xa3e>
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d87a      	bhi.n	8005aba <UART_SetConfig+0xa3e>
 80059c4:	a201      	add	r2, pc, #4	@ (adr r2, 80059cc <UART_SetConfig+0x950>)
 80059c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ca:	bf00      	nop
 80059cc:	08005a57 	.word	0x08005a57
 80059d0:	08005a5f 	.word	0x08005a5f
 80059d4:	08005abb 	.word	0x08005abb
 80059d8:	08005abb 	.word	0x08005abb
 80059dc:	08005a67 	.word	0x08005a67
 80059e0:	08005abb 	.word	0x08005abb
 80059e4:	08005abb 	.word	0x08005abb
 80059e8:	08005abb 	.word	0x08005abb
 80059ec:	08005a77 	.word	0x08005a77
 80059f0:	08005abb 	.word	0x08005abb
 80059f4:	08005abb 	.word	0x08005abb
 80059f8:	08005abb 	.word	0x08005abb
 80059fc:	08005abb 	.word	0x08005abb
 8005a00:	08005abb 	.word	0x08005abb
 8005a04:	08005abb 	.word	0x08005abb
 8005a08:	08005abb 	.word	0x08005abb
 8005a0c:	08005a87 	.word	0x08005a87
 8005a10:	08005abb 	.word	0x08005abb
 8005a14:	08005abb 	.word	0x08005abb
 8005a18:	08005abb 	.word	0x08005abb
 8005a1c:	08005abb 	.word	0x08005abb
 8005a20:	08005abb 	.word	0x08005abb
 8005a24:	08005abb 	.word	0x08005abb
 8005a28:	08005abb 	.word	0x08005abb
 8005a2c:	08005abb 	.word	0x08005abb
 8005a30:	08005abb 	.word	0x08005abb
 8005a34:	08005abb 	.word	0x08005abb
 8005a38:	08005abb 	.word	0x08005abb
 8005a3c:	08005abb 	.word	0x08005abb
 8005a40:	08005abb 	.word	0x08005abb
 8005a44:	08005abb 	.word	0x08005abb
 8005a48:	08005abb 	.word	0x08005abb
 8005a4c:	08005aad 	.word	0x08005aad
 8005a50:	2b40      	cmp	r3, #64	@ 0x40
 8005a52:	d02e      	beq.n	8005ab2 <UART_SetConfig+0xa36>
 8005a54:	e031      	b.n	8005aba <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a56:	f7fd f86d 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8005a5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a5c:	e033      	b.n	8005ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a5e:	f7fd f87f 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 8005a62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a64:	e02f      	b.n	8005ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe faae 	bl	8003fcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a74:	e027      	b.n	8005ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a76:	f107 0318 	add.w	r3, r7, #24
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fe fbfa 	bl	8004274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a84:	e01f      	b.n	8005ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a86:	4b2d      	ldr	r3, [pc, #180]	@ (8005b3c <UART_SetConfig+0xac0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d009      	beq.n	8005aa6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a92:	4b2a      	ldr	r3, [pc, #168]	@ (8005b3c <UART_SetConfig+0xac0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	08db      	lsrs	r3, r3, #3
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	4a28      	ldr	r2, [pc, #160]	@ (8005b40 <UART_SetConfig+0xac4>)
 8005a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005aa4:	e00f      	b.n	8005ac6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005aa6:	4b26      	ldr	r3, [pc, #152]	@ (8005b40 <UART_SetConfig+0xac4>)
 8005aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aaa:	e00c      	b.n	8005ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005aac:	4b25      	ldr	r3, [pc, #148]	@ (8005b44 <UART_SetConfig+0xac8>)
 8005aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ab0:	e009      	b.n	8005ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ab8:	e005      	b.n	8005ac6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ac4:	bf00      	nop
    }

    if (pclk != 0U)
 8005ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d021      	beq.n	8005b10 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b48 <UART_SetConfig+0xacc>)
 8005ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ada:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	085b      	lsrs	r3, r3, #1
 8005ae4:	441a      	add	r2, r3
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af2:	2b0f      	cmp	r3, #15
 8005af4:	d909      	bls.n	8005b0a <UART_SetConfig+0xa8e>
 8005af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005afc:	d205      	bcs.n	8005b0a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60da      	str	r2, [r3, #12]
 8005b08:	e002      	b.n	8005b10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2200      	movs	r2, #0
 8005b24:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b2c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3748      	adds	r7, #72	@ 0x48
 8005b34:	46bd      	mov	sp, r7
 8005b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b3a:	bf00      	nop
 8005b3c:	58024400 	.word	0x58024400
 8005b40:	03d09000 	.word	0x03d09000
 8005b44:	003d0900 	.word	0x003d0900
 8005b48:	08006248 	.word	0x08006248

08005b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00a      	beq.n	8005b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00a      	beq.n	8005bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be0:	f003 0310 	and.w	r3, r3, #16
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c02:	f003 0320 	and.w	r3, r3, #32
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01a      	beq.n	8005c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c4a:	d10a      	bne.n	8005c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	605a      	str	r2, [r3, #4]
  }
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b098      	sub	sp, #96	@ 0x60
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ca0:	f7fb fbf2 	bl	8001488 <HAL_GetTick>
 8005ca4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d12f      	bne.n	8005d14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f88e 	bl	8005de4 <UART_WaitOnFlagUntilTimeout>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d022      	beq.n	8005d14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd6:	e853 3f00 	ldrex	r3, [r3]
 8005cda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cf4:	e841 2300 	strex	r3, r2, [r1]
 8005cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1e6      	bne.n	8005cce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e063      	b.n	8005ddc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0304 	and.w	r3, r3, #4
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d149      	bne.n	8005db6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f857 	bl	8005de4 <UART_WaitOnFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d03c      	beq.n	8005db6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	623b      	str	r3, [r7, #32]
   return(result);
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e6      	bne.n	8005d3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3308      	adds	r3, #8
 8005d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d8e:	61fa      	str	r2, [r7, #28]
 8005d90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	69b9      	ldr	r1, [r7, #24]
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e5      	bne.n	8005d6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e012      	b.n	8005ddc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3758      	adds	r7, #88	@ 0x58
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	4613      	mov	r3, r2
 8005df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df4:	e04f      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d04b      	beq.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfe:	f7fb fb43 	bl	8001488 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d302      	bcc.n	8005e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e04e      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d037      	beq.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b80      	cmp	r3, #128	@ 0x80
 8005e2a:	d034      	beq.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b40      	cmp	r3, #64	@ 0x40
 8005e30:	d031      	beq.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d110      	bne.n	8005e62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2208      	movs	r2, #8
 8005e46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f839 	bl	8005ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2208      	movs	r2, #8
 8005e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e029      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e70:	d111      	bne.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 f81f 	bl	8005ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e00f      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d0a0      	beq.n	8005df6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b095      	sub	sp, #84	@ 0x54
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ee6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ee8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005eec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e6      	bne.n	8005ec8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3308      	adds	r3, #8
 8005f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8005f88 <UART_EndRxTransfer+0xc8>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3308      	adds	r3, #8
 8005f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e5      	bne.n	8005efa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d118      	bne.n	8005f68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f023 0310 	bic.w	r3, r3, #16
 8005f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f54:	61bb      	str	r3, [r7, #24]
 8005f56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6979      	ldr	r1, [r7, #20]
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	613b      	str	r3, [r7, #16]
   return(result);
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e6      	bne.n	8005f36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005f7c:	bf00      	nop
 8005f7e:	3754      	adds	r7, #84	@ 0x54
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	effffffe 	.word	0xeffffffe

08005f8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e027      	b.n	8005ff2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2224      	movs	r2, #36	@ 0x24
 8005fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0201 	bic.w	r2, r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005fd0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b084      	sub	sp, #16
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006012:	2302      	movs	r3, #2
 8006014:	e02d      	b.n	8006072 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2224      	movs	r2, #36	@ 0x24
 8006022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0201 	bic.w	r2, r2, #1
 800603c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f850 	bl	80060f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800608a:	2b01      	cmp	r3, #1
 800608c:	d101      	bne.n	8006092 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800608e:	2302      	movs	r3, #2
 8006090:	e02d      	b.n	80060ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2224      	movs	r2, #36	@ 0x24
 800609e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0201 	bic.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f812 	bl	80060f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2220      	movs	r2, #32
 80060e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006104:	2b00      	cmp	r3, #0
 8006106:	d108      	bne.n	800611a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006118:	e031      	b.n	800617e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800611a:	2310      	movs	r3, #16
 800611c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800611e:	2310      	movs	r3, #16
 8006120:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	0e5b      	lsrs	r3, r3, #25
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	0f5b      	lsrs	r3, r3, #29
 800613a:	b2db      	uxtb	r3, r3
 800613c:	f003 0307 	and.w	r3, r3, #7
 8006140:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006142:	7bbb      	ldrb	r3, [r7, #14]
 8006144:	7b3a      	ldrb	r2, [r7, #12]
 8006146:	4911      	ldr	r1, [pc, #68]	@ (800618c <UARTEx_SetNbDataToProcess+0x94>)
 8006148:	5c8a      	ldrb	r2, [r1, r2]
 800614a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800614e:	7b3a      	ldrb	r2, [r7, #12]
 8006150:	490f      	ldr	r1, [pc, #60]	@ (8006190 <UARTEx_SetNbDataToProcess+0x98>)
 8006152:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006154:	fb93 f3f2 	sdiv	r3, r3, r2
 8006158:	b29a      	uxth	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	7b7a      	ldrb	r2, [r7, #13]
 8006164:	4909      	ldr	r1, [pc, #36]	@ (800618c <UARTEx_SetNbDataToProcess+0x94>)
 8006166:	5c8a      	ldrb	r2, [r1, r2]
 8006168:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800616c:	7b7a      	ldrb	r2, [r7, #13]
 800616e:	4908      	ldr	r1, [pc, #32]	@ (8006190 <UARTEx_SetNbDataToProcess+0x98>)
 8006170:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006172:	fb93 f3f2 	sdiv	r3, r3, r2
 8006176:	b29a      	uxth	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800617e:	bf00      	nop
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	08006260 	.word	0x08006260
 8006190:	08006268 	.word	0x08006268

08006194 <memset>:
 8006194:	4402      	add	r2, r0
 8006196:	4603      	mov	r3, r0
 8006198:	4293      	cmp	r3, r2
 800619a:	d100      	bne.n	800619e <memset+0xa>
 800619c:	4770      	bx	lr
 800619e:	f803 1b01 	strb.w	r1, [r3], #1
 80061a2:	e7f9      	b.n	8006198 <memset+0x4>

080061a4 <__libc_init_array>:
 80061a4:	b570      	push	{r4, r5, r6, lr}
 80061a6:	4d0d      	ldr	r5, [pc, #52]	@ (80061dc <__libc_init_array+0x38>)
 80061a8:	4c0d      	ldr	r4, [pc, #52]	@ (80061e0 <__libc_init_array+0x3c>)
 80061aa:	1b64      	subs	r4, r4, r5
 80061ac:	10a4      	asrs	r4, r4, #2
 80061ae:	2600      	movs	r6, #0
 80061b0:	42a6      	cmp	r6, r4
 80061b2:	d109      	bne.n	80061c8 <__libc_init_array+0x24>
 80061b4:	4d0b      	ldr	r5, [pc, #44]	@ (80061e4 <__libc_init_array+0x40>)
 80061b6:	4c0c      	ldr	r4, [pc, #48]	@ (80061e8 <__libc_init_array+0x44>)
 80061b8:	f000 f818 	bl	80061ec <_init>
 80061bc:	1b64      	subs	r4, r4, r5
 80061be:	10a4      	asrs	r4, r4, #2
 80061c0:	2600      	movs	r6, #0
 80061c2:	42a6      	cmp	r6, r4
 80061c4:	d105      	bne.n	80061d2 <__libc_init_array+0x2e>
 80061c6:	bd70      	pop	{r4, r5, r6, pc}
 80061c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061cc:	4798      	blx	r3
 80061ce:	3601      	adds	r6, #1
 80061d0:	e7ee      	b.n	80061b0 <__libc_init_array+0xc>
 80061d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d6:	4798      	blx	r3
 80061d8:	3601      	adds	r6, #1
 80061da:	e7f2      	b.n	80061c2 <__libc_init_array+0x1e>
 80061dc:	08006278 	.word	0x08006278
 80061e0:	08006278 	.word	0x08006278
 80061e4:	08006278 	.word	0x08006278
 80061e8:	0800627c 	.word	0x0800627c

080061ec <_init>:
 80061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ee:	bf00      	nop
 80061f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f2:	bc08      	pop	{r3}
 80061f4:	469e      	mov	lr, r3
 80061f6:	4770      	bx	lr

080061f8 <_fini>:
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	bf00      	nop
 80061fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061fe:	bc08      	pop	{r3}
 8006200:	469e      	mov	lr, r3
 8006202:	4770      	bx	lr
