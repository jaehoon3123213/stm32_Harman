
MiniProject_Dog_Feed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c9c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08007e3c  08007e3c  00008e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fe8  08007fe8  00009108  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007fe8  08007fe8  00008fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ff0  08007ff0  00009108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ff0  08007ff0  00008ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ff4  08007ff4  00008ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  08007ff8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000108  08008100  00009108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  08008100  000095b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001749e  00000000  00000000  00009138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043d4  00000000  00000000  000205d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  000249b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd6  00000000  00000000  00025e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a40f  00000000  00000000  00026e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d42c  00000000  00000000  00041235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093963  00000000  00000000  0005e661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1fc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c20  00000000  00000000  000f2008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000f7c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000108 	.word	0x20000108
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e24 	.word	0x08007e24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000010c 	.word	0x2000010c
 80001dc:	08007e24 	.word	0x08007e24

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	4b5a      	ldr	r3, [pc, #360]	@ (8000760 <MX_GPIO_Init+0x184>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a59      	ldr	r2, [pc, #356]	@ (8000760 <MX_GPIO_Init+0x184>)
 80005fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b57      	ldr	r3, [pc, #348]	@ (8000760 <MX_GPIO_Init+0x184>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	4b53      	ldr	r3, [pc, #332]	@ (8000760 <MX_GPIO_Init+0x184>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a52      	ldr	r2, [pc, #328]	@ (8000760 <MX_GPIO_Init+0x184>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b50      	ldr	r3, [pc, #320]	@ (8000760 <MX_GPIO_Init+0x184>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	4b4c      	ldr	r3, [pc, #304]	@ (8000760 <MX_GPIO_Init+0x184>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a4b      	ldr	r2, [pc, #300]	@ (8000760 <MX_GPIO_Init+0x184>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b49      	ldr	r3, [pc, #292]	@ (8000760 <MX_GPIO_Init+0x184>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b45      	ldr	r3, [pc, #276]	@ (8000760 <MX_GPIO_Init+0x184>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a44      	ldr	r2, [pc, #272]	@ (8000760 <MX_GPIO_Init+0x184>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b42      	ldr	r3, [pc, #264]	@ (8000760 <MX_GPIO_Init+0x184>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8000668:	483e      	ldr	r0, [pc, #248]	@ (8000764 <MX_GPIO_Init+0x188>)
 800066a:	f002 ffd7 	bl	800361c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800066e:	2200      	movs	r2, #0
 8000670:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000674:	483c      	ldr	r0, [pc, #240]	@ (8000768 <MX_GPIO_Init+0x18c>)
 8000676:	f002 ffd1 	bl	800361c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 8000680:	483a      	ldr	r0, [pc, #232]	@ (800076c <MX_GPIO_Init+0x190>)
 8000682:	f002 ffcb 	bl	800361c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000686:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	4831      	ldr	r0, [pc, #196]	@ (8000764 <MX_GPIO_Init+0x188>)
 80006a0:	f002 fe20 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80006a4:	f24f 0306 	movw	r3, #61446	@ 0xf006
 80006a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	482a      	ldr	r0, [pc, #168]	@ (8000768 <MX_GPIO_Init+0x18c>)
 80006be:	f002 fe11 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006c8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	4823      	ldr	r0, [pc, #140]	@ (8000768 <MX_GPIO_Init+0x18c>)
 80006da:	f002 fe03 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006de:	2380      	movs	r3, #128	@ 0x80
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	481c      	ldr	r0, [pc, #112]	@ (8000764 <MX_GPIO_Init+0x188>)
 80006f2:	f002 fdf7 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 80006f6:	f44f 53d0 	mov.w	r3, #6656	@ 0x1a00
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	4817      	ldr	r0, [pc, #92]	@ (800076c <MX_GPIO_Init+0x190>)
 8000710:	f002 fde8 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000714:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	4810      	ldr	r0, [pc, #64]	@ (800076c <MX_GPIO_Init+0x190>)
 800072a:	f002 fddb 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800072e:	2328      	movs	r3, #40	@ 0x28
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	4809      	ldr	r0, [pc, #36]	@ (8000768 <MX_GPIO_Init+0x18c>)
 8000742:	f002 fdcf 	bl	80032e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	2028      	movs	r0, #40	@ 0x28
 800074c:	f002 fce5 	bl	800311a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000750:	2028      	movs	r0, #40	@ 0x28
 8000752:	f002 fcfe 	bl	8003152 <HAL_NVIC_EnableIRQ>

}
 8000756:	bf00      	nop
 8000758:	3728      	adds	r7, #40	@ 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40020800 	.word	0x40020800
 8000768:	40020400 	.word	0x40020400
 800076c:	40020000 	.word	0x40020000

08000770 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_I2C1_Init+0x50>)
 8000776:	4a13      	ldr	r2, [pc, #76]	@ (80007c4 <MX_I2C1_Init+0x54>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_I2C1_Init+0x50>)
 800077c:	4a12      	ldr	r2, [pc, #72]	@ (80007c8 <MX_I2C1_Init+0x58>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_I2C1_Init+0x50>)
 800078e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000792:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_I2C1_Init+0x50>)
 80007ae:	f002 ff73 	bl	8003698 <HAL_I2C_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b8:	f000 f8d4 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000124 	.word	0x20000124
 80007c4:	40005400 	.word	0x40005400
 80007c8:	000186a0 	.word	0x000186a0

080007cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	@ 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a19      	ldr	r2, [pc, #100]	@ (8000850 <HAL_I2C_MspInit+0x84>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d12c      	bne.n	8000848 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_I2C_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a17      	ldr	r2, [pc, #92]	@ (8000854 <HAL_I2C_MspInit+0x88>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_I2C_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800080a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800080e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000810:	2312      	movs	r3, #18
 8000812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800081c:	2304      	movs	r3, #4
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	480c      	ldr	r0, [pc, #48]	@ (8000858 <HAL_I2C_MspInit+0x8c>)
 8000828:	f002 fd5c 	bl	80032e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <HAL_I2C_MspInit+0x88>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_I2C_MspInit+0x88>)
 8000836:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800083a:	6413      	str	r3, [r2, #64]	@ 0x40
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <HAL_I2C_MspInit+0x88>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	@ 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40005400 	.word	0x40005400
 8000854:	40023800 	.word	0x40023800
 8000858:	40020400 	.word	0x40020400

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000860:	f002 faa8 	bl	8002db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000864:	f000 f816 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000868:	f7ff feb8 	bl	80005dc <MX_GPIO_Init>
  MX_TIM2_Init();
 800086c:	f000 fa30 	bl	8000cd0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000870:	f000 fc7a 	bl	8001168 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000874:	f7ff ff7c 	bl	8000770 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000878:	f000 fa76 	bl	8000d68 <MX_TIM3_Init>
  MX_TIM1_Init();
 800087c:	f000 f9a4 	bl	8000bc8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000880:	f000 faea 	bl	8000e58 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000884:	f000 fb36 	bl	8000ef4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 8000888:	f001 fa8a 	bl	8001da0 <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 800088c:	f001 fa74 	bl	8001d78 <ap_main>
 8000890:	e7fc      	b.n	800088c <main+0x30>
	...

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	@ 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	2230      	movs	r2, #48	@ 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f006 fae9 	bl	8006e7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	4b27      	ldr	r3, [pc, #156]	@ (800095c <SystemClock_Config+0xc8>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c0:	4a26      	ldr	r2, [pc, #152]	@ (800095c <SystemClock_Config+0xc8>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c8:	4b24      	ldr	r3, [pc, #144]	@ (800095c <SystemClock_Config+0xc8>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <SystemClock_Config+0xcc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a20      	ldr	r2, [pc, #128]	@ (8000960 <SystemClock_Config+0xcc>)
 80008de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <SystemClock_Config+0xcc>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000904:	2304      	movs	r3, #4
 8000906:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000908:	2364      	movs	r3, #100	@ 0x64
 800090a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090c:	2302      	movs	r3, #2
 800090e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000910:	2304      	movs	r3, #4
 8000912:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000914:	f107 0320 	add.w	r3, r7, #32
 8000918:	4618      	mov	r0, r3
 800091a:	f003 fb5b 	bl	8003fd4 <HAL_RCC_OscConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000924:	f000 f81e 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000928:	230f      	movs	r3, #15
 800092a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092c:	2302      	movs	r3, #2
 800092e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000938:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2103      	movs	r1, #3
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fdbd 	bl	80044c4 <HAL_RCC_ClockConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000950:	f000 f808 	bl	8000964 <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3750      	adds	r7, #80	@ 0x50
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40007000 	.word	0x40007000

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <Error_Handler+0x8>

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	4a0f      	ldr	r2, [pc, #60]	@ (80009bc <HAL_MspInit+0x4c>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000984:	6453      	str	r3, [r2, #68]	@ 0x44
 8000986:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	4a08      	ldr	r2, [pc, #32]	@ (80009bc <HAL_MspInit+0x4c>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <MemManage_Handler+0x4>

080009d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a16:	f002 fa1f 	bl	8002e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <TIM2_IRQHandler+0x10>)
 8000a26:	f004 fa05 	bl	8004e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200001c4 	.word	0x200001c4

08000a34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <USART2_IRQHandler+0x10>)
 8000a3a:	f005 f943 	bl	8005cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200002e4 	.word	0x200002e4

08000a48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000a4c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000a50:	f002 fdfe 	bl	8003650 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
   DHT11_EXTI_Callback();
 8000a54:	f001 fc54 	bl	8002300 <DHT11_EXTI_Callback>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e00a      	b.n	8000a84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a6e:	f3af 8000 	nop.w
 8000a72:	4601      	mov	r1, r0
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	b2ca      	uxtb	r2, r1
 8000a7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf0      	blt.n	8000a6e <_read+0x12>
  }

  return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	e009      	b.n	8000abc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	60ba      	str	r2, [r7, #8]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf1      	blt.n	8000aa8 <_write+0x12>
  }
  return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_close>:

int _close(int file)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af6:	605a      	str	r2, [r3, #4]
  return 0;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <_isatty>:

int _isatty(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f006 f9d6 	bl	8006f18 <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20020000 	.word	0x20020000
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	20000178 	.word	0x20000178
 8000ba0:	200005b0 	.word	0x200005b0

08000ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b092      	sub	sp, #72	@ 0x48
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
 8000be8:	615a      	str	r2, [r3, #20]
 8000bea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2220      	movs	r2, #32
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f006 f941 	bl	8006e7a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bf8:	4b33      	ldr	r3, [pc, #204]	@ (8000cc8 <MX_TIM1_Init+0x100>)
 8000bfa:	4a34      	ldr	r2, [pc, #208]	@ (8000ccc <MX_TIM1_Init+0x104>)
 8000bfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8000bfe:	4b32      	ldr	r3, [pc, #200]	@ (8000cc8 <MX_TIM1_Init+0x100>)
 8000c00:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b30      	ldr	r3, [pc, #192]	@ (8000cc8 <MX_TIM1_Init+0x100>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc8 <MX_TIM1_Init+0x100>)
 8000c0e:	2263      	movs	r2, #99	@ 0x63
 8000c10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c12:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc8 <MX_TIM1_Init+0x100>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c18:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc8 <MX_TIM1_Init+0x100>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc8 <MX_TIM1_Init+0x100>)
 8000c20:	2280      	movs	r2, #128	@ 0x80
 8000c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c24:	4828      	ldr	r0, [pc, #160]	@ (8000cc8 <MX_TIM1_Init+0x100>)
 8000c26:	f003 ffa1 	bl	8004b6c <HAL_TIM_PWM_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000c30:	f7ff fe98 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c3c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c40:	4619      	mov	r1, r3
 8000c42:	4821      	ldr	r0, [pc, #132]	@ (8000cc8 <MX_TIM1_Init+0x100>)
 8000c44:	f004 fe6a 	bl	800591c <HAL_TIMEx_MasterConfigSynchronization>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c4e:	f7ff fe89 	bl	8000964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c52:	2360      	movs	r3, #96	@ 0x60
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 50-1;
 8000c56:	2331      	movs	r3, #49	@ 0x31
 8000c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c72:	2200      	movs	r2, #0
 8000c74:	4619      	mov	r1, r3
 8000c76:	4814      	ldr	r0, [pc, #80]	@ (8000cc8 <MX_TIM1_Init+0x100>)
 8000c78:	f004 f9cc 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000c82:	f7ff fe6f 	bl	8000964 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4807      	ldr	r0, [pc, #28]	@ (8000cc8 <MX_TIM1_Init+0x100>)
 8000caa:	f004 fea5 	bl	80059f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000cb4:	f7ff fe56 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cb8:	4803      	ldr	r0, [pc, #12]	@ (8000cc8 <MX_TIM1_Init+0x100>)
 8000cba:	f000 f9f3 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000cbe:	bf00      	nop
 8000cc0:	3748      	adds	r7, #72	@ 0x48
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2000017c 	.word	0x2000017c
 8000ccc:	40010000 	.word	0x40010000

08000cd0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000cee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000cf6:	2263      	movs	r2, #99	@ 0x63
 8000cf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000d00:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d02:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d14:	4813      	ldr	r0, [pc, #76]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d16:	f003 fdf5 	bl	8004904 <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d20:	f7ff fe20 	bl	8000964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d32:	f004 fa31 	bl	8005198 <HAL_TIM_ConfigClockSource>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d3c:	f7ff fe12 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d4e:	f004 fde5 	bl	800591c <HAL_TIMEx_MasterConfigSynchronization>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d58:	f7ff fe04 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200001c4 	.word	0x200001c4

08000d68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08e      	sub	sp, #56	@ 0x38
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	f107 0320 	add.w	r3, r7, #32
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d98:	4b2d      	ldr	r3, [pc, #180]	@ (8000e50 <MX_TIM3_Init+0xe8>)
 8000d9a:	4a2e      	ldr	r2, [pc, #184]	@ (8000e54 <MX_TIM3_Init+0xec>)
 8000d9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e50 <MX_TIM3_Init+0xe8>)
 8000da0:	2263      	movs	r2, #99	@ 0x63
 8000da2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e50 <MX_TIM3_Init+0xe8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000daa:	4b29      	ldr	r3, [pc, #164]	@ (8000e50 <MX_TIM3_Init+0xe8>)
 8000dac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000db0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db2:	4b27      	ldr	r3, [pc, #156]	@ (8000e50 <MX_TIM3_Init+0xe8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000db8:	4b25      	ldr	r3, [pc, #148]	@ (8000e50 <MX_TIM3_Init+0xe8>)
 8000dba:	2280      	movs	r2, #128	@ 0x80
 8000dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dbe:	4824      	ldr	r0, [pc, #144]	@ (8000e50 <MX_TIM3_Init+0xe8>)
 8000dc0:	f003 fda0 	bl	8004904 <HAL_TIM_Base_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000dca:	f7ff fdcb 	bl	8000964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	481d      	ldr	r0, [pc, #116]	@ (8000e50 <MX_TIM3_Init+0xe8>)
 8000ddc:	f004 f9dc 	bl	8005198 <HAL_TIM_ConfigClockSource>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000de6:	f7ff fdbd 	bl	8000964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dea:	4819      	ldr	r0, [pc, #100]	@ (8000e50 <MX_TIM3_Init+0xe8>)
 8000dec:	f003 febe 	bl	8004b6c <HAL_TIM_PWM_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000df6:	f7ff fdb5 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	4619      	mov	r1, r3
 8000e08:	4811      	ldr	r0, [pc, #68]	@ (8000e50 <MX_TIM3_Init+0xe8>)
 8000e0a:	f004 fd87 	bl	800591c <HAL_TIMEx_MasterConfigSynchronization>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e14:	f7ff fda6 	bl	8000964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e18:	2360      	movs	r3, #96	@ 0x60
 8000e1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000e1c:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000e20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4807      	ldr	r0, [pc, #28]	@ (8000e50 <MX_TIM3_Init+0xe8>)
 8000e32:	f004 f8ef 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000e3c:	f7ff fd92 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e40:	4803      	ldr	r0, [pc, #12]	@ (8000e50 <MX_TIM3_Init+0xe8>)
 8000e42:	f000 f92f 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000e46:	bf00      	nop
 8000e48:	3738      	adds	r7, #56	@ 0x38
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000020c 	.word	0x2000020c
 8000e54:	40000400 	.word	0x40000400

08000e58 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e74:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000e76:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef0 <MX_TIM4_Init+0x98>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000e7c:	2263      	movs	r2, #99	@ 0x63
 8000e7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000e88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e94:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e9a:	4814      	ldr	r0, [pc, #80]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000e9c:	f003 fd32 	bl	8004904 <HAL_TIM_Base_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ea6:	f7ff fd5d 	bl	8000964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480d      	ldr	r0, [pc, #52]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000eb8:	f004 f96e 	bl	8005198 <HAL_TIM_ConfigClockSource>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000ec2:	f7ff fd4f 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4806      	ldr	r0, [pc, #24]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000ed4:	f004 fd22 	bl	800591c <HAL_TIMEx_MasterConfigSynchronization>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000ede:	f7ff fd41 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000254 	.word	0x20000254
 8000ef0:	40000800 	.word	0x40000800

08000ef4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	@ (8000f88 <MX_TIM5_Init+0x94>)
 8000f12:	4a1e      	ldr	r2, [pc, #120]	@ (8000f8c <MX_TIM5_Init+0x98>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <MX_TIM5_Init+0x94>)
 8000f18:	2263      	movs	r2, #99	@ 0x63
 8000f1a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <MX_TIM5_Init+0x94>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f22:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <MX_TIM5_Init+0x94>)
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <MX_TIM5_Init+0x94>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <MX_TIM5_Init+0x94>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f36:	4814      	ldr	r0, [pc, #80]	@ (8000f88 <MX_TIM5_Init+0x94>)
 8000f38:	f003 fce4 	bl	8004904 <HAL_TIM_Base_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000f42:	f7ff fd0f 	bl	8000964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	4619      	mov	r1, r3
 8000f52:	480d      	ldr	r0, [pc, #52]	@ (8000f88 <MX_TIM5_Init+0x94>)
 8000f54:	f004 f920 	bl	8005198 <HAL_TIM_ConfigClockSource>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000f5e:	f7ff fd01 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	@ (8000f88 <MX_TIM5_Init+0x94>)
 8000f70:	f004 fcd4 	bl	800591c <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000f7a:	f7ff fcf3 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000029c 	.word	0x2000029c
 8000f8c:	40000c00 	.word	0x40000c00

08000f90 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <HAL_TIM_PWM_MspInit+0x3c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10d      	bne.n	8000fbe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_TIM_PWM_MspInit+0x40>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	4a09      	ldr	r2, [pc, #36]	@ (8000fd0 <HAL_TIM_PWM_MspInit+0x40>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <HAL_TIM_PWM_MspInit+0x40>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fe4:	d116      	bne.n	8001014 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	4b2a      	ldr	r3, [pc, #168]	@ (8001094 <HAL_TIM_Base_MspInit+0xc0>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	4a29      	ldr	r2, [pc, #164]	@ (8001094 <HAL_TIM_Base_MspInit+0xc0>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff6:	4b27      	ldr	r3, [pc, #156]	@ (8001094 <HAL_TIM_Base_MspInit+0xc0>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	201c      	movs	r0, #28
 8001008:	f002 f887 	bl	800311a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800100c:	201c      	movs	r0, #28
 800100e:	f002 f8a0 	bl	8003152 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001012:	e03a      	b.n	800108a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1f      	ldr	r2, [pc, #124]	@ (8001098 <HAL_TIM_Base_MspInit+0xc4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d10e      	bne.n	800103c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <HAL_TIM_Base_MspInit+0xc0>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	4a1b      	ldr	r2, [pc, #108]	@ (8001094 <HAL_TIM_Base_MspInit+0xc0>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6413      	str	r3, [r2, #64]	@ 0x40
 800102e:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <HAL_TIM_Base_MspInit+0xc0>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
}
 800103a:	e026      	b.n	800108a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a16      	ldr	r2, [pc, #88]	@ (800109c <HAL_TIM_Base_MspInit+0xc8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10e      	bne.n	8001064 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <HAL_TIM_Base_MspInit+0xc0>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	4a11      	ldr	r2, [pc, #68]	@ (8001094 <HAL_TIM_Base_MspInit+0xc0>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6413      	str	r3, [r2, #64]	@ 0x40
 8001056:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <HAL_TIM_Base_MspInit+0xc0>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
}
 8001062:	e012      	b.n	800108a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0d      	ldr	r2, [pc, #52]	@ (80010a0 <HAL_TIM_Base_MspInit+0xcc>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d10d      	bne.n	800108a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <HAL_TIM_Base_MspInit+0xc0>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	4a07      	ldr	r2, [pc, #28]	@ (8001094 <HAL_TIM_Base_MspInit+0xc0>)
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	6413      	str	r3, [r2, #64]	@ 0x40
 800107e:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <HAL_TIM_Base_MspInit+0xc0>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40000400 	.word	0x40000400
 800109c:	40000800 	.word	0x40000800
 80010a0:	40000c00 	.word	0x40000c00

080010a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	@ 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a24      	ldr	r2, [pc, #144]	@ (8001154 <HAL_TIM_MspPostInit+0xb0>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d11f      	bne.n	8001106 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b23      	ldr	r3, [pc, #140]	@ (8001158 <HAL_TIM_MspPostInit+0xb4>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a22      	ldr	r2, [pc, #136]	@ (8001158 <HAL_TIM_MspPostInit+0xb4>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <HAL_TIM_MspPostInit+0xb4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4817      	ldr	r0, [pc, #92]	@ (800115c <HAL_TIM_MspPostInit+0xb8>)
 8001100:	f002 f8f0 	bl	80032e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001104:	e022      	b.n	800114c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a15      	ldr	r2, [pc, #84]	@ (8001160 <HAL_TIM_MspPostInit+0xbc>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d11d      	bne.n	800114c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <HAL_TIM_MspPostInit+0xb4>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001118:	4a0f      	ldr	r2, [pc, #60]	@ (8001158 <HAL_TIM_MspPostInit+0xb4>)
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001120:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <HAL_TIM_MspPostInit+0xb4>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800112c:	2310      	movs	r3, #16
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800113c:	2302      	movs	r3, #2
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4807      	ldr	r0, [pc, #28]	@ (8001164 <HAL_TIM_MspPostInit+0xc0>)
 8001148:	f002 f8cc 	bl	80032e4 <HAL_GPIO_Init>
}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	@ 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40010000 	.word	0x40010000
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000
 8001160:	40000400 	.word	0x40000400
 8001164:	40020400 	.word	0x40020400

08001168 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 800116e:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <MX_USART2_UART_Init+0x50>)
 8001170:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 80011a0:	f004 fc90 	bl	8005ac4 <HAL_UART_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011aa:	f7ff fbdb 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200002e4 	.word	0x200002e4
 80011b8:	40004400 	.word	0x40004400

080011bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	@ 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001250 <HAL_UART_MspInit+0x94>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d133      	bne.n	8001246 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <HAL_UART_MspInit+0x98>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001254 <HAL_UART_MspInit+0x98>)
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ee:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <HAL_UART_MspInit+0x98>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <HAL_UART_MspInit+0x98>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <HAL_UART_MspInit+0x98>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_UART_MspInit+0x98>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001216:	230c      	movs	r3, #12
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001226:	2307      	movs	r3, #7
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	4809      	ldr	r0, [pc, #36]	@ (8001258 <HAL_UART_MspInit+0x9c>)
 8001232:	f002 f857 	bl	80032e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2026      	movs	r0, #38	@ 0x26
 800123c:	f001 ff6d 	bl	800311a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001240:	2026      	movs	r0, #38	@ 0x26
 8001242:	f001 ff86 	bl	8003152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	@ 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40004400 	.word	0x40004400
 8001254:	40023800 	.word	0x40023800
 8001258:	40020000 	.word	0x40020000

0800125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001294 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001260:	f7ff fca0 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	@ (8001298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	@ (800129c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	@ (80012a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128a:	f005 fe4b 	bl	8006f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff fae5 	bl	800085c <main>
  bx  lr    
 8001292:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001294:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80012a0:	08007ff8 	.word	0x08007ff8
  ldr r2, =_sbss
 80012a4:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80012a8:	200005b0 	.word	0x200005b0

080012ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC_IRQHandler>
	...

080012b0 <Controller_Excute>:
static uint8_t Controller_CheckEnvironmentStatus(void);

extern time_TypeDef time_feed_period;

void Controller_Excute()
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
    // 전체 FSM 동작
   Control_TOP_FSM();
 80012b4:	f000 f976 	bl	80015a4 <Control_TOP_FSM>
    // flag 업데이트
   controlFlag.feedEmptyFlag = (Controller_CheckFeedRemainAlarm() == 1);
 80012b8:	f000 f87c 	bl	80013b4 <Controller_CheckFeedRemainAlarm>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b01      	cmp	r3, #1
 80012c0:	bf0c      	ite	eq
 80012c2:	2301      	moveq	r3, #1
 80012c4:	2300      	movne	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <Controller_Excute+0x44>)
 80012cc:	701a      	strb	r2, [r3, #0]
   controlFlag.feedEnvironmentFlag = (Controller_CheckEnvironmentStatus() == 1);
 80012ce:	f000 f887 	bl	80013e0 <Controller_CheckEnvironmentStatus>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	bf0c      	ite	eq
 80012d8:	2301      	moveq	r3, #1
 80012da:	2300      	movne	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <Controller_Excute+0x44>)
 80012e2:	705a      	strb	r2, [r3, #1]
   // feed_remain 업데이트
   controlDataOut.feed_remain = MAX_HEIGHT - controlData.US_dist;
 80012e4:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <Controller_Excute+0x48>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f1c3 030f 	rsb	r3, r3, #15
 80012ec:	4a03      	ldr	r2, [pc, #12]	@ (80012fc <Controller_Excute+0x4c>)
 80012ee:	6093      	str	r3, [r2, #8]
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000034c 	.word	0x2000034c
 80012f8:	2000032c 	.word	0x2000032c
 80012fc:	20000340 	.word	0x20000340

08001300 <Controller_SetInputData>:




void Controller_SetInputData(inputData_TypeDef inputData)
{
 8001300:	b084      	sub	sp, #16
 8001302:	b490      	push	{r4, r7}
 8001304:	af00      	add	r7, sp, #0
 8001306:	f107 0408 	add.w	r4, r7, #8
 800130a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   // 사용자 입력 데이터 (배급 주기,양)
       if (inputData.id == MODE || inputData.id == DATA_UP || inputData.id == DATA_DOWN)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d005      	beq.n	8001320 <Controller_SetInputData+0x20>
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d002      	beq.n	8001320 <Controller_SetInputData+0x20>
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2b03      	cmp	r3, #3
 800131e:	d106      	bne.n	800132e <Controller_SetInputData+0x2e>
       {
           controlData.id = inputData.id;
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <Controller_SetInputData+0x88>)
 8001324:	6013      	str	r3, [r2, #0]
           controlData.input_act = inputData.input_act;
 8001326:	7b3a      	ldrb	r2, [r7, #12]
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <Controller_SetInputData+0x88>)
 800132a:	711a      	strb	r2, [r3, #4]
      else if (inputData.id == HUMID) {
         controlData.humid = inputData.humid;
      }
   
   
}
 800132c:	e027      	b.n	800137e <Controller_SetInputData+0x7e>
       else if (inputData.id == INPUT_DONE)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	2b04      	cmp	r3, #4
 8001332:	d106      	bne.n	8001342 <Controller_SetInputData+0x42>
           controlData.id = INPUT_DONE;
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <Controller_SetInputData+0x88>)
 8001336:	2204      	movs	r2, #4
 8001338:	601a      	str	r2, [r3, #0]
           controlData.input_act = inputData.input_act;
 800133a:	7b3a      	ldrb	r2, [r7, #12]
 800133c:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <Controller_SetInputData+0x88>)
 800133e:	711a      	strb	r2, [r3, #4]
}
 8001340:	e01d      	b.n	800137e <Controller_SetInputData+0x7e>
      else if (inputData.id == INPUT_DONE)
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2b04      	cmp	r3, #4
 8001346:	d106      	bne.n	8001356 <Controller_SetInputData+0x56>
           controlData.id = INPUT_DONE;
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <Controller_SetInputData+0x88>)
 800134a:	2204      	movs	r2, #4
 800134c:	601a      	str	r2, [r3, #0]
           controlData.input_act = inputData.input_act;
 800134e:	7b3a      	ldrb	r2, [r7, #12]
 8001350:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <Controller_SetInputData+0x88>)
 8001352:	711a      	strb	r2, [r3, #4]
}
 8001354:	e013      	b.n	800137e <Controller_SetInputData+0x7e>
      else if (inputData.id == US_DIST) {
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	2b05      	cmp	r3, #5
 800135a:	d103      	bne.n	8001364 <Controller_SetInputData+0x64>
            controlData.US_dist = inputData.US_dist;
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <Controller_SetInputData+0x88>)
 8001360:	6093      	str	r3, [r2, #8]
}
 8001362:	e00c      	b.n	800137e <Controller_SetInputData+0x7e>
      else if (inputData.id == TEMP) {
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b06      	cmp	r3, #6
 8001368:	d103      	bne.n	8001372 <Controller_SetInputData+0x72>
         controlData.temp = inputData.temp;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	4a06      	ldr	r2, [pc, #24]	@ (8001388 <Controller_SetInputData+0x88>)
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	e005      	b.n	800137e <Controller_SetInputData+0x7e>
      else if (inputData.id == HUMID) {
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	2b07      	cmp	r3, #7
 8001376:	d102      	bne.n	800137e <Controller_SetInputData+0x7e>
         controlData.humid = inputData.humid;
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	4a03      	ldr	r2, [pc, #12]	@ (8001388 <Controller_SetInputData+0x88>)
 800137c:	6113      	str	r3, [r2, #16]
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	bc90      	pop	{r4, r7}
 8001384:	b004      	add	sp, #16
 8001386:	4770      	bx	lr
 8001388:	2000032c 	.word	0x2000032c

0800138c <Controller_UpdateFeedTimer>:


// 사용자 입력값 적용함수
// feed_period 주기에 따라 배급하도록 타이머 주기 설정 함수
void Controller_UpdateFeedTimer(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
    if (controlDataOut.feed_period > 0) {
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <Controller_UpdateFeedTimer+0x20>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <Controller_UpdateFeedTimer+0x16>
        time_feed_period.min = controlDataOut.feed_period;
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <Controller_UpdateFeedTimer+0x20>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	b29a      	uxth	r2, r3
 800139e:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <Controller_UpdateFeedTimer+0x24>)
 80013a0:	801a      	strh	r2, [r3, #0]
    }
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	20000340 	.word	0x20000340
 80013b0:	200003d8 	.word	0x200003d8

080013b4 <Controller_CheckFeedRemainAlarm>:
}

// 환경값에 따라 경보 울리는 함수 
// feed_remain 값에 따라 남아있는 값이 적으면 경보 울리는 신호 데이터 발생 함수
uint8_t Controller_CheckFeedRemainAlarm(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
    const uint32_t THRESHOLD = 3; // 예시
 80013ba:	2303      	movs	r3, #3
 80013bc:	607b      	str	r3, [r7, #4]
    return (controlDataOut.feed_remain < THRESHOLD) ? 1 : 0;
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <Controller_CheckFeedRemainAlarm+0x28>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	bf8c      	ite	hi
 80013c8:	2301      	movhi	r3, #1
 80013ca:	2300      	movls	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000340 	.word	0x20000340

080013e0 <Controller_CheckEnvironmentStatus>:

uint8_t Controller_CheckEnvironmentStatus(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
    const uint32_t TEMP_MAX = 3500;
 80013e6:	f640 53ac 	movw	r3, #3500	@ 0xdac
 80013ea:	607b      	str	r3, [r7, #4]
    const uint32_t HUMID_MAX = 8000;
 80013ec:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80013f0:	603b      	str	r3, [r7, #0]
    return ((controlData.temp > TEMP_MAX) || (controlData.humid > HUMID_MAX)) ? 1 : 0;
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <Controller_CheckEnvironmentStatus+0x3c>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d304      	bcc.n	8001406 <Controller_CheckEnvironmentStatus+0x26>
 80013fc:	4b07      	ldr	r3, [pc, #28]	@ (800141c <Controller_CheckEnvironmentStatus+0x3c>)
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d201      	bcs.n	800140a <Controller_CheckEnvironmentStatus+0x2a>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <Controller_CheckEnvironmentStatus+0x2c>
 800140a:	2300      	movs	r3, #0
 800140c:	b2db      	uxtb	r3, r3
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	2000032c 	.word	0x2000032c

08001420 <Control_Input_FSM>:



void Control_Input_FSM()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
   switch (input_state)
 8001424:	4b5c      	ldr	r3, [pc, #368]	@ (8001598 <Control_Input_FSM+0x178>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b05      	cmp	r3, #5
 800142a:	f200 80b2 	bhi.w	8001592 <Control_Input_FSM+0x172>
 800142e:	a201      	add	r2, pc, #4	@ (adr r2, 8001434 <Control_Input_FSM+0x14>)
 8001430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001434:	0800144d 	.word	0x0800144d
 8001438:	080014ad 	.word	0x080014ad
 800143c:	080014cb 	.word	0x080014cb
 8001440:	080014e9 	.word	0x080014e9
 8001444:	08001551 	.word	0x08001551
 8001448:	0800156f 	.word	0x0800156f
   {
   case PERIOD_IDLE:
      if (controlData.id == MODE && controlData.input_act == 1)
 800144c:	4b53      	ldr	r3, [pc, #332]	@ (800159c <Control_Input_FSM+0x17c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d10c      	bne.n	800146e <Control_Input_FSM+0x4e>
 8001454:	4b51      	ldr	r3, [pc, #324]	@ (800159c <Control_Input_FSM+0x17c>)
 8001456:	791b      	ldrb	r3, [r3, #4]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d108      	bne.n	800146e <Control_Input_FSM+0x4e>
      {
         input_state = AMOUNT_IDLE;
 800145c:	4b4e      	ldr	r3, [pc, #312]	@ (8001598 <Control_Input_FSM+0x178>)
 800145e:	2203      	movs	r2, #3
 8001460:	701a      	strb	r2, [r3, #0]
         Sound_PowerOn();
 8001462:	f000 fe3d 	bl	80020e0 <Sound_PowerOn>
         controlData.input_act = 0;
 8001466:	4b4d      	ldr	r3, [pc, #308]	@ (800159c <Control_Input_FSM+0x17c>)
 8001468:	2200      	movs	r2, #0
 800146a:	711a      	strb	r2, [r3, #4]
 800146c:	e01d      	b.n	80014aa <Control_Input_FSM+0x8a>
      }
      else if (controlData.id == DATA_UP && controlData.input_act == 1)
 800146e:	4b4b      	ldr	r3, [pc, #300]	@ (800159c <Control_Input_FSM+0x17c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d10a      	bne.n	800148c <Control_Input_FSM+0x6c>
 8001476:	4b49      	ldr	r3, [pc, #292]	@ (800159c <Control_Input_FSM+0x17c>)
 8001478:	791b      	ldrb	r3, [r3, #4]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d106      	bne.n	800148c <Control_Input_FSM+0x6c>
      {
         input_state = PERIOD_UP;
 800147e:	4b46      	ldr	r3, [pc, #280]	@ (8001598 <Control_Input_FSM+0x178>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
         controlData.input_act =0;
 8001484:	4b45      	ldr	r3, [pc, #276]	@ (800159c <Control_Input_FSM+0x17c>)
 8001486:	2200      	movs	r2, #0
 8001488:	711a      	strb	r2, [r3, #4]
 800148a:	e00e      	b.n	80014aa <Control_Input_FSM+0x8a>
      }
      else if (controlData.id == DATA_DOWN && controlData.input_act == 1)
 800148c:	4b43      	ldr	r3, [pc, #268]	@ (800159c <Control_Input_FSM+0x17c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d17b      	bne.n	800158c <Control_Input_FSM+0x16c>
 8001494:	4b41      	ldr	r3, [pc, #260]	@ (800159c <Control_Input_FSM+0x17c>)
 8001496:	791b      	ldrb	r3, [r3, #4]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d177      	bne.n	800158c <Control_Input_FSM+0x16c>
      {
         input_state = PERIOD_DOWN;
 800149c:	4b3e      	ldr	r3, [pc, #248]	@ (8001598 <Control_Input_FSM+0x178>)
 800149e:	2202      	movs	r2, #2
 80014a0:	701a      	strb	r2, [r3, #0]
         controlData.input_act =0;
 80014a2:	4b3e      	ldr	r3, [pc, #248]	@ (800159c <Control_Input_FSM+0x17c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	711a      	strb	r2, [r3, #4]
      }

      break;
 80014a8:	e070      	b.n	800158c <Control_Input_FSM+0x16c>
 80014aa:	e06f      	b.n	800158c <Control_Input_FSM+0x16c>

   case PERIOD_UP:
      if (controlDataOut.feed_period <= 10)
 80014ac:	4b3c      	ldr	r3, [pc, #240]	@ (80015a0 <Control_Input_FSM+0x180>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b0a      	cmp	r3, #10
 80014b2:	d804      	bhi.n	80014be <Control_Input_FSM+0x9e>
      {
         controlDataOut.feed_period++;
 80014b4:	4b3a      	ldr	r3, [pc, #232]	@ (80015a0 <Control_Input_FSM+0x180>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3301      	adds	r3, #1
 80014ba:	4a39      	ldr	r2, [pc, #228]	@ (80015a0 <Control_Input_FSM+0x180>)
 80014bc:	6013      	str	r3, [r2, #0]
      }
      Sound_PowerOn();
 80014be:	f000 fe0f 	bl	80020e0 <Sound_PowerOn>
      input_state =  PERIOD_IDLE;
 80014c2:	4b35      	ldr	r3, [pc, #212]	@ (8001598 <Control_Input_FSM+0x178>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
      break;
 80014c8:	e063      	b.n	8001592 <Control_Input_FSM+0x172>

   case PERIOD_DOWN:
      if (controlDataOut.feed_period != 0)
 80014ca:	4b35      	ldr	r3, [pc, #212]	@ (80015a0 <Control_Input_FSM+0x180>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d004      	beq.n	80014dc <Control_Input_FSM+0xbc>
      {
         controlDataOut.feed_period--;
 80014d2:	4b33      	ldr	r3, [pc, #204]	@ (80015a0 <Control_Input_FSM+0x180>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	4a31      	ldr	r2, [pc, #196]	@ (80015a0 <Control_Input_FSM+0x180>)
 80014da:	6013      	str	r3, [r2, #0]
      }
      Sound_PowerOn();
 80014dc:	f000 fe00 	bl	80020e0 <Sound_PowerOn>
      input_state = PERIOD_IDLE;
 80014e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001598 <Control_Input_FSM+0x178>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
      break;
 80014e6:	e054      	b.n	8001592 <Control_Input_FSM+0x172>

   case AMOUNT_IDLE:
      if (controlData.id == MODE && controlData.input_act == 1)
 80014e8:	4b2c      	ldr	r3, [pc, #176]	@ (800159c <Control_Input_FSM+0x17c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d10c      	bne.n	800150a <Control_Input_FSM+0xea>
 80014f0:	4b2a      	ldr	r3, [pc, #168]	@ (800159c <Control_Input_FSM+0x17c>)
 80014f2:	791b      	ldrb	r3, [r3, #4]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d108      	bne.n	800150a <Control_Input_FSM+0xea>
         {
            input_state = PERIOD_IDLE;
 80014f8:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <Control_Input_FSM+0x178>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
            Sound_PowerOn();
 80014fe:	f000 fdef 	bl	80020e0 <Sound_PowerOn>
            controlData.input_act = 0;
 8001502:	4b26      	ldr	r3, [pc, #152]	@ (800159c <Control_Input_FSM+0x17c>)
 8001504:	2200      	movs	r2, #0
 8001506:	711a      	strb	r2, [r3, #4]
 8001508:	e021      	b.n	800154e <Control_Input_FSM+0x12e>
         }
         else if (controlData.id == DATA_UP && controlData.input_act == 1)
 800150a:	4b24      	ldr	r3, [pc, #144]	@ (800159c <Control_Input_FSM+0x17c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d10c      	bne.n	800152c <Control_Input_FSM+0x10c>
 8001512:	4b22      	ldr	r3, [pc, #136]	@ (800159c <Control_Input_FSM+0x17c>)
 8001514:	791b      	ldrb	r3, [r3, #4]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d108      	bne.n	800152c <Control_Input_FSM+0x10c>
         {
            input_state = AMOUNT_UP;
 800151a:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <Control_Input_FSM+0x178>)
 800151c:	2204      	movs	r2, #4
 800151e:	701a      	strb	r2, [r3, #0]
            Sound_PowerOn();
 8001520:	f000 fdde 	bl	80020e0 <Sound_PowerOn>
            controlData.input_act =0;
 8001524:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <Control_Input_FSM+0x17c>)
 8001526:	2200      	movs	r2, #0
 8001528:	711a      	strb	r2, [r3, #4]
 800152a:	e010      	b.n	800154e <Control_Input_FSM+0x12e>
         }
         else if (controlData.id == DATA_DOWN && controlData.input_act == 1)
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <Control_Input_FSM+0x17c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d12d      	bne.n	8001590 <Control_Input_FSM+0x170>
 8001534:	4b19      	ldr	r3, [pc, #100]	@ (800159c <Control_Input_FSM+0x17c>)
 8001536:	791b      	ldrb	r3, [r3, #4]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d129      	bne.n	8001590 <Control_Input_FSM+0x170>
         {
            input_state = AMOUNT_DOWN;
 800153c:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <Control_Input_FSM+0x178>)
 800153e:	2205      	movs	r2, #5
 8001540:	701a      	strb	r2, [r3, #0]
            Sound_PowerOn();
 8001542:	f000 fdcd 	bl	80020e0 <Sound_PowerOn>
            controlData.input_act =0;
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <Control_Input_FSM+0x17c>)
 8001548:	2200      	movs	r2, #0
 800154a:	711a      	strb	r2, [r3, #4]
         }

      break;
 800154c:	e020      	b.n	8001590 <Control_Input_FSM+0x170>
 800154e:	e01f      	b.n	8001590 <Control_Input_FSM+0x170>

   case AMOUNT_UP:
      if (controlDataOut.feed_amount <=5)
 8001550:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <Control_Input_FSM+0x180>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b05      	cmp	r3, #5
 8001556:	d804      	bhi.n	8001562 <Control_Input_FSM+0x142>
      {
         controlDataOut.feed_amount++;
 8001558:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <Control_Input_FSM+0x180>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	3301      	adds	r3, #1
 800155e:	4a10      	ldr	r2, [pc, #64]	@ (80015a0 <Control_Input_FSM+0x180>)
 8001560:	6053      	str	r3, [r2, #4]
      }
      Sound_PowerOn();
 8001562:	f000 fdbd 	bl	80020e0 <Sound_PowerOn>
       input_state = AMOUNT_IDLE;
 8001566:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <Control_Input_FSM+0x178>)
 8001568:	2203      	movs	r2, #3
 800156a:	701a      	strb	r2, [r3, #0]
       break;
 800156c:	e011      	b.n	8001592 <Control_Input_FSM+0x172>

   case AMOUNT_DOWN:
       if (controlDataOut.feed_amount != 0)
 800156e:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <Control_Input_FSM+0x180>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d004      	beq.n	8001580 <Control_Input_FSM+0x160>
      {
         controlDataOut.feed_amount--;
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <Control_Input_FSM+0x180>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <Control_Input_FSM+0x180>)
 800157e:	6053      	str	r3, [r2, #4]
      }
       Sound_PowerOn();
 8001580:	f000 fdae 	bl	80020e0 <Sound_PowerOn>
       input_state = AMOUNT_IDLE;
 8001584:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <Control_Input_FSM+0x178>)
 8001586:	2203      	movs	r2, #3
 8001588:	701a      	strb	r2, [r3, #0]
       break;
 800158a:	e002      	b.n	8001592 <Control_Input_FSM+0x172>
      break;
 800158c:	bf00      	nop
 800158e:	e000      	b.n	8001592 <Control_Input_FSM+0x172>
      break;
 8001590:	bf00      	nop


   }
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000350 	.word	0x20000350
 800159c:	2000032c 	.word	0x2000032c
 80015a0:	20000340 	.word	0x20000340

080015a4 <Control_TOP_FSM>:




void Control_TOP_FSM()
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
   switch (fsm_state)
 80015a8:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <Control_TOP_FSM+0x90>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d034      	beq.n	800161a <Control_TOP_FSM+0x76>
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	dc3d      	bgt.n	8001630 <Control_TOP_FSM+0x8c>
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <Control_TOP_FSM+0x1a>
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d016      	beq.n	80015ea <Control_TOP_FSM+0x46>
          }
          break;

   }

}
 80015bc:	e038      	b.n	8001630 <Control_TOP_FSM+0x8c>
          if (controlData.input_act == 1 && controlData.id == INPUT_DONE) {
 80015be:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <Control_TOP_FSM+0x94>)
 80015c0:	791b      	ldrb	r3, [r3, #4]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d10e      	bne.n	80015e4 <Control_TOP_FSM+0x40>
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <Control_TOP_FSM+0x94>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d10a      	bne.n	80015e4 <Control_TOP_FSM+0x40>
              fsm_state = WAIT_MODE;
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <Control_TOP_FSM+0x90>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
              Sound_ModeStart();
 80015d4:	f000 fd93 	bl	80020fe <Sound_ModeStart>
            Controller_UpdateFeedTimer();
 80015d8:	f7ff fed8 	bl	800138c <Controller_UpdateFeedTimer>
              controlData.input_act = 0;
 80015dc:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <Control_TOP_FSM+0x94>)
 80015de:	2200      	movs	r2, #0
 80015e0:	711a      	strb	r2, [r3, #4]
       break;
 80015e2:	e025      	b.n	8001630 <Control_TOP_FSM+0x8c>
              Control_Input_FSM(); // 항상 입력 FSM은 동작
 80015e4:	f7ff ff1c 	bl	8001420 <Control_Input_FSM>
       break;
 80015e8:	e022      	b.n	8001630 <Control_TOP_FSM+0x8c>
          if (controlFlag.feedtimeoutFlag == 1) {
 80015ea:	4b14      	ldr	r3, [pc, #80]	@ (800163c <Control_TOP_FSM+0x98>)
 80015ec:	789b      	ldrb	r3, [r3, #2]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d104      	bne.n	80015fc <Control_TOP_FSM+0x58>
              fsm_state = FEED_MODE;
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <Control_TOP_FSM+0x90>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	701a      	strb	r2, [r3, #0]
              Sound_ModeStart();
 80015f8:	f000 fd81 	bl	80020fe <Sound_ModeStart>
         if (controlData.input_act == 1 && controlData.id == INPUT_DONE) {
 80015fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <Control_TOP_FSM+0x94>)
 80015fe:	791b      	ldrb	r3, [r3, #4]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d112      	bne.n	800162a <Control_TOP_FSM+0x86>
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <Control_TOP_FSM+0x94>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b04      	cmp	r3, #4
 800160a:	d10e      	bne.n	800162a <Control_TOP_FSM+0x86>
              fsm_state = INPUT_MODE;
 800160c:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <Control_TOP_FSM+0x90>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
              controlData.input_act = 0;
 8001612:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <Control_TOP_FSM+0x94>)
 8001614:	2200      	movs	r2, #0
 8001616:	711a      	strb	r2, [r3, #4]
       break;
 8001618:	e007      	b.n	800162a <Control_TOP_FSM+0x86>
          if (controlFlag.feedtimeoutFlag == 0) {
 800161a:	4b08      	ldr	r3, [pc, #32]	@ (800163c <Control_TOP_FSM+0x98>)
 800161c:	789b      	ldrb	r3, [r3, #2]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d105      	bne.n	800162e <Control_TOP_FSM+0x8a>
              fsm_state = WAIT_MODE;
 8001622:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <Control_TOP_FSM+0x90>)
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
          break;
 8001628:	e001      	b.n	800162e <Control_TOP_FSM+0x8a>
       break;
 800162a:	bf00      	nop
 800162c:	e000      	b.n	8001630 <Control_TOP_FSM+0x8c>
          break;
 800162e:	bf00      	nop
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	2000034f 	.word	0x2000034f
 8001638:	2000032c 	.word	0x2000032c
 800163c:	2000034c 	.word	0x2000034c

08001640 <SetFeedTimeOutFlag>:

void SetFeedTimeOutFlag(uint8_t flag) // remain_time.c에서 호출
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
    controlFlag.feedtimeoutFlag = flag;
 800164a:	4a04      	ldr	r2, [pc, #16]	@ (800165c <SetFeedTimeOutFlag+0x1c>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	7093      	strb	r3, [r2, #2]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	2000034c 	.word	0x2000034c

08001660 <Controller_GetOutput>:
        default: return "UNKNOWN";
    }
}


outputData_TypeDef* Controller_GetOutput(void) {
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
    return &controlDataOut;
 8001664:	4b02      	ldr	r3, [pc, #8]	@ (8001670 <Controller_GetOutput+0x10>)
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	20000340 	.word	0x20000340

08001674 <Controller_GetFlags>:


ControlFlag_TypeDef* Controller_GetFlags(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
    return &controlFlag;
 8001678:	4b02      	ldr	r3, [pc, #8]	@ (8001684 <Controller_GetFlags+0x10>)
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	2000034c 	.word	0x2000034c

08001688 <Read_Temp>:


uint32_t Read_Temp()
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
   return controlData.temp;
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <Read_Temp+0x14>)
 800168e:	68db      	ldr	r3, [r3, #12]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	2000032c 	.word	0x2000032c

080016a0 <Read_Humid>:

uint32_t Read_Humid()
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
   return controlData.humid;
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <Read_Humid+0x14>)
 80016a6:	691b      	ldr	r3, [r3, #16]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	2000032c 	.word	0x2000032c

080016b8 <Listener_Init>:
static Que_TypeDef uartRxQue;



void Listener_Init()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	Button_Init(&hBtnMode, GPIOB, GPIO_PIN_5);
 80016bc:	2220      	movs	r2, #32
 80016be:	4913      	ldr	r1, [pc, #76]	@ (800170c <Listener_Init+0x54>)
 80016c0:	4813      	ldr	r0, [pc, #76]	@ (8001710 <Listener_Init+0x58>)
 80016c2:	f000 fd36 	bl	8002132 <Button_Init>
	Button_Init(&hBtnUp, GPIOB, GPIO_PIN_3);
 80016c6:	2208      	movs	r2, #8
 80016c8:	4910      	ldr	r1, [pc, #64]	@ (800170c <Listener_Init+0x54>)
 80016ca:	4812      	ldr	r0, [pc, #72]	@ (8001714 <Listener_Init+0x5c>)
 80016cc:	f000 fd31 	bl	8002132 <Button_Init>
	Button_Init(&hBtnDown, GPIOA, GPIO_PIN_10);
 80016d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016d4:	4910      	ldr	r1, [pc, #64]	@ (8001718 <Listener_Init+0x60>)
 80016d6:	4811      	ldr	r0, [pc, #68]	@ (800171c <Listener_Init+0x64>)
 80016d8:	f000 fd2b 	bl	8002132 <Button_Init>
	Button_Init(&hBtnInputDone, GPIOC, GPIO_PIN_13);
 80016dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016e0:	490f      	ldr	r1, [pc, #60]	@ (8001720 <Listener_Init+0x68>)
 80016e2:	4810      	ldr	r0, [pc, #64]	@ (8001724 <Listener_Init+0x6c>)
 80016e4:	f000 fd25 	bl	8002132 <Button_Init>
	UltraSonic_Init (GPIOA, GPIO_PIN_9, GPIOC, GPIO_PIN_7);
 80016e8:	2380      	movs	r3, #128	@ 0x80
 80016ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <Listener_Init+0x68>)
 80016ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016f0:	4809      	ldr	r0, [pc, #36]	@ (8001718 <Listener_Init+0x60>)
 80016f2:	f001 fad7 	bl	8002ca4 <UltraSonic_Init>

	Que_Init(&uartRxQue);
 80016f6:	480c      	ldr	r0, [pc, #48]	@ (8001728 <Listener_Init+0x70>)
 80016f8:	f000 fb66 	bl	8001dc8 <Que_Init>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
 80016fc:	2201      	movs	r2, #1
 80016fe:	490b      	ldr	r1, [pc, #44]	@ (800172c <Listener_Init+0x74>)
 8001700:	480b      	ldr	r0, [pc, #44]	@ (8001730 <Listener_Init+0x78>)
 8001702:	f004 faba 	bl	8005c7a <HAL_UART_Receive_IT>
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40020400 	.word	0x40020400
 8001710:	200003f0 	.word	0x200003f0
 8001714:	200003fc 	.word	0x200003fc
 8001718:	40020000 	.word	0x40020000
 800171c:	20000408 	.word	0x20000408
 8001720:	40020800 	.word	0x40020800
 8001724:	20000414 	.word	0x20000414
 8001728:	20000354 	.word	0x20000354
 800172c:	20000351 	.word	0x20000351
 8001730:	200002e4 	.word	0x200002e4

08001734 <Listener_Excute>:

void Listener_tempData();

void Listener_Excute()
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	Listener_CheckButton();
 8001738:	f000 f806 	bl	8001748 <Listener_CheckButton>
	Listener_CheckUart();
 800173c:	f000 f866 	bl	800180c <Listener_CheckUart>
	Listener_tempData();
 8001740:	f000 f8c0 	bl	80018c4 <Listener_tempData>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <Listener_CheckButton>:

void Listener_CheckButton()
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af02      	add	r7, sp, #8
	inputData_TypeDef inputData;
	static uint32_t prevChkBtnTime = 0;
	uint32_t curTick = HAL_GetTick();
 800174e:	f001 fb97 	bl	8002e80 <HAL_GetTick>
 8001752:	6178      	str	r0, [r7, #20]
	if (curTick - prevChkBtnTime < 100) {
 8001754:	4b28      	ldr	r3, [pc, #160]	@ (80017f8 <Listener_CheckButton+0xb0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b63      	cmp	r3, #99	@ 0x63
 800175e:	d946      	bls.n	80017ee <Listener_CheckButton+0xa6>
		return;
	}
	prevChkBtnTime = curTick;
 8001760:	4a25      	ldr	r2, [pc, #148]	@ (80017f8 <Listener_CheckButton+0xb0>)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	6013      	str	r3, [r2, #0]

	if (Button_GetState(&hBtnMode) == ACT_RELEASED) {
 8001766:	4825      	ldr	r0, [pc, #148]	@ (80017fc <Listener_CheckButton+0xb4>)
 8001768:	f000 fcf9 	bl	800215e <Button_GetState>
 800176c:	4603      	mov	r3, r0
 800176e:	2b02      	cmp	r3, #2
 8001770:	d10a      	bne.n	8001788 <Listener_CheckButton+0x40>
		inputData.id = MODE;
 8001772:	2301      	movs	r3, #1
 8001774:	603b      	str	r3, [r7, #0]
		inputData.input_act = 1;
 8001776:	2301      	movs	r3, #1
 8001778:	713b      	strb	r3, [r7, #4]
		Controller_SetInputData(inputData);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	463b      	mov	r3, r7
 8001780:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001782:	f7ff fdbd 	bl	8001300 <Controller_SetInputData>
 8001786:	e033      	b.n	80017f0 <Listener_CheckButton+0xa8>
	}
	else if (Button_GetState(&hBtnUp) == ACT_PUSHED) {
 8001788:	481d      	ldr	r0, [pc, #116]	@ (8001800 <Listener_CheckButton+0xb8>)
 800178a:	f000 fce8 	bl	800215e <Button_GetState>
 800178e:	4603      	mov	r3, r0
 8001790:	2b01      	cmp	r3, #1
 8001792:	d10a      	bne.n	80017aa <Listener_CheckButton+0x62>
		inputData.id = DATA_UP;
 8001794:	2302      	movs	r3, #2
 8001796:	603b      	str	r3, [r7, #0]
		inputData.input_act = 1;
 8001798:	2301      	movs	r3, #1
 800179a:	713b      	strb	r3, [r7, #4]
		Controller_SetInputData(inputData);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	463b      	mov	r3, r7
 80017a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a4:	f7ff fdac 	bl	8001300 <Controller_SetInputData>
 80017a8:	e022      	b.n	80017f0 <Listener_CheckButton+0xa8>
	}
	else if (Button_GetState(&hBtnDown) == ACT_PUSHED) {
 80017aa:	4816      	ldr	r0, [pc, #88]	@ (8001804 <Listener_CheckButton+0xbc>)
 80017ac:	f000 fcd7 	bl	800215e <Button_GetState>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d10a      	bne.n	80017cc <Listener_CheckButton+0x84>
		inputData.id = DATA_DOWN;
 80017b6:	2303      	movs	r3, #3
 80017b8:	603b      	str	r3, [r7, #0]
		inputData.input_act = 1;
 80017ba:	2301      	movs	r3, #1
 80017bc:	713b      	strb	r3, [r7, #4]
		Controller_SetInputData(inputData);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	463b      	mov	r3, r7
 80017c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017c6:	f7ff fd9b 	bl	8001300 <Controller_SetInputData>
 80017ca:	e011      	b.n	80017f0 <Listener_CheckButton+0xa8>
	}
	else if (Button_GetState(&hBtnInputDone) == ACT_PUSHED) {
 80017cc:	480e      	ldr	r0, [pc, #56]	@ (8001808 <Listener_CheckButton+0xc0>)
 80017ce:	f000 fcc6 	bl	800215e <Button_GetState>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d10b      	bne.n	80017f0 <Listener_CheckButton+0xa8>
		inputData.id = INPUT_DONE;
 80017d8:	2304      	movs	r3, #4
 80017da:	603b      	str	r3, [r7, #0]
		inputData.input_act = 1;
 80017dc:	2301      	movs	r3, #1
 80017de:	713b      	strb	r3, [r7, #4]
		Controller_SetInputData(inputData);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	463b      	mov	r3, r7
 80017e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e8:	f7ff fd8a 	bl	8001300 <Controller_SetInputData>
 80017ec:	e000      	b.n	80017f0 <Listener_CheckButton+0xa8>
		return;
 80017ee:	bf00      	nop
	}

}
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000036c 	.word	0x2000036c
 80017fc:	200003f0 	.word	0x200003f0
 8001800:	200003fc 	.word	0x200003fc
 8001804:	20000408 	.word	0x20000408
 8001808:	20000414 	.word	0x20000414

0800180c <Listener_CheckUart>:

void Listener_CheckUart()
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af02      	add	r7, sp, #8
    inputData_TypeDef inputData;
    if (isQueEmpty(&uartRxQue)) {
 8001812:	482b      	ldr	r0, [pc, #172]	@ (80018c0 <Listener_CheckUart+0xb4>)
 8001814:	f000 fb03 	bl	8001e1e <isQueEmpty>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d149      	bne.n	80018b2 <Listener_CheckUart+0xa6>
        return;
    }

    int uartRxData = deQue(&uartRxQue);
 800181e:	4828      	ldr	r0, [pc, #160]	@ (80018c0 <Listener_CheckUart+0xb4>)
 8001820:	f000 fb33 	bl	8001e8a <deQue>
 8001824:	6178      	str	r0, [r7, #20]

    switch (uartRxData) {
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3b64      	subs	r3, #100	@ 0x64
 800182a:	2b11      	cmp	r3, #17
 800182c:	d843      	bhi.n	80018b6 <Listener_CheckUart+0xaa>
 800182e:	a201      	add	r2, pc, #4	@ (adr r2, 8001834 <Listener_CheckUart+0x28>)
 8001830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001834:	08001891 	.word	0x08001891
 8001838:	080018b7 	.word	0x080018b7
 800183c:	080018b7 	.word	0x080018b7
 8001840:	080018b7 	.word	0x080018b7
 8001844:	080018b7 	.word	0x080018b7
 8001848:	080018b7 	.word	0x080018b7
 800184c:	080018b7 	.word	0x080018b7
 8001850:	080018b7 	.word	0x080018b7
 8001854:	080018b7 	.word	0x080018b7
 8001858:	0800187d 	.word	0x0800187d
 800185c:	080018b7 	.word	0x080018b7
 8001860:	080018b7 	.word	0x080018b7
 8001864:	080018b7 	.word	0x080018b7
 8001868:	080018b7 	.word	0x080018b7
 800186c:	080018b7 	.word	0x080018b7
 8001870:	0800189b 	.word	0x0800189b
 8001874:	080018b7 	.word	0x080018b7
 8001878:	08001887 	.word	0x08001887
        case 'm':
            inputData.id = MODE;
 800187c:	2301      	movs	r3, #1
 800187e:	603b      	str	r3, [r7, #0]
            inputData.input_act = 1;
 8001880:	2301      	movs	r3, #1
 8001882:	713b      	strb	r3, [r7, #4]
            break;
 8001884:	e00e      	b.n	80018a4 <Listener_CheckUart+0x98>

        case 'u':
            inputData.id = DATA_UP;
 8001886:	2302      	movs	r3, #2
 8001888:	603b      	str	r3, [r7, #0]
            inputData.input_act = 1;
 800188a:	2301      	movs	r3, #1
 800188c:	713b      	strb	r3, [r7, #4]
            break;
 800188e:	e009      	b.n	80018a4 <Listener_CheckUart+0x98>

        case 'd':
            inputData.id = DATA_DOWN;
 8001890:	2303      	movs	r3, #3
 8001892:	603b      	str	r3, [r7, #0]
            inputData.input_act = 1;
 8001894:	2301      	movs	r3, #1
 8001896:	713b      	strb	r3, [r7, #4]
            break;
 8001898:	e004      	b.n	80018a4 <Listener_CheckUart+0x98>

        case 's':
            inputData.id = INPUT_DONE;
 800189a:	2304      	movs	r3, #4
 800189c:	603b      	str	r3, [r7, #0]
            inputData.input_act = 1;
 800189e:	2301      	movs	r3, #1
 80018a0:	713b      	strb	r3, [r7, #4]
            break;
 80018a2:	bf00      	nop

        default:
            return;  // 정의되지 않은 입력은 무시
    }

    Controller_SetInputData(inputData);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	463b      	mov	r3, r7
 80018aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018ac:	f7ff fd28 	bl	8001300 <Controller_SetInputData>
 80018b0:	e002      	b.n	80018b8 <Listener_CheckUart+0xac>
        return;
 80018b2:	bf00      	nop
 80018b4:	e000      	b.n	80018b8 <Listener_CheckUart+0xac>
            return;  // 정의되지 않은 입력은 무시
 80018b6:	bf00      	nop
}
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000354 	.word	0x20000354

080018c4 <Listener_tempData>:


void Listener_tempData()
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af02      	add	r7, sp, #8
   static uint8_t temperature;
   static uint32_t prevChktempTime = 0;
   static uint32_t prevChkhumiTime = 0;
   static inputData_TypeDef inputData;
   static uint32_t distance;
   uint32_t curTick = HAL_GetTick();
 80018ca:	f001 fad9 	bl	8002e80 <HAL_GetTick>
 80018ce:	6078      	str	r0, [r7, #4]
   if ((curTick - prevChkhumiTime > 5000) || !first_flag) {
 80018d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <Listener_tempData+0xc0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d803      	bhi.n	80018e8 <Listener_tempData+0x24>
 80018e0:	4b29      	ldr	r3, [pc, #164]	@ (8001988 <Listener_tempData+0xc4>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d115      	bne.n	8001914 <Listener_tempData+0x50>
       distance = UltraSonic_GetDistance();
 80018e8:	f001 f9fa 	bl	8002ce0 <UltraSonic_GetDistance>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b26      	ldr	r3, [pc, #152]	@ (800198c <Listener_tempData+0xc8>)
 80018f2:	601a      	str	r2, [r3, #0]
       inputData.id = US_DIST;
 80018f4:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <Listener_tempData+0xcc>)
 80018f6:	2205      	movs	r2, #5
 80018f8:	601a      	str	r2, [r3, #0]
       inputData.US_dist = distance;
 80018fa:	4b24      	ldr	r3, [pc, #144]	@ (800198c <Listener_tempData+0xc8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a24      	ldr	r2, [pc, #144]	@ (8001990 <Listener_tempData+0xcc>)
 8001900:	6093      	str	r3, [r2, #8]
       prevChkhumiTime = curTick;
 8001902:	4a20      	ldr	r2, [pc, #128]	@ (8001984 <Listener_tempData+0xc0>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6013      	str	r3, [r2, #0]
       Controller_SetInputData(inputData);
 8001908:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <Listener_tempData+0xcc>)
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	9200      	str	r2, [sp, #0]
 800190e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001910:	f7ff fcf6 	bl	8001300 <Controller_SetInputData>
   }

   if ((curTick - prevChktempTime < 60000)&& first_flag) {
 8001914:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <Listener_tempData+0xd0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001920:	4293      	cmp	r3, r2
 8001922:	d803      	bhi.n	800192c <Listener_tempData+0x68>
 8001924:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <Listener_tempData+0xc4>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d126      	bne.n	800197a <Listener_tempData+0xb6>
      return;
   }
   prevChktempTime = curTick;
 800192c:	4a19      	ldr	r2, [pc, #100]	@ (8001994 <Listener_tempData+0xd0>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
   first_flag = 1;
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <Listener_tempData+0xc4>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
    DHT11_ReadData(&humidity, &temperature);
 8001938:	4917      	ldr	r1, [pc, #92]	@ (8001998 <Listener_tempData+0xd4>)
 800193a:	4818      	ldr	r0, [pc, #96]	@ (800199c <Listener_tempData+0xd8>)
 800193c:	f000 fcc2 	bl	80022c4 <DHT11_ReadData>
    inputData.id = TEMP;
 8001940:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <Listener_tempData+0xcc>)
 8001942:	2206      	movs	r2, #6
 8001944:	601a      	str	r2, [r3, #0]
    inputData.temp = temperature;
 8001946:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <Listener_tempData+0xd4>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <Listener_tempData+0xcc>)
 800194e:	60da      	str	r2, [r3, #12]
    Controller_SetInputData(inputData);
 8001950:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <Listener_tempData+0xcc>)
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	9200      	str	r2, [sp, #0]
 8001956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001958:	f7ff fcd2 	bl	8001300 <Controller_SetInputData>
    inputData.id = HUMID;
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <Listener_tempData+0xcc>)
 800195e:	2207      	movs	r2, #7
 8001960:	601a      	str	r2, [r3, #0]
    inputData.humid = humidity;
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <Listener_tempData+0xd8>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <Listener_tempData+0xcc>)
 800196a:	611a      	str	r2, [r3, #16]
    Controller_SetInputData(inputData);
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <Listener_tempData+0xcc>)
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	9200      	str	r2, [sp, #0]
 8001972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001974:	f7ff fcc4 	bl	8001300 <Controller_SetInputData>
 8001978:	e000      	b.n	800197c <Listener_tempData+0xb8>
      return;
 800197a:	bf00      	nop
}
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000370 	.word	0x20000370
 8001988:	20000374 	.word	0x20000374
 800198c:	20000378 	.word	0x20000378
 8001990:	2000037c 	.word	0x2000037c
 8001994:	20000390 	.word	0x20000390
 8001998:	20000395 	.word	0x20000395
 800199c:	20000394 	.word	0x20000394

080019a0 <Listener_UartCallBack>:

void Listener_UartCallBack()
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	enQue(&uartRxQue, rcvData);
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <Listener_UartCallBack+0x20>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	4806      	ldr	r0, [pc, #24]	@ (80019c4 <Listener_UartCallBack+0x24>)
 80019ac:	f000 fa4a 	bl	8001e44 <enQue>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // interrupt enable
 80019b0:	2201      	movs	r2, #1
 80019b2:	4903      	ldr	r1, [pc, #12]	@ (80019c0 <Listener_UartCallBack+0x20>)
 80019b4:	4804      	ldr	r0, [pc, #16]	@ (80019c8 <Listener_UartCallBack+0x28>)
 80019b6:	f004 f960 	bl	8005c7a <HAL_UART_Receive_IT>
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000351 	.word	0x20000351
 80019c4:	20000354 	.word	0x20000354
 80019c8:	200002e4 	.word	0x200002e4

080019cc <Presenter_Excute>:
uint32_t humid_output = 0;



void Presenter_Excute()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
   feed_Output_Data = *Controller_GetOutput();  
 80019d2:	f7ff fe45 	bl	8001660 <Controller_GetOutput>
 80019d6:	4602      	mov	r2, r0
 80019d8:	4b22      	ldr	r3, [pc, #136]	@ (8001a64 <Presenter_Excute+0x98>)
 80019da:	ca07      	ldmia	r2, {r0, r1, r2}
 80019dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   feed_Output_Flag = *Controller_GetFlags();    
 80019e0:	f7ff fe48 	bl	8001674 <Controller_GetFlags>
 80019e4:	4602      	mov	r2, r0
 80019e6:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <Presenter_Excute+0x9c>)
 80019e8:	8811      	ldrh	r1, [r2, #0]
 80019ea:	7892      	ldrb	r2, [r2, #2]
 80019ec:	8019      	strh	r1, [r3, #0]
 80019ee:	709a      	strb	r2, [r3, #2]
   temp_output = Read_Temp();
 80019f0:	f7ff fe4a 	bl	8001688 <Read_Temp>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a6c <Presenter_Excute+0xa0>)
 80019f8:	6013      	str	r3, [r2, #0]
   humid_output = Read_Humid();
 80019fa:	f7ff fe51 	bl	80016a0 <Read_Humid>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4a1b      	ldr	r2, [pc, #108]	@ (8001a70 <Presenter_Excute+0xa4>)
 8001a02:	6013      	str	r3, [r2, #0]

   Presenter_DispFeedStateFND();
 8001a04:	f000 f83c 	bl	8001a80 <Presenter_DispFeedStateFND>
   Presenter_DispFeedStateLCD();
 8001a08:	f000 f882 	bl	8001b10 <Presenter_DispFeedStateLCD>
   Presenter_DispFeedStateUART();
 8001a0c:	f000 f922 	bl	8001c54 <Presenter_DispFeedStateUART>

   if (fsm_state == FEED_MODE)
 8001a10:	4b18      	ldr	r3, [pc, #96]	@ (8001a74 <Presenter_Excute+0xa8>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d110      	bne.n	8001a3a <Presenter_Excute+0x6e>
   {
      motor_Start();
 8001a18:	f001 f908 	bl	8002c2c <motor_Start>
      HAL_Delay(feed_Output_Data.feed_amount * 2000);
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <Presenter_Excute+0x98>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f001 fa35 	bl	8002e98 <HAL_Delay>
      motor_Stop();
 8001a2e:	f001 f90d 	bl	8002c4c <motor_Stop>
      controlFlag.feedtimeoutFlag = 0;
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <Presenter_Excute+0xac>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	709a      	strb	r2, [r3, #2]
   {
      uint8_t scaled_remain = (feed_Output_Data.feed_remain * 255) / 15;
      LedBar_Write(0x01);
   }
   
}
 8001a38:	e010      	b.n	8001a5c <Presenter_Excute+0x90>
   else if(fsm_state == WAIT_MODE)
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <Presenter_Excute+0xa8>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10c      	bne.n	8001a5c <Presenter_Excute+0x90>
      uint8_t scaled_remain = (feed_Output_Data.feed_remain * 255) / 15;
 8001a42:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <Presenter_Excute+0x98>)
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	4613      	mov	r3, r2
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a7c <Presenter_Excute+0xb0>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	08db      	lsrs	r3, r3, #3
 8001a54:	71fb      	strb	r3, [r7, #7]
      LedBar_Write(0x01);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f000 ffc8 	bl	80029ec <LedBar_Write>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000398 	.word	0x20000398
 8001a68:	200003a4 	.word	0x200003a4
 8001a6c:	200003a8 	.word	0x200003a8
 8001a70:	200003ac 	.word	0x200003ac
 8001a74:	2000034f 	.word	0x2000034f
 8001a78:	2000034c 	.word	0x2000034c
 8001a7c:	88888889 	.word	0x88888889

08001a80 <Presenter_DispFeedStateFND>:


void Presenter_DispFeedStateFND()
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
   switch (fsm_state)
 8001a84:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <Presenter_DispFeedStateFND+0x80>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d030      	beq.n	8001aee <Presenter_DispFeedStateFND+0x6e>
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	dc34      	bgt.n	8001afa <Presenter_DispFeedStateFND+0x7a>
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <Presenter_DispFeedStateFND+0x1a>
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d016      	beq.n	8001ac6 <Presenter_DispFeedStateFND+0x46>

   case FEED_MODE:
      FND_WriteData(8888); // 사료 배급 중이라는 표시
      break;
   }
}
 8001a98:	e02f      	b.n	8001afa <Presenter_DispFeedStateFND+0x7a>
      if (input_state == PERIOD_IDLE) {
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <Presenter_DispFeedStateFND+0x84>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <Presenter_DispFeedStateFND+0x30>
         FND_WriteData(feed_Output_Data.feed_period); // 단위: 분
 8001aa2:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <Presenter_DispFeedStateFND+0x88>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fc99 	bl	80023e0 <FND_WriteData>
      break;
 8001aae:	e023      	b.n	8001af8 <Presenter_DispFeedStateFND+0x78>
      else if (input_state == AMOUNT_IDLE) {
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <Presenter_DispFeedStateFND+0x84>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d11f      	bne.n	8001af8 <Presenter_DispFeedStateFND+0x78>
         FND_WriteData(feed_Output_Data.feed_amount); // 단위: g
 8001ab8:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <Presenter_DispFeedStateFND+0x88>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 fc8e 	bl	80023e0 <FND_WriteData>
      break;
 8001ac4:	e018      	b.n	8001af8 <Presenter_DispFeedStateFND+0x78>
      FND_WriteData(time_feed_remain.min * 100 + time_feed_remain.sec);
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <Presenter_DispFeedStateFND+0x8c>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	0092      	lsls	r2, r2, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	0091      	lsls	r1, r2, #2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <Presenter_DispFeedStateFND+0x8c>)
 8001ae0:	885b      	ldrh	r3, [r3, #2]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 fc7a 	bl	80023e0 <FND_WriteData>
      break;
 8001aec:	e005      	b.n	8001afa <Presenter_DispFeedStateFND+0x7a>
      FND_WriteData(8888); // 사료 배급 중이라는 표시
 8001aee:	f242 20b8 	movw	r0, #8888	@ 0x22b8
 8001af2:	f000 fc75 	bl	80023e0 <FND_WriteData>
      break;
 8001af6:	e000      	b.n	8001afa <Presenter_DispFeedStateFND+0x7a>
      break;
 8001af8:	bf00      	nop
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000034f 	.word	0x2000034f
 8001b04:	20000350 	.word	0x20000350
 8001b08:	20000398 	.word	0x20000398
 8001b0c:	200003e8 	.word	0x200003e8

08001b10 <Presenter_DispFeedStateLCD>:

void Presenter_DispFeedStateLCD()
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b09d      	sub	sp, #116	@ 0x74
 8001b14:	af02      	add	r7, sp, #8
    static char last_str1[17] = "";

    char temp0[32], temp1[32];
    char line0[17], line1[17];

    switch (fsm_state)
 8001b16:	4b41      	ldr	r3, [pc, #260]	@ (8001c1c <Presenter_DispFeedStateLCD+0x10c>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d034      	beq.n	8001b88 <Presenter_DispFeedStateLCD+0x78>
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	dc3f      	bgt.n	8001ba2 <Presenter_DispFeedStateLCD+0x92>
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <Presenter_DispFeedStateLCD+0x1c>
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d011      	beq.n	8001b4e <Presenter_DispFeedStateLCD+0x3e>
 8001b2a:	e03a      	b.n	8001ba2 <Presenter_DispFeedStateLCD+0x92>
    {
    case INPUT_MODE:
        sprintf(temp0, "TIME: %2lu min", feed_Output_Data.feed_period);
 8001b2c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c20 <Presenter_DispFeedStateLCD+0x110>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b34:	493b      	ldr	r1, [pc, #236]	@ (8001c24 <Presenter_DispFeedStateLCD+0x114>)
 8001b36:	4618      	mov	r0, r3
 8001b38:	f005 f93a 	bl	8006db0 <siprintf>
        sprintf(temp1, "AMOUNT: %2lu mode", feed_Output_Data.feed_amount);
 8001b3c:	4b38      	ldr	r3, [pc, #224]	@ (8001c20 <Presenter_DispFeedStateLCD+0x110>)
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b44:	4938      	ldr	r1, [pc, #224]	@ (8001c28 <Presenter_DispFeedStateLCD+0x118>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f005 f932 	bl	8006db0 <siprintf>
        break;
 8001b4c:	e029      	b.n	8001ba2 <Presenter_DispFeedStateLCD+0x92>

    case WAIT_MODE:
        sprintf(temp0, "T:%02d:%02dM:%1luR:%2lu", time_feed_remain.min, time_feed_remain.sec, feed_Output_Data.feed_amount, feed_Output_Data.feed_remain);
 8001b4e:	4b37      	ldr	r3, [pc, #220]	@ (8001c2c <Presenter_DispFeedStateLCD+0x11c>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	4619      	mov	r1, r3
 8001b54:	4b35      	ldr	r3, [pc, #212]	@ (8001c2c <Presenter_DispFeedStateLCD+0x11c>)
 8001b56:	885b      	ldrh	r3, [r3, #2]
 8001b58:	461c      	mov	r4, r3
 8001b5a:	4b31      	ldr	r3, [pc, #196]	@ (8001c20 <Presenter_DispFeedStateLCD+0x110>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4a30      	ldr	r2, [pc, #192]	@ (8001c20 <Presenter_DispFeedStateLCD+0x110>)
 8001b60:	6892      	ldr	r2, [r2, #8]
 8001b62:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8001b66:	9201      	str	r2, [sp, #4]
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	4930      	ldr	r1, [pc, #192]	@ (8001c30 <Presenter_DispFeedStateLCD+0x120>)
 8001b70:	f005 f91e 	bl	8006db0 <siprintf>
        sprintf(temp1, "T/H: %02d / %02d", temp_output, humid_output);
 8001b74:	4b2f      	ldr	r3, [pc, #188]	@ (8001c34 <Presenter_DispFeedStateLCD+0x124>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b2f      	ldr	r3, [pc, #188]	@ (8001c38 <Presenter_DispFeedStateLCD+0x128>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001b80:	492e      	ldr	r1, [pc, #184]	@ (8001c3c <Presenter_DispFeedStateLCD+0x12c>)
 8001b82:	f005 f915 	bl	8006db0 <siprintf>
        break;
 8001b86:	e00c      	b.n	8001ba2 <Presenter_DispFeedStateLCD+0x92>

    case FEED_MODE:
        sprintf(temp0, "   FEED TIME!!  ");
 8001b88:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b8c:	492c      	ldr	r1, [pc, #176]	@ (8001c40 <Presenter_DispFeedStateLCD+0x130>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f005 f90e 	bl	8006db0 <siprintf>
        sprintf(temp1, "     YUMMY~~    ");
 8001b94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b98:	492a      	ldr	r1, [pc, #168]	@ (8001c44 <Presenter_DispFeedStateLCD+0x134>)
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f005 f908 	bl	8006db0 <siprintf>
        break;
 8001ba0:	bf00      	nop
    }

    // 고정 길이로 포맷
    snprintf(line0, sizeof(line0), "%-16s", temp0);
 8001ba2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ba6:	f107 0014 	add.w	r0, r7, #20
 8001baa:	4a27      	ldr	r2, [pc, #156]	@ (8001c48 <Presenter_DispFeedStateLCD+0x138>)
 8001bac:	2111      	movs	r1, #17
 8001bae:	f005 f8c9 	bl	8006d44 <sniprintf>
    snprintf(line1, sizeof(line1), "%-16s", temp1);
 8001bb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bb6:	4638      	mov	r0, r7
 8001bb8:	4a23      	ldr	r2, [pc, #140]	@ (8001c48 <Presenter_DispFeedStateLCD+0x138>)
 8001bba:	2111      	movs	r1, #17
 8001bbc:	f005 f8c2 	bl	8006d44 <sniprintf>

    if (strcmp(last_str0, line0) != 0) {
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4821      	ldr	r0, [pc, #132]	@ (8001c4c <Presenter_DispFeedStateLCD+0x13c>)
 8001bc8:	f7fe fb0a 	bl	80001e0 <strcmp>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00c      	beq.n	8001bec <Presenter_DispFeedStateLCD+0xdc>
        strcpy(last_str0, line0);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	481c      	ldr	r0, [pc, #112]	@ (8001c4c <Presenter_DispFeedStateLCD+0x13c>)
 8001bda:	f005 f9ca 	bl	8006f72 <strcpy>
        LCD_writeStringXY(0, 0, line0);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	461a      	mov	r2, r3
 8001be4:	2100      	movs	r1, #0
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 feeb 	bl	80029c2 <LCD_writeStringXY>
    }

    if (strcmp(last_str1, line1) != 0) {
 8001bec:	463b      	mov	r3, r7
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4817      	ldr	r0, [pc, #92]	@ (8001c50 <Presenter_DispFeedStateLCD+0x140>)
 8001bf2:	f7fe faf5 	bl	80001e0 <strcmp>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00a      	beq.n	8001c12 <Presenter_DispFeedStateLCD+0x102>
        strcpy(last_str1, line1);
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4813      	ldr	r0, [pc, #76]	@ (8001c50 <Presenter_DispFeedStateLCD+0x140>)
 8001c02:	f005 f9b6 	bl	8006f72 <strcpy>
        LCD_writeStringXY(1, 0, line1);
 8001c06:	463b      	mov	r3, r7
 8001c08:	461a      	mov	r2, r3
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f000 fed8 	bl	80029c2 <LCD_writeStringXY>
    }
}
 8001c12:	bf00      	nop
 8001c14:	376c      	adds	r7, #108	@ 0x6c
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000034f 	.word	0x2000034f
 8001c20:	20000398 	.word	0x20000398
 8001c24:	08007e3c 	.word	0x08007e3c
 8001c28:	08007e4c 	.word	0x08007e4c
 8001c2c:	200003e8 	.word	0x200003e8
 8001c30:	08007e60 	.word	0x08007e60
 8001c34:	200003a8 	.word	0x200003a8
 8001c38:	200003ac 	.word	0x200003ac
 8001c3c:	08007e78 	.word	0x08007e78
 8001c40:	08007e8c 	.word	0x08007e8c
 8001c44:	08007ea0 	.word	0x08007ea0
 8001c48:	08007eb4 	.word	0x08007eb4
 8001c4c:	200003b0 	.word	0x200003b0
 8001c50:	200003c4 	.word	0x200003c4

08001c54 <Presenter_DispFeedStateUART>:




void Presenter_DispFeedStateUART()
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b09a      	sub	sp, #104	@ 0x68
 8001c58:	af00      	add	r7, sp, #0
   char str[100];
   

   switch (fsm_state)
 8001c5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ce4 <Presenter_DispFeedStateUART+0x90>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d028      	beq.n	8001cb4 <Presenter_DispFeedStateUART+0x60>
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	dc2d      	bgt.n	8001cc2 <Presenter_DispFeedStateUART+0x6e>
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <Presenter_DispFeedStateUART+0x1c>
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d018      	beq.n	8001ca0 <Presenter_DispFeedStateUART+0x4c>
 8001c6e:	e028      	b.n	8001cc2 <Presenter_DispFeedStateUART+0x6e>
   {
   case INPUT_MODE:
      if (input_state == PERIOD_IDLE) {
 8001c70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce8 <Presenter_DispFeedStateUART+0x94>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d107      	bne.n	8001c88 <Presenter_DispFeedStateUART+0x34>
         sprintf(str, "TIME: %lu \n", feed_Output_Data.feed_period);
 8001c78:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <Presenter_DispFeedStateUART+0x98>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	491c      	ldr	r1, [pc, #112]	@ (8001cf0 <Presenter_DispFeedStateUART+0x9c>)
 8001c80:	4618      	mov	r0, r3
 8001c82:	f005 f895 	bl	8006db0 <siprintf>
      }
      else if (input_state == AMOUNT_IDLE) {
         sprintf(str, "AMOUNT: %lu g\n", feed_Output_Data.feed_amount);
      }
      break;
 8001c86:	e01b      	b.n	8001cc0 <Presenter_DispFeedStateUART+0x6c>
      else if (input_state == AMOUNT_IDLE) {
 8001c88:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <Presenter_DispFeedStateUART+0x94>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d117      	bne.n	8001cc0 <Presenter_DispFeedStateUART+0x6c>
         sprintf(str, "AMOUNT: %lu g\n", feed_Output_Data.feed_amount);
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <Presenter_DispFeedStateUART+0x98>)
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	4917      	ldr	r1, [pc, #92]	@ (8001cf4 <Presenter_DispFeedStateUART+0xa0>)
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f005 f889 	bl	8006db0 <siprintf>
      break;
 8001c9e:	e00f      	b.n	8001cc0 <Presenter_DispFeedStateUART+0x6c>

   case WAIT_MODE:
      sprintf(str, "WAITMODE: %02d:%02d\n", time_feed_remain.min, time_feed_remain.sec);
 8001ca0:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <Presenter_DispFeedStateUART+0xa4>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <Presenter_DispFeedStateUART+0xa4>)
 8001ca8:	885b      	ldrh	r3, [r3, #2]
 8001caa:	1d38      	adds	r0, r7, #4
 8001cac:	4913      	ldr	r1, [pc, #76]	@ (8001cfc <Presenter_DispFeedStateUART+0xa8>)
 8001cae:	f005 f87f 	bl	8006db0 <siprintf>
      break;
 8001cb2:	e006      	b.n	8001cc2 <Presenter_DispFeedStateUART+0x6e>

   case FEED_MODE:
      sprintf(str, "FEED_MODE\n");
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	4912      	ldr	r1, [pc, #72]	@ (8001d00 <Presenter_DispFeedStateUART+0xac>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f005 f879 	bl	8006db0 <siprintf>
      break;
 8001cbe:	e000      	b.n	8001cc2 <Presenter_DispFeedStateUART+0x6e>
      break;
 8001cc0:	bf00      	nop
   }

   HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 1000);
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fa95 	bl	80001f4 <strlen>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	1d39      	adds	r1, r7, #4
 8001cd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd4:	480b      	ldr	r0, [pc, #44]	@ (8001d04 <Presenter_DispFeedStateUART+0xb0>)
 8001cd6:	f003 ff45 	bl	8005b64 <HAL_UART_Transmit>
}
 8001cda:	bf00      	nop
 8001cdc:	3768      	adds	r7, #104	@ 0x68
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000034f 	.word	0x2000034f
 8001ce8:	20000350 	.word	0x20000350
 8001cec:	20000398 	.word	0x20000398
 8001cf0:	08007ebc 	.word	0x08007ebc
 8001cf4:	08007ec8 	.word	0x08007ec8
 8001cf8:	200003e8 	.word	0x200003e8
 8001cfc:	08007ed8 	.word	0x08007ed8
 8001d00:	08007ef0 	.word	0x08007ef0
 8001d04:	200002e4 	.word	0x200002e4

08001d08 <Presenter_Init>:




void Presenter_Init()
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
   LCD_Init(&hi2c1);
 8001d0c:	4806      	ldr	r0, [pc, #24]	@ (8001d28 <Presenter_Init+0x20>)
 8001d0e:	f000 fd09 	bl	8002724 <LCD_Init>
   Sound_Init();
 8001d12:	f000 f9db 	bl	80020cc <Sound_Init>
   motor_Init(&htim1, TIM_CHANNEL_1);
 8001d16:	2100      	movs	r1, #0
 8001d18:	4804      	ldr	r0, [pc, #16]	@ (8001d2c <Presenter_Init+0x24>)
 8001d1a:	f000 ff3b 	bl	8002b94 <motor_Init>
   motor_SetDuty(80);
 8001d1e:	2050      	movs	r0, #80	@ 0x50
 8001d20:	f000 ff4e 	bl	8002bc0 <motor_SetDuty>
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000124 	.word	0x20000124
 8001d2c:	2000017c 	.word	0x2000017c

08001d30 <HAL_TIM_PeriodElapsedCallback>:
 */

#include "ap_main.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d40:	d103      	bne.n	8001d4a <HAL_TIM_PeriodElapsedCallback+0x1a>
		FND_DispDataCallBack();
 8001d42:	f000 fb5d 	bl	8002400 <FND_DispDataCallBack>
		// 남은 시간 계산하기
		RemainTime_CallBack();
 8001d46:	f000 f8c5 	bl	8001ed4 <RemainTime_CallBack>

	}
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a04      	ldr	r2, [pc, #16]	@ (8001d74 <HAL_UART_RxCpltCallback+0x20>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_UART_RxCpltCallback+0x16>
		Listener_UartCallBack();
 8001d66:	f7ff fe1b 	bl	80019a0 <Listener_UartCallBack>
	}
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40004400 	.word	0x40004400

08001d78 <ap_main>:


int ap_main()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001d7c:	4806      	ldr	r0, [pc, #24]	@ (8001d98 <ap_main+0x20>)
 8001d7e:	f002 fe93 	bl	8004aa8 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim4);
 8001d82:	4806      	ldr	r0, [pc, #24]	@ (8001d9c <ap_main+0x24>)
 8001d84:	f002 fe0e 	bl	80049a4 <HAL_TIM_Base_Start>
	while(1)
	{
		Listener_Excute();
 8001d88:	f7ff fcd4 	bl	8001734 <Listener_Excute>
		Controller_Excute();
 8001d8c:	f7ff fa90 	bl	80012b0 <Controller_Excute>
		Presenter_Excute();
 8001d90:	f7ff fe1c 	bl	80019cc <Presenter_Excute>
		Listener_Excute();
 8001d94:	bf00      	nop
 8001d96:	e7f7      	b.n	8001d88 <ap_main+0x10>
 8001d98:	200001c4 	.word	0x200001c4
 8001d9c:	20000254 	.word	0x20000254

08001da0 <ap_init>:

	return 0;
}

void ap_init()
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	Listener_Init();
 8001da4:	f7ff fc88 	bl	80016b8 <Listener_Init>
	Presenter_Init();
 8001da8:	f7ff ffae 	bl	8001d08 <Presenter_Init>
	Sound_Init();
 8001dac:	f000 f98e 	bl	80020cc <Sound_Init>
	motor_Init(&htim1, TIM_CHANNEL_1);
 8001db0:	2100      	movs	r1, #0
 8001db2:	4804      	ldr	r0, [pc, #16]	@ (8001dc4 <ap_init+0x24>)
 8001db4:	f000 feee 	bl	8002b94 <motor_Init>
	motor_SetDuty(80);
 8001db8:	2050      	movs	r0, #80	@ 0x50
 8001dba:	f000 ff01 	bl	8002bc0 <motor_SetDuty>

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000017c 	.word	0x2000017c

08001dc8 <Que_Init>:
#include "queue.h"



void Que_Init(Que_TypeDef *q)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	q->front = 0;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	605a      	str	r2, [r3, #4]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <isQueFull>:

int isQueFull(Que_TypeDef *q)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	return q->front == ((q->rear+1) % QUE_SIZE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	4259      	negs	r1, r3
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	f001 0103 	and.w	r1, r1, #3
 8001e04:	bf58      	it	pl
 8001e06:	424b      	negpl	r3, r1
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <isQueEmpty>:

int isQueEmpty(Que_TypeDef *q)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
	return q->front == q->rear;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	bf0c      	ite	eq
 8001e32:	2301      	moveq	r3, #1
 8001e34:	2300      	movne	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <enQue>:

void enQue(Que_TypeDef *q, int data)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
	if (isQueFull(q)) {
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffca 	bl	8001de8 <isQueFull>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d113      	bne.n	8001e82 <enQue+0x3e>
		return;
	}
	q->queData[q->rear] = data;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3202      	adds	r2, #2
 8001e62:	6839      	ldr	r1, [r7, #0]
 8001e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	q->rear = (q->rear+1) % QUE_SIZE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	425a      	negs	r2, r3
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	f002 0203 	and.w	r2, r2, #3
 8001e78:	bf58      	it	pl
 8001e7a:	4253      	negpl	r3, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6053      	str	r3, [r2, #4]
 8001e80:	e000      	b.n	8001e84 <enQue+0x40>
		return;
 8001e82:	bf00      	nop
}
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <deQue>:

int deQue(Que_TypeDef *q)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
	if (isQueEmpty(q)) {
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ffc3 	bl	8001e1e <isQueEmpty>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d114      	bne.n	8001ec8 <deQue+0x3e>
		return;
	}
	int data = q->queData[q->front];
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3202      	adds	r2, #2
 8001ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eaa:	60fb      	str	r3, [r7, #12]
	q->front = (q->front+1) % QUE_SIZE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	425a      	negs	r2, r3
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	f002 0203 	and.w	r2, r2, #3
 8001ebc:	bf58      	it	pl
 8001ebe:	4253      	negpl	r3, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6013      	str	r3, [r2, #0]
	return data;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	e001      	b.n	8001ecc <deQue+0x42>
		return;
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <RemainTime_CallBack>:
static uint64_t TimeToSec(time_TypeDef t);



void RemainTime_CallBack()
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
	if (fsm_state == WAIT_MODE) {
 8001eda:	4b2a      	ldr	r3, [pc, #168]	@ (8001f84 <RemainTime_CallBack+0xb0>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d13a      	bne.n	8001f58 <RemainTime_CallBack+0x84>
		Calculate_Elapsed_Time();
 8001ee2:	f000 f859 	bl	8001f98 <Calculate_Elapsed_Time>
        Compare_Time();
 8001ee6:	f000 f8cb 	bl	8002080 <Compare_Time>

        int total_period_sec  = TimeToSec(time_feed_period);
 8001eea:	4b27      	ldr	r3, [pc, #156]	@ (8001f88 <RemainTime_CallBack+0xb4>)
 8001eec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ef0:	f000 f888 	bl	8002004 <TimeToSec>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4613      	mov	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        int total_elapsed_sec = TimeToSec(time_feed_elapsed);
 8001efc:	4b23      	ldr	r3, [pc, #140]	@ (8001f8c <RemainTime_CallBack+0xb8>)
 8001efe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f02:	f000 f87f 	bl	8002004 <TimeToSec>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
        int remain_sec = total_period_sec - total_elapsed_sec;
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	617b      	str	r3, [r7, #20]
        if (remain_sec < 0) remain_sec = 0;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	da01      	bge.n	8001f20 <RemainTime_CallBack+0x4c>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]


        time_feed_remain.min = remain_sec / 60;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	4a1b      	ldr	r2, [pc, #108]	@ (8001f90 <RemainTime_CallBack+0xbc>)
 8001f24:	fb82 1203 	smull	r1, r2, r2, r3
 8001f28:	441a      	add	r2, r3
 8001f2a:	1152      	asrs	r2, r2, #5
 8001f2c:	17db      	asrs	r3, r3, #31
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <RemainTime_CallBack+0xc0>)
 8001f34:	801a      	strh	r2, [r3, #0]
        time_feed_remain.sec = remain_sec % 60;
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <RemainTime_CallBack+0xbc>)
 8001f3a:	fb83 1302 	smull	r1, r3, r3, r2
 8001f3e:	4413      	add	r3, r2
 8001f40:	1159      	asrs	r1, r3, #5
 8001f42:	17d3      	asrs	r3, r2, #31
 8001f44:	1ac9      	subs	r1, r1, r3
 8001f46:	460b      	mov	r3, r1
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	1a5b      	subs	r3, r3, r1
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	1ad1      	subs	r1, r2, r3
 8001f50:	b28a      	uxth	r2, r1
 8001f52:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <RemainTime_CallBack+0xc0>)
 8001f54:	805a      	strh	r2, [r3, #2]
    {
        time_feed_elapsed = (time_TypeDef){0,0,0};
        // feed_time_out = 0; ← 이건 Controller 또는 Output에서 클리어하자
    }
    
}
 8001f56:	e010      	b.n	8001f7a <RemainTime_CallBack+0xa6>
    else if (fsm_state == FEED_MODE || fsm_state == INPUT_MODE)
 8001f58:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <RemainTime_CallBack+0xb0>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d003      	beq.n	8001f68 <RemainTime_CallBack+0x94>
 8001f60:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <RemainTime_CallBack+0xb0>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d108      	bne.n	8001f7a <RemainTime_CallBack+0xa6>
        time_feed_elapsed = (time_TypeDef){0,0,0};
 8001f68:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <RemainTime_CallBack+0xb8>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <RemainTime_CallBack+0xb8>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	805a      	strh	r2, [r3, #2]
 8001f74:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <RemainTime_CallBack+0xb8>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	809a      	strh	r2, [r3, #4]
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	2000034f 	.word	0x2000034f
 8001f88:	200003d8 	.word	0x200003d8
 8001f8c:	200003e0 	.word	0x200003e0
 8001f90:	88888889 	.word	0x88888889
 8001f94:	200003e8 	.word	0x200003e8

08001f98 <Calculate_Elapsed_Time>:

void Calculate_Elapsed_Time()
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
    if (time_feed_elapsed.msec == 1000 - 1) {
 8001f9c:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <Calculate_Elapsed_Time+0x68>)
 8001f9e:	889b      	ldrh	r3, [r3, #4]
 8001fa0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d11f      	bne.n	8001fe8 <Calculate_Elapsed_Time+0x50>
        time_feed_elapsed.msec = 0;
 8001fa8:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <Calculate_Elapsed_Time+0x68>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	809a      	strh	r2, [r3, #4]

        if (time_feed_elapsed.sec == 60 - 1) {
 8001fae:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <Calculate_Elapsed_Time+0x68>)
 8001fb0:	885b      	ldrh	r3, [r3, #2]
 8001fb2:	2b3b      	cmp	r3, #59	@ 0x3b
 8001fb4:	d111      	bne.n	8001fda <Calculate_Elapsed_Time+0x42>
            time_feed_elapsed.sec = 0;
 8001fb6:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <Calculate_Elapsed_Time+0x68>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	805a      	strh	r2, [r3, #2]

            if (time_feed_elapsed.min == 60 - 1) {
 8001fbc:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <Calculate_Elapsed_Time+0x68>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	2b3b      	cmp	r3, #59	@ 0x3b
 8001fc2:	d103      	bne.n	8001fcc <Calculate_Elapsed_Time+0x34>
                time_feed_elapsed.min = 0; 
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <Calculate_Elapsed_Time+0x68>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	801a      	strh	r2, [r3, #0]
        }

    } else {
        time_feed_elapsed.msec++;
    }
}
 8001fca:	e013      	b.n	8001ff4 <Calculate_Elapsed_Time+0x5c>
                time_feed_elapsed.min++;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <Calculate_Elapsed_Time+0x68>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <Calculate_Elapsed_Time+0x68>)
 8001fd6:	801a      	strh	r2, [r3, #0]
}
 8001fd8:	e00c      	b.n	8001ff4 <Calculate_Elapsed_Time+0x5c>
            time_feed_elapsed.sec++;
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <Calculate_Elapsed_Time+0x68>)
 8001fdc:	885b      	ldrh	r3, [r3, #2]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <Calculate_Elapsed_Time+0x68>)
 8001fe4:	805a      	strh	r2, [r3, #2]
}
 8001fe6:	e005      	b.n	8001ff4 <Calculate_Elapsed_Time+0x5c>
        time_feed_elapsed.msec++;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <Calculate_Elapsed_Time+0x68>)
 8001fea:	889b      	ldrh	r3, [r3, #4]
 8001fec:	3301      	adds	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b03      	ldr	r3, [pc, #12]	@ (8002000 <Calculate_Elapsed_Time+0x68>)
 8001ff2:	809a      	strh	r2, [r3, #4]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	200003e0 	.word	0x200003e0

08002004 <TimeToSec>:


uint64_t TimeToSec(time_TypeDef t)
{
 8002004:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002008:	b085      	sub	sp, #20
 800200a:	af00      	add	r7, sp, #0
 800200c:	f107 0308 	add.w	r3, r7, #8
 8002010:	e883 0003 	stmia.w	r3, {r0, r1}
    return ((uint64_t)t.min * 60) + t.sec;
 8002014:	893b      	ldrh	r3, [r7, #8]
 8002016:	b29b      	uxth	r3, r3
 8002018:	2200      	movs	r2, #0
 800201a:	4698      	mov	r8, r3
 800201c:	4691      	mov	r9, r2
 800201e:	4642      	mov	r2, r8
 8002020:	464b      	mov	r3, r9
 8002022:	f04f 0000 	mov.w	r0, #0
 8002026:	f04f 0100 	mov.w	r1, #0
 800202a:	0119      	lsls	r1, r3, #4
 800202c:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002030:	0110      	lsls	r0, r2, #4
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	ebb2 0408 	subs.w	r4, r2, r8
 800203a:	eb63 0509 	sbc.w	r5, r3, r9
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	00ab      	lsls	r3, r5, #2
 8002048:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800204c:	00a2      	lsls	r2, r4, #2
 800204e:	4614      	mov	r4, r2
 8002050:	461d      	mov	r5, r3
 8002052:	4622      	mov	r2, r4
 8002054:	462b      	mov	r3, r5
 8002056:	8979      	ldrh	r1, [r7, #10]
 8002058:	b289      	uxth	r1, r1
 800205a:	2000      	movs	r0, #0
 800205c:	468a      	mov	sl, r1
 800205e:	4683      	mov	fp, r0
 8002060:	eb12 010a 	adds.w	r1, r2, sl
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	eb43 030b 	adc.w	r3, r3, fp
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002070:	4610      	mov	r0, r2
 8002072:	4619      	mov	r1, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800207c:	4770      	bx	lr
	...

08002080 <Compare_Time>:


void Compare_Time()
{
 8002080:	b5b0      	push	{r4, r5, r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
    uint8_t timeout = (TimeToSec(time_feed_elapsed) >= TimeToSec(time_feed_period)) ? 1 : 0;
 8002086:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <Compare_Time+0x44>)
 8002088:	e893 0003 	ldmia.w	r3, {r0, r1}
 800208c:	f7ff ffba 	bl	8002004 <TimeToSec>
 8002090:	4604      	mov	r4, r0
 8002092:	460d      	mov	r5, r1
 8002094:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <Compare_Time+0x48>)
 8002096:	e893 0003 	ldmia.w	r3, {r0, r1}
 800209a:	f7ff ffb3 	bl	8002004 <TimeToSec>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4294      	cmp	r4, r2
 80020a4:	eb75 0303 	sbcs.w	r3, r5, r3
 80020a8:	bf2c      	ite	cs
 80020aa:	2301      	movcs	r3, #1
 80020ac:	2300      	movcc	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	71fb      	strb	r3, [r7, #7]
    SetFeedTimeOutFlag(timeout);  // 내부 상태가 아닌 Controller 상태에 전달
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fac3 	bl	8001640 <SetFeedTimeOutFlag>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bdb0      	pop	{r4, r5, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200003e0 	.word	0x200003e0
 80020c8:	200003d8 	.word	0x200003d8

080020cc <Sound_Init>:
 */

#include "sound.h"

void Sound_Init()
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
 Buzzer_Init(&htim3, TIM_CHANNEL_1);
 80020d0:	2100      	movs	r1, #0
 80020d2:	4802      	ldr	r0, [pc, #8]	@ (80020dc <Sound_Init+0x10>)
 80020d4:	f000 fcc4 	bl	8002a60 <Buzzer_Init>
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000020c 	.word	0x2000020c

080020e0 <Sound_PowerOn>:

void Sound_PowerOn()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	Buzzer_Start();
 80020e4:	f000 fd36 	bl	8002b54 <Buzzer_Start>
	Buzzer_SetFreq(1047);
 80020e8:	f240 4017 	movw	r0, #1047	@ 0x417
 80020ec:	f000 fcce 	bl	8002a8c <Buzzer_SetFreq>
	HAL_Delay(100);
 80020f0:	2064      	movs	r0, #100	@ 0x64
 80020f2:	f000 fed1 	bl	8002e98 <HAL_Delay>
	Buzzer_Stop();
 80020f6:	f000 fd3d 	bl	8002b74 <Buzzer_Stop>
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}

080020fe <Sound_ModeStart>:

void Sound_ModeStart()
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	af00      	add	r7, sp, #0
	Buzzer_Start();
 8002102:	f000 fd27 	bl	8002b54 <Buzzer_Start>
	Buzzer_SetFreq(1047);
 8002106:	f240 4017 	movw	r0, #1047	@ 0x417
 800210a:	f000 fcbf 	bl	8002a8c <Buzzer_SetFreq>
	HAL_Delay(100);
 800210e:	2064      	movs	r0, #100	@ 0x64
 8002110:	f000 fec2 	bl	8002e98 <HAL_Delay>
	Buzzer_SetFreq(2042);
 8002114:	f240 70fa 	movw	r0, #2042	@ 0x7fa
 8002118:	f000 fcb8 	bl	8002a8c <Buzzer_SetFreq>
	HAL_Delay(100);
 800211c:	2064      	movs	r0, #100	@ 0x64
 800211e:	f000 febb 	bl	8002e98 <HAL_Delay>
	Buzzer_SetFreq(1547);
 8002122:	f240 600b 	movw	r0, #1547	@ 0x60b
 8002126:	f000 fcb1 	bl	8002a8c <Buzzer_SetFreq>
	Buzzer_Stop();
 800212a:	f000 fd23 	bl	8002b74 <Buzzer_Stop>
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}

08002132 <Button_Init>:
Button_Handler_t hBtnDown;
Button_Handler_t hBtnInputDone;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	4613      	mov	r3, r2
 800213e:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	88fa      	ldrh	r2, [r7, #6]
 800214a:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2201      	movs	r2, #1
 8002150:	609a      	str	r2, [r3, #8]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); // normal state is high.
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	889b      	ldrh	r3, [r3, #4]
 800216e:	4619      	mov	r1, r3
 8002170:	4610      	mov	r0, r2
 8002172:	f001 fa3b 	bl	80035ec <HAL_GPIO_ReadPin>
 8002176:	4603      	mov	r3, r0
 8002178:	60fb      	str	r3, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10a      	bne.n	8002198 <Button_GetState+0x3a>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d107      	bne.n	8002198 <Button_GetState+0x3a>
		HAL_Delay(2); // debounce
 8002188:	2002      	movs	r0, #2
 800218a:	f000 fe85 	bl	8002e98 <HAL_Delay>
		hbtn->prevState = PUSHED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 8002194:	2301      	movs	r3, #1
 8002196:	e00f      	b.n	80021b8 <Button_GetState+0x5a>
	}
	else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10a      	bne.n	80021b6 <Button_GetState+0x58>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d107      	bne.n	80021b6 <Button_GetState+0x58>
		HAL_Delay(2); // debounce
 80021a6:	2002      	movs	r0, #2
 80021a8:	f000 fe76 	bl	8002e98 <HAL_Delay>
		hbtn->prevState = RELEASED;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 80021b2:	2302      	movs	r3, #2
 80021b4:	e000      	b.n	80021b8 <Button_GetState+0x5a>
	}
	return NO_ACT;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <DHT11_DelayUs>:
//   GPIO_InitStruct.Pull = GPIO_NOPULL;
//   HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
//}

void DHT11_DelayUs(uint32_t us)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
   __HAL_TIM_SET_COUNTER(&htim4, 0);
 80021c8:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <DHT11_DelayUs+0x2c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2200      	movs	r2, #0
 80021ce:	625a      	str	r2, [r3, #36]	@ 0x24
   while(__HAL_TIM_GET_COUNTER(&htim4) < us);
 80021d0:	bf00      	nop
 80021d2:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <DHT11_DelayUs+0x2c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d8f9      	bhi.n	80021d2 <DHT11_DelayUs+0x12>
}
 80021de:	bf00      	nop
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	20000254 	.word	0x20000254

080021f0 <DHT11_SendStartSignal>:

// 18ms Low, 20~40us High
void DHT11_SendStartSignal()
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f6:	463b      	mov	r3, r7
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
   GPIO_InitStruct.Pin = DHT11_PIN;
 8002204:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002208:	603b      	str	r3, [r7, #0]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800220a:	2311      	movs	r3, #17
 800220c:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
   HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8002212:	463b      	mov	r3, r7
 8002214:	4619      	mov	r1, r3
 8002216:	4825      	ldr	r0, [pc, #148]	@ (80022ac <DHT11_SendStartSignal+0xbc>)
 8002218:	f001 f864 	bl	80032e4 <HAL_GPIO_Init>

   HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, RESET);   // Low 18ms 유지
 800221c:	2200      	movs	r2, #0
 800221e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002222:	4822      	ldr	r0, [pc, #136]	@ (80022ac <DHT11_SendStartSignal+0xbc>)
 8002224:	f001 f9fa 	bl	800361c <HAL_GPIO_WritePin>
   HAL_Delay(18);    // 18ms Low
 8002228:	2012      	movs	r0, #18
 800222a:	f000 fe35 	bl	8002e98 <HAL_Delay>
   HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, SET);
 800222e:	2201      	movs	r2, #1
 8002230:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002234:	481d      	ldr	r0, [pc, #116]	@ (80022ac <DHT11_SendStartSignal+0xbc>)
 8002236:	f001 f9f1 	bl	800361c <HAL_GPIO_WritePin>
   DHT11_DelayUs(30);
 800223a:	201e      	movs	r0, #30
 800223c:	f7ff ffc0 	bl	80021c0 <DHT11_DelayUs>

   // Input Mode + Exti 설정 외부 인터럽트 가능하게 설정
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002240:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002244:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
   HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 800224a:	463b      	mov	r3, r7
 800224c:	4619      	mov	r1, r3
 800224e:	4817      	ldr	r0, [pc, #92]	@ (80022ac <DHT11_SendStartSignal+0xbc>)
 8002250:	f001 f848 	bl	80032e4 <HAL_GPIO_Init>

   HAL_TIM_Base_Stop(&htim4);
 8002254:	4816      	ldr	r0, [pc, #88]	@ (80022b0 <DHT11_SendStartSignal+0xc0>)
 8002256:	f002 fbff 	bl	8004a58 <HAL_TIM_Base_Stop>
   __HAL_TIM_SET_COUNTER(&htim4, 0);
 800225a:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <DHT11_SendStartSignal+0xc0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	625a      	str	r2, [r3, #36]	@ 0x24
   HAL_TIM_Base_Start(&htim4);
 8002262:	4813      	ldr	r0, [pc, #76]	@ (80022b0 <DHT11_SendStartSignal+0xc0>)
 8002264:	f002 fb9e 	bl	80049a4 <HAL_TIM_Base_Start>

   // 수신 전에 초기화
   bit_index = 0;
 8002268:	4b12      	ldr	r3, [pc, #72]	@ (80022b4 <DHT11_SendStartSignal+0xc4>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
   last_time =0;
 800226e:	4b12      	ldr	r3, [pc, #72]	@ (80022b8 <DHT11_SendStartSignal+0xc8>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]

   for (int i = 0; i < 5; i++) {
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	e007      	b.n	800228a <DHT11_SendStartSignal+0x9a>
      data[i] = 0;
 800227a:	4a10      	ldr	r2, [pc, #64]	@ (80022bc <DHT11_SendStartSignal+0xcc>)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	4413      	add	r3, r2
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < 5; i++) {
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b04      	cmp	r3, #4
 800228e:	ddf4      	ble.n	800227a <DHT11_SendStartSignal+0x8a>
   }

   __HAL_GPIO_EXTI_CLEAR_FLAG(DHT11_PIN);
 8002290:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <DHT11_SendStartSignal+0xd0>)
 8002292:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002296:	615a      	str	r2, [r3, #20]
   HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8002298:	2028      	movs	r0, #40	@ 0x28
 800229a:	f000 ff82 	bl	80031a2 <HAL_NVIC_ClearPendingIRQ>
   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); //GPIO 10번에서 15번까지 인터럽트 처리
 800229e:	2028      	movs	r0, #40	@ 0x28
 80022a0:	f000 ff57 	bl	8003152 <HAL_NVIC_EnableIRQ>
}
 80022a4:	bf00      	nop
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40020400 	.word	0x40020400
 80022b0:	20000254 	.word	0x20000254
 80022b4:	20000424 	.word	0x20000424
 80022b8:	20000420 	.word	0x20000420
 80022bc:	20000428 	.word	0x20000428
 80022c0:	40013c00 	.word	0x40013c00

080022c4 <DHT11_ReadData>:

void DHT11_ReadData(uint8_t *humidity, uint8_t *temperature)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
   DHT11_SendStartSignal();
 80022ce:	f7ff ff8f 	bl	80021f0 <DHT11_SendStartSignal>

   HAL_Delay(5);  // 최대 4ms 정도 데이터 수신 시간 대기
 80022d2:	2005      	movs	r0, #5
 80022d4:	f000 fde0 	bl	8002e98 <HAL_Delay>

   HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80022d8:	2028      	movs	r0, #40	@ 0x28
 80022da:	f000 ff48 	bl	800316e <HAL_NVIC_DisableIRQ>

//   if (data[4] == (data[0] + data[1] + data[2] + data[3]))
//   {
      *humidity = data[0];
 80022de:	4b07      	ldr	r3, [pc, #28]	@ (80022fc <DHT11_ReadData+0x38>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	701a      	strb	r2, [r3, #0]
      *temperature = data[2];
 80022e8:	4b04      	ldr	r3, [pc, #16]	@ (80022fc <DHT11_ReadData+0x38>)
 80022ea:	789b      	ldrb	r3, [r3, #2]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	701a      	strb	r2, [r3, #0]
//      return 1;
//   }
//   return 0;
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000428 	.word	0x20000428

08002300 <DHT11_EXTI_Callback>:

void DHT11_EXTI_Callback()
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
   uint32_t now = __HAL_TIM_GET_COUNTER(&htim4);
 8002306:	4b30      	ldr	r3, [pc, #192]	@ (80023c8 <DHT11_EXTI_Callback+0xc8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	60fb      	str	r3, [r7, #12]
   uint32_t duration = now - last_time;
 800230e:	4b2f      	ldr	r3, [pc, #188]	@ (80023cc <DHT11_EXTI_Callback+0xcc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	60bb      	str	r3, [r7, #8]
   last_time = now;
 8002318:	4a2c      	ldr	r2, [pc, #176]	@ (80023cc <DHT11_EXTI_Callback+0xcc>)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6013      	str	r3, [r2, #0]

   if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET)
 800231e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002322:	482b      	ldr	r0, [pc, #172]	@ (80023d0 <DHT11_EXTI_Callback+0xd0>)
 8002324:	f001 f962 	bl	80035ec <HAL_GPIO_ReadPin>
 8002328:	4603      	mov	r3, r0
 800232a:	2b01      	cmp	r3, #1
 800232c:	d047      	beq.n	80023be <DHT11_EXTI_Callback+0xbe>
      // Rising edge
   }
   else
   {
      // Falling edge (bit 해석)
      if (bit_index == 0) {
 800232e:	4b29      	ldr	r3, [pc, #164]	@ (80023d4 <DHT11_EXTI_Callback+0xd4>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10a      	bne.n	800234e <DHT11_EXTI_Callback+0x4e>
         if (duration < 70 || duration > 90) {
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b45      	cmp	r3, #69	@ 0x45
 800233c:	d902      	bls.n	8002344 <DHT11_EXTI_Callback+0x44>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b5a      	cmp	r3, #90	@ 0x5a
 8002342:	d92d      	bls.n	80023a0 <DHT11_EXTI_Callback+0xa0>
            printf("DHT11 LOW : %lu\n", duration);
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	4824      	ldr	r0, [pc, #144]	@ (80023d8 <DHT11_EXTI_Callback+0xd8>)
 8002348:	f004 fcea 	bl	8006d20 <iprintf>
 800234c:	e028      	b.n	80023a0 <DHT11_EXTI_Callback+0xa0>
         }
//      } else if (bit_index == 1) {
//         if (duration < 70 || duration > 90) {
//            printf("DHT11 HIGH : %lu \n", duration);
//         }
      } else if (bit_index >= 1 && bit_index <= 40) {
 800234e:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <DHT11_EXTI_Callback+0xd4>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d023      	beq.n	80023a0 <DHT11_EXTI_Callback+0xa0>
 8002358:	4b1e      	ldr	r3, [pc, #120]	@ (80023d4 <DHT11_EXTI_Callback+0xd4>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b28      	cmp	r3, #40	@ 0x28
 8002360:	d81e      	bhi.n	80023a0 <DHT11_EXTI_Callback+0xa0>
         // bit_index 1~40 이 실제 40bit 데이터
         uint8_t byte_idx = (bit_index - 1) / 8;
 8002362:	4b1c      	ldr	r3, [pc, #112]	@ (80023d4 <DHT11_EXTI_Callback+0xd4>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	da00      	bge.n	8002370 <DHT11_EXTI_Callback+0x70>
 800236e:	3307      	adds	r3, #7
 8002370:	10db      	asrs	r3, r3, #3
 8002372:	71fb      	strb	r3, [r7, #7]

         data[byte_idx] <<= 1;
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	4a19      	ldr	r2, [pc, #100]	@ (80023dc <DHT11_EXTI_Callback+0xdc>)
 8002378:	5cd3      	ldrb	r3, [r2, r3]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	0052      	lsls	r2, r2, #1
 8002380:	b2d1      	uxtb	r1, r2
 8002382:	4a16      	ldr	r2, [pc, #88]	@ (80023dc <DHT11_EXTI_Callback+0xdc>)
 8002384:	54d1      	strb	r1, [r2, r3]

         if (duration > 40)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b28      	cmp	r3, #40	@ 0x28
 800238a:	d909      	bls.n	80023a0 <DHT11_EXTI_Callback+0xa0>
            data[byte_idx] |= 1;
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	4a13      	ldr	r2, [pc, #76]	@ (80023dc <DHT11_EXTI_Callback+0xdc>)
 8002390:	5cd3      	ldrb	r3, [r2, r3]
 8002392:	b2da      	uxtb	r2, r3
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	b2d1      	uxtb	r1, r2
 800239c:	4a0f      	ldr	r2, [pc, #60]	@ (80023dc <DHT11_EXTI_Callback+0xdc>)
 800239e:	54d1      	strb	r1, [r2, r3]

      }
      bit_index++;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <DHT11_EXTI_Callback+0xd4>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	3301      	adds	r3, #1
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <DHT11_EXTI_Callback+0xd4>)
 80023ac:	701a      	strb	r2, [r3, #0]

      //40비트 수신 완료후 외부 인터럽트 비활성화
      if (bit_index > 40)
 80023ae:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <DHT11_EXTI_Callback+0xd4>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b28      	cmp	r3, #40	@ 0x28
 80023b6:	d902      	bls.n	80023be <DHT11_EXTI_Callback+0xbe>
      {
         HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80023b8:	2028      	movs	r0, #40	@ 0x28
 80023ba:	f000 fed8 	bl	800316e <HAL_NVIC_DisableIRQ>
      }
   }
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000254 	.word	0x20000254
 80023cc:	20000420 	.word	0x20000420
 80023d0:	40020400 	.word	0x40020400
 80023d4:	20000424 	.word	0x20000424
 80023d8:	08007f7c 	.word	0x08007f7c
 80023dc:	20000428 	.word	0x20000428

080023e0 <FND_WriteData>:
		fndDispDp &= ~dpData;
}

// write fndDispNum
void FND_WriteData(uint16_t data)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 80023ea:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <FND_WriteData+0x1c>)
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	8013      	strh	r3, [r2, #0]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	2000042e 	.word	0x2000042e

08002400 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 8002404:	4b80      	ldr	r3, [pc, #512]	@ (8002608 <FND_DispDataCallBack+0x208>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	425a      	negs	r2, r3
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	f002 0207 	and.w	r2, r2, #7
 8002414:	bf58      	it	pl
 8002416:	4253      	negpl	r3, r2
 8002418:	4a7b      	ldr	r2, [pc, #492]	@ (8002608 <FND_DispDataCallBack+0x208>)
 800241a:	6013      	str	r3, [r2, #0]

	switch(digitPos)
 800241c:	4b7a      	ldr	r3, [pc, #488]	@ (8002608 <FND_DispDataCallBack+0x208>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b07      	cmp	r3, #7
 8002422:	f200 80ee 	bhi.w	8002602 <FND_DispDataCallBack+0x202>
 8002426:	a201      	add	r2, pc, #4	@ (adr r2, 800242c <FND_DispDataCallBack+0x2c>)
 8002428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242c:	0800244d 	.word	0x0800244d
 8002430:	0800247b 	.word	0x0800247b
 8002434:	080024b3 	.word	0x080024b3
 8002438:	080024eb 	.word	0x080024eb
 800243c:	08002523 	.word	0x08002523
 8002440:	0800255b 	.word	0x0800255b
 8002444:	08002593 	.word	0x08002593
 8002448:	080025cb 	.word	0x080025cb
	{
	case DIGIT_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 800244c:	f000 f900 	bl	8002650 <FND_DispOffAll>
		FND_DispDigit(fndDispNum%10);
 8002450:	4b6e      	ldr	r3, [pc, #440]	@ (800260c <FND_DispDataCallBack+0x20c>)
 8002452:	881a      	ldrh	r2, [r3, #0]
 8002454:	4b6e      	ldr	r3, [pc, #440]	@ (8002610 <FND_DispDataCallBack+0x210>)
 8002456:	fba3 1302 	umull	r1, r3, r3, r2
 800245a:	08d9      	lsrs	r1, r3, #3
 800245c:	460b      	mov	r3, r1
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	b29b      	uxth	r3, r3
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f913 	bl	8002694 <FND_DispDigit>
		FND_DispOn(digitPos);
 800246e:	4b66      	ldr	r3, [pc, #408]	@ (8002608 <FND_DispDataCallBack+0x208>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f8d4 	bl	8002620 <FND_DispOn>
		break;
 8002478:	e0c3      	b.n	8002602 <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 800247a:	f000 f8e9 	bl	8002650 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/10%10);
 800247e:	4b63      	ldr	r3, [pc, #396]	@ (800260c <FND_DispDataCallBack+0x20c>)
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	4a63      	ldr	r2, [pc, #396]	@ (8002610 <FND_DispDataCallBack+0x210>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	08db      	lsrs	r3, r3, #3
 800248a:	b29a      	uxth	r2, r3
 800248c:	4b60      	ldr	r3, [pc, #384]	@ (8002610 <FND_DispDataCallBack+0x210>)
 800248e:	fba3 1302 	umull	r1, r3, r3, r2
 8002492:	08d9      	lsrs	r1, r3, #3
 8002494:	460b      	mov	r3, r1
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	b29b      	uxth	r3, r3
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 f8f7 	bl	8002694 <FND_DispDigit>
		FND_DispOn(digitPos);
 80024a6:	4b58      	ldr	r3, [pc, #352]	@ (8002608 <FND_DispDataCallBack+0x208>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f8b8 	bl	8002620 <FND_DispOn>
		break;
 80024b0:	e0a7      	b.n	8002602 <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80024b2:	f000 f8cd 	bl	8002650 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/100%10);
 80024b6:	4b55      	ldr	r3, [pc, #340]	@ (800260c <FND_DispDataCallBack+0x20c>)
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	4a56      	ldr	r2, [pc, #344]	@ (8002614 <FND_DispDataCallBack+0x214>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	4b52      	ldr	r3, [pc, #328]	@ (8002610 <FND_DispDataCallBack+0x210>)
 80024c6:	fba3 1302 	umull	r1, r3, r3, r2
 80024ca:	08d9      	lsrs	r1, r3, #3
 80024cc:	460b      	mov	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 f8db 	bl	8002694 <FND_DispDigit>
		FND_DispOn(digitPos);
 80024de:	4b4a      	ldr	r3, [pc, #296]	@ (8002608 <FND_DispDataCallBack+0x208>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f89c 	bl	8002620 <FND_DispOn>
		break;
 80024e8:	e08b      	b.n	8002602 <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80024ea:	f000 f8b1 	bl	8002650 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/1000%10);
 80024ee:	4b47      	ldr	r3, [pc, #284]	@ (800260c <FND_DispDataCallBack+0x20c>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	4a49      	ldr	r2, [pc, #292]	@ (8002618 <FND_DispDataCallBack+0x218>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	4b44      	ldr	r3, [pc, #272]	@ (8002610 <FND_DispDataCallBack+0x210>)
 80024fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002502:	08d9      	lsrs	r1, r3, #3
 8002504:	460b      	mov	r3, r1
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	b29b      	uxth	r3, r3
 8002510:	4618      	mov	r0, r3
 8002512:	f000 f8bf 	bl	8002694 <FND_DispDigit>
		FND_DispOn(digitPos);
 8002516:	4b3c      	ldr	r3, [pc, #240]	@ (8002608 <FND_DispDataCallBack+0x208>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f880 	bl	8002620 <FND_DispOn>
		break;
 8002520:	e06f      	b.n	8002602 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8002522:	f000 f895 	bl	8002650 <FND_DispOffAll>
		if (fndDispDp & (1<<0)){
 8002526:	4b3d      	ldr	r3, [pc, #244]	@ (800261c <FND_DispDataCallBack+0x21c>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 8002532:	200a      	movs	r0, #10
 8002534:	f000 f8ae 	bl	8002694 <FND_DispDigit>
 8002538:	e002      	b.n	8002540 <FND_DispDataCallBack+0x140>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 800253a:	200b      	movs	r0, #11
 800253c:	f000 f8aa 	bl	8002694 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002540:	4b31      	ldr	r3, [pc, #196]	@ (8002608 <FND_DispDataCallBack+0x208>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	425a      	negs	r2, r3
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	f002 0203 	and.w	r2, r2, #3
 800254e:	bf58      	it	pl
 8002550:	4253      	negpl	r3, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f864 	bl	8002620 <FND_DispOn>
		break;
 8002558:	e053      	b.n	8002602 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 800255a:	f000 f879 	bl	8002650 <FND_DispOffAll>
		if (fndDispDp & (1<<1)){
 800255e:	4b2f      	ldr	r3, [pc, #188]	@ (800261c <FND_DispDataCallBack+0x21c>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 800256a:	200a      	movs	r0, #10
 800256c:	f000 f892 	bl	8002694 <FND_DispDigit>
 8002570:	e002      	b.n	8002578 <FND_DispDataCallBack+0x178>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8002572:	200b      	movs	r0, #11
 8002574:	f000 f88e 	bl	8002694 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002578:	4b23      	ldr	r3, [pc, #140]	@ (8002608 <FND_DispDataCallBack+0x208>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	425a      	negs	r2, r3
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	f002 0203 	and.w	r2, r2, #3
 8002586:	bf58      	it	pl
 8002588:	4253      	negpl	r3, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f848 	bl	8002620 <FND_DispOn>
		break;
 8002590:	e037      	b.n	8002602 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8002592:	f000 f85d 	bl	8002650 <FND_DispOffAll>
		if (fndDispDp & (1<<2)){
 8002596:	4b21      	ldr	r3, [pc, #132]	@ (800261c <FND_DispDataCallBack+0x21c>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 80025a2:	200a      	movs	r0, #10
 80025a4:	f000 f876 	bl	8002694 <FND_DispDigit>
 80025a8:	e002      	b.n	80025b0 <FND_DispDataCallBack+0x1b0>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 80025aa:	200b      	movs	r0, #11
 80025ac:	f000 f872 	bl	8002694 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80025b0:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <FND_DispDataCallBack+0x208>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	425a      	negs	r2, r3
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	f002 0203 	and.w	r2, r2, #3
 80025be:	bf58      	it	pl
 80025c0:	4253      	negpl	r3, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f82c 	bl	8002620 <FND_DispOn>
		break;
 80025c8:	e01b      	b.n	8002602 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80025ca:	f000 f841 	bl	8002650 <FND_DispOffAll>
		if (fndDispDp & (1<<3)){
 80025ce:	4b13      	ldr	r3, [pc, #76]	@ (800261c <FND_DispDataCallBack+0x21c>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 80025da:	200a      	movs	r0, #10
 80025dc:	f000 f85a 	bl	8002694 <FND_DispDigit>
 80025e0:	e002      	b.n	80025e8 <FND_DispDataCallBack+0x1e8>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 80025e2:	200b      	movs	r0, #11
 80025e4:	f000 f856 	bl	8002694 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80025e8:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <FND_DispDataCallBack+0x208>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	425a      	negs	r2, r3
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	f002 0203 	and.w	r2, r2, #3
 80025f6:	bf58      	it	pl
 80025f8:	4253      	negpl	r3, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f810 	bl	8002620 <FND_DispOn>
		break;
 8002600:	bf00      	nop
	}
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000434 	.word	0x20000434
 800260c:	2000042e 	.word	0x2000042e
 8002610:	cccccccd 	.word	0xcccccccd
 8002614:	51eb851f 	.word	0x51eb851f
 8002618:	10624dd3 	.word	0x10624dd3
 800261c:	20000430 	.word	0x20000430

08002620 <FND_DispOn>:
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
}
*/

void FND_DispOn(int fndPos)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, RESET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8002628:	4a08      	ldr	r2, [pc, #32]	@ (800264c <FND_DispOn+0x2c>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002630:	4a06      	ldr	r2, [pc, #24]	@ (800264c <FND_DispOn+0x2c>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	b29b      	uxth	r3, r3
 800263c:	2200      	movs	r2, #0
 800263e:	4619      	mov	r1, r3
 8002640:	f000 ffec 	bl	800361c <HAL_GPIO_WritePin>
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000004 	.word	0x20000004

08002650 <FND_DispOffAll>:

void FND_DispOffAll()
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++) {
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	e010      	b.n	800267e <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 800265c:	4a0c      	ldr	r2, [pc, #48]	@ (8002690 <FND_DispOffAll+0x40>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002664:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <FND_DispOffAll+0x40>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	b29b      	uxth	r3, r3
 8002670:	2201      	movs	r2, #1
 8002672:	4619      	mov	r1, r3
 8002674:	f000 ffd2 	bl	800361c <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3301      	adds	r3, #1
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b03      	cmp	r3, #3
 8002682:	ddeb      	ble.n	800265c <FND_DispOffAll+0xc>
	}
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000004 	.word	0x20000004

08002694 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 800269e:	4a1f      	ldr	r2, [pc, #124]	@ (800271c <FND_DispDigit+0x88>)
 80026a0:	f107 0308 	add.w	r3, r7, #8
 80026a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80026a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    0x6F,  // 9 => 01101111
	    0x80,  // 10(dp) => 10000000
	    0x00,  // 11(off)=> 00000000
	};

	for (int i=0; i<8; i++) {
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e02c      	b.n	800270a <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	3318      	adds	r3, #24
 80026b4:	443b      	add	r3, r7
 80026b6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80026ba:	461a      	mov	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa42 f303 	asr.w	r3, r2, r3
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10e      	bne.n	80026e8 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 80026ca:	4a15      	ldr	r2, [pc, #84]	@ (8002720 <FND_DispDigit+0x8c>)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80026d2:	4a13      	ldr	r2, [pc, #76]	@ (8002720 <FND_DispDigit+0x8c>)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2200      	movs	r2, #0
 80026e0:	4619      	mov	r1, r3
 80026e2:	f000 ff9b 	bl	800361c <HAL_GPIO_WritePin>
 80026e6:	e00d      	b.n	8002704 <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 80026e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002720 <FND_DispDigit+0x8c>)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80026f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002720 <FND_DispDigit+0x8c>)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2201      	movs	r2, #1
 80026fe:	4619      	mov	r1, r3
 8002700:	f000 ff8c 	bl	800361c <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3301      	adds	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b07      	cmp	r3, #7
 800270e:	ddcf      	ble.n	80026b0 <FND_DispDigit+0x1c>
		}
	}
}
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	08007f90 	.word	0x08007f90
 8002720:	20000024 	.word	0x20000024

08002724 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 800272c:	4a18      	ldr	r2, [pc, #96]	@ (8002790 <LCD_Init+0x6c>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 8002732:	2032      	movs	r0, #50	@ 0x32
 8002734:	f000 fbb0 	bl	8002e98 <HAL_Delay>
	LCD_cmdMode();
 8002738:	f000 f852 	bl	80027e0 <LCD_cmdMode>
	LCD_writeMode();
 800273c:	f000 f874 	bl	8002828 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 8002740:	2030      	movs	r0, #48	@ 0x30
 8002742:	f000 f8a7 	bl	8002894 <LCD_sendNibbleData>
	HAL_Delay(5);
 8002746:	2005      	movs	r0, #5
 8002748:	f000 fba6 	bl	8002e98 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 800274c:	2030      	movs	r0, #48	@ 0x30
 800274e:	f000 f8a1 	bl	8002894 <LCD_sendNibbleData>
	HAL_Delay(1);
 8002752:	2001      	movs	r0, #1
 8002754:	f000 fba0 	bl	8002e98 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8002758:	2030      	movs	r0, #48	@ 0x30
 800275a:	f000 f89b 	bl	8002894 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 800275e:	2020      	movs	r0, #32
 8002760:	f000 f898 	bl	8002894 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 8002764:	2028      	movs	r0, #40	@ 0x28
 8002766:	f000 f8b9 	bl	80028dc <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 800276a:	2008      	movs	r0, #8
 800276c:	f000 f8b6 	bl	80028dc <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 8002770:	2001      	movs	r0, #1
 8002772:	f000 f8b3 	bl	80028dc <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 8002776:	2006      	movs	r0, #6
 8002778:	f000 f8b0 	bl	80028dc <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 800277c:	200c      	movs	r0, #12
 800277e:	f000 f8ad 	bl	80028dc <LCD_sendData>
	LCD_backLightOn();
 8002782:	f000 f81d 	bl	80027c0 <LCD_backLightOn>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2000043c 	.word	0x2000043c

08002794 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af02      	add	r7, sp, #8
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 800279e:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <LCD_sendI2C+0x28>)
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	1dfa      	adds	r2, r7, #7
 80027a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2301      	movs	r3, #1
 80027ac:	214e      	movs	r1, #78	@ 0x4e
 80027ae:	f001 f8b7 	bl	8003920 <HAL_I2C_Master_Transmit>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	2000043c 	.word	0x2000043c

080027c0 <LCD_backLightOn>:

void LCD_backLightOn()
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 80027c4:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <LCD_backLightOn+0x1c>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	f043 0308 	orr.w	r3, r3, #8
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4b03      	ldr	r3, [pc, #12]	@ (80027dc <LCD_backLightOn+0x1c>)
 80027d0:	701a      	strb	r2, [r3, #0]
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	20000438 	.word	0x20000438

080027e0 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 80027e4:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <LCD_cmdMode+0x20>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <LCD_cmdMode+0x20>)
 80027f0:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80027f2:	4b03      	ldr	r3, [pc, #12]	@ (8002800 <LCD_cmdMode+0x20>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ffcc 	bl	8002794 <LCD_sendI2C>
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000438 	.word	0x20000438

08002804 <LCD_charMode>:

void LCD_charMode()
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <LCD_charMode+0x20>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <LCD_charMode+0x20>)
 8002814:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002816:	4b03      	ldr	r3, [pc, #12]	@ (8002824 <LCD_charMode+0x20>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ffba 	bl	8002794 <LCD_sendI2C>
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000438 	.word	0x20000438

08002828 <LCD_writeMode>:

void LCD_writeMode()
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <LCD_writeMode+0x20>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	f023 0302 	bic.w	r3, r3, #2
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4b04      	ldr	r3, [pc, #16]	@ (8002848 <LCD_writeMode+0x20>)
 8002838:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800283a:	4b03      	ldr	r3, [pc, #12]	@ (8002848 <LCD_writeMode+0x20>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ffa8 	bl	8002794 <LCD_sendI2C>
}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000438 	.word	0x20000438

0800284c <LCD_E_High>:

void LCD_E_High()
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8002850:	4b06      	ldr	r3, [pc, #24]	@ (800286c <LCD_E_High+0x20>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4b04      	ldr	r3, [pc, #16]	@ (800286c <LCD_E_High+0x20>)
 800285c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800285e:	4b03      	ldr	r3, [pc, #12]	@ (800286c <LCD_E_High+0x20>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff96 	bl	8002794 <LCD_sendI2C>
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000438 	.word	0x20000438

08002870 <LCD_E_Low>:

void LCD_E_Low()
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8002874:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <LCD_E_Low+0x20>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	f023 0304 	bic.w	r3, r3, #4
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <LCD_E_Low+0x20>)
 8002880:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002882:	4b03      	ldr	r3, [pc, #12]	@ (8002890 <LCD_E_Low+0x20>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff84 	bl	8002794 <LCD_sendI2C>
}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000438 	.word	0x20000438

08002894 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 800289e:	f7ff ffd5 	bl	800284c <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	f023 030f 	bic.w	r3, r3, #15
 80028aa:	b25a      	sxtb	r2, r3
 80028ac:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <LCD_sendNibbleData+0x44>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	b25b      	sxtb	r3, r3
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	b25b      	sxtb	r3, r3
 80028b8:	4313      	orrs	r3, r2
 80028ba:	b25b      	sxtb	r3, r3
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <LCD_sendNibbleData+0x44>)
 80028c0:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80028c2:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <LCD_sendNibbleData+0x44>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ff64 	bl	8002794 <LCD_sendI2C>
	LCD_E_Low();
 80028cc:	f7ff ffd0 	bl	8002870 <LCD_E_Low>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000438 	.word	0x20000438

080028dc <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ffd3 	bl	8002894 <LCD_sendNibbleData>

	data = data << 4;
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ffcc 	bl	8002894 <LCD_sendNibbleData>
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 800290e:	f7ff ff8b 	bl	8002828 <LCD_writeMode>
	LCD_cmdMode();
 8002912:	f7ff ff65 	bl	80027e0 <LCD_cmdMode>
	LCD_sendData(data);
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ffdf 	bl	80028dc <LCD_sendData>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8002930:	f7ff ff7a 	bl	8002828 <LCD_writeMode>
	LCD_charMode();
 8002934:	f7ff ff66 	bl	8002804 <LCD_charMode>
	LCD_sendData(data);
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ffce 	bl	80028dc <LCD_sendData>
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <LCD_writeString>:

void LCD_writeString(char *str)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++) {
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	e009      	b.n	800296a <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ffe1 	bl	8002926 <LCD_writeCharData>
	for (int i=0; str[i]; i++) {
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3301      	adds	r3, #1
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	4413      	add	r3, r2
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1ef      	bne.n	8002956 <LCD_writeString+0xe>
	}
}
 8002976:	bf00      	nop
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	460a      	mov	r2, r1
 800298a:	71fb      	strb	r3, [r7, #7]
 800298c:	4613      	mov	r3, r2
 800298e:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8002990:	79bb      	ldrb	r3, [r7, #6]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	019b      	lsls	r3, r3, #6
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	79bb      	ldrb	r3, [r7, #6]
 80029a8:	4413      	add	r3, r2
 80029aa:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	3b80      	subs	r3, #128	@ 0x80
 80029b0:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 80029b2:	7bbb      	ldrb	r3, [r7, #14]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ffa5 	bl	8002904 <LCD_writeCmdData>
}
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	603a      	str	r2, [r7, #0]
 80029cc:	71fb      	strb	r3, [r7, #7]
 80029ce:	460b      	mov	r3, r1
 80029d0:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 80029d2:	79ba      	ldrb	r2, [r7, #6]
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ffd1 	bl	8002980 <LCD_gotoXY>
	LCD_writeString(str);
 80029de:	6838      	ldr	r0, [r7, #0]
 80029e0:	f7ff ffb2 	bl	8002948 <LCD_writeString>
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <LedBar_Write>:
		{GPIOC, GPIO_PIN_3}
};


void LedBar_Write(uint8_t data)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<8; i++) {
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	e027      	b.n	8002a4c <LedBar_Write+0x60>
		if ((data & (1<<i)) == 0) {
 80029fc:	79fa      	ldrb	r2, [r7, #7]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	fa42 f303 	asr.w	r3, r2, r3
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10e      	bne.n	8002a2a <LedBar_Write+0x3e>
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, RESET);
 8002a0c:	4a13      	ldr	r2, [pc, #76]	@ (8002a5c <LedBar_Write+0x70>)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002a14:	4a11      	ldr	r2, [pc, #68]	@ (8002a5c <LedBar_Write+0x70>)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2200      	movs	r2, #0
 8002a22:	4619      	mov	r1, r3
 8002a24:	f000 fdfa 	bl	800361c <HAL_GPIO_WritePin>
 8002a28:	e00d      	b.n	8002a46 <LedBar_Write+0x5a>
		}
		else {
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, SET);
 8002a2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a5c <LedBar_Write+0x70>)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002a32:	4a0a      	ldr	r2, [pc, #40]	@ (8002a5c <LedBar_Write+0x70>)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4619      	mov	r1, r3
 8002a42:	f000 fdeb 	bl	800361c <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b07      	cmp	r3, #7
 8002a50:	ddd4      	ble.n	80029fc <LedBar_Write+0x10>
		}
	}
}
 8002a52:	bf00      	nop
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000064 	.word	0x20000064

08002a60 <Buzzer_Init>:

static TIM_HandleTypeDef *hbuzzerTim;
static uint32_t hbuzzerTimChannel;

void Buzzer_Init(TIM_HandleTypeDef *hTim,uint32_t Channel)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
	hbuzzerTim = hTim;
 8002a6a:	4a06      	ldr	r2, [pc, #24]	@ (8002a84 <Buzzer_Init+0x24>)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6013      	str	r3, [r2, #0]
	hbuzzerTimChannel = Channel;
 8002a70:	4a05      	ldr	r2, [pc, #20]	@ (8002a88 <Buzzer_Init+0x28>)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6013      	str	r3, [r2, #0]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000440 	.word	0x20000440
 8002a88:	20000444 	.word	0x20000444

08002a8c <Buzzer_SetFreq>:


void Buzzer_SetFreq(uint32_t freq)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	if(freq < 100) freq = 100;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b63      	cmp	r3, #99	@ 0x63
 8002a98:	d802      	bhi.n	8002aa0 <Buzzer_SetFreq+0x14>
 8002a9a:	2364      	movs	r3, #100	@ 0x64
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	e007      	b.n	8002ab0 <Buzzer_SetFreq+0x24>
	else if (freq > 10000) freq = 10000;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d902      	bls.n	8002ab0 <Buzzer_SetFreq+0x24>
 8002aaa:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002aae:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(hbuzzerTim,1000000/freq-1);
 8002ab0:	4a24      	ldr	r2, [pc, #144]	@ (8002b44 <Buzzer_SetFreq+0xb8>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab8:	4b23      	ldr	r3, [pc, #140]	@ (8002b48 <Buzzer_SetFreq+0xbc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3a01      	subs	r2, #1
 8002ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002ac2:	4a20      	ldr	r2, [pc, #128]	@ (8002b44 <Buzzer_SetFreq+0xb8>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aca:	4b1f      	ldr	r3, [pc, #124]	@ (8002b48 <Buzzer_SetFreq+0xbc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3a01      	subs	r2, #1
 8002ad0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(hbuzzerTim,hbuzzerTimChannel,1000000/freq/2-1);
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b4c <Buzzer_SetFreq+0xc0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <Buzzer_SetFreq+0x62>
 8002ada:	4a1d      	ldr	r2, [pc, #116]	@ (8002b50 <Buzzer_SetFreq+0xc4>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae2:	4b19      	ldr	r3, [pc, #100]	@ (8002b48 <Buzzer_SetFreq+0xbc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	3a01      	subs	r2, #1
 8002aea:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002aec:	e024      	b.n	8002b38 <Buzzer_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hbuzzerTim,hbuzzerTimChannel,1000000/freq/2-1);
 8002aee:	4b17      	ldr	r3, [pc, #92]	@ (8002b4c <Buzzer_SetFreq+0xc0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d109      	bne.n	8002b0a <Buzzer_SetFreq+0x7e>
 8002af6:	4a16      	ldr	r2, [pc, #88]	@ (8002b50 <Buzzer_SetFreq+0xc4>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afe:	4a12      	ldr	r2, [pc, #72]	@ (8002b48 <Buzzer_SetFreq+0xbc>)
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002b08:	e016      	b.n	8002b38 <Buzzer_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hbuzzerTim,hbuzzerTimChannel,1000000/freq/2-1);
 8002b0a:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <Buzzer_SetFreq+0xc0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d109      	bne.n	8002b26 <Buzzer_SetFreq+0x9a>
 8002b12:	4a0f      	ldr	r2, [pc, #60]	@ (8002b50 <Buzzer_SetFreq+0xc4>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8002b48 <Buzzer_SetFreq+0xbc>)
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002b24:	e008      	b.n	8002b38 <Buzzer_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hbuzzerTim,hbuzzerTimChannel,1000000/freq/2-1);
 8002b26:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <Buzzer_SetFreq+0xc4>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	4a06      	ldr	r2, [pc, #24]	@ (8002b48 <Buzzer_SetFreq+0xbc>)
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	000f4240 	.word	0x000f4240
 8002b48:	20000440 	.word	0x20000440
 8002b4c:	20000444 	.word	0x20000444
 8002b50:	0007a120 	.word	0x0007a120

08002b54 <Buzzer_Start>:

void Buzzer_Start()
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hbuzzerTim, hbuzzerTimChannel);
 8002b58:	4b04      	ldr	r3, [pc, #16]	@ (8002b6c <Buzzer_Start+0x18>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a04      	ldr	r2, [pc, #16]	@ (8002b70 <Buzzer_Start+0x1c>)
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f002 f852 	bl	8004c0c <HAL_TIM_PWM_Start>
}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000440 	.word	0x20000440
 8002b70:	20000444 	.word	0x20000444

08002b74 <Buzzer_Stop>:

void Buzzer_Stop()
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hbuzzerTim, hbuzzerTimChannel);
 8002b78:	4b04      	ldr	r3, [pc, #16]	@ (8002b8c <Buzzer_Stop+0x18>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a04      	ldr	r2, [pc, #16]	@ (8002b90 <Buzzer_Stop+0x1c>)
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f002 f8f2 	bl	8004d6c <HAL_TIM_PWM_Stop>
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000440 	.word	0x20000440
 8002b90:	20000444 	.word	0x20000444

08002b94 <motor_Init>:

static TIM_HandleTypeDef *hmotorTim;
static uint32_t hmotorTimChannel;

void motor_Init(TIM_HandleTypeDef *hTim,uint32_t Channel)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
	hmotorTim = hTim;
 8002b9e:	4a06      	ldr	r2, [pc, #24]	@ (8002bb8 <motor_Init+0x24>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6013      	str	r3, [r2, #0]
	hmotorTimChannel = Channel;
 8002ba4:	4a05      	ldr	r2, [pc, #20]	@ (8002bbc <motor_Init+0x28>)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6013      	str	r3, [r2, #0]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	20000448 	.word	0x20000448
 8002bbc:	2000044c 	.word	0x2000044c

08002bc0 <motor_SetDuty>:


void motor_SetDuty(uint32_t Duty)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	if(Duty > 100) Duty = 100;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b64      	cmp	r3, #100	@ 0x64
 8002bcc:	d901      	bls.n	8002bd2 <motor_SetDuty+0x12>
 8002bce:	2364      	movs	r3, #100	@ 0x64
 8002bd0:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(hmotorTim,hmotorTimChannel,Duty);
 8002bd2:	4b14      	ldr	r3, [pc, #80]	@ (8002c24 <motor_SetDuty+0x64>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d105      	bne.n	8002be6 <motor_SetDuty+0x26>
 8002bda:	4b13      	ldr	r3, [pc, #76]	@ (8002c28 <motor_SetDuty+0x68>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002be4:	e018      	b.n	8002c18 <motor_SetDuty+0x58>
	__HAL_TIM_SET_COMPARE(hmotorTim,hmotorTimChannel,Duty);
 8002be6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <motor_SetDuty+0x64>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d105      	bne.n	8002bfa <motor_SetDuty+0x3a>
 8002bee:	4b0e      	ldr	r3, [pc, #56]	@ (8002c28 <motor_SetDuty+0x68>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002bf8:	e00e      	b.n	8002c18 <motor_SetDuty+0x58>
	__HAL_TIM_SET_COMPARE(hmotorTim,hmotorTimChannel,Duty);
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <motor_SetDuty+0x64>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d105      	bne.n	8002c0e <motor_SetDuty+0x4e>
 8002c02:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <motor_SetDuty+0x68>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002c0c:	e004      	b.n	8002c18 <motor_SetDuty+0x58>
	__HAL_TIM_SET_COMPARE(hmotorTim,hmotorTimChannel,Duty);
 8002c0e:	4b06      	ldr	r3, [pc, #24]	@ (8002c28 <motor_SetDuty+0x68>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	2000044c 	.word	0x2000044c
 8002c28:	20000448 	.word	0x20000448

08002c2c <motor_Start>:

void motor_Start()
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hmotorTim, hmotorTimChannel);
 8002c30:	4b04      	ldr	r3, [pc, #16]	@ (8002c44 <motor_Start+0x18>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a04      	ldr	r2, [pc, #16]	@ (8002c48 <motor_Start+0x1c>)
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f001 ffe6 	bl	8004c0c <HAL_TIM_PWM_Start>
}
 8002c40:	bf00      	nop
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000448 	.word	0x20000448
 8002c48:	2000044c 	.word	0x2000044c

08002c4c <motor_Stop>:

void motor_Stop()
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hmotorTim, hmotorTimChannel);
 8002c50:	4b04      	ldr	r3, [pc, #16]	@ (8002c64 <motor_Stop+0x18>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a04      	ldr	r2, [pc, #16]	@ (8002c68 <motor_Stop+0x1c>)
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f002 f886 	bl	8004d6c <HAL_TIM_PWM_Stop>
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20000448 	.word	0x20000448
 8002c68:	2000044c 	.word	0x2000044c

08002c6c <delay_us>:
#define FILTER_SIZE 5

UltraSonic_TypeDef hultra;

void delay_us(uint16_t us)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	80fb      	strh	r3, [r7, #6]
   __HAL_TIM_SET_COUNTER(&htim5, 0);
 8002c76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca0 <delay_us+0x34>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	625a      	str	r2, [r3, #36]	@ 0x24
   HAL_TIM_Base_Start(&htim5);
 8002c7e:	4808      	ldr	r0, [pc, #32]	@ (8002ca0 <delay_us+0x34>)
 8002c80:	f001 fe90 	bl	80049a4 <HAL_TIM_Base_Start>

   while(__HAL_TIM_GET_COUNTER(&htim5) < us);
 8002c84:	bf00      	nop
 8002c86:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <delay_us+0x34>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d3f9      	bcc.n	8002c86 <delay_us+0x1a>
   HAL_TIM_Base_Stop(&htim5);
 8002c92:	4803      	ldr	r0, [pc, #12]	@ (8002ca0 <delay_us+0x34>)
 8002c94:	f001 fee0 	bl	8004a58 <HAL_TIM_Base_Stop>
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	2000029c 	.word	0x2000029c

08002ca4 <UltraSonic_Init>:

void UltraSonic_Init(GPIO_TypeDef *Trig_GPIOx, uint16_t Trig_pinNum,  GPIO_TypeDef *Echo_GPIOx, uint16_t Echo_pinNum) {
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	817b      	strh	r3, [r7, #10]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	813b      	strh	r3, [r7, #8]
   hultra.Trig_GPIOx = Trig_GPIOx;
 8002cb8:	4a08      	ldr	r2, [pc, #32]	@ (8002cdc <UltraSonic_Init+0x38>)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6013      	str	r3, [r2, #0]
   hultra.Trig_pinNum = Trig_pinNum;
 8002cbe:	4a07      	ldr	r2, [pc, #28]	@ (8002cdc <UltraSonic_Init+0x38>)
 8002cc0:	897b      	ldrh	r3, [r7, #10]
 8002cc2:	8093      	strh	r3, [r2, #4]
   hultra.Echo_GPIOx = Echo_GPIOx;
 8002cc4:	4a05      	ldr	r2, [pc, #20]	@ (8002cdc <UltraSonic_Init+0x38>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6093      	str	r3, [r2, #8]
   hultra.Echo_pinNum = Echo_pinNum;
 8002cca:	4a04      	ldr	r2, [pc, #16]	@ (8002cdc <UltraSonic_Init+0x38>)
 8002ccc:	893b      	ldrh	r3, [r7, #8]
 8002cce:	8193      	strh	r3, [r2, #12]
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	20000450 	.word	0x20000450

08002ce0 <UltraSonic_GetDistance>:

int UltraSonic_GetDistance ()
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
   uint32_t count = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
   int distance = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]

   // trig
   HAL_GPIO_WritePin(hultra.Trig_GPIOx, hultra.Trig_pinNum, GPIO_PIN_SET);
 8002cee:	4b2e      	ldr	r3, [pc, #184]	@ (8002da8 <UltraSonic_GetDistance+0xc8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8002da8 <UltraSonic_GetDistance+0xc8>)
 8002cf4:	8891      	ldrh	r1, [r2, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fc8f 	bl	800361c <HAL_GPIO_WritePin>
   delay_us(10);
 8002cfe:	200a      	movs	r0, #10
 8002d00:	f7ff ffb4 	bl	8002c6c <delay_us>
   HAL_GPIO_WritePin(hultra.Trig_GPIOx, hultra.Trig_pinNum, GPIO_PIN_RESET);
 8002d04:	4b28      	ldr	r3, [pc, #160]	@ (8002da8 <UltraSonic_GetDistance+0xc8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a27      	ldr	r2, [pc, #156]	@ (8002da8 <UltraSonic_GetDistance+0xc8>)
 8002d0a:	8891      	ldrh	r1, [r2, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fc84 	bl	800361c <HAL_GPIO_WritePin>

   // wait echo . high
   uint32_t timeout = 60000;
 8002d14:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002d18:	60fb      	str	r3, [r7, #12]
   while(!(HAL_GPIO_ReadPin(hultra.Echo_GPIOx, hultra.Echo_pinNum)))
 8002d1a:	e008      	b.n	8002d2e <UltraSonic_GetDistance+0x4e>
   {
      if (--timeout == 0)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <UltraSonic_GetDistance+0x4e>
         return -1;
 8002d28:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2c:	e037      	b.n	8002d9e <UltraSonic_GetDistance+0xbe>
   while(!(HAL_GPIO_ReadPin(hultra.Echo_GPIOx, hultra.Echo_pinNum)))
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002da8 <UltraSonic_GetDistance+0xc8>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	4a1d      	ldr	r2, [pc, #116]	@ (8002da8 <UltraSonic_GetDistance+0xc8>)
 8002d34:	8992      	ldrh	r2, [r2, #12]
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fc57 	bl	80035ec <HAL_GPIO_ReadPin>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0eb      	beq.n	8002d1c <UltraSonic_GetDistance+0x3c>
   }

   // timer start
   __HAL_TIM_SET_COUNTER(&htim5, 0);
 8002d44:	4b19      	ldr	r3, [pc, #100]	@ (8002dac <UltraSonic_GetDistance+0xcc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	625a      	str	r2, [r3, #36]	@ 0x24
   HAL_TIM_Base_Start(&htim5);
 8002d4c:	4817      	ldr	r0, [pc, #92]	@ (8002dac <UltraSonic_GetDistance+0xcc>)
 8002d4e:	f001 fe29 	bl	80049a4 <HAL_TIM_Base_Start>

   // wait echo . low
   timeout = 60000;
 8002d52:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002d56:	60fb      	str	r3, [r7, #12]
   while(HAL_GPIO_ReadPin(hultra.Echo_GPIOx, hultra.Echo_pinNum))
 8002d58:	e008      	b.n	8002d6c <UltraSonic_GetDistance+0x8c>
   {
      if (--timeout == 0)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <UltraSonic_GetDistance+0x8c>
         return -1;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6a:	e018      	b.n	8002d9e <UltraSonic_GetDistance+0xbe>
   while(HAL_GPIO_ReadPin(hultra.Echo_GPIOx, hultra.Echo_pinNum))
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002da8 <UltraSonic_GetDistance+0xc8>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4a0d      	ldr	r2, [pc, #52]	@ (8002da8 <UltraSonic_GetDistance+0xc8>)
 8002d72:	8992      	ldrh	r2, [r2, #12]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fc38 	bl	80035ec <HAL_GPIO_ReadPin>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1eb      	bne.n	8002d5a <UltraSonic_GetDistance+0x7a>
   }

   // timer stop
   HAL_TIM_Base_Stop(&htim5);
 8002d82:	480a      	ldr	r0, [pc, #40]	@ (8002dac <UltraSonic_GetDistance+0xcc>)
 8002d84:	f001 fe68 	bl	8004a58 <HAL_TIM_Base_Stop>
   count = __HAL_TIM_GET_COUNTER(&htim5);
 8002d88:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <UltraSonic_GetDistance+0xcc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	60bb      	str	r3, [r7, #8]

   distance = count / 58;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4a07      	ldr	r2, [pc, #28]	@ (8002db0 <UltraSonic_GetDistance+0xd0>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	607b      	str	r3, [r7, #4]

   return distance;
 8002d9c:	687b      	ldr	r3, [r7, #4]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000450 	.word	0x20000450
 8002dac:	2000029c 	.word	0x2000029c
 8002db0:	8d3dcb09 	.word	0x8d3dcb09

08002db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002db8:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <HAL_Init+0x40>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002df4 <HAL_Init+0x40>)
 8002dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <HAL_Init+0x40>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8002df4 <HAL_Init+0x40>)
 8002dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd0:	4b08      	ldr	r3, [pc, #32]	@ (8002df4 <HAL_Init+0x40>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a07      	ldr	r2, [pc, #28]	@ (8002df4 <HAL_Init+0x40>)
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ddc:	2003      	movs	r0, #3
 8002dde:	f000 f991 	bl	8003104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002de2:	200f      	movs	r0, #15
 8002de4:	f000 f808 	bl	8002df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de8:	f7fd fdc2 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023c00 	.word	0x40023c00

08002df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e00:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <HAL_InitTick+0x54>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <HAL_InitTick+0x58>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f9b7 	bl	800318a <HAL_SYSTICK_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e00e      	b.n	8002e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b0f      	cmp	r3, #15
 8002e2a:	d80a      	bhi.n	8002e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	f000 f971 	bl	800311a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e38:	4a06      	ldr	r2, [pc, #24]	@ (8002e54 <HAL_InitTick+0x5c>)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	200000a8 	.word	0x200000a8
 8002e54:	200000a4 	.word	0x200000a4

08002e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <HAL_IncTick+0x20>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <HAL_IncTick+0x24>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4413      	add	r3, r2
 8002e68:	4a04      	ldr	r2, [pc, #16]	@ (8002e7c <HAL_IncTick+0x24>)
 8002e6a:	6013      	str	r3, [r2, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	200000a8 	.word	0x200000a8
 8002e7c:	20000460 	.word	0x20000460

08002e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return uwTick;
 8002e84:	4b03      	ldr	r3, [pc, #12]	@ (8002e94 <HAL_GetTick+0x14>)
 8002e86:	681b      	ldr	r3, [r3, #0]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000460 	.word	0x20000460

08002e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ea0:	f7ff ffee 	bl	8002e80 <HAL_GetTick>
 8002ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d005      	beq.n	8002ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <HAL_Delay+0x44>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4413      	add	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ebe:	bf00      	nop
 8002ec0:	f7ff ffde 	bl	8002e80 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d8f7      	bhi.n	8002ec0 <HAL_Delay+0x28>
  {
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200000a8 	.word	0x200000a8

08002ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002efc:	4013      	ands	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f12:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	60d3      	str	r3, [r2, #12]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f2c:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <__NVIC_GetPriorityGrouping+0x18>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 0307 	and.w	r3, r3, #7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	db0b      	blt.n	8002f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	4907      	ldr	r1, [pc, #28]	@ (8002f7c <__NVIC_EnableIRQ+0x38>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2001      	movs	r0, #1
 8002f66:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000e100 	.word	0xe000e100

08002f80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	db12      	blt.n	8002fb8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	490a      	ldr	r1, [pc, #40]	@ (8002fc4 <__NVIC_DisableIRQ+0x44>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa6:	3320      	adds	r3, #32
 8002fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002fac:	f3bf 8f4f 	dsb	sy
}
 8002fb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002fb2:	f3bf 8f6f 	isb	sy
}
 8002fb6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000e100 	.word	0xe000e100

08002fc8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	db0c      	blt.n	8002ff4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	f003 021f 	and.w	r2, r3, #31
 8002fe0:	4907      	ldr	r1, [pc, #28]	@ (8003000 <__NVIC_ClearPendingIRQ+0x38>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	2001      	movs	r0, #1
 8002fea:	fa00 f202 	lsl.w	r2, r0, r2
 8002fee:	3360      	adds	r3, #96	@ 0x60
 8002ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000e100 	.word	0xe000e100

08003004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003014:	2b00      	cmp	r3, #0
 8003016:	db0a      	blt.n	800302e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	b2da      	uxtb	r2, r3
 800301c:	490c      	ldr	r1, [pc, #48]	@ (8003050 <__NVIC_SetPriority+0x4c>)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	0112      	lsls	r2, r2, #4
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	440b      	add	r3, r1
 8003028:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800302c:	e00a      	b.n	8003044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4908      	ldr	r1, [pc, #32]	@ (8003054 <__NVIC_SetPriority+0x50>)
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	3b04      	subs	r3, #4
 800303c:	0112      	lsls	r2, r2, #4
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	440b      	add	r3, r1
 8003042:	761a      	strb	r2, [r3, #24]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000e100 	.word	0xe000e100
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	@ 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f1c3 0307 	rsb	r3, r3, #7
 8003072:	2b04      	cmp	r3, #4
 8003074:	bf28      	it	cs
 8003076:	2304      	movcs	r3, #4
 8003078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3304      	adds	r3, #4
 800307e:	2b06      	cmp	r3, #6
 8003080:	d902      	bls.n	8003088 <NVIC_EncodePriority+0x30>
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3b03      	subs	r3, #3
 8003086:	e000      	b.n	800308a <NVIC_EncodePriority+0x32>
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	f04f 32ff 	mov.w	r2, #4294967295
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43da      	mvns	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	401a      	ands	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a0:	f04f 31ff 	mov.w	r1, #4294967295
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	43d9      	mvns	r1, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	4313      	orrs	r3, r2
         );
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3724      	adds	r7, #36	@ 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030d0:	d301      	bcc.n	80030d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030d2:	2301      	movs	r3, #1
 80030d4:	e00f      	b.n	80030f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003100 <SysTick_Config+0x40>)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030de:	210f      	movs	r1, #15
 80030e0:	f04f 30ff 	mov.w	r0, #4294967295
 80030e4:	f7ff ff8e 	bl	8003004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e8:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <SysTick_Config+0x40>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ee:	4b04      	ldr	r3, [pc, #16]	@ (8003100 <SysTick_Config+0x40>)
 80030f0:	2207      	movs	r2, #7
 80030f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	e000e010 	.word	0xe000e010

08003104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff fee7 	bl	8002ee0 <__NVIC_SetPriorityGrouping>
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800311a:	b580      	push	{r7, lr}
 800311c:	b086      	sub	sp, #24
 800311e:	af00      	add	r7, sp, #0
 8003120:	4603      	mov	r3, r0
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800312c:	f7ff fefc 	bl	8002f28 <__NVIC_GetPriorityGrouping>
 8003130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	6978      	ldr	r0, [r7, #20]
 8003138:	f7ff ff8e 	bl	8003058 <NVIC_EncodePriority>
 800313c:	4602      	mov	r2, r0
 800313e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff5d 	bl	8003004 <__NVIC_SetPriority>
}
 800314a:	bf00      	nop
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	4603      	mov	r3, r0
 800315a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800315c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff feef 	bl	8002f44 <__NVIC_EnableIRQ>
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	4603      	mov	r3, r0
 8003176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff feff 	bl	8002f80 <__NVIC_DisableIRQ>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff ff94 	bl	80030c0 <SysTick_Config>
 8003198:	4603      	mov	r3, r0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	4603      	mov	r3, r0
 80031aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80031ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff09 	bl	8002fc8 <__NVIC_ClearPendingIRQ>
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031cc:	f7ff fe58 	bl	8002e80 <HAL_GetTick>
 80031d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d008      	beq.n	80031f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2280      	movs	r2, #128	@ 0x80
 80031e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e052      	b.n	8003296 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0216 	bic.w	r2, r2, #22
 80031fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800320e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	d103      	bne.n	8003220 <HAL_DMA_Abort+0x62>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800321c:	2b00      	cmp	r3, #0
 800321e:	d007      	beq.n	8003230 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0208 	bic.w	r2, r2, #8
 800322e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0201 	bic.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003240:	e013      	b.n	800326a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003242:	f7ff fe1d 	bl	8002e80 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b05      	cmp	r3, #5
 800324e:	d90c      	bls.n	800326a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2203      	movs	r2, #3
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e015      	b.n	8003296 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e4      	bne.n	8003242 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327c:	223f      	movs	r2, #63	@ 0x3f
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d004      	beq.n	80032bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2280      	movs	r2, #128	@ 0x80
 80032b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e00c      	b.n	80032d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2205      	movs	r2, #5
 80032c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	@ 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	e159      	b.n	80035b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003300:	2201      	movs	r2, #1
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	429a      	cmp	r2, r3
 800331a:	f040 8148 	bne.w	80035ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b01      	cmp	r3, #1
 8003328:	d005      	beq.n	8003336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003332:	2b02      	cmp	r3, #2
 8003334:	d130      	bne.n	8003398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	2203      	movs	r2, #3
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800336c:	2201      	movs	r2, #1
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 0201 	and.w	r2, r3, #1
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d017      	beq.n	80033d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d123      	bne.n	8003428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	08da      	lsrs	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3208      	adds	r2, #8
 80033e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	220f      	movs	r2, #15
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	08da      	lsrs	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3208      	adds	r2, #8
 8003422:	69b9      	ldr	r1, [r7, #24]
 8003424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2203      	movs	r2, #3
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0203 	and.w	r2, r3, #3
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80a2 	beq.w	80035ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	4b57      	ldr	r3, [pc, #348]	@ (80035cc <HAL_GPIO_Init+0x2e8>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	4a56      	ldr	r2, [pc, #344]	@ (80035cc <HAL_GPIO_Init+0x2e8>)
 8003474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003478:	6453      	str	r3, [r2, #68]	@ 0x44
 800347a:	4b54      	ldr	r3, [pc, #336]	@ (80035cc <HAL_GPIO_Init+0x2e8>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003486:	4a52      	ldr	r2, [pc, #328]	@ (80035d0 <HAL_GPIO_Init+0x2ec>)
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	3302      	adds	r3, #2
 800348e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	220f      	movs	r2, #15
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a49      	ldr	r2, [pc, #292]	@ (80035d4 <HAL_GPIO_Init+0x2f0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d019      	beq.n	80034e6 <HAL_GPIO_Init+0x202>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a48      	ldr	r2, [pc, #288]	@ (80035d8 <HAL_GPIO_Init+0x2f4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_GPIO_Init+0x1fe>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a47      	ldr	r2, [pc, #284]	@ (80035dc <HAL_GPIO_Init+0x2f8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00d      	beq.n	80034de <HAL_GPIO_Init+0x1fa>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a46      	ldr	r2, [pc, #280]	@ (80035e0 <HAL_GPIO_Init+0x2fc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <HAL_GPIO_Init+0x1f6>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a45      	ldr	r2, [pc, #276]	@ (80035e4 <HAL_GPIO_Init+0x300>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_GPIO_Init+0x1f2>
 80034d2:	2304      	movs	r3, #4
 80034d4:	e008      	b.n	80034e8 <HAL_GPIO_Init+0x204>
 80034d6:	2307      	movs	r3, #7
 80034d8:	e006      	b.n	80034e8 <HAL_GPIO_Init+0x204>
 80034da:	2303      	movs	r3, #3
 80034dc:	e004      	b.n	80034e8 <HAL_GPIO_Init+0x204>
 80034de:	2302      	movs	r3, #2
 80034e0:	e002      	b.n	80034e8 <HAL_GPIO_Init+0x204>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <HAL_GPIO_Init+0x204>
 80034e6:	2300      	movs	r3, #0
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	f002 0203 	and.w	r2, r2, #3
 80034ee:	0092      	lsls	r2, r2, #2
 80034f0:	4093      	lsls	r3, r2
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034f8:	4935      	ldr	r1, [pc, #212]	@ (80035d0 <HAL_GPIO_Init+0x2ec>)
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	089b      	lsrs	r3, r3, #2
 80034fe:	3302      	adds	r3, #2
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003506:	4b38      	ldr	r3, [pc, #224]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	43db      	mvns	r3, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4013      	ands	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800352a:	4a2f      	ldr	r2, [pc, #188]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003530:	4b2d      	ldr	r3, [pc, #180]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003554:	4a24      	ldr	r2, [pc, #144]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800355a:	4b23      	ldr	r3, [pc, #140]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800357e:	4a1a      	ldr	r2, [pc, #104]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003584:	4b18      	ldr	r3, [pc, #96]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035a8:	4a0f      	ldr	r2, [pc, #60]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3301      	adds	r3, #1
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	2b0f      	cmp	r3, #15
 80035b8:	f67f aea2 	bls.w	8003300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	3724      	adds	r7, #36	@ 0x24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800
 80035d0:	40013800 	.word	0x40013800
 80035d4:	40020000 	.word	0x40020000
 80035d8:	40020400 	.word	0x40020400
 80035dc:	40020800 	.word	0x40020800
 80035e0:	40020c00 	.word	0x40020c00
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40013c00 	.word	0x40013c00

080035ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
 8003608:	e001      	b.n	800360e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800360e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	807b      	strh	r3, [r7, #2]
 8003628:	4613      	mov	r3, r2
 800362a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800362c:	787b      	ldrb	r3, [r7, #1]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003632:	887a      	ldrh	r2, [r7, #2]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003638:	e003      	b.n	8003642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800363a:	887b      	ldrh	r3, [r7, #2]
 800363c:	041a      	lsls	r2, r3, #16
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	619a      	str	r2, [r3, #24]
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800365a:	4b08      	ldr	r3, [pc, #32]	@ (800367c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d006      	beq.n	8003674 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003666:	4a05      	ldr	r2, [pc, #20]	@ (800367c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f806 	bl	8003680 <HAL_GPIO_EXTI_Callback>
  }
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40013c00 	.word	0x40013c00

08003680 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e12b      	b.n	8003902 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd f884 	bl	80007cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2224      	movs	r2, #36	@ 0x24
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0201 	bic.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036fc:	f001 f8da 	bl	80048b4 <HAL_RCC_GetPCLK1Freq>
 8003700:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	4a81      	ldr	r2, [pc, #516]	@ (800390c <HAL_I2C_Init+0x274>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d807      	bhi.n	800371c <HAL_I2C_Init+0x84>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4a80      	ldr	r2, [pc, #512]	@ (8003910 <HAL_I2C_Init+0x278>)
 8003710:	4293      	cmp	r3, r2
 8003712:	bf94      	ite	ls
 8003714:	2301      	movls	r3, #1
 8003716:	2300      	movhi	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	e006      	b.n	800372a <HAL_I2C_Init+0x92>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4a7d      	ldr	r2, [pc, #500]	@ (8003914 <HAL_I2C_Init+0x27c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	bf94      	ite	ls
 8003724:	2301      	movls	r3, #1
 8003726:	2300      	movhi	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e0e7      	b.n	8003902 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4a78      	ldr	r2, [pc, #480]	@ (8003918 <HAL_I2C_Init+0x280>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	0c9b      	lsrs	r3, r3, #18
 800373c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4a6a      	ldr	r2, [pc, #424]	@ (800390c <HAL_I2C_Init+0x274>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d802      	bhi.n	800376c <HAL_I2C_Init+0xd4>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	3301      	adds	r3, #1
 800376a:	e009      	b.n	8003780 <HAL_I2C_Init+0xe8>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	4a69      	ldr	r2, [pc, #420]	@ (800391c <HAL_I2C_Init+0x284>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	099b      	lsrs	r3, r3, #6
 800377e:	3301      	adds	r3, #1
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	430b      	orrs	r3, r1
 8003786:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003792:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	495c      	ldr	r1, [pc, #368]	@ (800390c <HAL_I2C_Init+0x274>)
 800379c:	428b      	cmp	r3, r1
 800379e:	d819      	bhi.n	80037d4 <HAL_I2C_Init+0x13c>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1e59      	subs	r1, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ae:	1c59      	adds	r1, r3, #1
 80037b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037b4:	400b      	ands	r3, r1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_I2C_Init+0x138>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1e59      	subs	r1, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80037c8:	3301      	adds	r3, #1
 80037ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ce:	e051      	b.n	8003874 <HAL_I2C_Init+0x1dc>
 80037d0:	2304      	movs	r3, #4
 80037d2:	e04f      	b.n	8003874 <HAL_I2C_Init+0x1dc>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d111      	bne.n	8003800 <HAL_I2C_Init+0x168>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1e58      	subs	r0, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6859      	ldr	r1, [r3, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	440b      	add	r3, r1
 80037ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	e012      	b.n	8003826 <HAL_I2C_Init+0x18e>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1e58      	subs	r0, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	0099      	lsls	r1, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	fbb0 f3f3 	udiv	r3, r0, r3
 8003816:	3301      	adds	r3, #1
 8003818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Init+0x196>
 800382a:	2301      	movs	r3, #1
 800382c:	e022      	b.n	8003874 <HAL_I2C_Init+0x1dc>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10e      	bne.n	8003854 <HAL_I2C_Init+0x1bc>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1e58      	subs	r0, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	460b      	mov	r3, r1
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	440b      	add	r3, r1
 8003844:	fbb0 f3f3 	udiv	r3, r0, r3
 8003848:	3301      	adds	r3, #1
 800384a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003852:	e00f      	b.n	8003874 <HAL_I2C_Init+0x1dc>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1e58      	subs	r0, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6859      	ldr	r1, [r3, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	0099      	lsls	r1, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	fbb0 f3f3 	udiv	r3, r0, r3
 800386a:	3301      	adds	r3, #1
 800386c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003870:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	6809      	ldr	r1, [r1, #0]
 8003878:	4313      	orrs	r3, r2
 800387a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6911      	ldr	r1, [r2, #16]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68d2      	ldr	r2, [r2, #12]
 80038ae:	4311      	orrs	r1, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	000186a0 	.word	0x000186a0
 8003910:	001e847f 	.word	0x001e847f
 8003914:	003d08ff 	.word	0x003d08ff
 8003918:	431bde83 	.word	0x431bde83
 800391c:	10624dd3 	.word	0x10624dd3

08003920 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	461a      	mov	r2, r3
 800392c:	460b      	mov	r3, r1
 800392e:	817b      	strh	r3, [r7, #10]
 8003930:	4613      	mov	r3, r2
 8003932:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003934:	f7ff faa4 	bl	8002e80 <HAL_GetTick>
 8003938:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b20      	cmp	r3, #32
 8003944:	f040 80e0 	bne.w	8003b08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2319      	movs	r3, #25
 800394e:	2201      	movs	r2, #1
 8003950:	4970      	ldr	r1, [pc, #448]	@ (8003b14 <HAL_I2C_Master_Transmit+0x1f4>)
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f964 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
 8003960:	e0d3      	b.n	8003b0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_I2C_Master_Transmit+0x50>
 800396c:	2302      	movs	r3, #2
 800396e:	e0cc      	b.n	8003b0a <HAL_I2C_Master_Transmit+0x1ea>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d007      	beq.n	8003996 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2221      	movs	r2, #33	@ 0x21
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2210      	movs	r2, #16
 80039b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	893a      	ldrh	r2, [r7, #8]
 80039c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4a50      	ldr	r2, [pc, #320]	@ (8003b18 <HAL_I2C_Master_Transmit+0x1f8>)
 80039d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039d8:	8979      	ldrh	r1, [r7, #10]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	6a3a      	ldr	r2, [r7, #32]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f89c 	bl	8003b1c <I2C_MasterRequestWrite>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e08d      	b.n	8003b0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ee:	2300      	movs	r3, #0
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a04:	e066      	b.n	8003ad4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	6a39      	ldr	r1, [r7, #32]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fa22 	bl	8003e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00d      	beq.n	8003a32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d107      	bne.n	8003a2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e06b      	b.n	8003b0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	781a      	ldrb	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d11b      	bne.n	8003aa8 <HAL_I2C_Master_Transmit+0x188>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d017      	beq.n	8003aa8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	781a      	ldrb	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	6a39      	ldr	r1, [r7, #32]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 fa19 	bl	8003ee4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00d      	beq.n	8003ad4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d107      	bne.n	8003ad0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ace:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e01a      	b.n	8003b0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d194      	bne.n	8003a06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e000      	b.n	8003b0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b08:	2302      	movs	r3, #2
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	00100002 	.word	0x00100002
 8003b18:	ffff0000 	.word	0xffff0000

08003b1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d006      	beq.n	8003b46 <I2C_MasterRequestWrite+0x2a>
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d003      	beq.n	8003b46 <I2C_MasterRequestWrite+0x2a>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b44:	d108      	bne.n	8003b58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e00b      	b.n	8003b70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	2b12      	cmp	r3, #18
 8003b5e:	d107      	bne.n	8003b70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f84f 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00d      	beq.n	8003ba4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b96:	d103      	bne.n	8003ba0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e035      	b.n	8003c10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bac:	d108      	bne.n	8003bc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bae:	897b      	ldrh	r3, [r7, #10]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bbc:	611a      	str	r2, [r3, #16]
 8003bbe:	e01b      	b.n	8003bf8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bc0:	897b      	ldrh	r3, [r7, #10]
 8003bc2:	11db      	asrs	r3, r3, #7
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f003 0306 	and.w	r3, r3, #6
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f063 030f 	orn	r3, r3, #15
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	490e      	ldr	r1, [pc, #56]	@ (8003c18 <I2C_MasterRequestWrite+0xfc>)
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f898 	bl	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e010      	b.n	8003c10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bee:	897b      	ldrh	r3, [r7, #10]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4907      	ldr	r1, [pc, #28]	@ (8003c1c <I2C_MasterRequestWrite+0x100>)
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f888 	bl	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	00010008 	.word	0x00010008
 8003c1c:	00010002 	.word	0x00010002

08003c20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c30:	e048      	b.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	d044      	beq.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3a:	f7ff f921 	bl	8002e80 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d302      	bcc.n	8003c50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d139      	bne.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	0c1b      	lsrs	r3, r3, #16
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d10d      	bne.n	8003c76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	43da      	mvns	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	4013      	ands	r3, r2
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	e00c      	b.n	8003c90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	43da      	mvns	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4013      	ands	r3, r2
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d116      	bne.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb0:	f043 0220 	orr.w	r2, r3, #32
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e023      	b.n	8003d0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10d      	bne.n	8003cea <I2C_WaitOnFlagUntilTimeout+0xca>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	43da      	mvns	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	e00c      	b.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	43da      	mvns	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d093      	beq.n	8003c32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d22:	e071      	b.n	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d32:	d123      	bne.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	f043 0204 	orr.w	r2, r3, #4
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e067      	b.n	8003e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d041      	beq.n	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d84:	f7ff f87c 	bl	8002e80 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d302      	bcc.n	8003d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d136      	bne.n	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	0c1b      	lsrs	r3, r3, #16
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d10c      	bne.n	8003dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	43da      	mvns	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4013      	ands	r3, r2
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	bf14      	ite	ne
 8003db6:	2301      	movne	r3, #1
 8003db8:	2300      	moveq	r3, #0
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	e00b      	b.n	8003dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	43da      	mvns	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf14      	ite	ne
 8003dd0:	2301      	movne	r3, #1
 8003dd2:	2300      	moveq	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d016      	beq.n	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	f043 0220 	orr.w	r2, r3, #32
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e021      	b.n	8003e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	0c1b      	lsrs	r3, r3, #16
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d10c      	bne.n	8003e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	43da      	mvns	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e00b      	b.n	8003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	43da      	mvns	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4013      	ands	r3, r2
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	bf14      	ite	ne
 8003e3e:	2301      	movne	r3, #1
 8003e40:	2300      	moveq	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f47f af6d 	bne.w	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e60:	e034      	b.n	8003ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f886 	bl	8003f74 <I2C_IsAcknowledgeFailed>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e034      	b.n	8003edc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d028      	beq.n	8003ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7a:	f7ff f801 	bl	8002e80 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d302      	bcc.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d11d      	bne.n	8003ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9a:	2b80      	cmp	r3, #128	@ 0x80
 8003e9c:	d016      	beq.n	8003ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	f043 0220 	orr.w	r2, r3, #32
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e007      	b.n	8003edc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed6:	2b80      	cmp	r3, #128	@ 0x80
 8003ed8:	d1c3      	bne.n	8003e62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ef0:	e034      	b.n	8003f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f83e 	bl	8003f74 <I2C_IsAcknowledgeFailed>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e034      	b.n	8003f6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d028      	beq.n	8003f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0a:	f7fe ffb9 	bl	8002e80 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d302      	bcc.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d11d      	bne.n	8003f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d016      	beq.n	8003f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	f043 0220 	orr.w	r2, r3, #32
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e007      	b.n	8003f6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d1c3      	bne.n	8003ef2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8a:	d11b      	bne.n	8003fc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb0:	f043 0204 	orr.w	r2, r3, #4
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e267      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d075      	beq.n	80040de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ff2:	4b88      	ldr	r3, [pc, #544]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d00c      	beq.n	8004018 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ffe:	4b85      	ldr	r3, [pc, #532]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004006:	2b08      	cmp	r3, #8
 8004008:	d112      	bne.n	8004030 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800400a:	4b82      	ldr	r3, [pc, #520]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004012:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004016:	d10b      	bne.n	8004030 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004018:	4b7e      	ldr	r3, [pc, #504]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d05b      	beq.n	80040dc <HAL_RCC_OscConfig+0x108>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d157      	bne.n	80040dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e242      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004038:	d106      	bne.n	8004048 <HAL_RCC_OscConfig+0x74>
 800403a:	4b76      	ldr	r3, [pc, #472]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a75      	ldr	r2, [pc, #468]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e01d      	b.n	8004084 <HAL_RCC_OscConfig+0xb0>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0x98>
 8004052:	4b70      	ldr	r3, [pc, #448]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a6f      	ldr	r2, [pc, #444]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 8004058:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	4b6d      	ldr	r3, [pc, #436]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a6c      	ldr	r2, [pc, #432]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e00b      	b.n	8004084 <HAL_RCC_OscConfig+0xb0>
 800406c:	4b69      	ldr	r3, [pc, #420]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a68      	ldr	r2, [pc, #416]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 8004072:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	4b66      	ldr	r3, [pc, #408]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a65      	ldr	r2, [pc, #404]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 800407e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d013      	beq.n	80040b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fe fef8 	bl	8002e80 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004094:	f7fe fef4 	bl	8002e80 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	@ 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e207      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0xc0>
 80040b2:	e014      	b.n	80040de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fe fee4 	bl	8002e80 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040bc:	f7fe fee0 	bl	8002e80 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	@ 0x64
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e1f3      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ce:	4b51      	ldr	r3, [pc, #324]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0xe8>
 80040da:	e000      	b.n	80040de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d063      	beq.n	80041b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040f6:	4b47      	ldr	r3, [pc, #284]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d11c      	bne.n	800413c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004102:	4b44      	ldr	r3, [pc, #272]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d116      	bne.n	800413c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410e:	4b41      	ldr	r3, [pc, #260]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <HAL_RCC_OscConfig+0x152>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d001      	beq.n	8004126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e1c7      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004126:	4b3b      	ldr	r3, [pc, #236]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4937      	ldr	r1, [pc, #220]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 8004136:	4313      	orrs	r3, r2
 8004138:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413a:	e03a      	b.n	80041b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d020      	beq.n	8004186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004144:	4b34      	ldr	r3, [pc, #208]	@ (8004218 <HAL_RCC_OscConfig+0x244>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fe fe99 	bl	8002e80 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004152:	f7fe fe95 	bl	8002e80 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e1a8      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004164:	4b2b      	ldr	r3, [pc, #172]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004170:	4b28      	ldr	r3, [pc, #160]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4925      	ldr	r1, [pc, #148]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 8004180:	4313      	orrs	r3, r2
 8004182:	600b      	str	r3, [r1, #0]
 8004184:	e015      	b.n	80041b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004186:	4b24      	ldr	r3, [pc, #144]	@ (8004218 <HAL_RCC_OscConfig+0x244>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fe fe78 	bl	8002e80 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004194:	f7fe fe74 	bl	8002e80 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e187      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d036      	beq.n	800422c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d016      	beq.n	80041f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c6:	4b15      	ldr	r3, [pc, #84]	@ (800421c <HAL_RCC_OscConfig+0x248>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fe fe58 	bl	8002e80 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d4:	f7fe fe54 	bl	8002e80 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e167      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004214 <HAL_RCC_OscConfig+0x240>)
 80041e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x200>
 80041f2:	e01b      	b.n	800422c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f4:	4b09      	ldr	r3, [pc, #36]	@ (800421c <HAL_RCC_OscConfig+0x248>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fa:	f7fe fe41 	bl	8002e80 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004200:	e00e      	b.n	8004220 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004202:	f7fe fe3d 	bl	8002e80 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d907      	bls.n	8004220 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e150      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
 8004214:	40023800 	.word	0x40023800
 8004218:	42470000 	.word	0x42470000
 800421c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004220:	4b88      	ldr	r3, [pc, #544]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 8004222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ea      	bne.n	8004202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8097 	beq.w	8004368 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423a:	2300      	movs	r3, #0
 800423c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423e:	4b81      	ldr	r3, [pc, #516]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10f      	bne.n	800426a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	4b7d      	ldr	r3, [pc, #500]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	4a7c      	ldr	r2, [pc, #496]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004258:	6413      	str	r3, [r2, #64]	@ 0x40
 800425a:	4b7a      	ldr	r3, [pc, #488]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004266:	2301      	movs	r3, #1
 8004268:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426a:	4b77      	ldr	r3, [pc, #476]	@ (8004448 <HAL_RCC_OscConfig+0x474>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004272:	2b00      	cmp	r3, #0
 8004274:	d118      	bne.n	80042a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004276:	4b74      	ldr	r3, [pc, #464]	@ (8004448 <HAL_RCC_OscConfig+0x474>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a73      	ldr	r2, [pc, #460]	@ (8004448 <HAL_RCC_OscConfig+0x474>)
 800427c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004282:	f7fe fdfd 	bl	8002e80 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428a:	f7fe fdf9 	bl	8002e80 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e10c      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429c:	4b6a      	ldr	r3, [pc, #424]	@ (8004448 <HAL_RCC_OscConfig+0x474>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0f0      	beq.n	800428a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d106      	bne.n	80042be <HAL_RCC_OscConfig+0x2ea>
 80042b0:	4b64      	ldr	r3, [pc, #400]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 80042b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b4:	4a63      	ldr	r2, [pc, #396]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80042bc:	e01c      	b.n	80042f8 <HAL_RCC_OscConfig+0x324>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b05      	cmp	r3, #5
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCC_OscConfig+0x30c>
 80042c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ca:	4a5e      	ldr	r2, [pc, #376]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 80042cc:	f043 0304 	orr.w	r3, r3, #4
 80042d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d2:	4b5c      	ldr	r3, [pc, #368]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80042de:	e00b      	b.n	80042f8 <HAL_RCC_OscConfig+0x324>
 80042e0:	4b58      	ldr	r3, [pc, #352]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e4:	4a57      	ldr	r2, [pc, #348]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ec:	4b55      	ldr	r3, [pc, #340]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 80042ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f0:	4a54      	ldr	r2, [pc, #336]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 80042f2:	f023 0304 	bic.w	r3, r3, #4
 80042f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d015      	beq.n	800432c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fe fdbe 	bl	8002e80 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004306:	e00a      	b.n	800431e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004308:	f7fe fdba 	bl	8002e80 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e0cb      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431e:	4b49      	ldr	r3, [pc, #292]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0ee      	beq.n	8004308 <HAL_RCC_OscConfig+0x334>
 800432a:	e014      	b.n	8004356 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800432c:	f7fe fda8 	bl	8002e80 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004332:	e00a      	b.n	800434a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004334:	f7fe fda4 	bl	8002e80 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e0b5      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434a:	4b3e      	ldr	r3, [pc, #248]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1ee      	bne.n	8004334 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004356:	7dfb      	ldrb	r3, [r7, #23]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d105      	bne.n	8004368 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435c:	4b39      	ldr	r3, [pc, #228]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	4a38      	ldr	r2, [pc, #224]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 8004362:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004366:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80a1 	beq.w	80044b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004372:	4b34      	ldr	r3, [pc, #208]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b08      	cmp	r3, #8
 800437c:	d05c      	beq.n	8004438 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d141      	bne.n	800440a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004386:	4b31      	ldr	r3, [pc, #196]	@ (800444c <HAL_RCC_OscConfig+0x478>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438c:	f7fe fd78 	bl	8002e80 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004394:	f7fe fd74 	bl	8002e80 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e087      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a6:	4b27      	ldr	r3, [pc, #156]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69da      	ldr	r2, [r3, #28]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	019b      	lsls	r3, r3, #6
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	3b01      	subs	r3, #1
 80043cc:	041b      	lsls	r3, r3, #16
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d4:	061b      	lsls	r3, r3, #24
 80043d6:	491b      	ldr	r1, [pc, #108]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043dc:	4b1b      	ldr	r3, [pc, #108]	@ (800444c <HAL_RCC_OscConfig+0x478>)
 80043de:	2201      	movs	r2, #1
 80043e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e2:	f7fe fd4d 	bl	8002e80 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ea:	f7fe fd49 	bl	8002e80 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e05c      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fc:	4b11      	ldr	r3, [pc, #68]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <HAL_RCC_OscConfig+0x416>
 8004408:	e054      	b.n	80044b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440a:	4b10      	ldr	r3, [pc, #64]	@ (800444c <HAL_RCC_OscConfig+0x478>)
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7fe fd36 	bl	8002e80 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004418:	f7fe fd32 	bl	8002e80 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e045      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442a:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <HAL_RCC_OscConfig+0x470>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x444>
 8004436:	e03d      	b.n	80044b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d107      	bne.n	8004450 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e038      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
 8004444:	40023800 	.word	0x40023800
 8004448:	40007000 	.word	0x40007000
 800444c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004450:	4b1b      	ldr	r3, [pc, #108]	@ (80044c0 <HAL_RCC_OscConfig+0x4ec>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d028      	beq.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d121      	bne.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d11a      	bne.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004480:	4013      	ands	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004486:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004488:	4293      	cmp	r3, r2
 800448a:	d111      	bne.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004496:	085b      	lsrs	r3, r3, #1
 8004498:	3b01      	subs	r3, #1
 800449a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d107      	bne.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800

080044c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0cc      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044d8:	4b68      	ldr	r3, [pc, #416]	@ (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d90c      	bls.n	8004500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b65      	ldr	r3, [pc, #404]	@ (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b63      	ldr	r3, [pc, #396]	@ (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0b8      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d020      	beq.n	800454e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004518:	4b59      	ldr	r3, [pc, #356]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a58      	ldr	r2, [pc, #352]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004522:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004530:	4b53      	ldr	r3, [pc, #332]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a52      	ldr	r2, [pc, #328]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800453a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800453c:	4b50      	ldr	r3, [pc, #320]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	494d      	ldr	r1, [pc, #308]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d044      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d107      	bne.n	8004572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	4b47      	ldr	r3, [pc, #284]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d119      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e07f      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d003      	beq.n	8004582 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800457e:	2b03      	cmp	r3, #3
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004582:	4b3f      	ldr	r3, [pc, #252]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e06f      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004592:	4b3b      	ldr	r3, [pc, #236]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e067      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045a2:	4b37      	ldr	r3, [pc, #220]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f023 0203 	bic.w	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4934      	ldr	r1, [pc, #208]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b4:	f7fe fc64 	bl	8002e80 <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045bc:	f7fe fc60 	bl	8002e80 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e04f      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 020c 	and.w	r2, r3, #12
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d1eb      	bne.n	80045bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045e4:	4b25      	ldr	r3, [pc, #148]	@ (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d20c      	bcs.n	800460c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f2:	4b22      	ldr	r3, [pc, #136]	@ (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fa:	4b20      	ldr	r3, [pc, #128]	@ (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d001      	beq.n	800460c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e032      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004618:	4b19      	ldr	r3, [pc, #100]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4916      	ldr	r1, [pc, #88]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	4313      	orrs	r3, r2
 8004628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d009      	beq.n	800464a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004636:	4b12      	ldr	r3, [pc, #72]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	490e      	ldr	r1, [pc, #56]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800464a:	f000 f821 	bl	8004690 <HAL_RCC_GetSysClockFreq>
 800464e:	4602      	mov	r2, r0
 8004650:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	091b      	lsrs	r3, r3, #4
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	490a      	ldr	r1, [pc, #40]	@ (8004684 <HAL_RCC_ClockConfig+0x1c0>)
 800465c:	5ccb      	ldrb	r3, [r1, r3]
 800465e:	fa22 f303 	lsr.w	r3, r2, r3
 8004662:	4a09      	ldr	r2, [pc, #36]	@ (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 8004664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004666:	4b09      	ldr	r3, [pc, #36]	@ (800468c <HAL_RCC_ClockConfig+0x1c8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7fe fbc4 	bl	8002df8 <HAL_InitTick>

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40023c00 	.word	0x40023c00
 8004680:	40023800 	.word	0x40023800
 8004684:	08007f9c 	.word	0x08007f9c
 8004688:	20000000 	.word	0x20000000
 800468c:	200000a4 	.word	0x200000a4

08004690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004694:	b094      	sub	sp, #80	@ 0x50
 8004696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a8:	4b79      	ldr	r3, [pc, #484]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x200>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 030c 	and.w	r3, r3, #12
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d00d      	beq.n	80046d0 <HAL_RCC_GetSysClockFreq+0x40>
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	f200 80e1 	bhi.w	800487c <HAL_RCC_GetSysClockFreq+0x1ec>
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_RCC_GetSysClockFreq+0x34>
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d003      	beq.n	80046ca <HAL_RCC_GetSysClockFreq+0x3a>
 80046c2:	e0db      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046c4:	4b73      	ldr	r3, [pc, #460]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x204>)
 80046c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046c8:	e0db      	b.n	8004882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ca:	4b73      	ldr	r3, [pc, #460]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x208>)
 80046cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046ce:	e0d8      	b.n	8004882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046d0:	4b6f      	ldr	r3, [pc, #444]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x200>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046da:	4b6d      	ldr	r3, [pc, #436]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x200>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d063      	beq.n	80047ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x200>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	099b      	lsrs	r3, r3, #6
 80046ec:	2200      	movs	r2, #0
 80046ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80046fa:	2300      	movs	r3, #0
 80046fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80046fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004702:	4622      	mov	r2, r4
 8004704:	462b      	mov	r3, r5
 8004706:	f04f 0000 	mov.w	r0, #0
 800470a:	f04f 0100 	mov.w	r1, #0
 800470e:	0159      	lsls	r1, r3, #5
 8004710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004714:	0150      	lsls	r0, r2, #5
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4621      	mov	r1, r4
 800471c:	1a51      	subs	r1, r2, r1
 800471e:	6139      	str	r1, [r7, #16]
 8004720:	4629      	mov	r1, r5
 8004722:	eb63 0301 	sbc.w	r3, r3, r1
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004734:	4659      	mov	r1, fp
 8004736:	018b      	lsls	r3, r1, #6
 8004738:	4651      	mov	r1, sl
 800473a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800473e:	4651      	mov	r1, sl
 8004740:	018a      	lsls	r2, r1, #6
 8004742:	4651      	mov	r1, sl
 8004744:	ebb2 0801 	subs.w	r8, r2, r1
 8004748:	4659      	mov	r1, fp
 800474a:	eb63 0901 	sbc.w	r9, r3, r1
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800475a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800475e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004762:	4690      	mov	r8, r2
 8004764:	4699      	mov	r9, r3
 8004766:	4623      	mov	r3, r4
 8004768:	eb18 0303 	adds.w	r3, r8, r3
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	462b      	mov	r3, r5
 8004770:	eb49 0303 	adc.w	r3, r9, r3
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004782:	4629      	mov	r1, r5
 8004784:	024b      	lsls	r3, r1, #9
 8004786:	4621      	mov	r1, r4
 8004788:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800478c:	4621      	mov	r1, r4
 800478e:	024a      	lsls	r2, r1, #9
 8004790:	4610      	mov	r0, r2
 8004792:	4619      	mov	r1, r3
 8004794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004796:	2200      	movs	r2, #0
 8004798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800479a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800479c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047a0:	f7fb fd86 	bl	80002b0 <__aeabi_uldivmod>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4613      	mov	r3, r2
 80047aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ac:	e058      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ae:	4b38      	ldr	r3, [pc, #224]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x200>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	099b      	lsrs	r3, r3, #6
 80047b4:	2200      	movs	r2, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	4611      	mov	r1, r2
 80047ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047be:	623b      	str	r3, [r7, #32]
 80047c0:	2300      	movs	r3, #0
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047c8:	4642      	mov	r2, r8
 80047ca:	464b      	mov	r3, r9
 80047cc:	f04f 0000 	mov.w	r0, #0
 80047d0:	f04f 0100 	mov.w	r1, #0
 80047d4:	0159      	lsls	r1, r3, #5
 80047d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047da:	0150      	lsls	r0, r2, #5
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4641      	mov	r1, r8
 80047e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80047e6:	4649      	mov	r1, r9
 80047e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004800:	ebb2 040a 	subs.w	r4, r2, sl
 8004804:	eb63 050b 	sbc.w	r5, r3, fp
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	00eb      	lsls	r3, r5, #3
 8004812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004816:	00e2      	lsls	r2, r4, #3
 8004818:	4614      	mov	r4, r2
 800481a:	461d      	mov	r5, r3
 800481c:	4643      	mov	r3, r8
 800481e:	18e3      	adds	r3, r4, r3
 8004820:	603b      	str	r3, [r7, #0]
 8004822:	464b      	mov	r3, r9
 8004824:	eb45 0303 	adc.w	r3, r5, r3
 8004828:	607b      	str	r3, [r7, #4]
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004836:	4629      	mov	r1, r5
 8004838:	028b      	lsls	r3, r1, #10
 800483a:	4621      	mov	r1, r4
 800483c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004840:	4621      	mov	r1, r4
 8004842:	028a      	lsls	r2, r1, #10
 8004844:	4610      	mov	r0, r2
 8004846:	4619      	mov	r1, r3
 8004848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800484a:	2200      	movs	r2, #0
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	61fa      	str	r2, [r7, #28]
 8004850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004854:	f7fb fd2c 	bl	80002b0 <__aeabi_uldivmod>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4613      	mov	r3, r2
 800485e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004860:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x200>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	0c1b      	lsrs	r3, r3, #16
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	3301      	adds	r3, #1
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004870:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004874:	fbb2 f3f3 	udiv	r3, r2, r3
 8004878:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800487a:	e002      	b.n	8004882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800487c:	4b05      	ldr	r3, [pc, #20]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x204>)
 800487e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004884:	4618      	mov	r0, r3
 8004886:	3750      	adds	r7, #80	@ 0x50
 8004888:	46bd      	mov	sp, r7
 800488a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800
 8004894:	00f42400 	.word	0x00f42400
 8004898:	007a1200 	.word	0x007a1200

0800489c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048a0:	4b03      	ldr	r3, [pc, #12]	@ (80048b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048a2:	681b      	ldr	r3, [r3, #0]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	20000000 	.word	0x20000000

080048b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048b8:	f7ff fff0 	bl	800489c <HAL_RCC_GetHCLKFreq>
 80048bc:	4602      	mov	r2, r0
 80048be:	4b05      	ldr	r3, [pc, #20]	@ (80048d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	0a9b      	lsrs	r3, r3, #10
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	4903      	ldr	r1, [pc, #12]	@ (80048d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ca:	5ccb      	ldrb	r3, [r1, r3]
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40023800 	.word	0x40023800
 80048d8:	08007fac 	.word	0x08007fac

080048dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048e0:	f7ff ffdc 	bl	800489c <HAL_RCC_GetHCLKFreq>
 80048e4:	4602      	mov	r2, r0
 80048e6:	4b05      	ldr	r3, [pc, #20]	@ (80048fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	0b5b      	lsrs	r3, r3, #13
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	4903      	ldr	r1, [pc, #12]	@ (8004900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048f2:	5ccb      	ldrb	r3, [r1, r3]
 80048f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40023800 	.word	0x40023800
 8004900:	08007fac 	.word	0x08007fac

08004904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e041      	b.n	800499a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fc fb52 	bl	8000fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f000 fd18 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d001      	beq.n	80049bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e03c      	b.n	8004a36 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004a44 <HAL_TIM_Base_Start+0xa0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d018      	beq.n	8004a00 <HAL_TIM_Base_Start+0x5c>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d6:	d013      	beq.n	8004a00 <HAL_TIM_Base_Start+0x5c>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004a48 <HAL_TIM_Base_Start+0xa4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00e      	beq.n	8004a00 <HAL_TIM_Base_Start+0x5c>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a19      	ldr	r2, [pc, #100]	@ (8004a4c <HAL_TIM_Base_Start+0xa8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d009      	beq.n	8004a00 <HAL_TIM_Base_Start+0x5c>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a17      	ldr	r2, [pc, #92]	@ (8004a50 <HAL_TIM_Base_Start+0xac>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d004      	beq.n	8004a00 <HAL_TIM_Base_Start+0x5c>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a16      	ldr	r2, [pc, #88]	@ (8004a54 <HAL_TIM_Base_Start+0xb0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d111      	bne.n	8004a24 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b06      	cmp	r3, #6
 8004a10:	d010      	beq.n	8004a34 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0201 	orr.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a22:	e007      	b.n	8004a34 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40010000 	.word	0x40010000
 8004a48:	40000400 	.word	0x40000400
 8004a4c:	40000800 	.word	0x40000800
 8004a50:	40000c00 	.word	0x40000c00
 8004a54:	40014000 	.word	0x40014000

08004a58 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6a1a      	ldr	r2, [r3, #32]
 8004a66:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10f      	bne.n	8004a90 <HAL_TIM_Base_Stop+0x38>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6a1a      	ldr	r2, [r3, #32]
 8004a76:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d107      	bne.n	8004a90 <HAL_TIM_Base_Stop+0x38>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0201 	bic.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
	...

08004aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d001      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e044      	b.n	8004b4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1e      	ldr	r2, [pc, #120]	@ (8004b58 <HAL_TIM_Base_Start_IT+0xb0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d018      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x6c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aea:	d013      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x6c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b5c <HAL_TIM_Base_Start_IT+0xb4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00e      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x6c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a19      	ldr	r2, [pc, #100]	@ (8004b60 <HAL_TIM_Base_Start_IT+0xb8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d009      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x6c>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a17      	ldr	r2, [pc, #92]	@ (8004b64 <HAL_TIM_Base_Start_IT+0xbc>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x6c>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a16      	ldr	r2, [pc, #88]	@ (8004b68 <HAL_TIM_Base_Start_IT+0xc0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d111      	bne.n	8004b38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b06      	cmp	r3, #6
 8004b24:	d010      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0201 	orr.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b36:	e007      	b.n	8004b48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40000800 	.word	0x40000800
 8004b64:	40000c00 	.word	0x40000c00
 8004b68:	40014000 	.word	0x40014000

08004b6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e041      	b.n	8004c02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fc f9fc 	bl	8000f90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4610      	mov	r0, r2
 8004bac:	f000 fbe4 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <HAL_TIM_PWM_Start+0x24>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	bf14      	ite	ne
 8004c28:	2301      	movne	r3, #1
 8004c2a:	2300      	moveq	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	e022      	b.n	8004c76 <HAL_TIM_PWM_Start+0x6a>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d109      	bne.n	8004c4a <HAL_TIM_PWM_Start+0x3e>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	bf14      	ite	ne
 8004c42:	2301      	movne	r3, #1
 8004c44:	2300      	moveq	r3, #0
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	e015      	b.n	8004c76 <HAL_TIM_PWM_Start+0x6a>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d109      	bne.n	8004c64 <HAL_TIM_PWM_Start+0x58>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	bf14      	ite	ne
 8004c5c:	2301      	movne	r3, #1
 8004c5e:	2300      	moveq	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e008      	b.n	8004c76 <HAL_TIM_PWM_Start+0x6a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	bf14      	ite	ne
 8004c70:	2301      	movne	r3, #1
 8004c72:	2300      	moveq	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e068      	b.n	8004d50 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d104      	bne.n	8004c8e <HAL_TIM_PWM_Start+0x82>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c8c:	e013      	b.n	8004cb6 <HAL_TIM_PWM_Start+0xaa>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d104      	bne.n	8004c9e <HAL_TIM_PWM_Start+0x92>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c9c:	e00b      	b.n	8004cb6 <HAL_TIM_PWM_Start+0xaa>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d104      	bne.n	8004cae <HAL_TIM_PWM_Start+0xa2>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cac:	e003      	b.n	8004cb6 <HAL_TIM_PWM_Start+0xaa>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	6839      	ldr	r1, [r7, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fe06 	bl	80058d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a23      	ldr	r2, [pc, #140]	@ (8004d58 <HAL_TIM_PWM_Start+0x14c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d107      	bne.n	8004cde <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d58 <HAL_TIM_PWM_Start+0x14c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d018      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x10e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf0:	d013      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x10e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a19      	ldr	r2, [pc, #100]	@ (8004d5c <HAL_TIM_PWM_Start+0x150>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00e      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x10e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a17      	ldr	r2, [pc, #92]	@ (8004d60 <HAL_TIM_PWM_Start+0x154>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d009      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x10e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a16      	ldr	r2, [pc, #88]	@ (8004d64 <HAL_TIM_PWM_Start+0x158>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x10e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a14      	ldr	r2, [pc, #80]	@ (8004d68 <HAL_TIM_PWM_Start+0x15c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d111      	bne.n	8004d3e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b06      	cmp	r3, #6
 8004d2a:	d010      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3c:	e007      	b.n	8004d4e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40010000 	.word	0x40010000
 8004d5c:	40000400 	.word	0x40000400
 8004d60:	40000800 	.word	0x40000800
 8004d64:	40000c00 	.word	0x40000c00
 8004d68:	40014000 	.word	0x40014000

08004d6c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	6839      	ldr	r1, [r7, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fda6 	bl	80058d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a29      	ldr	r2, [pc, #164]	@ (8004e30 <HAL_TIM_PWM_Stop+0xc4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d117      	bne.n	8004dbe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6a1a      	ldr	r2, [r3, #32]
 8004d94:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10f      	bne.n	8004dbe <HAL_TIM_PWM_Stop+0x52>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6a1a      	ldr	r2, [r3, #32]
 8004da4:	f240 4344 	movw	r3, #1092	@ 0x444
 8004da8:	4013      	ands	r3, r2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d107      	bne.n	8004dbe <HAL_TIM_PWM_Stop+0x52>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6a1a      	ldr	r2, [r3, #32]
 8004dc4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10f      	bne.n	8004dee <HAL_TIM_PWM_Stop+0x82>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6a1a      	ldr	r2, [r3, #32]
 8004dd4:	f240 4344 	movw	r3, #1092	@ 0x444
 8004dd8:	4013      	ands	r3, r2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d107      	bne.n	8004dee <HAL_TIM_PWM_Stop+0x82>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0201 	bic.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d104      	bne.n	8004dfe <HAL_TIM_PWM_Stop+0x92>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dfc:	e013      	b.n	8004e26 <HAL_TIM_PWM_Stop+0xba>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d104      	bne.n	8004e0e <HAL_TIM_PWM_Stop+0xa2>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e0c:	e00b      	b.n	8004e26 <HAL_TIM_PWM_Stop+0xba>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d104      	bne.n	8004e1e <HAL_TIM_PWM_Stop+0xb2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e1c:	e003      	b.n	8004e26 <HAL_TIM_PWM_Stop+0xba>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40010000 	.word	0x40010000

08004e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d020      	beq.n	8004e98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01b      	beq.n	8004e98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0202 	mvn.w	r2, #2
 8004e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fa5b 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fa4d 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fa5e 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d020      	beq.n	8004ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01b      	beq.n	8004ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0204 	mvn.w	r2, #4
 8004eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fa35 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8004ed0:	e005      	b.n	8004ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa27 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fa38 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d020      	beq.n	8004f30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01b      	beq.n	8004f30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0208 	mvn.w	r2, #8
 8004f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2204      	movs	r2, #4
 8004f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fa0f 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8004f1c:	e005      	b.n	8004f2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fa01 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fa12 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d020      	beq.n	8004f7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01b      	beq.n	8004f7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0210 	mvn.w	r2, #16
 8004f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2208      	movs	r2, #8
 8004f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f9e9 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8004f68:	e005      	b.n	8004f76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f9db 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f9ec 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00c      	beq.n	8004fa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0201 	mvn.w	r2, #1
 8004f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7fc fec8 	bl	8001d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00c      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d007      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fd76 	bl	8005ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00c      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f9bd 	bl	8005362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00c      	beq.n	800500c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d007      	beq.n	800500c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0220 	mvn.w	r2, #32
 8005004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fd48 	bl	8005a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800502e:	2302      	movs	r3, #2
 8005030:	e0ae      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b0c      	cmp	r3, #12
 800503e:	f200 809f 	bhi.w	8005180 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005042:	a201      	add	r2, pc, #4	@ (adr r2, 8005048 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005048:	0800507d 	.word	0x0800507d
 800504c:	08005181 	.word	0x08005181
 8005050:	08005181 	.word	0x08005181
 8005054:	08005181 	.word	0x08005181
 8005058:	080050bd 	.word	0x080050bd
 800505c:	08005181 	.word	0x08005181
 8005060:	08005181 	.word	0x08005181
 8005064:	08005181 	.word	0x08005181
 8005068:	080050ff 	.word	0x080050ff
 800506c:	08005181 	.word	0x08005181
 8005070:	08005181 	.word	0x08005181
 8005074:	08005181 	.word	0x08005181
 8005078:	0800513f 	.word	0x0800513f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 f9fe 	bl	8005484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0208 	orr.w	r2, r2, #8
 8005096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0204 	bic.w	r2, r2, #4
 80050a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6999      	ldr	r1, [r3, #24]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	619a      	str	r2, [r3, #24]
      break;
 80050ba:	e064      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fa44 	bl	8005550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6999      	ldr	r1, [r3, #24]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	021a      	lsls	r2, r3, #8
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	619a      	str	r2, [r3, #24]
      break;
 80050fc:	e043      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fa8f 	bl	8005628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0208 	orr.w	r2, r2, #8
 8005118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0204 	bic.w	r2, r2, #4
 8005128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69d9      	ldr	r1, [r3, #28]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	61da      	str	r2, [r3, #28]
      break;
 800513c:	e023      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fad9 	bl	80056fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69da      	ldr	r2, [r3, #28]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69d9      	ldr	r1, [r3, #28]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	021a      	lsls	r2, r3, #8
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	61da      	str	r2, [r3, #28]
      break;
 800517e:	e002      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	75fb      	strb	r3, [r7, #23]
      break;
 8005184:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_TIM_ConfigClockSource+0x1c>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e0b4      	b.n	800531e <HAL_TIM_ConfigClockSource+0x186>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80051d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ec:	d03e      	beq.n	800526c <HAL_TIM_ConfigClockSource+0xd4>
 80051ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051f2:	f200 8087 	bhi.w	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 80051f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051fa:	f000 8086 	beq.w	800530a <HAL_TIM_ConfigClockSource+0x172>
 80051fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005202:	d87f      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005204:	2b70      	cmp	r3, #112	@ 0x70
 8005206:	d01a      	beq.n	800523e <HAL_TIM_ConfigClockSource+0xa6>
 8005208:	2b70      	cmp	r3, #112	@ 0x70
 800520a:	d87b      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 800520c:	2b60      	cmp	r3, #96	@ 0x60
 800520e:	d050      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x11a>
 8005210:	2b60      	cmp	r3, #96	@ 0x60
 8005212:	d877      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005214:	2b50      	cmp	r3, #80	@ 0x50
 8005216:	d03c      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0xfa>
 8005218:	2b50      	cmp	r3, #80	@ 0x50
 800521a:	d873      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 800521c:	2b40      	cmp	r3, #64	@ 0x40
 800521e:	d058      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x13a>
 8005220:	2b40      	cmp	r3, #64	@ 0x40
 8005222:	d86f      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005224:	2b30      	cmp	r3, #48	@ 0x30
 8005226:	d064      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005228:	2b30      	cmp	r3, #48	@ 0x30
 800522a:	d86b      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 800522c:	2b20      	cmp	r3, #32
 800522e:	d060      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005230:	2b20      	cmp	r3, #32
 8005232:	d867      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d05c      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005238:	2b10      	cmp	r3, #16
 800523a:	d05a      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 800523c:	e062      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800524e:	f000 fb1f 	bl	8005890 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	609a      	str	r2, [r3, #8]
      break;
 800526a:	e04f      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800527c:	f000 fb08 	bl	8005890 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800528e:	609a      	str	r2, [r3, #8]
      break;
 8005290:	e03c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800529e:	461a      	mov	r2, r3
 80052a0:	f000 fa7c 	bl	800579c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2150      	movs	r1, #80	@ 0x50
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fad5 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 80052b0:	e02c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052be:	461a      	mov	r2, r3
 80052c0:	f000 fa9b 	bl	80057fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2160      	movs	r1, #96	@ 0x60
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fac5 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 80052d0:	e01c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052de:	461a      	mov	r2, r3
 80052e0:	f000 fa5c 	bl	800579c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2140      	movs	r1, #64	@ 0x40
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fab5 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 80052f0:	e00c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f000 faac 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 8005302:	e003      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
      break;
 8005308:	e000      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800530a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a37      	ldr	r2, [pc, #220]	@ (8005468 <TIM_Base_SetConfig+0xf0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00f      	beq.n	80053b0 <TIM_Base_SetConfig+0x38>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005396:	d00b      	beq.n	80053b0 <TIM_Base_SetConfig+0x38>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a34      	ldr	r2, [pc, #208]	@ (800546c <TIM_Base_SetConfig+0xf4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d007      	beq.n	80053b0 <TIM_Base_SetConfig+0x38>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a33      	ldr	r2, [pc, #204]	@ (8005470 <TIM_Base_SetConfig+0xf8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_Base_SetConfig+0x38>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a32      	ldr	r2, [pc, #200]	@ (8005474 <TIM_Base_SetConfig+0xfc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d108      	bne.n	80053c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a28      	ldr	r2, [pc, #160]	@ (8005468 <TIM_Base_SetConfig+0xf0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d01b      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d0:	d017      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a25      	ldr	r2, [pc, #148]	@ (800546c <TIM_Base_SetConfig+0xf4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a24      	ldr	r2, [pc, #144]	@ (8005470 <TIM_Base_SetConfig+0xf8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00f      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a23      	ldr	r2, [pc, #140]	@ (8005474 <TIM_Base_SetConfig+0xfc>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00b      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a22      	ldr	r2, [pc, #136]	@ (8005478 <TIM_Base_SetConfig+0x100>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d007      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a21      	ldr	r2, [pc, #132]	@ (800547c <TIM_Base_SetConfig+0x104>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a20      	ldr	r2, [pc, #128]	@ (8005480 <TIM_Base_SetConfig+0x108>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d108      	bne.n	8005414 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a0c      	ldr	r2, [pc, #48]	@ (8005468 <TIM_Base_SetConfig+0xf0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d103      	bne.n	8005442 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f043 0204 	orr.w	r2, r3, #4
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	601a      	str	r2, [r3, #0]
}
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40010000 	.word	0x40010000
 800546c:	40000400 	.word	0x40000400
 8005470:	40000800 	.word	0x40000800
 8005474:	40000c00 	.word	0x40000c00
 8005478:	40014000 	.word	0x40014000
 800547c:	40014400 	.word	0x40014400
 8005480:	40014800 	.word	0x40014800

08005484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	f023 0201 	bic.w	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0303 	bic.w	r3, r3, #3
 80054ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f023 0302 	bic.w	r3, r3, #2
 80054cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a1c      	ldr	r2, [pc, #112]	@ (800554c <TIM_OC1_SetConfig+0xc8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d10c      	bne.n	80054fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f023 0308 	bic.w	r3, r3, #8
 80054e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f023 0304 	bic.w	r3, r3, #4
 80054f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a13      	ldr	r2, [pc, #76]	@ (800554c <TIM_OC1_SetConfig+0xc8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d111      	bne.n	8005526 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	621a      	str	r2, [r3, #32]
}
 8005540:	bf00      	nop
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	40010000 	.word	0x40010000

08005550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	f023 0210 	bic.w	r2, r3, #16
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800557e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	021b      	lsls	r3, r3, #8
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f023 0320 	bic.w	r3, r3, #32
 800559a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005624 <TIM_OC2_SetConfig+0xd4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d10d      	bne.n	80055cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a15      	ldr	r2, [pc, #84]	@ (8005624 <TIM_OC2_SetConfig+0xd4>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d113      	bne.n	80055fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	621a      	str	r2, [r3, #32]
}
 8005616:	bf00      	nop
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40010000 	.word	0x40010000

08005628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0303 	bic.w	r3, r3, #3
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a1d      	ldr	r2, [pc, #116]	@ (80056f8 <TIM_OC3_SetConfig+0xd0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d10d      	bne.n	80056a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800568c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	021b      	lsls	r3, r3, #8
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a14      	ldr	r2, [pc, #80]	@ (80056f8 <TIM_OC3_SetConfig+0xd0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d113      	bne.n	80056d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	621a      	str	r2, [r3, #32]
}
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	40010000 	.word	0x40010000

080056fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800572a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	031b      	lsls	r3, r3, #12
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a10      	ldr	r2, [pc, #64]	@ (8005798 <TIM_OC4_SetConfig+0x9c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d109      	bne.n	8005770 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005762:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	019b      	lsls	r3, r3, #6
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	621a      	str	r2, [r3, #32]
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40010000 	.word	0x40010000

0800579c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f023 0201 	bic.w	r2, r3, #1
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f023 030a 	bic.w	r3, r3, #10
 80057d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	621a      	str	r2, [r3, #32]
}
 80057ee:	bf00      	nop
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b087      	sub	sp, #28
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f023 0210 	bic.w	r2, r3, #16
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	031b      	lsls	r3, r3, #12
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005836:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	621a      	str	r2, [r3, #32]
}
 800584e:	bf00      	nop
 8005850:	371c      	adds	r7, #28
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	f043 0307 	orr.w	r3, r3, #7
 800587c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	609a      	str	r2, [r3, #8]
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	021a      	lsls	r2, r3, #8
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	609a      	str	r2, [r3, #8]
}
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	2201      	movs	r2, #1
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a1a      	ldr	r2, [r3, #32]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	401a      	ands	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a1a      	ldr	r2, [r3, #32]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	fa01 f303 	lsl.w	r3, r1, r3
 8005908:	431a      	orrs	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
	...

0800591c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005930:	2302      	movs	r3, #2
 8005932:	e050      	b.n	80059d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1c      	ldr	r2, [pc, #112]	@ (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d018      	beq.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005980:	d013      	beq.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a18      	ldr	r2, [pc, #96]	@ (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00e      	beq.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a16      	ldr	r2, [pc, #88]	@ (80059ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d009      	beq.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a15      	ldr	r2, [pc, #84]	@ (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d004      	beq.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a13      	ldr	r2, [pc, #76]	@ (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d10c      	bne.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40000400 	.word	0x40000400
 80059ec:	40000800 	.word	0x40000800
 80059f0:	40000c00 	.word	0x40000c00
 80059f4:	40014000 	.word	0x40014000

080059f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e03d      	b.n	8005a90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e042      	b.n	8005b5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fb fb66 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2224      	movs	r2, #36	@ 0x24
 8005af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fdd3 	bl	80066b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695a      	ldr	r2, [r3, #20]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08a      	sub	sp, #40	@ 0x28
 8005b68:	af02      	add	r7, sp, #8
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	603b      	str	r3, [r7, #0]
 8005b70:	4613      	mov	r3, r2
 8005b72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d175      	bne.n	8005c70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <HAL_UART_Transmit+0x2c>
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e06e      	b.n	8005c72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2221      	movs	r2, #33	@ 0x21
 8005b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ba2:	f7fd f96d 	bl	8002e80 <HAL_GetTick>
 8005ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	88fa      	ldrh	r2, [r7, #6]
 8005bac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	88fa      	ldrh	r2, [r7, #6]
 8005bb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bbc:	d108      	bne.n	8005bd0 <HAL_UART_Transmit+0x6c>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	e003      	b.n	8005bd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bd8:	e02e      	b.n	8005c38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2200      	movs	r2, #0
 8005be2:	2180      	movs	r1, #128	@ 0x80
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 fb37 	bl	8006258 <UART_WaitOnFlagUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e03a      	b.n	8005c72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10b      	bne.n	8005c1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	3302      	adds	r3, #2
 8005c16:	61bb      	str	r3, [r7, #24]
 8005c18:	e007      	b.n	8005c2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	3301      	adds	r3, #1
 8005c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1cb      	bne.n	8005bda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2140      	movs	r1, #64	@ 0x40
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 fb03 	bl	8006258 <UART_WaitOnFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d005      	beq.n	8005c64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e006      	b.n	8005c72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e000      	b.n	8005c72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005c70:	2302      	movs	r3, #2
  }
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3720      	adds	r7, #32
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	4613      	mov	r3, r2
 8005c86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	d112      	bne.n	8005cba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <HAL_UART_Receive_IT+0x26>
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e00b      	b.n	8005cbc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005caa:	88fb      	ldrh	r3, [r7, #6]
 8005cac:	461a      	mov	r2, r3
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 fb2a 	bl	800630a <UART_Start_Receive_IT>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	e000      	b.n	8005cbc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005cba:	2302      	movs	r3, #2
  }
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b0ba      	sub	sp, #232	@ 0xe8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10f      	bne.n	8005d2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d009      	beq.n	8005d2a <HAL_UART_IRQHandler+0x66>
 8005d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fc07 	bl	8006536 <UART_Receive_IT>
      return;
 8005d28:	e273      	b.n	8006212 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 80de 	beq.w	8005ef0 <HAL_UART_IRQHandler+0x22c>
 8005d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d106      	bne.n	8005d4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 80d1 	beq.w	8005ef0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00b      	beq.n	8005d72 <HAL_UART_IRQHandler+0xae>
 8005d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6a:	f043 0201 	orr.w	r2, r3, #1
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <HAL_UART_IRQHandler+0xd2>
 8005d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d8e:	f043 0202 	orr.w	r2, r3, #2
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00b      	beq.n	8005dba <HAL_UART_IRQHandler+0xf6>
 8005da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db2:	f043 0204 	orr.w	r2, r3, #4
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d011      	beq.n	8005dea <HAL_UART_IRQHandler+0x126>
 8005dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dca:	f003 0320 	and.w	r3, r3, #32
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d105      	bne.n	8005dde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de2:	f043 0208 	orr.w	r2, r3, #8
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 820a 	beq.w	8006208 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d008      	beq.n	8005e12 <HAL_UART_IRQHandler+0x14e>
 8005e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fb92 	bl	8006536 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1c:	2b40      	cmp	r3, #64	@ 0x40
 8005e1e:	bf0c      	ite	eq
 8005e20:	2301      	moveq	r3, #1
 8005e22:	2300      	movne	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d103      	bne.n	8005e3e <HAL_UART_IRQHandler+0x17a>
 8005e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d04f      	beq.n	8005ede <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fa9d 	bl	800637e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4e:	2b40      	cmp	r3, #64	@ 0x40
 8005e50:	d141      	bne.n	8005ed6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3314      	adds	r3, #20
 8005e58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e60:	e853 3f00 	ldrex	r3, [r3]
 8005e64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3314      	adds	r3, #20
 8005e7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005e8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1d9      	bne.n	8005e52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d013      	beq.n	8005ece <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eaa:	4a8a      	ldr	r2, [pc, #552]	@ (80060d4 <HAL_UART_IRQHandler+0x410>)
 8005eac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fd f9f3 	bl	800329e <HAL_DMA_Abort_IT>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d016      	beq.n	8005eec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ecc:	e00e      	b.n	8005eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f9ac 	bl	800622c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed4:	e00a      	b.n	8005eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f9a8 	bl	800622c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005edc:	e006      	b.n	8005eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f9a4 	bl	800622c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005eea:	e18d      	b.n	8006208 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eec:	bf00      	nop
    return;
 8005eee:	e18b      	b.n	8006208 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	f040 8167 	bne.w	80061c8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005efe:	f003 0310 	and.w	r3, r3, #16
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 8160 	beq.w	80061c8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f0c:	f003 0310 	and.w	r3, r3, #16
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 8159 	beq.w	80061c8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f16:	2300      	movs	r3, #0
 8005f18:	60bb      	str	r3, [r7, #8]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60bb      	str	r3, [r7, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	60bb      	str	r3, [r7, #8]
 8005f2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f36:	2b40      	cmp	r3, #64	@ 0x40
 8005f38:	f040 80ce 	bne.w	80060d8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 80a9 	beq.w	80060a4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	f080 80a2 	bcs.w	80060a4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f72:	f000 8088 	beq.w	8006086 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	330c      	adds	r3, #12
 8005f7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005fa2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005fa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1d9      	bne.n	8005f76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3314      	adds	r3, #20
 8005fc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005fd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3314      	adds	r3, #20
 8005fe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005fe6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005fea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005fee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ff2:	e841 2300 	strex	r3, r2, [r1]
 8005ff6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ff8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1e1      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3314      	adds	r3, #20
 8006004:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006006:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800600e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006010:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006014:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3314      	adds	r3, #20
 800601e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006022:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006024:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006028:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e3      	bne.n	8005ffe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800604e:	e853 3f00 	ldrex	r3, [r3]
 8006052:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006056:	f023 0310 	bic.w	r3, r3, #16
 800605a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	330c      	adds	r3, #12
 8006064:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006068:	65ba      	str	r2, [r7, #88]	@ 0x58
 800606a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800606e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006070:	e841 2300 	strex	r3, r2, [r1]
 8006074:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1e3      	bne.n	8006044 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006080:	4618      	mov	r0, r3
 8006082:	f7fd f89c 	bl	80031be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006094:	b29b      	uxth	r3, r3
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	b29b      	uxth	r3, r3
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f8cf 	bl	8006240 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80060a2:	e0b3      	b.n	800620c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060ac:	429a      	cmp	r2, r3
 80060ae:	f040 80ad 	bne.w	800620c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060bc:	f040 80a6 	bne.w	800620c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f8b7 	bl	8006240 <HAL_UARTEx_RxEventCallback>
      return;
 80060d2:	e09b      	b.n	800620c <HAL_UART_IRQHandler+0x548>
 80060d4:	08006445 	.word	0x08006445
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 808e 	beq.w	8006210 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80060f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 8089 	beq.w	8006210 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	330c      	adds	r3, #12
 8006104:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800610e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006110:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006114:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	330c      	adds	r3, #12
 800611e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006122:	647a      	str	r2, [r7, #68]	@ 0x44
 8006124:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006128:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e3      	bne.n	80060fe <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3314      	adds	r3, #20
 800613c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	623b      	str	r3, [r7, #32]
   return(result);
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	f023 0301 	bic.w	r3, r3, #1
 800614c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3314      	adds	r3, #20
 8006156:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800615a:	633a      	str	r2, [r7, #48]	@ 0x30
 800615c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e3      	bne.n	8006136 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	60fb      	str	r3, [r7, #12]
   return(result);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0310 	bic.w	r3, r3, #16
 8006192:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80061a0:	61fa      	str	r2, [r7, #28]
 80061a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	69b9      	ldr	r1, [r7, #24]
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	e841 2300 	strex	r3, r2, [r1]
 80061ac:	617b      	str	r3, [r7, #20]
   return(result);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e3      	bne.n	800617c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f83d 	bl	8006240 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061c6:	e023      	b.n	8006210 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d009      	beq.n	80061e8 <HAL_UART_IRQHandler+0x524>
 80061d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f940 	bl	8006466 <UART_Transmit_IT>
    return;
 80061e6:	e014      	b.n	8006212 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00e      	beq.n	8006212 <HAL_UART_IRQHandler+0x54e>
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f980 	bl	8006506 <UART_EndTransmit_IT>
    return;
 8006206:	e004      	b.n	8006212 <HAL_UART_IRQHandler+0x54e>
    return;
 8006208:	bf00      	nop
 800620a:	e002      	b.n	8006212 <HAL_UART_IRQHandler+0x54e>
      return;
 800620c:	bf00      	nop
 800620e:	e000      	b.n	8006212 <HAL_UART_IRQHandler+0x54e>
      return;
 8006210:	bf00      	nop
  }
}
 8006212:	37e8      	adds	r7, #232	@ 0xe8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	603b      	str	r3, [r7, #0]
 8006264:	4613      	mov	r3, r2
 8006266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006268:	e03b      	b.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006270:	d037      	beq.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006272:	f7fc fe05 	bl	8002e80 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	6a3a      	ldr	r2, [r7, #32]
 800627e:	429a      	cmp	r2, r3
 8006280:	d302      	bcc.n	8006288 <UART_WaitOnFlagUntilTimeout+0x30>
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e03a      	b.n	8006302 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f003 0304 	and.w	r3, r3, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	d023      	beq.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b80      	cmp	r3, #128	@ 0x80
 800629e:	d020      	beq.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b40      	cmp	r3, #64	@ 0x40
 80062a4:	d01d      	beq.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d116      	bne.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 f857 	bl	800637e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2208      	movs	r2, #8
 80062d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e00f      	b.n	8006302 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4013      	ands	r3, r2
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	bf0c      	ite	eq
 80062f2:	2301      	moveq	r3, #1
 80062f4:	2300      	movne	r3, #0
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d0b4      	beq.n	800626a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	4613      	mov	r3, r2
 8006316:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	88fa      	ldrh	r2, [r7, #6]
 8006322:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	88fa      	ldrh	r2, [r7, #6]
 8006328:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2222      	movs	r2, #34	@ 0x22
 8006334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800634e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0201 	orr.w	r2, r2, #1
 800635e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0220 	orr.w	r2, r2, #32
 800636e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800637e:	b480      	push	{r7}
 8006380:	b095      	sub	sp, #84	@ 0x54
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	330c      	adds	r3, #12
 800638c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800639c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	330c      	adds	r3, #12
 80063a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80063a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1e5      	bne.n	8006386 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3314      	adds	r3, #20
 80063c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	f023 0301 	bic.w	r3, r3, #1
 80063d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3314      	adds	r3, #20
 80063d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e5      	bne.n	80063ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d119      	bne.n	800642a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	330c      	adds	r3, #12
 80063fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	60bb      	str	r3, [r7, #8]
   return(result);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f023 0310 	bic.w	r3, r3, #16
 800640c:	647b      	str	r3, [r7, #68]	@ 0x44
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	330c      	adds	r3, #12
 8006414:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006416:	61ba      	str	r2, [r7, #24]
 8006418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6979      	ldr	r1, [r7, #20]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	613b      	str	r3, [r7, #16]
   return(result);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e5      	bne.n	80063f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006438:	bf00      	nop
 800643a:	3754      	adds	r7, #84	@ 0x54
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006450:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f7ff fee7 	bl	800622c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800645e:	bf00      	nop
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006466:	b480      	push	{r7}
 8006468:	b085      	sub	sp, #20
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b21      	cmp	r3, #33	@ 0x21
 8006478:	d13e      	bne.n	80064f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006482:	d114      	bne.n	80064ae <UART_Transmit_IT+0x48>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d110      	bne.n	80064ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	1c9a      	adds	r2, r3, #2
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	621a      	str	r2, [r3, #32]
 80064ac:	e008      	b.n	80064c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	1c59      	adds	r1, r3, #1
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	6211      	str	r1, [r2, #32]
 80064b8:	781a      	ldrb	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	4619      	mov	r1, r3
 80064ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10f      	bne.n	80064f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e000      	b.n	80064fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b082      	sub	sp, #8
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800651c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2220      	movs	r2, #32
 8006522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff fe76 	bl	8006218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b08c      	sub	sp, #48	@ 0x30
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800653e:	2300      	movs	r3, #0
 8006540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006542:	2300      	movs	r3, #0
 8006544:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b22      	cmp	r3, #34	@ 0x22
 8006550:	f040 80aa 	bne.w	80066a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800655c:	d115      	bne.n	800658a <UART_Receive_IT+0x54>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d111      	bne.n	800658a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006578:	b29a      	uxth	r2, r3
 800657a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006582:	1c9a      	adds	r2, r3, #2
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	629a      	str	r2, [r3, #40]	@ 0x28
 8006588:	e024      	b.n	80065d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006598:	d007      	beq.n	80065aa <UART_Receive_IT+0x74>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <UART_Receive_IT+0x82>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d106      	bne.n	80065b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	e008      	b.n	80065ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29b      	uxth	r3, r3
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	4619      	mov	r1, r3
 80065e2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d15d      	bne.n	80066a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0220 	bic.w	r2, r2, #32
 80065f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006606:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695a      	ldr	r2, [r3, #20]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0201 	bic.w	r2, r2, #1
 8006616:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662a:	2b01      	cmp	r3, #1
 800662c:	d135      	bne.n	800669a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	330c      	adds	r3, #12
 800663a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	613b      	str	r3, [r7, #16]
   return(result);
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f023 0310 	bic.w	r3, r3, #16
 800664a:	627b      	str	r3, [r7, #36]	@ 0x24
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	330c      	adds	r3, #12
 8006652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006654:	623a      	str	r2, [r7, #32]
 8006656:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006658:	69f9      	ldr	r1, [r7, #28]
 800665a:	6a3a      	ldr	r2, [r7, #32]
 800665c:	e841 2300 	strex	r3, r2, [r1]
 8006660:	61bb      	str	r3, [r7, #24]
   return(result);
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e5      	bne.n	8006634 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0310 	and.w	r3, r3, #16
 8006672:	2b10      	cmp	r3, #16
 8006674:	d10a      	bne.n	800668c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006676:	2300      	movs	r3, #0
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff fdd4 	bl	8006240 <HAL_UARTEx_RxEventCallback>
 8006698:	e002      	b.n	80066a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7fb fb5a 	bl	8001d54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	e002      	b.n	80066aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	e000      	b.n	80066aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80066a8:	2302      	movs	r3, #2
  }
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3730      	adds	r7, #48	@ 0x30
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066b8:	b0c0      	sub	sp, #256	@ 0x100
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80066cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d0:	68d9      	ldr	r1, [r3, #12]
 80066d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	ea40 0301 	orr.w	r3, r0, r1
 80066dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	431a      	orrs	r2, r3
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	431a      	orrs	r2, r3
 80066f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800670c:	f021 010c 	bic.w	r1, r1, #12
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800671a:	430b      	orrs	r3, r1
 800671c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800671e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800672a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800672e:	6999      	ldr	r1, [r3, #24]
 8006730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	ea40 0301 	orr.w	r3, r0, r1
 800673a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	4b8f      	ldr	r3, [pc, #572]	@ (8006980 <UART_SetConfig+0x2cc>)
 8006744:	429a      	cmp	r2, r3
 8006746:	d005      	beq.n	8006754 <UART_SetConfig+0xa0>
 8006748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	4b8d      	ldr	r3, [pc, #564]	@ (8006984 <UART_SetConfig+0x2d0>)
 8006750:	429a      	cmp	r2, r3
 8006752:	d104      	bne.n	800675e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006754:	f7fe f8c2 	bl	80048dc <HAL_RCC_GetPCLK2Freq>
 8006758:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800675c:	e003      	b.n	8006766 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800675e:	f7fe f8a9 	bl	80048b4 <HAL_RCC_GetPCLK1Freq>
 8006762:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006770:	f040 810c 	bne.w	800698c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006778:	2200      	movs	r2, #0
 800677a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800677e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006782:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006786:	4622      	mov	r2, r4
 8006788:	462b      	mov	r3, r5
 800678a:	1891      	adds	r1, r2, r2
 800678c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800678e:	415b      	adcs	r3, r3
 8006790:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006792:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006796:	4621      	mov	r1, r4
 8006798:	eb12 0801 	adds.w	r8, r2, r1
 800679c:	4629      	mov	r1, r5
 800679e:	eb43 0901 	adc.w	r9, r3, r1
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067b6:	4690      	mov	r8, r2
 80067b8:	4699      	mov	r9, r3
 80067ba:	4623      	mov	r3, r4
 80067bc:	eb18 0303 	adds.w	r3, r8, r3
 80067c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067c4:	462b      	mov	r3, r5
 80067c6:	eb49 0303 	adc.w	r3, r9, r3
 80067ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80067de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80067e2:	460b      	mov	r3, r1
 80067e4:	18db      	adds	r3, r3, r3
 80067e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80067e8:	4613      	mov	r3, r2
 80067ea:	eb42 0303 	adc.w	r3, r2, r3
 80067ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80067f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80067f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80067f8:	f7f9 fd5a 	bl	80002b0 <__aeabi_uldivmod>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4b61      	ldr	r3, [pc, #388]	@ (8006988 <UART_SetConfig+0x2d4>)
 8006802:	fba3 2302 	umull	r2, r3, r3, r2
 8006806:	095b      	lsrs	r3, r3, #5
 8006808:	011c      	lsls	r4, r3, #4
 800680a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800680e:	2200      	movs	r2, #0
 8006810:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006814:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006818:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800681c:	4642      	mov	r2, r8
 800681e:	464b      	mov	r3, r9
 8006820:	1891      	adds	r1, r2, r2
 8006822:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006824:	415b      	adcs	r3, r3
 8006826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006828:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800682c:	4641      	mov	r1, r8
 800682e:	eb12 0a01 	adds.w	sl, r2, r1
 8006832:	4649      	mov	r1, r9
 8006834:	eb43 0b01 	adc.w	fp, r3, r1
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800684c:	4692      	mov	sl, r2
 800684e:	469b      	mov	fp, r3
 8006850:	4643      	mov	r3, r8
 8006852:	eb1a 0303 	adds.w	r3, sl, r3
 8006856:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800685a:	464b      	mov	r3, r9
 800685c:	eb4b 0303 	adc.w	r3, fp, r3
 8006860:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006870:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006874:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006878:	460b      	mov	r3, r1
 800687a:	18db      	adds	r3, r3, r3
 800687c:	643b      	str	r3, [r7, #64]	@ 0x40
 800687e:	4613      	mov	r3, r2
 8006880:	eb42 0303 	adc.w	r3, r2, r3
 8006884:	647b      	str	r3, [r7, #68]	@ 0x44
 8006886:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800688a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800688e:	f7f9 fd0f 	bl	80002b0 <__aeabi_uldivmod>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4611      	mov	r1, r2
 8006898:	4b3b      	ldr	r3, [pc, #236]	@ (8006988 <UART_SetConfig+0x2d4>)
 800689a:	fba3 2301 	umull	r2, r3, r3, r1
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	2264      	movs	r2, #100	@ 0x64
 80068a2:	fb02 f303 	mul.w	r3, r2, r3
 80068a6:	1acb      	subs	r3, r1, r3
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80068ae:	4b36      	ldr	r3, [pc, #216]	@ (8006988 <UART_SetConfig+0x2d4>)
 80068b0:	fba3 2302 	umull	r2, r3, r3, r2
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	005b      	lsls	r3, r3, #1
 80068b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80068bc:	441c      	add	r4, r3
 80068be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80068cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80068d0:	4642      	mov	r2, r8
 80068d2:	464b      	mov	r3, r9
 80068d4:	1891      	adds	r1, r2, r2
 80068d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80068d8:	415b      	adcs	r3, r3
 80068da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80068e0:	4641      	mov	r1, r8
 80068e2:	1851      	adds	r1, r2, r1
 80068e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80068e6:	4649      	mov	r1, r9
 80068e8:	414b      	adcs	r3, r1
 80068ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ec:	f04f 0200 	mov.w	r2, #0
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80068f8:	4659      	mov	r1, fp
 80068fa:	00cb      	lsls	r3, r1, #3
 80068fc:	4651      	mov	r1, sl
 80068fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006902:	4651      	mov	r1, sl
 8006904:	00ca      	lsls	r2, r1, #3
 8006906:	4610      	mov	r0, r2
 8006908:	4619      	mov	r1, r3
 800690a:	4603      	mov	r3, r0
 800690c:	4642      	mov	r2, r8
 800690e:	189b      	adds	r3, r3, r2
 8006910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006914:	464b      	mov	r3, r9
 8006916:	460a      	mov	r2, r1
 8006918:	eb42 0303 	adc.w	r3, r2, r3
 800691c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800692c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006934:	460b      	mov	r3, r1
 8006936:	18db      	adds	r3, r3, r3
 8006938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800693a:	4613      	mov	r3, r2
 800693c:	eb42 0303 	adc.w	r3, r2, r3
 8006940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006946:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800694a:	f7f9 fcb1 	bl	80002b0 <__aeabi_uldivmod>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4b0d      	ldr	r3, [pc, #52]	@ (8006988 <UART_SetConfig+0x2d4>)
 8006954:	fba3 1302 	umull	r1, r3, r3, r2
 8006958:	095b      	lsrs	r3, r3, #5
 800695a:	2164      	movs	r1, #100	@ 0x64
 800695c:	fb01 f303 	mul.w	r3, r1, r3
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	3332      	adds	r3, #50	@ 0x32
 8006966:	4a08      	ldr	r2, [pc, #32]	@ (8006988 <UART_SetConfig+0x2d4>)
 8006968:	fba2 2303 	umull	r2, r3, r2, r3
 800696c:	095b      	lsrs	r3, r3, #5
 800696e:	f003 0207 	and.w	r2, r3, #7
 8006972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4422      	add	r2, r4
 800697a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800697c:	e106      	b.n	8006b8c <UART_SetConfig+0x4d8>
 800697e:	bf00      	nop
 8006980:	40011000 	.word	0x40011000
 8006984:	40011400 	.word	0x40011400
 8006988:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800698c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006990:	2200      	movs	r2, #0
 8006992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006996:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800699a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800699e:	4642      	mov	r2, r8
 80069a0:	464b      	mov	r3, r9
 80069a2:	1891      	adds	r1, r2, r2
 80069a4:	6239      	str	r1, [r7, #32]
 80069a6:	415b      	adcs	r3, r3
 80069a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80069aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069ae:	4641      	mov	r1, r8
 80069b0:	1854      	adds	r4, r2, r1
 80069b2:	4649      	mov	r1, r9
 80069b4:	eb43 0501 	adc.w	r5, r3, r1
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	f04f 0300 	mov.w	r3, #0
 80069c0:	00eb      	lsls	r3, r5, #3
 80069c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069c6:	00e2      	lsls	r2, r4, #3
 80069c8:	4614      	mov	r4, r2
 80069ca:	461d      	mov	r5, r3
 80069cc:	4643      	mov	r3, r8
 80069ce:	18e3      	adds	r3, r4, r3
 80069d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069d4:	464b      	mov	r3, r9
 80069d6:	eb45 0303 	adc.w	r3, r5, r3
 80069da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80069ee:	f04f 0200 	mov.w	r2, #0
 80069f2:	f04f 0300 	mov.w	r3, #0
 80069f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80069fa:	4629      	mov	r1, r5
 80069fc:	008b      	lsls	r3, r1, #2
 80069fe:	4621      	mov	r1, r4
 8006a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a04:	4621      	mov	r1, r4
 8006a06:	008a      	lsls	r2, r1, #2
 8006a08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006a0c:	f7f9 fc50 	bl	80002b0 <__aeabi_uldivmod>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4b60      	ldr	r3, [pc, #384]	@ (8006b98 <UART_SetConfig+0x4e4>)
 8006a16:	fba3 2302 	umull	r2, r3, r3, r2
 8006a1a:	095b      	lsrs	r3, r3, #5
 8006a1c:	011c      	lsls	r4, r3, #4
 8006a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006a2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006a30:	4642      	mov	r2, r8
 8006a32:	464b      	mov	r3, r9
 8006a34:	1891      	adds	r1, r2, r2
 8006a36:	61b9      	str	r1, [r7, #24]
 8006a38:	415b      	adcs	r3, r3
 8006a3a:	61fb      	str	r3, [r7, #28]
 8006a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a40:	4641      	mov	r1, r8
 8006a42:	1851      	adds	r1, r2, r1
 8006a44:	6139      	str	r1, [r7, #16]
 8006a46:	4649      	mov	r1, r9
 8006a48:	414b      	adcs	r3, r1
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	f04f 0300 	mov.w	r3, #0
 8006a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a58:	4659      	mov	r1, fp
 8006a5a:	00cb      	lsls	r3, r1, #3
 8006a5c:	4651      	mov	r1, sl
 8006a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a62:	4651      	mov	r1, sl
 8006a64:	00ca      	lsls	r2, r1, #3
 8006a66:	4610      	mov	r0, r2
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	189b      	adds	r3, r3, r2
 8006a70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a74:	464b      	mov	r3, r9
 8006a76:	460a      	mov	r2, r1
 8006a78:	eb42 0303 	adc.w	r3, r2, r3
 8006a7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a8c:	f04f 0200 	mov.w	r2, #0
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a98:	4649      	mov	r1, r9
 8006a9a:	008b      	lsls	r3, r1, #2
 8006a9c:	4641      	mov	r1, r8
 8006a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aa2:	4641      	mov	r1, r8
 8006aa4:	008a      	lsls	r2, r1, #2
 8006aa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006aaa:	f7f9 fc01 	bl	80002b0 <__aeabi_uldivmod>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	4b38      	ldr	r3, [pc, #224]	@ (8006b98 <UART_SetConfig+0x4e4>)
 8006ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8006aba:	095b      	lsrs	r3, r3, #5
 8006abc:	2264      	movs	r2, #100	@ 0x64
 8006abe:	fb02 f303 	mul.w	r3, r2, r3
 8006ac2:	1acb      	subs	r3, r1, r3
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	3332      	adds	r3, #50	@ 0x32
 8006ac8:	4a33      	ldr	r2, [pc, #204]	@ (8006b98 <UART_SetConfig+0x4e4>)
 8006aca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ace:	095b      	lsrs	r3, r3, #5
 8006ad0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ad4:	441c      	add	r4, r3
 8006ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ada:	2200      	movs	r2, #0
 8006adc:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ade:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ae0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ae4:	4642      	mov	r2, r8
 8006ae6:	464b      	mov	r3, r9
 8006ae8:	1891      	adds	r1, r2, r2
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	415b      	adcs	r3, r3
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006af4:	4641      	mov	r1, r8
 8006af6:	1851      	adds	r1, r2, r1
 8006af8:	6039      	str	r1, [r7, #0]
 8006afa:	4649      	mov	r1, r9
 8006afc:	414b      	adcs	r3, r1
 8006afe:	607b      	str	r3, [r7, #4]
 8006b00:	f04f 0200 	mov.w	r2, #0
 8006b04:	f04f 0300 	mov.w	r3, #0
 8006b08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b0c:	4659      	mov	r1, fp
 8006b0e:	00cb      	lsls	r3, r1, #3
 8006b10:	4651      	mov	r1, sl
 8006b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b16:	4651      	mov	r1, sl
 8006b18:	00ca      	lsls	r2, r1, #3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4603      	mov	r3, r0
 8006b20:	4642      	mov	r2, r8
 8006b22:	189b      	adds	r3, r3, r2
 8006b24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b26:	464b      	mov	r3, r9
 8006b28:	460a      	mov	r2, r1
 8006b2a:	eb42 0303 	adc.w	r3, r2, r3
 8006b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	f04f 0300 	mov.w	r3, #0
 8006b44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b48:	4649      	mov	r1, r9
 8006b4a:	008b      	lsls	r3, r1, #2
 8006b4c:	4641      	mov	r1, r8
 8006b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b52:	4641      	mov	r1, r8
 8006b54:	008a      	lsls	r2, r1, #2
 8006b56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b5a:	f7f9 fba9 	bl	80002b0 <__aeabi_uldivmod>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4b0d      	ldr	r3, [pc, #52]	@ (8006b98 <UART_SetConfig+0x4e4>)
 8006b64:	fba3 1302 	umull	r1, r3, r3, r2
 8006b68:	095b      	lsrs	r3, r3, #5
 8006b6a:	2164      	movs	r1, #100	@ 0x64
 8006b6c:	fb01 f303 	mul.w	r3, r1, r3
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	3332      	adds	r3, #50	@ 0x32
 8006b76:	4a08      	ldr	r2, [pc, #32]	@ (8006b98 <UART_SetConfig+0x4e4>)
 8006b78:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	f003 020f 	and.w	r2, r3, #15
 8006b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4422      	add	r2, r4
 8006b8a:	609a      	str	r2, [r3, #8]
}
 8006b8c:	bf00      	nop
 8006b8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b92:	46bd      	mov	sp, r7
 8006b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b98:	51eb851f 	.word	0x51eb851f

08006b9c <std>:
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	b510      	push	{r4, lr}
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006baa:	6083      	str	r3, [r0, #8]
 8006bac:	8181      	strh	r1, [r0, #12]
 8006bae:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bb0:	81c2      	strh	r2, [r0, #14]
 8006bb2:	6183      	str	r3, [r0, #24]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	2208      	movs	r2, #8
 8006bb8:	305c      	adds	r0, #92	@ 0x5c
 8006bba:	f000 f95e 	bl	8006e7a <memset>
 8006bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf4 <std+0x58>)
 8006bc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf8 <std+0x5c>)
 8006bc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006bfc <std+0x60>)
 8006bc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bca:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <std+0x64>)
 8006bcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bce:	4b0d      	ldr	r3, [pc, #52]	@ (8006c04 <std+0x68>)
 8006bd0:	6224      	str	r4, [r4, #32]
 8006bd2:	429c      	cmp	r4, r3
 8006bd4:	d006      	beq.n	8006be4 <std+0x48>
 8006bd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bda:	4294      	cmp	r4, r2
 8006bdc:	d002      	beq.n	8006be4 <std+0x48>
 8006bde:	33d0      	adds	r3, #208	@ 0xd0
 8006be0:	429c      	cmp	r4, r3
 8006be2:	d105      	bne.n	8006bf0 <std+0x54>
 8006be4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bec:	f000 b9be 	b.w	8006f6c <__retarget_lock_init_recursive>
 8006bf0:	bd10      	pop	{r4, pc}
 8006bf2:	bf00      	nop
 8006bf4:	08006df5 	.word	0x08006df5
 8006bf8:	08006e17 	.word	0x08006e17
 8006bfc:	08006e4f 	.word	0x08006e4f
 8006c00:	08006e73 	.word	0x08006e73
 8006c04:	20000464 	.word	0x20000464

08006c08 <stdio_exit_handler>:
 8006c08:	4a02      	ldr	r2, [pc, #8]	@ (8006c14 <stdio_exit_handler+0xc>)
 8006c0a:	4903      	ldr	r1, [pc, #12]	@ (8006c18 <stdio_exit_handler+0x10>)
 8006c0c:	4803      	ldr	r0, [pc, #12]	@ (8006c1c <stdio_exit_handler+0x14>)
 8006c0e:	f000 b869 	b.w	8006ce4 <_fwalk_sglue>
 8006c12:	bf00      	nop
 8006c14:	200000ac 	.word	0x200000ac
 8006c18:	08007ac9 	.word	0x08007ac9
 8006c1c:	200000bc 	.word	0x200000bc

08006c20 <cleanup_stdio>:
 8006c20:	6841      	ldr	r1, [r0, #4]
 8006c22:	4b0c      	ldr	r3, [pc, #48]	@ (8006c54 <cleanup_stdio+0x34>)
 8006c24:	4299      	cmp	r1, r3
 8006c26:	b510      	push	{r4, lr}
 8006c28:	4604      	mov	r4, r0
 8006c2a:	d001      	beq.n	8006c30 <cleanup_stdio+0x10>
 8006c2c:	f000 ff4c 	bl	8007ac8 <_fflush_r>
 8006c30:	68a1      	ldr	r1, [r4, #8]
 8006c32:	4b09      	ldr	r3, [pc, #36]	@ (8006c58 <cleanup_stdio+0x38>)
 8006c34:	4299      	cmp	r1, r3
 8006c36:	d002      	beq.n	8006c3e <cleanup_stdio+0x1e>
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 ff45 	bl	8007ac8 <_fflush_r>
 8006c3e:	68e1      	ldr	r1, [r4, #12]
 8006c40:	4b06      	ldr	r3, [pc, #24]	@ (8006c5c <cleanup_stdio+0x3c>)
 8006c42:	4299      	cmp	r1, r3
 8006c44:	d004      	beq.n	8006c50 <cleanup_stdio+0x30>
 8006c46:	4620      	mov	r0, r4
 8006c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c4c:	f000 bf3c 	b.w	8007ac8 <_fflush_r>
 8006c50:	bd10      	pop	{r4, pc}
 8006c52:	bf00      	nop
 8006c54:	20000464 	.word	0x20000464
 8006c58:	200004cc 	.word	0x200004cc
 8006c5c:	20000534 	.word	0x20000534

08006c60 <global_stdio_init.part.0>:
 8006c60:	b510      	push	{r4, lr}
 8006c62:	4b0b      	ldr	r3, [pc, #44]	@ (8006c90 <global_stdio_init.part.0+0x30>)
 8006c64:	4c0b      	ldr	r4, [pc, #44]	@ (8006c94 <global_stdio_init.part.0+0x34>)
 8006c66:	4a0c      	ldr	r2, [pc, #48]	@ (8006c98 <global_stdio_init.part.0+0x38>)
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2104      	movs	r1, #4
 8006c70:	f7ff ff94 	bl	8006b9c <std>
 8006c74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c78:	2201      	movs	r2, #1
 8006c7a:	2109      	movs	r1, #9
 8006c7c:	f7ff ff8e 	bl	8006b9c <std>
 8006c80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c84:	2202      	movs	r2, #2
 8006c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c8a:	2112      	movs	r1, #18
 8006c8c:	f7ff bf86 	b.w	8006b9c <std>
 8006c90:	2000059c 	.word	0x2000059c
 8006c94:	20000464 	.word	0x20000464
 8006c98:	08006c09 	.word	0x08006c09

08006c9c <__sfp_lock_acquire>:
 8006c9c:	4801      	ldr	r0, [pc, #4]	@ (8006ca4 <__sfp_lock_acquire+0x8>)
 8006c9e:	f000 b966 	b.w	8006f6e <__retarget_lock_acquire_recursive>
 8006ca2:	bf00      	nop
 8006ca4:	200005a5 	.word	0x200005a5

08006ca8 <__sfp_lock_release>:
 8006ca8:	4801      	ldr	r0, [pc, #4]	@ (8006cb0 <__sfp_lock_release+0x8>)
 8006caa:	f000 b961 	b.w	8006f70 <__retarget_lock_release_recursive>
 8006cae:	bf00      	nop
 8006cb0:	200005a5 	.word	0x200005a5

08006cb4 <__sinit>:
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	f7ff fff0 	bl	8006c9c <__sfp_lock_acquire>
 8006cbc:	6a23      	ldr	r3, [r4, #32]
 8006cbe:	b11b      	cbz	r3, 8006cc8 <__sinit+0x14>
 8006cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc4:	f7ff bff0 	b.w	8006ca8 <__sfp_lock_release>
 8006cc8:	4b04      	ldr	r3, [pc, #16]	@ (8006cdc <__sinit+0x28>)
 8006cca:	6223      	str	r3, [r4, #32]
 8006ccc:	4b04      	ldr	r3, [pc, #16]	@ (8006ce0 <__sinit+0x2c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1f5      	bne.n	8006cc0 <__sinit+0xc>
 8006cd4:	f7ff ffc4 	bl	8006c60 <global_stdio_init.part.0>
 8006cd8:	e7f2      	b.n	8006cc0 <__sinit+0xc>
 8006cda:	bf00      	nop
 8006cdc:	08006c21 	.word	0x08006c21
 8006ce0:	2000059c 	.word	0x2000059c

08006ce4 <_fwalk_sglue>:
 8006ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce8:	4607      	mov	r7, r0
 8006cea:	4688      	mov	r8, r1
 8006cec:	4614      	mov	r4, r2
 8006cee:	2600      	movs	r6, #0
 8006cf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cf4:	f1b9 0901 	subs.w	r9, r9, #1
 8006cf8:	d505      	bpl.n	8006d06 <_fwalk_sglue+0x22>
 8006cfa:	6824      	ldr	r4, [r4, #0]
 8006cfc:	2c00      	cmp	r4, #0
 8006cfe:	d1f7      	bne.n	8006cf0 <_fwalk_sglue+0xc>
 8006d00:	4630      	mov	r0, r6
 8006d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d06:	89ab      	ldrh	r3, [r5, #12]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d907      	bls.n	8006d1c <_fwalk_sglue+0x38>
 8006d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d10:	3301      	adds	r3, #1
 8006d12:	d003      	beq.n	8006d1c <_fwalk_sglue+0x38>
 8006d14:	4629      	mov	r1, r5
 8006d16:	4638      	mov	r0, r7
 8006d18:	47c0      	blx	r8
 8006d1a:	4306      	orrs	r6, r0
 8006d1c:	3568      	adds	r5, #104	@ 0x68
 8006d1e:	e7e9      	b.n	8006cf4 <_fwalk_sglue+0x10>

08006d20 <iprintf>:
 8006d20:	b40f      	push	{r0, r1, r2, r3}
 8006d22:	b507      	push	{r0, r1, r2, lr}
 8006d24:	4906      	ldr	r1, [pc, #24]	@ (8006d40 <iprintf+0x20>)
 8006d26:	ab04      	add	r3, sp, #16
 8006d28:	6808      	ldr	r0, [r1, #0]
 8006d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d2e:	6881      	ldr	r1, [r0, #8]
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	f000 fba1 	bl	8007478 <_vfiprintf_r>
 8006d36:	b003      	add	sp, #12
 8006d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d3c:	b004      	add	sp, #16
 8006d3e:	4770      	bx	lr
 8006d40:	200000b8 	.word	0x200000b8

08006d44 <sniprintf>:
 8006d44:	b40c      	push	{r2, r3}
 8006d46:	b530      	push	{r4, r5, lr}
 8006d48:	4b18      	ldr	r3, [pc, #96]	@ (8006dac <sniprintf+0x68>)
 8006d4a:	1e0c      	subs	r4, r1, #0
 8006d4c:	681d      	ldr	r5, [r3, #0]
 8006d4e:	b09d      	sub	sp, #116	@ 0x74
 8006d50:	da08      	bge.n	8006d64 <sniprintf+0x20>
 8006d52:	238b      	movs	r3, #139	@ 0x8b
 8006d54:	602b      	str	r3, [r5, #0]
 8006d56:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5a:	b01d      	add	sp, #116	@ 0x74
 8006d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d60:	b002      	add	sp, #8
 8006d62:	4770      	bx	lr
 8006d64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006d68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d6c:	f04f 0300 	mov.w	r3, #0
 8006d70:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006d72:	bf14      	ite	ne
 8006d74:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d78:	4623      	moveq	r3, r4
 8006d7a:	9304      	str	r3, [sp, #16]
 8006d7c:	9307      	str	r3, [sp, #28]
 8006d7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d82:	9002      	str	r0, [sp, #8]
 8006d84:	9006      	str	r0, [sp, #24]
 8006d86:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d8a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d8c:	ab21      	add	r3, sp, #132	@ 0x84
 8006d8e:	a902      	add	r1, sp, #8
 8006d90:	4628      	mov	r0, r5
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	f000 fa4a 	bl	800722c <_svfiprintf_r>
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	bfbc      	itt	lt
 8006d9c:	238b      	movlt	r3, #139	@ 0x8b
 8006d9e:	602b      	strlt	r3, [r5, #0]
 8006da0:	2c00      	cmp	r4, #0
 8006da2:	d0da      	beq.n	8006d5a <sniprintf+0x16>
 8006da4:	9b02      	ldr	r3, [sp, #8]
 8006da6:	2200      	movs	r2, #0
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	e7d6      	b.n	8006d5a <sniprintf+0x16>
 8006dac:	200000b8 	.word	0x200000b8

08006db0 <siprintf>:
 8006db0:	b40e      	push	{r1, r2, r3}
 8006db2:	b510      	push	{r4, lr}
 8006db4:	b09d      	sub	sp, #116	@ 0x74
 8006db6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006db8:	9002      	str	r0, [sp, #8]
 8006dba:	9006      	str	r0, [sp, #24]
 8006dbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006dc0:	480a      	ldr	r0, [pc, #40]	@ (8006dec <siprintf+0x3c>)
 8006dc2:	9107      	str	r1, [sp, #28]
 8006dc4:	9104      	str	r1, [sp, #16]
 8006dc6:	490a      	ldr	r1, [pc, #40]	@ (8006df0 <siprintf+0x40>)
 8006dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dcc:	9105      	str	r1, [sp, #20]
 8006dce:	2400      	movs	r4, #0
 8006dd0:	a902      	add	r1, sp, #8
 8006dd2:	6800      	ldr	r0, [r0, #0]
 8006dd4:	9301      	str	r3, [sp, #4]
 8006dd6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006dd8:	f000 fa28 	bl	800722c <_svfiprintf_r>
 8006ddc:	9b02      	ldr	r3, [sp, #8]
 8006dde:	701c      	strb	r4, [r3, #0]
 8006de0:	b01d      	add	sp, #116	@ 0x74
 8006de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de6:	b003      	add	sp, #12
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	200000b8 	.word	0x200000b8
 8006df0:	ffff0208 	.word	0xffff0208

08006df4 <__sread>:
 8006df4:	b510      	push	{r4, lr}
 8006df6:	460c      	mov	r4, r1
 8006df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dfc:	f000 f868 	bl	8006ed0 <_read_r>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	bfab      	itete	ge
 8006e04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e06:	89a3      	ldrhlt	r3, [r4, #12]
 8006e08:	181b      	addge	r3, r3, r0
 8006e0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e0e:	bfac      	ite	ge
 8006e10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e12:	81a3      	strhlt	r3, [r4, #12]
 8006e14:	bd10      	pop	{r4, pc}

08006e16 <__swrite>:
 8006e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e1a:	461f      	mov	r7, r3
 8006e1c:	898b      	ldrh	r3, [r1, #12]
 8006e1e:	05db      	lsls	r3, r3, #23
 8006e20:	4605      	mov	r5, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	4616      	mov	r6, r2
 8006e26:	d505      	bpl.n	8006e34 <__swrite+0x1e>
 8006e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f000 f83c 	bl	8006eac <_lseek_r>
 8006e34:	89a3      	ldrh	r3, [r4, #12]
 8006e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e3e:	81a3      	strh	r3, [r4, #12]
 8006e40:	4632      	mov	r2, r6
 8006e42:	463b      	mov	r3, r7
 8006e44:	4628      	mov	r0, r5
 8006e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4a:	f000 b853 	b.w	8006ef4 <_write_r>

08006e4e <__sseek>:
 8006e4e:	b510      	push	{r4, lr}
 8006e50:	460c      	mov	r4, r1
 8006e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e56:	f000 f829 	bl	8006eac <_lseek_r>
 8006e5a:	1c43      	adds	r3, r0, #1
 8006e5c:	89a3      	ldrh	r3, [r4, #12]
 8006e5e:	bf15      	itete	ne
 8006e60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e6a:	81a3      	strheq	r3, [r4, #12]
 8006e6c:	bf18      	it	ne
 8006e6e:	81a3      	strhne	r3, [r4, #12]
 8006e70:	bd10      	pop	{r4, pc}

08006e72 <__sclose>:
 8006e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e76:	f000 b809 	b.w	8006e8c <_close_r>

08006e7a <memset>:
 8006e7a:	4402      	add	r2, r0
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d100      	bne.n	8006e84 <memset+0xa>
 8006e82:	4770      	bx	lr
 8006e84:	f803 1b01 	strb.w	r1, [r3], #1
 8006e88:	e7f9      	b.n	8006e7e <memset+0x4>
	...

08006e8c <_close_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	4d06      	ldr	r5, [pc, #24]	@ (8006ea8 <_close_r+0x1c>)
 8006e90:	2300      	movs	r3, #0
 8006e92:	4604      	mov	r4, r0
 8006e94:	4608      	mov	r0, r1
 8006e96:	602b      	str	r3, [r5, #0]
 8006e98:	f7f9 fe19 	bl	8000ace <_close>
 8006e9c:	1c43      	adds	r3, r0, #1
 8006e9e:	d102      	bne.n	8006ea6 <_close_r+0x1a>
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	b103      	cbz	r3, 8006ea6 <_close_r+0x1a>
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	bd38      	pop	{r3, r4, r5, pc}
 8006ea8:	200005a0 	.word	0x200005a0

08006eac <_lseek_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4d07      	ldr	r5, [pc, #28]	@ (8006ecc <_lseek_r+0x20>)
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	4608      	mov	r0, r1
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	602a      	str	r2, [r5, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f7f9 fe2e 	bl	8000b1c <_lseek>
 8006ec0:	1c43      	adds	r3, r0, #1
 8006ec2:	d102      	bne.n	8006eca <_lseek_r+0x1e>
 8006ec4:	682b      	ldr	r3, [r5, #0]
 8006ec6:	b103      	cbz	r3, 8006eca <_lseek_r+0x1e>
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	bd38      	pop	{r3, r4, r5, pc}
 8006ecc:	200005a0 	.word	0x200005a0

08006ed0 <_read_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4d07      	ldr	r5, [pc, #28]	@ (8006ef0 <_read_r+0x20>)
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	4608      	mov	r0, r1
 8006ed8:	4611      	mov	r1, r2
 8006eda:	2200      	movs	r2, #0
 8006edc:	602a      	str	r2, [r5, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f7f9 fdbc 	bl	8000a5c <_read>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d102      	bne.n	8006eee <_read_r+0x1e>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	b103      	cbz	r3, 8006eee <_read_r+0x1e>
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
 8006ef0:	200005a0 	.word	0x200005a0

08006ef4 <_write_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4d07      	ldr	r5, [pc, #28]	@ (8006f14 <_write_r+0x20>)
 8006ef8:	4604      	mov	r4, r0
 8006efa:	4608      	mov	r0, r1
 8006efc:	4611      	mov	r1, r2
 8006efe:	2200      	movs	r2, #0
 8006f00:	602a      	str	r2, [r5, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	f7f9 fdc7 	bl	8000a96 <_write>
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	d102      	bne.n	8006f12 <_write_r+0x1e>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	b103      	cbz	r3, 8006f12 <_write_r+0x1e>
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	200005a0 	.word	0x200005a0

08006f18 <__errno>:
 8006f18:	4b01      	ldr	r3, [pc, #4]	@ (8006f20 <__errno+0x8>)
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	200000b8 	.word	0x200000b8

08006f24 <__libc_init_array>:
 8006f24:	b570      	push	{r4, r5, r6, lr}
 8006f26:	4d0d      	ldr	r5, [pc, #52]	@ (8006f5c <__libc_init_array+0x38>)
 8006f28:	4c0d      	ldr	r4, [pc, #52]	@ (8006f60 <__libc_init_array+0x3c>)
 8006f2a:	1b64      	subs	r4, r4, r5
 8006f2c:	10a4      	asrs	r4, r4, #2
 8006f2e:	2600      	movs	r6, #0
 8006f30:	42a6      	cmp	r6, r4
 8006f32:	d109      	bne.n	8006f48 <__libc_init_array+0x24>
 8006f34:	4d0b      	ldr	r5, [pc, #44]	@ (8006f64 <__libc_init_array+0x40>)
 8006f36:	4c0c      	ldr	r4, [pc, #48]	@ (8006f68 <__libc_init_array+0x44>)
 8006f38:	f000 ff74 	bl	8007e24 <_init>
 8006f3c:	1b64      	subs	r4, r4, r5
 8006f3e:	10a4      	asrs	r4, r4, #2
 8006f40:	2600      	movs	r6, #0
 8006f42:	42a6      	cmp	r6, r4
 8006f44:	d105      	bne.n	8006f52 <__libc_init_array+0x2e>
 8006f46:	bd70      	pop	{r4, r5, r6, pc}
 8006f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f4c:	4798      	blx	r3
 8006f4e:	3601      	adds	r6, #1
 8006f50:	e7ee      	b.n	8006f30 <__libc_init_array+0xc>
 8006f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f56:	4798      	blx	r3
 8006f58:	3601      	adds	r6, #1
 8006f5a:	e7f2      	b.n	8006f42 <__libc_init_array+0x1e>
 8006f5c:	08007ff0 	.word	0x08007ff0
 8006f60:	08007ff0 	.word	0x08007ff0
 8006f64:	08007ff0 	.word	0x08007ff0
 8006f68:	08007ff4 	.word	0x08007ff4

08006f6c <__retarget_lock_init_recursive>:
 8006f6c:	4770      	bx	lr

08006f6e <__retarget_lock_acquire_recursive>:
 8006f6e:	4770      	bx	lr

08006f70 <__retarget_lock_release_recursive>:
 8006f70:	4770      	bx	lr

08006f72 <strcpy>:
 8006f72:	4603      	mov	r3, r0
 8006f74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f78:	f803 2b01 	strb.w	r2, [r3], #1
 8006f7c:	2a00      	cmp	r2, #0
 8006f7e:	d1f9      	bne.n	8006f74 <strcpy+0x2>
 8006f80:	4770      	bx	lr
	...

08006f84 <_free_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4605      	mov	r5, r0
 8006f88:	2900      	cmp	r1, #0
 8006f8a:	d041      	beq.n	8007010 <_free_r+0x8c>
 8006f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f90:	1f0c      	subs	r4, r1, #4
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bfb8      	it	lt
 8006f96:	18e4      	addlt	r4, r4, r3
 8006f98:	f000 f8e0 	bl	800715c <__malloc_lock>
 8006f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007014 <_free_r+0x90>)
 8006f9e:	6813      	ldr	r3, [r2, #0]
 8006fa0:	b933      	cbnz	r3, 8006fb0 <_free_r+0x2c>
 8006fa2:	6063      	str	r3, [r4, #4]
 8006fa4:	6014      	str	r4, [r2, #0]
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fac:	f000 b8dc 	b.w	8007168 <__malloc_unlock>
 8006fb0:	42a3      	cmp	r3, r4
 8006fb2:	d908      	bls.n	8006fc6 <_free_r+0x42>
 8006fb4:	6820      	ldr	r0, [r4, #0]
 8006fb6:	1821      	adds	r1, r4, r0
 8006fb8:	428b      	cmp	r3, r1
 8006fba:	bf01      	itttt	eq
 8006fbc:	6819      	ldreq	r1, [r3, #0]
 8006fbe:	685b      	ldreq	r3, [r3, #4]
 8006fc0:	1809      	addeq	r1, r1, r0
 8006fc2:	6021      	streq	r1, [r4, #0]
 8006fc4:	e7ed      	b.n	8006fa2 <_free_r+0x1e>
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	b10b      	cbz	r3, 8006fd0 <_free_r+0x4c>
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	d9fa      	bls.n	8006fc6 <_free_r+0x42>
 8006fd0:	6811      	ldr	r1, [r2, #0]
 8006fd2:	1850      	adds	r0, r2, r1
 8006fd4:	42a0      	cmp	r0, r4
 8006fd6:	d10b      	bne.n	8006ff0 <_free_r+0x6c>
 8006fd8:	6820      	ldr	r0, [r4, #0]
 8006fda:	4401      	add	r1, r0
 8006fdc:	1850      	adds	r0, r2, r1
 8006fde:	4283      	cmp	r3, r0
 8006fe0:	6011      	str	r1, [r2, #0]
 8006fe2:	d1e0      	bne.n	8006fa6 <_free_r+0x22>
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	6053      	str	r3, [r2, #4]
 8006fea:	4408      	add	r0, r1
 8006fec:	6010      	str	r0, [r2, #0]
 8006fee:	e7da      	b.n	8006fa6 <_free_r+0x22>
 8006ff0:	d902      	bls.n	8006ff8 <_free_r+0x74>
 8006ff2:	230c      	movs	r3, #12
 8006ff4:	602b      	str	r3, [r5, #0]
 8006ff6:	e7d6      	b.n	8006fa6 <_free_r+0x22>
 8006ff8:	6820      	ldr	r0, [r4, #0]
 8006ffa:	1821      	adds	r1, r4, r0
 8006ffc:	428b      	cmp	r3, r1
 8006ffe:	bf04      	itt	eq
 8007000:	6819      	ldreq	r1, [r3, #0]
 8007002:	685b      	ldreq	r3, [r3, #4]
 8007004:	6063      	str	r3, [r4, #4]
 8007006:	bf04      	itt	eq
 8007008:	1809      	addeq	r1, r1, r0
 800700a:	6021      	streq	r1, [r4, #0]
 800700c:	6054      	str	r4, [r2, #4]
 800700e:	e7ca      	b.n	8006fa6 <_free_r+0x22>
 8007010:	bd38      	pop	{r3, r4, r5, pc}
 8007012:	bf00      	nop
 8007014:	200005ac 	.word	0x200005ac

08007018 <sbrk_aligned>:
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	4e0f      	ldr	r6, [pc, #60]	@ (8007058 <sbrk_aligned+0x40>)
 800701c:	460c      	mov	r4, r1
 800701e:	6831      	ldr	r1, [r6, #0]
 8007020:	4605      	mov	r5, r0
 8007022:	b911      	cbnz	r1, 800702a <sbrk_aligned+0x12>
 8007024:	f000 fe26 	bl	8007c74 <_sbrk_r>
 8007028:	6030      	str	r0, [r6, #0]
 800702a:	4621      	mov	r1, r4
 800702c:	4628      	mov	r0, r5
 800702e:	f000 fe21 	bl	8007c74 <_sbrk_r>
 8007032:	1c43      	adds	r3, r0, #1
 8007034:	d103      	bne.n	800703e <sbrk_aligned+0x26>
 8007036:	f04f 34ff 	mov.w	r4, #4294967295
 800703a:	4620      	mov	r0, r4
 800703c:	bd70      	pop	{r4, r5, r6, pc}
 800703e:	1cc4      	adds	r4, r0, #3
 8007040:	f024 0403 	bic.w	r4, r4, #3
 8007044:	42a0      	cmp	r0, r4
 8007046:	d0f8      	beq.n	800703a <sbrk_aligned+0x22>
 8007048:	1a21      	subs	r1, r4, r0
 800704a:	4628      	mov	r0, r5
 800704c:	f000 fe12 	bl	8007c74 <_sbrk_r>
 8007050:	3001      	adds	r0, #1
 8007052:	d1f2      	bne.n	800703a <sbrk_aligned+0x22>
 8007054:	e7ef      	b.n	8007036 <sbrk_aligned+0x1e>
 8007056:	bf00      	nop
 8007058:	200005a8 	.word	0x200005a8

0800705c <_malloc_r>:
 800705c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007060:	1ccd      	adds	r5, r1, #3
 8007062:	f025 0503 	bic.w	r5, r5, #3
 8007066:	3508      	adds	r5, #8
 8007068:	2d0c      	cmp	r5, #12
 800706a:	bf38      	it	cc
 800706c:	250c      	movcc	r5, #12
 800706e:	2d00      	cmp	r5, #0
 8007070:	4606      	mov	r6, r0
 8007072:	db01      	blt.n	8007078 <_malloc_r+0x1c>
 8007074:	42a9      	cmp	r1, r5
 8007076:	d904      	bls.n	8007082 <_malloc_r+0x26>
 8007078:	230c      	movs	r3, #12
 800707a:	6033      	str	r3, [r6, #0]
 800707c:	2000      	movs	r0, #0
 800707e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007082:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007158 <_malloc_r+0xfc>
 8007086:	f000 f869 	bl	800715c <__malloc_lock>
 800708a:	f8d8 3000 	ldr.w	r3, [r8]
 800708e:	461c      	mov	r4, r3
 8007090:	bb44      	cbnz	r4, 80070e4 <_malloc_r+0x88>
 8007092:	4629      	mov	r1, r5
 8007094:	4630      	mov	r0, r6
 8007096:	f7ff ffbf 	bl	8007018 <sbrk_aligned>
 800709a:	1c43      	adds	r3, r0, #1
 800709c:	4604      	mov	r4, r0
 800709e:	d158      	bne.n	8007152 <_malloc_r+0xf6>
 80070a0:	f8d8 4000 	ldr.w	r4, [r8]
 80070a4:	4627      	mov	r7, r4
 80070a6:	2f00      	cmp	r7, #0
 80070a8:	d143      	bne.n	8007132 <_malloc_r+0xd6>
 80070aa:	2c00      	cmp	r4, #0
 80070ac:	d04b      	beq.n	8007146 <_malloc_r+0xea>
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	4639      	mov	r1, r7
 80070b2:	4630      	mov	r0, r6
 80070b4:	eb04 0903 	add.w	r9, r4, r3
 80070b8:	f000 fddc 	bl	8007c74 <_sbrk_r>
 80070bc:	4581      	cmp	r9, r0
 80070be:	d142      	bne.n	8007146 <_malloc_r+0xea>
 80070c0:	6821      	ldr	r1, [r4, #0]
 80070c2:	1a6d      	subs	r5, r5, r1
 80070c4:	4629      	mov	r1, r5
 80070c6:	4630      	mov	r0, r6
 80070c8:	f7ff ffa6 	bl	8007018 <sbrk_aligned>
 80070cc:	3001      	adds	r0, #1
 80070ce:	d03a      	beq.n	8007146 <_malloc_r+0xea>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	442b      	add	r3, r5
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	f8d8 3000 	ldr.w	r3, [r8]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	bb62      	cbnz	r2, 8007138 <_malloc_r+0xdc>
 80070de:	f8c8 7000 	str.w	r7, [r8]
 80070e2:	e00f      	b.n	8007104 <_malloc_r+0xa8>
 80070e4:	6822      	ldr	r2, [r4, #0]
 80070e6:	1b52      	subs	r2, r2, r5
 80070e8:	d420      	bmi.n	800712c <_malloc_r+0xd0>
 80070ea:	2a0b      	cmp	r2, #11
 80070ec:	d917      	bls.n	800711e <_malloc_r+0xc2>
 80070ee:	1961      	adds	r1, r4, r5
 80070f0:	42a3      	cmp	r3, r4
 80070f2:	6025      	str	r5, [r4, #0]
 80070f4:	bf18      	it	ne
 80070f6:	6059      	strne	r1, [r3, #4]
 80070f8:	6863      	ldr	r3, [r4, #4]
 80070fa:	bf08      	it	eq
 80070fc:	f8c8 1000 	streq.w	r1, [r8]
 8007100:	5162      	str	r2, [r4, r5]
 8007102:	604b      	str	r3, [r1, #4]
 8007104:	4630      	mov	r0, r6
 8007106:	f000 f82f 	bl	8007168 <__malloc_unlock>
 800710a:	f104 000b 	add.w	r0, r4, #11
 800710e:	1d23      	adds	r3, r4, #4
 8007110:	f020 0007 	bic.w	r0, r0, #7
 8007114:	1ac2      	subs	r2, r0, r3
 8007116:	bf1c      	itt	ne
 8007118:	1a1b      	subne	r3, r3, r0
 800711a:	50a3      	strne	r3, [r4, r2]
 800711c:	e7af      	b.n	800707e <_malloc_r+0x22>
 800711e:	6862      	ldr	r2, [r4, #4]
 8007120:	42a3      	cmp	r3, r4
 8007122:	bf0c      	ite	eq
 8007124:	f8c8 2000 	streq.w	r2, [r8]
 8007128:	605a      	strne	r2, [r3, #4]
 800712a:	e7eb      	b.n	8007104 <_malloc_r+0xa8>
 800712c:	4623      	mov	r3, r4
 800712e:	6864      	ldr	r4, [r4, #4]
 8007130:	e7ae      	b.n	8007090 <_malloc_r+0x34>
 8007132:	463c      	mov	r4, r7
 8007134:	687f      	ldr	r7, [r7, #4]
 8007136:	e7b6      	b.n	80070a6 <_malloc_r+0x4a>
 8007138:	461a      	mov	r2, r3
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	42a3      	cmp	r3, r4
 800713e:	d1fb      	bne.n	8007138 <_malloc_r+0xdc>
 8007140:	2300      	movs	r3, #0
 8007142:	6053      	str	r3, [r2, #4]
 8007144:	e7de      	b.n	8007104 <_malloc_r+0xa8>
 8007146:	230c      	movs	r3, #12
 8007148:	6033      	str	r3, [r6, #0]
 800714a:	4630      	mov	r0, r6
 800714c:	f000 f80c 	bl	8007168 <__malloc_unlock>
 8007150:	e794      	b.n	800707c <_malloc_r+0x20>
 8007152:	6005      	str	r5, [r0, #0]
 8007154:	e7d6      	b.n	8007104 <_malloc_r+0xa8>
 8007156:	bf00      	nop
 8007158:	200005ac 	.word	0x200005ac

0800715c <__malloc_lock>:
 800715c:	4801      	ldr	r0, [pc, #4]	@ (8007164 <__malloc_lock+0x8>)
 800715e:	f7ff bf06 	b.w	8006f6e <__retarget_lock_acquire_recursive>
 8007162:	bf00      	nop
 8007164:	200005a4 	.word	0x200005a4

08007168 <__malloc_unlock>:
 8007168:	4801      	ldr	r0, [pc, #4]	@ (8007170 <__malloc_unlock+0x8>)
 800716a:	f7ff bf01 	b.w	8006f70 <__retarget_lock_release_recursive>
 800716e:	bf00      	nop
 8007170:	200005a4 	.word	0x200005a4

08007174 <__ssputs_r>:
 8007174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007178:	688e      	ldr	r6, [r1, #8]
 800717a:	461f      	mov	r7, r3
 800717c:	42be      	cmp	r6, r7
 800717e:	680b      	ldr	r3, [r1, #0]
 8007180:	4682      	mov	sl, r0
 8007182:	460c      	mov	r4, r1
 8007184:	4690      	mov	r8, r2
 8007186:	d82d      	bhi.n	80071e4 <__ssputs_r+0x70>
 8007188:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800718c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007190:	d026      	beq.n	80071e0 <__ssputs_r+0x6c>
 8007192:	6965      	ldr	r5, [r4, #20]
 8007194:	6909      	ldr	r1, [r1, #16]
 8007196:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800719a:	eba3 0901 	sub.w	r9, r3, r1
 800719e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071a2:	1c7b      	adds	r3, r7, #1
 80071a4:	444b      	add	r3, r9
 80071a6:	106d      	asrs	r5, r5, #1
 80071a8:	429d      	cmp	r5, r3
 80071aa:	bf38      	it	cc
 80071ac:	461d      	movcc	r5, r3
 80071ae:	0553      	lsls	r3, r2, #21
 80071b0:	d527      	bpl.n	8007202 <__ssputs_r+0x8e>
 80071b2:	4629      	mov	r1, r5
 80071b4:	f7ff ff52 	bl	800705c <_malloc_r>
 80071b8:	4606      	mov	r6, r0
 80071ba:	b360      	cbz	r0, 8007216 <__ssputs_r+0xa2>
 80071bc:	6921      	ldr	r1, [r4, #16]
 80071be:	464a      	mov	r2, r9
 80071c0:	f000 fd68 	bl	8007c94 <memcpy>
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ce:	81a3      	strh	r3, [r4, #12]
 80071d0:	6126      	str	r6, [r4, #16]
 80071d2:	6165      	str	r5, [r4, #20]
 80071d4:	444e      	add	r6, r9
 80071d6:	eba5 0509 	sub.w	r5, r5, r9
 80071da:	6026      	str	r6, [r4, #0]
 80071dc:	60a5      	str	r5, [r4, #8]
 80071de:	463e      	mov	r6, r7
 80071e0:	42be      	cmp	r6, r7
 80071e2:	d900      	bls.n	80071e6 <__ssputs_r+0x72>
 80071e4:	463e      	mov	r6, r7
 80071e6:	6820      	ldr	r0, [r4, #0]
 80071e8:	4632      	mov	r2, r6
 80071ea:	4641      	mov	r1, r8
 80071ec:	f000 fd28 	bl	8007c40 <memmove>
 80071f0:	68a3      	ldr	r3, [r4, #8]
 80071f2:	1b9b      	subs	r3, r3, r6
 80071f4:	60a3      	str	r3, [r4, #8]
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	4433      	add	r3, r6
 80071fa:	6023      	str	r3, [r4, #0]
 80071fc:	2000      	movs	r0, #0
 80071fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007202:	462a      	mov	r2, r5
 8007204:	f000 fd54 	bl	8007cb0 <_realloc_r>
 8007208:	4606      	mov	r6, r0
 800720a:	2800      	cmp	r0, #0
 800720c:	d1e0      	bne.n	80071d0 <__ssputs_r+0x5c>
 800720e:	6921      	ldr	r1, [r4, #16]
 8007210:	4650      	mov	r0, sl
 8007212:	f7ff feb7 	bl	8006f84 <_free_r>
 8007216:	230c      	movs	r3, #12
 8007218:	f8ca 3000 	str.w	r3, [sl]
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
 8007228:	e7e9      	b.n	80071fe <__ssputs_r+0x8a>
	...

0800722c <_svfiprintf_r>:
 800722c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007230:	4698      	mov	r8, r3
 8007232:	898b      	ldrh	r3, [r1, #12]
 8007234:	061b      	lsls	r3, r3, #24
 8007236:	b09d      	sub	sp, #116	@ 0x74
 8007238:	4607      	mov	r7, r0
 800723a:	460d      	mov	r5, r1
 800723c:	4614      	mov	r4, r2
 800723e:	d510      	bpl.n	8007262 <_svfiprintf_r+0x36>
 8007240:	690b      	ldr	r3, [r1, #16]
 8007242:	b973      	cbnz	r3, 8007262 <_svfiprintf_r+0x36>
 8007244:	2140      	movs	r1, #64	@ 0x40
 8007246:	f7ff ff09 	bl	800705c <_malloc_r>
 800724a:	6028      	str	r0, [r5, #0]
 800724c:	6128      	str	r0, [r5, #16]
 800724e:	b930      	cbnz	r0, 800725e <_svfiprintf_r+0x32>
 8007250:	230c      	movs	r3, #12
 8007252:	603b      	str	r3, [r7, #0]
 8007254:	f04f 30ff 	mov.w	r0, #4294967295
 8007258:	b01d      	add	sp, #116	@ 0x74
 800725a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800725e:	2340      	movs	r3, #64	@ 0x40
 8007260:	616b      	str	r3, [r5, #20]
 8007262:	2300      	movs	r3, #0
 8007264:	9309      	str	r3, [sp, #36]	@ 0x24
 8007266:	2320      	movs	r3, #32
 8007268:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800726c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007270:	2330      	movs	r3, #48	@ 0x30
 8007272:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007410 <_svfiprintf_r+0x1e4>
 8007276:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800727a:	f04f 0901 	mov.w	r9, #1
 800727e:	4623      	mov	r3, r4
 8007280:	469a      	mov	sl, r3
 8007282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007286:	b10a      	cbz	r2, 800728c <_svfiprintf_r+0x60>
 8007288:	2a25      	cmp	r2, #37	@ 0x25
 800728a:	d1f9      	bne.n	8007280 <_svfiprintf_r+0x54>
 800728c:	ebba 0b04 	subs.w	fp, sl, r4
 8007290:	d00b      	beq.n	80072aa <_svfiprintf_r+0x7e>
 8007292:	465b      	mov	r3, fp
 8007294:	4622      	mov	r2, r4
 8007296:	4629      	mov	r1, r5
 8007298:	4638      	mov	r0, r7
 800729a:	f7ff ff6b 	bl	8007174 <__ssputs_r>
 800729e:	3001      	adds	r0, #1
 80072a0:	f000 80a7 	beq.w	80073f2 <_svfiprintf_r+0x1c6>
 80072a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072a6:	445a      	add	r2, fp
 80072a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80072aa:	f89a 3000 	ldrb.w	r3, [sl]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 809f 	beq.w	80073f2 <_svfiprintf_r+0x1c6>
 80072b4:	2300      	movs	r3, #0
 80072b6:	f04f 32ff 	mov.w	r2, #4294967295
 80072ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072be:	f10a 0a01 	add.w	sl, sl, #1
 80072c2:	9304      	str	r3, [sp, #16]
 80072c4:	9307      	str	r3, [sp, #28]
 80072c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80072cc:	4654      	mov	r4, sl
 80072ce:	2205      	movs	r2, #5
 80072d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d4:	484e      	ldr	r0, [pc, #312]	@ (8007410 <_svfiprintf_r+0x1e4>)
 80072d6:	f7f8 ff9b 	bl	8000210 <memchr>
 80072da:	9a04      	ldr	r2, [sp, #16]
 80072dc:	b9d8      	cbnz	r0, 8007316 <_svfiprintf_r+0xea>
 80072de:	06d0      	lsls	r0, r2, #27
 80072e0:	bf44      	itt	mi
 80072e2:	2320      	movmi	r3, #32
 80072e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072e8:	0711      	lsls	r1, r2, #28
 80072ea:	bf44      	itt	mi
 80072ec:	232b      	movmi	r3, #43	@ 0x2b
 80072ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072f2:	f89a 3000 	ldrb.w	r3, [sl]
 80072f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80072f8:	d015      	beq.n	8007326 <_svfiprintf_r+0xfa>
 80072fa:	9a07      	ldr	r2, [sp, #28]
 80072fc:	4654      	mov	r4, sl
 80072fe:	2000      	movs	r0, #0
 8007300:	f04f 0c0a 	mov.w	ip, #10
 8007304:	4621      	mov	r1, r4
 8007306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800730a:	3b30      	subs	r3, #48	@ 0x30
 800730c:	2b09      	cmp	r3, #9
 800730e:	d94b      	bls.n	80073a8 <_svfiprintf_r+0x17c>
 8007310:	b1b0      	cbz	r0, 8007340 <_svfiprintf_r+0x114>
 8007312:	9207      	str	r2, [sp, #28]
 8007314:	e014      	b.n	8007340 <_svfiprintf_r+0x114>
 8007316:	eba0 0308 	sub.w	r3, r0, r8
 800731a:	fa09 f303 	lsl.w	r3, r9, r3
 800731e:	4313      	orrs	r3, r2
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	46a2      	mov	sl, r4
 8007324:	e7d2      	b.n	80072cc <_svfiprintf_r+0xa0>
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	1d19      	adds	r1, r3, #4
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	9103      	str	r1, [sp, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	bfbb      	ittet	lt
 8007332:	425b      	neglt	r3, r3
 8007334:	f042 0202 	orrlt.w	r2, r2, #2
 8007338:	9307      	strge	r3, [sp, #28]
 800733a:	9307      	strlt	r3, [sp, #28]
 800733c:	bfb8      	it	lt
 800733e:	9204      	strlt	r2, [sp, #16]
 8007340:	7823      	ldrb	r3, [r4, #0]
 8007342:	2b2e      	cmp	r3, #46	@ 0x2e
 8007344:	d10a      	bne.n	800735c <_svfiprintf_r+0x130>
 8007346:	7863      	ldrb	r3, [r4, #1]
 8007348:	2b2a      	cmp	r3, #42	@ 0x2a
 800734a:	d132      	bne.n	80073b2 <_svfiprintf_r+0x186>
 800734c:	9b03      	ldr	r3, [sp, #12]
 800734e:	1d1a      	adds	r2, r3, #4
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	9203      	str	r2, [sp, #12]
 8007354:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007358:	3402      	adds	r4, #2
 800735a:	9305      	str	r3, [sp, #20]
 800735c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007420 <_svfiprintf_r+0x1f4>
 8007360:	7821      	ldrb	r1, [r4, #0]
 8007362:	2203      	movs	r2, #3
 8007364:	4650      	mov	r0, sl
 8007366:	f7f8 ff53 	bl	8000210 <memchr>
 800736a:	b138      	cbz	r0, 800737c <_svfiprintf_r+0x150>
 800736c:	9b04      	ldr	r3, [sp, #16]
 800736e:	eba0 000a 	sub.w	r0, r0, sl
 8007372:	2240      	movs	r2, #64	@ 0x40
 8007374:	4082      	lsls	r2, r0
 8007376:	4313      	orrs	r3, r2
 8007378:	3401      	adds	r4, #1
 800737a:	9304      	str	r3, [sp, #16]
 800737c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007380:	4824      	ldr	r0, [pc, #144]	@ (8007414 <_svfiprintf_r+0x1e8>)
 8007382:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007386:	2206      	movs	r2, #6
 8007388:	f7f8 ff42 	bl	8000210 <memchr>
 800738c:	2800      	cmp	r0, #0
 800738e:	d036      	beq.n	80073fe <_svfiprintf_r+0x1d2>
 8007390:	4b21      	ldr	r3, [pc, #132]	@ (8007418 <_svfiprintf_r+0x1ec>)
 8007392:	bb1b      	cbnz	r3, 80073dc <_svfiprintf_r+0x1b0>
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	3307      	adds	r3, #7
 8007398:	f023 0307 	bic.w	r3, r3, #7
 800739c:	3308      	adds	r3, #8
 800739e:	9303      	str	r3, [sp, #12]
 80073a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a2:	4433      	add	r3, r6
 80073a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073a6:	e76a      	b.n	800727e <_svfiprintf_r+0x52>
 80073a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ac:	460c      	mov	r4, r1
 80073ae:	2001      	movs	r0, #1
 80073b0:	e7a8      	b.n	8007304 <_svfiprintf_r+0xd8>
 80073b2:	2300      	movs	r3, #0
 80073b4:	3401      	adds	r4, #1
 80073b6:	9305      	str	r3, [sp, #20]
 80073b8:	4619      	mov	r1, r3
 80073ba:	f04f 0c0a 	mov.w	ip, #10
 80073be:	4620      	mov	r0, r4
 80073c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073c4:	3a30      	subs	r2, #48	@ 0x30
 80073c6:	2a09      	cmp	r2, #9
 80073c8:	d903      	bls.n	80073d2 <_svfiprintf_r+0x1a6>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0c6      	beq.n	800735c <_svfiprintf_r+0x130>
 80073ce:	9105      	str	r1, [sp, #20]
 80073d0:	e7c4      	b.n	800735c <_svfiprintf_r+0x130>
 80073d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80073d6:	4604      	mov	r4, r0
 80073d8:	2301      	movs	r3, #1
 80073da:	e7f0      	b.n	80073be <_svfiprintf_r+0x192>
 80073dc:	ab03      	add	r3, sp, #12
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	462a      	mov	r2, r5
 80073e2:	4b0e      	ldr	r3, [pc, #56]	@ (800741c <_svfiprintf_r+0x1f0>)
 80073e4:	a904      	add	r1, sp, #16
 80073e6:	4638      	mov	r0, r7
 80073e8:	f3af 8000 	nop.w
 80073ec:	1c42      	adds	r2, r0, #1
 80073ee:	4606      	mov	r6, r0
 80073f0:	d1d6      	bne.n	80073a0 <_svfiprintf_r+0x174>
 80073f2:	89ab      	ldrh	r3, [r5, #12]
 80073f4:	065b      	lsls	r3, r3, #25
 80073f6:	f53f af2d 	bmi.w	8007254 <_svfiprintf_r+0x28>
 80073fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073fc:	e72c      	b.n	8007258 <_svfiprintf_r+0x2c>
 80073fe:	ab03      	add	r3, sp, #12
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	462a      	mov	r2, r5
 8007404:	4b05      	ldr	r3, [pc, #20]	@ (800741c <_svfiprintf_r+0x1f0>)
 8007406:	a904      	add	r1, sp, #16
 8007408:	4638      	mov	r0, r7
 800740a:	f000 f9bb 	bl	8007784 <_printf_i>
 800740e:	e7ed      	b.n	80073ec <_svfiprintf_r+0x1c0>
 8007410:	08007fb4 	.word	0x08007fb4
 8007414:	08007fbe 	.word	0x08007fbe
 8007418:	00000000 	.word	0x00000000
 800741c:	08007175 	.word	0x08007175
 8007420:	08007fba 	.word	0x08007fba

08007424 <__sfputc_r>:
 8007424:	6893      	ldr	r3, [r2, #8]
 8007426:	3b01      	subs	r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	b410      	push	{r4}
 800742c:	6093      	str	r3, [r2, #8]
 800742e:	da08      	bge.n	8007442 <__sfputc_r+0x1e>
 8007430:	6994      	ldr	r4, [r2, #24]
 8007432:	42a3      	cmp	r3, r4
 8007434:	db01      	blt.n	800743a <__sfputc_r+0x16>
 8007436:	290a      	cmp	r1, #10
 8007438:	d103      	bne.n	8007442 <__sfputc_r+0x1e>
 800743a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800743e:	f000 bb6b 	b.w	8007b18 <__swbuf_r>
 8007442:	6813      	ldr	r3, [r2, #0]
 8007444:	1c58      	adds	r0, r3, #1
 8007446:	6010      	str	r0, [r2, #0]
 8007448:	7019      	strb	r1, [r3, #0]
 800744a:	4608      	mov	r0, r1
 800744c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007450:	4770      	bx	lr

08007452 <__sfputs_r>:
 8007452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007454:	4606      	mov	r6, r0
 8007456:	460f      	mov	r7, r1
 8007458:	4614      	mov	r4, r2
 800745a:	18d5      	adds	r5, r2, r3
 800745c:	42ac      	cmp	r4, r5
 800745e:	d101      	bne.n	8007464 <__sfputs_r+0x12>
 8007460:	2000      	movs	r0, #0
 8007462:	e007      	b.n	8007474 <__sfputs_r+0x22>
 8007464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007468:	463a      	mov	r2, r7
 800746a:	4630      	mov	r0, r6
 800746c:	f7ff ffda 	bl	8007424 <__sfputc_r>
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d1f3      	bne.n	800745c <__sfputs_r+0xa>
 8007474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007478 <_vfiprintf_r>:
 8007478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	460d      	mov	r5, r1
 800747e:	b09d      	sub	sp, #116	@ 0x74
 8007480:	4614      	mov	r4, r2
 8007482:	4698      	mov	r8, r3
 8007484:	4606      	mov	r6, r0
 8007486:	b118      	cbz	r0, 8007490 <_vfiprintf_r+0x18>
 8007488:	6a03      	ldr	r3, [r0, #32]
 800748a:	b90b      	cbnz	r3, 8007490 <_vfiprintf_r+0x18>
 800748c:	f7ff fc12 	bl	8006cb4 <__sinit>
 8007490:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007492:	07d9      	lsls	r1, r3, #31
 8007494:	d405      	bmi.n	80074a2 <_vfiprintf_r+0x2a>
 8007496:	89ab      	ldrh	r3, [r5, #12]
 8007498:	059a      	lsls	r2, r3, #22
 800749a:	d402      	bmi.n	80074a2 <_vfiprintf_r+0x2a>
 800749c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800749e:	f7ff fd66 	bl	8006f6e <__retarget_lock_acquire_recursive>
 80074a2:	89ab      	ldrh	r3, [r5, #12]
 80074a4:	071b      	lsls	r3, r3, #28
 80074a6:	d501      	bpl.n	80074ac <_vfiprintf_r+0x34>
 80074a8:	692b      	ldr	r3, [r5, #16]
 80074aa:	b99b      	cbnz	r3, 80074d4 <_vfiprintf_r+0x5c>
 80074ac:	4629      	mov	r1, r5
 80074ae:	4630      	mov	r0, r6
 80074b0:	f000 fb70 	bl	8007b94 <__swsetup_r>
 80074b4:	b170      	cbz	r0, 80074d4 <_vfiprintf_r+0x5c>
 80074b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074b8:	07dc      	lsls	r4, r3, #31
 80074ba:	d504      	bpl.n	80074c6 <_vfiprintf_r+0x4e>
 80074bc:	f04f 30ff 	mov.w	r0, #4294967295
 80074c0:	b01d      	add	sp, #116	@ 0x74
 80074c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c6:	89ab      	ldrh	r3, [r5, #12]
 80074c8:	0598      	lsls	r0, r3, #22
 80074ca:	d4f7      	bmi.n	80074bc <_vfiprintf_r+0x44>
 80074cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074ce:	f7ff fd4f 	bl	8006f70 <__retarget_lock_release_recursive>
 80074d2:	e7f3      	b.n	80074bc <_vfiprintf_r+0x44>
 80074d4:	2300      	movs	r3, #0
 80074d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80074d8:	2320      	movs	r3, #32
 80074da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074de:	f8cd 800c 	str.w	r8, [sp, #12]
 80074e2:	2330      	movs	r3, #48	@ 0x30
 80074e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007694 <_vfiprintf_r+0x21c>
 80074e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074ec:	f04f 0901 	mov.w	r9, #1
 80074f0:	4623      	mov	r3, r4
 80074f2:	469a      	mov	sl, r3
 80074f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074f8:	b10a      	cbz	r2, 80074fe <_vfiprintf_r+0x86>
 80074fa:	2a25      	cmp	r2, #37	@ 0x25
 80074fc:	d1f9      	bne.n	80074f2 <_vfiprintf_r+0x7a>
 80074fe:	ebba 0b04 	subs.w	fp, sl, r4
 8007502:	d00b      	beq.n	800751c <_vfiprintf_r+0xa4>
 8007504:	465b      	mov	r3, fp
 8007506:	4622      	mov	r2, r4
 8007508:	4629      	mov	r1, r5
 800750a:	4630      	mov	r0, r6
 800750c:	f7ff ffa1 	bl	8007452 <__sfputs_r>
 8007510:	3001      	adds	r0, #1
 8007512:	f000 80a7 	beq.w	8007664 <_vfiprintf_r+0x1ec>
 8007516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007518:	445a      	add	r2, fp
 800751a:	9209      	str	r2, [sp, #36]	@ 0x24
 800751c:	f89a 3000 	ldrb.w	r3, [sl]
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 809f 	beq.w	8007664 <_vfiprintf_r+0x1ec>
 8007526:	2300      	movs	r3, #0
 8007528:	f04f 32ff 	mov.w	r2, #4294967295
 800752c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007530:	f10a 0a01 	add.w	sl, sl, #1
 8007534:	9304      	str	r3, [sp, #16]
 8007536:	9307      	str	r3, [sp, #28]
 8007538:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800753c:	931a      	str	r3, [sp, #104]	@ 0x68
 800753e:	4654      	mov	r4, sl
 8007540:	2205      	movs	r2, #5
 8007542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007546:	4853      	ldr	r0, [pc, #332]	@ (8007694 <_vfiprintf_r+0x21c>)
 8007548:	f7f8 fe62 	bl	8000210 <memchr>
 800754c:	9a04      	ldr	r2, [sp, #16]
 800754e:	b9d8      	cbnz	r0, 8007588 <_vfiprintf_r+0x110>
 8007550:	06d1      	lsls	r1, r2, #27
 8007552:	bf44      	itt	mi
 8007554:	2320      	movmi	r3, #32
 8007556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800755a:	0713      	lsls	r3, r2, #28
 800755c:	bf44      	itt	mi
 800755e:	232b      	movmi	r3, #43	@ 0x2b
 8007560:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007564:	f89a 3000 	ldrb.w	r3, [sl]
 8007568:	2b2a      	cmp	r3, #42	@ 0x2a
 800756a:	d015      	beq.n	8007598 <_vfiprintf_r+0x120>
 800756c:	9a07      	ldr	r2, [sp, #28]
 800756e:	4654      	mov	r4, sl
 8007570:	2000      	movs	r0, #0
 8007572:	f04f 0c0a 	mov.w	ip, #10
 8007576:	4621      	mov	r1, r4
 8007578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800757c:	3b30      	subs	r3, #48	@ 0x30
 800757e:	2b09      	cmp	r3, #9
 8007580:	d94b      	bls.n	800761a <_vfiprintf_r+0x1a2>
 8007582:	b1b0      	cbz	r0, 80075b2 <_vfiprintf_r+0x13a>
 8007584:	9207      	str	r2, [sp, #28]
 8007586:	e014      	b.n	80075b2 <_vfiprintf_r+0x13a>
 8007588:	eba0 0308 	sub.w	r3, r0, r8
 800758c:	fa09 f303 	lsl.w	r3, r9, r3
 8007590:	4313      	orrs	r3, r2
 8007592:	9304      	str	r3, [sp, #16]
 8007594:	46a2      	mov	sl, r4
 8007596:	e7d2      	b.n	800753e <_vfiprintf_r+0xc6>
 8007598:	9b03      	ldr	r3, [sp, #12]
 800759a:	1d19      	adds	r1, r3, #4
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	9103      	str	r1, [sp, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	bfbb      	ittet	lt
 80075a4:	425b      	neglt	r3, r3
 80075a6:	f042 0202 	orrlt.w	r2, r2, #2
 80075aa:	9307      	strge	r3, [sp, #28]
 80075ac:	9307      	strlt	r3, [sp, #28]
 80075ae:	bfb8      	it	lt
 80075b0:	9204      	strlt	r2, [sp, #16]
 80075b2:	7823      	ldrb	r3, [r4, #0]
 80075b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80075b6:	d10a      	bne.n	80075ce <_vfiprintf_r+0x156>
 80075b8:	7863      	ldrb	r3, [r4, #1]
 80075ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80075bc:	d132      	bne.n	8007624 <_vfiprintf_r+0x1ac>
 80075be:	9b03      	ldr	r3, [sp, #12]
 80075c0:	1d1a      	adds	r2, r3, #4
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	9203      	str	r2, [sp, #12]
 80075c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075ca:	3402      	adds	r4, #2
 80075cc:	9305      	str	r3, [sp, #20]
 80075ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80076a4 <_vfiprintf_r+0x22c>
 80075d2:	7821      	ldrb	r1, [r4, #0]
 80075d4:	2203      	movs	r2, #3
 80075d6:	4650      	mov	r0, sl
 80075d8:	f7f8 fe1a 	bl	8000210 <memchr>
 80075dc:	b138      	cbz	r0, 80075ee <_vfiprintf_r+0x176>
 80075de:	9b04      	ldr	r3, [sp, #16]
 80075e0:	eba0 000a 	sub.w	r0, r0, sl
 80075e4:	2240      	movs	r2, #64	@ 0x40
 80075e6:	4082      	lsls	r2, r0
 80075e8:	4313      	orrs	r3, r2
 80075ea:	3401      	adds	r4, #1
 80075ec:	9304      	str	r3, [sp, #16]
 80075ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f2:	4829      	ldr	r0, [pc, #164]	@ (8007698 <_vfiprintf_r+0x220>)
 80075f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075f8:	2206      	movs	r2, #6
 80075fa:	f7f8 fe09 	bl	8000210 <memchr>
 80075fe:	2800      	cmp	r0, #0
 8007600:	d03f      	beq.n	8007682 <_vfiprintf_r+0x20a>
 8007602:	4b26      	ldr	r3, [pc, #152]	@ (800769c <_vfiprintf_r+0x224>)
 8007604:	bb1b      	cbnz	r3, 800764e <_vfiprintf_r+0x1d6>
 8007606:	9b03      	ldr	r3, [sp, #12]
 8007608:	3307      	adds	r3, #7
 800760a:	f023 0307 	bic.w	r3, r3, #7
 800760e:	3308      	adds	r3, #8
 8007610:	9303      	str	r3, [sp, #12]
 8007612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007614:	443b      	add	r3, r7
 8007616:	9309      	str	r3, [sp, #36]	@ 0x24
 8007618:	e76a      	b.n	80074f0 <_vfiprintf_r+0x78>
 800761a:	fb0c 3202 	mla	r2, ip, r2, r3
 800761e:	460c      	mov	r4, r1
 8007620:	2001      	movs	r0, #1
 8007622:	e7a8      	b.n	8007576 <_vfiprintf_r+0xfe>
 8007624:	2300      	movs	r3, #0
 8007626:	3401      	adds	r4, #1
 8007628:	9305      	str	r3, [sp, #20]
 800762a:	4619      	mov	r1, r3
 800762c:	f04f 0c0a 	mov.w	ip, #10
 8007630:	4620      	mov	r0, r4
 8007632:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007636:	3a30      	subs	r2, #48	@ 0x30
 8007638:	2a09      	cmp	r2, #9
 800763a:	d903      	bls.n	8007644 <_vfiprintf_r+0x1cc>
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0c6      	beq.n	80075ce <_vfiprintf_r+0x156>
 8007640:	9105      	str	r1, [sp, #20]
 8007642:	e7c4      	b.n	80075ce <_vfiprintf_r+0x156>
 8007644:	fb0c 2101 	mla	r1, ip, r1, r2
 8007648:	4604      	mov	r4, r0
 800764a:	2301      	movs	r3, #1
 800764c:	e7f0      	b.n	8007630 <_vfiprintf_r+0x1b8>
 800764e:	ab03      	add	r3, sp, #12
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	462a      	mov	r2, r5
 8007654:	4b12      	ldr	r3, [pc, #72]	@ (80076a0 <_vfiprintf_r+0x228>)
 8007656:	a904      	add	r1, sp, #16
 8007658:	4630      	mov	r0, r6
 800765a:	f3af 8000 	nop.w
 800765e:	4607      	mov	r7, r0
 8007660:	1c78      	adds	r0, r7, #1
 8007662:	d1d6      	bne.n	8007612 <_vfiprintf_r+0x19a>
 8007664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007666:	07d9      	lsls	r1, r3, #31
 8007668:	d405      	bmi.n	8007676 <_vfiprintf_r+0x1fe>
 800766a:	89ab      	ldrh	r3, [r5, #12]
 800766c:	059a      	lsls	r2, r3, #22
 800766e:	d402      	bmi.n	8007676 <_vfiprintf_r+0x1fe>
 8007670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007672:	f7ff fc7d 	bl	8006f70 <__retarget_lock_release_recursive>
 8007676:	89ab      	ldrh	r3, [r5, #12]
 8007678:	065b      	lsls	r3, r3, #25
 800767a:	f53f af1f 	bmi.w	80074bc <_vfiprintf_r+0x44>
 800767e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007680:	e71e      	b.n	80074c0 <_vfiprintf_r+0x48>
 8007682:	ab03      	add	r3, sp, #12
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	462a      	mov	r2, r5
 8007688:	4b05      	ldr	r3, [pc, #20]	@ (80076a0 <_vfiprintf_r+0x228>)
 800768a:	a904      	add	r1, sp, #16
 800768c:	4630      	mov	r0, r6
 800768e:	f000 f879 	bl	8007784 <_printf_i>
 8007692:	e7e4      	b.n	800765e <_vfiprintf_r+0x1e6>
 8007694:	08007fb4 	.word	0x08007fb4
 8007698:	08007fbe 	.word	0x08007fbe
 800769c:	00000000 	.word	0x00000000
 80076a0:	08007453 	.word	0x08007453
 80076a4:	08007fba 	.word	0x08007fba

080076a8 <_printf_common>:
 80076a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ac:	4616      	mov	r6, r2
 80076ae:	4698      	mov	r8, r3
 80076b0:	688a      	ldr	r2, [r1, #8]
 80076b2:	690b      	ldr	r3, [r1, #16]
 80076b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076b8:	4293      	cmp	r3, r2
 80076ba:	bfb8      	it	lt
 80076bc:	4613      	movlt	r3, r2
 80076be:	6033      	str	r3, [r6, #0]
 80076c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80076c4:	4607      	mov	r7, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	b10a      	cbz	r2, 80076ce <_printf_common+0x26>
 80076ca:	3301      	adds	r3, #1
 80076cc:	6033      	str	r3, [r6, #0]
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	0699      	lsls	r1, r3, #26
 80076d2:	bf42      	ittt	mi
 80076d4:	6833      	ldrmi	r3, [r6, #0]
 80076d6:	3302      	addmi	r3, #2
 80076d8:	6033      	strmi	r3, [r6, #0]
 80076da:	6825      	ldr	r5, [r4, #0]
 80076dc:	f015 0506 	ands.w	r5, r5, #6
 80076e0:	d106      	bne.n	80076f0 <_printf_common+0x48>
 80076e2:	f104 0a19 	add.w	sl, r4, #25
 80076e6:	68e3      	ldr	r3, [r4, #12]
 80076e8:	6832      	ldr	r2, [r6, #0]
 80076ea:	1a9b      	subs	r3, r3, r2
 80076ec:	42ab      	cmp	r3, r5
 80076ee:	dc26      	bgt.n	800773e <_printf_common+0x96>
 80076f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80076f4:	6822      	ldr	r2, [r4, #0]
 80076f6:	3b00      	subs	r3, #0
 80076f8:	bf18      	it	ne
 80076fa:	2301      	movne	r3, #1
 80076fc:	0692      	lsls	r2, r2, #26
 80076fe:	d42b      	bmi.n	8007758 <_printf_common+0xb0>
 8007700:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007704:	4641      	mov	r1, r8
 8007706:	4638      	mov	r0, r7
 8007708:	47c8      	blx	r9
 800770a:	3001      	adds	r0, #1
 800770c:	d01e      	beq.n	800774c <_printf_common+0xa4>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	6922      	ldr	r2, [r4, #16]
 8007712:	f003 0306 	and.w	r3, r3, #6
 8007716:	2b04      	cmp	r3, #4
 8007718:	bf02      	ittt	eq
 800771a:	68e5      	ldreq	r5, [r4, #12]
 800771c:	6833      	ldreq	r3, [r6, #0]
 800771e:	1aed      	subeq	r5, r5, r3
 8007720:	68a3      	ldr	r3, [r4, #8]
 8007722:	bf0c      	ite	eq
 8007724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007728:	2500      	movne	r5, #0
 800772a:	4293      	cmp	r3, r2
 800772c:	bfc4      	itt	gt
 800772e:	1a9b      	subgt	r3, r3, r2
 8007730:	18ed      	addgt	r5, r5, r3
 8007732:	2600      	movs	r6, #0
 8007734:	341a      	adds	r4, #26
 8007736:	42b5      	cmp	r5, r6
 8007738:	d11a      	bne.n	8007770 <_printf_common+0xc8>
 800773a:	2000      	movs	r0, #0
 800773c:	e008      	b.n	8007750 <_printf_common+0xa8>
 800773e:	2301      	movs	r3, #1
 8007740:	4652      	mov	r2, sl
 8007742:	4641      	mov	r1, r8
 8007744:	4638      	mov	r0, r7
 8007746:	47c8      	blx	r9
 8007748:	3001      	adds	r0, #1
 800774a:	d103      	bne.n	8007754 <_printf_common+0xac>
 800774c:	f04f 30ff 	mov.w	r0, #4294967295
 8007750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007754:	3501      	adds	r5, #1
 8007756:	e7c6      	b.n	80076e6 <_printf_common+0x3e>
 8007758:	18e1      	adds	r1, r4, r3
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	2030      	movs	r0, #48	@ 0x30
 800775e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007762:	4422      	add	r2, r4
 8007764:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007768:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800776c:	3302      	adds	r3, #2
 800776e:	e7c7      	b.n	8007700 <_printf_common+0x58>
 8007770:	2301      	movs	r3, #1
 8007772:	4622      	mov	r2, r4
 8007774:	4641      	mov	r1, r8
 8007776:	4638      	mov	r0, r7
 8007778:	47c8      	blx	r9
 800777a:	3001      	adds	r0, #1
 800777c:	d0e6      	beq.n	800774c <_printf_common+0xa4>
 800777e:	3601      	adds	r6, #1
 8007780:	e7d9      	b.n	8007736 <_printf_common+0x8e>
	...

08007784 <_printf_i>:
 8007784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007788:	7e0f      	ldrb	r7, [r1, #24]
 800778a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800778c:	2f78      	cmp	r7, #120	@ 0x78
 800778e:	4691      	mov	r9, r2
 8007790:	4680      	mov	r8, r0
 8007792:	460c      	mov	r4, r1
 8007794:	469a      	mov	sl, r3
 8007796:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800779a:	d807      	bhi.n	80077ac <_printf_i+0x28>
 800779c:	2f62      	cmp	r7, #98	@ 0x62
 800779e:	d80a      	bhi.n	80077b6 <_printf_i+0x32>
 80077a0:	2f00      	cmp	r7, #0
 80077a2:	f000 80d1 	beq.w	8007948 <_printf_i+0x1c4>
 80077a6:	2f58      	cmp	r7, #88	@ 0x58
 80077a8:	f000 80b8 	beq.w	800791c <_printf_i+0x198>
 80077ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077b4:	e03a      	b.n	800782c <_printf_i+0xa8>
 80077b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80077ba:	2b15      	cmp	r3, #21
 80077bc:	d8f6      	bhi.n	80077ac <_printf_i+0x28>
 80077be:	a101      	add	r1, pc, #4	@ (adr r1, 80077c4 <_printf_i+0x40>)
 80077c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077c4:	0800781d 	.word	0x0800781d
 80077c8:	08007831 	.word	0x08007831
 80077cc:	080077ad 	.word	0x080077ad
 80077d0:	080077ad 	.word	0x080077ad
 80077d4:	080077ad 	.word	0x080077ad
 80077d8:	080077ad 	.word	0x080077ad
 80077dc:	08007831 	.word	0x08007831
 80077e0:	080077ad 	.word	0x080077ad
 80077e4:	080077ad 	.word	0x080077ad
 80077e8:	080077ad 	.word	0x080077ad
 80077ec:	080077ad 	.word	0x080077ad
 80077f0:	0800792f 	.word	0x0800792f
 80077f4:	0800785b 	.word	0x0800785b
 80077f8:	080078e9 	.word	0x080078e9
 80077fc:	080077ad 	.word	0x080077ad
 8007800:	080077ad 	.word	0x080077ad
 8007804:	08007951 	.word	0x08007951
 8007808:	080077ad 	.word	0x080077ad
 800780c:	0800785b 	.word	0x0800785b
 8007810:	080077ad 	.word	0x080077ad
 8007814:	080077ad 	.word	0x080077ad
 8007818:	080078f1 	.word	0x080078f1
 800781c:	6833      	ldr	r3, [r6, #0]
 800781e:	1d1a      	adds	r2, r3, #4
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6032      	str	r2, [r6, #0]
 8007824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007828:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800782c:	2301      	movs	r3, #1
 800782e:	e09c      	b.n	800796a <_printf_i+0x1e6>
 8007830:	6833      	ldr	r3, [r6, #0]
 8007832:	6820      	ldr	r0, [r4, #0]
 8007834:	1d19      	adds	r1, r3, #4
 8007836:	6031      	str	r1, [r6, #0]
 8007838:	0606      	lsls	r6, r0, #24
 800783a:	d501      	bpl.n	8007840 <_printf_i+0xbc>
 800783c:	681d      	ldr	r5, [r3, #0]
 800783e:	e003      	b.n	8007848 <_printf_i+0xc4>
 8007840:	0645      	lsls	r5, r0, #25
 8007842:	d5fb      	bpl.n	800783c <_printf_i+0xb8>
 8007844:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007848:	2d00      	cmp	r5, #0
 800784a:	da03      	bge.n	8007854 <_printf_i+0xd0>
 800784c:	232d      	movs	r3, #45	@ 0x2d
 800784e:	426d      	negs	r5, r5
 8007850:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007854:	4858      	ldr	r0, [pc, #352]	@ (80079b8 <_printf_i+0x234>)
 8007856:	230a      	movs	r3, #10
 8007858:	e011      	b.n	800787e <_printf_i+0xfa>
 800785a:	6821      	ldr	r1, [r4, #0]
 800785c:	6833      	ldr	r3, [r6, #0]
 800785e:	0608      	lsls	r0, r1, #24
 8007860:	f853 5b04 	ldr.w	r5, [r3], #4
 8007864:	d402      	bmi.n	800786c <_printf_i+0xe8>
 8007866:	0649      	lsls	r1, r1, #25
 8007868:	bf48      	it	mi
 800786a:	b2ad      	uxthmi	r5, r5
 800786c:	2f6f      	cmp	r7, #111	@ 0x6f
 800786e:	4852      	ldr	r0, [pc, #328]	@ (80079b8 <_printf_i+0x234>)
 8007870:	6033      	str	r3, [r6, #0]
 8007872:	bf14      	ite	ne
 8007874:	230a      	movne	r3, #10
 8007876:	2308      	moveq	r3, #8
 8007878:	2100      	movs	r1, #0
 800787a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800787e:	6866      	ldr	r6, [r4, #4]
 8007880:	60a6      	str	r6, [r4, #8]
 8007882:	2e00      	cmp	r6, #0
 8007884:	db05      	blt.n	8007892 <_printf_i+0x10e>
 8007886:	6821      	ldr	r1, [r4, #0]
 8007888:	432e      	orrs	r6, r5
 800788a:	f021 0104 	bic.w	r1, r1, #4
 800788e:	6021      	str	r1, [r4, #0]
 8007890:	d04b      	beq.n	800792a <_printf_i+0x1a6>
 8007892:	4616      	mov	r6, r2
 8007894:	fbb5 f1f3 	udiv	r1, r5, r3
 8007898:	fb03 5711 	mls	r7, r3, r1, r5
 800789c:	5dc7      	ldrb	r7, [r0, r7]
 800789e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078a2:	462f      	mov	r7, r5
 80078a4:	42bb      	cmp	r3, r7
 80078a6:	460d      	mov	r5, r1
 80078a8:	d9f4      	bls.n	8007894 <_printf_i+0x110>
 80078aa:	2b08      	cmp	r3, #8
 80078ac:	d10b      	bne.n	80078c6 <_printf_i+0x142>
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	07df      	lsls	r7, r3, #31
 80078b2:	d508      	bpl.n	80078c6 <_printf_i+0x142>
 80078b4:	6923      	ldr	r3, [r4, #16]
 80078b6:	6861      	ldr	r1, [r4, #4]
 80078b8:	4299      	cmp	r1, r3
 80078ba:	bfde      	ittt	le
 80078bc:	2330      	movle	r3, #48	@ 0x30
 80078be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80078c6:	1b92      	subs	r2, r2, r6
 80078c8:	6122      	str	r2, [r4, #16]
 80078ca:	f8cd a000 	str.w	sl, [sp]
 80078ce:	464b      	mov	r3, r9
 80078d0:	aa03      	add	r2, sp, #12
 80078d2:	4621      	mov	r1, r4
 80078d4:	4640      	mov	r0, r8
 80078d6:	f7ff fee7 	bl	80076a8 <_printf_common>
 80078da:	3001      	adds	r0, #1
 80078dc:	d14a      	bne.n	8007974 <_printf_i+0x1f0>
 80078de:	f04f 30ff 	mov.w	r0, #4294967295
 80078e2:	b004      	add	sp, #16
 80078e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	f043 0320 	orr.w	r3, r3, #32
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	4832      	ldr	r0, [pc, #200]	@ (80079bc <_printf_i+0x238>)
 80078f2:	2778      	movs	r7, #120	@ 0x78
 80078f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	6831      	ldr	r1, [r6, #0]
 80078fc:	061f      	lsls	r7, r3, #24
 80078fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8007902:	d402      	bmi.n	800790a <_printf_i+0x186>
 8007904:	065f      	lsls	r7, r3, #25
 8007906:	bf48      	it	mi
 8007908:	b2ad      	uxthmi	r5, r5
 800790a:	6031      	str	r1, [r6, #0]
 800790c:	07d9      	lsls	r1, r3, #31
 800790e:	bf44      	itt	mi
 8007910:	f043 0320 	orrmi.w	r3, r3, #32
 8007914:	6023      	strmi	r3, [r4, #0]
 8007916:	b11d      	cbz	r5, 8007920 <_printf_i+0x19c>
 8007918:	2310      	movs	r3, #16
 800791a:	e7ad      	b.n	8007878 <_printf_i+0xf4>
 800791c:	4826      	ldr	r0, [pc, #152]	@ (80079b8 <_printf_i+0x234>)
 800791e:	e7e9      	b.n	80078f4 <_printf_i+0x170>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	f023 0320 	bic.w	r3, r3, #32
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	e7f6      	b.n	8007918 <_printf_i+0x194>
 800792a:	4616      	mov	r6, r2
 800792c:	e7bd      	b.n	80078aa <_printf_i+0x126>
 800792e:	6833      	ldr	r3, [r6, #0]
 8007930:	6825      	ldr	r5, [r4, #0]
 8007932:	6961      	ldr	r1, [r4, #20]
 8007934:	1d18      	adds	r0, r3, #4
 8007936:	6030      	str	r0, [r6, #0]
 8007938:	062e      	lsls	r6, r5, #24
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	d501      	bpl.n	8007942 <_printf_i+0x1be>
 800793e:	6019      	str	r1, [r3, #0]
 8007940:	e002      	b.n	8007948 <_printf_i+0x1c4>
 8007942:	0668      	lsls	r0, r5, #25
 8007944:	d5fb      	bpl.n	800793e <_printf_i+0x1ba>
 8007946:	8019      	strh	r1, [r3, #0]
 8007948:	2300      	movs	r3, #0
 800794a:	6123      	str	r3, [r4, #16]
 800794c:	4616      	mov	r6, r2
 800794e:	e7bc      	b.n	80078ca <_printf_i+0x146>
 8007950:	6833      	ldr	r3, [r6, #0]
 8007952:	1d1a      	adds	r2, r3, #4
 8007954:	6032      	str	r2, [r6, #0]
 8007956:	681e      	ldr	r6, [r3, #0]
 8007958:	6862      	ldr	r2, [r4, #4]
 800795a:	2100      	movs	r1, #0
 800795c:	4630      	mov	r0, r6
 800795e:	f7f8 fc57 	bl	8000210 <memchr>
 8007962:	b108      	cbz	r0, 8007968 <_printf_i+0x1e4>
 8007964:	1b80      	subs	r0, r0, r6
 8007966:	6060      	str	r0, [r4, #4]
 8007968:	6863      	ldr	r3, [r4, #4]
 800796a:	6123      	str	r3, [r4, #16]
 800796c:	2300      	movs	r3, #0
 800796e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007972:	e7aa      	b.n	80078ca <_printf_i+0x146>
 8007974:	6923      	ldr	r3, [r4, #16]
 8007976:	4632      	mov	r2, r6
 8007978:	4649      	mov	r1, r9
 800797a:	4640      	mov	r0, r8
 800797c:	47d0      	blx	sl
 800797e:	3001      	adds	r0, #1
 8007980:	d0ad      	beq.n	80078de <_printf_i+0x15a>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	079b      	lsls	r3, r3, #30
 8007986:	d413      	bmi.n	80079b0 <_printf_i+0x22c>
 8007988:	68e0      	ldr	r0, [r4, #12]
 800798a:	9b03      	ldr	r3, [sp, #12]
 800798c:	4298      	cmp	r0, r3
 800798e:	bfb8      	it	lt
 8007990:	4618      	movlt	r0, r3
 8007992:	e7a6      	b.n	80078e2 <_printf_i+0x15e>
 8007994:	2301      	movs	r3, #1
 8007996:	4632      	mov	r2, r6
 8007998:	4649      	mov	r1, r9
 800799a:	4640      	mov	r0, r8
 800799c:	47d0      	blx	sl
 800799e:	3001      	adds	r0, #1
 80079a0:	d09d      	beq.n	80078de <_printf_i+0x15a>
 80079a2:	3501      	adds	r5, #1
 80079a4:	68e3      	ldr	r3, [r4, #12]
 80079a6:	9903      	ldr	r1, [sp, #12]
 80079a8:	1a5b      	subs	r3, r3, r1
 80079aa:	42ab      	cmp	r3, r5
 80079ac:	dcf2      	bgt.n	8007994 <_printf_i+0x210>
 80079ae:	e7eb      	b.n	8007988 <_printf_i+0x204>
 80079b0:	2500      	movs	r5, #0
 80079b2:	f104 0619 	add.w	r6, r4, #25
 80079b6:	e7f5      	b.n	80079a4 <_printf_i+0x220>
 80079b8:	08007fc5 	.word	0x08007fc5
 80079bc:	08007fd6 	.word	0x08007fd6

080079c0 <__sflush_r>:
 80079c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c8:	0716      	lsls	r6, r2, #28
 80079ca:	4605      	mov	r5, r0
 80079cc:	460c      	mov	r4, r1
 80079ce:	d454      	bmi.n	8007a7a <__sflush_r+0xba>
 80079d0:	684b      	ldr	r3, [r1, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	dc02      	bgt.n	80079dc <__sflush_r+0x1c>
 80079d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80079d8:	2b00      	cmp	r3, #0
 80079da:	dd48      	ble.n	8007a6e <__sflush_r+0xae>
 80079dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079de:	2e00      	cmp	r6, #0
 80079e0:	d045      	beq.n	8007a6e <__sflush_r+0xae>
 80079e2:	2300      	movs	r3, #0
 80079e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80079e8:	682f      	ldr	r7, [r5, #0]
 80079ea:	6a21      	ldr	r1, [r4, #32]
 80079ec:	602b      	str	r3, [r5, #0]
 80079ee:	d030      	beq.n	8007a52 <__sflush_r+0x92>
 80079f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80079f2:	89a3      	ldrh	r3, [r4, #12]
 80079f4:	0759      	lsls	r1, r3, #29
 80079f6:	d505      	bpl.n	8007a04 <__sflush_r+0x44>
 80079f8:	6863      	ldr	r3, [r4, #4]
 80079fa:	1ad2      	subs	r2, r2, r3
 80079fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80079fe:	b10b      	cbz	r3, 8007a04 <__sflush_r+0x44>
 8007a00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a02:	1ad2      	subs	r2, r2, r3
 8007a04:	2300      	movs	r3, #0
 8007a06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a08:	6a21      	ldr	r1, [r4, #32]
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	47b0      	blx	r6
 8007a0e:	1c43      	adds	r3, r0, #1
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	d106      	bne.n	8007a22 <__sflush_r+0x62>
 8007a14:	6829      	ldr	r1, [r5, #0]
 8007a16:	291d      	cmp	r1, #29
 8007a18:	d82b      	bhi.n	8007a72 <__sflush_r+0xb2>
 8007a1a:	4a2a      	ldr	r2, [pc, #168]	@ (8007ac4 <__sflush_r+0x104>)
 8007a1c:	40ca      	lsrs	r2, r1
 8007a1e:	07d6      	lsls	r6, r2, #31
 8007a20:	d527      	bpl.n	8007a72 <__sflush_r+0xb2>
 8007a22:	2200      	movs	r2, #0
 8007a24:	6062      	str	r2, [r4, #4]
 8007a26:	04d9      	lsls	r1, r3, #19
 8007a28:	6922      	ldr	r2, [r4, #16]
 8007a2a:	6022      	str	r2, [r4, #0]
 8007a2c:	d504      	bpl.n	8007a38 <__sflush_r+0x78>
 8007a2e:	1c42      	adds	r2, r0, #1
 8007a30:	d101      	bne.n	8007a36 <__sflush_r+0x76>
 8007a32:	682b      	ldr	r3, [r5, #0]
 8007a34:	b903      	cbnz	r3, 8007a38 <__sflush_r+0x78>
 8007a36:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a3a:	602f      	str	r7, [r5, #0]
 8007a3c:	b1b9      	cbz	r1, 8007a6e <__sflush_r+0xae>
 8007a3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a42:	4299      	cmp	r1, r3
 8007a44:	d002      	beq.n	8007a4c <__sflush_r+0x8c>
 8007a46:	4628      	mov	r0, r5
 8007a48:	f7ff fa9c 	bl	8006f84 <_free_r>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a50:	e00d      	b.n	8007a6e <__sflush_r+0xae>
 8007a52:	2301      	movs	r3, #1
 8007a54:	4628      	mov	r0, r5
 8007a56:	47b0      	blx	r6
 8007a58:	4602      	mov	r2, r0
 8007a5a:	1c50      	adds	r0, r2, #1
 8007a5c:	d1c9      	bne.n	80079f2 <__sflush_r+0x32>
 8007a5e:	682b      	ldr	r3, [r5, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0c6      	beq.n	80079f2 <__sflush_r+0x32>
 8007a64:	2b1d      	cmp	r3, #29
 8007a66:	d001      	beq.n	8007a6c <__sflush_r+0xac>
 8007a68:	2b16      	cmp	r3, #22
 8007a6a:	d11e      	bne.n	8007aaa <__sflush_r+0xea>
 8007a6c:	602f      	str	r7, [r5, #0]
 8007a6e:	2000      	movs	r0, #0
 8007a70:	e022      	b.n	8007ab8 <__sflush_r+0xf8>
 8007a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a76:	b21b      	sxth	r3, r3
 8007a78:	e01b      	b.n	8007ab2 <__sflush_r+0xf2>
 8007a7a:	690f      	ldr	r7, [r1, #16]
 8007a7c:	2f00      	cmp	r7, #0
 8007a7e:	d0f6      	beq.n	8007a6e <__sflush_r+0xae>
 8007a80:	0793      	lsls	r3, r2, #30
 8007a82:	680e      	ldr	r6, [r1, #0]
 8007a84:	bf08      	it	eq
 8007a86:	694b      	ldreq	r3, [r1, #20]
 8007a88:	600f      	str	r7, [r1, #0]
 8007a8a:	bf18      	it	ne
 8007a8c:	2300      	movne	r3, #0
 8007a8e:	eba6 0807 	sub.w	r8, r6, r7
 8007a92:	608b      	str	r3, [r1, #8]
 8007a94:	f1b8 0f00 	cmp.w	r8, #0
 8007a98:	dde9      	ble.n	8007a6e <__sflush_r+0xae>
 8007a9a:	6a21      	ldr	r1, [r4, #32]
 8007a9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a9e:	4643      	mov	r3, r8
 8007aa0:	463a      	mov	r2, r7
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	47b0      	blx	r6
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	dc08      	bgt.n	8007abc <__sflush_r+0xfc>
 8007aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ab2:	81a3      	strh	r3, [r4, #12]
 8007ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007abc:	4407      	add	r7, r0
 8007abe:	eba8 0800 	sub.w	r8, r8, r0
 8007ac2:	e7e7      	b.n	8007a94 <__sflush_r+0xd4>
 8007ac4:	20400001 	.word	0x20400001

08007ac8 <_fflush_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	690b      	ldr	r3, [r1, #16]
 8007acc:	4605      	mov	r5, r0
 8007ace:	460c      	mov	r4, r1
 8007ad0:	b913      	cbnz	r3, 8007ad8 <_fflush_r+0x10>
 8007ad2:	2500      	movs	r5, #0
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	b118      	cbz	r0, 8007ae2 <_fflush_r+0x1a>
 8007ada:	6a03      	ldr	r3, [r0, #32]
 8007adc:	b90b      	cbnz	r3, 8007ae2 <_fflush_r+0x1a>
 8007ade:	f7ff f8e9 	bl	8006cb4 <__sinit>
 8007ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0f3      	beq.n	8007ad2 <_fflush_r+0xa>
 8007aea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007aec:	07d0      	lsls	r0, r2, #31
 8007aee:	d404      	bmi.n	8007afa <_fflush_r+0x32>
 8007af0:	0599      	lsls	r1, r3, #22
 8007af2:	d402      	bmi.n	8007afa <_fflush_r+0x32>
 8007af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007af6:	f7ff fa3a 	bl	8006f6e <__retarget_lock_acquire_recursive>
 8007afa:	4628      	mov	r0, r5
 8007afc:	4621      	mov	r1, r4
 8007afe:	f7ff ff5f 	bl	80079c0 <__sflush_r>
 8007b02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b04:	07da      	lsls	r2, r3, #31
 8007b06:	4605      	mov	r5, r0
 8007b08:	d4e4      	bmi.n	8007ad4 <_fflush_r+0xc>
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	059b      	lsls	r3, r3, #22
 8007b0e:	d4e1      	bmi.n	8007ad4 <_fflush_r+0xc>
 8007b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b12:	f7ff fa2d 	bl	8006f70 <__retarget_lock_release_recursive>
 8007b16:	e7dd      	b.n	8007ad4 <_fflush_r+0xc>

08007b18 <__swbuf_r>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	460e      	mov	r6, r1
 8007b1c:	4614      	mov	r4, r2
 8007b1e:	4605      	mov	r5, r0
 8007b20:	b118      	cbz	r0, 8007b2a <__swbuf_r+0x12>
 8007b22:	6a03      	ldr	r3, [r0, #32]
 8007b24:	b90b      	cbnz	r3, 8007b2a <__swbuf_r+0x12>
 8007b26:	f7ff f8c5 	bl	8006cb4 <__sinit>
 8007b2a:	69a3      	ldr	r3, [r4, #24]
 8007b2c:	60a3      	str	r3, [r4, #8]
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	071a      	lsls	r2, r3, #28
 8007b32:	d501      	bpl.n	8007b38 <__swbuf_r+0x20>
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	b943      	cbnz	r3, 8007b4a <__swbuf_r+0x32>
 8007b38:	4621      	mov	r1, r4
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	f000 f82a 	bl	8007b94 <__swsetup_r>
 8007b40:	b118      	cbz	r0, 8007b4a <__swbuf_r+0x32>
 8007b42:	f04f 37ff 	mov.w	r7, #4294967295
 8007b46:	4638      	mov	r0, r7
 8007b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	6922      	ldr	r2, [r4, #16]
 8007b4e:	1a98      	subs	r0, r3, r2
 8007b50:	6963      	ldr	r3, [r4, #20]
 8007b52:	b2f6      	uxtb	r6, r6
 8007b54:	4283      	cmp	r3, r0
 8007b56:	4637      	mov	r7, r6
 8007b58:	dc05      	bgt.n	8007b66 <__swbuf_r+0x4e>
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	f7ff ffb3 	bl	8007ac8 <_fflush_r>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d1ed      	bne.n	8007b42 <__swbuf_r+0x2a>
 8007b66:	68a3      	ldr	r3, [r4, #8]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	60a3      	str	r3, [r4, #8]
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	1c5a      	adds	r2, r3, #1
 8007b70:	6022      	str	r2, [r4, #0]
 8007b72:	701e      	strb	r6, [r3, #0]
 8007b74:	6962      	ldr	r2, [r4, #20]
 8007b76:	1c43      	adds	r3, r0, #1
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d004      	beq.n	8007b86 <__swbuf_r+0x6e>
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	07db      	lsls	r3, r3, #31
 8007b80:	d5e1      	bpl.n	8007b46 <__swbuf_r+0x2e>
 8007b82:	2e0a      	cmp	r6, #10
 8007b84:	d1df      	bne.n	8007b46 <__swbuf_r+0x2e>
 8007b86:	4621      	mov	r1, r4
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f7ff ff9d 	bl	8007ac8 <_fflush_r>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d0d9      	beq.n	8007b46 <__swbuf_r+0x2e>
 8007b92:	e7d6      	b.n	8007b42 <__swbuf_r+0x2a>

08007b94 <__swsetup_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4b29      	ldr	r3, [pc, #164]	@ (8007c3c <__swsetup_r+0xa8>)
 8007b98:	4605      	mov	r5, r0
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	b118      	cbz	r0, 8007ba8 <__swsetup_r+0x14>
 8007ba0:	6a03      	ldr	r3, [r0, #32]
 8007ba2:	b90b      	cbnz	r3, 8007ba8 <__swsetup_r+0x14>
 8007ba4:	f7ff f886 	bl	8006cb4 <__sinit>
 8007ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bac:	0719      	lsls	r1, r3, #28
 8007bae:	d422      	bmi.n	8007bf6 <__swsetup_r+0x62>
 8007bb0:	06da      	lsls	r2, r3, #27
 8007bb2:	d407      	bmi.n	8007bc4 <__swsetup_r+0x30>
 8007bb4:	2209      	movs	r2, #9
 8007bb6:	602a      	str	r2, [r5, #0]
 8007bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bbc:	81a3      	strh	r3, [r4, #12]
 8007bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc2:	e033      	b.n	8007c2c <__swsetup_r+0x98>
 8007bc4:	0758      	lsls	r0, r3, #29
 8007bc6:	d512      	bpl.n	8007bee <__swsetup_r+0x5a>
 8007bc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bca:	b141      	cbz	r1, 8007bde <__swsetup_r+0x4a>
 8007bcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bd0:	4299      	cmp	r1, r3
 8007bd2:	d002      	beq.n	8007bda <__swsetup_r+0x46>
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f7ff f9d5 	bl	8006f84 <_free_r>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007be4:	81a3      	strh	r3, [r4, #12]
 8007be6:	2300      	movs	r3, #0
 8007be8:	6063      	str	r3, [r4, #4]
 8007bea:	6923      	ldr	r3, [r4, #16]
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	f043 0308 	orr.w	r3, r3, #8
 8007bf4:	81a3      	strh	r3, [r4, #12]
 8007bf6:	6923      	ldr	r3, [r4, #16]
 8007bf8:	b94b      	cbnz	r3, 8007c0e <__swsetup_r+0x7a>
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c04:	d003      	beq.n	8007c0e <__swsetup_r+0x7a>
 8007c06:	4621      	mov	r1, r4
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f000 f8a5 	bl	8007d58 <__smakebuf_r>
 8007c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c12:	f013 0201 	ands.w	r2, r3, #1
 8007c16:	d00a      	beq.n	8007c2e <__swsetup_r+0x9a>
 8007c18:	2200      	movs	r2, #0
 8007c1a:	60a2      	str	r2, [r4, #8]
 8007c1c:	6962      	ldr	r2, [r4, #20]
 8007c1e:	4252      	negs	r2, r2
 8007c20:	61a2      	str	r2, [r4, #24]
 8007c22:	6922      	ldr	r2, [r4, #16]
 8007c24:	b942      	cbnz	r2, 8007c38 <__swsetup_r+0xa4>
 8007c26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c2a:	d1c5      	bne.n	8007bb8 <__swsetup_r+0x24>
 8007c2c:	bd38      	pop	{r3, r4, r5, pc}
 8007c2e:	0799      	lsls	r1, r3, #30
 8007c30:	bf58      	it	pl
 8007c32:	6962      	ldrpl	r2, [r4, #20]
 8007c34:	60a2      	str	r2, [r4, #8]
 8007c36:	e7f4      	b.n	8007c22 <__swsetup_r+0x8e>
 8007c38:	2000      	movs	r0, #0
 8007c3a:	e7f7      	b.n	8007c2c <__swsetup_r+0x98>
 8007c3c:	200000b8 	.word	0x200000b8

08007c40 <memmove>:
 8007c40:	4288      	cmp	r0, r1
 8007c42:	b510      	push	{r4, lr}
 8007c44:	eb01 0402 	add.w	r4, r1, r2
 8007c48:	d902      	bls.n	8007c50 <memmove+0x10>
 8007c4a:	4284      	cmp	r4, r0
 8007c4c:	4623      	mov	r3, r4
 8007c4e:	d807      	bhi.n	8007c60 <memmove+0x20>
 8007c50:	1e43      	subs	r3, r0, #1
 8007c52:	42a1      	cmp	r1, r4
 8007c54:	d008      	beq.n	8007c68 <memmove+0x28>
 8007c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c5e:	e7f8      	b.n	8007c52 <memmove+0x12>
 8007c60:	4402      	add	r2, r0
 8007c62:	4601      	mov	r1, r0
 8007c64:	428a      	cmp	r2, r1
 8007c66:	d100      	bne.n	8007c6a <memmove+0x2a>
 8007c68:	bd10      	pop	{r4, pc}
 8007c6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c72:	e7f7      	b.n	8007c64 <memmove+0x24>

08007c74 <_sbrk_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4d06      	ldr	r5, [pc, #24]	@ (8007c90 <_sbrk_r+0x1c>)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	4608      	mov	r0, r1
 8007c7e:	602b      	str	r3, [r5, #0]
 8007c80:	f7f8 ff5a 	bl	8000b38 <_sbrk>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d102      	bne.n	8007c8e <_sbrk_r+0x1a>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	b103      	cbz	r3, 8007c8e <_sbrk_r+0x1a>
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	200005a0 	.word	0x200005a0

08007c94 <memcpy>:
 8007c94:	440a      	add	r2, r1
 8007c96:	4291      	cmp	r1, r2
 8007c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c9c:	d100      	bne.n	8007ca0 <memcpy+0xc>
 8007c9e:	4770      	bx	lr
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007caa:	4291      	cmp	r1, r2
 8007cac:	d1f9      	bne.n	8007ca2 <memcpy+0xe>
 8007cae:	bd10      	pop	{r4, pc}

08007cb0 <_realloc_r>:
 8007cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	4614      	mov	r4, r2
 8007cb8:	460d      	mov	r5, r1
 8007cba:	b921      	cbnz	r1, 8007cc6 <_realloc_r+0x16>
 8007cbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	f7ff b9cb 	b.w	800705c <_malloc_r>
 8007cc6:	b92a      	cbnz	r2, 8007cd4 <_realloc_r+0x24>
 8007cc8:	f7ff f95c 	bl	8006f84 <_free_r>
 8007ccc:	4625      	mov	r5, r4
 8007cce:	4628      	mov	r0, r5
 8007cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd4:	f000 f89e 	bl	8007e14 <_malloc_usable_size_r>
 8007cd8:	4284      	cmp	r4, r0
 8007cda:	4606      	mov	r6, r0
 8007cdc:	d802      	bhi.n	8007ce4 <_realloc_r+0x34>
 8007cde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ce2:	d8f4      	bhi.n	8007cce <_realloc_r+0x1e>
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	f7ff f9b8 	bl	800705c <_malloc_r>
 8007cec:	4680      	mov	r8, r0
 8007cee:	b908      	cbnz	r0, 8007cf4 <_realloc_r+0x44>
 8007cf0:	4645      	mov	r5, r8
 8007cf2:	e7ec      	b.n	8007cce <_realloc_r+0x1e>
 8007cf4:	42b4      	cmp	r4, r6
 8007cf6:	4622      	mov	r2, r4
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	bf28      	it	cs
 8007cfc:	4632      	movcs	r2, r6
 8007cfe:	f7ff ffc9 	bl	8007c94 <memcpy>
 8007d02:	4629      	mov	r1, r5
 8007d04:	4638      	mov	r0, r7
 8007d06:	f7ff f93d 	bl	8006f84 <_free_r>
 8007d0a:	e7f1      	b.n	8007cf0 <_realloc_r+0x40>

08007d0c <__swhatbuf_r>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	460c      	mov	r4, r1
 8007d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d14:	2900      	cmp	r1, #0
 8007d16:	b096      	sub	sp, #88	@ 0x58
 8007d18:	4615      	mov	r5, r2
 8007d1a:	461e      	mov	r6, r3
 8007d1c:	da0d      	bge.n	8007d3a <__swhatbuf_r+0x2e>
 8007d1e:	89a3      	ldrh	r3, [r4, #12]
 8007d20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d24:	f04f 0100 	mov.w	r1, #0
 8007d28:	bf14      	ite	ne
 8007d2a:	2340      	movne	r3, #64	@ 0x40
 8007d2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d30:	2000      	movs	r0, #0
 8007d32:	6031      	str	r1, [r6, #0]
 8007d34:	602b      	str	r3, [r5, #0]
 8007d36:	b016      	add	sp, #88	@ 0x58
 8007d38:	bd70      	pop	{r4, r5, r6, pc}
 8007d3a:	466a      	mov	r2, sp
 8007d3c:	f000 f848 	bl	8007dd0 <_fstat_r>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	dbec      	blt.n	8007d1e <__swhatbuf_r+0x12>
 8007d44:	9901      	ldr	r1, [sp, #4]
 8007d46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d4e:	4259      	negs	r1, r3
 8007d50:	4159      	adcs	r1, r3
 8007d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d56:	e7eb      	b.n	8007d30 <__swhatbuf_r+0x24>

08007d58 <__smakebuf_r>:
 8007d58:	898b      	ldrh	r3, [r1, #12]
 8007d5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d5c:	079d      	lsls	r5, r3, #30
 8007d5e:	4606      	mov	r6, r0
 8007d60:	460c      	mov	r4, r1
 8007d62:	d507      	bpl.n	8007d74 <__smakebuf_r+0x1c>
 8007d64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	6123      	str	r3, [r4, #16]
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	6163      	str	r3, [r4, #20]
 8007d70:	b003      	add	sp, #12
 8007d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d74:	ab01      	add	r3, sp, #4
 8007d76:	466a      	mov	r2, sp
 8007d78:	f7ff ffc8 	bl	8007d0c <__swhatbuf_r>
 8007d7c:	9f00      	ldr	r7, [sp, #0]
 8007d7e:	4605      	mov	r5, r0
 8007d80:	4639      	mov	r1, r7
 8007d82:	4630      	mov	r0, r6
 8007d84:	f7ff f96a 	bl	800705c <_malloc_r>
 8007d88:	b948      	cbnz	r0, 8007d9e <__smakebuf_r+0x46>
 8007d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8e:	059a      	lsls	r2, r3, #22
 8007d90:	d4ee      	bmi.n	8007d70 <__smakebuf_r+0x18>
 8007d92:	f023 0303 	bic.w	r3, r3, #3
 8007d96:	f043 0302 	orr.w	r3, r3, #2
 8007d9a:	81a3      	strh	r3, [r4, #12]
 8007d9c:	e7e2      	b.n	8007d64 <__smakebuf_r+0xc>
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	6020      	str	r0, [r4, #0]
 8007da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007da6:	81a3      	strh	r3, [r4, #12]
 8007da8:	9b01      	ldr	r3, [sp, #4]
 8007daa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007dae:	b15b      	cbz	r3, 8007dc8 <__smakebuf_r+0x70>
 8007db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007db4:	4630      	mov	r0, r6
 8007db6:	f000 f81d 	bl	8007df4 <_isatty_r>
 8007dba:	b128      	cbz	r0, 8007dc8 <__smakebuf_r+0x70>
 8007dbc:	89a3      	ldrh	r3, [r4, #12]
 8007dbe:	f023 0303 	bic.w	r3, r3, #3
 8007dc2:	f043 0301 	orr.w	r3, r3, #1
 8007dc6:	81a3      	strh	r3, [r4, #12]
 8007dc8:	89a3      	ldrh	r3, [r4, #12]
 8007dca:	431d      	orrs	r5, r3
 8007dcc:	81a5      	strh	r5, [r4, #12]
 8007dce:	e7cf      	b.n	8007d70 <__smakebuf_r+0x18>

08007dd0 <_fstat_r>:
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	4d07      	ldr	r5, [pc, #28]	@ (8007df0 <_fstat_r+0x20>)
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	4608      	mov	r0, r1
 8007dda:	4611      	mov	r1, r2
 8007ddc:	602b      	str	r3, [r5, #0]
 8007dde:	f7f8 fe82 	bl	8000ae6 <_fstat>
 8007de2:	1c43      	adds	r3, r0, #1
 8007de4:	d102      	bne.n	8007dec <_fstat_r+0x1c>
 8007de6:	682b      	ldr	r3, [r5, #0]
 8007de8:	b103      	cbz	r3, 8007dec <_fstat_r+0x1c>
 8007dea:	6023      	str	r3, [r4, #0]
 8007dec:	bd38      	pop	{r3, r4, r5, pc}
 8007dee:	bf00      	nop
 8007df0:	200005a0 	.word	0x200005a0

08007df4 <_isatty_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4d06      	ldr	r5, [pc, #24]	@ (8007e10 <_isatty_r+0x1c>)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	602b      	str	r3, [r5, #0]
 8007e00:	f7f8 fe81 	bl	8000b06 <_isatty>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d102      	bne.n	8007e0e <_isatty_r+0x1a>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	b103      	cbz	r3, 8007e0e <_isatty_r+0x1a>
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	200005a0 	.word	0x200005a0

08007e14 <_malloc_usable_size_r>:
 8007e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e18:	1f18      	subs	r0, r3, #4
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	bfbc      	itt	lt
 8007e1e:	580b      	ldrlt	r3, [r1, r0]
 8007e20:	18c0      	addlt	r0, r0, r3
 8007e22:	4770      	bx	lr

08007e24 <_init>:
 8007e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e26:	bf00      	nop
 8007e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e2a:	bc08      	pop	{r3}
 8007e2c:	469e      	mov	lr, r3
 8007e2e:	4770      	bx	lr

08007e30 <_fini>:
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e32:	bf00      	nop
 8007e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e36:	bc08      	pop	{r3}
 8007e38:	469e      	mov	lr, r3
 8007e3a:	4770      	bx	lr
