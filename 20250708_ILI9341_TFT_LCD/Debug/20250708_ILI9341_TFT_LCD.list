
20250708_ILI9341_TFT_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5c4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00042c84  0800a85c  0800a85c  0000b85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0804d4e0  0804d4e0  0004e4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0804d4e8  0804d4e8  0004e4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0804d4ec  0804d4ec  0004e4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0804d4f0  0004f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000384  2400006c  0804d55c  0004f06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240003f0  0804d55c  0004f3f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0004f06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019242  00000000  00000000  0004f09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000368f  00000000  00000000  000682dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010a8  00000000  00000000  0006b970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ca9  00000000  00000000  0006ca18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038aeb  00000000  00000000  0006d6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a168  00000000  00000000  000a61ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162063  00000000  00000000  000c0314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00222377  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a3c  00000000  00000000  002223bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000057  00000000  00000000  00226df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400006c 	.word	0x2400006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a844 	.word	0x0800a844

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000070 	.word	0x24000070
 80002d4:	0800a844 	.word	0x0800a844

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <HAL_SPI_TxCpltCallback>:

bool dma_busy = false;


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b087      	sub	sp, #28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	LCD_Request_t lcd_data;
	if (hspi == &ILI9341_SPI_PORT) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a2a      	ldr	r2, [pc, #168]	@ (80006b8 <HAL_SPI_TxCpltCallback+0xb4>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d14d      	bne.n	80006b0 <HAL_SPI_TxCpltCallback+0xac>
		pImgData += chunk_size;
 8000614:	4b29      	ldr	r3, [pc, #164]	@ (80006bc <HAL_SPI_TxCpltCallback+0xb8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a29      	ldr	r2, [pc, #164]	@ (80006c0 <HAL_SPI_TxCpltCallback+0xbc>)
 800061a:	8812      	ldrh	r2, [r2, #0]
 800061c:	4413      	add	r3, r2
 800061e:	4a27      	ldr	r2, [pc, #156]	@ (80006bc <HAL_SPI_TxCpltCallback+0xb8>)
 8000620:	6013      	str	r3, [r2, #0]
		img_size -= chunk_size;
 8000622:	4b28      	ldr	r3, [pc, #160]	@ (80006c4 <HAL_SPI_TxCpltCallback+0xc0>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a26      	ldr	r2, [pc, #152]	@ (80006c0 <HAL_SPI_TxCpltCallback+0xbc>)
 8000628:	8812      	ldrh	r2, [r2, #0]
 800062a:	1a9b      	subs	r3, r3, r2
 800062c:	4a25      	ldr	r2, [pc, #148]	@ (80006c4 <HAL_SPI_TxCpltCallback+0xc0>)
 800062e:	6013      	str	r3, [r2, #0]
		if(img_size > 0) {
 8000630:	4b24      	ldr	r3, [pc, #144]	@ (80006c4 <HAL_SPI_TxCpltCallback+0xc0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d012      	beq.n	800065e <HAL_SPI_TxCpltCallback+0x5a>
			chunk_size = img_size > ILI9341_MAX_LENTH ? ILI9341_MAX_LENTH : img_size;
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <HAL_SPI_TxCpltCallback+0xc0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000640:	4293      	cmp	r3, r2
 8000642:	bf28      	it	cs
 8000644:	4613      	movcs	r3, r2
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <HAL_SPI_TxCpltCallback+0xbc>)
 800064a:	801a      	strh	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, pImgData, chunk_size);
 800064c:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <HAL_SPI_TxCpltCallback+0xb8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a1b      	ldr	r2, [pc, #108]	@ (80006c0 <HAL_SPI_TxCpltCallback+0xbc>)
 8000652:	8812      	ldrh	r2, [r2, #0]
 8000654:	4619      	mov	r1, r3
 8000656:	4818      	ldr	r0, [pc, #96]	@ (80006b8 <HAL_SPI_TxCpltCallback+0xb4>)
 8000658:	f007 fd2c 	bl	80080b4 <HAL_SPI_Transmit_DMA>
			dma_busy = false;
			ILI9341_Unselect();
			}
	}
	}
}
 800065c:	e028      	b.n	80006b0 <HAL_SPI_TxCpltCallback+0xac>
			if(!isQueEmpty(&LCD_Que))
 800065e:	481a      	ldr	r0, [pc, #104]	@ (80006c8 <HAL_SPI_TxCpltCallback+0xc4>)
 8000660:	f000 ffc9 	bl	80015f6 <isQueEmpty>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d11d      	bne.n	80006a6 <HAL_SPI_TxCpltCallback+0xa2>
			deQue(&LCD_Que, &lcd_data);
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4619      	mov	r1, r3
 8000670:	4815      	ldr	r0, [pc, #84]	@ (80006c8 <HAL_SPI_TxCpltCallback+0xc4>)
 8000672:	f000 fffe 	bl	8001672 <deQue>
			ILI9341_SetAddressWindow(lcd_data.x, lcd_data.y, lcd_data.x+lcd_data.w-1, lcd_data.y+lcd_data.h-1);
 8000676:	89bb      	ldrh	r3, [r7, #12]
 8000678:	4618      	mov	r0, r3
 800067a:	89fb      	ldrh	r3, [r7, #14]
 800067c:	461c      	mov	r4, r3
 800067e:	89bb      	ldrh	r3, [r7, #12]
 8000680:	461a      	mov	r2, r3
 8000682:	8a3b      	ldrh	r3, [r7, #16]
 8000684:	4413      	add	r3, r2
 8000686:	1e5a      	subs	r2, r3, #1
 8000688:	89fb      	ldrh	r3, [r7, #14]
 800068a:	4619      	mov	r1, r3
 800068c:	8a7b      	ldrh	r3, [r7, #18]
 800068e:	440b      	add	r3, r1
 8000690:	3b01      	subs	r3, #1
 8000692:	4621      	mov	r1, r4
 8000694:	f000 f8cc 	bl	8000830 <ILI9341_SetAddressWindow>
			ILI9341_WriteImgData(lcd_data.data, lcd_data.size);
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	697a      	ldr	r2, [r7, #20]
 800069c:	4611      	mov	r1, r2
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f85e 	bl	8000760 <ILI9341_WriteImgData>
}
 80006a4:	e004      	b.n	80006b0 <HAL_SPI_TxCpltCallback+0xac>
			dma_busy = false;
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <HAL_SPI_TxCpltCallback+0xc8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
			ILI9341_Unselect();
 80006ac:	f000 f81c 	bl	80006e8 <ILI9341_Unselect>
}
 80006b0:	bf00      	nop
 80006b2:	371c      	adds	r7, #28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd90      	pop	{r4, r7, pc}
 80006b8:	24000108 	.word	0x24000108
 80006bc:	24000088 	.word	0x24000088
 80006c0:	24000090 	.word	0x24000090
 80006c4:	2400008c 	.word	0x2400008c
 80006c8:	240000dc 	.word	0x240000dc
 80006cc:	24000092 	.word	0x24000092

080006d0 <ILI9341_Select>:
static void ILI9341_Select() {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2140      	movs	r1, #64	@ 0x40
 80006d8:	4802      	ldr	r0, [pc, #8]	@ (80006e4 <ILI9341_Select+0x14>)
 80006da:	f004 fabf 	bl	8004c5c <HAL_GPIO_WritePin>

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	58021000 	.word	0x58021000

080006e8 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2140      	movs	r1, #64	@ 0x40
 80006f0:	4802      	ldr	r0, [pc, #8]	@ (80006fc <ILI9341_Unselect+0x14>)
 80006f2:	f004 fab3 	bl	8004c5c <HAL_GPIO_WritePin>

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	58021000 	.word	0x58021000

08000700 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800070a:	4807      	ldr	r0, [pc, #28]	@ (8000728 <ILI9341_Reset+0x28>)
 800070c:	f004 faa6 	bl	8004c5c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000710:	2005      	movs	r0, #5
 8000712:	f001 fc11 	bl	8001f38 <HAL_Delay>
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800071c:	4802      	ldr	r0, [pc, #8]	@ (8000728 <ILI9341_Reset+0x28>)
 800071e:	f004 fa9d 	bl	8004c5c <HAL_GPIO_WritePin>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	58021800 	.word	0x58021800

0800072c <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2110      	movs	r1, #16
 800073a:	4807      	ldr	r0, [pc, #28]	@ (8000758 <ILI9341_WriteCommand+0x2c>)
 800073c:	f004 fa8e 	bl	8004c5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000740:	1df9      	adds	r1, r7, #7
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	2201      	movs	r2, #1
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <ILI9341_WriteCommand+0x30>)
 800074a:	f007 fac5 	bl	8007cd8 <HAL_SPI_Transmit>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	58020400 	.word	0x58020400
 800075c:	24000108 	.word	0x24000108

08000760 <ILI9341_WriteImgData>:

void ILI9341_WriteImgData(uint8_t* buff, size_t buff_size) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2110      	movs	r1, #16
 800076e:	4813      	ldr	r0, [pc, #76]	@ (80007bc <ILI9341_WriteImgData+0x5c>)
 8000770:	f004 fa74 	bl	8004c5c <HAL_GPIO_WritePin>
	img_size = buff_size;
 8000774:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <ILI9341_WriteImgData+0x60>)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	6013      	str	r3, [r2, #0]
	pImgData = buff;
 800077a:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <ILI9341_WriteImgData+0x64>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6013      	str	r3, [r2, #0]
	// split data in small chunks because HAL can't send more then 64K at once
	if(img_size > 0) {
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <ILI9341_WriteImgData+0x60>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d014      	beq.n	80007b2 <ILI9341_WriteImgData+0x52>
		chunk_size = img_size > ILI9341_MAX_LENTH ? ILI9341_MAX_LENTH : img_size;
 8000788:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <ILI9341_WriteImgData+0x60>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000790:	4293      	cmp	r3, r2
 8000792:	bf28      	it	cs
 8000794:	4613      	movcs	r3, r2
 8000796:	b29a      	uxth	r2, r3
 8000798:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <ILI9341_WriteImgData+0x68>)
 800079a:	801a      	strh	r2, [r3, #0]
		dma_busy = true;
 800079c:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <ILI9341_WriteImgData+0x6c>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, pImgData, chunk_size);
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <ILI9341_WriteImgData+0x64>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a08      	ldr	r2, [pc, #32]	@ (80007c8 <ILI9341_WriteImgData+0x68>)
 80007a8:	8812      	ldrh	r2, [r2, #0]
 80007aa:	4619      	mov	r1, r3
 80007ac:	4808      	ldr	r0, [pc, #32]	@ (80007d0 <ILI9341_WriteImgData+0x70>)
 80007ae:	f007 fc81 	bl	80080b4 <HAL_SPI_Transmit_DMA>
	}
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	58020400 	.word	0x58020400
 80007c0:	2400008c 	.word	0x2400008c
 80007c4:	24000088 	.word	0x24000088
 80007c8:	24000090 	.word	0x24000090
 80007cc:	24000092 	.word	0x24000092
 80007d0:	24000108 	.word	0x24000108

080007d4 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	2110      	movs	r1, #16
 80007e2:	4811      	ldr	r0, [pc, #68]	@ (8000828 <ILI9341_WriteData+0x54>)
 80007e4:	f004 fa3a 	bl	8004c5c <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more then 64K at once
	while(buff_size > 0) {
 80007e8:	e015      	b.n	8000816 <ILI9341_WriteData+0x42>
		uint16_t chunk_size = buff_size > ILI9341_MAX_LENTH ? ILI9341_MAX_LENTH : buff_size;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f0:	4293      	cmp	r3, r2
 80007f2:	bf28      	it	cs
 80007f4:	4613      	movcs	r3, r2
 80007f6:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80007f8:	89fa      	ldrh	r2, [r7, #14]
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	480a      	ldr	r0, [pc, #40]	@ (800082c <ILI9341_WriteData+0x58>)
 8000802:	f007 fa69 	bl	8007cd8 <HAL_SPI_Transmit>
		buff += chunk_size;
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	4413      	add	r3, r2
 800080c:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800080e:	89fb      	ldrh	r3, [r7, #14]
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	603b      	str	r3, [r7, #0]
	while(buff_size > 0) {
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1e6      	bne.n	80007ea <ILI9341_WriteData+0x16>
	}
}
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	58020400 	.word	0x58020400
 800082c:	24000108 	.word	0x24000108

08000830 <ILI9341_SetAddressWindow>:

void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	4604      	mov	r4, r0
 8000838:	4608      	mov	r0, r1
 800083a:	4611      	mov	r1, r2
 800083c:	461a      	mov	r2, r3
 800083e:	4623      	mov	r3, r4
 8000840:	80fb      	strh	r3, [r7, #6]
 8000842:	4603      	mov	r3, r0
 8000844:	80bb      	strh	r3, [r7, #4]
 8000846:	460b      	mov	r3, r1
 8000848:	807b      	strh	r3, [r7, #2]
 800084a:	4613      	mov	r3, r2
 800084c:	803b      	strh	r3, [r7, #0]
	// column address set
	ILI9341_WriteCommand(0x2A); // CASET
 800084e:	202a      	movs	r0, #42	@ 0x2a
 8000850:	f7ff ff6c 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	0a1b      	lsrs	r3, r3, #8
 8000858:	b29b      	uxth	r3, r3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	733b      	strb	r3, [r7, #12]
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	737b      	strb	r3, [r7, #13]
 8000864:	887b      	ldrh	r3, [r7, #2]
 8000866:	0a1b      	lsrs	r3, r3, #8
 8000868:	b29b      	uxth	r3, r3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73bb      	strb	r3, [r7, #14]
 800086e:	887b      	ldrh	r3, [r7, #2]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	73fb      	strb	r3, [r7, #15]
		ILI9341_WriteData(data, sizeof(data));
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2104      	movs	r1, #4
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ffaa 	bl	80007d4 <ILI9341_WriteData>
	}

	// row address set
	ILI9341_WriteCommand(0x2B); // RASET
 8000880:	202b      	movs	r0, #43	@ 0x2b
 8000882:	f7ff ff53 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000886:	88bb      	ldrh	r3, [r7, #4]
 8000888:	0a1b      	lsrs	r3, r3, #8
 800088a:	b29b      	uxth	r3, r3
 800088c:	b2db      	uxtb	r3, r3
 800088e:	723b      	strb	r3, [r7, #8]
 8000890:	88bb      	ldrh	r3, [r7, #4]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	727b      	strb	r3, [r7, #9]
 8000896:	883b      	ldrh	r3, [r7, #0]
 8000898:	0a1b      	lsrs	r3, r3, #8
 800089a:	b29b      	uxth	r3, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	72bb      	strb	r3, [r7, #10]
 80008a0:	883b      	ldrh	r3, [r7, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	72fb      	strb	r3, [r7, #11]
		ILI9341_WriteData(data, sizeof(data));
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	2104      	movs	r1, #4
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff91 	bl	80007d4 <ILI9341_WriteData>
	}

	// write to RAM
	ILI9341_WriteCommand(0x2C); // RAMWR
 80008b2:	202c      	movs	r0, #44	@ 0x2c
 80008b4:	f7ff ff3a 	bl	800072c <ILI9341_WriteCommand>
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd90      	pop	{r4, r7, pc}

080008c0 <ILI9341_Init>:

void ILI9341_Init() {
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b09b      	sub	sp, #108	@ 0x6c
 80008c4:	af00      	add	r7, sp, #0
	ILI9341_Select();
 80008c6:	f7ff ff03 	bl	80006d0 <ILI9341_Select>
	ILI9341_Reset();
 80008ca:	f7ff ff19 	bl	8000700 <ILI9341_Reset>

	// command list is based on https://github.com/martnak/STM32-ILI9341

	// SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f7ff ff2c 	bl	800072c <ILI9341_WriteCommand>
	HAL_Delay(1000);
 80008d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008d8:	f001 fb2e 	bl	8001f38 <HAL_Delay>

	// POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80008dc:	20cb      	movs	r0, #203	@ 0xcb
 80008de:	f7ff ff25 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80008e2:	4a87      	ldr	r2, [pc, #540]	@ (8000b00 <ILI9341_Init+0x240>)
 80008e4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ec:	6018      	str	r0, [r3, #0]
 80008ee:	3304      	adds	r3, #4
 80008f0:	7019      	strb	r1, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 80008f2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008f6:	2105      	movs	r1, #5
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff6b 	bl	80007d4 <ILI9341_WriteData>
	}

	// POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80008fe:	20cf      	movs	r0, #207	@ 0xcf
 8000900:	f7ff ff14 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000904:	4a7f      	ldr	r2, [pc, #508]	@ (8000b04 <ILI9341_Init+0x244>)
 8000906:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800090a:	6812      	ldr	r2, [r2, #0]
 800090c:	4611      	mov	r1, r2
 800090e:	8019      	strh	r1, [r3, #0]
 8000910:	3302      	adds	r3, #2
 8000912:	0c12      	lsrs	r2, r2, #16
 8000914:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 8000916:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800091a:	2103      	movs	r1, #3
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff59 	bl	80007d4 <ILI9341_WriteData>
	}

	// DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000922:	20e8      	movs	r0, #232	@ 0xe8
 8000924:	f7ff ff02 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000928:	4a77      	ldr	r2, [pc, #476]	@ (8000b08 <ILI9341_Init+0x248>)
 800092a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800092e:	6812      	ldr	r2, [r2, #0]
 8000930:	4611      	mov	r1, r2
 8000932:	8019      	strh	r1, [r3, #0]
 8000934:	3302      	adds	r3, #2
 8000936:	0c12      	lsrs	r2, r2, #16
 8000938:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 800093a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800093e:	2103      	movs	r1, #3
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff47 	bl	80007d4 <ILI9341_WriteData>
	}

	// DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000946:	20ea      	movs	r0, #234	@ 0xea
 8000948:	f7ff fef0 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x00 };
 800094c:	2300      	movs	r3, #0
 800094e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		ILI9341_WriteData(data, sizeof(data));
 8000952:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000956:	2102      	movs	r1, #2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff3b 	bl	80007d4 <ILI9341_WriteData>
	}

	// POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 800095e:	20ed      	movs	r0, #237	@ 0xed
 8000960:	f7ff fee4 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000964:	4b69      	ldr	r3, [pc, #420]	@ (8000b0c <ILI9341_Init+0x24c>)
 8000966:	653b      	str	r3, [r7, #80]	@ 0x50
		ILI9341_WriteData(data, sizeof(data));
 8000968:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800096c:	2104      	movs	r1, #4
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff30 	bl	80007d4 <ILI9341_WriteData>
	}

	// PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000974:	20f7      	movs	r0, #247	@ 0xf7
 8000976:	f7ff fed9 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x20 };
 800097a:	2320      	movs	r3, #32
 800097c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		ILI9341_WriteData(data, sizeof(data));
 8000980:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000984:	2101      	movs	r1, #1
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff24 	bl	80007d4 <ILI9341_WriteData>
	}

	// POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 800098c:	20c0      	movs	r0, #192	@ 0xc0
 800098e:	f7ff fecd 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x23 };
 8000992:	2323      	movs	r3, #35	@ 0x23
 8000994:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
		ILI9341_WriteData(data, sizeof(data));
 8000998:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800099c:	2101      	movs	r1, #1
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff18 	bl	80007d4 <ILI9341_WriteData>
	}

	// POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 80009a4:	20c1      	movs	r0, #193	@ 0xc1
 80009a6:	f7ff fec1 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x10 };
 80009aa:	2310      	movs	r3, #16
 80009ac:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
		ILI9341_WriteData(data, sizeof(data));
 80009b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80009b4:	2101      	movs	r1, #1
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff0c 	bl	80007d4 <ILI9341_WriteData>
	}

	// VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 80009bc:	20c5      	movs	r0, #197	@ 0xc5
 80009be:	f7ff feb5 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x3E, 0x28 };
 80009c2:	f642 033e 	movw	r3, #10302	@ 0x283e
 80009c6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
		ILI9341_WriteData(data, sizeof(data));
 80009ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009ce:	2102      	movs	r1, #2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff feff 	bl	80007d4 <ILI9341_WriteData>
	}

	// VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 80009d6:	20c7      	movs	r0, #199	@ 0xc7
 80009d8:	f7ff fea8 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x86 };
 80009dc:	2386      	movs	r3, #134	@ 0x86
 80009de:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
		ILI9341_WriteData(data, sizeof(data));
 80009e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80009e6:	2101      	movs	r1, #1
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fef3 	bl	80007d4 <ILI9341_WriteData>
	}

	// MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 80009ee:	2036      	movs	r0, #54	@ 0x36
 80009f0:	f7ff fe9c 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x48 };
 80009f4:	2348      	movs	r3, #72	@ 0x48
 80009f6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
		ILI9341_WriteData(data, sizeof(data));
 80009fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009fe:	2101      	movs	r1, #1
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fee7 	bl	80007d4 <ILI9341_WriteData>
	}

	// PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000a06:	203a      	movs	r0, #58	@ 0x3a
 8000a08:	f7ff fe90 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x55 };
 8000a0c:	2355      	movs	r3, #85	@ 0x55
 8000a0e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
		ILI9341_WriteData(data, sizeof(data));
 8000a12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a16:	2101      	movs	r1, #1
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fedb 	bl	80007d4 <ILI9341_WriteData>
	}

	// FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000a1e:	20b1      	movs	r0, #177	@ 0xb1
 8000a20:	f7ff fe84 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x18 };
 8000a24:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a28:	863b      	strh	r3, [r7, #48]	@ 0x30
		ILI9341_WriteData(data, sizeof(data));
 8000a2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a2e:	2102      	movs	r1, #2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fecf 	bl	80007d4 <ILI9341_WriteData>
	}

	// DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000a36:	20b6      	movs	r0, #182	@ 0xb6
 8000a38:	f7ff fe78 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x08, 0x82, 0x27 };
 8000a3c:	4a34      	ldr	r2, [pc, #208]	@ (8000b10 <ILI9341_Init+0x250>)
 8000a3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a42:	6812      	ldr	r2, [r2, #0]
 8000a44:	4611      	mov	r1, r2
 8000a46:	8019      	strh	r1, [r3, #0]
 8000a48:	3302      	adds	r3, #2
 8000a4a:	0c12      	lsrs	r2, r2, #16
 8000a4c:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 8000a4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a52:	2103      	movs	r1, #3
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff febd 	bl	80007d4 <ILI9341_WriteData>
	}

	// 3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000a5a:	20f2      	movs	r0, #242	@ 0xf2
 8000a5c:	f7ff fe66 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00 };
 8000a60:	2300      	movs	r3, #0
 8000a62:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		ILI9341_WriteData(data, sizeof(data));
 8000a66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff feb1 	bl	80007d4 <ILI9341_WriteData>
	}

	// GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000a72:	2026      	movs	r0, #38	@ 0x26
 8000a74:	f7ff fe5a 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x01 };
 8000a78:	2301      	movs	r3, #1
 8000a7a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		ILI9341_WriteData(data, sizeof(data));
 8000a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a82:	2101      	movs	r1, #1
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fea5 	bl	80007d4 <ILI9341_WriteData>
	}

	// POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000a8a:	20e0      	movs	r0, #224	@ 0xe0
 8000a8c:	f7ff fe4e 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000a90:	4b20      	ldr	r3, [pc, #128]	@ (8000b14 <ILI9341_Init+0x254>)
 8000a92:	f107 0414 	add.w	r4, r7, #20
 8000a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a98:	c407      	stmia	r4!, {r0, r1, r2}
 8000a9a:	8023      	strh	r3, [r4, #0]
 8000a9c:	3402      	adds	r4, #2
 8000a9e:	0c1b      	lsrs	r3, r3, #16
 8000aa0:	7023      	strb	r3, [r4, #0]
				0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
		ILI9341_WriteData(data, sizeof(data));
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fe93 	bl	80007d4 <ILI9341_WriteData>
	}

	// NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000aae:	20e1      	movs	r0, #225	@ 0xe1
 8000ab0:	f7ff fe3c 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <ILI9341_Init+0x258>)
 8000ab6:	1d3c      	adds	r4, r7, #4
 8000ab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aba:	c407      	stmia	r4!, {r0, r1, r2}
 8000abc:	8023      	strh	r3, [r4, #0]
 8000abe:	3402      	adds	r4, #2
 8000ac0:	0c1b      	lsrs	r3, r3, #16
 8000ac2:	7023      	strb	r3, [r4, #0]
				0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
		ILI9341_WriteData(data, sizeof(data));
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fe83 	bl	80007d4 <ILI9341_WriteData>
	}

	// EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000ace:	2011      	movs	r0, #17
 8000ad0:	f7ff fe2c 	bl	800072c <ILI9341_WriteCommand>
	HAL_Delay(120);
 8000ad4:	2078      	movs	r0, #120	@ 0x78
 8000ad6:	f001 fa2f 	bl	8001f38 <HAL_Delay>

	// TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000ada:	2029      	movs	r0, #41	@ 0x29
 8000adc:	f7ff fe26 	bl	800072c <ILI9341_WriteCommand>

	// MADCTL
	ILI9341_WriteCommand(0x36);
 8000ae0:	2036      	movs	r0, #54	@ 0x36
 8000ae2:	f7ff fe23 	bl	800072c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { ILI9341_ROTATION };
 8000ae6:	2348      	movs	r3, #72	@ 0x48
 8000ae8:	703b      	strb	r3, [r7, #0]
		ILI9341_WriteData(data, sizeof(data));
 8000aea:	463b      	mov	r3, r7
 8000aec:	2101      	movs	r1, #1
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fe70 	bl	80007d4 <ILI9341_WriteData>
	}

	ILI9341_Unselect();
 8000af4:	f7ff fdf8 	bl	80006e8 <ILI9341_Unselect>
}
 8000af8:	bf00      	nop
 8000afa:	376c      	adds	r7, #108	@ 0x6c
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	0800a85c 	.word	0x0800a85c
 8000b04:	0800a864 	.word	0x0800a864
 8000b08:	0800a868 	.word	0x0800a868
 8000b0c:	81120364 	.word	0x81120364
 8000b10:	0800a86c 	.word	0x0800a86c
 8000b14:	0800a870 	.word	0x0800a870
 8000b18:	0800a880 	.word	0x0800a880

08000b1c <ILI9341_DrawImage>:

void ILI9341_FillScreen(uint16_t color) {
	ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
}

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b087      	sub	sp, #28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4604      	mov	r4, r0
 8000b24:	4608      	mov	r0, r1
 8000b26:	4611      	mov	r1, r2
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4623      	mov	r3, r4
 8000b2c:	80fb      	strh	r3, [r7, #6]
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80bb      	strh	r3, [r7, #4]
 8000b32:	460b      	mov	r3, r1
 8000b34:	807b      	strh	r3, [r7, #2]
 8000b36:	4613      	mov	r3, r2
 8000b38:	803b      	strh	r3, [r7, #0]
	LCD_Request_t lcd_data;
	if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	2bef      	cmp	r3, #239	@ 0xef
 8000b3e:	d849      	bhi.n	8000bd4 <ILI9341_DrawImage+0xb8>
 8000b40:	88bb      	ldrh	r3, [r7, #4]
 8000b42:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b46:	d245      	bcs.n	8000bd4 <ILI9341_DrawImage+0xb8>
	if((x + w - 1) >= ILI9341_WIDTH) return;
 8000b48:	88fa      	ldrh	r2, [r7, #6]
 8000b4a:	887b      	ldrh	r3, [r7, #2]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	2bf0      	cmp	r3, #240	@ 0xf0
 8000b50:	dc42      	bgt.n	8000bd8 <ILI9341_DrawImage+0xbc>
	if((y + h - 1) >= ILI9341_HEIGHT) return;
 8000b52:	88ba      	ldrh	r2, [r7, #4]
 8000b54:	883b      	ldrh	r3, [r7, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b5c:	dc3e      	bgt.n	8000bdc <ILI9341_DrawImage+0xc0>

	ILI9341_Select();
 8000b5e:	f7ff fdb7 	bl	80006d0 <ILI9341_Select>
//	ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
	if(dma_busy == false)
 8000b62:	4b20      	ldr	r3, [pc, #128]	@ (8000be4 <ILI9341_DrawImage+0xc8>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	f083 0301 	eor.w	r3, r3, #1
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d01a      	beq.n	8000ba6 <ILI9341_DrawImage+0x8a>
	{
	ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b70:	88fa      	ldrh	r2, [r7, #6]
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	4413      	add	r3, r2
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	b29c      	uxth	r4, r3
 8000b7c:	88ba      	ldrh	r2, [r7, #4]
 8000b7e:	883b      	ldrh	r3, [r7, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	3b01      	subs	r3, #1
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	88b9      	ldrh	r1, [r7, #4]
 8000b8a:	88f8      	ldrh	r0, [r7, #6]
 8000b8c:	4622      	mov	r2, r4
 8000b8e:	f7ff fe4f 	bl	8000830 <ILI9341_SetAddressWindow>
	ILI9341_WriteImgData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	883a      	ldrh	r2, [r7, #0]
 8000b96:	fb02 f303 	mul.w	r3, r2, r3
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ba0:	f7ff fdde 	bl	8000760 <ILI9341_WriteImgData>
 8000ba4:	e01b      	b.n	8000bde <ILI9341_DrawImage+0xc2>
	}

	else
	{
		lcd_data.data = (uint8_t*)data;
 8000ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba8:	60bb      	str	r3, [r7, #8]
		lcd_data.size =  sizeof(uint16_t)*w*h;
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	883a      	ldrh	r2, [r7, #0]
 8000bae:	fb02 f303 	mul.w	r3, r2, r3
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
		lcd_data.x = x;
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	81bb      	strh	r3, [r7, #12]
		lcd_data.y = y;
 8000bba:	88bb      	ldrh	r3, [r7, #4]
 8000bbc:	81fb      	strh	r3, [r7, #14]
		lcd_data.w = w;
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	823b      	strh	r3, [r7, #16]
		lcd_data.h = h;
 8000bc2:	883b      	ldrh	r3, [r7, #0]
 8000bc4:	827b      	strh	r3, [r7, #18]
	    enQue(&LCD_Que,&lcd_data);
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <ILI9341_DrawImage+0xcc>)
 8000bce:	f000 fd25 	bl	800161c <enQue>
 8000bd2:	e004      	b.n	8000bde <ILI9341_DrawImage+0xc2>
	if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000bd4:	bf00      	nop
 8000bd6:	e002      	b.n	8000bde <ILI9341_DrawImage+0xc2>
	if((x + w - 1) >= ILI9341_WIDTH) return;
 8000bd8:	bf00      	nop
 8000bda:	e000      	b.n	8000bde <ILI9341_DrawImage+0xc2>
	if((y + h - 1) >= ILI9341_HEIGHT) return;
 8000bdc:	bf00      	nop
	}

//	ILI9341_Unselect();
}
 8000bde:	371c      	adds	r7, #28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd90      	pop	{r4, r7, pc}
 8000be4:	24000092 	.word	0x24000092
 8000be8:	240000dc 	.word	0x240000dc

08000bec <ILI9341_DrawImage8>:

void ILI9341_DrawImage8(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint8_t* data) {
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	80fb      	strh	r3, [r7, #6]
 8000bfe:	4603      	mov	r3, r0
 8000c00:	80bb      	strh	r3, [r7, #4]
 8000c02:	460b      	mov	r3, r1
 8000c04:	807b      	strh	r3, [r7, #2]
 8000c06:	4613      	mov	r3, r2
 8000c08:	803b      	strh	r3, [r7, #0]
	LCD_Request_t lcd_data;
	if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	2bef      	cmp	r3, #239	@ 0xef
 8000c0e:	d849      	bhi.n	8000ca4 <ILI9341_DrawImage8+0xb8>
 8000c10:	88bb      	ldrh	r3, [r7, #4]
 8000c12:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000c16:	d245      	bcs.n	8000ca4 <ILI9341_DrawImage8+0xb8>
	if((x + w - 1) >= ILI9341_WIDTH) return;
 8000c18:	88fa      	ldrh	r2, [r7, #6]
 8000c1a:	887b      	ldrh	r3, [r7, #2]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	2bf0      	cmp	r3, #240	@ 0xf0
 8000c20:	dc42      	bgt.n	8000ca8 <ILI9341_DrawImage8+0xbc>
	if((y + h - 1) >= ILI9341_HEIGHT) return;
 8000c22:	88ba      	ldrh	r2, [r7, #4]
 8000c24:	883b      	ldrh	r3, [r7, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000c2c:	dc3e      	bgt.n	8000cac <ILI9341_DrawImage8+0xc0>
//	ILI9341_WriteData((uint8_t*)data, w*h*2);
	ILI9341_Select();
 8000c2e:	f7ff fd4f 	bl	80006d0 <ILI9341_Select>
	if(dma_busy == false)
 8000c32:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <ILI9341_DrawImage8+0xc8>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	f083 0301 	eor.w	r3, r3, #1
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d01a      	beq.n	8000c76 <ILI9341_DrawImage8+0x8a>
	{
	ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000c40:	88fa      	ldrh	r2, [r7, #6]
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	4413      	add	r3, r2
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	b29c      	uxth	r4, r3
 8000c4c:	88ba      	ldrh	r2, [r7, #4]
 8000c4e:	883b      	ldrh	r3, [r7, #0]
 8000c50:	4413      	add	r3, r2
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	3b01      	subs	r3, #1
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	88b9      	ldrh	r1, [r7, #4]
 8000c5a:	88f8      	ldrh	r0, [r7, #6]
 8000c5c:	4622      	mov	r2, r4
 8000c5e:	f7ff fde7 	bl	8000830 <ILI9341_SetAddressWindow>
	ILI9341_WriteImgData((uint8_t*)data, w*h*2);
 8000c62:	887b      	ldrh	r3, [r7, #2]
 8000c64:	883a      	ldrh	r2, [r7, #0]
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c70:	f7ff fd76 	bl	8000760 <ILI9341_WriteImgData>
 8000c74:	e01b      	b.n	8000cae <ILI9341_DrawImage8+0xc2>
	}
	else
	{
		lcd_data.data = (uint8_t*)data;
 8000c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c78:	60bb      	str	r3, [r7, #8]
		lcd_data.size =  w*h*2;
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	883a      	ldrh	r2, [r7, #0]
 8000c7e:	fb02 f303 	mul.w	r3, r2, r3
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
		lcd_data.x = x;
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	81bb      	strh	r3, [r7, #12]
		lcd_data.y = y;
 8000c8a:	88bb      	ldrh	r3, [r7, #4]
 8000c8c:	81fb      	strh	r3, [r7, #14]
		lcd_data.w = w;
 8000c8e:	887b      	ldrh	r3, [r7, #2]
 8000c90:	823b      	strh	r3, [r7, #16]
		lcd_data.h = h;
 8000c92:	883b      	ldrh	r3, [r7, #0]
 8000c94:	827b      	strh	r3, [r7, #18]
	    enQue(&LCD_Que,&lcd_data);
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4806      	ldr	r0, [pc, #24]	@ (8000cb8 <ILI9341_DrawImage8+0xcc>)
 8000c9e:	f000 fcbd 	bl	800161c <enQue>
 8000ca2:	e004      	b.n	8000cae <ILI9341_DrawImage8+0xc2>
	if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000ca4:	bf00      	nop
 8000ca6:	e002      	b.n	8000cae <ILI9341_DrawImage8+0xc2>
	if((x + w - 1) >= ILI9341_WIDTH) return;
 8000ca8:	bf00      	nop
 8000caa:	e000      	b.n	8000cae <ILI9341_DrawImage8+0xc2>
	if((y + h - 1) >= ILI9341_HEIGHT) return;
 8000cac:	bf00      	nop
	}


//	ILI9341_Unselect();
}
 8000cae:	371c      	adds	r7, #28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	24000092 	.word	0x24000092
 8000cb8:	240000dc 	.word	0x240000dc

08000cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <MX_DMA_Init+0x3c>)
 8000cc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf8 <MX_DMA_Init+0x3c>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <MX_DMA_Init+0x3c>)
 8000cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	200b      	movs	r0, #11
 8000ce6:	f001 fa32 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cea:	200b      	movs	r0, #11
 8000cec:	f001 fa49 	bl	8002182 <HAL_NVIC_EnableIRQ>

}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	58024400 	.word	0x58024400

08000cfc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]
 8000d12:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <MX_FMC_Init+0x98>)
 8000d16:	4a20      	ldr	r2, [pc, #128]	@ (8000d98 <MX_FMC_Init+0x9c>)
 8000d18:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <MX_FMC_Init+0x98>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000d20:	4b1c      	ldr	r3, [pc, #112]	@ (8000d94 <MX_FMC_Init+0x98>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000d26:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <MX_FMC_Init+0x98>)
 8000d28:	2208      	movs	r2, #8
 8000d2a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000d2c:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <MX_FMC_Init+0x98>)
 8000d2e:	2210      	movs	r2, #16
 8000d30:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <MX_FMC_Init+0x98>)
 8000d34:	2240      	movs	r2, #64	@ 0x40
 8000d36:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000d38:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <MX_FMC_Init+0x98>)
 8000d3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d3e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000d40:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <MX_FMC_Init+0x98>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <MX_FMC_Init+0x98>)
 8000d48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d4c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <MX_FMC_Init+0x98>)
 8000d50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d54:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000d56:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <MX_FMC_Init+0x98>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 8000d60:	2309      	movs	r3, #9
 8000d62:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 8000d64:	2306      	movs	r3, #6
 8000d66:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 8;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 8000d70:	2303      	movs	r3, #3
 8000d72:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 8000d74:	2303      	movs	r3, #3
 8000d76:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_FMC_Init+0x98>)
 8000d7e:	f006 fded 	bl	800795c <HAL_SDRAM_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000d88:	f000 fbeb 	bl	8001562 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000d8c:	bf00      	nop
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	24000094 	.word	0x24000094
 8000d98:	52004140 	.word	0x52004140

08000d9c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0b8      	sub	sp, #224	@ 0xe0
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000db2:	4b5b      	ldr	r3, [pc, #364]	@ (8000f20 <HAL_FMC_MspInit+0x184>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f040 80ae 	bne.w	8000f18 <HAL_FMC_MspInit+0x17c>
    return;
  }
  FMC_Initialized = 1;
 8000dbc:	4b58      	ldr	r3, [pc, #352]	@ (8000f20 <HAL_FMC_MspInit+0x184>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	22c0      	movs	r2, #192	@ 0xc0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f009 fb26 	bl	800a41c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000dd0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de0:	f107 0308 	add.w	r3, r7, #8
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 ff8d 	bl	8005d04 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000df0:	f000 fbb7 	bl	8001562 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000df4:	4b4b      	ldr	r3, [pc, #300]	@ (8000f24 <HAL_FMC_MspInit+0x188>)
 8000df6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000dfa:	4a4a      	ldr	r2, [pc, #296]	@ (8000f24 <HAL_FMC_MspInit+0x188>)
 8000dfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e00:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000e04:	4b47      	ldr	r3, [pc, #284]	@ (8000f24 <HAL_FMC_MspInit+0x188>)
 8000e06:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PD8   ------> FMC_D13
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000e12:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000e16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e2c:	230c      	movs	r3, #12
 8000e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e32:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e36:	4619      	mov	r1, r3
 8000e38:	483b      	ldr	r0, [pc, #236]	@ (8000f28 <HAL_FMC_MspInit+0x18c>)
 8000e3a:	f003 fd5f 	bl	80048fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000e3e:	f248 1337 	movw	r3, #33079	@ 0x8137
 8000e42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e58:	230c      	movs	r3, #12
 8000e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e5e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e62:	4619      	mov	r1, r3
 8000e64:	4831      	ldr	r0, [pc, #196]	@ (8000f2c <HAL_FMC_MspInit+0x190>)
 8000e66:	f003 fd49 	bl	80048fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000e6a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000e6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e84:	230c      	movs	r3, #12
 8000e86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4827      	ldr	r0, [pc, #156]	@ (8000f30 <HAL_FMC_MspInit+0x194>)
 8000e92:	f003 fd33 	bl	80048fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000e96:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000e9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eb0:	230c      	movs	r3, #12
 8000eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eb6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000eba:	4619      	mov	r1, r3
 8000ebc:	481d      	ldr	r0, [pc, #116]	@ (8000f34 <HAL_FMC_MspInit+0x198>)
 8000ebe:	f003 fd1d 	bl	80048fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eda:	230c      	movs	r3, #12
 8000edc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4814      	ldr	r0, [pc, #80]	@ (8000f38 <HAL_FMC_MspInit+0x19c>)
 8000ee8:	f003 fd08 	bl	80048fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eec:	230c      	movs	r3, #12
 8000eee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f04:	230c      	movs	r3, #12
 8000f06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f0a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480a      	ldr	r0, [pc, #40]	@ (8000f3c <HAL_FMC_MspInit+0x1a0>)
 8000f12:	f003 fcf3 	bl	80048fc <HAL_GPIO_Init>
 8000f16:	e000      	b.n	8000f1a <HAL_FMC_MspInit+0x17e>
    return;
 8000f18:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f1a:	37e0      	adds	r7, #224	@ 0xe0
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	240000c8 	.word	0x240000c8
 8000f24:	58024400 	.word	0x58024400
 8000f28:	58021000 	.word	0x58021000
 8000f2c:	58021800 	.word	0x58021800
 8000f30:	58020c00 	.word	0x58020c00
 8000f34:	58021400 	.word	0x58021400
 8000f38:	58020800 	.word	0x58020800
 8000f3c:	58021c00 	.word	0x58021c00

08000f40 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f48:	f7ff ff28 	bl	8000d9c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08e      	sub	sp, #56	@ 0x38
 8000f58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6a:	4b66      	ldr	r3, [pc, #408]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f70:	4a64      	ldr	r2, [pc, #400]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8000f72:	f043 0310 	orr.w	r3, r3, #16
 8000f76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7a:	4b62      	ldr	r3, [pc, #392]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f80:	f003 0310 	and.w	r3, r3, #16
 8000f84:	623b      	str	r3, [r7, #32]
 8000f86:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f88:	4b5e      	ldr	r3, [pc, #376]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a5d      	ldr	r2, [pc, #372]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b5a      	ldr	r3, [pc, #360]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b57      	ldr	r3, [pc, #348]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fac:	4a55      	ldr	r2, [pc, #340]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb6:	4b53      	ldr	r3, [pc, #332]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc4:	4b4f      	ldr	r3, [pc, #316]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fca:	4a4e      	ldr	r2, [pc, #312]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8000fcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	4b48      	ldr	r3, [pc, #288]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe8:	4a46      	ldr	r2, [pc, #280]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8000fea:	f043 0308 	orr.w	r3, r3, #8
 8000fee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff2:	4b44      	ldr	r3, [pc, #272]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001000:	4b40      	ldr	r3, [pc, #256]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001006:	4a3f      	ldr	r2, [pc, #252]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001010:	4b3c      	ldr	r3, [pc, #240]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800101e:	4b39      	ldr	r3, [pc, #228]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001024:	4a37      	ldr	r2, [pc, #220]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8001026:	f043 0320 	orr.w	r3, r3, #32
 800102a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800102e:	4b35      	ldr	r3, [pc, #212]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001034:	f003 0320 	and.w	r3, r3, #32
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103c:	4b31      	ldr	r3, [pc, #196]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001042:	4a30      	ldr	r2, [pc, #192]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 8001044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001048:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800104c:	4b2d      	ldr	r3, [pc, #180]	@ (8001104 <MX_GPIO_Init+0x1b0>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2110      	movs	r1, #16
 800105e:	482a      	ldr	r0, [pc, #168]	@ (8001108 <MX_GPIO_Init+0x1b4>)
 8001060:	f003 fdfc 	bl	8004c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800106a:	4828      	ldr	r0, [pc, #160]	@ (800110c <MX_GPIO_Init+0x1b8>)
 800106c:	f003 fdf6 	bl	8004c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001076:	4826      	ldr	r0, [pc, #152]	@ (8001110 <MX_GPIO_Init+0x1bc>)
 8001078:	f003 fdf0 	bl	8004c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2140      	movs	r1, #64	@ 0x40
 8001080:	4824      	ldr	r0, [pc, #144]	@ (8001114 <MX_GPIO_Init+0x1c0>)
 8001082:	f003 fdeb 	bl	8004c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ILI9341_DC_Pin */
  GPIO_InitStruct.Pin = ILI9341_DC_Pin;
 8001086:	2310      	movs	r3, #16
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ILI9341_DC_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109a:	4619      	mov	r1, r3
 800109c:	481a      	ldr	r0, [pc, #104]	@ (8001108 <MX_GPIO_Init+0x1b4>)
 800109e:	f003 fc2d 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ILI9341_RES_Pin */
  GPIO_InitStruct.Pin = ILI9341_RES_Pin;
 80010a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ILI9341_RES_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b8:	4619      	mov	r1, r3
 80010ba:	4814      	ldr	r0, [pc, #80]	@ (800110c <MX_GPIO_Init+0x1b8>)
 80010bc:	f003 fc1e 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d6:	4619      	mov	r1, r3
 80010d8:	480d      	ldr	r0, [pc, #52]	@ (8001110 <MX_GPIO_Init+0x1bc>)
 80010da:	f003 fc0f 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ILI9341_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_CS_Pin;
 80010de:	2340      	movs	r3, #64	@ 0x40
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ILI9341_CS_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f2:	4619      	mov	r1, r3
 80010f4:	4807      	ldr	r0, [pc, #28]	@ (8001114 <MX_GPIO_Init+0x1c0>)
 80010f6:	f003 fc01 	bl	80048fc <HAL_GPIO_Init>

}
 80010fa:	bf00      	nop
 80010fc:	3738      	adds	r7, #56	@ 0x38
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	58024400 	.word	0x58024400
 8001108:	58020400 	.word	0x58020400
 800110c:	58021800 	.word	0x58021800
 8001110:	58020800 	.word	0x58020800
 8001114:	58021000 	.word	0x58021000

08001118 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 8001120:	1d39      	adds	r1, r7, #4
 8001122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001126:	2201      	movs	r2, #1
 8001128:	4803      	ldr	r0, [pc, #12]	@ (8001138 <__io_putchar+0x20>)
 800112a:	f007 fcac 	bl	8008a86 <HAL_UART_Transmit>

	return ch;
 800112e:	687b      	ldr	r3, [r7, #4]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2400020c 	.word	0x2400020c

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001142:	f000 f9d1 	bl	80014e8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001146:	4b62      	ldr	r3, [pc, #392]	@ (80012d0 <main+0x194>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d11b      	bne.n	800118a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800115e:	4b5c      	ldr	r3, [pc, #368]	@ (80012d0 <main+0x194>)
 8001160:	2200      	movs	r2, #0
 8001162:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001166:	f3bf 8f4f 	dsb	sy
}
 800116a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800116c:	f3bf 8f6f 	isb	sy
}
 8001170:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001172:	4b57      	ldr	r3, [pc, #348]	@ (80012d0 <main+0x194>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	4a56      	ldr	r2, [pc, #344]	@ (80012d0 <main+0x194>)
 8001178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800117c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800117e:	f3bf 8f4f 	dsb	sy
}
 8001182:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001184:	f3bf 8f6f 	isb	sy
}
 8001188:	e000      	b.n	800118c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800118a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800118c:	4b50      	ldr	r3, [pc, #320]	@ (80012d0 <main+0x194>)
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d138      	bne.n	800120a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001198:	4b4d      	ldr	r3, [pc, #308]	@ (80012d0 <main+0x194>)
 800119a:	2200      	movs	r2, #0
 800119c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80011a0:	f3bf 8f4f 	dsb	sy
}
 80011a4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80011a6:	4b4a      	ldr	r3, [pc, #296]	@ (80012d0 <main+0x194>)
 80011a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011ac:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	0b5b      	lsrs	r3, r3, #13
 80011b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011b6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	08db      	lsrs	r3, r3, #3
 80011bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011c0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	015a      	lsls	r2, r3, #5
 80011c6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80011ca:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011d0:	493f      	ldr	r1, [pc, #252]	@ (80012d0 <main+0x194>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	1e5a      	subs	r2, r3, #1
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1ef      	bne.n	80011c2 <main+0x86>
    } while(sets-- != 0U);
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1e5a      	subs	r2, r3, #1
 80011e6:	60ba      	str	r2, [r7, #8]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e5      	bne.n	80011b8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80011ec:	f3bf 8f4f 	dsb	sy
}
 80011f0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80011f2:	4b37      	ldr	r3, [pc, #220]	@ (80012d0 <main+0x194>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4a36      	ldr	r2, [pc, #216]	@ (80012d0 <main+0x194>)
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011fe:	f3bf 8f4f 	dsb	sy
}
 8001202:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001204:	f3bf 8f6f 	isb	sy
}
 8001208:	e000      	b.n	800120c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800120a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120c:	f000 fe02 	bl	8001e14 <HAL_Init>

  /* USER CODE BEGIN Init */

  Que_Init(&LCD_Que, sizeof(LCD_Request_t));
 8001210:	2110      	movs	r1, #16
 8001212:	4830      	ldr	r0, [pc, #192]	@ (80012d4 <main+0x198>)
 8001214:	f000 f9ab 	bl	800156e <Que_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001218:	f000 f868 	bl	80012ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121c:	f7ff fe9a 	bl	8000f54 <MX_GPIO_Init>
  MX_DMA_Init();
 8001220:	f7ff fd4c 	bl	8000cbc <MX_DMA_Init>
  MX_SPI1_Init();
 8001224:	f000 fa50 	bl	80016c8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001228:	f000 fd12 	bl	8001c50 <MX_USART1_UART_Init>
  MX_FMC_Init();
 800122c:	f7ff fd66 	bl	8000cfc <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  SDRAM_initialize();
 8001230:	f000 f8d6 	bl	80013e0 <SDRAM_initialize>
  ILI9341_Init();
 8001234:	f7ff fb44 	bl	80008c0 <ILI9341_Init>
  printf("Hello STM32!\n");
 8001238:	4827      	ldr	r0, [pc, #156]	@ (80012d8 <main+0x19c>)
 800123a:	f009 f80f 	bl	800a25c <puts>

  uint8_t *sdramAddr = (uint32_t*) 0xC0000000;
 800123e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001242:	613b      	str	r3, [r7, #16]

  for(uint32_t i = 0; i<320*240*2; i++){
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	e00a      	b.n	8001260 <main+0x124>
	  sdramAddr[i] = pic_240x320[i];
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	4413      	add	r3, r2
 8001250:	4922      	ldr	r1, [pc, #136]	@ (80012dc <main+0x1a0>)
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	440a      	add	r2, r1
 8001256:	7812      	ldrb	r2, [r2, #0]
 8001258:	701a      	strb	r2, [r3, #0]
  for(uint32_t i = 0; i<320*240*2; i++){
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f5b3 3f16 	cmp.w	r3, #153600	@ 0x25800
 8001266:	d3f0      	bcc.n	800124a <main+0x10e>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001268:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800126c:	481c      	ldr	r0, [pc, #112]	@ (80012e0 <main+0x1a4>)
 800126e:	f003 fd0e 	bl	8004c8e <HAL_GPIO_TogglePin>
	  ILI9341_DrawImage8(0,0,240,320,(const uint8_t *)sdramAddr);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800127a:	22f0      	movs	r2, #240	@ 0xf0
 800127c:	2100      	movs	r1, #0
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff fcb4 	bl	8000bec <ILI9341_DrawImage8>
	  ILI9341_DrawImage((ILI9341_WIDTH - 240)/2, (ILI9341_WIDTH - 240)/2, 240, 240, (const uint16_t *)test_img_240x240);
 8001284:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <main+0x1a8>)
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	23f0      	movs	r3, #240	@ 0xf0
 800128a:	22f0      	movs	r2, #240	@ 0xf0
 800128c:	2100      	movs	r1, #0
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff fc44 	bl	8000b1c <ILI9341_DrawImage>
	  ILI9341_DrawImage8((ILI9341_WIDTH - 120)/2, (ILI9341_HEIGHT - 160)/2, 48, 48, (const uint8_t *)IMG_icons8_instagram_logo_48);
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <main+0x1ac>)
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2330      	movs	r3, #48	@ 0x30
 800129a:	2230      	movs	r2, #48	@ 0x30
 800129c:	2150      	movs	r1, #80	@ 0x50
 800129e:	203c      	movs	r0, #60	@ 0x3c
 80012a0:	f7ff fca4 	bl	8000bec <ILI9341_DrawImage8>
	  ILI9341_DrawImage8(30, 50, 48, 48, (const uint8_t *)IMG_icons8_instagram_logo_48);
 80012a4:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <main+0x1ac>)
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2330      	movs	r3, #48	@ 0x30
 80012aa:	2230      	movs	r2, #48	@ 0x30
 80012ac:	2132      	movs	r1, #50	@ 0x32
 80012ae:	201e      	movs	r0, #30
 80012b0:	f7ff fc9c 	bl	8000bec <ILI9341_DrawImage8>
	  ILI9341_DrawImage8(70, 150, 48, 48, (const uint8_t *)IMG_icons8_instagram_logo_48);
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <main+0x1ac>)
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2330      	movs	r3, #48	@ 0x30
 80012ba:	2230      	movs	r2, #48	@ 0x30
 80012bc:	2196      	movs	r1, #150	@ 0x96
 80012be:	2046      	movs	r0, #70	@ 0x46
 80012c0:	f7ff fc94 	bl	8000bec <ILI9341_DrawImage8>
	  HAL_Delay(5000);//	  ILI9341_WriteString(0, 200, "JAEHOON", Font_16x26, ILI9341_BLUE, ILI9341_BLACK);
 80012c4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80012c8:	f000 fe36 	bl	8001f38 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80012cc:	bf00      	nop
 80012ce:	e7cb      	b.n	8001268 <main+0x12c>
 80012d0:	e000ed00 	.word	0xe000ed00
 80012d4:	240000dc 	.word	0x240000dc
 80012d8:	0800a890 	.word	0x0800a890
 80012dc:	08026aa0 	.word	0x08026aa0
 80012e0:	58020800 	.word	0x58020800
 80012e4:	0800a8a0 	.word	0x0800a8a0
 80012e8:	0804c2a0 	.word	0x0804c2a0

080012ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b09c      	sub	sp, #112	@ 0x70
 80012f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f6:	224c      	movs	r2, #76	@ 0x4c
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f009 f88e 	bl	800a41c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2220      	movs	r2, #32
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f009 f888 	bl	800a41c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800130c:	2002      	movs	r0, #2
 800130e:	f003 fcd9 	bl	8004cc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b30      	ldr	r3, [pc, #192]	@ (80013d8 <SystemClock_Config+0xec>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	4a2f      	ldr	r2, [pc, #188]	@ (80013d8 <SystemClock_Config+0xec>)
 800131c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001320:	6193      	str	r3, [r2, #24]
 8001322:	4b2d      	ldr	r3, [pc, #180]	@ (80013d8 <SystemClock_Config+0xec>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <SystemClock_Config+0xf0>)
 800132e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001330:	4a2a      	ldr	r2, [pc, #168]	@ (80013dc <SystemClock_Config+0xf0>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001338:	4b28      	ldr	r3, [pc, #160]	@ (80013dc <SystemClock_Config+0xf0>)
 800133a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001344:	bf00      	nop
 8001346:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <SystemClock_Config+0xec>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800134e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001352:	d1f8      	bne.n	8001346 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001354:	2301      	movs	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001358:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	2302      	movs	r3, #2
 8001360:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001362:	2302      	movs	r3, #2
 8001364:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001366:	2305      	movs	r3, #5
 8001368:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 800136a:	23c0      	movs	r3, #192	@ 0xc0
 800136c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800136e:	2302      	movs	r3, #2
 8001370:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001372:	2302      	movs	r3, #2
 8001374:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001376:	2302      	movs	r3, #2
 8001378:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800137a:	2308      	movs	r3, #8
 800137c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800137e:	2300      	movs	r3, #0
 8001380:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800138a:	4618      	mov	r0, r3
 800138c:	f003 fcd4 	bl	8004d38 <HAL_RCC_OscConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001396:	f000 f8e4 	bl	8001562 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139a:	233f      	movs	r3, #63	@ 0x3f
 800139c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139e:	2303      	movs	r3, #3
 80013a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013a6:	2308      	movs	r3, #8
 80013a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013aa:	2340      	movs	r3, #64	@ 0x40
 80013ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013ae:	2340      	movs	r3, #64	@ 0x40
 80013b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013b8:	2340      	movs	r3, #64	@ 0x40
 80013ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2104      	movs	r1, #4
 80013c0:	4618      	mov	r0, r3
 80013c2:	f004 f913 	bl	80055ec <HAL_RCC_ClockConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80013cc:	f000 f8c9 	bl	8001562 <Error_Handler>
  }
}
 80013d0:	bf00      	nop
 80013d2:	3770      	adds	r7, #112	@ 0x70
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	58024800 	.word	0x58024800
 80013dc:	58000400 	.word	0x58000400

080013e0 <SDRAM_initialize>:

/* USER CODE BEGIN 4 */

bool SDRAM_initialize(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
   SDRAM_HandleTypeDef *p_sdram  = &hsdram1;
 80013e6:	4b3e      	ldr	r3, [pc, #248]	@ (80014e0 <SDRAM_initialize+0x100>)
 80013e8:	60fb      	str	r3, [r7, #12]

   static FMC_SDRAM_CommandTypeDef Command;

   // Step 1: Configure a clock configuration enable command
   //
   Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80013ea:	4b3e      	ldr	r3, [pc, #248]	@ (80014e4 <SDRAM_initialize+0x104>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
   Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80013f0:	4b3c      	ldr	r3, [pc, #240]	@ (80014e4 <SDRAM_initialize+0x104>)
 80013f2:	2210      	movs	r2, #16
 80013f4:	605a      	str	r2, [r3, #4]
   Command.AutoRefreshNumber      = 1;
 80013f6:	4b3b      	ldr	r3, [pc, #236]	@ (80014e4 <SDRAM_initialize+0x104>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	609a      	str	r2, [r3, #8]
   Command.ModeRegisterDefinition = 0;
 80013fc:	4b39      	ldr	r3, [pc, #228]	@ (80014e4 <SDRAM_initialize+0x104>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
   if(HAL_SDRAM_SendCommand(p_sdram, &Command, 1000) != HAL_OK)
 8001402:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001406:	4937      	ldr	r1, [pc, #220]	@ (80014e4 <SDRAM_initialize+0x104>)
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f006 fae3 	bl	80079d4 <HAL_SDRAM_SendCommand>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SDRAM_initialize+0x38>
   {
      return false;
 8001414:	2300      	movs	r3, #0
 8001416:	e05e      	b.n	80014d6 <SDRAM_initialize+0xf6>
   }

   // Step 2: Insert 100 us minimum delay */
   // Inserted delay is equal to 1 ms due to systick time base unit (ms)
   //
   HAL_Delay(1);
 8001418:	2001      	movs	r0, #1
 800141a:	f000 fd8d 	bl	8001f38 <HAL_Delay>

   // Step 3: Configure a PALL (precharge all) command
   //
   Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800141e:	4b31      	ldr	r3, [pc, #196]	@ (80014e4 <SDRAM_initialize+0x104>)
 8001420:	2202      	movs	r2, #2
 8001422:	601a      	str	r2, [r3, #0]
   Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001424:	4b2f      	ldr	r3, [pc, #188]	@ (80014e4 <SDRAM_initialize+0x104>)
 8001426:	2210      	movs	r2, #16
 8001428:	605a      	str	r2, [r3, #4]
   Command.AutoRefreshNumber      = 1;
 800142a:	4b2e      	ldr	r3, [pc, #184]	@ (80014e4 <SDRAM_initialize+0x104>)
 800142c:	2201      	movs	r2, #1
 800142e:	609a      	str	r2, [r3, #8]
   Command.ModeRegisterDefinition = 0;
 8001430:	4b2c      	ldr	r3, [pc, #176]	@ (80014e4 <SDRAM_initialize+0x104>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
   if(HAL_SDRAM_SendCommand(p_sdram, &Command, 1000) != HAL_OK)
 8001436:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800143a:	492a      	ldr	r1, [pc, #168]	@ (80014e4 <SDRAM_initialize+0x104>)
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f006 fac9 	bl	80079d4 <HAL_SDRAM_SendCommand>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SDRAM_initialize+0x6c>
   {
      return false;
 8001448:	2300      	movs	r3, #0
 800144a:	e044      	b.n	80014d6 <SDRAM_initialize+0xf6>
   }

   // Step 4: Configure a Refresh command
   //
   Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800144c:	4b25      	ldr	r3, [pc, #148]	@ (80014e4 <SDRAM_initialize+0x104>)
 800144e:	2203      	movs	r2, #3
 8001450:	601a      	str	r2, [r3, #0]
   Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001452:	4b24      	ldr	r3, [pc, #144]	@ (80014e4 <SDRAM_initialize+0x104>)
 8001454:	2210      	movs	r2, #16
 8001456:	605a      	str	r2, [r3, #4]
   Command.AutoRefreshNumber      = 8;
 8001458:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <SDRAM_initialize+0x104>)
 800145a:	2208      	movs	r2, #8
 800145c:	609a      	str	r2, [r3, #8]
   Command.ModeRegisterDefinition = 0;
 800145e:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <SDRAM_initialize+0x104>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
   if(HAL_SDRAM_SendCommand(p_sdram, &Command, 1000) != HAL_OK)
 8001464:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001468:	491e      	ldr	r1, [pc, #120]	@ (80014e4 <SDRAM_initialize+0x104>)
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f006 fab2 	bl	80079d4 <HAL_SDRAM_SendCommand>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SDRAM_initialize+0x9a>
   {
      return false;
 8001476:	2300      	movs	r3, #0
 8001478:	e02d      	b.n	80014d6 <SDRAM_initialize+0xf6>
   }

   // Step 5: Program the external memory mode register
   //
   uint32_t mode_reg = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]

   mode_reg |= (0 << 0); // Burst Length = 1
   mode_reg |= (0 << 3); // Burst Type
   //   0 : Sequential
   //   1 : Interleaved
   mode_reg |= (2 << 4); // CAS Latency Mode
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	f043 0320 	orr.w	r3, r3, #32
 8001484:	60bb      	str	r3, [r7, #8]
   //   2 :
   //   3 :
   mode_reg |= (0 << 7); // Operation Mode
   mode_reg |= (1 << 9); // Write Burst Mode
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800148c:	60bb      	str	r3, [r7, #8]
   //   0 : Programmed Burst Length
   //   1 : Single Location Access

   Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <SDRAM_initialize+0x104>)
 8001490:	2204      	movs	r2, #4
 8001492:	601a      	str	r2, [r3, #0]
   Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <SDRAM_initialize+0x104>)
 8001496:	2210      	movs	r2, #16
 8001498:	605a      	str	r2, [r3, #4]
   Command.AutoRefreshNumber      = 1;
 800149a:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <SDRAM_initialize+0x104>)
 800149c:	2201      	movs	r2, #1
 800149e:	609a      	str	r2, [r3, #8]
   Command.ModeRegisterDefinition = mode_reg;
 80014a0:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <SDRAM_initialize+0x104>)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	60d3      	str	r3, [r2, #12]
   if(HAL_SDRAM_SendCommand(p_sdram, &Command, 1000) != HAL_OK)
 80014a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014aa:	490e      	ldr	r1, [pc, #56]	@ (80014e4 <SDRAM_initialize+0x104>)
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f006 fa91 	bl	80079d4 <HAL_SDRAM_SendCommand>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SDRAM_initialize+0xdc>
   {
      return false;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e00c      	b.n	80014d6 <SDRAM_initialize+0xf6>
   // refresh rate = (COUNT + 1) * SDRAM clock freq (94.4444Mhz)
   //
   // COUNT = (SDRAM refresh period/Number of rows) - 20
   //       = (64ms / 8192) - 20
   //       = 7.81us * 94.444 - 20 = 717
   uint32_t refresh_count = 917;
 80014bc:	f240 3395 	movw	r3, #917	@ 0x395
 80014c0:	607b      	str	r3, [r7, #4]

   if(HAL_SDRAM_ProgramRefreshRate(p_sdram, refresh_count) != HAL_OK)
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f006 faba 	bl	8007a3e <HAL_SDRAM_ProgramRefreshRate>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SDRAM_initialize+0xf4>
   {
      return false;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e000      	b.n	80014d6 <SDRAM_initialize+0xf6>
   }

   return true;
 80014d4:	2301      	movs	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	24000094 	.word	0x24000094
 80014e4:	240000cc 	.word	0x240000cc

080014e8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80014ee:	463b      	mov	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80014fa:	f000 fe5d 	bl	80021b8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80014fe:	2301      	movs	r3, #1
 8001500:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001502:	2300      	movs	r3, #0
 8001504:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800150a:	231f      	movs	r3, #31
 800150c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800150e:	2387      	movs	r3, #135	@ 0x87
 8001510:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001512:	2300      	movs	r3, #0
 8001514:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001516:	2300      	movs	r3, #0
 8001518:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800151a:	2301      	movs	r3, #1
 800151c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800151e:	2301      	movs	r3, #1
 8001520:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800152a:	463b      	mov	r3, r7
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fe7b 	bl	8002228 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8001532:	2304      	movs	r3, #4
 8001534:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8001536:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800153a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800153c:	2318      	movs	r3, #24
 800153e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001540:	2300      	movs	r3, #0
 8001542:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001544:	2301      	movs	r3, #1
 8001546:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001548:	2303      	movs	r3, #3
 800154a:	72fb      	strb	r3, [r7, #11]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800154c:	463b      	mov	r3, r7
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fe6a 	bl	8002228 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001554:	2004      	movs	r0, #4
 8001556:	f000 fe47 	bl	80021e8 <HAL_MPU_Enable>

}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001566:	b672      	cpsid	i
}
 8001568:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156a:	bf00      	nop
 800156c:	e7fd      	b.n	800156a <Error_Handler+0x8>

0800156e <Que_Init>:


 Que_TypeDef LCD_Que;

void Que_Init(Que_TypeDef *q, int size)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
	q->front = 0;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
	q -> typeSize = size;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	609a      	str	r2, [r3, #8]
	for (int i=0; i < QUE_SIZE; i++)
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e00f      	b.n	80015b0 <Que_Init+0x42>
	{
		q -> queData[i] = malloc(q->typeSize);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	4618      	mov	r0, r3
 8001596:	f008 fc93 	bl	8009ec0 <malloc>
 800159a:	4603      	mov	r3, r0
 800159c:	4619      	mov	r1, r3
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3302      	adds	r3, #2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	6059      	str	r1, [r3, #4]
	for (int i=0; i < QUE_SIZE; i++)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3301      	adds	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b07      	cmp	r3, #7
 80015b4:	ddec      	ble.n	8001590 <Que_Init+0x22>
	}
}
 80015b6:	bf00      	nop
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <isQueFull>:
	{
		free(q->queData[i]);
	}
}

int isQueFull(Que_TypeDef *q) {
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

	return q-> front == ((q->rear +1) % QUE_SIZE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	3301      	adds	r3, #1
 80015d2:	4259      	negs	r1, r3
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	f001 0107 	and.w	r1, r1, #7
 80015dc:	bf58      	it	pl
 80015de:	424b      	negpl	r3, r1
 80015e0:	429a      	cmp	r2, r3
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <isQueEmpty>:


int isQueEmpty(Que_TypeDef *q)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
	return q-> front == q-> rear;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	429a      	cmp	r2, r3
 8001608:	bf0c      	ite	eq
 800160a:	2301      	moveq	r3, #1
 800160c:	2300      	movne	r3, #0
 800160e:	b2db      	uxtb	r3, r3
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <enQue>:

bool enQue(Que_TypeDef *q, void* pdata)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
	if(isQueFull(q))
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffca 	bl	80015c0 <isQueFull>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <enQue+0x1a>
	{
		return false;
 8001632:	2300      	movs	r3, #0
 8001634:	e019      	b.n	800166a <enQue+0x4e>
	}
	memcpy(q->queData[q->rear], pdata, q->typeSize);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	3302      	adds	r3, #2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	6858      	ldr	r0, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	461a      	mov	r2, r3
 800164a:	6839      	ldr	r1, [r7, #0]
 800164c:	f008 ff71 	bl	800a532 <memcpy>
	q-> rear = (q->rear+1) % QUE_SIZE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	3301      	adds	r3, #1
 8001656:	425a      	negs	r2, r3
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	f002 0207 	and.w	r2, r2, #7
 8001660:	bf58      	it	pl
 8001662:	4253      	negpl	r3, r2
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6053      	str	r3, [r2, #4]
	return true;
 8001668:	2301      	movs	r3, #1
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <deQue>:

bool deQue(Que_TypeDef *q, void *pData)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	6039      	str	r1, [r7, #0]
	if(isQueEmpty(q))
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ffba 	bl	80015f6 <isQueEmpty>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <deQue+0x1a>
	{
		return false;
 8001688:	2300      	movs	r3, #0
 800168a:	e019      	b.n	80016c0 <deQue+0x4e>
	}
	memcpy(pData, q->queData[ q-> front], q->typeSize);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	3302      	adds	r3, #2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	6859      	ldr	r1, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	461a      	mov	r2, r3
 80016a0:	6838      	ldr	r0, [r7, #0]
 80016a2:	f008 ff46 	bl	800a532 <memcpy>

q-> front = (q-> front+1) % QUE_SIZE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	425a      	negs	r2, r3
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	f002 0207 	and.w	r2, r2, #7
 80016b6:	bf58      	it	pl
 80016b8:	4253      	negpl	r3, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
return true;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016cc:	4b27      	ldr	r3, [pc, #156]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016ce:	4a28      	ldr	r2, [pc, #160]	@ (8001770 <MX_SPI1_Init+0xa8>)
 80016d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016d2:	4b26      	ldr	r3, [pc, #152]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016d4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80016d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80016da:	4b24      	ldr	r3, [pc, #144]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016e0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e2:	4b22      	ldr	r3, [pc, #136]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e8:	4b20      	ldr	r3, [pc, #128]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ee:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016f6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <MX_SPI1_Init+0xa4>)
 80016fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001702:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800170a:	4b18      	ldr	r3, [pc, #96]	@ (800176c <MX_SPI1_Init+0xa4>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001710:	4b16      	ldr	r3, [pc, #88]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001716:	4b15      	ldr	r3, [pc, #84]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001718:	2200      	movs	r2, #0
 800171a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800171c:	4b13      	ldr	r3, [pc, #76]	@ (800176c <MX_SPI1_Init+0xa4>)
 800171e:	2200      	movs	r2, #0
 8001720:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001724:	2200      	movs	r2, #0
 8001726:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001728:	4b10      	ldr	r3, [pc, #64]	@ (800176c <MX_SPI1_Init+0xa4>)
 800172a:	2200      	movs	r2, #0
 800172c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800172e:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001730:	2200      	movs	r2, #0
 8001732:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001734:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001736:	2200      	movs	r2, #0
 8001738:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <MX_SPI1_Init+0xa4>)
 800173c:	2200      	movs	r2, #0
 800173e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001740:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001742:	2200      	movs	r2, #0
 8001744:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001748:	2200      	movs	r2, #0
 800174a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800174c:	4b07      	ldr	r3, [pc, #28]	@ (800176c <MX_SPI1_Init+0xa4>)
 800174e:	2200      	movs	r2, #0
 8001750:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <MX_SPI1_Init+0xa4>)
 8001754:	2200      	movs	r2, #0
 8001756:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	@ (800176c <MX_SPI1_Init+0xa4>)
 800175a:	f006 f999 	bl	8007a90 <HAL_SPI_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001764:	f7ff fefd 	bl	8001562 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	24000108 	.word	0x24000108
 8001770:	40013000 	.word	0x40013000

08001774 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b0ba      	sub	sp, #232	@ 0xe8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	22c0      	movs	r2, #192	@ 0xc0
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f008 fe41 	bl	800a41c <memset>
  if(spiHandle->Instance==SPI1)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a4a      	ldr	r2, [pc, #296]	@ (80018c8 <HAL_SPI_MspInit+0x154>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	f040 808c 	bne.w	80018be <HAL_SPI_MspInit+0x14a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80017a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 80017b2:	2319      	movs	r3, #25
 80017b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 80017b6:	23c8      	movs	r3, #200	@ 0xc8
 80017b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80017ba:	2302      	movs	r3, #2
 80017bc:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80017be:	2302      	movs	r3, #2
 80017c0:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80017c2:	2302      	movs	r3, #2
 80017c4:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80017d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 fa91 	bl	8005d04 <HAL_RCCEx_PeriphCLKConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 80017e8:	f7ff febb 	bl	8001562 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017ec:	4b37      	ldr	r3, [pc, #220]	@ (80018cc <HAL_SPI_MspInit+0x158>)
 80017ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017f2:	4a36      	ldr	r2, [pc, #216]	@ (80018cc <HAL_SPI_MspInit+0x158>)
 80017f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017fc:	4b33      	ldr	r3, [pc, #204]	@ (80018cc <HAL_SPI_MspInit+0x158>)
 80017fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001802:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	4b30      	ldr	r3, [pc, #192]	@ (80018cc <HAL_SPI_MspInit+0x158>)
 800180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001810:	4a2e      	ldr	r2, [pc, #184]	@ (80018cc <HAL_SPI_MspInit+0x158>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800181a:	4b2c      	ldr	r3, [pc, #176]	@ (80018cc <HAL_SPI_MspInit+0x158>)
 800181c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8001828:	23a0      	movs	r3, #160	@ 0xa0
 800182a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001840:	2305      	movs	r3, #5
 8001842:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800184a:	4619      	mov	r1, r3
 800184c:	4820      	ldr	r0, [pc, #128]	@ (80018d0 <HAL_SPI_MspInit+0x15c>)
 800184e:	f003 f855 	bl	80048fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001852:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <HAL_SPI_MspInit+0x160>)
 8001854:	4a20      	ldr	r2, [pc, #128]	@ (80018d8 <HAL_SPI_MspInit+0x164>)
 8001856:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001858:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <HAL_SPI_MspInit+0x160>)
 800185a:	2226      	movs	r2, #38	@ 0x26
 800185c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800185e:	4b1d      	ldr	r3, [pc, #116]	@ (80018d4 <HAL_SPI_MspInit+0x160>)
 8001860:	2240      	movs	r2, #64	@ 0x40
 8001862:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001864:	4b1b      	ldr	r3, [pc, #108]	@ (80018d4 <HAL_SPI_MspInit+0x160>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800186a:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <HAL_SPI_MspInit+0x160>)
 800186c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001870:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <HAL_SPI_MspInit+0x160>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001878:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <HAL_SPI_MspInit+0x160>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <HAL_SPI_MspInit+0x160>)
 8001880:	2200      	movs	r2, #0
 8001882:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001884:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <HAL_SPI_MspInit+0x160>)
 8001886:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800188a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800188c:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <HAL_SPI_MspInit+0x160>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001892:	4810      	ldr	r0, [pc, #64]	@ (80018d4 <HAL_SPI_MspInit+0x160>)
 8001894:	f000 fd08 	bl	80022a8 <HAL_DMA_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_SPI_MspInit+0x12e>
    {
      Error_Handler();
 800189e:	f7ff fe60 	bl	8001562 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a0b      	ldr	r2, [pc, #44]	@ (80018d4 <HAL_SPI_MspInit+0x160>)
 80018a6:	679a      	str	r2, [r3, #120]	@ 0x78
 80018a8:	4a0a      	ldr	r2, [pc, #40]	@ (80018d4 <HAL_SPI_MspInit+0x160>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	2023      	movs	r0, #35	@ 0x23
 80018b4:	f000 fc4b 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80018b8:	2023      	movs	r0, #35	@ 0x23
 80018ba:	f000 fc62 	bl	8002182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80018be:	bf00      	nop
 80018c0:	37e8      	adds	r7, #232	@ 0xe8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40013000 	.word	0x40013000
 80018cc:	58024400 	.word	0x58024400
 80018d0:	58020000 	.word	0x58020000
 80018d4:	24000190 	.word	0x24000190
 80018d8:	40020010 	.word	0x40020010

080018dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <HAL_MspInit+0x30>)
 80018e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018e8:	4a08      	ldr	r2, [pc, #32]	@ (800190c <HAL_MspInit+0x30>)
 80018ea:	f043 0302 	orr.w	r3, r3, #2
 80018ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_MspInit+0x30>)
 80018f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	58024400 	.word	0x58024400

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <NMI_Handler+0x4>

08001918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <HardFault_Handler+0x4>

08001920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <MemManage_Handler+0x4>

08001928 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <UsageFault_Handler+0x4>

08001938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001966:	f000 fac7 	bl	8001ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <DMA1_Stream0_IRQHandler+0x10>)
 8001976:	f001 fca3 	bl	80032c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	24000190 	.word	0x24000190

08001984 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <SPI1_IRQHandler+0x10>)
 800198a:	f006 fcd5 	bl	8008338 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	24000108 	.word	0x24000108

08001998 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e00a      	b.n	80019c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019aa:	f3af 8000 	nop.w
 80019ae:	4601      	mov	r1, r0
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	b2ca      	uxtb	r2, r1
 80019b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dbf0      	blt.n	80019aa <_read+0x12>
  }

  return len;
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e009      	b.n	80019f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	60ba      	str	r2, [r7, #8]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fb93 	bl	8001118 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dbf1      	blt.n	80019e4 <_write+0x12>
  }
  return len;
 8001a00:	687b      	ldr	r3, [r7, #4]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_close>:

int _close(int file)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a32:	605a      	str	r2, [r3, #4]
  return 0;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_isatty>:

int _isatty(int file)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ad0 <_sbrk+0x5c>)
 8001a7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <_sbrk+0x60>)
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a88:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <_sbrk+0x64>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	@ (8001adc <_sbrk+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d207      	bcs.n	8001ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa4:	f008 fd18 	bl	800a4d8 <__errno>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	220c      	movs	r2, #12
 8001aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab2:	e009      	b.n	8001ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <_sbrk+0x64>)
 8001ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	24080000 	.word	0x24080000
 8001ad4:	00000400 	.word	0x00000400
 8001ad8:	24000208 	.word	0x24000208
 8001adc:	240003f0 	.word	0x240003f0

08001ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b43      	ldr	r3, [pc, #268]	@ (8001bf4 <SystemInit+0x114>)
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aea:	4a42      	ldr	r2, [pc, #264]	@ (8001bf4 <SystemInit+0x114>)
 8001aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001af4:	4b40      	ldr	r3, [pc, #256]	@ (8001bf8 <SystemInit+0x118>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	2b06      	cmp	r3, #6
 8001afe:	d807      	bhi.n	8001b10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b00:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf8 <SystemInit+0x118>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f023 030f 	bic.w	r3, r3, #15
 8001b08:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf8 <SystemInit+0x118>)
 8001b0a:	f043 0307 	orr.w	r3, r3, #7
 8001b0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b10:	4b3a      	ldr	r3, [pc, #232]	@ (8001bfc <SystemInit+0x11c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a39      	ldr	r2, [pc, #228]	@ (8001bfc <SystemInit+0x11c>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b1c:	4b37      	ldr	r3, [pc, #220]	@ (8001bfc <SystemInit+0x11c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b22:	4b36      	ldr	r3, [pc, #216]	@ (8001bfc <SystemInit+0x11c>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4935      	ldr	r1, [pc, #212]	@ (8001bfc <SystemInit+0x11c>)
 8001b28:	4b35      	ldr	r3, [pc, #212]	@ (8001c00 <SystemInit+0x120>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b2e:	4b32      	ldr	r3, [pc, #200]	@ (8001bf8 <SystemInit+0x118>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d007      	beq.n	8001b4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf8 <SystemInit+0x118>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 030f 	bic.w	r3, r3, #15
 8001b42:	4a2d      	ldr	r2, [pc, #180]	@ (8001bf8 <SystemInit+0x118>)
 8001b44:	f043 0307 	orr.w	r3, r3, #7
 8001b48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <SystemInit+0x11c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b50:	4b2a      	ldr	r3, [pc, #168]	@ (8001bfc <SystemInit+0x11c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b56:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <SystemInit+0x11c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b5c:	4b27      	ldr	r3, [pc, #156]	@ (8001bfc <SystemInit+0x11c>)
 8001b5e:	4a29      	ldr	r2, [pc, #164]	@ (8001c04 <SystemInit+0x124>)
 8001b60:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b62:	4b26      	ldr	r3, [pc, #152]	@ (8001bfc <SystemInit+0x11c>)
 8001b64:	4a28      	ldr	r2, [pc, #160]	@ (8001c08 <SystemInit+0x128>)
 8001b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b68:	4b24      	ldr	r3, [pc, #144]	@ (8001bfc <SystemInit+0x11c>)
 8001b6a:	4a28      	ldr	r2, [pc, #160]	@ (8001c0c <SystemInit+0x12c>)
 8001b6c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b6e:	4b23      	ldr	r3, [pc, #140]	@ (8001bfc <SystemInit+0x11c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b74:	4b21      	ldr	r3, [pc, #132]	@ (8001bfc <SystemInit+0x11c>)
 8001b76:	4a25      	ldr	r2, [pc, #148]	@ (8001c0c <SystemInit+0x12c>)
 8001b78:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b7a:	4b20      	ldr	r3, [pc, #128]	@ (8001bfc <SystemInit+0x11c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b80:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <SystemInit+0x11c>)
 8001b82:	4a22      	ldr	r2, [pc, #136]	@ (8001c0c <SystemInit+0x12c>)
 8001b84:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b86:	4b1d      	ldr	r3, [pc, #116]	@ (8001bfc <SystemInit+0x11c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <SystemInit+0x11c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1a      	ldr	r2, [pc, #104]	@ (8001bfc <SystemInit+0x11c>)
 8001b92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b98:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <SystemInit+0x11c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <SystemInit+0x130>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <SystemInit+0x134>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001baa:	d202      	bcs.n	8001bb2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <SystemInit+0x138>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001bb2:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <SystemInit+0x11c>)
 8001bb4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001bb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d113      	bne.n	8001be8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <SystemInit+0x11c>)
 8001bc2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <SystemInit+0x11c>)
 8001bc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bcc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <SystemInit+0x13c>)
 8001bd2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001bd6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <SystemInit+0x11c>)
 8001bda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001bde:	4a07      	ldr	r2, [pc, #28]	@ (8001bfc <SystemInit+0x11c>)
 8001be0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001be4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00
 8001bf8:	52002000 	.word	0x52002000
 8001bfc:	58024400 	.word	0x58024400
 8001c00:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c04:	02020200 	.word	0x02020200
 8001c08:	01ff0000 	.word	0x01ff0000
 8001c0c:	01010280 	.word	0x01010280
 8001c10:	5c001000 	.word	0x5c001000
 8001c14:	ffff0000 	.word	0xffff0000
 8001c18:	51008108 	.word	0x51008108
 8001c1c:	52004000 	.word	0x52004000

08001c20 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001c24:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <ExitRun0Mode+0x2c>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4a08      	ldr	r2, [pc, #32]	@ (8001c4c <ExitRun0Mode+0x2c>)
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001c30:	bf00      	nop
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <ExitRun0Mode+0x2c>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f9      	beq.n	8001c32 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	58024800 	.word	0x58024800

08001c50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c54:	4b22      	ldr	r3, [pc, #136]	@ (8001ce0 <MX_USART1_UART_Init+0x90>)
 8001c56:	4a23      	ldr	r2, [pc, #140]	@ (8001ce4 <MX_USART1_UART_Init+0x94>)
 8001c58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ce0 <MX_USART1_UART_Init+0x90>)
 8001c5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c62:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce0 <MX_USART1_UART_Init+0x90>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce0 <MX_USART1_UART_Init+0x90>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce0 <MX_USART1_UART_Init+0x90>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce0 <MX_USART1_UART_Init+0x90>)
 8001c76:	220c      	movs	r2, #12
 8001c78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ce0 <MX_USART1_UART_Init+0x90>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c80:	4b17      	ldr	r3, [pc, #92]	@ (8001ce0 <MX_USART1_UART_Init+0x90>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c86:	4b16      	ldr	r3, [pc, #88]	@ (8001ce0 <MX_USART1_UART_Init+0x90>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <MX_USART1_UART_Init+0x90>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c92:	4b13      	ldr	r3, [pc, #76]	@ (8001ce0 <MX_USART1_UART_Init+0x90>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c98:	4811      	ldr	r0, [pc, #68]	@ (8001ce0 <MX_USART1_UART_Init+0x90>)
 8001c9a:	f006 fea4 	bl	80089e6 <HAL_UART_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ca4:	f7ff fc5d 	bl	8001562 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca8:	2100      	movs	r1, #0
 8001caa:	480d      	ldr	r0, [pc, #52]	@ (8001ce0 <MX_USART1_UART_Init+0x90>)
 8001cac:	f007 ff3b 	bl	8009b26 <HAL_UARTEx_SetTxFifoThreshold>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001cb6:	f7ff fc54 	bl	8001562 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4808      	ldr	r0, [pc, #32]	@ (8001ce0 <MX_USART1_UART_Init+0x90>)
 8001cbe:	f007 ff70 	bl	8009ba2 <HAL_UARTEx_SetRxFifoThreshold>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001cc8:	f7ff fc4b 	bl	8001562 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ccc:	4804      	ldr	r0, [pc, #16]	@ (8001ce0 <MX_USART1_UART_Init+0x90>)
 8001cce:	f007 fef1 	bl	8009ab4 <HAL_UARTEx_DisableFifoMode>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001cd8:	f7ff fc43 	bl	8001562 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	2400020c 	.word	0x2400020c
 8001ce4:	40011000 	.word	0x40011000

08001ce8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b0ba      	sub	sp, #232	@ 0xe8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	22c0      	movs	r2, #192	@ 0xc0
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f008 fb87 	bl	800a41c <memset>
  if(uartHandle->Instance==USART1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a27      	ldr	r2, [pc, #156]	@ (8001db0 <HAL_UART_MspInit+0xc8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d146      	bne.n	8001da6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d18:	f04f 0201 	mov.w	r2, #1
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 ffe8 	bl	8005d04 <HAL_RCCEx_PeriphCLKConfig>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001d3a:	f7ff fc12 	bl	8001562 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001db4 <HAL_UART_MspInit+0xcc>)
 8001d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d44:	4a1b      	ldr	r2, [pc, #108]	@ (8001db4 <HAL_UART_MspInit+0xcc>)
 8001d46:	f043 0310 	orr.w	r3, r3, #16
 8001d4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d4e:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_UART_MspInit+0xcc>)
 8001d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5c:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <HAL_UART_MspInit+0xcc>)
 8001d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d62:	4a14      	ldr	r2, [pc, #80]	@ (8001db4 <HAL_UART_MspInit+0xcc>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d6c:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <HAL_UART_MspInit+0xcc>)
 8001d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001d7a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d94:	2307      	movs	r3, #7
 8001d96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <HAL_UART_MspInit+0xd0>)
 8001da2:	f002 fdab 	bl	80048fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001da6:	bf00      	nop
 8001da8:	37e8      	adds	r7, #232	@ 0xe8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40011000 	.word	0x40011000
 8001db4:	58024400 	.word	0x58024400
 8001db8:	58020000 	.word	0x58020000

08001dbc <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack      /* set stack pointer */
 8001dbc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001df8 <LoopFillZerobss+0xe>





  bl  ExitRun0Mode
 8001dc0:	f7ff ff2e 	bl	8001c20 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dc4:	f7ff fe8c 	bl	8001ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc8:	480c      	ldr	r0, [pc, #48]	@ (8001dfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dca:	490d      	ldr	r1, [pc, #52]	@ (8001e00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd0:	e002      	b.n	8001dd8 <LoopCopyDataInit>

08001dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd6:	3304      	adds	r3, #4

08001dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ddc:	d3f9      	bcc.n	8001dd2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dde:	4a0a      	ldr	r2, [pc, #40]	@ (8001e08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001de0:	4c0a      	ldr	r4, [pc, #40]	@ (8001e0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de4:	e001      	b.n	8001dea <LoopFillZerobss>

08001de6 <FillZerobss>:



FillZerobss:
  str  r3, [r2]
 8001de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de8:	3204      	adds	r2, #4

08001dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dec:	d3fb      	bcc.n	8001de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dee:	f008 fb79 	bl	800a4e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001df2:	f7ff f9a3 	bl	800113c <main>
  bx  lr
 8001df6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001df8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001dfc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e00:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001e04:	0804d4f0 	.word	0x0804d4f0
  ldr r2, =_sbss
 8001e08:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001e0c:	240003f0 	.word	0x240003f0

08001e10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e10:	e7fe      	b.n	8001e10 <ADC3_IRQHandler>
	...

08001e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e1a:	2003      	movs	r0, #3
 8001e1c:	f000 f98c 	bl	8002138 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e20:	f003 fd9a 	bl	8005958 <HAL_RCC_GetSysClockFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <HAL_Init+0x68>)
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	4913      	ldr	r1, [pc, #76]	@ (8001e80 <HAL_Init+0x6c>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <HAL_Init+0x68>)
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	4a0e      	ldr	r2, [pc, #56]	@ (8001e80 <HAL_Init+0x6c>)
 8001e48:	5cd3      	ldrb	r3, [r2, r3]
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
 8001e54:	4a0b      	ldr	r2, [pc, #44]	@ (8001e84 <HAL_Init+0x70>)
 8001e56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e58:	4a0b      	ldr	r2, [pc, #44]	@ (8001e88 <HAL_Init+0x74>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e5e:	200f      	movs	r0, #15
 8001e60:	f000 f814 	bl	8001e8c <HAL_InitTick>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e002      	b.n	8001e74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e6e:	f7ff fd35 	bl	80018dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	58024400 	.word	0x58024400
 8001e80:	0804d4a0 	.word	0x0804d4a0
 8001e84:	24000004 	.word	0x24000004
 8001e88:	24000000 	.word	0x24000000

08001e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e94:	4b15      	ldr	r3, [pc, #84]	@ (8001eec <HAL_InitTick+0x60>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e021      	b.n	8001ee4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <HAL_InitTick+0x64>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <HAL_InitTick+0x60>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 f971 	bl	800219e <HAL_SYSTICK_Config>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e00e      	b.n	8001ee4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b0f      	cmp	r3, #15
 8001eca:	d80a      	bhi.n	8001ee2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed4:	f000 f93b 	bl	800214e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed8:	4a06      	ldr	r2, [pc, #24]	@ (8001ef4 <HAL_InitTick+0x68>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e000      	b.n	8001ee4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	2400000c 	.word	0x2400000c
 8001ef0:	24000000 	.word	0x24000000
 8001ef4:	24000008 	.word	0x24000008

08001ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001efc:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_IncTick+0x20>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_IncTick+0x24>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a04      	ldr	r2, [pc, #16]	@ (8001f1c <HAL_IncTick+0x24>)
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	2400000c 	.word	0x2400000c
 8001f1c:	240002a0 	.word	0x240002a0

08001f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return uwTick;
 8001f24:	4b03      	ldr	r3, [pc, #12]	@ (8001f34 <HAL_GetTick+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	240002a0 	.word	0x240002a0

08001f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff ffee 	bl	8001f20 <HAL_GetTick>
 8001f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d005      	beq.n	8001f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <HAL_Delay+0x44>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f5e:	bf00      	nop
 8001f60:	f7ff ffde 	bl	8001f20 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d8f7      	bhi.n	8001f60 <HAL_Delay+0x28>
  {
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2400000c 	.word	0x2400000c

08001f80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f84:	4b03      	ldr	r3, [pc, #12]	@ (8001f94 <HAL_GetREVID+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0c1b      	lsrs	r3, r3, #16
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	5c001000 	.word	0x5c001000

08001f98 <__NVIC_SetPriorityGrouping>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc6:	4a04      	ldr	r2, [pc, #16]	@ (8001fd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60d3      	str	r3, [r2, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00
 8001fdc:	05fa0000 	.word	0x05fa0000

08001fe0 <__NVIC_GetPriorityGrouping>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_EnableIRQ>:
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db0b      	blt.n	8002026 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	4907      	ldr	r1, [pc, #28]	@ (8002034 <__NVIC_EnableIRQ+0x38>)
 8002016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2001      	movs	r0, #1
 800201e:	fa00 f202 	lsl.w	r2, r0, r2
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000e100 	.word	0xe000e100

08002038 <__NVIC_SetPriority>:
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0a      	blt.n	8002062 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	490c      	ldr	r1, [pc, #48]	@ (8002084 <__NVIC_SetPriority+0x4c>)
 8002052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	440b      	add	r3, r1
 800205c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002060:	e00a      	b.n	8002078 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4908      	ldr	r1, [pc, #32]	@ (8002088 <__NVIC_SetPriority+0x50>)
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	3b04      	subs	r3, #4
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	440b      	add	r3, r1
 8002076:	761a      	strb	r2, [r3, #24]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <NVIC_EncodePriority>:
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	@ 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f1c3 0307 	rsb	r3, r3, #7
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	bf28      	it	cs
 80020aa:	2304      	movcs	r3, #4
 80020ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d902      	bls.n	80020bc <NVIC_EncodePriority+0x30>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3b03      	subs	r3, #3
 80020ba:	e000      	b.n	80020be <NVIC_EncodePriority+0x32>
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43d9      	mvns	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	4313      	orrs	r3, r2
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	@ 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002104:	d301      	bcc.n	800210a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002106:	2301      	movs	r3, #1
 8002108:	e00f      	b.n	800212a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210a:	4a0a      	ldr	r2, [pc, #40]	@ (8002134 <SysTick_Config+0x40>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002112:	210f      	movs	r1, #15
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f7ff ff8e 	bl	8002038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <SysTick_Config+0x40>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002122:	4b04      	ldr	r3, [pc, #16]	@ (8002134 <SysTick_Config+0x40>)
 8002124:	2207      	movs	r2, #7
 8002126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	e000e010 	.word	0xe000e010

08002138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff29 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800215c:	f7ff ff40 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 8002160:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f7ff ff90 	bl	800208c <NVIC_EncodePriority>
 800216c:	4602      	mov	r2, r0
 800216e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff5f 	bl	8002038 <__NVIC_SetPriority>
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff33 	bl	8001ffc <__NVIC_EnableIRQ>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ffa4 	bl	80020f4 <SysTick_Config>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80021bc:	f3bf 8f5f 	dmb	sy
}
 80021c0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80021c2:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <HAL_MPU_Disable+0x28>)
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	4a06      	ldr	r2, [pc, #24]	@ (80021e0 <HAL_MPU_Disable+0x28>)
 80021c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021cc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80021ce:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <HAL_MPU_Disable+0x2c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000ed00 	.word	0xe000ed00
 80021e4:	e000ed90 	.word	0xe000ed90

080021e8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80021f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002220 <HAL_MPU_Enable+0x38>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80021fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002224 <HAL_MPU_Enable+0x3c>)
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	4a09      	ldr	r2, [pc, #36]	@ (8002224 <HAL_MPU_Enable+0x3c>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002204:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002206:	f3bf 8f4f 	dsb	sy
}
 800220a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800220c:	f3bf 8f6f 	isb	sy
}
 8002210:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed90 	.word	0xe000ed90
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	785a      	ldrb	r2, [r3, #1]
 8002234:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <HAL_MPU_ConfigRegion+0x7c>)
 8002236:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002238:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <HAL_MPU_ConfigRegion+0x7c>)
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	4a19      	ldr	r2, [pc, #100]	@ (80022a4 <HAL_MPU_ConfigRegion+0x7c>)
 800223e:	f023 0301 	bic.w	r3, r3, #1
 8002242:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002244:	4a17      	ldr	r2, [pc, #92]	@ (80022a4 <HAL_MPU_ConfigRegion+0x7c>)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7b1b      	ldrb	r3, [r3, #12]
 8002250:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7adb      	ldrb	r3, [r3, #11]
 8002256:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002258:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7a9b      	ldrb	r3, [r3, #10]
 800225e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002260:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7b5b      	ldrb	r3, [r3, #13]
 8002266:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002268:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7b9b      	ldrb	r3, [r3, #14]
 800226e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002270:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7bdb      	ldrb	r3, [r3, #15]
 8002276:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002278:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7a5b      	ldrb	r3, [r3, #9]
 800227e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002280:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7a1b      	ldrb	r3, [r3, #8]
 8002286:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002288:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	7812      	ldrb	r2, [r2, #0]
 800228e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002290:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002292:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002294:	6113      	str	r3, [r2, #16]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed90 	.word	0xe000ed90

080022a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff fe36 	bl	8001f20 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e316      	b.n	80028ee <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a66      	ldr	r2, [pc, #408]	@ (8002460 <HAL_DMA_Init+0x1b8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d04a      	beq.n	8002360 <HAL_DMA_Init+0xb8>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a65      	ldr	r2, [pc, #404]	@ (8002464 <HAL_DMA_Init+0x1bc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d045      	beq.n	8002360 <HAL_DMA_Init+0xb8>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a63      	ldr	r2, [pc, #396]	@ (8002468 <HAL_DMA_Init+0x1c0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d040      	beq.n	8002360 <HAL_DMA_Init+0xb8>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a62      	ldr	r2, [pc, #392]	@ (800246c <HAL_DMA_Init+0x1c4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d03b      	beq.n	8002360 <HAL_DMA_Init+0xb8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a60      	ldr	r2, [pc, #384]	@ (8002470 <HAL_DMA_Init+0x1c8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d036      	beq.n	8002360 <HAL_DMA_Init+0xb8>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a5f      	ldr	r2, [pc, #380]	@ (8002474 <HAL_DMA_Init+0x1cc>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d031      	beq.n	8002360 <HAL_DMA_Init+0xb8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a5d      	ldr	r2, [pc, #372]	@ (8002478 <HAL_DMA_Init+0x1d0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d02c      	beq.n	8002360 <HAL_DMA_Init+0xb8>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a5c      	ldr	r2, [pc, #368]	@ (800247c <HAL_DMA_Init+0x1d4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d027      	beq.n	8002360 <HAL_DMA_Init+0xb8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a5a      	ldr	r2, [pc, #360]	@ (8002480 <HAL_DMA_Init+0x1d8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d022      	beq.n	8002360 <HAL_DMA_Init+0xb8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a59      	ldr	r2, [pc, #356]	@ (8002484 <HAL_DMA_Init+0x1dc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d01d      	beq.n	8002360 <HAL_DMA_Init+0xb8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a57      	ldr	r2, [pc, #348]	@ (8002488 <HAL_DMA_Init+0x1e0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d018      	beq.n	8002360 <HAL_DMA_Init+0xb8>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a56      	ldr	r2, [pc, #344]	@ (800248c <HAL_DMA_Init+0x1e4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d013      	beq.n	8002360 <HAL_DMA_Init+0xb8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a54      	ldr	r2, [pc, #336]	@ (8002490 <HAL_DMA_Init+0x1e8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00e      	beq.n	8002360 <HAL_DMA_Init+0xb8>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a53      	ldr	r2, [pc, #332]	@ (8002494 <HAL_DMA_Init+0x1ec>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d009      	beq.n	8002360 <HAL_DMA_Init+0xb8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a51      	ldr	r2, [pc, #324]	@ (8002498 <HAL_DMA_Init+0x1f0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d004      	beq.n	8002360 <HAL_DMA_Init+0xb8>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a50      	ldr	r2, [pc, #320]	@ (800249c <HAL_DMA_Init+0x1f4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_DMA_Init+0xbc>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_DMA_Init+0xbe>
 8002364:	2300      	movs	r3, #0
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 813b 	beq.w	80025e2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a37      	ldr	r2, [pc, #220]	@ (8002460 <HAL_DMA_Init+0x1b8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d04a      	beq.n	800241c <HAL_DMA_Init+0x174>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a36      	ldr	r2, [pc, #216]	@ (8002464 <HAL_DMA_Init+0x1bc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d045      	beq.n	800241c <HAL_DMA_Init+0x174>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a34      	ldr	r2, [pc, #208]	@ (8002468 <HAL_DMA_Init+0x1c0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d040      	beq.n	800241c <HAL_DMA_Init+0x174>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a33      	ldr	r2, [pc, #204]	@ (800246c <HAL_DMA_Init+0x1c4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d03b      	beq.n	800241c <HAL_DMA_Init+0x174>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a31      	ldr	r2, [pc, #196]	@ (8002470 <HAL_DMA_Init+0x1c8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d036      	beq.n	800241c <HAL_DMA_Init+0x174>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a30      	ldr	r2, [pc, #192]	@ (8002474 <HAL_DMA_Init+0x1cc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d031      	beq.n	800241c <HAL_DMA_Init+0x174>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002478 <HAL_DMA_Init+0x1d0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d02c      	beq.n	800241c <HAL_DMA_Init+0x174>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a2d      	ldr	r2, [pc, #180]	@ (800247c <HAL_DMA_Init+0x1d4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d027      	beq.n	800241c <HAL_DMA_Init+0x174>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002480 <HAL_DMA_Init+0x1d8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d022      	beq.n	800241c <HAL_DMA_Init+0x174>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a2a      	ldr	r2, [pc, #168]	@ (8002484 <HAL_DMA_Init+0x1dc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d01d      	beq.n	800241c <HAL_DMA_Init+0x174>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a28      	ldr	r2, [pc, #160]	@ (8002488 <HAL_DMA_Init+0x1e0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d018      	beq.n	800241c <HAL_DMA_Init+0x174>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a27      	ldr	r2, [pc, #156]	@ (800248c <HAL_DMA_Init+0x1e4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d013      	beq.n	800241c <HAL_DMA_Init+0x174>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a25      	ldr	r2, [pc, #148]	@ (8002490 <HAL_DMA_Init+0x1e8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00e      	beq.n	800241c <HAL_DMA_Init+0x174>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a24      	ldr	r2, [pc, #144]	@ (8002494 <HAL_DMA_Init+0x1ec>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d009      	beq.n	800241c <HAL_DMA_Init+0x174>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a22      	ldr	r2, [pc, #136]	@ (8002498 <HAL_DMA_Init+0x1f0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d004      	beq.n	800241c <HAL_DMA_Init+0x174>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a21      	ldr	r2, [pc, #132]	@ (800249c <HAL_DMA_Init+0x1f4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d108      	bne.n	800242e <HAL_DMA_Init+0x186>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0201 	bic.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e007      	b.n	800243e <HAL_DMA_Init+0x196>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800243e:	e02f      	b.n	80024a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002440:	f7ff fd6e 	bl	8001f20 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b05      	cmp	r3, #5
 800244c:	d928      	bls.n	80024a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2203      	movs	r2, #3
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e246      	b.n	80028ee <HAL_DMA_Init+0x646>
 8002460:	40020010 	.word	0x40020010
 8002464:	40020028 	.word	0x40020028
 8002468:	40020040 	.word	0x40020040
 800246c:	40020058 	.word	0x40020058
 8002470:	40020070 	.word	0x40020070
 8002474:	40020088 	.word	0x40020088
 8002478:	400200a0 	.word	0x400200a0
 800247c:	400200b8 	.word	0x400200b8
 8002480:	40020410 	.word	0x40020410
 8002484:	40020428 	.word	0x40020428
 8002488:	40020440 	.word	0x40020440
 800248c:	40020458 	.word	0x40020458
 8002490:	40020470 	.word	0x40020470
 8002494:	40020488 	.word	0x40020488
 8002498:	400204a0 	.word	0x400204a0
 800249c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1c8      	bne.n	8002440 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4b83      	ldr	r3, [pc, #524]	@ (80026c8 <HAL_DMA_Init+0x420>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80024c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d107      	bne.n	8002504 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fc:	4313      	orrs	r3, r2
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002504:	4b71      	ldr	r3, [pc, #452]	@ (80026cc <HAL_DMA_Init+0x424>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b71      	ldr	r3, [pc, #452]	@ (80026d0 <HAL_DMA_Init+0x428>)
 800250a:	4013      	ands	r3, r2
 800250c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002510:	d328      	bcc.n	8002564 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b28      	cmp	r3, #40	@ 0x28
 8002518:	d903      	bls.n	8002522 <HAL_DMA_Init+0x27a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002520:	d917      	bls.n	8002552 <HAL_DMA_Init+0x2aa>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b3e      	cmp	r3, #62	@ 0x3e
 8002528:	d903      	bls.n	8002532 <HAL_DMA_Init+0x28a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b42      	cmp	r3, #66	@ 0x42
 8002530:	d90f      	bls.n	8002552 <HAL_DMA_Init+0x2aa>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b46      	cmp	r3, #70	@ 0x46
 8002538:	d903      	bls.n	8002542 <HAL_DMA_Init+0x29a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b48      	cmp	r3, #72	@ 0x48
 8002540:	d907      	bls.n	8002552 <HAL_DMA_Init+0x2aa>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b4e      	cmp	r3, #78	@ 0x4e
 8002548:	d905      	bls.n	8002556 <HAL_DMA_Init+0x2ae>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b52      	cmp	r3, #82	@ 0x52
 8002550:	d801      	bhi.n	8002556 <HAL_DMA_Init+0x2ae>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_DMA_Init+0x2b0>
 8002556:	2300      	movs	r3, #0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002562:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f023 0307 	bic.w	r3, r3, #7
 800257a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	2b04      	cmp	r3, #4
 800258c:	d117      	bne.n	80025be <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00e      	beq.n	80025be <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f002 f821 	bl	80045e8 <DMA_CheckFifoParam>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2240      	movs	r2, #64	@ 0x40
 80025b0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e197      	b.n	80028ee <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f001 ff5c 	bl	8004484 <DMA_CalcBaseAndBitshift>
 80025cc:	4603      	mov	r3, r0
 80025ce:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	223f      	movs	r2, #63	@ 0x3f
 80025da:	409a      	lsls	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	e0cd      	b.n	800277e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a3b      	ldr	r2, [pc, #236]	@ (80026d4 <HAL_DMA_Init+0x42c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d022      	beq.n	8002632 <HAL_DMA_Init+0x38a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a39      	ldr	r2, [pc, #228]	@ (80026d8 <HAL_DMA_Init+0x430>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d01d      	beq.n	8002632 <HAL_DMA_Init+0x38a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a38      	ldr	r2, [pc, #224]	@ (80026dc <HAL_DMA_Init+0x434>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d018      	beq.n	8002632 <HAL_DMA_Init+0x38a>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a36      	ldr	r2, [pc, #216]	@ (80026e0 <HAL_DMA_Init+0x438>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_DMA_Init+0x38a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a35      	ldr	r2, [pc, #212]	@ (80026e4 <HAL_DMA_Init+0x43c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d00e      	beq.n	8002632 <HAL_DMA_Init+0x38a>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a33      	ldr	r2, [pc, #204]	@ (80026e8 <HAL_DMA_Init+0x440>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d009      	beq.n	8002632 <HAL_DMA_Init+0x38a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a32      	ldr	r2, [pc, #200]	@ (80026ec <HAL_DMA_Init+0x444>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d004      	beq.n	8002632 <HAL_DMA_Init+0x38a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a30      	ldr	r2, [pc, #192]	@ (80026f0 <HAL_DMA_Init+0x448>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d101      	bne.n	8002636 <HAL_DMA_Init+0x38e>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_DMA_Init+0x390>
 8002636:	2300      	movs	r3, #0
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 8097 	beq.w	800276c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a24      	ldr	r2, [pc, #144]	@ (80026d4 <HAL_DMA_Init+0x42c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d021      	beq.n	800268c <HAL_DMA_Init+0x3e4>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a22      	ldr	r2, [pc, #136]	@ (80026d8 <HAL_DMA_Init+0x430>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d01c      	beq.n	800268c <HAL_DMA_Init+0x3e4>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a21      	ldr	r2, [pc, #132]	@ (80026dc <HAL_DMA_Init+0x434>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d017      	beq.n	800268c <HAL_DMA_Init+0x3e4>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1f      	ldr	r2, [pc, #124]	@ (80026e0 <HAL_DMA_Init+0x438>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d012      	beq.n	800268c <HAL_DMA_Init+0x3e4>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1e      	ldr	r2, [pc, #120]	@ (80026e4 <HAL_DMA_Init+0x43c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00d      	beq.n	800268c <HAL_DMA_Init+0x3e4>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1c      	ldr	r2, [pc, #112]	@ (80026e8 <HAL_DMA_Init+0x440>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d008      	beq.n	800268c <HAL_DMA_Init+0x3e4>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1b      	ldr	r2, [pc, #108]	@ (80026ec <HAL_DMA_Init+0x444>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d003      	beq.n	800268c <HAL_DMA_Init+0x3e4>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a19      	ldr	r2, [pc, #100]	@ (80026f0 <HAL_DMA_Init+0x448>)
 800268a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <HAL_DMA_Init+0x44c>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b40      	cmp	r3, #64	@ 0x40
 80026b2:	d021      	beq.n	80026f8 <HAL_DMA_Init+0x450>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b80      	cmp	r3, #128	@ 0x80
 80026ba:	d102      	bne.n	80026c2 <HAL_DMA_Init+0x41a>
 80026bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026c0:	e01b      	b.n	80026fa <HAL_DMA_Init+0x452>
 80026c2:	2300      	movs	r3, #0
 80026c4:	e019      	b.n	80026fa <HAL_DMA_Init+0x452>
 80026c6:	bf00      	nop
 80026c8:	fe10803f 	.word	0xfe10803f
 80026cc:	5c001000 	.word	0x5c001000
 80026d0:	ffff0000 	.word	0xffff0000
 80026d4:	58025408 	.word	0x58025408
 80026d8:	5802541c 	.word	0x5802541c
 80026dc:	58025430 	.word	0x58025430
 80026e0:	58025444 	.word	0x58025444
 80026e4:	58025458 	.word	0x58025458
 80026e8:	5802546c 	.word	0x5802546c
 80026ec:	58025480 	.word	0x58025480
 80026f0:	58025494 	.word	0x58025494
 80026f4:	fffe000f 	.word	0xfffe000f
 80026f8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68d2      	ldr	r2, [r2, #12]
 80026fe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002700:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002708:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002710:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002718:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002720:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002728:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	4b6e      	ldr	r3, [pc, #440]	@ (80028f8 <HAL_DMA_Init+0x650>)
 8002740:	4413      	add	r3, r2
 8002742:	4a6e      	ldr	r2, [pc, #440]	@ (80028fc <HAL_DMA_Init+0x654>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	009a      	lsls	r2, r3, #2
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f001 fe97 	bl	8004484 <DMA_CalcBaseAndBitshift>
 8002756:	4603      	mov	r3, r0
 8002758:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	2201      	movs	r2, #1
 8002764:	409a      	lsls	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	e008      	b.n	800277e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2240      	movs	r2, #64	@ 0x40
 8002770:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2203      	movs	r2, #3
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e0b7      	b.n	80028ee <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a5f      	ldr	r2, [pc, #380]	@ (8002900 <HAL_DMA_Init+0x658>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d072      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a5d      	ldr	r2, [pc, #372]	@ (8002904 <HAL_DMA_Init+0x65c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d06d      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a5c      	ldr	r2, [pc, #368]	@ (8002908 <HAL_DMA_Init+0x660>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d068      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a5a      	ldr	r2, [pc, #360]	@ (800290c <HAL_DMA_Init+0x664>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d063      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a59      	ldr	r2, [pc, #356]	@ (8002910 <HAL_DMA_Init+0x668>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d05e      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a57      	ldr	r2, [pc, #348]	@ (8002914 <HAL_DMA_Init+0x66c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d059      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a56      	ldr	r2, [pc, #344]	@ (8002918 <HAL_DMA_Init+0x670>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d054      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a54      	ldr	r2, [pc, #336]	@ (800291c <HAL_DMA_Init+0x674>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d04f      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a53      	ldr	r2, [pc, #332]	@ (8002920 <HAL_DMA_Init+0x678>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d04a      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a51      	ldr	r2, [pc, #324]	@ (8002924 <HAL_DMA_Init+0x67c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d045      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a50      	ldr	r2, [pc, #320]	@ (8002928 <HAL_DMA_Init+0x680>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d040      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a4e      	ldr	r2, [pc, #312]	@ (800292c <HAL_DMA_Init+0x684>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d03b      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a4d      	ldr	r2, [pc, #308]	@ (8002930 <HAL_DMA_Init+0x688>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d036      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a4b      	ldr	r2, [pc, #300]	@ (8002934 <HAL_DMA_Init+0x68c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d031      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a4a      	ldr	r2, [pc, #296]	@ (8002938 <HAL_DMA_Init+0x690>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d02c      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a48      	ldr	r2, [pc, #288]	@ (800293c <HAL_DMA_Init+0x694>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d027      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a47      	ldr	r2, [pc, #284]	@ (8002940 <HAL_DMA_Init+0x698>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d022      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a45      	ldr	r2, [pc, #276]	@ (8002944 <HAL_DMA_Init+0x69c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d01d      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a44      	ldr	r2, [pc, #272]	@ (8002948 <HAL_DMA_Init+0x6a0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d018      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a42      	ldr	r2, [pc, #264]	@ (800294c <HAL_DMA_Init+0x6a4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a41      	ldr	r2, [pc, #260]	@ (8002950 <HAL_DMA_Init+0x6a8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00e      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a3f      	ldr	r2, [pc, #252]	@ (8002954 <HAL_DMA_Init+0x6ac>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d009      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a3e      	ldr	r2, [pc, #248]	@ (8002958 <HAL_DMA_Init+0x6b0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d004      	beq.n	800286e <HAL_DMA_Init+0x5c6>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a3c      	ldr	r2, [pc, #240]	@ (800295c <HAL_DMA_Init+0x6b4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <HAL_DMA_Init+0x5ca>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_DMA_Init+0x5cc>
 8002872:	2300      	movs	r3, #0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d032      	beq.n	80028de <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f001 ff31 	bl	80046e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b80      	cmp	r3, #128	@ 0x80
 8002884:	d102      	bne.n	800288c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80028a0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d010      	beq.n	80028cc <HAL_DMA_Init+0x624>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d80c      	bhi.n	80028cc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f001 ffae 	bl	8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	e008      	b.n	80028de <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	a7fdabf8 	.word	0xa7fdabf8
 80028fc:	cccccccd 	.word	0xcccccccd
 8002900:	40020010 	.word	0x40020010
 8002904:	40020028 	.word	0x40020028
 8002908:	40020040 	.word	0x40020040
 800290c:	40020058 	.word	0x40020058
 8002910:	40020070 	.word	0x40020070
 8002914:	40020088 	.word	0x40020088
 8002918:	400200a0 	.word	0x400200a0
 800291c:	400200b8 	.word	0x400200b8
 8002920:	40020410 	.word	0x40020410
 8002924:	40020428 	.word	0x40020428
 8002928:	40020440 	.word	0x40020440
 800292c:	40020458 	.word	0x40020458
 8002930:	40020470 	.word	0x40020470
 8002934:	40020488 	.word	0x40020488
 8002938:	400204a0 	.word	0x400204a0
 800293c:	400204b8 	.word	0x400204b8
 8002940:	58025408 	.word	0x58025408
 8002944:	5802541c 	.word	0x5802541c
 8002948:	58025430 	.word	0x58025430
 800294c:	58025444 	.word	0x58025444
 8002950:	58025458 	.word	0x58025458
 8002954:	5802546c 	.word	0x5802546c
 8002958:	58025480 	.word	0x58025480
 800295c:	58025494 	.word	0x58025494

08002960 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e226      	b.n	8002dca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_DMA_Start_IT+0x2a>
 8002986:	2302      	movs	r3, #2
 8002988:	e21f      	b.n	8002dca <HAL_DMA_Start_IT+0x46a>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	f040 820a 	bne.w	8002db4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a68      	ldr	r2, [pc, #416]	@ (8002b54 <HAL_DMA_Start_IT+0x1f4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d04a      	beq.n	8002a4e <HAL_DMA_Start_IT+0xee>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a66      	ldr	r2, [pc, #408]	@ (8002b58 <HAL_DMA_Start_IT+0x1f8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d045      	beq.n	8002a4e <HAL_DMA_Start_IT+0xee>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a65      	ldr	r2, [pc, #404]	@ (8002b5c <HAL_DMA_Start_IT+0x1fc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d040      	beq.n	8002a4e <HAL_DMA_Start_IT+0xee>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a63      	ldr	r2, [pc, #396]	@ (8002b60 <HAL_DMA_Start_IT+0x200>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d03b      	beq.n	8002a4e <HAL_DMA_Start_IT+0xee>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a62      	ldr	r2, [pc, #392]	@ (8002b64 <HAL_DMA_Start_IT+0x204>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d036      	beq.n	8002a4e <HAL_DMA_Start_IT+0xee>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a60      	ldr	r2, [pc, #384]	@ (8002b68 <HAL_DMA_Start_IT+0x208>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d031      	beq.n	8002a4e <HAL_DMA_Start_IT+0xee>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a5f      	ldr	r2, [pc, #380]	@ (8002b6c <HAL_DMA_Start_IT+0x20c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d02c      	beq.n	8002a4e <HAL_DMA_Start_IT+0xee>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002b70 <HAL_DMA_Start_IT+0x210>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d027      	beq.n	8002a4e <HAL_DMA_Start_IT+0xee>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a5c      	ldr	r2, [pc, #368]	@ (8002b74 <HAL_DMA_Start_IT+0x214>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d022      	beq.n	8002a4e <HAL_DMA_Start_IT+0xee>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a5a      	ldr	r2, [pc, #360]	@ (8002b78 <HAL_DMA_Start_IT+0x218>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d01d      	beq.n	8002a4e <HAL_DMA_Start_IT+0xee>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a59      	ldr	r2, [pc, #356]	@ (8002b7c <HAL_DMA_Start_IT+0x21c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d018      	beq.n	8002a4e <HAL_DMA_Start_IT+0xee>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a57      	ldr	r2, [pc, #348]	@ (8002b80 <HAL_DMA_Start_IT+0x220>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_DMA_Start_IT+0xee>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a56      	ldr	r2, [pc, #344]	@ (8002b84 <HAL_DMA_Start_IT+0x224>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00e      	beq.n	8002a4e <HAL_DMA_Start_IT+0xee>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a54      	ldr	r2, [pc, #336]	@ (8002b88 <HAL_DMA_Start_IT+0x228>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d009      	beq.n	8002a4e <HAL_DMA_Start_IT+0xee>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a53      	ldr	r2, [pc, #332]	@ (8002b8c <HAL_DMA_Start_IT+0x22c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <HAL_DMA_Start_IT+0xee>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a51      	ldr	r2, [pc, #324]	@ (8002b90 <HAL_DMA_Start_IT+0x230>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d108      	bne.n	8002a60 <HAL_DMA_Start_IT+0x100>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e007      	b.n	8002a70 <HAL_DMA_Start_IT+0x110>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f001 fb58 	bl	800412c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a34      	ldr	r2, [pc, #208]	@ (8002b54 <HAL_DMA_Start_IT+0x1f4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d04a      	beq.n	8002b1c <HAL_DMA_Start_IT+0x1bc>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a33      	ldr	r2, [pc, #204]	@ (8002b58 <HAL_DMA_Start_IT+0x1f8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d045      	beq.n	8002b1c <HAL_DMA_Start_IT+0x1bc>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a31      	ldr	r2, [pc, #196]	@ (8002b5c <HAL_DMA_Start_IT+0x1fc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d040      	beq.n	8002b1c <HAL_DMA_Start_IT+0x1bc>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a30      	ldr	r2, [pc, #192]	@ (8002b60 <HAL_DMA_Start_IT+0x200>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d03b      	beq.n	8002b1c <HAL_DMA_Start_IT+0x1bc>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8002b64 <HAL_DMA_Start_IT+0x204>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d036      	beq.n	8002b1c <HAL_DMA_Start_IT+0x1bc>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8002b68 <HAL_DMA_Start_IT+0x208>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d031      	beq.n	8002b1c <HAL_DMA_Start_IT+0x1bc>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2b      	ldr	r2, [pc, #172]	@ (8002b6c <HAL_DMA_Start_IT+0x20c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d02c      	beq.n	8002b1c <HAL_DMA_Start_IT+0x1bc>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8002b70 <HAL_DMA_Start_IT+0x210>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d027      	beq.n	8002b1c <HAL_DMA_Start_IT+0x1bc>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a28      	ldr	r2, [pc, #160]	@ (8002b74 <HAL_DMA_Start_IT+0x214>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d022      	beq.n	8002b1c <HAL_DMA_Start_IT+0x1bc>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a27      	ldr	r2, [pc, #156]	@ (8002b78 <HAL_DMA_Start_IT+0x218>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d01d      	beq.n	8002b1c <HAL_DMA_Start_IT+0x1bc>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a25      	ldr	r2, [pc, #148]	@ (8002b7c <HAL_DMA_Start_IT+0x21c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d018      	beq.n	8002b1c <HAL_DMA_Start_IT+0x1bc>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a24      	ldr	r2, [pc, #144]	@ (8002b80 <HAL_DMA_Start_IT+0x220>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d013      	beq.n	8002b1c <HAL_DMA_Start_IT+0x1bc>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a22      	ldr	r2, [pc, #136]	@ (8002b84 <HAL_DMA_Start_IT+0x224>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00e      	beq.n	8002b1c <HAL_DMA_Start_IT+0x1bc>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a21      	ldr	r2, [pc, #132]	@ (8002b88 <HAL_DMA_Start_IT+0x228>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d009      	beq.n	8002b1c <HAL_DMA_Start_IT+0x1bc>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b8c <HAL_DMA_Start_IT+0x22c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d004      	beq.n	8002b1c <HAL_DMA_Start_IT+0x1bc>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1e      	ldr	r2, [pc, #120]	@ (8002b90 <HAL_DMA_Start_IT+0x230>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d101      	bne.n	8002b20 <HAL_DMA_Start_IT+0x1c0>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <HAL_DMA_Start_IT+0x1c2>
 8002b20:	2300      	movs	r3, #0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d036      	beq.n	8002b94 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 021e 	bic.w	r2, r3, #30
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0216 	orr.w	r2, r2, #22
 8002b38:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d03e      	beq.n	8002bc0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0208 	orr.w	r2, r2, #8
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e035      	b.n	8002bc0 <HAL_DMA_Start_IT+0x260>
 8002b54:	40020010 	.word	0x40020010
 8002b58:	40020028 	.word	0x40020028
 8002b5c:	40020040 	.word	0x40020040
 8002b60:	40020058 	.word	0x40020058
 8002b64:	40020070 	.word	0x40020070
 8002b68:	40020088 	.word	0x40020088
 8002b6c:	400200a0 	.word	0x400200a0
 8002b70:	400200b8 	.word	0x400200b8
 8002b74:	40020410 	.word	0x40020410
 8002b78:	40020428 	.word	0x40020428
 8002b7c:	40020440 	.word	0x40020440
 8002b80:	40020458 	.word	0x40020458
 8002b84:	40020470 	.word	0x40020470
 8002b88:	40020488 	.word	0x40020488
 8002b8c:	400204a0 	.word	0x400204a0
 8002b90:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 020e 	bic.w	r2, r3, #14
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 020a 	orr.w	r2, r2, #10
 8002ba6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d007      	beq.n	8002bc0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0204 	orr.w	r2, r2, #4
 8002bbe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a83      	ldr	r2, [pc, #524]	@ (8002dd4 <HAL_DMA_Start_IT+0x474>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d072      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a82      	ldr	r2, [pc, #520]	@ (8002dd8 <HAL_DMA_Start_IT+0x478>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d06d      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a80      	ldr	r2, [pc, #512]	@ (8002ddc <HAL_DMA_Start_IT+0x47c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d068      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a7f      	ldr	r2, [pc, #508]	@ (8002de0 <HAL_DMA_Start_IT+0x480>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d063      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a7d      	ldr	r2, [pc, #500]	@ (8002de4 <HAL_DMA_Start_IT+0x484>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d05e      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a7c      	ldr	r2, [pc, #496]	@ (8002de8 <HAL_DMA_Start_IT+0x488>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d059      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a7a      	ldr	r2, [pc, #488]	@ (8002dec <HAL_DMA_Start_IT+0x48c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d054      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a79      	ldr	r2, [pc, #484]	@ (8002df0 <HAL_DMA_Start_IT+0x490>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d04f      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a77      	ldr	r2, [pc, #476]	@ (8002df4 <HAL_DMA_Start_IT+0x494>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d04a      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a76      	ldr	r2, [pc, #472]	@ (8002df8 <HAL_DMA_Start_IT+0x498>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d045      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a74      	ldr	r2, [pc, #464]	@ (8002dfc <HAL_DMA_Start_IT+0x49c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d040      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a73      	ldr	r2, [pc, #460]	@ (8002e00 <HAL_DMA_Start_IT+0x4a0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d03b      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a71      	ldr	r2, [pc, #452]	@ (8002e04 <HAL_DMA_Start_IT+0x4a4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d036      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a70      	ldr	r2, [pc, #448]	@ (8002e08 <HAL_DMA_Start_IT+0x4a8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d031      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a6e      	ldr	r2, [pc, #440]	@ (8002e0c <HAL_DMA_Start_IT+0x4ac>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d02c      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a6d      	ldr	r2, [pc, #436]	@ (8002e10 <HAL_DMA_Start_IT+0x4b0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d027      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6b      	ldr	r2, [pc, #428]	@ (8002e14 <HAL_DMA_Start_IT+0x4b4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d022      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6a      	ldr	r2, [pc, #424]	@ (8002e18 <HAL_DMA_Start_IT+0x4b8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d01d      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a68      	ldr	r2, [pc, #416]	@ (8002e1c <HAL_DMA_Start_IT+0x4bc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d018      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a67      	ldr	r2, [pc, #412]	@ (8002e20 <HAL_DMA_Start_IT+0x4c0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d013      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a65      	ldr	r2, [pc, #404]	@ (8002e24 <HAL_DMA_Start_IT+0x4c4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00e      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a64      	ldr	r2, [pc, #400]	@ (8002e28 <HAL_DMA_Start_IT+0x4c8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d009      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a62      	ldr	r2, [pc, #392]	@ (8002e2c <HAL_DMA_Start_IT+0x4cc>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d004      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x350>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a61      	ldr	r2, [pc, #388]	@ (8002e30 <HAL_DMA_Start_IT+0x4d0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d101      	bne.n	8002cb4 <HAL_DMA_Start_IT+0x354>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_DMA_Start_IT+0x356>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d01a      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d007      	beq.n	8002cd8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cd6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a37      	ldr	r2, [pc, #220]	@ (8002dd4 <HAL_DMA_Start_IT+0x474>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d04a      	beq.n	8002d90 <HAL_DMA_Start_IT+0x430>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a36      	ldr	r2, [pc, #216]	@ (8002dd8 <HAL_DMA_Start_IT+0x478>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d045      	beq.n	8002d90 <HAL_DMA_Start_IT+0x430>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a34      	ldr	r2, [pc, #208]	@ (8002ddc <HAL_DMA_Start_IT+0x47c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d040      	beq.n	8002d90 <HAL_DMA_Start_IT+0x430>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a33      	ldr	r2, [pc, #204]	@ (8002de0 <HAL_DMA_Start_IT+0x480>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d03b      	beq.n	8002d90 <HAL_DMA_Start_IT+0x430>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a31      	ldr	r2, [pc, #196]	@ (8002de4 <HAL_DMA_Start_IT+0x484>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d036      	beq.n	8002d90 <HAL_DMA_Start_IT+0x430>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a30      	ldr	r2, [pc, #192]	@ (8002de8 <HAL_DMA_Start_IT+0x488>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d031      	beq.n	8002d90 <HAL_DMA_Start_IT+0x430>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2e      	ldr	r2, [pc, #184]	@ (8002dec <HAL_DMA_Start_IT+0x48c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d02c      	beq.n	8002d90 <HAL_DMA_Start_IT+0x430>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002df0 <HAL_DMA_Start_IT+0x490>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d027      	beq.n	8002d90 <HAL_DMA_Start_IT+0x430>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a2b      	ldr	r2, [pc, #172]	@ (8002df4 <HAL_DMA_Start_IT+0x494>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d022      	beq.n	8002d90 <HAL_DMA_Start_IT+0x430>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002df8 <HAL_DMA_Start_IT+0x498>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d01d      	beq.n	8002d90 <HAL_DMA_Start_IT+0x430>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a28      	ldr	r2, [pc, #160]	@ (8002dfc <HAL_DMA_Start_IT+0x49c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d018      	beq.n	8002d90 <HAL_DMA_Start_IT+0x430>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a27      	ldr	r2, [pc, #156]	@ (8002e00 <HAL_DMA_Start_IT+0x4a0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d013      	beq.n	8002d90 <HAL_DMA_Start_IT+0x430>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a25      	ldr	r2, [pc, #148]	@ (8002e04 <HAL_DMA_Start_IT+0x4a4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00e      	beq.n	8002d90 <HAL_DMA_Start_IT+0x430>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a24      	ldr	r2, [pc, #144]	@ (8002e08 <HAL_DMA_Start_IT+0x4a8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d009      	beq.n	8002d90 <HAL_DMA_Start_IT+0x430>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a22      	ldr	r2, [pc, #136]	@ (8002e0c <HAL_DMA_Start_IT+0x4ac>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d004      	beq.n	8002d90 <HAL_DMA_Start_IT+0x430>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a21      	ldr	r2, [pc, #132]	@ (8002e10 <HAL_DMA_Start_IT+0x4b0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d108      	bne.n	8002da2 <HAL_DMA_Start_IT+0x442>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	e012      	b.n	8002dc8 <HAL_DMA_Start_IT+0x468>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e009      	b.n	8002dc8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40020010 	.word	0x40020010
 8002dd8:	40020028 	.word	0x40020028
 8002ddc:	40020040 	.word	0x40020040
 8002de0:	40020058 	.word	0x40020058
 8002de4:	40020070 	.word	0x40020070
 8002de8:	40020088 	.word	0x40020088
 8002dec:	400200a0 	.word	0x400200a0
 8002df0:	400200b8 	.word	0x400200b8
 8002df4:	40020410 	.word	0x40020410
 8002df8:	40020428 	.word	0x40020428
 8002dfc:	40020440 	.word	0x40020440
 8002e00:	40020458 	.word	0x40020458
 8002e04:	40020470 	.word	0x40020470
 8002e08:	40020488 	.word	0x40020488
 8002e0c:	400204a0 	.word	0x400204a0
 8002e10:	400204b8 	.word	0x400204b8
 8002e14:	58025408 	.word	0x58025408
 8002e18:	5802541c 	.word	0x5802541c
 8002e1c:	58025430 	.word	0x58025430
 8002e20:	58025444 	.word	0x58025444
 8002e24:	58025458 	.word	0x58025458
 8002e28:	5802546c 	.word	0x5802546c
 8002e2c:	58025480 	.word	0x58025480
 8002e30:	58025494 	.word	0x58025494

08002e34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e237      	b.n	80032b6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d004      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2280      	movs	r2, #128	@ 0x80
 8002e56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e22c      	b.n	80032b6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a5c      	ldr	r2, [pc, #368]	@ (8002fd4 <HAL_DMA_Abort_IT+0x1a0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d04a      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a5b      	ldr	r2, [pc, #364]	@ (8002fd8 <HAL_DMA_Abort_IT+0x1a4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d045      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a59      	ldr	r2, [pc, #356]	@ (8002fdc <HAL_DMA_Abort_IT+0x1a8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d040      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a58      	ldr	r2, [pc, #352]	@ (8002fe0 <HAL_DMA_Abort_IT+0x1ac>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d03b      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a56      	ldr	r2, [pc, #344]	@ (8002fe4 <HAL_DMA_Abort_IT+0x1b0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d036      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a55      	ldr	r2, [pc, #340]	@ (8002fe8 <HAL_DMA_Abort_IT+0x1b4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d031      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a53      	ldr	r2, [pc, #332]	@ (8002fec <HAL_DMA_Abort_IT+0x1b8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d02c      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a52      	ldr	r2, [pc, #328]	@ (8002ff0 <HAL_DMA_Abort_IT+0x1bc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d027      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a50      	ldr	r2, [pc, #320]	@ (8002ff4 <HAL_DMA_Abort_IT+0x1c0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d022      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a4f      	ldr	r2, [pc, #316]	@ (8002ff8 <HAL_DMA_Abort_IT+0x1c4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d01d      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a4d      	ldr	r2, [pc, #308]	@ (8002ffc <HAL_DMA_Abort_IT+0x1c8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d018      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a4c      	ldr	r2, [pc, #304]	@ (8003000 <HAL_DMA_Abort_IT+0x1cc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d013      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a4a      	ldr	r2, [pc, #296]	@ (8003004 <HAL_DMA_Abort_IT+0x1d0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00e      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a49      	ldr	r2, [pc, #292]	@ (8003008 <HAL_DMA_Abort_IT+0x1d4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d009      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a47      	ldr	r2, [pc, #284]	@ (800300c <HAL_DMA_Abort_IT+0x1d8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d004      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a46      	ldr	r2, [pc, #280]	@ (8003010 <HAL_DMA_Abort_IT+0x1dc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d101      	bne.n	8002f00 <HAL_DMA_Abort_IT+0xcc>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_DMA_Abort_IT+0xce>
 8002f00:	2300      	movs	r3, #0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8086 	beq.w	8003014 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2f      	ldr	r2, [pc, #188]	@ (8002fd4 <HAL_DMA_Abort_IT+0x1a0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d04a      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x17c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8002fd8 <HAL_DMA_Abort_IT+0x1a4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d045      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x17c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2c      	ldr	r2, [pc, #176]	@ (8002fdc <HAL_DMA_Abort_IT+0x1a8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d040      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x17c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2b      	ldr	r2, [pc, #172]	@ (8002fe0 <HAL_DMA_Abort_IT+0x1ac>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d03b      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x17c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a29      	ldr	r2, [pc, #164]	@ (8002fe4 <HAL_DMA_Abort_IT+0x1b0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d036      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x17c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a28      	ldr	r2, [pc, #160]	@ (8002fe8 <HAL_DMA_Abort_IT+0x1b4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d031      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x17c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a26      	ldr	r2, [pc, #152]	@ (8002fec <HAL_DMA_Abort_IT+0x1b8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d02c      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x17c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a25      	ldr	r2, [pc, #148]	@ (8002ff0 <HAL_DMA_Abort_IT+0x1bc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d027      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x17c>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a23      	ldr	r2, [pc, #140]	@ (8002ff4 <HAL_DMA_Abort_IT+0x1c0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d022      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x17c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a22      	ldr	r2, [pc, #136]	@ (8002ff8 <HAL_DMA_Abort_IT+0x1c4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d01d      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x17c>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a20      	ldr	r2, [pc, #128]	@ (8002ffc <HAL_DMA_Abort_IT+0x1c8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d018      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x17c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1f      	ldr	r2, [pc, #124]	@ (8003000 <HAL_DMA_Abort_IT+0x1cc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x17c>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003004 <HAL_DMA_Abort_IT+0x1d0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00e      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x17c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1c      	ldr	r2, [pc, #112]	@ (8003008 <HAL_DMA_Abort_IT+0x1d4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x17c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800300c <HAL_DMA_Abort_IT+0x1d8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x17c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a19      	ldr	r2, [pc, #100]	@ (8003010 <HAL_DMA_Abort_IT+0x1dc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d108      	bne.n	8002fc2 <HAL_DMA_Abort_IT+0x18e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e178      	b.n	80032b4 <HAL_DMA_Abort_IT+0x480>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	e16f      	b.n	80032b4 <HAL_DMA_Abort_IT+0x480>
 8002fd4:	40020010 	.word	0x40020010
 8002fd8:	40020028 	.word	0x40020028
 8002fdc:	40020040 	.word	0x40020040
 8002fe0:	40020058 	.word	0x40020058
 8002fe4:	40020070 	.word	0x40020070
 8002fe8:	40020088 	.word	0x40020088
 8002fec:	400200a0 	.word	0x400200a0
 8002ff0:	400200b8 	.word	0x400200b8
 8002ff4:	40020410 	.word	0x40020410
 8002ff8:	40020428 	.word	0x40020428
 8002ffc:	40020440 	.word	0x40020440
 8003000:	40020458 	.word	0x40020458
 8003004:	40020470 	.word	0x40020470
 8003008:	40020488 	.word	0x40020488
 800300c:	400204a0 	.word	0x400204a0
 8003010:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 020e 	bic.w	r2, r2, #14
 8003022:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a6c      	ldr	r2, [pc, #432]	@ (80031dc <HAL_DMA_Abort_IT+0x3a8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d04a      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x290>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a6b      	ldr	r2, [pc, #428]	@ (80031e0 <HAL_DMA_Abort_IT+0x3ac>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d045      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x290>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a69      	ldr	r2, [pc, #420]	@ (80031e4 <HAL_DMA_Abort_IT+0x3b0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d040      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x290>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a68      	ldr	r2, [pc, #416]	@ (80031e8 <HAL_DMA_Abort_IT+0x3b4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d03b      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x290>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a66      	ldr	r2, [pc, #408]	@ (80031ec <HAL_DMA_Abort_IT+0x3b8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d036      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x290>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a65      	ldr	r2, [pc, #404]	@ (80031f0 <HAL_DMA_Abort_IT+0x3bc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d031      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x290>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a63      	ldr	r2, [pc, #396]	@ (80031f4 <HAL_DMA_Abort_IT+0x3c0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d02c      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x290>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a62      	ldr	r2, [pc, #392]	@ (80031f8 <HAL_DMA_Abort_IT+0x3c4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d027      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x290>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a60      	ldr	r2, [pc, #384]	@ (80031fc <HAL_DMA_Abort_IT+0x3c8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d022      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x290>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a5f      	ldr	r2, [pc, #380]	@ (8003200 <HAL_DMA_Abort_IT+0x3cc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d01d      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x290>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a5d      	ldr	r2, [pc, #372]	@ (8003204 <HAL_DMA_Abort_IT+0x3d0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d018      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x290>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a5c      	ldr	r2, [pc, #368]	@ (8003208 <HAL_DMA_Abort_IT+0x3d4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d013      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x290>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a5a      	ldr	r2, [pc, #360]	@ (800320c <HAL_DMA_Abort_IT+0x3d8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00e      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x290>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a59      	ldr	r2, [pc, #356]	@ (8003210 <HAL_DMA_Abort_IT+0x3dc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d009      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x290>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a57      	ldr	r2, [pc, #348]	@ (8003214 <HAL_DMA_Abort_IT+0x3e0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d004      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x290>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a56      	ldr	r2, [pc, #344]	@ (8003218 <HAL_DMA_Abort_IT+0x3e4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d108      	bne.n	80030d6 <HAL_DMA_Abort_IT+0x2a2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0201 	bic.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	e007      	b.n	80030e6 <HAL_DMA_Abort_IT+0x2b2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0201 	bic.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a3c      	ldr	r2, [pc, #240]	@ (80031dc <HAL_DMA_Abort_IT+0x3a8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d072      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a3a      	ldr	r2, [pc, #232]	@ (80031e0 <HAL_DMA_Abort_IT+0x3ac>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d06d      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a39      	ldr	r2, [pc, #228]	@ (80031e4 <HAL_DMA_Abort_IT+0x3b0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d068      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a37      	ldr	r2, [pc, #220]	@ (80031e8 <HAL_DMA_Abort_IT+0x3b4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d063      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a36      	ldr	r2, [pc, #216]	@ (80031ec <HAL_DMA_Abort_IT+0x3b8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d05e      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a34      	ldr	r2, [pc, #208]	@ (80031f0 <HAL_DMA_Abort_IT+0x3bc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d059      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a33      	ldr	r2, [pc, #204]	@ (80031f4 <HAL_DMA_Abort_IT+0x3c0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d054      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a31      	ldr	r2, [pc, #196]	@ (80031f8 <HAL_DMA_Abort_IT+0x3c4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d04f      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a30      	ldr	r2, [pc, #192]	@ (80031fc <HAL_DMA_Abort_IT+0x3c8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d04a      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a2e      	ldr	r2, [pc, #184]	@ (8003200 <HAL_DMA_Abort_IT+0x3cc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d045      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a2d      	ldr	r2, [pc, #180]	@ (8003204 <HAL_DMA_Abort_IT+0x3d0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d040      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a2b      	ldr	r2, [pc, #172]	@ (8003208 <HAL_DMA_Abort_IT+0x3d4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d03b      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a2a      	ldr	r2, [pc, #168]	@ (800320c <HAL_DMA_Abort_IT+0x3d8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d036      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a28      	ldr	r2, [pc, #160]	@ (8003210 <HAL_DMA_Abort_IT+0x3dc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d031      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a27      	ldr	r2, [pc, #156]	@ (8003214 <HAL_DMA_Abort_IT+0x3e0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d02c      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a25      	ldr	r2, [pc, #148]	@ (8003218 <HAL_DMA_Abort_IT+0x3e4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d027      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a24      	ldr	r2, [pc, #144]	@ (800321c <HAL_DMA_Abort_IT+0x3e8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d022      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a22      	ldr	r2, [pc, #136]	@ (8003220 <HAL_DMA_Abort_IT+0x3ec>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01d      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a21      	ldr	r2, [pc, #132]	@ (8003224 <HAL_DMA_Abort_IT+0x3f0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d018      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003228 <HAL_DMA_Abort_IT+0x3f4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1e      	ldr	r2, [pc, #120]	@ (800322c <HAL_DMA_Abort_IT+0x3f8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003230 <HAL_DMA_Abort_IT+0x3fc>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d009      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003234 <HAL_DMA_Abort_IT+0x400>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x3a2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a19      	ldr	r2, [pc, #100]	@ (8003238 <HAL_DMA_Abort_IT+0x404>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d132      	bne.n	800323c <HAL_DMA_Abort_IT+0x408>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e031      	b.n	800323e <HAL_DMA_Abort_IT+0x40a>
 80031da:	bf00      	nop
 80031dc:	40020010 	.word	0x40020010
 80031e0:	40020028 	.word	0x40020028
 80031e4:	40020040 	.word	0x40020040
 80031e8:	40020058 	.word	0x40020058
 80031ec:	40020070 	.word	0x40020070
 80031f0:	40020088 	.word	0x40020088
 80031f4:	400200a0 	.word	0x400200a0
 80031f8:	400200b8 	.word	0x400200b8
 80031fc:	40020410 	.word	0x40020410
 8003200:	40020428 	.word	0x40020428
 8003204:	40020440 	.word	0x40020440
 8003208:	40020458 	.word	0x40020458
 800320c:	40020470 	.word	0x40020470
 8003210:	40020488 	.word	0x40020488
 8003214:	400204a0 	.word	0x400204a0
 8003218:	400204b8 	.word	0x400204b8
 800321c:	58025408 	.word	0x58025408
 8003220:	5802541c 	.word	0x5802541c
 8003224:	58025430 	.word	0x58025430
 8003228:	58025444 	.word	0x58025444
 800322c:	58025458 	.word	0x58025458
 8003230:	5802546c 	.word	0x5802546c
 8003234:	58025480 	.word	0x58025480
 8003238:	58025494 	.word	0x58025494
 800323c:	2300      	movs	r3, #0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d028      	beq.n	8003294 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003250:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003256:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	2201      	movs	r2, #1
 8003262:	409a      	lsls	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003270:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00c      	beq.n	8003294 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003284:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003288:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003292:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop

080032c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	@ 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032cc:	4b67      	ldr	r3, [pc, #412]	@ (800346c <HAL_DMA_IRQHandler+0x1ac>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a67      	ldr	r2, [pc, #412]	@ (8003470 <HAL_DMA_IRQHandler+0x1b0>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	0a9b      	lsrs	r3, r3, #10
 80032d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a5f      	ldr	r2, [pc, #380]	@ (8003474 <HAL_DMA_IRQHandler+0x1b4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d04a      	beq.n	8003392 <HAL_DMA_IRQHandler+0xd2>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a5d      	ldr	r2, [pc, #372]	@ (8003478 <HAL_DMA_IRQHandler+0x1b8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d045      	beq.n	8003392 <HAL_DMA_IRQHandler+0xd2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a5c      	ldr	r2, [pc, #368]	@ (800347c <HAL_DMA_IRQHandler+0x1bc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d040      	beq.n	8003392 <HAL_DMA_IRQHandler+0xd2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a5a      	ldr	r2, [pc, #360]	@ (8003480 <HAL_DMA_IRQHandler+0x1c0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d03b      	beq.n	8003392 <HAL_DMA_IRQHandler+0xd2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a59      	ldr	r2, [pc, #356]	@ (8003484 <HAL_DMA_IRQHandler+0x1c4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d036      	beq.n	8003392 <HAL_DMA_IRQHandler+0xd2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a57      	ldr	r2, [pc, #348]	@ (8003488 <HAL_DMA_IRQHandler+0x1c8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d031      	beq.n	8003392 <HAL_DMA_IRQHandler+0xd2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a56      	ldr	r2, [pc, #344]	@ (800348c <HAL_DMA_IRQHandler+0x1cc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d02c      	beq.n	8003392 <HAL_DMA_IRQHandler+0xd2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a54      	ldr	r2, [pc, #336]	@ (8003490 <HAL_DMA_IRQHandler+0x1d0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d027      	beq.n	8003392 <HAL_DMA_IRQHandler+0xd2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a53      	ldr	r2, [pc, #332]	@ (8003494 <HAL_DMA_IRQHandler+0x1d4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d022      	beq.n	8003392 <HAL_DMA_IRQHandler+0xd2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a51      	ldr	r2, [pc, #324]	@ (8003498 <HAL_DMA_IRQHandler+0x1d8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d01d      	beq.n	8003392 <HAL_DMA_IRQHandler+0xd2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a50      	ldr	r2, [pc, #320]	@ (800349c <HAL_DMA_IRQHandler+0x1dc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d018      	beq.n	8003392 <HAL_DMA_IRQHandler+0xd2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a4e      	ldr	r2, [pc, #312]	@ (80034a0 <HAL_DMA_IRQHandler+0x1e0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <HAL_DMA_IRQHandler+0xd2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a4d      	ldr	r2, [pc, #308]	@ (80034a4 <HAL_DMA_IRQHandler+0x1e4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00e      	beq.n	8003392 <HAL_DMA_IRQHandler+0xd2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a4b      	ldr	r2, [pc, #300]	@ (80034a8 <HAL_DMA_IRQHandler+0x1e8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d009      	beq.n	8003392 <HAL_DMA_IRQHandler+0xd2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a4a      	ldr	r2, [pc, #296]	@ (80034ac <HAL_DMA_IRQHandler+0x1ec>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_DMA_IRQHandler+0xd2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a48      	ldr	r2, [pc, #288]	@ (80034b0 <HAL_DMA_IRQHandler+0x1f0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d101      	bne.n	8003396 <HAL_DMA_IRQHandler+0xd6>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <HAL_DMA_IRQHandler+0xd8>
 8003396:	2300      	movs	r3, #0
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 842b 	beq.w	8003bf4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2208      	movs	r2, #8
 80033a8:	409a      	lsls	r2, r3
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80a2 	beq.w	80034f8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003474 <HAL_DMA_IRQHandler+0x1b4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d04a      	beq.n	8003454 <HAL_DMA_IRQHandler+0x194>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003478 <HAL_DMA_IRQHandler+0x1b8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d045      	beq.n	8003454 <HAL_DMA_IRQHandler+0x194>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a2b      	ldr	r2, [pc, #172]	@ (800347c <HAL_DMA_IRQHandler+0x1bc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d040      	beq.n	8003454 <HAL_DMA_IRQHandler+0x194>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003480 <HAL_DMA_IRQHandler+0x1c0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d03b      	beq.n	8003454 <HAL_DMA_IRQHandler+0x194>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a28      	ldr	r2, [pc, #160]	@ (8003484 <HAL_DMA_IRQHandler+0x1c4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d036      	beq.n	8003454 <HAL_DMA_IRQHandler+0x194>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a27      	ldr	r2, [pc, #156]	@ (8003488 <HAL_DMA_IRQHandler+0x1c8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d031      	beq.n	8003454 <HAL_DMA_IRQHandler+0x194>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a25      	ldr	r2, [pc, #148]	@ (800348c <HAL_DMA_IRQHandler+0x1cc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d02c      	beq.n	8003454 <HAL_DMA_IRQHandler+0x194>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a24      	ldr	r2, [pc, #144]	@ (8003490 <HAL_DMA_IRQHandler+0x1d0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d027      	beq.n	8003454 <HAL_DMA_IRQHandler+0x194>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a22      	ldr	r2, [pc, #136]	@ (8003494 <HAL_DMA_IRQHandler+0x1d4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d022      	beq.n	8003454 <HAL_DMA_IRQHandler+0x194>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a21      	ldr	r2, [pc, #132]	@ (8003498 <HAL_DMA_IRQHandler+0x1d8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d01d      	beq.n	8003454 <HAL_DMA_IRQHandler+0x194>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a1f      	ldr	r2, [pc, #124]	@ (800349c <HAL_DMA_IRQHandler+0x1dc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d018      	beq.n	8003454 <HAL_DMA_IRQHandler+0x194>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a1e      	ldr	r2, [pc, #120]	@ (80034a0 <HAL_DMA_IRQHandler+0x1e0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d013      	beq.n	8003454 <HAL_DMA_IRQHandler+0x194>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a1c      	ldr	r2, [pc, #112]	@ (80034a4 <HAL_DMA_IRQHandler+0x1e4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00e      	beq.n	8003454 <HAL_DMA_IRQHandler+0x194>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a1b      	ldr	r2, [pc, #108]	@ (80034a8 <HAL_DMA_IRQHandler+0x1e8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d009      	beq.n	8003454 <HAL_DMA_IRQHandler+0x194>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a19      	ldr	r2, [pc, #100]	@ (80034ac <HAL_DMA_IRQHandler+0x1ec>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d004      	beq.n	8003454 <HAL_DMA_IRQHandler+0x194>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a18      	ldr	r2, [pc, #96]	@ (80034b0 <HAL_DMA_IRQHandler+0x1f0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d12f      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x1f4>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	bf14      	ite	ne
 8003462:	2301      	movne	r3, #1
 8003464:	2300      	moveq	r3, #0
 8003466:	b2db      	uxtb	r3, r3
 8003468:	e02e      	b.n	80034c8 <HAL_DMA_IRQHandler+0x208>
 800346a:	bf00      	nop
 800346c:	24000000 	.word	0x24000000
 8003470:	1b4e81b5 	.word	0x1b4e81b5
 8003474:	40020010 	.word	0x40020010
 8003478:	40020028 	.word	0x40020028
 800347c:	40020040 	.word	0x40020040
 8003480:	40020058 	.word	0x40020058
 8003484:	40020070 	.word	0x40020070
 8003488:	40020088 	.word	0x40020088
 800348c:	400200a0 	.word	0x400200a0
 8003490:	400200b8 	.word	0x400200b8
 8003494:	40020410 	.word	0x40020410
 8003498:	40020428 	.word	0x40020428
 800349c:	40020440 	.word	0x40020440
 80034a0:	40020458 	.word	0x40020458
 80034a4:	40020470 	.word	0x40020470
 80034a8:	40020488 	.word	0x40020488
 80034ac:	400204a0 	.word	0x400204a0
 80034b0:	400204b8 	.word	0x400204b8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bf14      	ite	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	2300      	moveq	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d015      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0204 	bic.w	r2, r2, #4
 80034da:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	2208      	movs	r2, #8
 80034e6:	409a      	lsls	r2, r3
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f0:	f043 0201 	orr.w	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	fa22 f303 	lsr.w	r3, r2, r3
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d06e      	beq.n	80035ec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a69      	ldr	r2, [pc, #420]	@ (80036b8 <HAL_DMA_IRQHandler+0x3f8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d04a      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ee>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a67      	ldr	r2, [pc, #412]	@ (80036bc <HAL_DMA_IRQHandler+0x3fc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d045      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ee>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a66      	ldr	r2, [pc, #408]	@ (80036c0 <HAL_DMA_IRQHandler+0x400>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d040      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ee>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a64      	ldr	r2, [pc, #400]	@ (80036c4 <HAL_DMA_IRQHandler+0x404>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d03b      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ee>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a63      	ldr	r2, [pc, #396]	@ (80036c8 <HAL_DMA_IRQHandler+0x408>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d036      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ee>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a61      	ldr	r2, [pc, #388]	@ (80036cc <HAL_DMA_IRQHandler+0x40c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d031      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ee>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a60      	ldr	r2, [pc, #384]	@ (80036d0 <HAL_DMA_IRQHandler+0x410>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d02c      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ee>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a5e      	ldr	r2, [pc, #376]	@ (80036d4 <HAL_DMA_IRQHandler+0x414>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d027      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ee>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a5d      	ldr	r2, [pc, #372]	@ (80036d8 <HAL_DMA_IRQHandler+0x418>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d022      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ee>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a5b      	ldr	r2, [pc, #364]	@ (80036dc <HAL_DMA_IRQHandler+0x41c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01d      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ee>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a5a      	ldr	r2, [pc, #360]	@ (80036e0 <HAL_DMA_IRQHandler+0x420>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d018      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ee>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a58      	ldr	r2, [pc, #352]	@ (80036e4 <HAL_DMA_IRQHandler+0x424>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ee>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a57      	ldr	r2, [pc, #348]	@ (80036e8 <HAL_DMA_IRQHandler+0x428>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00e      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ee>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a55      	ldr	r2, [pc, #340]	@ (80036ec <HAL_DMA_IRQHandler+0x42c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ee>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a54      	ldr	r2, [pc, #336]	@ (80036f0 <HAL_DMA_IRQHandler+0x430>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2ee>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a52      	ldr	r2, [pc, #328]	@ (80036f4 <HAL_DMA_IRQHandler+0x434>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d10a      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x304>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf14      	ite	ne
 80035bc:	2301      	movne	r3, #1
 80035be:	2300      	moveq	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e003      	b.n	80035cc <HAL_DMA_IRQHandler+0x30c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2300      	movs	r3, #0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	2201      	movs	r2, #1
 80035da:	409a      	lsls	r2, r3
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e4:	f043 0202 	orr.w	r2, r3, #2
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	2204      	movs	r2, #4
 80035f6:	409a      	lsls	r2, r3
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 808f 	beq.w	8003720 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a2c      	ldr	r2, [pc, #176]	@ (80036b8 <HAL_DMA_IRQHandler+0x3f8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d04a      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3e2>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a2a      	ldr	r2, [pc, #168]	@ (80036bc <HAL_DMA_IRQHandler+0x3fc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d045      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3e2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a29      	ldr	r2, [pc, #164]	@ (80036c0 <HAL_DMA_IRQHandler+0x400>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d040      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3e2>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a27      	ldr	r2, [pc, #156]	@ (80036c4 <HAL_DMA_IRQHandler+0x404>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d03b      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3e2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a26      	ldr	r2, [pc, #152]	@ (80036c8 <HAL_DMA_IRQHandler+0x408>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d036      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3e2>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a24      	ldr	r2, [pc, #144]	@ (80036cc <HAL_DMA_IRQHandler+0x40c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d031      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3e2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a23      	ldr	r2, [pc, #140]	@ (80036d0 <HAL_DMA_IRQHandler+0x410>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d02c      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3e2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a21      	ldr	r2, [pc, #132]	@ (80036d4 <HAL_DMA_IRQHandler+0x414>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d027      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3e2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a20      	ldr	r2, [pc, #128]	@ (80036d8 <HAL_DMA_IRQHandler+0x418>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d022      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3e2>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1e      	ldr	r2, [pc, #120]	@ (80036dc <HAL_DMA_IRQHandler+0x41c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01d      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3e2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1d      	ldr	r2, [pc, #116]	@ (80036e0 <HAL_DMA_IRQHandler+0x420>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d018      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3e2>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1b      	ldr	r2, [pc, #108]	@ (80036e4 <HAL_DMA_IRQHandler+0x424>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3e2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1a      	ldr	r2, [pc, #104]	@ (80036e8 <HAL_DMA_IRQHandler+0x428>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3e2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a18      	ldr	r2, [pc, #96]	@ (80036ec <HAL_DMA_IRQHandler+0x42c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d009      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3e2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a17      	ldr	r2, [pc, #92]	@ (80036f0 <HAL_DMA_IRQHandler+0x430>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x3e2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a15      	ldr	r2, [pc, #84]	@ (80036f4 <HAL_DMA_IRQHandler+0x434>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d12a      	bne.n	80036f8 <HAL_DMA_IRQHandler+0x438>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf14      	ite	ne
 80036b0:	2301      	movne	r3, #1
 80036b2:	2300      	moveq	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e023      	b.n	8003700 <HAL_DMA_IRQHandler+0x440>
 80036b8:	40020010 	.word	0x40020010
 80036bc:	40020028 	.word	0x40020028
 80036c0:	40020040 	.word	0x40020040
 80036c4:	40020058 	.word	0x40020058
 80036c8:	40020070 	.word	0x40020070
 80036cc:	40020088 	.word	0x40020088
 80036d0:	400200a0 	.word	0x400200a0
 80036d4:	400200b8 	.word	0x400200b8
 80036d8:	40020410 	.word	0x40020410
 80036dc:	40020428 	.word	0x40020428
 80036e0:	40020440 	.word	0x40020440
 80036e4:	40020458 	.word	0x40020458
 80036e8:	40020470 	.word	0x40020470
 80036ec:	40020488 	.word	0x40020488
 80036f0:	400204a0 	.word	0x400204a0
 80036f4:	400204b8 	.word	0x400204b8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2300      	movs	r3, #0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00d      	beq.n	8003720 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	2204      	movs	r2, #4
 800370e:	409a      	lsls	r2, r3
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003718:	f043 0204 	orr.w	r2, r3, #4
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	2210      	movs	r2, #16
 800372a:	409a      	lsls	r2, r3
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80a6 	beq.w	8003882 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a85      	ldr	r2, [pc, #532]	@ (8003950 <HAL_DMA_IRQHandler+0x690>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d04a      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x516>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a83      	ldr	r2, [pc, #524]	@ (8003954 <HAL_DMA_IRQHandler+0x694>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d045      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x516>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a82      	ldr	r2, [pc, #520]	@ (8003958 <HAL_DMA_IRQHandler+0x698>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d040      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x516>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a80      	ldr	r2, [pc, #512]	@ (800395c <HAL_DMA_IRQHandler+0x69c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d03b      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x516>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a7f      	ldr	r2, [pc, #508]	@ (8003960 <HAL_DMA_IRQHandler+0x6a0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d036      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x516>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a7d      	ldr	r2, [pc, #500]	@ (8003964 <HAL_DMA_IRQHandler+0x6a4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d031      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x516>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a7c      	ldr	r2, [pc, #496]	@ (8003968 <HAL_DMA_IRQHandler+0x6a8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d02c      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x516>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a7a      	ldr	r2, [pc, #488]	@ (800396c <HAL_DMA_IRQHandler+0x6ac>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d027      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x516>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a79      	ldr	r2, [pc, #484]	@ (8003970 <HAL_DMA_IRQHandler+0x6b0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d022      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x516>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a77      	ldr	r2, [pc, #476]	@ (8003974 <HAL_DMA_IRQHandler+0x6b4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01d      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x516>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a76      	ldr	r2, [pc, #472]	@ (8003978 <HAL_DMA_IRQHandler+0x6b8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d018      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x516>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a74      	ldr	r2, [pc, #464]	@ (800397c <HAL_DMA_IRQHandler+0x6bc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x516>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a73      	ldr	r2, [pc, #460]	@ (8003980 <HAL_DMA_IRQHandler+0x6c0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00e      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x516>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a71      	ldr	r2, [pc, #452]	@ (8003984 <HAL_DMA_IRQHandler+0x6c4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d009      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x516>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a70      	ldr	r2, [pc, #448]	@ (8003988 <HAL_DMA_IRQHandler+0x6c8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d004      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x516>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a6e      	ldr	r2, [pc, #440]	@ (800398c <HAL_DMA_IRQHandler+0x6cc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d10a      	bne.n	80037ec <HAL_DMA_IRQHandler+0x52c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf14      	ite	ne
 80037e4:	2301      	movne	r3, #1
 80037e6:	2300      	moveq	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	e009      	b.n	8003800 <HAL_DMA_IRQHandler+0x540>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bf14      	ite	ne
 80037fa:	2301      	movne	r3, #1
 80037fc:	2300      	moveq	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d03e      	beq.n	8003882 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	2210      	movs	r2, #16
 800380e:	409a      	lsls	r2, r3
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d018      	beq.n	8003854 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d108      	bne.n	8003842 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003834:	2b00      	cmp	r3, #0
 8003836:	d024      	beq.n	8003882 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
 8003840:	e01f      	b.n	8003882 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01b      	beq.n	8003882 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	4798      	blx	r3
 8003852:	e016      	b.n	8003882 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d107      	bne.n	8003872 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0208 	bic.w	r2, r2, #8
 8003870:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	2220      	movs	r2, #32
 800388c:	409a      	lsls	r2, r3
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 8110 	beq.w	8003ab8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2c      	ldr	r2, [pc, #176]	@ (8003950 <HAL_DMA_IRQHandler+0x690>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d04a      	beq.n	8003938 <HAL_DMA_IRQHandler+0x678>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003954 <HAL_DMA_IRQHandler+0x694>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d045      	beq.n	8003938 <HAL_DMA_IRQHandler+0x678>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a29      	ldr	r2, [pc, #164]	@ (8003958 <HAL_DMA_IRQHandler+0x698>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d040      	beq.n	8003938 <HAL_DMA_IRQHandler+0x678>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a28      	ldr	r2, [pc, #160]	@ (800395c <HAL_DMA_IRQHandler+0x69c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d03b      	beq.n	8003938 <HAL_DMA_IRQHandler+0x678>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a26      	ldr	r2, [pc, #152]	@ (8003960 <HAL_DMA_IRQHandler+0x6a0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d036      	beq.n	8003938 <HAL_DMA_IRQHandler+0x678>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a25      	ldr	r2, [pc, #148]	@ (8003964 <HAL_DMA_IRQHandler+0x6a4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d031      	beq.n	8003938 <HAL_DMA_IRQHandler+0x678>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a23      	ldr	r2, [pc, #140]	@ (8003968 <HAL_DMA_IRQHandler+0x6a8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d02c      	beq.n	8003938 <HAL_DMA_IRQHandler+0x678>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a22      	ldr	r2, [pc, #136]	@ (800396c <HAL_DMA_IRQHandler+0x6ac>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d027      	beq.n	8003938 <HAL_DMA_IRQHandler+0x678>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a20      	ldr	r2, [pc, #128]	@ (8003970 <HAL_DMA_IRQHandler+0x6b0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d022      	beq.n	8003938 <HAL_DMA_IRQHandler+0x678>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003974 <HAL_DMA_IRQHandler+0x6b4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d01d      	beq.n	8003938 <HAL_DMA_IRQHandler+0x678>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1d      	ldr	r2, [pc, #116]	@ (8003978 <HAL_DMA_IRQHandler+0x6b8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d018      	beq.n	8003938 <HAL_DMA_IRQHandler+0x678>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1c      	ldr	r2, [pc, #112]	@ (800397c <HAL_DMA_IRQHandler+0x6bc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d013      	beq.n	8003938 <HAL_DMA_IRQHandler+0x678>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1a      	ldr	r2, [pc, #104]	@ (8003980 <HAL_DMA_IRQHandler+0x6c0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00e      	beq.n	8003938 <HAL_DMA_IRQHandler+0x678>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a19      	ldr	r2, [pc, #100]	@ (8003984 <HAL_DMA_IRQHandler+0x6c4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d009      	beq.n	8003938 <HAL_DMA_IRQHandler+0x678>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a17      	ldr	r2, [pc, #92]	@ (8003988 <HAL_DMA_IRQHandler+0x6c8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_DMA_IRQHandler+0x678>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a16      	ldr	r2, [pc, #88]	@ (800398c <HAL_DMA_IRQHandler+0x6cc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d12b      	bne.n	8003990 <HAL_DMA_IRQHandler+0x6d0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b00      	cmp	r3, #0
 8003944:	bf14      	ite	ne
 8003946:	2301      	movne	r3, #1
 8003948:	2300      	moveq	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	e02a      	b.n	80039a4 <HAL_DMA_IRQHandler+0x6e4>
 800394e:	bf00      	nop
 8003950:	40020010 	.word	0x40020010
 8003954:	40020028 	.word	0x40020028
 8003958:	40020040 	.word	0x40020040
 800395c:	40020058 	.word	0x40020058
 8003960:	40020070 	.word	0x40020070
 8003964:	40020088 	.word	0x40020088
 8003968:	400200a0 	.word	0x400200a0
 800396c:	400200b8 	.word	0x400200b8
 8003970:	40020410 	.word	0x40020410
 8003974:	40020428 	.word	0x40020428
 8003978:	40020440 	.word	0x40020440
 800397c:	40020458 	.word	0x40020458
 8003980:	40020470 	.word	0x40020470
 8003984:	40020488 	.word	0x40020488
 8003988:	400204a0 	.word	0x400204a0
 800398c:	400204b8 	.word	0x400204b8
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	bf14      	ite	ne
 800399e:	2301      	movne	r3, #1
 80039a0:	2300      	moveq	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8087 	beq.w	8003ab8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	2220      	movs	r2, #32
 80039b4:	409a      	lsls	r2, r3
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d139      	bne.n	8003a3a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0216 	bic.w	r2, r2, #22
 80039d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d103      	bne.n	80039f6 <HAL_DMA_IRQHandler+0x736>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0208 	bic.w	r2, r2, #8
 8003a04:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	223f      	movs	r2, #63	@ 0x3f
 8003a10:	409a      	lsls	r2, r3
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 834a 	beq.w	80040c4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4798      	blx	r3
          }
          return;
 8003a38:	e344      	b.n	80040c4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d018      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d02c      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
 8003a66:	e027      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d023      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4798      	blx	r3
 8003a78:	e01e      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10f      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0210 	bic.w	r2, r2, #16
 8003a96:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8306 	beq.w	80040ce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8088 	beq.w	8003be0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a7a      	ldr	r2, [pc, #488]	@ (8003cc8 <HAL_DMA_IRQHandler+0xa08>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d04a      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x8b8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a79      	ldr	r2, [pc, #484]	@ (8003ccc <HAL_DMA_IRQHandler+0xa0c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d045      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x8b8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a77      	ldr	r2, [pc, #476]	@ (8003cd0 <HAL_DMA_IRQHandler+0xa10>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d040      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x8b8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a76      	ldr	r2, [pc, #472]	@ (8003cd4 <HAL_DMA_IRQHandler+0xa14>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d03b      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x8b8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a74      	ldr	r2, [pc, #464]	@ (8003cd8 <HAL_DMA_IRQHandler+0xa18>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d036      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x8b8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a73      	ldr	r2, [pc, #460]	@ (8003cdc <HAL_DMA_IRQHandler+0xa1c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d031      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x8b8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a71      	ldr	r2, [pc, #452]	@ (8003ce0 <HAL_DMA_IRQHandler+0xa20>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d02c      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x8b8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a70      	ldr	r2, [pc, #448]	@ (8003ce4 <HAL_DMA_IRQHandler+0xa24>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d027      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x8b8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a6e      	ldr	r2, [pc, #440]	@ (8003ce8 <HAL_DMA_IRQHandler+0xa28>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d022      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x8b8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6d      	ldr	r2, [pc, #436]	@ (8003cec <HAL_DMA_IRQHandler+0xa2c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d01d      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x8b8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a6b      	ldr	r2, [pc, #428]	@ (8003cf0 <HAL_DMA_IRQHandler+0xa30>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d018      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x8b8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6a      	ldr	r2, [pc, #424]	@ (8003cf4 <HAL_DMA_IRQHandler+0xa34>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x8b8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a68      	ldr	r2, [pc, #416]	@ (8003cf8 <HAL_DMA_IRQHandler+0xa38>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00e      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x8b8>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a67      	ldr	r2, [pc, #412]	@ (8003cfc <HAL_DMA_IRQHandler+0xa3c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d009      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x8b8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a65      	ldr	r2, [pc, #404]	@ (8003d00 <HAL_DMA_IRQHandler+0xa40>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x8b8>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a64      	ldr	r2, [pc, #400]	@ (8003d04 <HAL_DMA_IRQHandler+0xa44>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d108      	bne.n	8003b8a <HAL_DMA_IRQHandler+0x8ca>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0201 	bic.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	e007      	b.n	8003b9a <HAL_DMA_IRQHandler+0x8da>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0201 	bic.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d307      	bcc.n	8003bb6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f2      	bne.n	8003b9a <HAL_DMA_IRQHandler+0x8da>
 8003bb4:	e000      	b.n	8003bb8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003bb6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d004      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2203      	movs	r2, #3
 8003bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003bce:	e003      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8272 	beq.w	80040ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	4798      	blx	r3
 8003bf2:	e26c      	b.n	80040ce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a43      	ldr	r2, [pc, #268]	@ (8003d08 <HAL_DMA_IRQHandler+0xa48>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d022      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x984>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a42      	ldr	r2, [pc, #264]	@ (8003d0c <HAL_DMA_IRQHandler+0xa4c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d01d      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x984>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a40      	ldr	r2, [pc, #256]	@ (8003d10 <HAL_DMA_IRQHandler+0xa50>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d018      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x984>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a3f      	ldr	r2, [pc, #252]	@ (8003d14 <HAL_DMA_IRQHandler+0xa54>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d013      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x984>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a3d      	ldr	r2, [pc, #244]	@ (8003d18 <HAL_DMA_IRQHandler+0xa58>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00e      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x984>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a3c      	ldr	r2, [pc, #240]	@ (8003d1c <HAL_DMA_IRQHandler+0xa5c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d009      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x984>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a3a      	ldr	r2, [pc, #232]	@ (8003d20 <HAL_DMA_IRQHandler+0xa60>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d004      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x984>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a39      	ldr	r2, [pc, #228]	@ (8003d24 <HAL_DMA_IRQHandler+0xa64>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d101      	bne.n	8003c48 <HAL_DMA_IRQHandler+0x988>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <HAL_DMA_IRQHandler+0x98a>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 823f 	beq.w	80040ce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	2204      	movs	r2, #4
 8003c62:	409a      	lsls	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 80cd 	beq.w	8003e08 <HAL_DMA_IRQHandler+0xb48>
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80c7 	beq.w	8003e08 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	2204      	movs	r2, #4
 8003c84:	409a      	lsls	r2, r3
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d049      	beq.n	8003d28 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 8210 	beq.w	80040c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cb0:	e20a      	b.n	80040c8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 8206 	beq.w	80040c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cc4:	e200      	b.n	80040c8 <HAL_DMA_IRQHandler+0xe08>
 8003cc6:	bf00      	nop
 8003cc8:	40020010 	.word	0x40020010
 8003ccc:	40020028 	.word	0x40020028
 8003cd0:	40020040 	.word	0x40020040
 8003cd4:	40020058 	.word	0x40020058
 8003cd8:	40020070 	.word	0x40020070
 8003cdc:	40020088 	.word	0x40020088
 8003ce0:	400200a0 	.word	0x400200a0
 8003ce4:	400200b8 	.word	0x400200b8
 8003ce8:	40020410 	.word	0x40020410
 8003cec:	40020428 	.word	0x40020428
 8003cf0:	40020440 	.word	0x40020440
 8003cf4:	40020458 	.word	0x40020458
 8003cf8:	40020470 	.word	0x40020470
 8003cfc:	40020488 	.word	0x40020488
 8003d00:	400204a0 	.word	0x400204a0
 8003d04:	400204b8 	.word	0x400204b8
 8003d08:	58025408 	.word	0x58025408
 8003d0c:	5802541c 	.word	0x5802541c
 8003d10:	58025430 	.word	0x58025430
 8003d14:	58025444 	.word	0x58025444
 8003d18:	58025458 	.word	0x58025458
 8003d1c:	5802546c 	.word	0x5802546c
 8003d20:	58025480 	.word	0x58025480
 8003d24:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d160      	bne.n	8003df4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a7f      	ldr	r2, [pc, #508]	@ (8003f34 <HAL_DMA_IRQHandler+0xc74>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d04a      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xb12>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a7d      	ldr	r2, [pc, #500]	@ (8003f38 <HAL_DMA_IRQHandler+0xc78>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d045      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xb12>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f3c <HAL_DMA_IRQHandler+0xc7c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d040      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xb12>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7a      	ldr	r2, [pc, #488]	@ (8003f40 <HAL_DMA_IRQHandler+0xc80>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d03b      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xb12>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a79      	ldr	r2, [pc, #484]	@ (8003f44 <HAL_DMA_IRQHandler+0xc84>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d036      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xb12>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a77      	ldr	r2, [pc, #476]	@ (8003f48 <HAL_DMA_IRQHandler+0xc88>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d031      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xb12>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a76      	ldr	r2, [pc, #472]	@ (8003f4c <HAL_DMA_IRQHandler+0xc8c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d02c      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xb12>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a74      	ldr	r2, [pc, #464]	@ (8003f50 <HAL_DMA_IRQHandler+0xc90>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d027      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xb12>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a73      	ldr	r2, [pc, #460]	@ (8003f54 <HAL_DMA_IRQHandler+0xc94>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d022      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xb12>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a71      	ldr	r2, [pc, #452]	@ (8003f58 <HAL_DMA_IRQHandler+0xc98>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d01d      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xb12>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a70      	ldr	r2, [pc, #448]	@ (8003f5c <HAL_DMA_IRQHandler+0xc9c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d018      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xb12>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f60 <HAL_DMA_IRQHandler+0xca0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xb12>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6d      	ldr	r2, [pc, #436]	@ (8003f64 <HAL_DMA_IRQHandler+0xca4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00e      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xb12>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a6b      	ldr	r2, [pc, #428]	@ (8003f68 <HAL_DMA_IRQHandler+0xca8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d009      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xb12>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a6a      	ldr	r2, [pc, #424]	@ (8003f6c <HAL_DMA_IRQHandler+0xcac>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d004      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xb12>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a68      	ldr	r2, [pc, #416]	@ (8003f70 <HAL_DMA_IRQHandler+0xcb0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d108      	bne.n	8003de4 <HAL_DMA_IRQHandler+0xb24>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0208 	bic.w	r2, r2, #8
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e007      	b.n	8003df4 <HAL_DMA_IRQHandler+0xb34>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0204 	bic.w	r2, r2, #4
 8003df2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8165 	beq.w	80040c8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e06:	e15f      	b.n	80040c8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	2202      	movs	r2, #2
 8003e12:	409a      	lsls	r2, r3
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80c5 	beq.w	8003fa8 <HAL_DMA_IRQHandler+0xce8>
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80bf 	beq.w	8003fa8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	2202      	movs	r2, #2
 8003e34:	409a      	lsls	r2, r3
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d018      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 813a 	beq.w	80040cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e60:	e134      	b.n	80040cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8130 	beq.w	80040cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e74:	e12a      	b.n	80040cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f040 8089 	bne.w	8003f94 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2b      	ldr	r2, [pc, #172]	@ (8003f34 <HAL_DMA_IRQHandler+0xc74>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d04a      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xc62>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a29      	ldr	r2, [pc, #164]	@ (8003f38 <HAL_DMA_IRQHandler+0xc78>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d045      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xc62>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a28      	ldr	r2, [pc, #160]	@ (8003f3c <HAL_DMA_IRQHandler+0xc7c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d040      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xc62>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a26      	ldr	r2, [pc, #152]	@ (8003f40 <HAL_DMA_IRQHandler+0xc80>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d03b      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xc62>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a25      	ldr	r2, [pc, #148]	@ (8003f44 <HAL_DMA_IRQHandler+0xc84>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d036      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xc62>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a23      	ldr	r2, [pc, #140]	@ (8003f48 <HAL_DMA_IRQHandler+0xc88>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d031      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xc62>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a22      	ldr	r2, [pc, #136]	@ (8003f4c <HAL_DMA_IRQHandler+0xc8c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d02c      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xc62>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a20      	ldr	r2, [pc, #128]	@ (8003f50 <HAL_DMA_IRQHandler+0xc90>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d027      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xc62>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f54 <HAL_DMA_IRQHandler+0xc94>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d022      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xc62>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f58 <HAL_DMA_IRQHandler+0xc98>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01d      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xc62>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1c      	ldr	r2, [pc, #112]	@ (8003f5c <HAL_DMA_IRQHandler+0xc9c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d018      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xc62>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8003f60 <HAL_DMA_IRQHandler+0xca0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xc62>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a19      	ldr	r2, [pc, #100]	@ (8003f64 <HAL_DMA_IRQHandler+0xca4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00e      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xc62>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a17      	ldr	r2, [pc, #92]	@ (8003f68 <HAL_DMA_IRQHandler+0xca8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d009      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xc62>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a16      	ldr	r2, [pc, #88]	@ (8003f6c <HAL_DMA_IRQHandler+0xcac>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xc62>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a14      	ldr	r2, [pc, #80]	@ (8003f70 <HAL_DMA_IRQHandler+0xcb0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d128      	bne.n	8003f74 <HAL_DMA_IRQHandler+0xcb4>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0214 	bic.w	r2, r2, #20
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e027      	b.n	8003f84 <HAL_DMA_IRQHandler+0xcc4>
 8003f34:	40020010 	.word	0x40020010
 8003f38:	40020028 	.word	0x40020028
 8003f3c:	40020040 	.word	0x40020040
 8003f40:	40020058 	.word	0x40020058
 8003f44:	40020070 	.word	0x40020070
 8003f48:	40020088 	.word	0x40020088
 8003f4c:	400200a0 	.word	0x400200a0
 8003f50:	400200b8 	.word	0x400200b8
 8003f54:	40020410 	.word	0x40020410
 8003f58:	40020428 	.word	0x40020428
 8003f5c:	40020440 	.word	0x40020440
 8003f60:	40020458 	.word	0x40020458
 8003f64:	40020470 	.word	0x40020470
 8003f68:	40020488 	.word	0x40020488
 8003f6c:	400204a0 	.word	0x400204a0
 8003f70:	400204b8 	.word	0x400204b8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 020a 	bic.w	r2, r2, #10
 8003f82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8097 	beq.w	80040cc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fa6:	e091      	b.n	80040cc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	2208      	movs	r2, #8
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 8088 	beq.w	80040ce <HAL_DMA_IRQHandler+0xe0e>
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8082 	beq.w	80040ce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a41      	ldr	r2, [pc, #260]	@ (80040d4 <HAL_DMA_IRQHandler+0xe14>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d04a      	beq.n	800406a <HAL_DMA_IRQHandler+0xdaa>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a3f      	ldr	r2, [pc, #252]	@ (80040d8 <HAL_DMA_IRQHandler+0xe18>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d045      	beq.n	800406a <HAL_DMA_IRQHandler+0xdaa>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a3e      	ldr	r2, [pc, #248]	@ (80040dc <HAL_DMA_IRQHandler+0xe1c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d040      	beq.n	800406a <HAL_DMA_IRQHandler+0xdaa>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a3c      	ldr	r2, [pc, #240]	@ (80040e0 <HAL_DMA_IRQHandler+0xe20>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d03b      	beq.n	800406a <HAL_DMA_IRQHandler+0xdaa>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a3b      	ldr	r2, [pc, #236]	@ (80040e4 <HAL_DMA_IRQHandler+0xe24>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d036      	beq.n	800406a <HAL_DMA_IRQHandler+0xdaa>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a39      	ldr	r2, [pc, #228]	@ (80040e8 <HAL_DMA_IRQHandler+0xe28>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d031      	beq.n	800406a <HAL_DMA_IRQHandler+0xdaa>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a38      	ldr	r2, [pc, #224]	@ (80040ec <HAL_DMA_IRQHandler+0xe2c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d02c      	beq.n	800406a <HAL_DMA_IRQHandler+0xdaa>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a36      	ldr	r2, [pc, #216]	@ (80040f0 <HAL_DMA_IRQHandler+0xe30>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d027      	beq.n	800406a <HAL_DMA_IRQHandler+0xdaa>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a35      	ldr	r2, [pc, #212]	@ (80040f4 <HAL_DMA_IRQHandler+0xe34>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d022      	beq.n	800406a <HAL_DMA_IRQHandler+0xdaa>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a33      	ldr	r2, [pc, #204]	@ (80040f8 <HAL_DMA_IRQHandler+0xe38>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01d      	beq.n	800406a <HAL_DMA_IRQHandler+0xdaa>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a32      	ldr	r2, [pc, #200]	@ (80040fc <HAL_DMA_IRQHandler+0xe3c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d018      	beq.n	800406a <HAL_DMA_IRQHandler+0xdaa>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a30      	ldr	r2, [pc, #192]	@ (8004100 <HAL_DMA_IRQHandler+0xe40>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <HAL_DMA_IRQHandler+0xdaa>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a2f      	ldr	r2, [pc, #188]	@ (8004104 <HAL_DMA_IRQHandler+0xe44>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00e      	beq.n	800406a <HAL_DMA_IRQHandler+0xdaa>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a2d      	ldr	r2, [pc, #180]	@ (8004108 <HAL_DMA_IRQHandler+0xe48>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d009      	beq.n	800406a <HAL_DMA_IRQHandler+0xdaa>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2c      	ldr	r2, [pc, #176]	@ (800410c <HAL_DMA_IRQHandler+0xe4c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d004      	beq.n	800406a <HAL_DMA_IRQHandler+0xdaa>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a2a      	ldr	r2, [pc, #168]	@ (8004110 <HAL_DMA_IRQHandler+0xe50>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d108      	bne.n	800407c <HAL_DMA_IRQHandler+0xdbc>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 021c 	bic.w	r2, r2, #28
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e007      	b.n	800408c <HAL_DMA_IRQHandler+0xdcc>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 020e 	bic.w	r2, r2, #14
 800408a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	2201      	movs	r2, #1
 8004096:	409a      	lsls	r2, r3
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d009      	beq.n	80040ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
 80040c2:	e004      	b.n	80040ce <HAL_DMA_IRQHandler+0xe0e>
          return;
 80040c4:	bf00      	nop
 80040c6:	e002      	b.n	80040ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040c8:	bf00      	nop
 80040ca:	e000      	b.n	80040ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80040ce:	3728      	adds	r7, #40	@ 0x28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40020010 	.word	0x40020010
 80040d8:	40020028 	.word	0x40020028
 80040dc:	40020040 	.word	0x40020040
 80040e0:	40020058 	.word	0x40020058
 80040e4:	40020070 	.word	0x40020070
 80040e8:	40020088 	.word	0x40020088
 80040ec:	400200a0 	.word	0x400200a0
 80040f0:	400200b8 	.word	0x400200b8
 80040f4:	40020410 	.word	0x40020410
 80040f8:	40020428 	.word	0x40020428
 80040fc:	40020440 	.word	0x40020440
 8004100:	40020458 	.word	0x40020458
 8004104:	40020470 	.word	0x40020470
 8004108:	40020488 	.word	0x40020488
 800410c:	400204a0 	.word	0x400204a0
 8004110:	400204b8 	.word	0x400204b8

08004114 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004144:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a7f      	ldr	r2, [pc, #508]	@ (8004348 <DMA_SetConfig+0x21c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d072      	beq.n	8004236 <DMA_SetConfig+0x10a>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a7d      	ldr	r2, [pc, #500]	@ (800434c <DMA_SetConfig+0x220>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d06d      	beq.n	8004236 <DMA_SetConfig+0x10a>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a7c      	ldr	r2, [pc, #496]	@ (8004350 <DMA_SetConfig+0x224>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d068      	beq.n	8004236 <DMA_SetConfig+0x10a>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a7a      	ldr	r2, [pc, #488]	@ (8004354 <DMA_SetConfig+0x228>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d063      	beq.n	8004236 <DMA_SetConfig+0x10a>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a79      	ldr	r2, [pc, #484]	@ (8004358 <DMA_SetConfig+0x22c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d05e      	beq.n	8004236 <DMA_SetConfig+0x10a>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a77      	ldr	r2, [pc, #476]	@ (800435c <DMA_SetConfig+0x230>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d059      	beq.n	8004236 <DMA_SetConfig+0x10a>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a76      	ldr	r2, [pc, #472]	@ (8004360 <DMA_SetConfig+0x234>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d054      	beq.n	8004236 <DMA_SetConfig+0x10a>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a74      	ldr	r2, [pc, #464]	@ (8004364 <DMA_SetConfig+0x238>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d04f      	beq.n	8004236 <DMA_SetConfig+0x10a>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a73      	ldr	r2, [pc, #460]	@ (8004368 <DMA_SetConfig+0x23c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d04a      	beq.n	8004236 <DMA_SetConfig+0x10a>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a71      	ldr	r2, [pc, #452]	@ (800436c <DMA_SetConfig+0x240>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d045      	beq.n	8004236 <DMA_SetConfig+0x10a>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a70      	ldr	r2, [pc, #448]	@ (8004370 <DMA_SetConfig+0x244>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d040      	beq.n	8004236 <DMA_SetConfig+0x10a>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004374 <DMA_SetConfig+0x248>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d03b      	beq.n	8004236 <DMA_SetConfig+0x10a>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004378 <DMA_SetConfig+0x24c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d036      	beq.n	8004236 <DMA_SetConfig+0x10a>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a6b      	ldr	r2, [pc, #428]	@ (800437c <DMA_SetConfig+0x250>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d031      	beq.n	8004236 <DMA_SetConfig+0x10a>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004380 <DMA_SetConfig+0x254>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d02c      	beq.n	8004236 <DMA_SetConfig+0x10a>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a68      	ldr	r2, [pc, #416]	@ (8004384 <DMA_SetConfig+0x258>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d027      	beq.n	8004236 <DMA_SetConfig+0x10a>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a67      	ldr	r2, [pc, #412]	@ (8004388 <DMA_SetConfig+0x25c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d022      	beq.n	8004236 <DMA_SetConfig+0x10a>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a65      	ldr	r2, [pc, #404]	@ (800438c <DMA_SetConfig+0x260>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01d      	beq.n	8004236 <DMA_SetConfig+0x10a>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a64      	ldr	r2, [pc, #400]	@ (8004390 <DMA_SetConfig+0x264>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d018      	beq.n	8004236 <DMA_SetConfig+0x10a>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a62      	ldr	r2, [pc, #392]	@ (8004394 <DMA_SetConfig+0x268>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <DMA_SetConfig+0x10a>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a61      	ldr	r2, [pc, #388]	@ (8004398 <DMA_SetConfig+0x26c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00e      	beq.n	8004236 <DMA_SetConfig+0x10a>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a5f      	ldr	r2, [pc, #380]	@ (800439c <DMA_SetConfig+0x270>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d009      	beq.n	8004236 <DMA_SetConfig+0x10a>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a5e      	ldr	r2, [pc, #376]	@ (80043a0 <DMA_SetConfig+0x274>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <DMA_SetConfig+0x10a>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a5c      	ldr	r2, [pc, #368]	@ (80043a4 <DMA_SetConfig+0x278>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <DMA_SetConfig+0x10e>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <DMA_SetConfig+0x110>
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00d      	beq.n	800425c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004248:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d004      	beq.n	800425c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800425a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a39      	ldr	r2, [pc, #228]	@ (8004348 <DMA_SetConfig+0x21c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d04a      	beq.n	80042fc <DMA_SetConfig+0x1d0>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a38      	ldr	r2, [pc, #224]	@ (800434c <DMA_SetConfig+0x220>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d045      	beq.n	80042fc <DMA_SetConfig+0x1d0>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a36      	ldr	r2, [pc, #216]	@ (8004350 <DMA_SetConfig+0x224>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d040      	beq.n	80042fc <DMA_SetConfig+0x1d0>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a35      	ldr	r2, [pc, #212]	@ (8004354 <DMA_SetConfig+0x228>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d03b      	beq.n	80042fc <DMA_SetConfig+0x1d0>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a33      	ldr	r2, [pc, #204]	@ (8004358 <DMA_SetConfig+0x22c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d036      	beq.n	80042fc <DMA_SetConfig+0x1d0>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a32      	ldr	r2, [pc, #200]	@ (800435c <DMA_SetConfig+0x230>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d031      	beq.n	80042fc <DMA_SetConfig+0x1d0>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a30      	ldr	r2, [pc, #192]	@ (8004360 <DMA_SetConfig+0x234>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d02c      	beq.n	80042fc <DMA_SetConfig+0x1d0>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004364 <DMA_SetConfig+0x238>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d027      	beq.n	80042fc <DMA_SetConfig+0x1d0>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004368 <DMA_SetConfig+0x23c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d022      	beq.n	80042fc <DMA_SetConfig+0x1d0>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a2c      	ldr	r2, [pc, #176]	@ (800436c <DMA_SetConfig+0x240>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d01d      	beq.n	80042fc <DMA_SetConfig+0x1d0>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004370 <DMA_SetConfig+0x244>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d018      	beq.n	80042fc <DMA_SetConfig+0x1d0>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a29      	ldr	r2, [pc, #164]	@ (8004374 <DMA_SetConfig+0x248>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d013      	beq.n	80042fc <DMA_SetConfig+0x1d0>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a27      	ldr	r2, [pc, #156]	@ (8004378 <DMA_SetConfig+0x24c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00e      	beq.n	80042fc <DMA_SetConfig+0x1d0>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a26      	ldr	r2, [pc, #152]	@ (800437c <DMA_SetConfig+0x250>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d009      	beq.n	80042fc <DMA_SetConfig+0x1d0>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a24      	ldr	r2, [pc, #144]	@ (8004380 <DMA_SetConfig+0x254>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <DMA_SetConfig+0x1d0>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a23      	ldr	r2, [pc, #140]	@ (8004384 <DMA_SetConfig+0x258>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d101      	bne.n	8004300 <DMA_SetConfig+0x1d4>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <DMA_SetConfig+0x1d6>
 8004300:	2300      	movs	r3, #0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d059      	beq.n	80043ba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	223f      	movs	r2, #63	@ 0x3f
 8004310:	409a      	lsls	r2, r3
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004324:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b40      	cmp	r3, #64	@ 0x40
 8004334:	d138      	bne.n	80043a8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004346:	e086      	b.n	8004456 <DMA_SetConfig+0x32a>
 8004348:	40020010 	.word	0x40020010
 800434c:	40020028 	.word	0x40020028
 8004350:	40020040 	.word	0x40020040
 8004354:	40020058 	.word	0x40020058
 8004358:	40020070 	.word	0x40020070
 800435c:	40020088 	.word	0x40020088
 8004360:	400200a0 	.word	0x400200a0
 8004364:	400200b8 	.word	0x400200b8
 8004368:	40020410 	.word	0x40020410
 800436c:	40020428 	.word	0x40020428
 8004370:	40020440 	.word	0x40020440
 8004374:	40020458 	.word	0x40020458
 8004378:	40020470 	.word	0x40020470
 800437c:	40020488 	.word	0x40020488
 8004380:	400204a0 	.word	0x400204a0
 8004384:	400204b8 	.word	0x400204b8
 8004388:	58025408 	.word	0x58025408
 800438c:	5802541c 	.word	0x5802541c
 8004390:	58025430 	.word	0x58025430
 8004394:	58025444 	.word	0x58025444
 8004398:	58025458 	.word	0x58025458
 800439c:	5802546c 	.word	0x5802546c
 80043a0:	58025480 	.word	0x58025480
 80043a4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	60da      	str	r2, [r3, #12]
}
 80043b8:	e04d      	b.n	8004456 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a29      	ldr	r2, [pc, #164]	@ (8004464 <DMA_SetConfig+0x338>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d022      	beq.n	800440a <DMA_SetConfig+0x2de>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a27      	ldr	r2, [pc, #156]	@ (8004468 <DMA_SetConfig+0x33c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01d      	beq.n	800440a <DMA_SetConfig+0x2de>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a26      	ldr	r2, [pc, #152]	@ (800446c <DMA_SetConfig+0x340>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d018      	beq.n	800440a <DMA_SetConfig+0x2de>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a24      	ldr	r2, [pc, #144]	@ (8004470 <DMA_SetConfig+0x344>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d013      	beq.n	800440a <DMA_SetConfig+0x2de>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a23      	ldr	r2, [pc, #140]	@ (8004474 <DMA_SetConfig+0x348>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00e      	beq.n	800440a <DMA_SetConfig+0x2de>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a21      	ldr	r2, [pc, #132]	@ (8004478 <DMA_SetConfig+0x34c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d009      	beq.n	800440a <DMA_SetConfig+0x2de>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a20      	ldr	r2, [pc, #128]	@ (800447c <DMA_SetConfig+0x350>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d004      	beq.n	800440a <DMA_SetConfig+0x2de>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1e      	ldr	r2, [pc, #120]	@ (8004480 <DMA_SetConfig+0x354>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d101      	bne.n	800440e <DMA_SetConfig+0x2e2>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <DMA_SetConfig+0x2e4>
 800440e:	2300      	movs	r3, #0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	2201      	movs	r2, #1
 800441e:	409a      	lsls	r2, r3
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b40      	cmp	r3, #64	@ 0x40
 8004432:	d108      	bne.n	8004446 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	60da      	str	r2, [r3, #12]
}
 8004444:	e007      	b.n	8004456 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	60da      	str	r2, [r3, #12]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	58025408 	.word	0x58025408
 8004468:	5802541c 	.word	0x5802541c
 800446c:	58025430 	.word	0x58025430
 8004470:	58025444 	.word	0x58025444
 8004474:	58025458 	.word	0x58025458
 8004478:	5802546c 	.word	0x5802546c
 800447c:	58025480 	.word	0x58025480
 8004480:	58025494 	.word	0x58025494

08004484 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a42      	ldr	r2, [pc, #264]	@ (800459c <DMA_CalcBaseAndBitshift+0x118>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d04a      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xa8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a41      	ldr	r2, [pc, #260]	@ (80045a0 <DMA_CalcBaseAndBitshift+0x11c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d045      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xa8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a3f      	ldr	r2, [pc, #252]	@ (80045a4 <DMA_CalcBaseAndBitshift+0x120>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d040      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xa8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a3e      	ldr	r2, [pc, #248]	@ (80045a8 <DMA_CalcBaseAndBitshift+0x124>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d03b      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xa8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a3c      	ldr	r2, [pc, #240]	@ (80045ac <DMA_CalcBaseAndBitshift+0x128>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d036      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xa8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a3b      	ldr	r2, [pc, #236]	@ (80045b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d031      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xa8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a39      	ldr	r2, [pc, #228]	@ (80045b4 <DMA_CalcBaseAndBitshift+0x130>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d02c      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xa8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a38      	ldr	r2, [pc, #224]	@ (80045b8 <DMA_CalcBaseAndBitshift+0x134>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d027      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xa8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a36      	ldr	r2, [pc, #216]	@ (80045bc <DMA_CalcBaseAndBitshift+0x138>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d022      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xa8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a35      	ldr	r2, [pc, #212]	@ (80045c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d01d      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xa8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a33      	ldr	r2, [pc, #204]	@ (80045c4 <DMA_CalcBaseAndBitshift+0x140>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d018      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xa8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a32      	ldr	r2, [pc, #200]	@ (80045c8 <DMA_CalcBaseAndBitshift+0x144>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d013      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xa8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a30      	ldr	r2, [pc, #192]	@ (80045cc <DMA_CalcBaseAndBitshift+0x148>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00e      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xa8>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a2f      	ldr	r2, [pc, #188]	@ (80045d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d009      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xa8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a2d      	ldr	r2, [pc, #180]	@ (80045d4 <DMA_CalcBaseAndBitshift+0x150>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d004      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xa8>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2c      	ldr	r2, [pc, #176]	@ (80045d8 <DMA_CalcBaseAndBitshift+0x154>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d101      	bne.n	8004530 <DMA_CalcBaseAndBitshift+0xac>
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <DMA_CalcBaseAndBitshift+0xae>
 8004530:	2300      	movs	r3, #0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d024      	beq.n	8004580 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	3b10      	subs	r3, #16
 800453e:	4a27      	ldr	r2, [pc, #156]	@ (80045dc <DMA_CalcBaseAndBitshift+0x158>)
 8004540:	fba2 2303 	umull	r2, r3, r2, r3
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	4a24      	ldr	r2, [pc, #144]	@ (80045e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004550:	5cd3      	ldrb	r3, [r2, r3]
 8004552:	461a      	mov	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b03      	cmp	r3, #3
 800455c:	d908      	bls.n	8004570 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	4b1f      	ldr	r3, [pc, #124]	@ (80045e4 <DMA_CalcBaseAndBitshift+0x160>)
 8004566:	4013      	ands	r3, r2
 8004568:	1d1a      	adds	r2, r3, #4
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	659a      	str	r2, [r3, #88]	@ 0x58
 800456e:	e00d      	b.n	800458c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	4b1b      	ldr	r3, [pc, #108]	@ (80045e4 <DMA_CalcBaseAndBitshift+0x160>)
 8004578:	4013      	ands	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6593      	str	r3, [r2, #88]	@ 0x58
 800457e:	e005      	b.n	800458c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004590:	4618      	mov	r0, r3
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	40020010 	.word	0x40020010
 80045a0:	40020028 	.word	0x40020028
 80045a4:	40020040 	.word	0x40020040
 80045a8:	40020058 	.word	0x40020058
 80045ac:	40020070 	.word	0x40020070
 80045b0:	40020088 	.word	0x40020088
 80045b4:	400200a0 	.word	0x400200a0
 80045b8:	400200b8 	.word	0x400200b8
 80045bc:	40020410 	.word	0x40020410
 80045c0:	40020428 	.word	0x40020428
 80045c4:	40020440 	.word	0x40020440
 80045c8:	40020458 	.word	0x40020458
 80045cc:	40020470 	.word	0x40020470
 80045d0:	40020488 	.word	0x40020488
 80045d4:	400204a0 	.word	0x400204a0
 80045d8:	400204b8 	.word	0x400204b8
 80045dc:	aaaaaaab 	.word	0xaaaaaaab
 80045e0:	0804d4b0 	.word	0x0804d4b0
 80045e4:	fffffc00 	.word	0xfffffc00

080045e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d120      	bne.n	800463e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004600:	2b03      	cmp	r3, #3
 8004602:	d858      	bhi.n	80046b6 <DMA_CheckFifoParam+0xce>
 8004604:	a201      	add	r2, pc, #4	@ (adr r2, 800460c <DMA_CheckFifoParam+0x24>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	0800461d 	.word	0x0800461d
 8004610:	0800462f 	.word	0x0800462f
 8004614:	0800461d 	.word	0x0800461d
 8004618:	080046b7 	.word	0x080046b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004620:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d048      	beq.n	80046ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800462c:	e045      	b.n	80046ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004632:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004636:	d142      	bne.n	80046be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800463c:	e03f      	b.n	80046be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004646:	d123      	bne.n	8004690 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464c:	2b03      	cmp	r3, #3
 800464e:	d838      	bhi.n	80046c2 <DMA_CheckFifoParam+0xda>
 8004650:	a201      	add	r2, pc, #4	@ (adr r2, 8004658 <DMA_CheckFifoParam+0x70>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	08004669 	.word	0x08004669
 800465c:	0800466f 	.word	0x0800466f
 8004660:	08004669 	.word	0x08004669
 8004664:	08004681 	.word	0x08004681
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
        break;
 800466c:	e030      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004672:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d025      	beq.n	80046c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800467e:	e022      	b.n	80046c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004688:	d11f      	bne.n	80046ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800468e:	e01c      	b.n	80046ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004694:	2b02      	cmp	r3, #2
 8004696:	d902      	bls.n	800469e <DMA_CheckFifoParam+0xb6>
 8004698:	2b03      	cmp	r3, #3
 800469a:	d003      	beq.n	80046a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800469c:	e018      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
        break;
 80046a2:	e015      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00e      	beq.n	80046ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
    break;
 80046b4:	e00b      	b.n	80046ce <DMA_CheckFifoParam+0xe6>
        break;
 80046b6:	bf00      	nop
 80046b8:	e00a      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
        break;
 80046ba:	bf00      	nop
 80046bc:	e008      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
        break;
 80046be:	bf00      	nop
 80046c0:	e006      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
        break;
 80046c2:	bf00      	nop
 80046c4:	e004      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
        break;
 80046c6:	bf00      	nop
 80046c8:	e002      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
        break;
 80046ca:	bf00      	nop
 80046cc:	e000      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
    break;
 80046ce:	bf00      	nop
    }
  }

  return status;
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop

080046e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a38      	ldr	r2, [pc, #224]	@ (80047d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d022      	beq.n	800473e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a36      	ldr	r2, [pc, #216]	@ (80047d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d01d      	beq.n	800473e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a35      	ldr	r2, [pc, #212]	@ (80047dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d018      	beq.n	800473e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a33      	ldr	r2, [pc, #204]	@ (80047e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d013      	beq.n	800473e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a32      	ldr	r2, [pc, #200]	@ (80047e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00e      	beq.n	800473e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a30      	ldr	r2, [pc, #192]	@ (80047e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d009      	beq.n	800473e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a2f      	ldr	r2, [pc, #188]	@ (80047ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d004      	beq.n	800473e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a2d      	ldr	r2, [pc, #180]	@ (80047f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d101      	bne.n	8004742 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004742:	2300      	movs	r3, #0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01a      	beq.n	800477e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	3b08      	subs	r3, #8
 8004750:	4a28      	ldr	r2, [pc, #160]	@ (80047f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	091b      	lsrs	r3, r3, #4
 8004758:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4b26      	ldr	r3, [pc, #152]	@ (80047f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	461a      	mov	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a24      	ldr	r2, [pc, #144]	@ (80047fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800476c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2201      	movs	r2, #1
 8004776:	409a      	lsls	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800477c:	e024      	b.n	80047c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	3b10      	subs	r3, #16
 8004786:	4a1e      	ldr	r2, [pc, #120]	@ (8004800 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	091b      	lsrs	r3, r3, #4
 800478e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4a1c      	ldr	r2, [pc, #112]	@ (8004804 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d806      	bhi.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4a1b      	ldr	r2, [pc, #108]	@ (8004808 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d902      	bls.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3308      	adds	r3, #8
 80047a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4b18      	ldr	r3, [pc, #96]	@ (800480c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	461a      	mov	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a16      	ldr	r2, [pc, #88]	@ (8004810 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80047b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	2201      	movs	r2, #1
 80047c2:	409a      	lsls	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80047c8:	bf00      	nop
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	58025408 	.word	0x58025408
 80047d8:	5802541c 	.word	0x5802541c
 80047dc:	58025430 	.word	0x58025430
 80047e0:	58025444 	.word	0x58025444
 80047e4:	58025458 	.word	0x58025458
 80047e8:	5802546c 	.word	0x5802546c
 80047ec:	58025480 	.word	0x58025480
 80047f0:	58025494 	.word	0x58025494
 80047f4:	cccccccd 	.word	0xcccccccd
 80047f8:	16009600 	.word	0x16009600
 80047fc:	58025880 	.word	0x58025880
 8004800:	aaaaaaab 	.word	0xaaaaaaab
 8004804:	400204b8 	.word	0x400204b8
 8004808:	4002040f 	.word	0x4002040f
 800480c:	10008200 	.word	0x10008200
 8004810:	40020880 	.word	0x40020880

08004814 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d04a      	beq.n	80048c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d847      	bhi.n	80048c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a25      	ldr	r2, [pc, #148]	@ (80048cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d022      	beq.n	8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a24      	ldr	r2, [pc, #144]	@ (80048d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d01d      	beq.n	8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a22      	ldr	r2, [pc, #136]	@ (80048d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d018      	beq.n	8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a21      	ldr	r2, [pc, #132]	@ (80048d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1f      	ldr	r2, [pc, #124]	@ (80048dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00e      	beq.n	8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1e      	ldr	r2, [pc, #120]	@ (80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d009      	beq.n	8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1c      	ldr	r2, [pc, #112]	@ (80048e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1b      	ldr	r2, [pc, #108]	@ (80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d101      	bne.n	8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004884:	2300      	movs	r3, #0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4b17      	ldr	r3, [pc, #92]	@ (80048ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	461a      	mov	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a15      	ldr	r2, [pc, #84]	@ (80048f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800489c:	671a      	str	r2, [r3, #112]	@ 0x70
 800489e:	e009      	b.n	80048b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4b14      	ldr	r3, [pc, #80]	@ (80048f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	461a      	mov	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a11      	ldr	r2, [pc, #68]	@ (80048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80048b2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	2201      	movs	r2, #1
 80048ba:	409a      	lsls	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	58025408 	.word	0x58025408
 80048d0:	5802541c 	.word	0x5802541c
 80048d4:	58025430 	.word	0x58025430
 80048d8:	58025444 	.word	0x58025444
 80048dc:	58025458 	.word	0x58025458
 80048e0:	5802546c 	.word	0x5802546c
 80048e4:	58025480 	.word	0x58025480
 80048e8:	58025494 	.word	0x58025494
 80048ec:	1600963f 	.word	0x1600963f
 80048f0:	58025940 	.word	0x58025940
 80048f4:	1000823f 	.word	0x1000823f
 80048f8:	40020940 	.word	0x40020940

080048fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b089      	sub	sp, #36	@ 0x24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800490a:	4b89      	ldr	r3, [pc, #548]	@ (8004b30 <HAL_GPIO_Init+0x234>)
 800490c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800490e:	e194      	b.n	8004c3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	2101      	movs	r1, #1
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	fa01 f303 	lsl.w	r3, r1, r3
 800491c:	4013      	ands	r3, r2
 800491e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 8186 	beq.w	8004c34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d005      	beq.n	8004940 <HAL_GPIO_Init+0x44>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d130      	bne.n	80049a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	2203      	movs	r2, #3
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004976:	2201      	movs	r2, #1
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4013      	ands	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	f003 0201 	and.w	r2, r3, #1
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	4313      	orrs	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d017      	beq.n	80049de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	2203      	movs	r2, #3
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	43db      	mvns	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d123      	bne.n	8004a32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	08da      	lsrs	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3208      	adds	r2, #8
 80049f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	220f      	movs	r2, #15
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43db      	mvns	r3, r3
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	08da      	lsrs	r2, r3, #3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3208      	adds	r2, #8
 8004a2c:	69b9      	ldr	r1, [r7, #24]
 8004a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 0203 	and.w	r2, r3, #3
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 80e0 	beq.w	8004c34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a74:	4b2f      	ldr	r3, [pc, #188]	@ (8004b34 <HAL_GPIO_Init+0x238>)
 8004a76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8004b34 <HAL_GPIO_Init+0x238>)
 8004a7c:	f043 0302 	orr.w	r3, r3, #2
 8004a80:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a84:	4b2b      	ldr	r3, [pc, #172]	@ (8004b34 <HAL_GPIO_Init+0x238>)
 8004a86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a92:	4a29      	ldr	r2, [pc, #164]	@ (8004b38 <HAL_GPIO_Init+0x23c>)
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	089b      	lsrs	r3, r3, #2
 8004a98:	3302      	adds	r3, #2
 8004a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	220f      	movs	r2, #15
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a20      	ldr	r2, [pc, #128]	@ (8004b3c <HAL_GPIO_Init+0x240>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d052      	beq.n	8004b64 <HAL_GPIO_Init+0x268>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b40 <HAL_GPIO_Init+0x244>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d031      	beq.n	8004b2a <HAL_GPIO_Init+0x22e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b44 <HAL_GPIO_Init+0x248>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d02b      	beq.n	8004b26 <HAL_GPIO_Init+0x22a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b48 <HAL_GPIO_Init+0x24c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d025      	beq.n	8004b22 <HAL_GPIO_Init+0x226>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b4c <HAL_GPIO_Init+0x250>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d01f      	beq.n	8004b1e <HAL_GPIO_Init+0x222>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b50 <HAL_GPIO_Init+0x254>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d019      	beq.n	8004b1a <HAL_GPIO_Init+0x21e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8004b54 <HAL_GPIO_Init+0x258>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d013      	beq.n	8004b16 <HAL_GPIO_Init+0x21a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a19      	ldr	r2, [pc, #100]	@ (8004b58 <HAL_GPIO_Init+0x25c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00d      	beq.n	8004b12 <HAL_GPIO_Init+0x216>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a18      	ldr	r2, [pc, #96]	@ (8004b5c <HAL_GPIO_Init+0x260>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d007      	beq.n	8004b0e <HAL_GPIO_Init+0x212>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a17      	ldr	r2, [pc, #92]	@ (8004b60 <HAL_GPIO_Init+0x264>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d101      	bne.n	8004b0a <HAL_GPIO_Init+0x20e>
 8004b06:	2309      	movs	r3, #9
 8004b08:	e02d      	b.n	8004b66 <HAL_GPIO_Init+0x26a>
 8004b0a:	230a      	movs	r3, #10
 8004b0c:	e02b      	b.n	8004b66 <HAL_GPIO_Init+0x26a>
 8004b0e:	2308      	movs	r3, #8
 8004b10:	e029      	b.n	8004b66 <HAL_GPIO_Init+0x26a>
 8004b12:	2307      	movs	r3, #7
 8004b14:	e027      	b.n	8004b66 <HAL_GPIO_Init+0x26a>
 8004b16:	2306      	movs	r3, #6
 8004b18:	e025      	b.n	8004b66 <HAL_GPIO_Init+0x26a>
 8004b1a:	2305      	movs	r3, #5
 8004b1c:	e023      	b.n	8004b66 <HAL_GPIO_Init+0x26a>
 8004b1e:	2304      	movs	r3, #4
 8004b20:	e021      	b.n	8004b66 <HAL_GPIO_Init+0x26a>
 8004b22:	2303      	movs	r3, #3
 8004b24:	e01f      	b.n	8004b66 <HAL_GPIO_Init+0x26a>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e01d      	b.n	8004b66 <HAL_GPIO_Init+0x26a>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e01b      	b.n	8004b66 <HAL_GPIO_Init+0x26a>
 8004b2e:	bf00      	nop
 8004b30:	58000080 	.word	0x58000080
 8004b34:	58024400 	.word	0x58024400
 8004b38:	58000400 	.word	0x58000400
 8004b3c:	58020000 	.word	0x58020000
 8004b40:	58020400 	.word	0x58020400
 8004b44:	58020800 	.word	0x58020800
 8004b48:	58020c00 	.word	0x58020c00
 8004b4c:	58021000 	.word	0x58021000
 8004b50:	58021400 	.word	0x58021400
 8004b54:	58021800 	.word	0x58021800
 8004b58:	58021c00 	.word	0x58021c00
 8004b5c:	58022000 	.word	0x58022000
 8004b60:	58022400 	.word	0x58022400
 8004b64:	2300      	movs	r3, #0
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	f002 0203 	and.w	r2, r2, #3
 8004b6c:	0092      	lsls	r2, r2, #2
 8004b6e:	4093      	lsls	r3, r2
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b76:	4938      	ldr	r1, [pc, #224]	@ (8004c58 <HAL_GPIO_Init+0x35c>)
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	089b      	lsrs	r3, r3, #2
 8004b7c:	3302      	adds	r3, #2
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4013      	ands	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004baa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004bd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	43db      	mvns	r3, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4013      	ands	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	43db      	mvns	r3, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4013      	ands	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	3301      	adds	r3, #1
 8004c38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	fa22 f303 	lsr.w	r3, r2, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f47f ae63 	bne.w	8004910 <HAL_GPIO_Init+0x14>
  }
}
 8004c4a:	bf00      	nop
 8004c4c:	bf00      	nop
 8004c4e:	3724      	adds	r7, #36	@ 0x24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	58000400 	.word	0x58000400

08004c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	807b      	strh	r3, [r7, #2]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c6c:	787b      	ldrb	r3, [r7, #1]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c72:	887a      	ldrh	r2, [r7, #2]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c78:	e003      	b.n	8004c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c7a:	887b      	ldrh	r3, [r7, #2]
 8004c7c:	041a      	lsls	r2, r3, #16
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	619a      	str	r2, [r3, #24]
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	460b      	mov	r3, r1
 8004c98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ca0:	887a      	ldrh	r2, [r7, #2]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	041a      	lsls	r2, r3, #16
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	43d9      	mvns	r1, r3
 8004cac:	887b      	ldrh	r3, [r7, #2]
 8004cae:	400b      	ands	r3, r1
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	619a      	str	r2, [r3, #24]
}
 8004cb6:	bf00      	nop
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
	...

08004cc4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004ccc:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <HAL_PWREx_ConfigSupply+0x70>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d00a      	beq.n	8004cee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004cd8:	4b16      	ldr	r3, [pc, #88]	@ (8004d34 <HAL_PWREx_ConfigSupply+0x70>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d001      	beq.n	8004cea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e01f      	b.n	8004d2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	e01d      	b.n	8004d2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004cee:	4b11      	ldr	r3, [pc, #68]	@ (8004d34 <HAL_PWREx_ConfigSupply+0x70>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f023 0207 	bic.w	r2, r3, #7
 8004cf6:	490f      	ldr	r1, [pc, #60]	@ (8004d34 <HAL_PWREx_ConfigSupply+0x70>)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004cfe:	f7fd f90f 	bl	8001f20 <HAL_GetTick>
 8004d02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d04:	e009      	b.n	8004d1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d06:	f7fd f90b 	bl	8001f20 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d14:	d901      	bls.n	8004d1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e007      	b.n	8004d2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d1a:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <HAL_PWREx_ConfigSupply+0x70>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d26:	d1ee      	bne.n	8004d06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	58024800 	.word	0x58024800

08004d38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08c      	sub	sp, #48	@ 0x30
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d102      	bne.n	8004d4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	f000 bc48 	b.w	80055dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8088 	beq.w	8004e6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d5a:	4b99      	ldr	r3, [pc, #612]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d64:	4b96      	ldr	r3, [pc, #600]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	d007      	beq.n	8004d80 <HAL_RCC_OscConfig+0x48>
 8004d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d72:	2b18      	cmp	r3, #24
 8004d74:	d111      	bne.n	8004d9a <HAL_RCC_OscConfig+0x62>
 8004d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d78:	f003 0303 	and.w	r3, r3, #3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d10c      	bne.n	8004d9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d80:	4b8f      	ldr	r3, [pc, #572]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d06d      	beq.n	8004e68 <HAL_RCC_OscConfig+0x130>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d169      	bne.n	8004e68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	f000 bc21 	b.w	80055dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004da2:	d106      	bne.n	8004db2 <HAL_RCC_OscConfig+0x7a>
 8004da4:	4b86      	ldr	r3, [pc, #536]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a85      	ldr	r2, [pc, #532]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	e02e      	b.n	8004e10 <HAL_RCC_OscConfig+0xd8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x9c>
 8004dba:	4b81      	ldr	r3, [pc, #516]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a80      	ldr	r2, [pc, #512]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004dc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	4b7e      	ldr	r3, [pc, #504]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a7d      	ldr	r2, [pc, #500]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004dcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	e01d      	b.n	8004e10 <HAL_RCC_OscConfig+0xd8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ddc:	d10c      	bne.n	8004df8 <HAL_RCC_OscConfig+0xc0>
 8004dde:	4b78      	ldr	r3, [pc, #480]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a77      	ldr	r2, [pc, #476]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	4b75      	ldr	r3, [pc, #468]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a74      	ldr	r2, [pc, #464]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	e00b      	b.n	8004e10 <HAL_RCC_OscConfig+0xd8>
 8004df8:	4b71      	ldr	r3, [pc, #452]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a70      	ldr	r2, [pc, #448]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	4b6e      	ldr	r3, [pc, #440]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a6d      	ldr	r2, [pc, #436]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d013      	beq.n	8004e40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fd f882 	bl	8001f20 <HAL_GetTick>
 8004e1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e20:	f7fd f87e 	bl	8001f20 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b64      	cmp	r3, #100	@ 0x64
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e3d4      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e32:	4b63      	ldr	r3, [pc, #396]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0xe8>
 8004e3e:	e014      	b.n	8004e6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e40:	f7fd f86e 	bl	8001f20 <HAL_GetTick>
 8004e44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e48:	f7fd f86a 	bl	8001f20 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b64      	cmp	r3, #100	@ 0x64
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e3c0      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e5a:	4b59      	ldr	r3, [pc, #356]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x110>
 8004e66:	e000      	b.n	8004e6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 80ca 	beq.w	800500c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e78:	4b51      	ldr	r3, [pc, #324]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e82:	4b4f      	ldr	r3, [pc, #316]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <HAL_RCC_OscConfig+0x166>
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	2b18      	cmp	r3, #24
 8004e92:	d156      	bne.n	8004f42 <HAL_RCC_OscConfig+0x20a>
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d151      	bne.n	8004f42 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e9e:	4b48      	ldr	r3, [pc, #288]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x17e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e392      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004eb6:	4b42      	ldr	r3, [pc, #264]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f023 0219 	bic.w	r2, r3, #25
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	493f      	ldr	r1, [pc, #252]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec8:	f7fd f82a 	bl	8001f20 <HAL_GetTick>
 8004ecc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed0:	f7fd f826 	bl	8001f20 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e37c      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ee2:	4b37      	ldr	r3, [pc, #220]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eee:	f7fd f847 	bl	8001f80 <HAL_GetREVID>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d817      	bhi.n	8004f2c <HAL_RCC_OscConfig+0x1f4>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b40      	cmp	r3, #64	@ 0x40
 8004f02:	d108      	bne.n	8004f16 <HAL_RCC_OscConfig+0x1de>
 8004f04:	4b2e      	ldr	r3, [pc, #184]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004f0c:	4a2c      	ldr	r2, [pc, #176]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f12:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f14:	e07a      	b.n	800500c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f16:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	031b      	lsls	r3, r3, #12
 8004f24:	4926      	ldr	r1, [pc, #152]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f2a:	e06f      	b.n	800500c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2c:	4b24      	ldr	r3, [pc, #144]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	061b      	lsls	r3, r3, #24
 8004f3a:	4921      	ldr	r1, [pc, #132]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f40:	e064      	b.n	800500c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d047      	beq.n	8004fda <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f023 0219 	bic.w	r2, r3, #25
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	491a      	ldr	r1, [pc, #104]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5c:	f7fc ffe0 	bl	8001f20 <HAL_GetTick>
 8004f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f64:	f7fc ffdc 	bl	8001f20 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e332      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f76:	4b12      	ldr	r3, [pc, #72]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0f0      	beq.n	8004f64 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f82:	f7fc fffd 	bl	8001f80 <HAL_GetREVID>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d819      	bhi.n	8004fc4 <HAL_RCC_OscConfig+0x28c>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	2b40      	cmp	r3, #64	@ 0x40
 8004f96:	d108      	bne.n	8004faa <HAL_RCC_OscConfig+0x272>
 8004f98:	4b09      	ldr	r3, [pc, #36]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004fa0:	4a07      	ldr	r2, [pc, #28]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fa6:	6053      	str	r3, [r2, #4]
 8004fa8:	e030      	b.n	800500c <HAL_RCC_OscConfig+0x2d4>
 8004faa:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	031b      	lsls	r3, r3, #12
 8004fb8:	4901      	ldr	r1, [pc, #4]	@ (8004fc0 <HAL_RCC_OscConfig+0x288>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	604b      	str	r3, [r1, #4]
 8004fbe:	e025      	b.n	800500c <HAL_RCC_OscConfig+0x2d4>
 8004fc0:	58024400 	.word	0x58024400
 8004fc4:	4b9a      	ldr	r3, [pc, #616]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	061b      	lsls	r3, r3, #24
 8004fd2:	4997      	ldr	r1, [pc, #604]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	604b      	str	r3, [r1, #4]
 8004fd8:	e018      	b.n	800500c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fda:	4b95      	ldr	r3, [pc, #596]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a94      	ldr	r2, [pc, #592]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe6:	f7fc ff9b 	bl	8001f20 <HAL_GetTick>
 8004fea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fec:	e008      	b.n	8005000 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fee:	f7fc ff97 	bl	8001f20 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e2ed      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005000:	4b8b      	ldr	r3, [pc, #556]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f0      	bne.n	8004fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80a9 	beq.w	800516c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800501a:	4b85      	ldr	r3, [pc, #532]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005022:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005024:	4b82      	ldr	r3, [pc, #520]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005028:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b08      	cmp	r3, #8
 800502e:	d007      	beq.n	8005040 <HAL_RCC_OscConfig+0x308>
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	2b18      	cmp	r3, #24
 8005034:	d13a      	bne.n	80050ac <HAL_RCC_OscConfig+0x374>
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f003 0303 	and.w	r3, r3, #3
 800503c:	2b01      	cmp	r3, #1
 800503e:	d135      	bne.n	80050ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005040:	4b7b      	ldr	r3, [pc, #492]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <HAL_RCC_OscConfig+0x320>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	2b80      	cmp	r3, #128	@ 0x80
 8005052:	d001      	beq.n	8005058 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e2c1      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005058:	f7fc ff92 	bl	8001f80 <HAL_GetREVID>
 800505c:	4603      	mov	r3, r0
 800505e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005062:	4293      	cmp	r3, r2
 8005064:	d817      	bhi.n	8005096 <HAL_RCC_OscConfig+0x35e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	2b20      	cmp	r3, #32
 800506c:	d108      	bne.n	8005080 <HAL_RCC_OscConfig+0x348>
 800506e:	4b70      	ldr	r3, [pc, #448]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005076:	4a6e      	ldr	r2, [pc, #440]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005078:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800507c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800507e:	e075      	b.n	800516c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005080:	4b6b      	ldr	r3, [pc, #428]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	069b      	lsls	r3, r3, #26
 800508e:	4968      	ldr	r1, [pc, #416]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005094:	e06a      	b.n	800516c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005096:	4b66      	ldr	r3, [pc, #408]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	061b      	lsls	r3, r3, #24
 80050a4:	4962      	ldr	r1, [pc, #392]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050aa:	e05f      	b.n	800516c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d042      	beq.n	800513a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80050b4:	4b5e      	ldr	r3, [pc, #376]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a5d      	ldr	r2, [pc, #372]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 80050ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fc ff2e 	bl	8001f20 <HAL_GetTick>
 80050c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80050c8:	f7fc ff2a 	bl	8001f20 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e280      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050da:	4b55      	ldr	r3, [pc, #340]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050e6:	f7fc ff4b 	bl	8001f80 <HAL_GetREVID>
 80050ea:	4603      	mov	r3, r0
 80050ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d817      	bhi.n	8005124 <HAL_RCC_OscConfig+0x3ec>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d108      	bne.n	800510e <HAL_RCC_OscConfig+0x3d6>
 80050fc:	4b4c      	ldr	r3, [pc, #304]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005104:	4a4a      	ldr	r2, [pc, #296]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005106:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800510a:	6053      	str	r3, [r2, #4]
 800510c:	e02e      	b.n	800516c <HAL_RCC_OscConfig+0x434>
 800510e:	4b48      	ldr	r3, [pc, #288]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	069b      	lsls	r3, r3, #26
 800511c:	4944      	ldr	r1, [pc, #272]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 800511e:	4313      	orrs	r3, r2
 8005120:	604b      	str	r3, [r1, #4]
 8005122:	e023      	b.n	800516c <HAL_RCC_OscConfig+0x434>
 8005124:	4b42      	ldr	r3, [pc, #264]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	061b      	lsls	r3, r3, #24
 8005132:	493f      	ldr	r1, [pc, #252]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005134:	4313      	orrs	r3, r2
 8005136:	60cb      	str	r3, [r1, #12]
 8005138:	e018      	b.n	800516c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800513a:	4b3d      	ldr	r3, [pc, #244]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a3c      	ldr	r2, [pc, #240]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005140:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005146:	f7fc feeb 	bl	8001f20 <HAL_GetTick>
 800514a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800514e:	f7fc fee7 	bl	8001f20 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e23d      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005160:	4b33      	ldr	r3, [pc, #204]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1f0      	bne.n	800514e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b00      	cmp	r3, #0
 8005176:	d036      	beq.n	80051e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d019      	beq.n	80051b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005180:	4b2b      	ldr	r3, [pc, #172]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005184:	4a2a      	ldr	r2, [pc, #168]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005186:	f043 0301 	orr.w	r3, r3, #1
 800518a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518c:	f7fc fec8 	bl	8001f20 <HAL_GetTick>
 8005190:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005194:	f7fc fec4 	bl	8001f20 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e21a      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051a6:	4b22      	ldr	r3, [pc, #136]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 80051a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0f0      	beq.n	8005194 <HAL_RCC_OscConfig+0x45c>
 80051b2:	e018      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 80051b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 80051ba:	f023 0301 	bic.w	r3, r3, #1
 80051be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c0:	f7fc feae 	bl	8001f20 <HAL_GetTick>
 80051c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c8:	f7fc feaa 	bl	8001f20 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e200      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051da:	4b15      	ldr	r3, [pc, #84]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 80051dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d039      	beq.n	8005266 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d01c      	beq.n	8005234 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005200:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005204:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005206:	f7fc fe8b 	bl	8001f20 <HAL_GetTick>
 800520a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800520e:	f7fc fe87 	bl	8001f20 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e1dd      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005220:	4b03      	ldr	r3, [pc, #12]	@ (8005230 <HAL_RCC_OscConfig+0x4f8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0f0      	beq.n	800520e <HAL_RCC_OscConfig+0x4d6>
 800522c:	e01b      	b.n	8005266 <HAL_RCC_OscConfig+0x52e>
 800522e:	bf00      	nop
 8005230:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005234:	4b9b      	ldr	r3, [pc, #620]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a9a      	ldr	r2, [pc, #616]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 800523a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800523e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005240:	f7fc fe6e 	bl	8001f20 <HAL_GetTick>
 8005244:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005248:	f7fc fe6a 	bl	8001f20 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e1c0      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800525a:	4b92      	ldr	r3, [pc, #584]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8081 	beq.w	8005376 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005274:	4b8c      	ldr	r3, [pc, #560]	@ (80054a8 <HAL_RCC_OscConfig+0x770>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a8b      	ldr	r2, [pc, #556]	@ (80054a8 <HAL_RCC_OscConfig+0x770>)
 800527a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800527e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005280:	f7fc fe4e 	bl	8001f20 <HAL_GetTick>
 8005284:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005288:	f7fc fe4a 	bl	8001f20 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b64      	cmp	r3, #100	@ 0x64
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e1a0      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800529a:	4b83      	ldr	r3, [pc, #524]	@ (80054a8 <HAL_RCC_OscConfig+0x770>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d106      	bne.n	80052bc <HAL_RCC_OscConfig+0x584>
 80052ae:	4b7d      	ldr	r3, [pc, #500]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 80052b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b2:	4a7c      	ldr	r2, [pc, #496]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ba:	e02d      	b.n	8005318 <HAL_RCC_OscConfig+0x5e0>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10c      	bne.n	80052de <HAL_RCC_OscConfig+0x5a6>
 80052c4:	4b77      	ldr	r3, [pc, #476]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 80052c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c8:	4a76      	ldr	r2, [pc, #472]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 80052ca:	f023 0301 	bic.w	r3, r3, #1
 80052ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80052d0:	4b74      	ldr	r3, [pc, #464]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 80052d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d4:	4a73      	ldr	r2, [pc, #460]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 80052d6:	f023 0304 	bic.w	r3, r3, #4
 80052da:	6713      	str	r3, [r2, #112]	@ 0x70
 80052dc:	e01c      	b.n	8005318 <HAL_RCC_OscConfig+0x5e0>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2b05      	cmp	r3, #5
 80052e4:	d10c      	bne.n	8005300 <HAL_RCC_OscConfig+0x5c8>
 80052e6:	4b6f      	ldr	r3, [pc, #444]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ea:	4a6e      	ldr	r2, [pc, #440]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 80052ec:	f043 0304 	orr.w	r3, r3, #4
 80052f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052f2:	4b6c      	ldr	r3, [pc, #432]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 80052f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f6:	4a6b      	ldr	r2, [pc, #428]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 80052f8:	f043 0301 	orr.w	r3, r3, #1
 80052fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80052fe:	e00b      	b.n	8005318 <HAL_RCC_OscConfig+0x5e0>
 8005300:	4b68      	ldr	r3, [pc, #416]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005304:	4a67      	ldr	r2, [pc, #412]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005306:	f023 0301 	bic.w	r3, r3, #1
 800530a:	6713      	str	r3, [r2, #112]	@ 0x70
 800530c:	4b65      	ldr	r3, [pc, #404]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 800530e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005310:	4a64      	ldr	r2, [pc, #400]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005312:	f023 0304 	bic.w	r3, r3, #4
 8005316:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d015      	beq.n	800534c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005320:	f7fc fdfe 	bl	8001f20 <HAL_GetTick>
 8005324:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005326:	e00a      	b.n	800533e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005328:	f7fc fdfa 	bl	8001f20 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005336:	4293      	cmp	r3, r2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e14e      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800533e:	4b59      	ldr	r3, [pc, #356]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0ee      	beq.n	8005328 <HAL_RCC_OscConfig+0x5f0>
 800534a:	e014      	b.n	8005376 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534c:	f7fc fde8 	bl	8001f20 <HAL_GetTick>
 8005350:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005352:	e00a      	b.n	800536a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005354:	f7fc fde4 	bl	8001f20 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005362:	4293      	cmp	r3, r2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e138      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800536a:	4b4e      	ldr	r3, [pc, #312]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 800536c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1ee      	bne.n	8005354 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 812d 	beq.w	80055da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005380:	4b48      	ldr	r3, [pc, #288]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005388:	2b18      	cmp	r3, #24
 800538a:	f000 80bd 	beq.w	8005508 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005392:	2b02      	cmp	r3, #2
 8005394:	f040 809e 	bne.w	80054d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005398:	4b42      	ldr	r3, [pc, #264]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a41      	ldr	r2, [pc, #260]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 800539e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a4:	f7fc fdbc 	bl	8001f20 <HAL_GetTick>
 80053a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ac:	f7fc fdb8 	bl	8001f20 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e10e      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053be:	4b39      	ldr	r3, [pc, #228]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053ca:	4b36      	ldr	r3, [pc, #216]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 80053cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053ce:	4b37      	ldr	r3, [pc, #220]	@ (80054ac <HAL_RCC_OscConfig+0x774>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053da:	0112      	lsls	r2, r2, #4
 80053dc:	430a      	orrs	r2, r1
 80053de:	4931      	ldr	r1, [pc, #196]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e8:	3b01      	subs	r3, #1
 80053ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f2:	3b01      	subs	r3, #1
 80053f4:	025b      	lsls	r3, r3, #9
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fe:	3b01      	subs	r3, #1
 8005400:	041b      	lsls	r3, r3, #16
 8005402:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540c:	3b01      	subs	r3, #1
 800540e:	061b      	lsls	r3, r3, #24
 8005410:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005414:	4923      	ldr	r1, [pc, #140]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005416:	4313      	orrs	r3, r2
 8005418:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800541a:	4b22      	ldr	r3, [pc, #136]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 800541c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541e:	4a21      	ldr	r2, [pc, #132]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005420:	f023 0301 	bic.w	r3, r3, #1
 8005424:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005426:	4b1f      	ldr	r3, [pc, #124]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800542a:	4b21      	ldr	r3, [pc, #132]	@ (80054b0 <HAL_RCC_OscConfig+0x778>)
 800542c:	4013      	ands	r3, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005432:	00d2      	lsls	r2, r2, #3
 8005434:	491b      	ldr	r1, [pc, #108]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005436:	4313      	orrs	r3, r2
 8005438:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800543a:	4b1a      	ldr	r3, [pc, #104]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 800543c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543e:	f023 020c 	bic.w	r2, r3, #12
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005446:	4917      	ldr	r1, [pc, #92]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005448:	4313      	orrs	r3, r2
 800544a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800544c:	4b15      	ldr	r3, [pc, #84]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 800544e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005450:	f023 0202 	bic.w	r2, r3, #2
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005458:	4912      	ldr	r1, [pc, #72]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 800545a:	4313      	orrs	r3, r2
 800545c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800545e:	4b11      	ldr	r3, [pc, #68]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005462:	4a10      	ldr	r2, [pc, #64]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005468:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800546a:	4b0e      	ldr	r3, [pc, #56]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 800546c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546e:	4a0d      	ldr	r2, [pc, #52]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005474:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005476:	4b0b      	ldr	r3, [pc, #44]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547a:	4a0a      	ldr	r2, [pc, #40]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 800547c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005480:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005482:	4b08      	ldr	r3, [pc, #32]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005486:	4a07      	ldr	r2, [pc, #28]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800548e:	4b05      	ldr	r3, [pc, #20]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a04      	ldr	r2, [pc, #16]	@ (80054a4 <HAL_RCC_OscConfig+0x76c>)
 8005494:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549a:	f7fc fd41 	bl	8001f20 <HAL_GetTick>
 800549e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054a0:	e011      	b.n	80054c6 <HAL_RCC_OscConfig+0x78e>
 80054a2:	bf00      	nop
 80054a4:	58024400 	.word	0x58024400
 80054a8:	58024800 	.word	0x58024800
 80054ac:	fffffc0c 	.word	0xfffffc0c
 80054b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b4:	f7fc fd34 	bl	8001f20 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e08a      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054c6:	4b47      	ldr	r3, [pc, #284]	@ (80055e4 <HAL_RCC_OscConfig+0x8ac>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0x77c>
 80054d2:	e082      	b.n	80055da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d4:	4b43      	ldr	r3, [pc, #268]	@ (80055e4 <HAL_RCC_OscConfig+0x8ac>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a42      	ldr	r2, [pc, #264]	@ (80055e4 <HAL_RCC_OscConfig+0x8ac>)
 80054da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e0:	f7fc fd1e 	bl	8001f20 <HAL_GetTick>
 80054e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e8:	f7fc fd1a 	bl	8001f20 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e070      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054fa:	4b3a      	ldr	r3, [pc, #232]	@ (80055e4 <HAL_RCC_OscConfig+0x8ac>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f0      	bne.n	80054e8 <HAL_RCC_OscConfig+0x7b0>
 8005506:	e068      	b.n	80055da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005508:	4b36      	ldr	r3, [pc, #216]	@ (80055e4 <HAL_RCC_OscConfig+0x8ac>)
 800550a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800550e:	4b35      	ldr	r3, [pc, #212]	@ (80055e4 <HAL_RCC_OscConfig+0x8ac>)
 8005510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005512:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005518:	2b01      	cmp	r3, #1
 800551a:	d031      	beq.n	8005580 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f003 0203 	and.w	r2, r3, #3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005526:	429a      	cmp	r2, r3
 8005528:	d12a      	bne.n	8005580 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	091b      	lsrs	r3, r3, #4
 800552e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005536:	429a      	cmp	r2, r3
 8005538:	d122      	bne.n	8005580 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005544:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005546:	429a      	cmp	r2, r3
 8005548:	d11a      	bne.n	8005580 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	0a5b      	lsrs	r3, r3, #9
 800554e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005556:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005558:	429a      	cmp	r2, r3
 800555a:	d111      	bne.n	8005580 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	0c1b      	lsrs	r3, r3, #16
 8005560:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005568:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800556a:	429a      	cmp	r2, r3
 800556c:	d108      	bne.n	8005580 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	0e1b      	lsrs	r3, r3, #24
 8005572:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800557c:	429a      	cmp	r2, r3
 800557e:	d001      	beq.n	8005584 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e02b      	b.n	80055dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005584:	4b17      	ldr	r3, [pc, #92]	@ (80055e4 <HAL_RCC_OscConfig+0x8ac>)
 8005586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005588:	08db      	lsrs	r3, r3, #3
 800558a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800558e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	429a      	cmp	r2, r3
 8005598:	d01f      	beq.n	80055da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800559a:	4b12      	ldr	r3, [pc, #72]	@ (80055e4 <HAL_RCC_OscConfig+0x8ac>)
 800559c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559e:	4a11      	ldr	r2, [pc, #68]	@ (80055e4 <HAL_RCC_OscConfig+0x8ac>)
 80055a0:	f023 0301 	bic.w	r3, r3, #1
 80055a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055a6:	f7fc fcbb 	bl	8001f20 <HAL_GetTick>
 80055aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80055ac:	bf00      	nop
 80055ae:	f7fc fcb7 	bl	8001f20 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d0f9      	beq.n	80055ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055ba:	4b0a      	ldr	r3, [pc, #40]	@ (80055e4 <HAL_RCC_OscConfig+0x8ac>)
 80055bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055be:	4b0a      	ldr	r3, [pc, #40]	@ (80055e8 <HAL_RCC_OscConfig+0x8b0>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055c6:	00d2      	lsls	r2, r2, #3
 80055c8:	4906      	ldr	r1, [pc, #24]	@ (80055e4 <HAL_RCC_OscConfig+0x8ac>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80055ce:	4b05      	ldr	r3, [pc, #20]	@ (80055e4 <HAL_RCC_OscConfig+0x8ac>)
 80055d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d2:	4a04      	ldr	r2, [pc, #16]	@ (80055e4 <HAL_RCC_OscConfig+0x8ac>)
 80055d4:	f043 0301 	orr.w	r3, r3, #1
 80055d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3730      	adds	r7, #48	@ 0x30
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	58024400 	.word	0x58024400
 80055e8:	ffff0007 	.word	0xffff0007

080055ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e19c      	b.n	800593a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005600:	4b8a      	ldr	r3, [pc, #552]	@ (800582c <HAL_RCC_ClockConfig+0x240>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 030f 	and.w	r3, r3, #15
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d910      	bls.n	8005630 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560e:	4b87      	ldr	r3, [pc, #540]	@ (800582c <HAL_RCC_ClockConfig+0x240>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f023 020f 	bic.w	r2, r3, #15
 8005616:	4985      	ldr	r1, [pc, #532]	@ (800582c <HAL_RCC_ClockConfig+0x240>)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	4313      	orrs	r3, r2
 800561c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800561e:	4b83      	ldr	r3, [pc, #524]	@ (800582c <HAL_RCC_ClockConfig+0x240>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d001      	beq.n	8005630 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e184      	b.n	800593a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	4b7b      	ldr	r3, [pc, #492]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005648:	429a      	cmp	r2, r3
 800564a:	d908      	bls.n	800565e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800564c:	4b78      	ldr	r3, [pc, #480]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	4975      	ldr	r1, [pc, #468]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 800565a:	4313      	orrs	r3, r2
 800565c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d010      	beq.n	800568c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	4b70      	ldr	r3, [pc, #448]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005676:	429a      	cmp	r2, r3
 8005678:	d908      	bls.n	800568c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800567a:	4b6d      	ldr	r3, [pc, #436]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	496a      	ldr	r1, [pc, #424]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 8005688:	4313      	orrs	r3, r2
 800568a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b00      	cmp	r3, #0
 8005696:	d010      	beq.n	80056ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	4b64      	ldr	r3, [pc, #400]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d908      	bls.n	80056ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056a8:	4b61      	ldr	r3, [pc, #388]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	495e      	ldr	r1, [pc, #376]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d010      	beq.n	80056e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69da      	ldr	r2, [r3, #28]
 80056ca:	4b59      	ldr	r3, [pc, #356]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d908      	bls.n	80056e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056d6:	4b56      	ldr	r3, [pc, #344]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	4953      	ldr	r1, [pc, #332]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d010      	beq.n	8005716 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	4b4d      	ldr	r3, [pc, #308]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	429a      	cmp	r2, r3
 8005702:	d908      	bls.n	8005716 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005704:	4b4a      	ldr	r3, [pc, #296]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	f023 020f 	bic.w	r2, r3, #15
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4947      	ldr	r1, [pc, #284]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 8005712:	4313      	orrs	r3, r2
 8005714:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d055      	beq.n	80057ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005722:	4b43      	ldr	r3, [pc, #268]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	4940      	ldr	r1, [pc, #256]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 8005730:	4313      	orrs	r3, r2
 8005732:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b02      	cmp	r3, #2
 800573a:	d107      	bne.n	800574c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800573c:	4b3c      	ldr	r3, [pc, #240]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d121      	bne.n	800578c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e0f6      	b.n	800593a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b03      	cmp	r3, #3
 8005752:	d107      	bne.n	8005764 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005754:	4b36      	ldr	r3, [pc, #216]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d115      	bne.n	800578c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0ea      	b.n	800593a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d107      	bne.n	800577c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800576c:	4b30      	ldr	r3, [pc, #192]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005774:	2b00      	cmp	r3, #0
 8005776:	d109      	bne.n	800578c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e0de      	b.n	800593a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800577c:	4b2c      	ldr	r3, [pc, #176]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e0d6      	b.n	800593a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800578c:	4b28      	ldr	r3, [pc, #160]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f023 0207 	bic.w	r2, r3, #7
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4925      	ldr	r1, [pc, #148]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 800579a:	4313      	orrs	r3, r2
 800579c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800579e:	f7fc fbbf 	bl	8001f20 <HAL_GetTick>
 80057a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a4:	e00a      	b.n	80057bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a6:	f7fc fbbb 	bl	8001f20 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e0be      	b.n	800593a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d1eb      	bne.n	80057a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d010      	beq.n	80057fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	4b14      	ldr	r3, [pc, #80]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d208      	bcs.n	80057fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ea:	4b11      	ldr	r3, [pc, #68]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	f023 020f 	bic.w	r2, r3, #15
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	490e      	ldr	r1, [pc, #56]	@ (8005830 <HAL_RCC_ClockConfig+0x244>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057fc:	4b0b      	ldr	r3, [pc, #44]	@ (800582c <HAL_RCC_ClockConfig+0x240>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d214      	bcs.n	8005834 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800580a:	4b08      	ldr	r3, [pc, #32]	@ (800582c <HAL_RCC_ClockConfig+0x240>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f023 020f 	bic.w	r2, r3, #15
 8005812:	4906      	ldr	r1, [pc, #24]	@ (800582c <HAL_RCC_ClockConfig+0x240>)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	4313      	orrs	r3, r2
 8005818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800581a:	4b04      	ldr	r3, [pc, #16]	@ (800582c <HAL_RCC_ClockConfig+0x240>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d005      	beq.n	8005834 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e086      	b.n	800593a <HAL_RCC_ClockConfig+0x34e>
 800582c:	52002000 	.word	0x52002000
 8005830:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d010      	beq.n	8005862 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691a      	ldr	r2, [r3, #16]
 8005844:	4b3f      	ldr	r3, [pc, #252]	@ (8005944 <HAL_RCC_ClockConfig+0x358>)
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800584c:	429a      	cmp	r2, r3
 800584e:	d208      	bcs.n	8005862 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005850:	4b3c      	ldr	r3, [pc, #240]	@ (8005944 <HAL_RCC_ClockConfig+0x358>)
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	4939      	ldr	r1, [pc, #228]	@ (8005944 <HAL_RCC_ClockConfig+0x358>)
 800585e:	4313      	orrs	r3, r2
 8005860:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d010      	beq.n	8005890 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695a      	ldr	r2, [r3, #20]
 8005872:	4b34      	ldr	r3, [pc, #208]	@ (8005944 <HAL_RCC_ClockConfig+0x358>)
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800587a:	429a      	cmp	r2, r3
 800587c:	d208      	bcs.n	8005890 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800587e:	4b31      	ldr	r3, [pc, #196]	@ (8005944 <HAL_RCC_ClockConfig+0x358>)
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	492e      	ldr	r1, [pc, #184]	@ (8005944 <HAL_RCC_ClockConfig+0x358>)
 800588c:	4313      	orrs	r3, r2
 800588e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	d010      	beq.n	80058be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699a      	ldr	r2, [r3, #24]
 80058a0:	4b28      	ldr	r3, [pc, #160]	@ (8005944 <HAL_RCC_ClockConfig+0x358>)
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d208      	bcs.n	80058be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80058ac:	4b25      	ldr	r3, [pc, #148]	@ (8005944 <HAL_RCC_ClockConfig+0x358>)
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	4922      	ldr	r1, [pc, #136]	@ (8005944 <HAL_RCC_ClockConfig+0x358>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0320 	and.w	r3, r3, #32
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d010      	beq.n	80058ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69da      	ldr	r2, [r3, #28]
 80058ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005944 <HAL_RCC_ClockConfig+0x358>)
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d208      	bcs.n	80058ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80058da:	4b1a      	ldr	r3, [pc, #104]	@ (8005944 <HAL_RCC_ClockConfig+0x358>)
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	4917      	ldr	r1, [pc, #92]	@ (8005944 <HAL_RCC_ClockConfig+0x358>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80058ec:	f000 f834 	bl	8005958 <HAL_RCC_GetSysClockFreq>
 80058f0:	4602      	mov	r2, r0
 80058f2:	4b14      	ldr	r3, [pc, #80]	@ (8005944 <HAL_RCC_ClockConfig+0x358>)
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	0a1b      	lsrs	r3, r3, #8
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	4912      	ldr	r1, [pc, #72]	@ (8005948 <HAL_RCC_ClockConfig+0x35c>)
 80058fe:	5ccb      	ldrb	r3, [r1, r3]
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
 8005908:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800590a:	4b0e      	ldr	r3, [pc, #56]	@ (8005944 <HAL_RCC_ClockConfig+0x358>)
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	4a0d      	ldr	r2, [pc, #52]	@ (8005948 <HAL_RCC_ClockConfig+0x35c>)
 8005914:	5cd3      	ldrb	r3, [r2, r3]
 8005916:	f003 031f 	and.w	r3, r3, #31
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
 8005920:	4a0a      	ldr	r2, [pc, #40]	@ (800594c <HAL_RCC_ClockConfig+0x360>)
 8005922:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005924:	4a0a      	ldr	r2, [pc, #40]	@ (8005950 <HAL_RCC_ClockConfig+0x364>)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800592a:	4b0a      	ldr	r3, [pc, #40]	@ (8005954 <HAL_RCC_ClockConfig+0x368>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fc faac 	bl	8001e8c <HAL_InitTick>
 8005934:	4603      	mov	r3, r0
 8005936:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005938:	7bfb      	ldrb	r3, [r7, #15]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	58024400 	.word	0x58024400
 8005948:	0804d4a0 	.word	0x0804d4a0
 800594c:	24000004 	.word	0x24000004
 8005950:	24000000 	.word	0x24000000
 8005954:	24000008 	.word	0x24000008

08005958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005958:	b480      	push	{r7}
 800595a:	b089      	sub	sp, #36	@ 0x24
 800595c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800595e:	4bb3      	ldr	r3, [pc, #716]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005966:	2b18      	cmp	r3, #24
 8005968:	f200 8155 	bhi.w	8005c16 <HAL_RCC_GetSysClockFreq+0x2be>
 800596c:	a201      	add	r2, pc, #4	@ (adr r2, 8005974 <HAL_RCC_GetSysClockFreq+0x1c>)
 800596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005972:	bf00      	nop
 8005974:	080059d9 	.word	0x080059d9
 8005978:	08005c17 	.word	0x08005c17
 800597c:	08005c17 	.word	0x08005c17
 8005980:	08005c17 	.word	0x08005c17
 8005984:	08005c17 	.word	0x08005c17
 8005988:	08005c17 	.word	0x08005c17
 800598c:	08005c17 	.word	0x08005c17
 8005990:	08005c17 	.word	0x08005c17
 8005994:	080059ff 	.word	0x080059ff
 8005998:	08005c17 	.word	0x08005c17
 800599c:	08005c17 	.word	0x08005c17
 80059a0:	08005c17 	.word	0x08005c17
 80059a4:	08005c17 	.word	0x08005c17
 80059a8:	08005c17 	.word	0x08005c17
 80059ac:	08005c17 	.word	0x08005c17
 80059b0:	08005c17 	.word	0x08005c17
 80059b4:	08005a05 	.word	0x08005a05
 80059b8:	08005c17 	.word	0x08005c17
 80059bc:	08005c17 	.word	0x08005c17
 80059c0:	08005c17 	.word	0x08005c17
 80059c4:	08005c17 	.word	0x08005c17
 80059c8:	08005c17 	.word	0x08005c17
 80059cc:	08005c17 	.word	0x08005c17
 80059d0:	08005c17 	.word	0x08005c17
 80059d4:	08005a0b 	.word	0x08005a0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059d8:	4b94      	ldr	r3, [pc, #592]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0320 	and.w	r3, r3, #32
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d009      	beq.n	80059f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059e4:	4b91      	ldr	r3, [pc, #580]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	08db      	lsrs	r3, r3, #3
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	4a90      	ldr	r2, [pc, #576]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059f0:	fa22 f303 	lsr.w	r3, r2, r3
 80059f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80059f6:	e111      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80059f8:	4b8d      	ldr	r3, [pc, #564]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059fa:	61bb      	str	r3, [r7, #24]
      break;
 80059fc:	e10e      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80059fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a00:	61bb      	str	r3, [r7, #24]
      break;
 8005a02:	e10b      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005a04:	4b8c      	ldr	r3, [pc, #560]	@ (8005c38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005a06:	61bb      	str	r3, [r7, #24]
      break;
 8005a08:	e108      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a0a:	4b88      	ldr	r3, [pc, #544]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005a14:	4b85      	ldr	r3, [pc, #532]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a20:	4b82      	ldr	r3, [pc, #520]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a2a:	4b80      	ldr	r3, [pc, #512]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a2e:	08db      	lsrs	r3, r3, #3
 8005a30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80e1 	beq.w	8005c10 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	f000 8083 	beq.w	8005b5c <HAL_RCC_GetSysClockFreq+0x204>
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	f200 80a1 	bhi.w	8005ba0 <HAL_RCC_GetSysClockFreq+0x248>
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_RCC_GetSysClockFreq+0x114>
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d056      	beq.n	8005b18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005a6a:	e099      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d02d      	beq.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a78:	4b6c      	ldr	r3, [pc, #432]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	08db      	lsrs	r3, r3, #3
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	4a6b      	ldr	r2, [pc, #428]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
 8005a88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	ee07 3a90 	vmov	s15, r3
 8005a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	ee07 3a90 	vmov	s15, r3
 8005a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aa2:	4b62      	ldr	r3, [pc, #392]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ab2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ab6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005c3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ace:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005ad2:	e087      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ade:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005c40 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ae6:	4b51      	ldr	r3, [pc, #324]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005afa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005c3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b16:	e065      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b22:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005c44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b2a:	4b40      	ldr	r3, [pc, #256]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b3e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005c3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b5a:	e043      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b66:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005c48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b82:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005c3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b9e:	e021      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005baa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005c44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bc6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005c3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005be2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005be4:	4b11      	ldr	r3, [pc, #68]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be8:	0a5b      	lsrs	r3, r3, #9
 8005bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bee:	3301      	adds	r3, #1
 8005bf0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	ee07 3a90 	vmov	s15, r3
 8005bf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c08:	ee17 3a90 	vmov	r3, s15
 8005c0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005c0e:	e005      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61bb      	str	r3, [r7, #24]
      break;
 8005c14:	e002      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005c16:	4b07      	ldr	r3, [pc, #28]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c18:	61bb      	str	r3, [r7, #24]
      break;
 8005c1a:	bf00      	nop
  }

  return sysclockfreq;
 8005c1c:	69bb      	ldr	r3, [r7, #24]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3724      	adds	r7, #36	@ 0x24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	58024400 	.word	0x58024400
 8005c30:	03d09000 	.word	0x03d09000
 8005c34:	003d0900 	.word	0x003d0900
 8005c38:	017d7840 	.word	0x017d7840
 8005c3c:	46000000 	.word	0x46000000
 8005c40:	4c742400 	.word	0x4c742400
 8005c44:	4a742400 	.word	0x4a742400
 8005c48:	4bbebc20 	.word	0x4bbebc20

08005c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c52:	f7ff fe81 	bl	8005958 <HAL_RCC_GetSysClockFreq>
 8005c56:	4602      	mov	r2, r0
 8005c58:	4b10      	ldr	r3, [pc, #64]	@ (8005c9c <HAL_RCC_GetHCLKFreq+0x50>)
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	0a1b      	lsrs	r3, r3, #8
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	490f      	ldr	r1, [pc, #60]	@ (8005ca0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c64:	5ccb      	ldrb	r3, [r1, r3]
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c70:	4b0a      	ldr	r3, [pc, #40]	@ (8005c9c <HAL_RCC_GetHCLKFreq+0x50>)
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	f003 030f 	and.w	r3, r3, #15
 8005c78:	4a09      	ldr	r2, [pc, #36]	@ (8005ca0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c7a:	5cd3      	ldrb	r3, [r2, r3]
 8005c7c:	f003 031f 	and.w	r3, r3, #31
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	fa22 f303 	lsr.w	r3, r2, r3
 8005c86:	4a07      	ldr	r2, [pc, #28]	@ (8005ca4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c8a:	4a07      	ldr	r2, [pc, #28]	@ (8005ca8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005c90:	4b04      	ldr	r3, [pc, #16]	@ (8005ca4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c92:	681b      	ldr	r3, [r3, #0]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	58024400 	.word	0x58024400
 8005ca0:	0804d4a0 	.word	0x0804d4a0
 8005ca4:	24000004 	.word	0x24000004
 8005ca8:	24000000 	.word	0x24000000

08005cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005cb0:	f7ff ffcc 	bl	8005c4c <HAL_RCC_GetHCLKFreq>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	4b06      	ldr	r3, [pc, #24]	@ (8005cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	091b      	lsrs	r3, r3, #4
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	4904      	ldr	r1, [pc, #16]	@ (8005cd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cc2:	5ccb      	ldrb	r3, [r1, r3]
 8005cc4:	f003 031f 	and.w	r3, r3, #31
 8005cc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	58024400 	.word	0x58024400
 8005cd4:	0804d4a0 	.word	0x0804d4a0

08005cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005cdc:	f7ff ffb6 	bl	8005c4c <HAL_RCC_GetHCLKFreq>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	4b06      	ldr	r3, [pc, #24]	@ (8005cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	0a1b      	lsrs	r3, r3, #8
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	4904      	ldr	r1, [pc, #16]	@ (8005d00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cee:	5ccb      	ldrb	r3, [r1, r3]
 8005cf0:	f003 031f 	and.w	r3, r3, #31
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	58024400 	.word	0x58024400
 8005d00:	0804d4a0 	.word	0x0804d4a0

08005d04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d08:	b0ca      	sub	sp, #296	@ 0x128
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d10:	2300      	movs	r3, #0
 8005d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d16:	2300      	movs	r3, #0
 8005d18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005d28:	2500      	movs	r5, #0
 8005d2a:	ea54 0305 	orrs.w	r3, r4, r5
 8005d2e:	d049      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d3a:	d02f      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005d3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d40:	d828      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d46:	d01a      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d4c:	d822      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005d52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d56:	d007      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d58:	e01c      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d5a:	4bb8      	ldr	r3, [pc, #736]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5e:	4ab7      	ldr	r2, [pc, #732]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d66:	e01a      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	2102      	movs	r1, #2
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 fc8f 	bl	8007694 <RCCEx_PLL2_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d7c:	e00f      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d82:	3328      	adds	r3, #40	@ 0x28
 8005d84:	2102      	movs	r1, #2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 fd36 	bl	80077f8 <RCCEx_PLL3_Config>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d92:	e004      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d9a:	e000      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10a      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005da6:	4ba5      	ldr	r3, [pc, #660]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005daa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005db4:	4aa1      	ldr	r2, [pc, #644]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005db6:	430b      	orrs	r3, r1
 8005db8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dba:	e003      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005dd0:	f04f 0900 	mov.w	r9, #0
 8005dd4:	ea58 0309 	orrs.w	r3, r8, r9
 8005dd8:	d047      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d82a      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005de4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dea:	bf00      	nop
 8005dec:	08005e01 	.word	0x08005e01
 8005df0:	08005e0f 	.word	0x08005e0f
 8005df4:	08005e25 	.word	0x08005e25
 8005df8:	08005e43 	.word	0x08005e43
 8005dfc:	08005e43 	.word	0x08005e43
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e00:	4b8e      	ldr	r3, [pc, #568]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e04:	4a8d      	ldr	r2, [pc, #564]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e0c:	e01a      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e12:	3308      	adds	r3, #8
 8005e14:	2100      	movs	r1, #0
 8005e16:	4618      	mov	r0, r3
 8005e18:	f001 fc3c 	bl	8007694 <RCCEx_PLL2_Config>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e22:	e00f      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e28:	3328      	adds	r3, #40	@ 0x28
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f001 fce3 	bl	80077f8 <RCCEx_PLL3_Config>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e38:	e004      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e40:	e000      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e4c:	4b7b      	ldr	r3, [pc, #492]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e50:	f023 0107 	bic.w	r1, r3, #7
 8005e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e5a:	4a78      	ldr	r2, [pc, #480]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e60:	e003      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005e76:	f04f 0b00 	mov.w	fp, #0
 8005e7a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005e7e:	d04c      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e8a:	d030      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e90:	d829      	bhi.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e92:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e94:	d02d      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e96:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e98:	d825      	bhi.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e9a:	2b80      	cmp	r3, #128	@ 0x80
 8005e9c:	d018      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005e9e:	2b80      	cmp	r3, #128	@ 0x80
 8005ea0:	d821      	bhi.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005ea6:	2b40      	cmp	r3, #64	@ 0x40
 8005ea8:	d007      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005eaa:	e01c      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eac:	4b63      	ldr	r3, [pc, #396]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb0:	4a62      	ldr	r2, [pc, #392]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005eb8:	e01c      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f001 fbe6 	bl	8007694 <RCCEx_PLL2_Config>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ece:	e011      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed4:	3328      	adds	r3, #40	@ 0x28
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f001 fc8d 	bl	80077f8 <RCCEx_PLL3_Config>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ee4:	e006      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eec:	e002      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005eee:	bf00      	nop
 8005ef0:	e000      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005efc:	4b4f      	ldr	r3, [pc, #316]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f00:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f0a:	4a4c      	ldr	r2, [pc, #304]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f0c:	430b      	orrs	r3, r1
 8005f0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f10:	e003      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005f26:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005f30:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005f34:	460b      	mov	r3, r1
 8005f36:	4313      	orrs	r3, r2
 8005f38:	d053      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f46:	d035      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005f48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f4c:	d82e      	bhi.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f4e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f52:	d031      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005f54:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f58:	d828      	bhi.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f5e:	d01a      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005f60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f64:	d822      	bhi.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005f6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f6e:	d007      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005f70:	e01c      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f72:	4b32      	ldr	r3, [pc, #200]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f76:	4a31      	ldr	r2, [pc, #196]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f7e:	e01c      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f84:	3308      	adds	r3, #8
 8005f86:	2100      	movs	r1, #0
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f001 fb83 	bl	8007694 <RCCEx_PLL2_Config>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f94:	e011      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9a:	3328      	adds	r3, #40	@ 0x28
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f001 fc2a 	bl	80077f8 <RCCEx_PLL3_Config>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005faa:	e006      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fb2:	e002      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005fb4:	bf00      	nop
 8005fb6:	e000      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10b      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fd8:	e003      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005fee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005ff8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4313      	orrs	r3, r2
 8006000:	d056      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006006:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800600a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800600e:	d038      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006010:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006014:	d831      	bhi.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006016:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800601a:	d034      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800601c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006020:	d82b      	bhi.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006022:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006026:	d01d      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006028:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800602c:	d825      	bhi.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d006      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006032:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006036:	d00a      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006038:	e01f      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800603a:	bf00      	nop
 800603c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006040:	4ba2      	ldr	r3, [pc, #648]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006044:	4aa1      	ldr	r2, [pc, #644]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800604a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800604c:	e01c      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800604e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006052:	3308      	adds	r3, #8
 8006054:	2100      	movs	r1, #0
 8006056:	4618      	mov	r0, r3
 8006058:	f001 fb1c 	bl	8007694 <RCCEx_PLL2_Config>
 800605c:	4603      	mov	r3, r0
 800605e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006062:	e011      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006068:	3328      	adds	r3, #40	@ 0x28
 800606a:	2100      	movs	r1, #0
 800606c:	4618      	mov	r0, r3
 800606e:	f001 fbc3 	bl	80077f8 <RCCEx_PLL3_Config>
 8006072:	4603      	mov	r3, r0
 8006074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006078:	e006      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006080:	e002      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006082:	bf00      	nop
 8006084:	e000      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10b      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006090:	4b8e      	ldr	r3, [pc, #568]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006094:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80060a0:	4a8a      	ldr	r2, [pc, #552]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060a2:	430b      	orrs	r3, r1
 80060a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80060a6:	e003      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80060b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80060bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80060c0:	2300      	movs	r3, #0
 80060c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80060c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80060ca:	460b      	mov	r3, r1
 80060cc:	4313      	orrs	r3, r2
 80060ce:	d03a      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80060d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060d6:	2b30      	cmp	r3, #48	@ 0x30
 80060d8:	d01f      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80060da:	2b30      	cmp	r3, #48	@ 0x30
 80060dc:	d819      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d00c      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d815      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d019      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80060ea:	2b10      	cmp	r3, #16
 80060ec:	d111      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ee:	4b77      	ldr	r3, [pc, #476]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f2:	4a76      	ldr	r2, [pc, #472]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80060fa:	e011      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006100:	3308      	adds	r3, #8
 8006102:	2102      	movs	r1, #2
 8006104:	4618      	mov	r0, r3
 8006106:	f001 fac5 	bl	8007694 <RCCEx_PLL2_Config>
 800610a:	4603      	mov	r3, r0
 800610c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006110:	e006      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006118:	e002      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800611a:	bf00      	nop
 800611c:	e000      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800611e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10a      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006128:	4b68      	ldr	r3, [pc, #416]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800612a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800612c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006136:	4a65      	ldr	r2, [pc, #404]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006138:	430b      	orrs	r3, r1
 800613a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800613c:	e003      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006142:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006152:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006156:	2300      	movs	r3, #0
 8006158:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800615c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006160:	460b      	mov	r3, r1
 8006162:	4313      	orrs	r3, r2
 8006164:	d051      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800616c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006170:	d035      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006172:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006176:	d82e      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006178:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800617c:	d031      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800617e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006182:	d828      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006188:	d01a      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800618a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800618e:	d822      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006198:	d007      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800619a:	e01c      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800619c:	4b4b      	ldr	r3, [pc, #300]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800619e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a0:	4a4a      	ldr	r2, [pc, #296]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061a8:	e01c      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ae:	3308      	adds	r3, #8
 80061b0:	2100      	movs	r1, #0
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 fa6e 	bl	8007694 <RCCEx_PLL2_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061be:	e011      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c4:	3328      	adds	r3, #40	@ 0x28
 80061c6:	2100      	movs	r1, #0
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 fb15 	bl	80077f8 <RCCEx_PLL3_Config>
 80061ce:	4603      	mov	r3, r0
 80061d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061d4:	e006      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061dc:	e002      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80061de:	bf00      	nop
 80061e0:	e000      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80061e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80061ec:	4b37      	ldr	r3, [pc, #220]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061fa:	4a34      	ldr	r2, [pc, #208]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061fc:	430b      	orrs	r3, r1
 80061fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8006200:	e003      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800620a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006216:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800621a:	2300      	movs	r3, #0
 800621c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006220:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006224:	460b      	mov	r3, r1
 8006226:	4313      	orrs	r3, r2
 8006228:	d056      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800622a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006230:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006234:	d033      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006236:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800623a:	d82c      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800623c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006240:	d02f      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006242:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006246:	d826      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006248:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800624c:	d02b      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800624e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006252:	d820      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006254:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006258:	d012      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800625a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800625e:	d81a      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006260:	2b00      	cmp	r3, #0
 8006262:	d022      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006268:	d115      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626e:	3308      	adds	r3, #8
 8006270:	2101      	movs	r1, #1
 8006272:	4618      	mov	r0, r3
 8006274:	f001 fa0e 	bl	8007694 <RCCEx_PLL2_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800627e:	e015      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006284:	3328      	adds	r3, #40	@ 0x28
 8006286:	2101      	movs	r1, #1
 8006288:	4618      	mov	r0, r3
 800628a:	f001 fab5 	bl	80077f8 <RCCEx_PLL3_Config>
 800628e:	4603      	mov	r3, r0
 8006290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006294:	e00a      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800629c:	e006      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800629e:	bf00      	nop
 80062a0:	e004      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80062a2:	bf00      	nop
 80062a4:	e002      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80062a6:	bf00      	nop
 80062a8:	e000      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80062aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10d      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80062b4:	4b05      	ldr	r3, [pc, #20]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80062bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062c2:	4a02      	ldr	r2, [pc, #8]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062c4:	430b      	orrs	r3, r1
 80062c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80062c8:	e006      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80062ca:	bf00      	nop
 80062cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80062d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80062e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062e8:	2300      	movs	r3, #0
 80062ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4313      	orrs	r3, r2
 80062f6:	d055      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80062f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006300:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006304:	d033      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006306:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800630a:	d82c      	bhi.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800630c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006310:	d02f      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006316:	d826      	bhi.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006318:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800631c:	d02b      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800631e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006322:	d820      	bhi.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006328:	d012      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800632a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800632e:	d81a      	bhi.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006330:	2b00      	cmp	r3, #0
 8006332:	d022      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006334:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006338:	d115      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800633a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633e:	3308      	adds	r3, #8
 8006340:	2101      	movs	r1, #1
 8006342:	4618      	mov	r0, r3
 8006344:	f001 f9a6 	bl	8007694 <RCCEx_PLL2_Config>
 8006348:	4603      	mov	r3, r0
 800634a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800634e:	e015      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006354:	3328      	adds	r3, #40	@ 0x28
 8006356:	2101      	movs	r1, #1
 8006358:	4618      	mov	r0, r3
 800635a:	f001 fa4d 	bl	80077f8 <RCCEx_PLL3_Config>
 800635e:	4603      	mov	r3, r0
 8006360:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006364:	e00a      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800636c:	e006      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800636e:	bf00      	nop
 8006370:	e004      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006372:	bf00      	nop
 8006374:	e002      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006376:	bf00      	nop
 8006378:	e000      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800637a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800637c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10b      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006384:	4ba3      	ldr	r3, [pc, #652]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006388:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800638c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006390:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006394:	4a9f      	ldr	r2, [pc, #636]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006396:	430b      	orrs	r3, r1
 8006398:	6593      	str	r3, [r2, #88]	@ 0x58
 800639a:	e003      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80063b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063b4:	2300      	movs	r3, #0
 80063b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80063ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063be:	460b      	mov	r3, r1
 80063c0:	4313      	orrs	r3, r2
 80063c2:	d037      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80063c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063ce:	d00e      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80063d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063d4:	d816      	bhi.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d018      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80063da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063de:	d111      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063e0:	4b8c      	ldr	r3, [pc, #560]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e4:	4a8b      	ldr	r2, [pc, #556]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063ec:	e00f      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f2:	3308      	adds	r3, #8
 80063f4:	2101      	movs	r1, #1
 80063f6:	4618      	mov	r0, r3
 80063f8:	f001 f94c 	bl	8007694 <RCCEx_PLL2_Config>
 80063fc:	4603      	mov	r3, r0
 80063fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006402:	e004      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800640a:	e000      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800640c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10a      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006416:	4b7f      	ldr	r3, [pc, #508]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800641a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800641e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006424:	4a7b      	ldr	r2, [pc, #492]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006426:	430b      	orrs	r3, r1
 8006428:	6513      	str	r3, [r2, #80]	@ 0x50
 800642a:	e003      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006430:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006440:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006444:	2300      	movs	r3, #0
 8006446:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800644a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800644e:	460b      	mov	r3, r1
 8006450:	4313      	orrs	r3, r2
 8006452:	d039      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800645a:	2b03      	cmp	r3, #3
 800645c:	d81c      	bhi.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800645e:	a201      	add	r2, pc, #4	@ (adr r2, 8006464 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	080064a1 	.word	0x080064a1
 8006468:	08006475 	.word	0x08006475
 800646c:	08006483 	.word	0x08006483
 8006470:	080064a1 	.word	0x080064a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006474:	4b67      	ldr	r3, [pc, #412]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006478:	4a66      	ldr	r2, [pc, #408]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800647a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800647e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006480:	e00f      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006486:	3308      	adds	r3, #8
 8006488:	2102      	movs	r1, #2
 800648a:	4618      	mov	r0, r3
 800648c:	f001 f902 	bl	8007694 <RCCEx_PLL2_Config>
 8006490:	4603      	mov	r3, r0
 8006492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006496:	e004      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800649e:	e000      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80064a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10a      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80064aa:	4b5a      	ldr	r3, [pc, #360]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ae:	f023 0103 	bic.w	r1, r3, #3
 80064b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064b8:	4a56      	ldr	r2, [pc, #344]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064ba:	430b      	orrs	r3, r1
 80064bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064be:	e003      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80064d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064d8:	2300      	movs	r3, #0
 80064da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80064e2:	460b      	mov	r3, r1
 80064e4:	4313      	orrs	r3, r2
 80064e6:	f000 809f 	beq.w	8006628 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064ea:	4b4b      	ldr	r3, [pc, #300]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a4a      	ldr	r2, [pc, #296]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064f6:	f7fb fd13 	bl	8001f20 <HAL_GetTick>
 80064fa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064fe:	e00b      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006500:	f7fb fd0e 	bl	8001f20 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b64      	cmp	r3, #100	@ 0x64
 800650e:	d903      	bls.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006516:	e005      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006518:	4b3f      	ldr	r3, [pc, #252]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0ed      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006528:	2b00      	cmp	r3, #0
 800652a:	d179      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800652c:	4b39      	ldr	r3, [pc, #228]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800652e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006534:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006538:	4053      	eors	r3, r2
 800653a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800653e:	2b00      	cmp	r3, #0
 8006540:	d015      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006542:	4b34      	ldr	r3, [pc, #208]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006546:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800654a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800654e:	4b31      	ldr	r3, [pc, #196]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006552:	4a30      	ldr	r2, [pc, #192]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006558:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800655a:	4b2e      	ldr	r3, [pc, #184]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800655c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800655e:	4a2d      	ldr	r2, [pc, #180]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006564:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006566:	4a2b      	ldr	r2, [pc, #172]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006568:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800656c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800656e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006572:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800657a:	d118      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657c:	f7fb fcd0 	bl	8001f20 <HAL_GetTick>
 8006580:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006584:	e00d      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006586:	f7fb fccb 	bl	8001f20 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006590:	1ad2      	subs	r2, r2, r3
 8006592:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006596:	429a      	cmp	r2, r3
 8006598:	d903      	bls.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80065a0:	e005      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065a2:	4b1c      	ldr	r3, [pc, #112]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0eb      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80065ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d129      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065c6:	d10e      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80065c8:	4b12      	ldr	r3, [pc, #72]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065d8:	091a      	lsrs	r2, r3, #4
 80065da:	4b10      	ldr	r3, [pc, #64]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80065dc:	4013      	ands	r3, r2
 80065de:	4a0d      	ldr	r2, [pc, #52]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065e0:	430b      	orrs	r3, r1
 80065e2:	6113      	str	r3, [r2, #16]
 80065e4:	e005      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80065e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80065f0:	6113      	str	r3, [r2, #16]
 80065f2:	4b08      	ldr	r3, [pc, #32]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065f4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006602:	4a04      	ldr	r2, [pc, #16]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006604:	430b      	orrs	r3, r1
 8006606:	6713      	str	r3, [r2, #112]	@ 0x70
 8006608:	e00e      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800660a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800660e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006612:	e009      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006614:	58024400 	.word	0x58024400
 8006618:	58024800 	.word	0x58024800
 800661c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006624:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f002 0301 	and.w	r3, r2, #1
 8006634:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006638:	2300      	movs	r3, #0
 800663a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800663e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006642:	460b      	mov	r3, r1
 8006644:	4313      	orrs	r3, r2
 8006646:	f000 8089 	beq.w	800675c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006650:	2b28      	cmp	r3, #40	@ 0x28
 8006652:	d86b      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006654:	a201      	add	r2, pc, #4	@ (adr r2, 800665c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665a:	bf00      	nop
 800665c:	08006735 	.word	0x08006735
 8006660:	0800672d 	.word	0x0800672d
 8006664:	0800672d 	.word	0x0800672d
 8006668:	0800672d 	.word	0x0800672d
 800666c:	0800672d 	.word	0x0800672d
 8006670:	0800672d 	.word	0x0800672d
 8006674:	0800672d 	.word	0x0800672d
 8006678:	0800672d 	.word	0x0800672d
 800667c:	08006701 	.word	0x08006701
 8006680:	0800672d 	.word	0x0800672d
 8006684:	0800672d 	.word	0x0800672d
 8006688:	0800672d 	.word	0x0800672d
 800668c:	0800672d 	.word	0x0800672d
 8006690:	0800672d 	.word	0x0800672d
 8006694:	0800672d 	.word	0x0800672d
 8006698:	0800672d 	.word	0x0800672d
 800669c:	08006717 	.word	0x08006717
 80066a0:	0800672d 	.word	0x0800672d
 80066a4:	0800672d 	.word	0x0800672d
 80066a8:	0800672d 	.word	0x0800672d
 80066ac:	0800672d 	.word	0x0800672d
 80066b0:	0800672d 	.word	0x0800672d
 80066b4:	0800672d 	.word	0x0800672d
 80066b8:	0800672d 	.word	0x0800672d
 80066bc:	08006735 	.word	0x08006735
 80066c0:	0800672d 	.word	0x0800672d
 80066c4:	0800672d 	.word	0x0800672d
 80066c8:	0800672d 	.word	0x0800672d
 80066cc:	0800672d 	.word	0x0800672d
 80066d0:	0800672d 	.word	0x0800672d
 80066d4:	0800672d 	.word	0x0800672d
 80066d8:	0800672d 	.word	0x0800672d
 80066dc:	08006735 	.word	0x08006735
 80066e0:	0800672d 	.word	0x0800672d
 80066e4:	0800672d 	.word	0x0800672d
 80066e8:	0800672d 	.word	0x0800672d
 80066ec:	0800672d 	.word	0x0800672d
 80066f0:	0800672d 	.word	0x0800672d
 80066f4:	0800672d 	.word	0x0800672d
 80066f8:	0800672d 	.word	0x0800672d
 80066fc:	08006735 	.word	0x08006735
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006704:	3308      	adds	r3, #8
 8006706:	2101      	movs	r1, #1
 8006708:	4618      	mov	r0, r3
 800670a:	f000 ffc3 	bl	8007694 <RCCEx_PLL2_Config>
 800670e:	4603      	mov	r3, r0
 8006710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006714:	e00f      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671a:	3328      	adds	r3, #40	@ 0x28
 800671c:	2101      	movs	r1, #1
 800671e:	4618      	mov	r0, r3
 8006720:	f001 f86a 	bl	80077f8 <RCCEx_PLL3_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800672a:	e004      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006732:	e000      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10a      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800673e:	4bbf      	ldr	r3, [pc, #764]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006742:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800674c:	4abb      	ldr	r2, [pc, #748]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800674e:	430b      	orrs	r3, r1
 8006750:	6553      	str	r3, [r2, #84]	@ 0x54
 8006752:	e003      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006758:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800675c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	f002 0302 	and.w	r3, r2, #2
 8006768:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800676c:	2300      	movs	r3, #0
 800676e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006772:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006776:	460b      	mov	r3, r1
 8006778:	4313      	orrs	r3, r2
 800677a:	d041      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800677c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006780:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006782:	2b05      	cmp	r3, #5
 8006784:	d824      	bhi.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006786:	a201      	add	r2, pc, #4	@ (adr r2, 800678c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678c:	080067d9 	.word	0x080067d9
 8006790:	080067a5 	.word	0x080067a5
 8006794:	080067bb 	.word	0x080067bb
 8006798:	080067d9 	.word	0x080067d9
 800679c:	080067d9 	.word	0x080067d9
 80067a0:	080067d9 	.word	0x080067d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a8:	3308      	adds	r3, #8
 80067aa:	2101      	movs	r1, #1
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 ff71 	bl	8007694 <RCCEx_PLL2_Config>
 80067b2:	4603      	mov	r3, r0
 80067b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067b8:	e00f      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067be:	3328      	adds	r3, #40	@ 0x28
 80067c0:	2101      	movs	r1, #1
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 f818 	bl	80077f8 <RCCEx_PLL3_Config>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067ce:	e004      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067d6:	e000      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80067d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80067e2:	4b96      	ldr	r3, [pc, #600]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e6:	f023 0107 	bic.w	r1, r3, #7
 80067ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067f0:	4a92      	ldr	r2, [pc, #584]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067f2:	430b      	orrs	r3, r1
 80067f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80067f6:	e003      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	f002 0304 	and.w	r3, r2, #4
 800680c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006810:	2300      	movs	r3, #0
 8006812:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006816:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800681a:	460b      	mov	r3, r1
 800681c:	4313      	orrs	r3, r2
 800681e:	d044      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006828:	2b05      	cmp	r3, #5
 800682a:	d825      	bhi.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800682c:	a201      	add	r2, pc, #4	@ (adr r2, 8006834 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800682e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006832:	bf00      	nop
 8006834:	08006881 	.word	0x08006881
 8006838:	0800684d 	.word	0x0800684d
 800683c:	08006863 	.word	0x08006863
 8006840:	08006881 	.word	0x08006881
 8006844:	08006881 	.word	0x08006881
 8006848:	08006881 	.word	0x08006881
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800684c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006850:	3308      	adds	r3, #8
 8006852:	2101      	movs	r1, #1
 8006854:	4618      	mov	r0, r3
 8006856:	f000 ff1d 	bl	8007694 <RCCEx_PLL2_Config>
 800685a:	4603      	mov	r3, r0
 800685c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006860:	e00f      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006866:	3328      	adds	r3, #40	@ 0x28
 8006868:	2101      	movs	r1, #1
 800686a:	4618      	mov	r0, r3
 800686c:	f000 ffc4 	bl	80077f8 <RCCEx_PLL3_Config>
 8006870:	4603      	mov	r3, r0
 8006872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006876:	e004      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800687e:	e000      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800688a:	4b6c      	ldr	r3, [pc, #432]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800688c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688e:	f023 0107 	bic.w	r1, r3, #7
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800689a:	4a68      	ldr	r2, [pc, #416]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800689c:	430b      	orrs	r3, r1
 800689e:	6593      	str	r3, [r2, #88]	@ 0x58
 80068a0:	e003      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	f002 0320 	and.w	r3, r2, #32
 80068b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068ba:	2300      	movs	r3, #0
 80068bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068c4:	460b      	mov	r3, r1
 80068c6:	4313      	orrs	r3, r2
 80068c8:	d055      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068d6:	d033      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80068d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068dc:	d82c      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e2:	d02f      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80068e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e8:	d826      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068ee:	d02b      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80068f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068f4:	d820      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068fa:	d012      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80068fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006900:	d81a      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d022      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800690a:	d115      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800690c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006910:	3308      	adds	r3, #8
 8006912:	2100      	movs	r1, #0
 8006914:	4618      	mov	r0, r3
 8006916:	f000 febd 	bl	8007694 <RCCEx_PLL2_Config>
 800691a:	4603      	mov	r3, r0
 800691c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006920:	e015      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006926:	3328      	adds	r3, #40	@ 0x28
 8006928:	2102      	movs	r1, #2
 800692a:	4618      	mov	r0, r3
 800692c:	f000 ff64 	bl	80077f8 <RCCEx_PLL3_Config>
 8006930:	4603      	mov	r3, r0
 8006932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006936:	e00a      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800693e:	e006      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006940:	bf00      	nop
 8006942:	e004      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006944:	bf00      	nop
 8006946:	e002      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006948:	bf00      	nop
 800694a:	e000      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800694c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10b      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006956:	4b39      	ldr	r3, [pc, #228]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800695a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800695e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006966:	4a35      	ldr	r2, [pc, #212]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006968:	430b      	orrs	r3, r1
 800696a:	6553      	str	r3, [r2, #84]	@ 0x54
 800696c:	e003      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006986:	2300      	movs	r3, #0
 8006988:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800698c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006990:	460b      	mov	r3, r1
 8006992:	4313      	orrs	r3, r2
 8006994:	d058      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800699e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80069a2:	d033      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80069a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80069a8:	d82c      	bhi.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80069aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ae:	d02f      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80069b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069b4:	d826      	bhi.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80069b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069ba:	d02b      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80069bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069c0:	d820      	bhi.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80069c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069c6:	d012      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80069c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069cc:	d81a      	bhi.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d022      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80069d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069d6:	d115      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069dc:	3308      	adds	r3, #8
 80069de:	2100      	movs	r1, #0
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 fe57 	bl	8007694 <RCCEx_PLL2_Config>
 80069e6:	4603      	mov	r3, r0
 80069e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069ec:	e015      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f2:	3328      	adds	r3, #40	@ 0x28
 80069f4:	2102      	movs	r1, #2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fefe 	bl	80077f8 <RCCEx_PLL3_Config>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a02:	e00a      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a0a:	e006      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006a0c:	bf00      	nop
 8006a0e:	e004      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006a10:	bf00      	nop
 8006a12:	e002      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006a14:	bf00      	nop
 8006a16:	e000      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10e      	bne.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a22:	4b06      	ldr	r3, [pc, #24]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a26:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a32:	4a02      	ldr	r2, [pc, #8]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a34:	430b      	orrs	r3, r1
 8006a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a38:	e006      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006a3a:	bf00      	nop
 8006a3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006a54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a5e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006a62:	460b      	mov	r3, r1
 8006a64:	4313      	orrs	r3, r2
 8006a66:	d055      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a70:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a74:	d033      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006a76:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a7a:	d82c      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a80:	d02f      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006a82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a86:	d826      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a88:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a8c:	d02b      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006a8e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a92:	d820      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a98:	d012      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006a9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a9e:	d81a      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d022      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aa8:	d115      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aae:	3308      	adds	r3, #8
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fdee 	bl	8007694 <RCCEx_PLL2_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006abe:	e015      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac4:	3328      	adds	r3, #40	@ 0x28
 8006ac6:	2102      	movs	r1, #2
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fe95 	bl	80077f8 <RCCEx_PLL3_Config>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ad4:	e00a      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006adc:	e006      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ade:	bf00      	nop
 8006ae0:	e004      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ae2:	bf00      	nop
 8006ae4:	e002      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ae6:	bf00      	nop
 8006ae8:	e000      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10b      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006af4:	4ba1      	ldr	r3, [pc, #644]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006af8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b04:	4a9d      	ldr	r2, [pc, #628]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b06:	430b      	orrs	r3, r1
 8006b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b0a:	e003      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	f002 0308 	and.w	r3, r2, #8
 8006b20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b24:	2300      	movs	r3, #0
 8006b26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b2a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4313      	orrs	r3, r2
 8006b32:	d01e      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b40:	d10c      	bne.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b46:	3328      	adds	r3, #40	@ 0x28
 8006b48:	2102      	movs	r1, #2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fe54 	bl	80077f8 <RCCEx_PLL3_Config>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b5c:	4b87      	ldr	r3, [pc, #540]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b60:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b6c:	4a83      	ldr	r2, [pc, #524]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b6e:	430b      	orrs	r3, r1
 8006b70:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	f002 0310 	and.w	r3, r2, #16
 8006b7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b82:	2300      	movs	r3, #0
 8006b84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b88:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	d01e      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b9e:	d10c      	bne.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba4:	3328      	adds	r3, #40	@ 0x28
 8006ba6:	2102      	movs	r1, #2
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fe25 	bl	80077f8 <RCCEx_PLL3_Config>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bba:	4b70      	ldr	r3, [pc, #448]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bbe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bca:	4a6c      	ldr	r2, [pc, #432]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006bdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006be0:	2300      	movs	r3, #0
 8006be2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006be6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006bea:	460b      	mov	r3, r1
 8006bec:	4313      	orrs	r3, r2
 8006bee:	d03e      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bfc:	d022      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006bfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c02:	d81b      	bhi.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c0c:	d00b      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006c0e:	e015      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c14:	3308      	adds	r3, #8
 8006c16:	2100      	movs	r1, #0
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fd3b 	bl	8007694 <RCCEx_PLL2_Config>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c24:	e00f      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2a:	3328      	adds	r3, #40	@ 0x28
 8006c2c:	2102      	movs	r1, #2
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fde2 	bl	80077f8 <RCCEx_PLL3_Config>
 8006c34:	4603      	mov	r3, r0
 8006c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c3a:	e004      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c42:	e000      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10b      	bne.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c52:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c5e:	4a47      	ldr	r2, [pc, #284]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c60:	430b      	orrs	r3, r1
 8006c62:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c64:	e003      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006c7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c80:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c84:	460b      	mov	r3, r1
 8006c86:	4313      	orrs	r3, r2
 8006c88:	d03b      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c96:	d01f      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006c98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c9c:	d818      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ca2:	d003      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006ca4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ca8:	d007      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006caa:	e011      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cac:	4b33      	ldr	r3, [pc, #204]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb0:	4a32      	ldr	r2, [pc, #200]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006cb8:	e00f      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cbe:	3328      	adds	r3, #40	@ 0x28
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fd98 	bl	80077f8 <RCCEx_PLL3_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006cce:	e004      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cd6:	e000      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10b      	bne.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ce2:	4b26      	ldr	r3, [pc, #152]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf2:	4a22      	ldr	r2, [pc, #136]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cf8:	e003      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006d0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d10:	2300      	movs	r3, #0
 8006d12:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d14:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	d034      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d2c:	d007      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006d2e:	e011      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d30:	4b12      	ldr	r3, [pc, #72]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d34:	4a11      	ldr	r2, [pc, #68]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d3c:	e00e      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d42:	3308      	adds	r3, #8
 8006d44:	2102      	movs	r1, #2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fca4 	bl	8007694 <RCCEx_PLL2_Config>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d52:	e003      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10d      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d64:	4b05      	ldr	r3, [pc, #20]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d68:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d72:	4a02      	ldr	r2, [pc, #8]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d74:	430b      	orrs	r3, r1
 8006d76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d78:	e006      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006d7a:	bf00      	nop
 8006d7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006d94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d96:	2300      	movs	r3, #0
 8006d98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d9a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4313      	orrs	r3, r2
 8006da2:	d00c      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da8:	3328      	adds	r3, #40	@ 0x28
 8006daa:	2102      	movs	r1, #2
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fd23 	bl	80077f8 <RCCEx_PLL3_Config>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006dca:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dcc:	2300      	movs	r3, #0
 8006dce:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dd0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	d038      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006de2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006de6:	d018      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006de8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dec:	d811      	bhi.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006dee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df2:	d014      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df8:	d80b      	bhi.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d011      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e02:	d106      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e04:	4bc3      	ldr	r3, [pc, #780]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e08:	4ac2      	ldr	r2, [pc, #776]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006e10:	e008      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e18:	e004      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006e1a:	bf00      	nop
 8006e1c:	e002      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006e1e:	bf00      	nop
 8006e20:	e000      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10b      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e2c:	4bb9      	ldr	r3, [pc, #740]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e30:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e3c:	4ab5      	ldr	r2, [pc, #724]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e3e:	430b      	orrs	r3, r1
 8006e40:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e42:	e003      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006e58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e5e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006e62:	460b      	mov	r3, r1
 8006e64:	4313      	orrs	r3, r2
 8006e66:	d009      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e68:	4baa      	ldr	r3, [pc, #680]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e76:	4aa7      	ldr	r2, [pc, #668]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e78:	430b      	orrs	r3, r1
 8006e7a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006e88:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006e92:	460b      	mov	r3, r1
 8006e94:	4313      	orrs	r3, r2
 8006e96:	d00a      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006e98:	4b9e      	ldr	r3, [pc, #632]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006ea8:	4a9a      	ldr	r2, [pc, #616]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eaa:	430b      	orrs	r3, r1
 8006eac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006eba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ec0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	d009      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006eca:	4b92      	ldr	r3, [pc, #584]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ece:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ed8:	4a8e      	ldr	r2, [pc, #568]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eda:	430b      	orrs	r3, r1
 8006edc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006eea:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eec:	2300      	movs	r3, #0
 8006eee:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ef0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	d00e      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006efa:	4b86      	ldr	r3, [pc, #536]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	4a85      	ldr	r2, [pc, #532]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f04:	6113      	str	r3, [r2, #16]
 8006f06:	4b83      	ldr	r3, [pc, #524]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f08:	6919      	ldr	r1, [r3, #16]
 8006f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f12:	4a80      	ldr	r2, [pc, #512]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f14:	430b      	orrs	r3, r1
 8006f16:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006f24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f26:	2300      	movs	r3, #0
 8006f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f2a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4313      	orrs	r3, r2
 8006f32:	d009      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f34:	4b77      	ldr	r3, [pc, #476]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f38:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f42:	4a74      	ldr	r2, [pc, #464]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f44:	430b      	orrs	r3, r1
 8006f46:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006f54:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f56:	2300      	movs	r3, #0
 8006f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f5a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4313      	orrs	r3, r2
 8006f62:	d00a      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f64:	4b6b      	ldr	r3, [pc, #428]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f68:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f74:	4a67      	ldr	r2, [pc, #412]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f76:	430b      	orrs	r3, r1
 8006f78:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	2100      	movs	r1, #0
 8006f84:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f8c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006f90:	460b      	mov	r3, r1
 8006f92:	4313      	orrs	r3, r2
 8006f94:	d011      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fb78 	bl	8007694 <RCCEx_PLL2_Config>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	6239      	str	r1, [r7, #32]
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fcc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	d011      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fda:	3308      	adds	r3, #8
 8006fdc:	2101      	movs	r1, #1
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fb58 	bl	8007694 <RCCEx_PLL2_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	2100      	movs	r1, #0
 8007004:	61b9      	str	r1, [r7, #24]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	61fb      	str	r3, [r7, #28]
 800700c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007010:	460b      	mov	r3, r1
 8007012:	4313      	orrs	r3, r2
 8007014:	d011      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701a:	3308      	adds	r3, #8
 800701c:	2102      	movs	r1, #2
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fb38 	bl	8007694 <RCCEx_PLL2_Config>
 8007024:	4603      	mov	r3, r0
 8007026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800702a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800703a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007042:	2100      	movs	r1, #0
 8007044:	6139      	str	r1, [r7, #16]
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007050:	460b      	mov	r3, r1
 8007052:	4313      	orrs	r3, r2
 8007054:	d011      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705a:	3328      	adds	r3, #40	@ 0x28
 800705c:	2100      	movs	r1, #0
 800705e:	4618      	mov	r0, r3
 8007060:	f000 fbca 	bl	80077f8 <RCCEx_PLL3_Config>
 8007064:	4603      	mov	r3, r0
 8007066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800706a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	2100      	movs	r1, #0
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	f003 0310 	and.w	r3, r3, #16
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007090:	460b      	mov	r3, r1
 8007092:	4313      	orrs	r3, r2
 8007094:	d011      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709a:	3328      	adds	r3, #40	@ 0x28
 800709c:	2101      	movs	r1, #1
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fbaa 	bl	80077f8 <RCCEx_PLL3_Config>
 80070a4:	4603      	mov	r3, r0
 80070a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80070aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80070ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	2100      	movs	r1, #0
 80070c4:	6039      	str	r1, [r7, #0]
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	607b      	str	r3, [r7, #4]
 80070cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80070d0:	460b      	mov	r3, r1
 80070d2:	4313      	orrs	r3, r2
 80070d4:	d011      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070da:	3328      	adds	r3, #40	@ 0x28
 80070dc:	2102      	movs	r1, #2
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fb8a 	bl	80077f8 <RCCEx_PLL3_Config>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80070ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80070fa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	e000      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
}
 8007108:	4618      	mov	r0, r3
 800710a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800710e:	46bd      	mov	sp, r7
 8007110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007114:	58024400 	.word	0x58024400

08007118 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800711c:	f7fe fd96 	bl	8005c4c <HAL_RCC_GetHCLKFreq>
 8007120:	4602      	mov	r2, r0
 8007122:	4b06      	ldr	r3, [pc, #24]	@ (800713c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	091b      	lsrs	r3, r3, #4
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	4904      	ldr	r1, [pc, #16]	@ (8007140 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800712e:	5ccb      	ldrb	r3, [r1, r3]
 8007130:	f003 031f 	and.w	r3, r3, #31
 8007134:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007138:	4618      	mov	r0, r3
 800713a:	bd80      	pop	{r7, pc}
 800713c:	58024400 	.word	0x58024400
 8007140:	0804d4a0 	.word	0x0804d4a0

08007144 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007144:	b480      	push	{r7}
 8007146:	b089      	sub	sp, #36	@ 0x24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800714c:	4ba1      	ldr	r3, [pc, #644]	@ (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007150:	f003 0303 	and.w	r3, r3, #3
 8007154:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007156:	4b9f      	ldr	r3, [pc, #636]	@ (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715a:	0b1b      	lsrs	r3, r3, #12
 800715c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007160:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007162:	4b9c      	ldr	r3, [pc, #624]	@ (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007166:	091b      	lsrs	r3, r3, #4
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800716e:	4b99      	ldr	r3, [pc, #612]	@ (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007172:	08db      	lsrs	r3, r3, #3
 8007174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	fb02 f303 	mul.w	r3, r2, r3
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007186:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 8111 	beq.w	80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2b02      	cmp	r3, #2
 8007196:	f000 8083 	beq.w	80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b02      	cmp	r3, #2
 800719e:	f200 80a1 	bhi.w	80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d056      	beq.n	800725c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071ae:	e099      	b.n	80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071b0:	4b88      	ldr	r3, [pc, #544]	@ (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d02d      	beq.n	8007218 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071bc:	4b85      	ldr	r3, [pc, #532]	@ (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	08db      	lsrs	r3, r3, #3
 80071c2:	f003 0303 	and.w	r3, r3, #3
 80071c6:	4a84      	ldr	r2, [pc, #528]	@ (80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071c8:	fa22 f303 	lsr.w	r3, r2, r3
 80071cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	ee07 3a90 	vmov	s15, r3
 80071d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e6:	4b7b      	ldr	r3, [pc, #492]	@ (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800720a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007212:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007216:	e087      	b.n	8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007222:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722a:	4b6a      	ldr	r3, [pc, #424]	@ (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800722c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800722e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723a:	ed97 6a03 	vldr	s12, [r7, #12]
 800723e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800724e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800725a:	e065      	b.n	8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007266:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800726a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726e:	4b59      	ldr	r3, [pc, #356]	@ (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007282:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800729e:	e043      	b.n	8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b2:	4b48      	ldr	r3, [pc, #288]	@ (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072e2:	e021      	b.n	8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f6:	4b37      	ldr	r3, [pc, #220]	@ (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007306:	ed97 6a03 	vldr	s12, [r7, #12]
 800730a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800730e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800731a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800731e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007326:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007328:	4b2a      	ldr	r3, [pc, #168]	@ (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800732a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732c:	0a5b      	lsrs	r3, r3, #9
 800732e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800733e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007342:	edd7 6a07 	vldr	s13, [r7, #28]
 8007346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800734a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800734e:	ee17 2a90 	vmov	r2, s15
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007356:	4b1f      	ldr	r3, [pc, #124]	@ (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735a:	0c1b      	lsrs	r3, r3, #16
 800735c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007360:	ee07 3a90 	vmov	s15, r3
 8007364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007368:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800736c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007370:	edd7 6a07 	vldr	s13, [r7, #28]
 8007374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800737c:	ee17 2a90 	vmov	r2, s15
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007384:	4b13      	ldr	r3, [pc, #76]	@ (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007388:	0e1b      	lsrs	r3, r3, #24
 800738a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007396:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800739a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800739e:	edd7 6a07 	vldr	s13, [r7, #28]
 80073a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073aa:	ee17 2a90 	vmov	r2, s15
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073b2:	e008      	b.n	80073c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	609a      	str	r2, [r3, #8]
}
 80073c6:	bf00      	nop
 80073c8:	3724      	adds	r7, #36	@ 0x24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	58024400 	.word	0x58024400
 80073d8:	03d09000 	.word	0x03d09000
 80073dc:	46000000 	.word	0x46000000
 80073e0:	4c742400 	.word	0x4c742400
 80073e4:	4a742400 	.word	0x4a742400
 80073e8:	4bbebc20 	.word	0x4bbebc20

080073ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b089      	sub	sp, #36	@ 0x24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073f4:	4ba1      	ldr	r3, [pc, #644]	@ (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80073fe:	4b9f      	ldr	r3, [pc, #636]	@ (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007402:	0d1b      	lsrs	r3, r3, #20
 8007404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007408:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800740a:	4b9c      	ldr	r3, [pc, #624]	@ (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740e:	0a1b      	lsrs	r3, r3, #8
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007416:	4b99      	ldr	r3, [pc, #612]	@ (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800741a:	08db      	lsrs	r3, r3, #3
 800741c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	fb02 f303 	mul.w	r3, r2, r3
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8111 	beq.w	800765c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b02      	cmp	r3, #2
 800743e:	f000 8083 	beq.w	8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b02      	cmp	r3, #2
 8007446:	f200 80a1 	bhi.w	800758c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d056      	beq.n	8007504 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007456:	e099      	b.n	800758c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007458:	4b88      	ldr	r3, [pc, #544]	@ (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d02d      	beq.n	80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007464:	4b85      	ldr	r3, [pc, #532]	@ (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	08db      	lsrs	r3, r3, #3
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	4a84      	ldr	r2, [pc, #528]	@ (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007470:	fa22 f303 	lsr.w	r3, r2, r3
 8007474:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	ee07 3a90 	vmov	s15, r3
 800747c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748e:	4b7b      	ldr	r3, [pc, #492]	@ (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749e:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074be:	e087      	b.n	80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d2:	4b6a      	ldr	r3, [pc, #424]	@ (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007502:	e065      	b.n	80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800768c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007516:	4b59      	ldr	r3, [pc, #356]	@ (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007526:	ed97 6a03 	vldr	s12, [r7, #12]
 800752a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800752e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800753a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007546:	e043      	b.n	80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755a:	4b48      	ldr	r3, [pc, #288]	@ (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800755c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756a:	ed97 6a03 	vldr	s12, [r7, #12]
 800756e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800757e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800758a:	e021      	b.n	80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800768c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800759a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759e:	4b37      	ldr	r3, [pc, #220]	@ (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80075d0:	4b2a      	ldr	r3, [pc, #168]	@ (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d4:	0a5b      	lsrs	r3, r3, #9
 80075d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f6:	ee17 2a90 	vmov	r2, s15
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80075fe:	4b1f      	ldr	r3, [pc, #124]	@ (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007602:	0c1b      	lsrs	r3, r3, #16
 8007604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007608:	ee07 3a90 	vmov	s15, r3
 800760c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007610:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007614:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007618:	edd7 6a07 	vldr	s13, [r7, #28]
 800761c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007624:	ee17 2a90 	vmov	r2, s15
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800762c:	4b13      	ldr	r3, [pc, #76]	@ (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800762e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007630:	0e1b      	lsrs	r3, r3, #24
 8007632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007642:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007646:	edd7 6a07 	vldr	s13, [r7, #28]
 800764a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800764e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007652:	ee17 2a90 	vmov	r2, s15
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800765a:	e008      	b.n	800766e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	609a      	str	r2, [r3, #8]
}
 800766e:	bf00      	nop
 8007670:	3724      	adds	r7, #36	@ 0x24
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	58024400 	.word	0x58024400
 8007680:	03d09000 	.word	0x03d09000
 8007684:	46000000 	.word	0x46000000
 8007688:	4c742400 	.word	0x4c742400
 800768c:	4a742400 	.word	0x4a742400
 8007690:	4bbebc20 	.word	0x4bbebc20

08007694 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076a2:	4b53      	ldr	r3, [pc, #332]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 80076a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a6:	f003 0303 	and.w	r3, r3, #3
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d101      	bne.n	80076b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e099      	b.n	80077e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80076b2:	4b4f      	ldr	r3, [pc, #316]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a4e      	ldr	r2, [pc, #312]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 80076b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076be:	f7fa fc2f 	bl	8001f20 <HAL_GetTick>
 80076c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076c4:	e008      	b.n	80076d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076c6:	f7fa fc2b 	bl	8001f20 <HAL_GetTick>
 80076ca:	4602      	mov	r2, r0
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d901      	bls.n	80076d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e086      	b.n	80077e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076d8:	4b45      	ldr	r3, [pc, #276]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1f0      	bne.n	80076c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076e4:	4b42      	ldr	r3, [pc, #264]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 80076e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	031b      	lsls	r3, r3, #12
 80076f2:	493f      	ldr	r1, [pc, #252]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	3b01      	subs	r3, #1
 8007708:	025b      	lsls	r3, r3, #9
 800770a:	b29b      	uxth	r3, r3
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	3b01      	subs	r3, #1
 8007714:	041b      	lsls	r3, r3, #16
 8007716:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800771a:	431a      	orrs	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	3b01      	subs	r3, #1
 8007722:	061b      	lsls	r3, r3, #24
 8007724:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007728:	4931      	ldr	r1, [pc, #196]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 800772a:	4313      	orrs	r3, r2
 800772c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800772e:	4b30      	ldr	r3, [pc, #192]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 8007730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007732:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	492d      	ldr	r1, [pc, #180]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 800773c:	4313      	orrs	r3, r2
 800773e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007740:	4b2b      	ldr	r3, [pc, #172]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 8007742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007744:	f023 0220 	bic.w	r2, r3, #32
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	4928      	ldr	r1, [pc, #160]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 800774e:	4313      	orrs	r3, r2
 8007750:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007752:	4b27      	ldr	r3, [pc, #156]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 8007754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007756:	4a26      	ldr	r2, [pc, #152]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 8007758:	f023 0310 	bic.w	r3, r3, #16
 800775c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800775e:	4b24      	ldr	r3, [pc, #144]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 8007760:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007762:	4b24      	ldr	r3, [pc, #144]	@ (80077f4 <RCCEx_PLL2_Config+0x160>)
 8007764:	4013      	ands	r3, r2
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	69d2      	ldr	r2, [r2, #28]
 800776a:	00d2      	lsls	r2, r2, #3
 800776c:	4920      	ldr	r1, [pc, #128]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 800776e:	4313      	orrs	r3, r2
 8007770:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007772:	4b1f      	ldr	r3, [pc, #124]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 8007774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007776:	4a1e      	ldr	r2, [pc, #120]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 8007778:	f043 0310 	orr.w	r3, r3, #16
 800777c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d106      	bne.n	8007792 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007784:	4b1a      	ldr	r3, [pc, #104]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 8007786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007788:	4a19      	ldr	r2, [pc, #100]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 800778a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800778e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007790:	e00f      	b.n	80077b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d106      	bne.n	80077a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007798:	4b15      	ldr	r3, [pc, #84]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 800779a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779c:	4a14      	ldr	r2, [pc, #80]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 800779e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077a4:	e005      	b.n	80077b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80077a6:	4b12      	ldr	r3, [pc, #72]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 80077a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077aa:	4a11      	ldr	r2, [pc, #68]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 80077ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80077b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80077b2:	4b0f      	ldr	r3, [pc, #60]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a0e      	ldr	r2, [pc, #56]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 80077b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80077bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077be:	f7fa fbaf 	bl	8001f20 <HAL_GetTick>
 80077c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077c4:	e008      	b.n	80077d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077c6:	f7fa fbab 	bl	8001f20 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d901      	bls.n	80077d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e006      	b.n	80077e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077d8:	4b05      	ldr	r3, [pc, #20]	@ (80077f0 <RCCEx_PLL2_Config+0x15c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0f0      	beq.n	80077c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	58024400 	.word	0x58024400
 80077f4:	ffff0007 	.word	0xffff0007

080077f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007806:	4b53      	ldr	r3, [pc, #332]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 8007808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	2b03      	cmp	r3, #3
 8007810:	d101      	bne.n	8007816 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e099      	b.n	800794a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007816:	4b4f      	ldr	r3, [pc, #316]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a4e      	ldr	r2, [pc, #312]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 800781c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007822:	f7fa fb7d 	bl	8001f20 <HAL_GetTick>
 8007826:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007828:	e008      	b.n	800783c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800782a:	f7fa fb79 	bl	8001f20 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d901      	bls.n	800783c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e086      	b.n	800794a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800783c:	4b45      	ldr	r3, [pc, #276]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1f0      	bne.n	800782a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007848:	4b42      	ldr	r3, [pc, #264]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 800784a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	051b      	lsls	r3, r3, #20
 8007856:	493f      	ldr	r1, [pc, #252]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 8007858:	4313      	orrs	r3, r2
 800785a:	628b      	str	r3, [r1, #40]	@ 0x28
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	3b01      	subs	r3, #1
 8007862:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	3b01      	subs	r3, #1
 800786c:	025b      	lsls	r3, r3, #9
 800786e:	b29b      	uxth	r3, r3
 8007870:	431a      	orrs	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	3b01      	subs	r3, #1
 8007878:	041b      	lsls	r3, r3, #16
 800787a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800787e:	431a      	orrs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	3b01      	subs	r3, #1
 8007886:	061b      	lsls	r3, r3, #24
 8007888:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800788c:	4931      	ldr	r1, [pc, #196]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 800788e:	4313      	orrs	r3, r2
 8007890:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007892:	4b30      	ldr	r3, [pc, #192]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 8007894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007896:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	492d      	ldr	r1, [pc, #180]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80078a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 80078a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	4928      	ldr	r1, [pc, #160]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078b6:	4b27      	ldr	r3, [pc, #156]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 80078b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ba:	4a26      	ldr	r2, [pc, #152]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 80078bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078c2:	4b24      	ldr	r3, [pc, #144]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 80078c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078c6:	4b24      	ldr	r3, [pc, #144]	@ (8007958 <RCCEx_PLL3_Config+0x160>)
 80078c8:	4013      	ands	r3, r2
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	69d2      	ldr	r2, [r2, #28]
 80078ce:	00d2      	lsls	r2, r2, #3
 80078d0:	4920      	ldr	r1, [pc, #128]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 80078d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078da:	4a1e      	ldr	r2, [pc, #120]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 80078dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d106      	bne.n	80078f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 80078ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ec:	4a19      	ldr	r2, [pc, #100]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 80078ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80078f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078f4:	e00f      	b.n	8007916 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d106      	bne.n	800790a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078fc:	4b15      	ldr	r3, [pc, #84]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 80078fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007900:	4a14      	ldr	r2, [pc, #80]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 8007902:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007906:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007908:	e005      	b.n	8007916 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800790a:	4b12      	ldr	r3, [pc, #72]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 800790c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790e:	4a11      	ldr	r2, [pc, #68]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 8007910:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007914:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007916:	4b0f      	ldr	r3, [pc, #60]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a0e      	ldr	r2, [pc, #56]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 800791c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007922:	f7fa fafd 	bl	8001f20 <HAL_GetTick>
 8007926:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007928:	e008      	b.n	800793c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800792a:	f7fa faf9 	bl	8001f20 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d901      	bls.n	800793c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e006      	b.n	800794a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800793c:	4b05      	ldr	r3, [pc, #20]	@ (8007954 <RCCEx_PLL3_Config+0x15c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0f0      	beq.n	800792a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	58024400 	.word	0x58024400
 8007958:	ffff0007 	.word	0xffff0007

0800795c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e02b      	b.n	80079c8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d106      	bne.n	800798a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7f9 fadb 	bl	8000f40 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2202      	movs	r2, #2
 800798e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3304      	adds	r3, #4
 800799a:	4619      	mov	r1, r3
 800799c:	4610      	mov	r0, r2
 800799e:	f002 f98d 	bl	8009cbc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6818      	ldr	r0, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	461a      	mov	r2, r3
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	f002 f9e1 	bl	8009d74 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80079b2:	4b07      	ldr	r3, [pc, #28]	@ (80079d0 <HAL_SDRAM_Init+0x74>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a06      	ldr	r2, [pc, #24]	@ (80079d0 <HAL_SDRAM_Init+0x74>)
 80079b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80079bc:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	52004000 	.word	0x52004000

080079d4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80079e6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d101      	bne.n	80079f2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80079ee:	2302      	movs	r3, #2
 80079f0:	e021      	b.n	8007a36 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d002      	beq.n	80079fe <HAL_SDRAM_SendCommand+0x2a>
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	2b05      	cmp	r3, #5
 80079fc:	d118      	bne.n	8007a30 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2202      	movs	r2, #2
 8007a02:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	68b9      	ldr	r1, [r7, #8]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f002 fa1a 	bl	8009e48 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d104      	bne.n	8007a26 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2205      	movs	r2, #5
 8007a20:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007a24:	e006      	b.n	8007a34 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007a2e:	e001      	b.n	8007a34 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e000      	b.n	8007a36 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d101      	bne.n	8007a58 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007a54:	2302      	movs	r3, #2
 8007a56:	e016      	b.n	8007a86 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d10f      	bne.n	8007a84 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f002 fa0c 	bl	8009e90 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	e000      	b.n	8007a86 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e10f      	b.n	8007cc2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a87      	ldr	r2, [pc, #540]	@ (8007ccc <HAL_SPI_Init+0x23c>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00f      	beq.n	8007ad2 <HAL_SPI_Init+0x42>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a86      	ldr	r2, [pc, #536]	@ (8007cd0 <HAL_SPI_Init+0x240>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00a      	beq.n	8007ad2 <HAL_SPI_Init+0x42>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a84      	ldr	r2, [pc, #528]	@ (8007cd4 <HAL_SPI_Init+0x244>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d005      	beq.n	8007ad2 <HAL_SPI_Init+0x42>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	2b0f      	cmp	r3, #15
 8007acc:	d901      	bls.n	8007ad2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e0f7      	b.n	8007cc2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 ff6c 	bl	80089b0 <SPI_GetPacketSize>
 8007ad8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a7b      	ldr	r2, [pc, #492]	@ (8007ccc <HAL_SPI_Init+0x23c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d00c      	beq.n	8007afe <HAL_SPI_Init+0x6e>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a79      	ldr	r2, [pc, #484]	@ (8007cd0 <HAL_SPI_Init+0x240>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d007      	beq.n	8007afe <HAL_SPI_Init+0x6e>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a78      	ldr	r2, [pc, #480]	@ (8007cd4 <HAL_SPI_Init+0x244>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d002      	beq.n	8007afe <HAL_SPI_Init+0x6e>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2b08      	cmp	r3, #8
 8007afc:	d811      	bhi.n	8007b22 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007b02:	4a72      	ldr	r2, [pc, #456]	@ (8007ccc <HAL_SPI_Init+0x23c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d009      	beq.n	8007b1c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a70      	ldr	r2, [pc, #448]	@ (8007cd0 <HAL_SPI_Init+0x240>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d004      	beq.n	8007b1c <HAL_SPI_Init+0x8c>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a6f      	ldr	r2, [pc, #444]	@ (8007cd4 <HAL_SPI_Init+0x244>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d104      	bne.n	8007b26 <HAL_SPI_Init+0x96>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2b10      	cmp	r3, #16
 8007b20:	d901      	bls.n	8007b26 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e0cd      	b.n	8007cc2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d106      	bne.n	8007b40 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7f9 fe1a 	bl	8001774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0201 	bic.w	r2, r2, #1
 8007b56:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007b62:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b6c:	d119      	bne.n	8007ba2 <HAL_SPI_Init+0x112>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b76:	d103      	bne.n	8007b80 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d008      	beq.n	8007b92 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10c      	bne.n	8007ba2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007b8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b90:	d107      	bne.n	8007ba2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ba0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00f      	beq.n	8007bce <HAL_SPI_Init+0x13e>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	2b06      	cmp	r3, #6
 8007bb4:	d90b      	bls.n	8007bce <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	e007      	b.n	8007bde <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007bdc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	69da      	ldr	r2, [r3, #28]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be6:	431a      	orrs	r2, r3
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	431a      	orrs	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf0:	ea42 0103 	orr.w	r1, r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	431a      	orrs	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	431a      	orrs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c32:	431a      	orrs	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c3e:	ea42 0103 	orr.w	r1, r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d113      	bne.n	8007c7e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c68:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007c7c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0201 	bic.w	r2, r2, #1
 8007c8c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	40013000 	.word	0x40013000
 8007cd0:	40003800 	.word	0x40003800
 8007cd4:	40003c00 	.word	0x40003c00

08007cd8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af02      	add	r7, sp, #8
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	603b      	str	r3, [r7, #0]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3320      	adds	r3, #32
 8007cee:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cf0:	f7fa f916 	bl	8001f20 <HAL_GetTick>
 8007cf4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d001      	beq.n	8007d06 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007d02:	2302      	movs	r3, #2
 8007d04:	e1d1      	b.n	80080aa <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <HAL_SPI_Transmit+0x3a>
 8007d0c:	88fb      	ldrh	r3, [r7, #6]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e1c9      	b.n	80080aa <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_SPI_Transmit+0x4c>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e1c2      	b.n	80080aa <HAL_SPI_Transmit+0x3d2>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2203      	movs	r2, #3
 8007d30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	88fa      	ldrh	r2, [r7, #6]
 8007d46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	88fa      	ldrh	r2, [r7, #6]
 8007d4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007d7c:	d108      	bne.n	8007d90 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	e009      	b.n	8007da4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007da2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	4b96      	ldr	r3, [pc, #600]	@ (8008004 <HAL_SPI_Transmit+0x32c>)
 8007dac:	4013      	ands	r3, r2
 8007dae:	88f9      	ldrh	r1, [r7, #6]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	6812      	ldr	r2, [r2, #0]
 8007db4:	430b      	orrs	r3, r1
 8007db6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f042 0201 	orr.w	r2, r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007dd0:	d107      	bne.n	8007de2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007de0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	2b0f      	cmp	r3, #15
 8007de8:	d947      	bls.n	8007e7a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007dea:	e03f      	b.n	8007e6c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d114      	bne.n	8007e24 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6812      	ldr	r2, [r2, #0]
 8007e04:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e0a:	1d1a      	adds	r2, r3, #4
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007e22:	e023      	b.n	8007e6c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e24:	f7fa f87c 	bl	8001f20 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d803      	bhi.n	8007e3c <HAL_SPI_Transmit+0x164>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3a:	d102      	bne.n	8007e42 <HAL_SPI_Transmit+0x16a>
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d114      	bne.n	8007e6c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 fce6 	bl	8008814 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e11e      	b.n	80080aa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1b9      	bne.n	8007dec <HAL_SPI_Transmit+0x114>
 8007e78:	e0f1      	b.n	800805e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	2b07      	cmp	r3, #7
 8007e80:	f240 80e6 	bls.w	8008050 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007e84:	e05d      	b.n	8007f42 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d132      	bne.n	8007efa <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d918      	bls.n	8007ed2 <HAL_SPI_Transmit+0x1fa>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d014      	beq.n	8007ed2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6812      	ldr	r2, [r2, #0]
 8007eb2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eb8:	1d1a      	adds	r2, r3, #4
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	3b02      	subs	r3, #2
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007ed0:	e037      	b.n	8007f42 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ed6:	881a      	ldrh	r2, [r3, #0]
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ee0:	1c9a      	adds	r2, r3, #2
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007ef8:	e023      	b.n	8007f42 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007efa:	f7fa f811 	bl	8001f20 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d803      	bhi.n	8007f12 <HAL_SPI_Transmit+0x23a>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f10:	d102      	bne.n	8007f18 <HAL_SPI_Transmit+0x240>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d114      	bne.n	8007f42 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 fc7b 	bl	8008814 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e0b3      	b.n	80080aa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d19b      	bne.n	8007e86 <HAL_SPI_Transmit+0x1ae>
 8007f4e:	e086      	b.n	800805e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d154      	bne.n	8008008 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d918      	bls.n	8007f9c <HAL_SPI_Transmit+0x2c4>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f6e:	2b40      	cmp	r3, #64	@ 0x40
 8007f70:	d914      	bls.n	8007f9c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6812      	ldr	r2, [r2, #0]
 8007f7c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f82:	1d1a      	adds	r2, r3, #4
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	3b04      	subs	r3, #4
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007f9a:	e059      	b.n	8008050 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d917      	bls.n	8007fd8 <HAL_SPI_Transmit+0x300>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d013      	beq.n	8007fd8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fb4:	881a      	ldrh	r2, [r3, #0]
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fbe:	1c9a      	adds	r2, r3, #2
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	3b02      	subs	r3, #2
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007fd6:	e03b      	b.n	8008050 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3320      	adds	r3, #32
 8007fe2:	7812      	ldrb	r2, [r2, #0]
 8007fe4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fea:	1c5a      	adds	r2, r3, #1
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008002:	e025      	b.n	8008050 <HAL_SPI_Transmit+0x378>
 8008004:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008008:	f7f9 ff8a 	bl	8001f20 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	429a      	cmp	r2, r3
 8008016:	d803      	bhi.n	8008020 <HAL_SPI_Transmit+0x348>
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801e:	d102      	bne.n	8008026 <HAL_SPI_Transmit+0x34e>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d114      	bne.n	8008050 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 fbf4 	bl	8008814 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008032:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e02c      	b.n	80080aa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008056:	b29b      	uxth	r3, r3
 8008058:	2b00      	cmp	r3, #0
 800805a:	f47f af79 	bne.w	8007f50 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2200      	movs	r2, #0
 8008066:	2108      	movs	r1, #8
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 fc73 	bl	8008954 <SPI_WaitOnFlagUntilTimeout>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d007      	beq.n	8008084 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800807a:	f043 0220 	orr.w	r2, r3, #32
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 fbc5 	bl	8008814 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e000      	b.n	80080aa <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80080a8:	2300      	movs	r3, #0
  }
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop

080080b4 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	4613      	mov	r3, r2
 80080c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d001      	beq.n	80080d2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80080ce:	2302      	movs	r3, #2
 80080d0:	e126      	b.n	8008320 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <HAL_SPI_Transmit_DMA+0x2a>
 80080d8:	88fb      	ldrh	r3, [r7, #6]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e11e      	b.n	8008320 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d101      	bne.n	80080f0 <HAL_SPI_Transmit_DMA+0x3c>
 80080ec:	2302      	movs	r3, #2
 80080ee:	e117      	b.n	8008320 <HAL_SPI_Transmit_DMA+0x26c>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2203      	movs	r2, #3
 80080fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	88fa      	ldrh	r2, [r7, #6]
 8008112:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	88fa      	ldrh	r2, [r7, #6]
 800811a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008148:	d108      	bne.n	800815c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	e009      	b.n	8008170 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800816e:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	2b0f      	cmp	r3, #15
 8008176:	d905      	bls.n	8008184 <HAL_SPI_Transmit_DMA+0xd0>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008182:	d10f      	bne.n	80081a4 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008188:	2b07      	cmp	r3, #7
 800818a:	d911      	bls.n	80081b0 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008196:	d00b      	beq.n	80081b0 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800819c:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800819e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081a2:	d005      	beq.n	80081b0 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e0b7      	b.n	8008320 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	2b07      	cmp	r3, #7
 80081b6:	d820      	bhi.n	80081fa <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081c2:	d109      	bne.n	80081d8 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3301      	adds	r3, #1
 80081ce:	105b      	asrs	r3, r3, #1
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081e2:	d11e      	bne.n	8008222 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	3303      	adds	r3, #3
 80081ee:	109b      	asrs	r3, r3, #2
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80081f8:	e013      	b.n	8008222 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	2b0f      	cmp	r3, #15
 8008200:	d80f      	bhi.n	8008222 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800820c:	d109      	bne.n	8008222 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008214:	b29b      	uxth	r3, r3
 8008216:	3301      	adds	r3, #1
 8008218:	105b      	asrs	r3, r3, #1
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008226:	4a40      	ldr	r2, [pc, #256]	@ (8008328 <HAL_SPI_Transmit_DMA+0x274>)
 8008228:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800822e:	4a3f      	ldr	r2, [pc, #252]	@ (800832c <HAL_SPI_Transmit_DMA+0x278>)
 8008230:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008236:	4a3e      	ldr	r2, [pc, #248]	@ (8008330 <HAL_SPI_Transmit_DMA+0x27c>)
 8008238:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800823e:	2200      	movs	r2, #0
 8008240:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008250:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800825a:	4619      	mov	r1, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3320      	adds	r3, #32
 8008262:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800826a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800826c:	f7fa fb78 	bl	8002960 <HAL_DMA_Start_IT>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d011      	beq.n	800829a <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800827c:	f043 0210 	orr.w	r2, r3, #16
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e042      	b.n	8008320 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082a4:	d108      	bne.n	80082b8 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6859      	ldr	r1, [r3, #4]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	4b20      	ldr	r3, [pc, #128]	@ (8008334 <HAL_SPI_Transmit_DMA+0x280>)
 80082b2:	400b      	ands	r3, r1
 80082b4:	6053      	str	r3, [r2, #4]
 80082b6:	e009      	b.n	80082cc <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	4b1d      	ldr	r3, [pc, #116]	@ (8008334 <HAL_SPI_Transmit_DMA+0x280>)
 80082c0:	4013      	ands	r3, r2
 80082c2:	88f9      	ldrh	r1, [r7, #6]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	6812      	ldr	r2, [r2, #0]
 80082c8:	430b      	orrs	r3, r1
 80082ca:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689a      	ldr	r2, [r3, #8]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082da:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	691a      	ldr	r2, [r3, #16]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80082ea:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f042 0201 	orr.w	r2, r2, #1
 80082fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008304:	d107      	bne.n	8008316 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008314:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	0800877f 	.word	0x0800877f
 800832c:	08008739 	.word	0x08008739
 8008330:	0800879b 	.word	0x0800879b
 8008334:	ffff0000 	.word	0xffff0000

08008338 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08a      	sub	sp, #40	@ 0x28
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008350:	6a3a      	ldr	r2, [r7, #32]
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	4013      	ands	r3, r2
 8008356:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008360:	2300      	movs	r3, #0
 8008362:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800836a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3330      	adds	r3, #48	@ 0x30
 8008372:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800837a:	2b00      	cmp	r3, #0
 800837c:	d010      	beq.n	80083a0 <HAL_SPI_IRQHandler+0x68>
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	f003 0308 	and.w	r3, r3, #8
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	699a      	ldr	r2, [r3, #24]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008396:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f9c3 	bl	8008724 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800839e:	e192      	b.n	80086c6 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d113      	bne.n	80083d2 <HAL_SPI_IRQHandler+0x9a>
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	f003 0320 	and.w	r3, r3, #32
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10e      	bne.n	80083d2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d009      	beq.n	80083d2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4798      	blx	r3
    handled = 1UL;
 80083ce:	2301      	movs	r3, #1
 80083d0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10f      	bne.n	80083fc <HAL_SPI_IRQHandler+0xc4>
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d105      	bne.n	80083fc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	4798      	blx	r3
    handled = 1UL;
 80083f8:	2301      	movs	r3, #1
 80083fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	f003 0320 	and.w	r3, r3, #32
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10f      	bne.n	8008426 <HAL_SPI_IRQHandler+0xee>
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	f003 0302 	and.w	r3, r3, #2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00a      	beq.n	8008426 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008416:	2b00      	cmp	r3, #0
 8008418:	d105      	bne.n	8008426 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	4798      	blx	r3
    handled = 1UL;
 8008422:	2301      	movs	r3, #1
 8008424:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	2b00      	cmp	r3, #0
 800842a:	f040 8147 	bne.w	80086bc <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	f003 0308 	and.w	r3, r3, #8
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 808b 	beq.w	8008550 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	699a      	ldr	r2, [r3, #24]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f042 0208 	orr.w	r2, r2, #8
 8008448:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	699a      	ldr	r2, [r3, #24]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f042 0210 	orr.w	r2, r2, #16
 8008458:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	699a      	ldr	r2, [r3, #24]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008468:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	691a      	ldr	r2, [r3, #16]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0208 	bic.w	r2, r2, #8
 8008478:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d13d      	bne.n	8008504 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008488:	e036      	b.n	80084f8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	2b0f      	cmp	r3, #15
 8008490:	d90b      	bls.n	80084aa <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800849a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800849c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084a2:	1d1a      	adds	r2, r3, #4
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	665a      	str	r2, [r3, #100]	@ 0x64
 80084a8:	e01d      	b.n	80084e6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	2b07      	cmp	r3, #7
 80084b0:	d90b      	bls.n	80084ca <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	8812      	ldrh	r2, [r2, #0]
 80084ba:	b292      	uxth	r2, r2
 80084bc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084c2:	1c9a      	adds	r2, r3, #2
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	665a      	str	r2, [r3, #100]	@ 0x64
 80084c8:	e00d      	b.n	80084e6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084d6:	7812      	ldrb	r2, [r2, #0]
 80084d8:	b2d2      	uxtb	r2, r2
 80084da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084e0:	1c5a      	adds	r2, r3, #1
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084fe:	b29b      	uxth	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1c2      	bne.n	800848a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f985 	bl	8008814 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008518:	2b00      	cmp	r3, #0
 800851a:	d003      	beq.n	8008524 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f8f7 	bl	8008710 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008522:	e0d0      	b.n	80086c6 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008524:	7cfb      	ldrb	r3, [r7, #19]
 8008526:	2b05      	cmp	r3, #5
 8008528:	d103      	bne.n	8008532 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f8dc 	bl	80086e8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008530:	e0c6      	b.n	80086c0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008532:	7cfb      	ldrb	r3, [r7, #19]
 8008534:	2b04      	cmp	r3, #4
 8008536:	d103      	bne.n	8008540 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f8cb 	bl	80086d4 <HAL_SPI_RxCpltCallback>
    return;
 800853e:	e0bf      	b.n	80086c0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008540:	7cfb      	ldrb	r3, [r7, #19]
 8008542:	2b03      	cmp	r3, #3
 8008544:	f040 80bc 	bne.w	80086c0 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7f8 f85b 	bl	8000604 <HAL_SPI_TxCpltCallback>
    return;
 800854e:	e0b7      	b.n	80086c0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 80b5 	beq.w	80086c6 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00f      	beq.n	8008586 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800856c:	f043 0204 	orr.w	r2, r3, #4
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	699a      	ldr	r2, [r3, #24]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008584:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00f      	beq.n	80085b0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008596:	f043 0201 	orr.w	r2, r3, #1
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	699a      	ldr	r2, [r3, #24]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085ae:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00f      	beq.n	80085da <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085c0:	f043 0208 	orr.w	r2, r3, #8
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	699a      	ldr	r2, [r3, #24]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085d8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	f003 0320 	and.w	r3, r3, #32
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00f      	beq.n	8008604 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	699a      	ldr	r2, [r3, #24]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0220 	orr.w	r2, r2, #32
 8008602:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800860a:	2b00      	cmp	r3, #0
 800860c:	d05a      	beq.n	80086c4 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 0201 	bic.w	r2, r2, #1
 800861c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6919      	ldr	r1, [r3, #16]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	4b28      	ldr	r3, [pc, #160]	@ (80086cc <HAL_SPI_IRQHandler+0x394>)
 800862a:	400b      	ands	r3, r1
 800862c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008634:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008638:	d138      	bne.n	80086ac <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689a      	ldr	r2, [r3, #8]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008648:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800864e:	2b00      	cmp	r3, #0
 8008650:	d013      	beq.n	800867a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008656:	4a1e      	ldr	r2, [pc, #120]	@ (80086d0 <HAL_SPI_IRQHandler+0x398>)
 8008658:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800865e:	4618      	mov	r0, r3
 8008660:	f7fa fbe8 	bl	8002e34 <HAL_DMA_Abort_IT>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d007      	beq.n	800867a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008670:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800867e:	2b00      	cmp	r3, #0
 8008680:	d020      	beq.n	80086c4 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008686:	4a12      	ldr	r2, [pc, #72]	@ (80086d0 <HAL_SPI_IRQHandler+0x398>)
 8008688:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800868e:	4618      	mov	r0, r3
 8008690:	f7fa fbd0 	bl	8002e34 <HAL_DMA_Abort_IT>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d014      	beq.n	80086c4 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80086aa:	e00b      	b.n	80086c4 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f82b 	bl	8008710 <HAL_SPI_ErrorCallback>
    return;
 80086ba:	e003      	b.n	80086c4 <HAL_SPI_IRQHandler+0x38c>
    return;
 80086bc:	bf00      	nop
 80086be:	e002      	b.n	80086c6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80086c0:	bf00      	nop
 80086c2:	e000      	b.n	80086c6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80086c4:	bf00      	nop
  }
}
 80086c6:	3728      	adds	r7, #40	@ 0x28
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	fffffc94 	.word	0xfffffc94
 80086d0:	080087e1 	.word	0x080087e1

080086d4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008744:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b07      	cmp	r3, #7
 8008750:	d011      	beq.n	8008776 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800875c:	d103      	bne.n	8008766 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f7f7 ff50 	bl	8000604 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008764:	e007      	b.n	8008776 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f042 0208 	orr.w	r2, r2, #8
 8008774:	611a      	str	r2, [r3, #16]
}
 8008776:	bf00      	nop
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f7ff ffb5 	bl	80086fc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008792:	bf00      	nop
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a6:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7fb fcb3 	bl	8004114 <HAL_DMA_GetError>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d011      	beq.n	80087d8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 f82d 	bl	8008814 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087c0:	f043 0210 	orr.w	r2, r3, #16
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f7ff ff9c 	bl	8008710 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80087d8:	bf00      	nop
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7ff ff82 	bl	8008710 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800880c:	bf00      	nop
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	699a      	ldr	r2, [r3, #24]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f042 0208 	orr.w	r2, r2, #8
 8008832:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	699a      	ldr	r2, [r3, #24]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f042 0210 	orr.w	r2, r2, #16
 8008842:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0201 	bic.w	r2, r2, #1
 8008852:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6919      	ldr	r1, [r3, #16]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	4b3c      	ldr	r3, [pc, #240]	@ (8008950 <SPI_CloseTransfer+0x13c>)
 8008860:	400b      	ands	r3, r1
 8008862:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	689a      	ldr	r2, [r3, #8]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008872:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b04      	cmp	r3, #4
 800887e:	d014      	beq.n	80088aa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f003 0320 	and.w	r3, r3, #32
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00f      	beq.n	80088aa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008890:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	699a      	ldr	r2, [r3, #24]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f042 0220 	orr.w	r2, r2, #32
 80088a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d014      	beq.n	80088e0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00f      	beq.n	80088e0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088c6:	f043 0204 	orr.w	r2, r3, #4
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	699a      	ldr	r2, [r3, #24]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088de:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00f      	beq.n	800890a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088f0:	f043 0201 	orr.w	r2, r3, #1
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	699a      	ldr	r2, [r3, #24]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008908:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00f      	beq.n	8008934 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800891a:	f043 0208 	orr.w	r2, r3, #8
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	699a      	ldr	r2, [r3, #24]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008932:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008944:	bf00      	nop
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	fffffc90 	.word	0xfffffc90

08008954 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	603b      	str	r3, [r7, #0]
 8008960:	4613      	mov	r3, r2
 8008962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008964:	e010      	b.n	8008988 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008966:	f7f9 fadb 	bl	8001f20 <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	429a      	cmp	r2, r3
 8008974:	d803      	bhi.n	800897e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897c:	d102      	bne.n	8008984 <SPI_WaitOnFlagUntilTimeout+0x30>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d101      	bne.n	8008988 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e00f      	b.n	80089a8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	695a      	ldr	r2, [r3, #20]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	4013      	ands	r3, r2
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	429a      	cmp	r2, r3
 8008996:	bf0c      	ite	eq
 8008998:	2301      	moveq	r3, #1
 800899a:	2300      	movne	r3, #0
 800899c:	b2db      	uxtb	r3, r3
 800899e:	461a      	mov	r2, r3
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d0df      	beq.n	8008966 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089bc:	095b      	lsrs	r3, r3, #5
 80089be:	3301      	adds	r3, #1
 80089c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	3301      	adds	r3, #1
 80089c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	3307      	adds	r3, #7
 80089ce:	08db      	lsrs	r3, r3, #3
 80089d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	fb02 f303 	mul.w	r3, r2, r3
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e042      	b.n	8008a7e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d106      	bne.n	8008a10 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7f9 f96c 	bl	8001ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2224      	movs	r2, #36	@ 0x24
 8008a14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f022 0201 	bic.w	r2, r2, #1
 8008a26:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fe1f 	bl	8009674 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f8b4 	bl	8008ba4 <UART_SetConfig>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d101      	bne.n	8008a46 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e01b      	b.n	8008a7e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689a      	ldr	r2, [r3, #8]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f042 0201 	orr.w	r2, r2, #1
 8008a74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fe9e 	bl	80097b8 <UART_CheckIdleState>
 8008a7c:	4603      	mov	r3, r0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b08a      	sub	sp, #40	@ 0x28
 8008a8a:	af02      	add	r7, sp, #8
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	603b      	str	r3, [r7, #0]
 8008a92:	4613      	mov	r3, r2
 8008a94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a9c:	2b20      	cmp	r3, #32
 8008a9e:	d17b      	bne.n	8008b98 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <HAL_UART_Transmit+0x26>
 8008aa6:	88fb      	ldrh	r3, [r7, #6]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e074      	b.n	8008b9a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2221      	movs	r2, #33	@ 0x21
 8008abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ac0:	f7f9 fa2e 	bl	8001f20 <HAL_GetTick>
 8008ac4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	88fa      	ldrh	r2, [r7, #6]
 8008aca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	88fa      	ldrh	r2, [r7, #6]
 8008ad2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ade:	d108      	bne.n	8008af2 <HAL_UART_Transmit+0x6c>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d104      	bne.n	8008af2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	61bb      	str	r3, [r7, #24]
 8008af0:	e003      	b.n	8008afa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008af6:	2300      	movs	r3, #0
 8008af8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008afa:	e030      	b.n	8008b5e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	2200      	movs	r2, #0
 8008b04:	2180      	movs	r1, #128	@ 0x80
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 ff00 	bl	800990c <UART_WaitOnFlagUntilTimeout>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d005      	beq.n	8008b1e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e03d      	b.n	8008b9a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10b      	bne.n	8008b3c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b32:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	3302      	adds	r3, #2
 8008b38:	61bb      	str	r3, [r7, #24]
 8008b3a:	e007      	b.n	8008b4c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	781a      	ldrb	r2, [r3, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	3b01      	subs	r3, #1
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1c8      	bne.n	8008afc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2200      	movs	r2, #0
 8008b72:	2140      	movs	r1, #64	@ 0x40
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 fec9 	bl	800990c <UART_WaitOnFlagUntilTimeout>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d005      	beq.n	8008b8c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2220      	movs	r2, #32
 8008b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	e006      	b.n	8008b9a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	e000      	b.n	8008b9a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008b98:	2302      	movs	r3, #2
  }
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3720      	adds	r7, #32
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
	...

08008ba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ba8:	b092      	sub	sp, #72	@ 0x48
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	689a      	ldr	r2, [r3, #8]
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	431a      	orrs	r2, r3
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	431a      	orrs	r2, r3
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	4bbe      	ldr	r3, [pc, #760]	@ (8008ecc <UART_SetConfig+0x328>)
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	6812      	ldr	r2, [r2, #0]
 8008bda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bdc:	430b      	orrs	r3, r1
 8008bde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	68da      	ldr	r2, [r3, #12]
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4ab3      	ldr	r2, [pc, #716]	@ (8008ed0 <UART_SetConfig+0x32c>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d004      	beq.n	8008c10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689a      	ldr	r2, [r3, #8]
 8008c16:	4baf      	ldr	r3, [pc, #700]	@ (8008ed4 <UART_SetConfig+0x330>)
 8008c18:	4013      	ands	r3, r2
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	6812      	ldr	r2, [r2, #0]
 8008c1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008c20:	430b      	orrs	r3, r1
 8008c22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2a:	f023 010f 	bic.w	r1, r3, #15
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4aa6      	ldr	r2, [pc, #664]	@ (8008ed8 <UART_SetConfig+0x334>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d177      	bne.n	8008d34 <UART_SetConfig+0x190>
 8008c44:	4ba5      	ldr	r3, [pc, #660]	@ (8008edc <UART_SetConfig+0x338>)
 8008c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c4c:	2b28      	cmp	r3, #40	@ 0x28
 8008c4e:	d86d      	bhi.n	8008d2c <UART_SetConfig+0x188>
 8008c50:	a201      	add	r2, pc, #4	@ (adr r2, 8008c58 <UART_SetConfig+0xb4>)
 8008c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c56:	bf00      	nop
 8008c58:	08008cfd 	.word	0x08008cfd
 8008c5c:	08008d2d 	.word	0x08008d2d
 8008c60:	08008d2d 	.word	0x08008d2d
 8008c64:	08008d2d 	.word	0x08008d2d
 8008c68:	08008d2d 	.word	0x08008d2d
 8008c6c:	08008d2d 	.word	0x08008d2d
 8008c70:	08008d2d 	.word	0x08008d2d
 8008c74:	08008d2d 	.word	0x08008d2d
 8008c78:	08008d05 	.word	0x08008d05
 8008c7c:	08008d2d 	.word	0x08008d2d
 8008c80:	08008d2d 	.word	0x08008d2d
 8008c84:	08008d2d 	.word	0x08008d2d
 8008c88:	08008d2d 	.word	0x08008d2d
 8008c8c:	08008d2d 	.word	0x08008d2d
 8008c90:	08008d2d 	.word	0x08008d2d
 8008c94:	08008d2d 	.word	0x08008d2d
 8008c98:	08008d0d 	.word	0x08008d0d
 8008c9c:	08008d2d 	.word	0x08008d2d
 8008ca0:	08008d2d 	.word	0x08008d2d
 8008ca4:	08008d2d 	.word	0x08008d2d
 8008ca8:	08008d2d 	.word	0x08008d2d
 8008cac:	08008d2d 	.word	0x08008d2d
 8008cb0:	08008d2d 	.word	0x08008d2d
 8008cb4:	08008d2d 	.word	0x08008d2d
 8008cb8:	08008d15 	.word	0x08008d15
 8008cbc:	08008d2d 	.word	0x08008d2d
 8008cc0:	08008d2d 	.word	0x08008d2d
 8008cc4:	08008d2d 	.word	0x08008d2d
 8008cc8:	08008d2d 	.word	0x08008d2d
 8008ccc:	08008d2d 	.word	0x08008d2d
 8008cd0:	08008d2d 	.word	0x08008d2d
 8008cd4:	08008d2d 	.word	0x08008d2d
 8008cd8:	08008d1d 	.word	0x08008d1d
 8008cdc:	08008d2d 	.word	0x08008d2d
 8008ce0:	08008d2d 	.word	0x08008d2d
 8008ce4:	08008d2d 	.word	0x08008d2d
 8008ce8:	08008d2d 	.word	0x08008d2d
 8008cec:	08008d2d 	.word	0x08008d2d
 8008cf0:	08008d2d 	.word	0x08008d2d
 8008cf4:	08008d2d 	.word	0x08008d2d
 8008cf8:	08008d25 	.word	0x08008d25
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d02:	e222      	b.n	800914a <UART_SetConfig+0x5a6>
 8008d04:	2304      	movs	r3, #4
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0a:	e21e      	b.n	800914a <UART_SetConfig+0x5a6>
 8008d0c:	2308      	movs	r3, #8
 8008d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d12:	e21a      	b.n	800914a <UART_SetConfig+0x5a6>
 8008d14:	2310      	movs	r3, #16
 8008d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1a:	e216      	b.n	800914a <UART_SetConfig+0x5a6>
 8008d1c:	2320      	movs	r3, #32
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d22:	e212      	b.n	800914a <UART_SetConfig+0x5a6>
 8008d24:	2340      	movs	r3, #64	@ 0x40
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2a:	e20e      	b.n	800914a <UART_SetConfig+0x5a6>
 8008d2c:	2380      	movs	r3, #128	@ 0x80
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e20a      	b.n	800914a <UART_SetConfig+0x5a6>
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a69      	ldr	r2, [pc, #420]	@ (8008ee0 <UART_SetConfig+0x33c>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d130      	bne.n	8008da0 <UART_SetConfig+0x1fc>
 8008d3e:	4b67      	ldr	r3, [pc, #412]	@ (8008edc <UART_SetConfig+0x338>)
 8008d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d42:	f003 0307 	and.w	r3, r3, #7
 8008d46:	2b05      	cmp	r3, #5
 8008d48:	d826      	bhi.n	8008d98 <UART_SetConfig+0x1f4>
 8008d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d50 <UART_SetConfig+0x1ac>)
 8008d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d50:	08008d69 	.word	0x08008d69
 8008d54:	08008d71 	.word	0x08008d71
 8008d58:	08008d79 	.word	0x08008d79
 8008d5c:	08008d81 	.word	0x08008d81
 8008d60:	08008d89 	.word	0x08008d89
 8008d64:	08008d91 	.word	0x08008d91
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6e:	e1ec      	b.n	800914a <UART_SetConfig+0x5a6>
 8008d70:	2304      	movs	r3, #4
 8008d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d76:	e1e8      	b.n	800914a <UART_SetConfig+0x5a6>
 8008d78:	2308      	movs	r3, #8
 8008d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7e:	e1e4      	b.n	800914a <UART_SetConfig+0x5a6>
 8008d80:	2310      	movs	r3, #16
 8008d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d86:	e1e0      	b.n	800914a <UART_SetConfig+0x5a6>
 8008d88:	2320      	movs	r3, #32
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8e:	e1dc      	b.n	800914a <UART_SetConfig+0x5a6>
 8008d90:	2340      	movs	r3, #64	@ 0x40
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d96:	e1d8      	b.n	800914a <UART_SetConfig+0x5a6>
 8008d98:	2380      	movs	r3, #128	@ 0x80
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9e:	e1d4      	b.n	800914a <UART_SetConfig+0x5a6>
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a4f      	ldr	r2, [pc, #316]	@ (8008ee4 <UART_SetConfig+0x340>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d130      	bne.n	8008e0c <UART_SetConfig+0x268>
 8008daa:	4b4c      	ldr	r3, [pc, #304]	@ (8008edc <UART_SetConfig+0x338>)
 8008dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dae:	f003 0307 	and.w	r3, r3, #7
 8008db2:	2b05      	cmp	r3, #5
 8008db4:	d826      	bhi.n	8008e04 <UART_SetConfig+0x260>
 8008db6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dbc <UART_SetConfig+0x218>)
 8008db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dbc:	08008dd5 	.word	0x08008dd5
 8008dc0:	08008ddd 	.word	0x08008ddd
 8008dc4:	08008de5 	.word	0x08008de5
 8008dc8:	08008ded 	.word	0x08008ded
 8008dcc:	08008df5 	.word	0x08008df5
 8008dd0:	08008dfd 	.word	0x08008dfd
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dda:	e1b6      	b.n	800914a <UART_SetConfig+0x5a6>
 8008ddc:	2304      	movs	r3, #4
 8008dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de2:	e1b2      	b.n	800914a <UART_SetConfig+0x5a6>
 8008de4:	2308      	movs	r3, #8
 8008de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dea:	e1ae      	b.n	800914a <UART_SetConfig+0x5a6>
 8008dec:	2310      	movs	r3, #16
 8008dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df2:	e1aa      	b.n	800914a <UART_SetConfig+0x5a6>
 8008df4:	2320      	movs	r3, #32
 8008df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfa:	e1a6      	b.n	800914a <UART_SetConfig+0x5a6>
 8008dfc:	2340      	movs	r3, #64	@ 0x40
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e02:	e1a2      	b.n	800914a <UART_SetConfig+0x5a6>
 8008e04:	2380      	movs	r3, #128	@ 0x80
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e19e      	b.n	800914a <UART_SetConfig+0x5a6>
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a35      	ldr	r2, [pc, #212]	@ (8008ee8 <UART_SetConfig+0x344>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d130      	bne.n	8008e78 <UART_SetConfig+0x2d4>
 8008e16:	4b31      	ldr	r3, [pc, #196]	@ (8008edc <UART_SetConfig+0x338>)
 8008e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e1a:	f003 0307 	and.w	r3, r3, #7
 8008e1e:	2b05      	cmp	r3, #5
 8008e20:	d826      	bhi.n	8008e70 <UART_SetConfig+0x2cc>
 8008e22:	a201      	add	r2, pc, #4	@ (adr r2, 8008e28 <UART_SetConfig+0x284>)
 8008e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e28:	08008e41 	.word	0x08008e41
 8008e2c:	08008e49 	.word	0x08008e49
 8008e30:	08008e51 	.word	0x08008e51
 8008e34:	08008e59 	.word	0x08008e59
 8008e38:	08008e61 	.word	0x08008e61
 8008e3c:	08008e69 	.word	0x08008e69
 8008e40:	2300      	movs	r3, #0
 8008e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e46:	e180      	b.n	800914a <UART_SetConfig+0x5a6>
 8008e48:	2304      	movs	r3, #4
 8008e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4e:	e17c      	b.n	800914a <UART_SetConfig+0x5a6>
 8008e50:	2308      	movs	r3, #8
 8008e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e56:	e178      	b.n	800914a <UART_SetConfig+0x5a6>
 8008e58:	2310      	movs	r3, #16
 8008e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5e:	e174      	b.n	800914a <UART_SetConfig+0x5a6>
 8008e60:	2320      	movs	r3, #32
 8008e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e66:	e170      	b.n	800914a <UART_SetConfig+0x5a6>
 8008e68:	2340      	movs	r3, #64	@ 0x40
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6e:	e16c      	b.n	800914a <UART_SetConfig+0x5a6>
 8008e70:	2380      	movs	r3, #128	@ 0x80
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e76:	e168      	b.n	800914a <UART_SetConfig+0x5a6>
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8008eec <UART_SetConfig+0x348>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d142      	bne.n	8008f08 <UART_SetConfig+0x364>
 8008e82:	4b16      	ldr	r3, [pc, #88]	@ (8008edc <UART_SetConfig+0x338>)
 8008e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	2b05      	cmp	r3, #5
 8008e8c:	d838      	bhi.n	8008f00 <UART_SetConfig+0x35c>
 8008e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e94 <UART_SetConfig+0x2f0>)
 8008e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e94:	08008ead 	.word	0x08008ead
 8008e98:	08008eb5 	.word	0x08008eb5
 8008e9c:	08008ebd 	.word	0x08008ebd
 8008ea0:	08008ec5 	.word	0x08008ec5
 8008ea4:	08008ef1 	.word	0x08008ef1
 8008ea8:	08008ef9 	.word	0x08008ef9
 8008eac:	2300      	movs	r3, #0
 8008eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb2:	e14a      	b.n	800914a <UART_SetConfig+0x5a6>
 8008eb4:	2304      	movs	r3, #4
 8008eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eba:	e146      	b.n	800914a <UART_SetConfig+0x5a6>
 8008ebc:	2308      	movs	r3, #8
 8008ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec2:	e142      	b.n	800914a <UART_SetConfig+0x5a6>
 8008ec4:	2310      	movs	r3, #16
 8008ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eca:	e13e      	b.n	800914a <UART_SetConfig+0x5a6>
 8008ecc:	cfff69f3 	.word	0xcfff69f3
 8008ed0:	58000c00 	.word	0x58000c00
 8008ed4:	11fff4ff 	.word	0x11fff4ff
 8008ed8:	40011000 	.word	0x40011000
 8008edc:	58024400 	.word	0x58024400
 8008ee0:	40004400 	.word	0x40004400
 8008ee4:	40004800 	.word	0x40004800
 8008ee8:	40004c00 	.word	0x40004c00
 8008eec:	40005000 	.word	0x40005000
 8008ef0:	2320      	movs	r3, #32
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef6:	e128      	b.n	800914a <UART_SetConfig+0x5a6>
 8008ef8:	2340      	movs	r3, #64	@ 0x40
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efe:	e124      	b.n	800914a <UART_SetConfig+0x5a6>
 8008f00:	2380      	movs	r3, #128	@ 0x80
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f06:	e120      	b.n	800914a <UART_SetConfig+0x5a6>
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4acb      	ldr	r2, [pc, #812]	@ (800923c <UART_SetConfig+0x698>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d176      	bne.n	8009000 <UART_SetConfig+0x45c>
 8008f12:	4bcb      	ldr	r3, [pc, #812]	@ (8009240 <UART_SetConfig+0x69c>)
 8008f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f1a:	2b28      	cmp	r3, #40	@ 0x28
 8008f1c:	d86c      	bhi.n	8008ff8 <UART_SetConfig+0x454>
 8008f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f24 <UART_SetConfig+0x380>)
 8008f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f24:	08008fc9 	.word	0x08008fc9
 8008f28:	08008ff9 	.word	0x08008ff9
 8008f2c:	08008ff9 	.word	0x08008ff9
 8008f30:	08008ff9 	.word	0x08008ff9
 8008f34:	08008ff9 	.word	0x08008ff9
 8008f38:	08008ff9 	.word	0x08008ff9
 8008f3c:	08008ff9 	.word	0x08008ff9
 8008f40:	08008ff9 	.word	0x08008ff9
 8008f44:	08008fd1 	.word	0x08008fd1
 8008f48:	08008ff9 	.word	0x08008ff9
 8008f4c:	08008ff9 	.word	0x08008ff9
 8008f50:	08008ff9 	.word	0x08008ff9
 8008f54:	08008ff9 	.word	0x08008ff9
 8008f58:	08008ff9 	.word	0x08008ff9
 8008f5c:	08008ff9 	.word	0x08008ff9
 8008f60:	08008ff9 	.word	0x08008ff9
 8008f64:	08008fd9 	.word	0x08008fd9
 8008f68:	08008ff9 	.word	0x08008ff9
 8008f6c:	08008ff9 	.word	0x08008ff9
 8008f70:	08008ff9 	.word	0x08008ff9
 8008f74:	08008ff9 	.word	0x08008ff9
 8008f78:	08008ff9 	.word	0x08008ff9
 8008f7c:	08008ff9 	.word	0x08008ff9
 8008f80:	08008ff9 	.word	0x08008ff9
 8008f84:	08008fe1 	.word	0x08008fe1
 8008f88:	08008ff9 	.word	0x08008ff9
 8008f8c:	08008ff9 	.word	0x08008ff9
 8008f90:	08008ff9 	.word	0x08008ff9
 8008f94:	08008ff9 	.word	0x08008ff9
 8008f98:	08008ff9 	.word	0x08008ff9
 8008f9c:	08008ff9 	.word	0x08008ff9
 8008fa0:	08008ff9 	.word	0x08008ff9
 8008fa4:	08008fe9 	.word	0x08008fe9
 8008fa8:	08008ff9 	.word	0x08008ff9
 8008fac:	08008ff9 	.word	0x08008ff9
 8008fb0:	08008ff9 	.word	0x08008ff9
 8008fb4:	08008ff9 	.word	0x08008ff9
 8008fb8:	08008ff9 	.word	0x08008ff9
 8008fbc:	08008ff9 	.word	0x08008ff9
 8008fc0:	08008ff9 	.word	0x08008ff9
 8008fc4:	08008ff1 	.word	0x08008ff1
 8008fc8:	2301      	movs	r3, #1
 8008fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fce:	e0bc      	b.n	800914a <UART_SetConfig+0x5a6>
 8008fd0:	2304      	movs	r3, #4
 8008fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd6:	e0b8      	b.n	800914a <UART_SetConfig+0x5a6>
 8008fd8:	2308      	movs	r3, #8
 8008fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fde:	e0b4      	b.n	800914a <UART_SetConfig+0x5a6>
 8008fe0:	2310      	movs	r3, #16
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe6:	e0b0      	b.n	800914a <UART_SetConfig+0x5a6>
 8008fe8:	2320      	movs	r3, #32
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fee:	e0ac      	b.n	800914a <UART_SetConfig+0x5a6>
 8008ff0:	2340      	movs	r3, #64	@ 0x40
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff6:	e0a8      	b.n	800914a <UART_SetConfig+0x5a6>
 8008ff8:	2380      	movs	r3, #128	@ 0x80
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffe:	e0a4      	b.n	800914a <UART_SetConfig+0x5a6>
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a8f      	ldr	r2, [pc, #572]	@ (8009244 <UART_SetConfig+0x6a0>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d130      	bne.n	800906c <UART_SetConfig+0x4c8>
 800900a:	4b8d      	ldr	r3, [pc, #564]	@ (8009240 <UART_SetConfig+0x69c>)
 800900c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800900e:	f003 0307 	and.w	r3, r3, #7
 8009012:	2b05      	cmp	r3, #5
 8009014:	d826      	bhi.n	8009064 <UART_SetConfig+0x4c0>
 8009016:	a201      	add	r2, pc, #4	@ (adr r2, 800901c <UART_SetConfig+0x478>)
 8009018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901c:	08009035 	.word	0x08009035
 8009020:	0800903d 	.word	0x0800903d
 8009024:	08009045 	.word	0x08009045
 8009028:	0800904d 	.word	0x0800904d
 800902c:	08009055 	.word	0x08009055
 8009030:	0800905d 	.word	0x0800905d
 8009034:	2300      	movs	r3, #0
 8009036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903a:	e086      	b.n	800914a <UART_SetConfig+0x5a6>
 800903c:	2304      	movs	r3, #4
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009042:	e082      	b.n	800914a <UART_SetConfig+0x5a6>
 8009044:	2308      	movs	r3, #8
 8009046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800904a:	e07e      	b.n	800914a <UART_SetConfig+0x5a6>
 800904c:	2310      	movs	r3, #16
 800904e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009052:	e07a      	b.n	800914a <UART_SetConfig+0x5a6>
 8009054:	2320      	movs	r3, #32
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800905a:	e076      	b.n	800914a <UART_SetConfig+0x5a6>
 800905c:	2340      	movs	r3, #64	@ 0x40
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009062:	e072      	b.n	800914a <UART_SetConfig+0x5a6>
 8009064:	2380      	movs	r3, #128	@ 0x80
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906a:	e06e      	b.n	800914a <UART_SetConfig+0x5a6>
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a75      	ldr	r2, [pc, #468]	@ (8009248 <UART_SetConfig+0x6a4>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d130      	bne.n	80090d8 <UART_SetConfig+0x534>
 8009076:	4b72      	ldr	r3, [pc, #456]	@ (8009240 <UART_SetConfig+0x69c>)
 8009078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800907a:	f003 0307 	and.w	r3, r3, #7
 800907e:	2b05      	cmp	r3, #5
 8009080:	d826      	bhi.n	80090d0 <UART_SetConfig+0x52c>
 8009082:	a201      	add	r2, pc, #4	@ (adr r2, 8009088 <UART_SetConfig+0x4e4>)
 8009084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009088:	080090a1 	.word	0x080090a1
 800908c:	080090a9 	.word	0x080090a9
 8009090:	080090b1 	.word	0x080090b1
 8009094:	080090b9 	.word	0x080090b9
 8009098:	080090c1 	.word	0x080090c1
 800909c:	080090c9 	.word	0x080090c9
 80090a0:	2300      	movs	r3, #0
 80090a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090a6:	e050      	b.n	800914a <UART_SetConfig+0x5a6>
 80090a8:	2304      	movs	r3, #4
 80090aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ae:	e04c      	b.n	800914a <UART_SetConfig+0x5a6>
 80090b0:	2308      	movs	r3, #8
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b6:	e048      	b.n	800914a <UART_SetConfig+0x5a6>
 80090b8:	2310      	movs	r3, #16
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090be:	e044      	b.n	800914a <UART_SetConfig+0x5a6>
 80090c0:	2320      	movs	r3, #32
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c6:	e040      	b.n	800914a <UART_SetConfig+0x5a6>
 80090c8:	2340      	movs	r3, #64	@ 0x40
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e03c      	b.n	800914a <UART_SetConfig+0x5a6>
 80090d0:	2380      	movs	r3, #128	@ 0x80
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e038      	b.n	800914a <UART_SetConfig+0x5a6>
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a5b      	ldr	r2, [pc, #364]	@ (800924c <UART_SetConfig+0x6a8>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d130      	bne.n	8009144 <UART_SetConfig+0x5a0>
 80090e2:	4b57      	ldr	r3, [pc, #348]	@ (8009240 <UART_SetConfig+0x69c>)
 80090e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090e6:	f003 0307 	and.w	r3, r3, #7
 80090ea:	2b05      	cmp	r3, #5
 80090ec:	d826      	bhi.n	800913c <UART_SetConfig+0x598>
 80090ee:	a201      	add	r2, pc, #4	@ (adr r2, 80090f4 <UART_SetConfig+0x550>)
 80090f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f4:	0800910d 	.word	0x0800910d
 80090f8:	08009115 	.word	0x08009115
 80090fc:	0800911d 	.word	0x0800911d
 8009100:	08009125 	.word	0x08009125
 8009104:	0800912d 	.word	0x0800912d
 8009108:	08009135 	.word	0x08009135
 800910c:	2302      	movs	r3, #2
 800910e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009112:	e01a      	b.n	800914a <UART_SetConfig+0x5a6>
 8009114:	2304      	movs	r3, #4
 8009116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911a:	e016      	b.n	800914a <UART_SetConfig+0x5a6>
 800911c:	2308      	movs	r3, #8
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009122:	e012      	b.n	800914a <UART_SetConfig+0x5a6>
 8009124:	2310      	movs	r3, #16
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912a:	e00e      	b.n	800914a <UART_SetConfig+0x5a6>
 800912c:	2320      	movs	r3, #32
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009132:	e00a      	b.n	800914a <UART_SetConfig+0x5a6>
 8009134:	2340      	movs	r3, #64	@ 0x40
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e006      	b.n	800914a <UART_SetConfig+0x5a6>
 800913c:	2380      	movs	r3, #128	@ 0x80
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e002      	b.n	800914a <UART_SetConfig+0x5a6>
 8009144:	2380      	movs	r3, #128	@ 0x80
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a3f      	ldr	r2, [pc, #252]	@ (800924c <UART_SetConfig+0x6a8>)
 8009150:	4293      	cmp	r3, r2
 8009152:	f040 80f8 	bne.w	8009346 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009156:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800915a:	2b20      	cmp	r3, #32
 800915c:	dc46      	bgt.n	80091ec <UART_SetConfig+0x648>
 800915e:	2b02      	cmp	r3, #2
 8009160:	f2c0 8082 	blt.w	8009268 <UART_SetConfig+0x6c4>
 8009164:	3b02      	subs	r3, #2
 8009166:	2b1e      	cmp	r3, #30
 8009168:	d87e      	bhi.n	8009268 <UART_SetConfig+0x6c4>
 800916a:	a201      	add	r2, pc, #4	@ (adr r2, 8009170 <UART_SetConfig+0x5cc>)
 800916c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009170:	080091f3 	.word	0x080091f3
 8009174:	08009269 	.word	0x08009269
 8009178:	080091fb 	.word	0x080091fb
 800917c:	08009269 	.word	0x08009269
 8009180:	08009269 	.word	0x08009269
 8009184:	08009269 	.word	0x08009269
 8009188:	0800920b 	.word	0x0800920b
 800918c:	08009269 	.word	0x08009269
 8009190:	08009269 	.word	0x08009269
 8009194:	08009269 	.word	0x08009269
 8009198:	08009269 	.word	0x08009269
 800919c:	08009269 	.word	0x08009269
 80091a0:	08009269 	.word	0x08009269
 80091a4:	08009269 	.word	0x08009269
 80091a8:	0800921b 	.word	0x0800921b
 80091ac:	08009269 	.word	0x08009269
 80091b0:	08009269 	.word	0x08009269
 80091b4:	08009269 	.word	0x08009269
 80091b8:	08009269 	.word	0x08009269
 80091bc:	08009269 	.word	0x08009269
 80091c0:	08009269 	.word	0x08009269
 80091c4:	08009269 	.word	0x08009269
 80091c8:	08009269 	.word	0x08009269
 80091cc:	08009269 	.word	0x08009269
 80091d0:	08009269 	.word	0x08009269
 80091d4:	08009269 	.word	0x08009269
 80091d8:	08009269 	.word	0x08009269
 80091dc:	08009269 	.word	0x08009269
 80091e0:	08009269 	.word	0x08009269
 80091e4:	08009269 	.word	0x08009269
 80091e8:	0800925b 	.word	0x0800925b
 80091ec:	2b40      	cmp	r3, #64	@ 0x40
 80091ee:	d037      	beq.n	8009260 <UART_SetConfig+0x6bc>
 80091f0:	e03a      	b.n	8009268 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80091f2:	f7fd ff91 	bl	8007118 <HAL_RCCEx_GetD3PCLK1Freq>
 80091f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091f8:	e03c      	b.n	8009274 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fd ffa0 	bl	8007144 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009208:	e034      	b.n	8009274 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800920a:	f107 0318 	add.w	r3, r7, #24
 800920e:	4618      	mov	r0, r3
 8009210:	f7fe f8ec 	bl	80073ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009218:	e02c      	b.n	8009274 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800921a:	4b09      	ldr	r3, [pc, #36]	@ (8009240 <UART_SetConfig+0x69c>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0320 	and.w	r3, r3, #32
 8009222:	2b00      	cmp	r3, #0
 8009224:	d016      	beq.n	8009254 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009226:	4b06      	ldr	r3, [pc, #24]	@ (8009240 <UART_SetConfig+0x69c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	08db      	lsrs	r3, r3, #3
 800922c:	f003 0303 	and.w	r3, r3, #3
 8009230:	4a07      	ldr	r2, [pc, #28]	@ (8009250 <UART_SetConfig+0x6ac>)
 8009232:	fa22 f303 	lsr.w	r3, r2, r3
 8009236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009238:	e01c      	b.n	8009274 <UART_SetConfig+0x6d0>
 800923a:	bf00      	nop
 800923c:	40011400 	.word	0x40011400
 8009240:	58024400 	.word	0x58024400
 8009244:	40007800 	.word	0x40007800
 8009248:	40007c00 	.word	0x40007c00
 800924c:	58000c00 	.word	0x58000c00
 8009250:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009254:	4b9d      	ldr	r3, [pc, #628]	@ (80094cc <UART_SetConfig+0x928>)
 8009256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009258:	e00c      	b.n	8009274 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800925a:	4b9d      	ldr	r3, [pc, #628]	@ (80094d0 <UART_SetConfig+0x92c>)
 800925c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800925e:	e009      	b.n	8009274 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009260:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009266:	e005      	b.n	8009274 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009272:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 81de 	beq.w	8009638 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009280:	4a94      	ldr	r2, [pc, #592]	@ (80094d4 <UART_SetConfig+0x930>)
 8009282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009286:	461a      	mov	r2, r3
 8009288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800928a:	fbb3 f3f2 	udiv	r3, r3, r2
 800928e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	4613      	mov	r3, r2
 8009296:	005b      	lsls	r3, r3, #1
 8009298:	4413      	add	r3, r2
 800929a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800929c:	429a      	cmp	r2, r3
 800929e:	d305      	bcc.n	80092ac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d903      	bls.n	80092b4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80092b2:	e1c1      	b.n	8009638 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b6:	2200      	movs	r2, #0
 80092b8:	60bb      	str	r3, [r7, #8]
 80092ba:	60fa      	str	r2, [r7, #12]
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c0:	4a84      	ldr	r2, [pc, #528]	@ (80094d4 <UART_SetConfig+0x930>)
 80092c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	2200      	movs	r2, #0
 80092ca:	603b      	str	r3, [r7, #0]
 80092cc:	607a      	str	r2, [r7, #4]
 80092ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092d6:	f7f6 ffff 	bl	80002d8 <__aeabi_uldivmod>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	4610      	mov	r0, r2
 80092e0:	4619      	mov	r1, r3
 80092e2:	f04f 0200 	mov.w	r2, #0
 80092e6:	f04f 0300 	mov.w	r3, #0
 80092ea:	020b      	lsls	r3, r1, #8
 80092ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092f0:	0202      	lsls	r2, r0, #8
 80092f2:	6979      	ldr	r1, [r7, #20]
 80092f4:	6849      	ldr	r1, [r1, #4]
 80092f6:	0849      	lsrs	r1, r1, #1
 80092f8:	2000      	movs	r0, #0
 80092fa:	460c      	mov	r4, r1
 80092fc:	4605      	mov	r5, r0
 80092fe:	eb12 0804 	adds.w	r8, r2, r4
 8009302:	eb43 0905 	adc.w	r9, r3, r5
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	469a      	mov	sl, r3
 800930e:	4693      	mov	fp, r2
 8009310:	4652      	mov	r2, sl
 8009312:	465b      	mov	r3, fp
 8009314:	4640      	mov	r0, r8
 8009316:	4649      	mov	r1, r9
 8009318:	f7f6 ffde 	bl	80002d8 <__aeabi_uldivmod>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	4613      	mov	r3, r2
 8009322:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800932a:	d308      	bcc.n	800933e <UART_SetConfig+0x79a>
 800932c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800932e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009332:	d204      	bcs.n	800933e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800933a:	60da      	str	r2, [r3, #12]
 800933c:	e17c      	b.n	8009638 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009344:	e178      	b.n	8009638 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	69db      	ldr	r3, [r3, #28]
 800934a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800934e:	f040 80c5 	bne.w	80094dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009352:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009356:	2b20      	cmp	r3, #32
 8009358:	dc48      	bgt.n	80093ec <UART_SetConfig+0x848>
 800935a:	2b00      	cmp	r3, #0
 800935c:	db7b      	blt.n	8009456 <UART_SetConfig+0x8b2>
 800935e:	2b20      	cmp	r3, #32
 8009360:	d879      	bhi.n	8009456 <UART_SetConfig+0x8b2>
 8009362:	a201      	add	r2, pc, #4	@ (adr r2, 8009368 <UART_SetConfig+0x7c4>)
 8009364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009368:	080093f3 	.word	0x080093f3
 800936c:	080093fb 	.word	0x080093fb
 8009370:	08009457 	.word	0x08009457
 8009374:	08009457 	.word	0x08009457
 8009378:	08009403 	.word	0x08009403
 800937c:	08009457 	.word	0x08009457
 8009380:	08009457 	.word	0x08009457
 8009384:	08009457 	.word	0x08009457
 8009388:	08009413 	.word	0x08009413
 800938c:	08009457 	.word	0x08009457
 8009390:	08009457 	.word	0x08009457
 8009394:	08009457 	.word	0x08009457
 8009398:	08009457 	.word	0x08009457
 800939c:	08009457 	.word	0x08009457
 80093a0:	08009457 	.word	0x08009457
 80093a4:	08009457 	.word	0x08009457
 80093a8:	08009423 	.word	0x08009423
 80093ac:	08009457 	.word	0x08009457
 80093b0:	08009457 	.word	0x08009457
 80093b4:	08009457 	.word	0x08009457
 80093b8:	08009457 	.word	0x08009457
 80093bc:	08009457 	.word	0x08009457
 80093c0:	08009457 	.word	0x08009457
 80093c4:	08009457 	.word	0x08009457
 80093c8:	08009457 	.word	0x08009457
 80093cc:	08009457 	.word	0x08009457
 80093d0:	08009457 	.word	0x08009457
 80093d4:	08009457 	.word	0x08009457
 80093d8:	08009457 	.word	0x08009457
 80093dc:	08009457 	.word	0x08009457
 80093e0:	08009457 	.word	0x08009457
 80093e4:	08009457 	.word	0x08009457
 80093e8:	08009449 	.word	0x08009449
 80093ec:	2b40      	cmp	r3, #64	@ 0x40
 80093ee:	d02e      	beq.n	800944e <UART_SetConfig+0x8aa>
 80093f0:	e031      	b.n	8009456 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093f2:	f7fc fc5b 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 80093f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093f8:	e033      	b.n	8009462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093fa:	f7fc fc6d 	bl	8005cd8 <HAL_RCC_GetPCLK2Freq>
 80093fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009400:	e02f      	b.n	8009462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009406:	4618      	mov	r0, r3
 8009408:	f7fd fe9c 	bl	8007144 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800940c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800940e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009410:	e027      	b.n	8009462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009412:	f107 0318 	add.w	r3, r7, #24
 8009416:	4618      	mov	r0, r3
 8009418:	f7fd ffe8 	bl	80073ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009420:	e01f      	b.n	8009462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009422:	4b2d      	ldr	r3, [pc, #180]	@ (80094d8 <UART_SetConfig+0x934>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0320 	and.w	r3, r3, #32
 800942a:	2b00      	cmp	r3, #0
 800942c:	d009      	beq.n	8009442 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800942e:	4b2a      	ldr	r3, [pc, #168]	@ (80094d8 <UART_SetConfig+0x934>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	08db      	lsrs	r3, r3, #3
 8009434:	f003 0303 	and.w	r3, r3, #3
 8009438:	4a24      	ldr	r2, [pc, #144]	@ (80094cc <UART_SetConfig+0x928>)
 800943a:	fa22 f303 	lsr.w	r3, r2, r3
 800943e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009440:	e00f      	b.n	8009462 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009442:	4b22      	ldr	r3, [pc, #136]	@ (80094cc <UART_SetConfig+0x928>)
 8009444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009446:	e00c      	b.n	8009462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009448:	4b21      	ldr	r3, [pc, #132]	@ (80094d0 <UART_SetConfig+0x92c>)
 800944a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800944c:	e009      	b.n	8009462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800944e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009454:	e005      	b.n	8009462 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009460:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009464:	2b00      	cmp	r3, #0
 8009466:	f000 80e7 	beq.w	8009638 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800946e:	4a19      	ldr	r2, [pc, #100]	@ (80094d4 <UART_SetConfig+0x930>)
 8009470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009474:	461a      	mov	r2, r3
 8009476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009478:	fbb3 f3f2 	udiv	r3, r3, r2
 800947c:	005a      	lsls	r2, r3, #1
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	085b      	lsrs	r3, r3, #1
 8009484:	441a      	add	r2, r3
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	fbb2 f3f3 	udiv	r3, r2, r3
 800948e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009492:	2b0f      	cmp	r3, #15
 8009494:	d916      	bls.n	80094c4 <UART_SetConfig+0x920>
 8009496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800949c:	d212      	bcs.n	80094c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800949e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	f023 030f 	bic.w	r3, r3, #15
 80094a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094aa:	085b      	lsrs	r3, r3, #1
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	f003 0307 	and.w	r3, r3, #7
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80094b6:	4313      	orrs	r3, r2
 80094b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80094c0:	60da      	str	r2, [r3, #12]
 80094c2:	e0b9      	b.n	8009638 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80094ca:	e0b5      	b.n	8009638 <UART_SetConfig+0xa94>
 80094cc:	03d09000 	.word	0x03d09000
 80094d0:	003d0900 	.word	0x003d0900
 80094d4:	0804d4b8 	.word	0x0804d4b8
 80094d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80094dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	dc49      	bgt.n	8009578 <UART_SetConfig+0x9d4>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	db7c      	blt.n	80095e2 <UART_SetConfig+0xa3e>
 80094e8:	2b20      	cmp	r3, #32
 80094ea:	d87a      	bhi.n	80095e2 <UART_SetConfig+0xa3e>
 80094ec:	a201      	add	r2, pc, #4	@ (adr r2, 80094f4 <UART_SetConfig+0x950>)
 80094ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f2:	bf00      	nop
 80094f4:	0800957f 	.word	0x0800957f
 80094f8:	08009587 	.word	0x08009587
 80094fc:	080095e3 	.word	0x080095e3
 8009500:	080095e3 	.word	0x080095e3
 8009504:	0800958f 	.word	0x0800958f
 8009508:	080095e3 	.word	0x080095e3
 800950c:	080095e3 	.word	0x080095e3
 8009510:	080095e3 	.word	0x080095e3
 8009514:	0800959f 	.word	0x0800959f
 8009518:	080095e3 	.word	0x080095e3
 800951c:	080095e3 	.word	0x080095e3
 8009520:	080095e3 	.word	0x080095e3
 8009524:	080095e3 	.word	0x080095e3
 8009528:	080095e3 	.word	0x080095e3
 800952c:	080095e3 	.word	0x080095e3
 8009530:	080095e3 	.word	0x080095e3
 8009534:	080095af 	.word	0x080095af
 8009538:	080095e3 	.word	0x080095e3
 800953c:	080095e3 	.word	0x080095e3
 8009540:	080095e3 	.word	0x080095e3
 8009544:	080095e3 	.word	0x080095e3
 8009548:	080095e3 	.word	0x080095e3
 800954c:	080095e3 	.word	0x080095e3
 8009550:	080095e3 	.word	0x080095e3
 8009554:	080095e3 	.word	0x080095e3
 8009558:	080095e3 	.word	0x080095e3
 800955c:	080095e3 	.word	0x080095e3
 8009560:	080095e3 	.word	0x080095e3
 8009564:	080095e3 	.word	0x080095e3
 8009568:	080095e3 	.word	0x080095e3
 800956c:	080095e3 	.word	0x080095e3
 8009570:	080095e3 	.word	0x080095e3
 8009574:	080095d5 	.word	0x080095d5
 8009578:	2b40      	cmp	r3, #64	@ 0x40
 800957a:	d02e      	beq.n	80095da <UART_SetConfig+0xa36>
 800957c:	e031      	b.n	80095e2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800957e:	f7fc fb95 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 8009582:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009584:	e033      	b.n	80095ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009586:	f7fc fba7 	bl	8005cd8 <HAL_RCC_GetPCLK2Freq>
 800958a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800958c:	e02f      	b.n	80095ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800958e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009592:	4618      	mov	r0, r3
 8009594:	f7fd fdd6 	bl	8007144 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800959c:	e027      	b.n	80095ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800959e:	f107 0318 	add.w	r3, r7, #24
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fd ff22 	bl	80073ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ac:	e01f      	b.n	80095ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095ae:	4b2d      	ldr	r3, [pc, #180]	@ (8009664 <UART_SetConfig+0xac0>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f003 0320 	and.w	r3, r3, #32
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d009      	beq.n	80095ce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095ba:	4b2a      	ldr	r3, [pc, #168]	@ (8009664 <UART_SetConfig+0xac0>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	08db      	lsrs	r3, r3, #3
 80095c0:	f003 0303 	and.w	r3, r3, #3
 80095c4:	4a28      	ldr	r2, [pc, #160]	@ (8009668 <UART_SetConfig+0xac4>)
 80095c6:	fa22 f303 	lsr.w	r3, r2, r3
 80095ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095cc:	e00f      	b.n	80095ee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80095ce:	4b26      	ldr	r3, [pc, #152]	@ (8009668 <UART_SetConfig+0xac4>)
 80095d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d2:	e00c      	b.n	80095ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095d4:	4b25      	ldr	r3, [pc, #148]	@ (800966c <UART_SetConfig+0xac8>)
 80095d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d8:	e009      	b.n	80095ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e0:	e005      	b.n	80095ee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095ec:	bf00      	nop
    }

    if (pclk != 0U)
 80095ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d021      	beq.n	8009638 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009670 <UART_SetConfig+0xacc>)
 80095fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095fe:	461a      	mov	r2, r3
 8009600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009602:	fbb3 f2f2 	udiv	r2, r3, r2
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	085b      	lsrs	r3, r3, #1
 800960c:	441a      	add	r2, r3
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	fbb2 f3f3 	udiv	r3, r2, r3
 8009616:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961a:	2b0f      	cmp	r3, #15
 800961c:	d909      	bls.n	8009632 <UART_SetConfig+0xa8e>
 800961e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009624:	d205      	bcs.n	8009632 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009628:	b29a      	uxth	r2, r3
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	60da      	str	r2, [r3, #12]
 8009630:	e002      	b.n	8009638 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	2201      	movs	r2, #1
 800963c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2201      	movs	r2, #1
 8009644:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	2200      	movs	r2, #0
 800964c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	2200      	movs	r2, #0
 8009652:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009654:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009658:	4618      	mov	r0, r3
 800965a:	3748      	adds	r7, #72	@ 0x48
 800965c:	46bd      	mov	sp, r7
 800965e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009662:	bf00      	nop
 8009664:	58024400 	.word	0x58024400
 8009668:	03d09000 	.word	0x03d09000
 800966c:	003d0900 	.word	0x003d0900
 8009670:	0804d4b8 	.word	0x0804d4b8

08009674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009680:	f003 0308 	and.w	r3, r3, #8
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00a      	beq.n	800969e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	430a      	orrs	r2, r1
 800969c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00a      	beq.n	80096c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	430a      	orrs	r2, r1
 80096be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c4:	f003 0302 	and.w	r3, r3, #2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00a      	beq.n	80096e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	430a      	orrs	r2, r1
 80096e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e6:	f003 0304 	and.w	r3, r3, #4
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00a      	beq.n	8009704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	430a      	orrs	r2, r1
 8009702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009708:	f003 0310 	and.w	r3, r3, #16
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00a      	beq.n	8009726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	430a      	orrs	r2, r1
 8009724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800972a:	f003 0320 	and.w	r3, r3, #32
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00a      	beq.n	8009748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	430a      	orrs	r2, r1
 8009746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800974c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009750:	2b00      	cmp	r3, #0
 8009752:	d01a      	beq.n	800978a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	430a      	orrs	r2, r1
 8009768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800976e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009772:	d10a      	bne.n	800978a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	430a      	orrs	r2, r1
 8009788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800978e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00a      	beq.n	80097ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	430a      	orrs	r2, r1
 80097aa:	605a      	str	r2, [r3, #4]
  }
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b098      	sub	sp, #96	@ 0x60
 80097bc:	af02      	add	r7, sp, #8
 80097be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097c8:	f7f8 fbaa 	bl	8001f20 <HAL_GetTick>
 80097cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 0308 	and.w	r3, r3, #8
 80097d8:	2b08      	cmp	r3, #8
 80097da:	d12f      	bne.n	800983c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097e4:	2200      	movs	r2, #0
 80097e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f88e 	bl	800990c <UART_WaitOnFlagUntilTimeout>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d022      	beq.n	800983c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fe:	e853 3f00 	ldrex	r3, [r3]
 8009802:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800980a:	653b      	str	r3, [r7, #80]	@ 0x50
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	461a      	mov	r2, r3
 8009812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009814:	647b      	str	r3, [r7, #68]	@ 0x44
 8009816:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009818:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800981a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800981c:	e841 2300 	strex	r3, r2, [r1]
 8009820:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1e6      	bne.n	80097f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2220      	movs	r2, #32
 800982c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009838:	2303      	movs	r3, #3
 800983a:	e063      	b.n	8009904 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0304 	and.w	r3, r3, #4
 8009846:	2b04      	cmp	r3, #4
 8009848:	d149      	bne.n	80098de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800984a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009852:	2200      	movs	r2, #0
 8009854:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f857 	bl	800990c <UART_WaitOnFlagUntilTimeout>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d03c      	beq.n	80098de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986c:	e853 3f00 	ldrex	r3, [r3]
 8009870:	623b      	str	r3, [r7, #32]
   return(result);
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009878:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009882:	633b      	str	r3, [r7, #48]	@ 0x30
 8009884:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800988a:	e841 2300 	strex	r3, r2, [r1]
 800988e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1e6      	bne.n	8009864 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3308      	adds	r3, #8
 800989c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	e853 3f00 	ldrex	r3, [r3]
 80098a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f023 0301 	bic.w	r3, r3, #1
 80098ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3308      	adds	r3, #8
 80098b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098b6:	61fa      	str	r2, [r7, #28]
 80098b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ba:	69b9      	ldr	r1, [r7, #24]
 80098bc:	69fa      	ldr	r2, [r7, #28]
 80098be:	e841 2300 	strex	r3, r2, [r1]
 80098c2:	617b      	str	r3, [r7, #20]
   return(result);
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1e5      	bne.n	8009896 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2220      	movs	r2, #32
 80098ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098da:	2303      	movs	r3, #3
 80098dc:	e012      	b.n	8009904 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2220      	movs	r2, #32
 80098e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2220      	movs	r2, #32
 80098ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3758      	adds	r7, #88	@ 0x58
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	4613      	mov	r3, r2
 800991a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800991c:	e04f      	b.n	80099be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009924:	d04b      	beq.n	80099be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009926:	f7f8 fafb 	bl	8001f20 <HAL_GetTick>
 800992a:	4602      	mov	r2, r0
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	69ba      	ldr	r2, [r7, #24]
 8009932:	429a      	cmp	r2, r3
 8009934:	d302      	bcc.n	800993c <UART_WaitOnFlagUntilTimeout+0x30>
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d101      	bne.n	8009940 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800993c:	2303      	movs	r3, #3
 800993e:	e04e      	b.n	80099de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0304 	and.w	r3, r3, #4
 800994a:	2b00      	cmp	r3, #0
 800994c:	d037      	beq.n	80099be <UART_WaitOnFlagUntilTimeout+0xb2>
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2b80      	cmp	r3, #128	@ 0x80
 8009952:	d034      	beq.n	80099be <UART_WaitOnFlagUntilTimeout+0xb2>
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2b40      	cmp	r3, #64	@ 0x40
 8009958:	d031      	beq.n	80099be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	69db      	ldr	r3, [r3, #28]
 8009960:	f003 0308 	and.w	r3, r3, #8
 8009964:	2b08      	cmp	r3, #8
 8009966:	d110      	bne.n	800998a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2208      	movs	r2, #8
 800996e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f000 f839 	bl	80099e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2208      	movs	r2, #8
 800997a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e029      	b.n	80099de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009998:	d111      	bne.n	80099be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 f81f 	bl	80099e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2220      	movs	r2, #32
 80099ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e00f      	b.n	80099de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	69da      	ldr	r2, [r3, #28]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	4013      	ands	r3, r2
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	bf0c      	ite	eq
 80099ce:	2301      	moveq	r3, #1
 80099d0:	2300      	movne	r3, #0
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	461a      	mov	r2, r3
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d0a0      	beq.n	800991e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
	...

080099e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b095      	sub	sp, #84	@ 0x54
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099f8:	e853 3f00 	ldrex	r3, [r3]
 80099fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a16:	e841 2300 	strex	r3, r2, [r1]
 8009a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1e6      	bne.n	80099f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3308      	adds	r3, #8
 8009a28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	e853 3f00 	ldrex	r3, [r3]
 8009a30:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a32:	69fa      	ldr	r2, [r7, #28]
 8009a34:	4b1e      	ldr	r3, [pc, #120]	@ (8009ab0 <UART_EndRxTransfer+0xc8>)
 8009a36:	4013      	ands	r3, r2
 8009a38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3308      	adds	r3, #8
 8009a40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a4a:	e841 2300 	strex	r3, r2, [r1]
 8009a4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1e5      	bne.n	8009a22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d118      	bne.n	8009a90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	f023 0310 	bic.w	r3, r3, #16
 8009a72:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	461a      	mov	r2, r3
 8009a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a7c:	61bb      	str	r3, [r7, #24]
 8009a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a80:	6979      	ldr	r1, [r7, #20]
 8009a82:	69ba      	ldr	r2, [r7, #24]
 8009a84:	e841 2300 	strex	r3, r2, [r1]
 8009a88:	613b      	str	r3, [r7, #16]
   return(result);
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1e6      	bne.n	8009a5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2220      	movs	r2, #32
 8009a94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009aa4:	bf00      	nop
 8009aa6:	3754      	adds	r7, #84	@ 0x54
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	effffffe 	.word	0xeffffffe

08009ab4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d101      	bne.n	8009aca <HAL_UARTEx_DisableFifoMode+0x16>
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	e027      	b.n	8009b1a <HAL_UARTEx_DisableFifoMode+0x66>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2224      	movs	r2, #36	@ 0x24
 8009ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f022 0201 	bic.w	r2, r2, #1
 8009af0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009af8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3714      	adds	r7, #20
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d101      	bne.n	8009b3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	e02d      	b.n	8009b9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2224      	movs	r2, #36	@ 0x24
 8009b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f022 0201 	bic.w	r2, r2, #1
 8009b64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	683a      	ldr	r2, [r7, #0]
 8009b76:	430a      	orrs	r2, r1
 8009b78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f850 	bl	8009c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d101      	bne.n	8009bba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	e02d      	b.n	8009c16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2224      	movs	r2, #36	@ 0x24
 8009bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 0201 	bic.w	r2, r2, #1
 8009be0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f812 	bl	8009c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2220      	movs	r2, #32
 8009c08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
	...

08009c20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d108      	bne.n	8009c42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c40:	e031      	b.n	8009ca6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c42:	2310      	movs	r3, #16
 8009c44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c46:	2310      	movs	r3, #16
 8009c48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	0e5b      	lsrs	r3, r3, #25
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	f003 0307 	and.w	r3, r3, #7
 8009c58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	0f5b      	lsrs	r3, r3, #29
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	f003 0307 	and.w	r3, r3, #7
 8009c68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	7b3a      	ldrb	r2, [r7, #12]
 8009c6e:	4911      	ldr	r1, [pc, #68]	@ (8009cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8009c70:	5c8a      	ldrb	r2, [r1, r2]
 8009c72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c76:	7b3a      	ldrb	r2, [r7, #12]
 8009c78:	490f      	ldr	r1, [pc, #60]	@ (8009cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8009c7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
 8009c8a:	7b7a      	ldrb	r2, [r7, #13]
 8009c8c:	4909      	ldr	r1, [pc, #36]	@ (8009cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8009c8e:	5c8a      	ldrb	r2, [r1, r2]
 8009c90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c94:	7b7a      	ldrb	r2, [r7, #13]
 8009c96:	4908      	ldr	r1, [pc, #32]	@ (8009cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8009c98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009ca6:	bf00      	nop
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	0804d4d0 	.word	0x0804d4d0
 8009cb8:	0804d4d8 	.word	0x0804d4d8

08009cbc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d121      	bne.n	8009d12 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	4b27      	ldr	r3, [pc, #156]	@ (8009d70 <FMC_SDRAM_Init+0xb4>)
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	6851      	ldr	r1, [r2, #4]
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	6892      	ldr	r2, [r2, #8]
 8009cde:	4311      	orrs	r1, r2
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	68d2      	ldr	r2, [r2, #12]
 8009ce4:	4311      	orrs	r1, r2
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	6912      	ldr	r2, [r2, #16]
 8009cea:	4311      	orrs	r1, r2
 8009cec:	683a      	ldr	r2, [r7, #0]
 8009cee:	6952      	ldr	r2, [r2, #20]
 8009cf0:	4311      	orrs	r1, r2
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	6992      	ldr	r2, [r2, #24]
 8009cf6:	4311      	orrs	r1, r2
 8009cf8:	683a      	ldr	r2, [r7, #0]
 8009cfa:	69d2      	ldr	r2, [r2, #28]
 8009cfc:	4311      	orrs	r1, r2
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	6a12      	ldr	r2, [r2, #32]
 8009d02:	4311      	orrs	r1, r2
 8009d04:	683a      	ldr	r2, [r7, #0]
 8009d06:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009d08:	430a      	orrs	r2, r1
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	e026      	b.n	8009d60 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	69d9      	ldr	r1, [r3, #28]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	6a1b      	ldr	r3, [r3, #32]
 8009d22:	4319      	orrs	r1, r3
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	431a      	orrs	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	4b0e      	ldr	r3, [pc, #56]	@ (8009d70 <FMC_SDRAM_Init+0xb4>)
 8009d36:	4013      	ands	r3, r2
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	6851      	ldr	r1, [r2, #4]
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	6892      	ldr	r2, [r2, #8]
 8009d40:	4311      	orrs	r1, r2
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	68d2      	ldr	r2, [r2, #12]
 8009d46:	4311      	orrs	r1, r2
 8009d48:	683a      	ldr	r2, [r7, #0]
 8009d4a:	6912      	ldr	r2, [r2, #16]
 8009d4c:	4311      	orrs	r1, r2
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	6952      	ldr	r2, [r2, #20]
 8009d52:	4311      	orrs	r1, r2
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	6992      	ldr	r2, [r2, #24]
 8009d58:	430a      	orrs	r2, r1
 8009d5a:	431a      	orrs	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	ffff8000 	.word	0xffff8000

08009d74 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d128      	bne.n	8009dd8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	1e59      	subs	r1, r3, #1
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	011b      	lsls	r3, r3, #4
 8009d9c:	4319      	orrs	r1, r3
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	3b01      	subs	r3, #1
 8009da4:	021b      	lsls	r3, r3, #8
 8009da6:	4319      	orrs	r1, r3
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	3b01      	subs	r3, #1
 8009dae:	031b      	lsls	r3, r3, #12
 8009db0:	4319      	orrs	r1, r3
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	041b      	lsls	r3, r3, #16
 8009dba:	4319      	orrs	r1, r3
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	051b      	lsls	r3, r3, #20
 8009dc4:	4319      	orrs	r1, r3
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	061b      	lsls	r3, r3, #24
 8009dce:	430b      	orrs	r3, r1
 8009dd0:	431a      	orrs	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	609a      	str	r2, [r3, #8]
 8009dd6:	e02d      	b.n	8009e34 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	689a      	ldr	r2, [r3, #8]
 8009ddc:	4b19      	ldr	r3, [pc, #100]	@ (8009e44 <FMC_SDRAM_Timing_Init+0xd0>)
 8009dde:	4013      	ands	r3, r2
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	68d2      	ldr	r2, [r2, #12]
 8009de4:	3a01      	subs	r2, #1
 8009de6:	0311      	lsls	r1, r2, #12
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	6952      	ldr	r2, [r2, #20]
 8009dec:	3a01      	subs	r2, #1
 8009dee:	0512      	lsls	r2, r2, #20
 8009df0:	430a      	orrs	r2, r1
 8009df2:	431a      	orrs	r2, r3
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	1e59      	subs	r1, r3, #1
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	011b      	lsls	r3, r3, #4
 8009e0e:	4319      	orrs	r1, r3
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	3b01      	subs	r3, #1
 8009e16:	021b      	lsls	r3, r3, #8
 8009e18:	4319      	orrs	r1, r3
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	041b      	lsls	r3, r3, #16
 8009e22:	4319      	orrs	r1, r3
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	061b      	lsls	r3, r3, #24
 8009e2c:	430b      	orrs	r3, r1
 8009e2e:	431a      	orrs	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3714      	adds	r7, #20
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	ff0f0fff 	.word	0xff0f0fff

08009e48 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	691a      	ldr	r2, [r3, #16]
 8009e58:	4b0c      	ldr	r3, [pc, #48]	@ (8009e8c <FMC_SDRAM_SendCommand+0x44>)
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	6811      	ldr	r1, [r2, #0]
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	6852      	ldr	r2, [r2, #4]
 8009e64:	4311      	orrs	r1, r2
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	6892      	ldr	r2, [r2, #8]
 8009e6a:	3a01      	subs	r2, #1
 8009e6c:	0152      	lsls	r2, r2, #5
 8009e6e:	4311      	orrs	r1, r2
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	68d2      	ldr	r2, [r2, #12]
 8009e74:	0252      	lsls	r2, r2, #9
 8009e76:	430a      	orrs	r2, r1
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	ffc00000 	.word	0xffc00000

08009e90 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	695a      	ldr	r2, [r3, #20]
 8009e9e:	4b07      	ldr	r3, [pc, #28]	@ (8009ebc <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	0052      	lsls	r2, r2, #1
 8009ea6:	431a      	orrs	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	ffffc001 	.word	0xffffc001

08009ec0 <malloc>:
 8009ec0:	4b02      	ldr	r3, [pc, #8]	@ (8009ecc <malloc+0xc>)
 8009ec2:	4601      	mov	r1, r0
 8009ec4:	6818      	ldr	r0, [r3, #0]
 8009ec6:	f000 b825 	b.w	8009f14 <_malloc_r>
 8009eca:	bf00      	nop
 8009ecc:	2400001c 	.word	0x2400001c

08009ed0 <sbrk_aligned>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	4e0f      	ldr	r6, [pc, #60]	@ (8009f10 <sbrk_aligned+0x40>)
 8009ed4:	460c      	mov	r4, r1
 8009ed6:	6831      	ldr	r1, [r6, #0]
 8009ed8:	4605      	mov	r5, r0
 8009eda:	b911      	cbnz	r1, 8009ee2 <sbrk_aligned+0x12>
 8009edc:	f000 fada 	bl	800a494 <_sbrk_r>
 8009ee0:	6030      	str	r0, [r6, #0]
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	f000 fad5 	bl	800a494 <_sbrk_r>
 8009eea:	1c43      	adds	r3, r0, #1
 8009eec:	d103      	bne.n	8009ef6 <sbrk_aligned+0x26>
 8009eee:	f04f 34ff 	mov.w	r4, #4294967295
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	bd70      	pop	{r4, r5, r6, pc}
 8009ef6:	1cc4      	adds	r4, r0, #3
 8009ef8:	f024 0403 	bic.w	r4, r4, #3
 8009efc:	42a0      	cmp	r0, r4
 8009efe:	d0f8      	beq.n	8009ef2 <sbrk_aligned+0x22>
 8009f00:	1a21      	subs	r1, r4, r0
 8009f02:	4628      	mov	r0, r5
 8009f04:	f000 fac6 	bl	800a494 <_sbrk_r>
 8009f08:	3001      	adds	r0, #1
 8009f0a:	d1f2      	bne.n	8009ef2 <sbrk_aligned+0x22>
 8009f0c:	e7ef      	b.n	8009eee <sbrk_aligned+0x1e>
 8009f0e:	bf00      	nop
 8009f10:	240002a4 	.word	0x240002a4

08009f14 <_malloc_r>:
 8009f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f18:	1ccd      	adds	r5, r1, #3
 8009f1a:	f025 0503 	bic.w	r5, r5, #3
 8009f1e:	3508      	adds	r5, #8
 8009f20:	2d0c      	cmp	r5, #12
 8009f22:	bf38      	it	cc
 8009f24:	250c      	movcc	r5, #12
 8009f26:	2d00      	cmp	r5, #0
 8009f28:	4606      	mov	r6, r0
 8009f2a:	db01      	blt.n	8009f30 <_malloc_r+0x1c>
 8009f2c:	42a9      	cmp	r1, r5
 8009f2e:	d904      	bls.n	8009f3a <_malloc_r+0x26>
 8009f30:	230c      	movs	r3, #12
 8009f32:	6033      	str	r3, [r6, #0]
 8009f34:	2000      	movs	r0, #0
 8009f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a010 <_malloc_r+0xfc>
 8009f3e:	f000 f869 	bl	800a014 <__malloc_lock>
 8009f42:	f8d8 3000 	ldr.w	r3, [r8]
 8009f46:	461c      	mov	r4, r3
 8009f48:	bb44      	cbnz	r4, 8009f9c <_malloc_r+0x88>
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f7ff ffbf 	bl	8009ed0 <sbrk_aligned>
 8009f52:	1c43      	adds	r3, r0, #1
 8009f54:	4604      	mov	r4, r0
 8009f56:	d158      	bne.n	800a00a <_malloc_r+0xf6>
 8009f58:	f8d8 4000 	ldr.w	r4, [r8]
 8009f5c:	4627      	mov	r7, r4
 8009f5e:	2f00      	cmp	r7, #0
 8009f60:	d143      	bne.n	8009fea <_malloc_r+0xd6>
 8009f62:	2c00      	cmp	r4, #0
 8009f64:	d04b      	beq.n	8009ffe <_malloc_r+0xea>
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	4639      	mov	r1, r7
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	eb04 0903 	add.w	r9, r4, r3
 8009f70:	f000 fa90 	bl	800a494 <_sbrk_r>
 8009f74:	4581      	cmp	r9, r0
 8009f76:	d142      	bne.n	8009ffe <_malloc_r+0xea>
 8009f78:	6821      	ldr	r1, [r4, #0]
 8009f7a:	1a6d      	subs	r5, r5, r1
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f7ff ffa6 	bl	8009ed0 <sbrk_aligned>
 8009f84:	3001      	adds	r0, #1
 8009f86:	d03a      	beq.n	8009ffe <_malloc_r+0xea>
 8009f88:	6823      	ldr	r3, [r4, #0]
 8009f8a:	442b      	add	r3, r5
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f92:	685a      	ldr	r2, [r3, #4]
 8009f94:	bb62      	cbnz	r2, 8009ff0 <_malloc_r+0xdc>
 8009f96:	f8c8 7000 	str.w	r7, [r8]
 8009f9a:	e00f      	b.n	8009fbc <_malloc_r+0xa8>
 8009f9c:	6822      	ldr	r2, [r4, #0]
 8009f9e:	1b52      	subs	r2, r2, r5
 8009fa0:	d420      	bmi.n	8009fe4 <_malloc_r+0xd0>
 8009fa2:	2a0b      	cmp	r2, #11
 8009fa4:	d917      	bls.n	8009fd6 <_malloc_r+0xc2>
 8009fa6:	1961      	adds	r1, r4, r5
 8009fa8:	42a3      	cmp	r3, r4
 8009faa:	6025      	str	r5, [r4, #0]
 8009fac:	bf18      	it	ne
 8009fae:	6059      	strne	r1, [r3, #4]
 8009fb0:	6863      	ldr	r3, [r4, #4]
 8009fb2:	bf08      	it	eq
 8009fb4:	f8c8 1000 	streq.w	r1, [r8]
 8009fb8:	5162      	str	r2, [r4, r5]
 8009fba:	604b      	str	r3, [r1, #4]
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	f000 f82f 	bl	800a020 <__malloc_unlock>
 8009fc2:	f104 000b 	add.w	r0, r4, #11
 8009fc6:	1d23      	adds	r3, r4, #4
 8009fc8:	f020 0007 	bic.w	r0, r0, #7
 8009fcc:	1ac2      	subs	r2, r0, r3
 8009fce:	bf1c      	itt	ne
 8009fd0:	1a1b      	subne	r3, r3, r0
 8009fd2:	50a3      	strne	r3, [r4, r2]
 8009fd4:	e7af      	b.n	8009f36 <_malloc_r+0x22>
 8009fd6:	6862      	ldr	r2, [r4, #4]
 8009fd8:	42a3      	cmp	r3, r4
 8009fda:	bf0c      	ite	eq
 8009fdc:	f8c8 2000 	streq.w	r2, [r8]
 8009fe0:	605a      	strne	r2, [r3, #4]
 8009fe2:	e7eb      	b.n	8009fbc <_malloc_r+0xa8>
 8009fe4:	4623      	mov	r3, r4
 8009fe6:	6864      	ldr	r4, [r4, #4]
 8009fe8:	e7ae      	b.n	8009f48 <_malloc_r+0x34>
 8009fea:	463c      	mov	r4, r7
 8009fec:	687f      	ldr	r7, [r7, #4]
 8009fee:	e7b6      	b.n	8009f5e <_malloc_r+0x4a>
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	42a3      	cmp	r3, r4
 8009ff6:	d1fb      	bne.n	8009ff0 <_malloc_r+0xdc>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	6053      	str	r3, [r2, #4]
 8009ffc:	e7de      	b.n	8009fbc <_malloc_r+0xa8>
 8009ffe:	230c      	movs	r3, #12
 800a000:	6033      	str	r3, [r6, #0]
 800a002:	4630      	mov	r0, r6
 800a004:	f000 f80c 	bl	800a020 <__malloc_unlock>
 800a008:	e794      	b.n	8009f34 <_malloc_r+0x20>
 800a00a:	6005      	str	r5, [r0, #0]
 800a00c:	e7d6      	b.n	8009fbc <_malloc_r+0xa8>
 800a00e:	bf00      	nop
 800a010:	240002a8 	.word	0x240002a8

0800a014 <__malloc_lock>:
 800a014:	4801      	ldr	r0, [pc, #4]	@ (800a01c <__malloc_lock+0x8>)
 800a016:	f000 ba8a 	b.w	800a52e <__retarget_lock_acquire_recursive>
 800a01a:	bf00      	nop
 800a01c:	240003ec 	.word	0x240003ec

0800a020 <__malloc_unlock>:
 800a020:	4801      	ldr	r0, [pc, #4]	@ (800a028 <__malloc_unlock+0x8>)
 800a022:	f000 ba85 	b.w	800a530 <__retarget_lock_release_recursive>
 800a026:	bf00      	nop
 800a028:	240003ec 	.word	0x240003ec

0800a02c <std>:
 800a02c:	2300      	movs	r3, #0
 800a02e:	b510      	push	{r4, lr}
 800a030:	4604      	mov	r4, r0
 800a032:	e9c0 3300 	strd	r3, r3, [r0]
 800a036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a03a:	6083      	str	r3, [r0, #8]
 800a03c:	8181      	strh	r1, [r0, #12]
 800a03e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a040:	81c2      	strh	r2, [r0, #14]
 800a042:	6183      	str	r3, [r0, #24]
 800a044:	4619      	mov	r1, r3
 800a046:	2208      	movs	r2, #8
 800a048:	305c      	adds	r0, #92	@ 0x5c
 800a04a:	f000 f9e7 	bl	800a41c <memset>
 800a04e:	4b0d      	ldr	r3, [pc, #52]	@ (800a084 <std+0x58>)
 800a050:	6263      	str	r3, [r4, #36]	@ 0x24
 800a052:	4b0d      	ldr	r3, [pc, #52]	@ (800a088 <std+0x5c>)
 800a054:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a056:	4b0d      	ldr	r3, [pc, #52]	@ (800a08c <std+0x60>)
 800a058:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a05a:	4b0d      	ldr	r3, [pc, #52]	@ (800a090 <std+0x64>)
 800a05c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a05e:	4b0d      	ldr	r3, [pc, #52]	@ (800a094 <std+0x68>)
 800a060:	6224      	str	r4, [r4, #32]
 800a062:	429c      	cmp	r4, r3
 800a064:	d006      	beq.n	800a074 <std+0x48>
 800a066:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a06a:	4294      	cmp	r4, r2
 800a06c:	d002      	beq.n	800a074 <std+0x48>
 800a06e:	33d0      	adds	r3, #208	@ 0xd0
 800a070:	429c      	cmp	r4, r3
 800a072:	d105      	bne.n	800a080 <std+0x54>
 800a074:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a07c:	f000 ba56 	b.w	800a52c <__retarget_lock_init_recursive>
 800a080:	bd10      	pop	{r4, pc}
 800a082:	bf00      	nop
 800a084:	0800a26d 	.word	0x0800a26d
 800a088:	0800a28f 	.word	0x0800a28f
 800a08c:	0800a2c7 	.word	0x0800a2c7
 800a090:	0800a2eb 	.word	0x0800a2eb
 800a094:	240002ac 	.word	0x240002ac

0800a098 <stdio_exit_handler>:
 800a098:	4a02      	ldr	r2, [pc, #8]	@ (800a0a4 <stdio_exit_handler+0xc>)
 800a09a:	4903      	ldr	r1, [pc, #12]	@ (800a0a8 <stdio_exit_handler+0x10>)
 800a09c:	4803      	ldr	r0, [pc, #12]	@ (800a0ac <stdio_exit_handler+0x14>)
 800a09e:	f000 b869 	b.w	800a174 <_fwalk_sglue>
 800a0a2:	bf00      	nop
 800a0a4:	24000010 	.word	0x24000010
 800a0a8:	0800a6ed 	.word	0x0800a6ed
 800a0ac:	24000020 	.word	0x24000020

0800a0b0 <cleanup_stdio>:
 800a0b0:	6841      	ldr	r1, [r0, #4]
 800a0b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a0e4 <cleanup_stdio+0x34>)
 800a0b4:	4299      	cmp	r1, r3
 800a0b6:	b510      	push	{r4, lr}
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	d001      	beq.n	800a0c0 <cleanup_stdio+0x10>
 800a0bc:	f000 fb16 	bl	800a6ec <_fflush_r>
 800a0c0:	68a1      	ldr	r1, [r4, #8]
 800a0c2:	4b09      	ldr	r3, [pc, #36]	@ (800a0e8 <cleanup_stdio+0x38>)
 800a0c4:	4299      	cmp	r1, r3
 800a0c6:	d002      	beq.n	800a0ce <cleanup_stdio+0x1e>
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f000 fb0f 	bl	800a6ec <_fflush_r>
 800a0ce:	68e1      	ldr	r1, [r4, #12]
 800a0d0:	4b06      	ldr	r3, [pc, #24]	@ (800a0ec <cleanup_stdio+0x3c>)
 800a0d2:	4299      	cmp	r1, r3
 800a0d4:	d004      	beq.n	800a0e0 <cleanup_stdio+0x30>
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0dc:	f000 bb06 	b.w	800a6ec <_fflush_r>
 800a0e0:	bd10      	pop	{r4, pc}
 800a0e2:	bf00      	nop
 800a0e4:	240002ac 	.word	0x240002ac
 800a0e8:	24000314 	.word	0x24000314
 800a0ec:	2400037c 	.word	0x2400037c

0800a0f0 <global_stdio_init.part.0>:
 800a0f0:	b510      	push	{r4, lr}
 800a0f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a120 <global_stdio_init.part.0+0x30>)
 800a0f4:	4c0b      	ldr	r4, [pc, #44]	@ (800a124 <global_stdio_init.part.0+0x34>)
 800a0f6:	4a0c      	ldr	r2, [pc, #48]	@ (800a128 <global_stdio_init.part.0+0x38>)
 800a0f8:	601a      	str	r2, [r3, #0]
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2104      	movs	r1, #4
 800a100:	f7ff ff94 	bl	800a02c <std>
 800a104:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a108:	2201      	movs	r2, #1
 800a10a:	2109      	movs	r1, #9
 800a10c:	f7ff ff8e 	bl	800a02c <std>
 800a110:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a114:	2202      	movs	r2, #2
 800a116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a11a:	2112      	movs	r1, #18
 800a11c:	f7ff bf86 	b.w	800a02c <std>
 800a120:	240003e4 	.word	0x240003e4
 800a124:	240002ac 	.word	0x240002ac
 800a128:	0800a099 	.word	0x0800a099

0800a12c <__sfp_lock_acquire>:
 800a12c:	4801      	ldr	r0, [pc, #4]	@ (800a134 <__sfp_lock_acquire+0x8>)
 800a12e:	f000 b9fe 	b.w	800a52e <__retarget_lock_acquire_recursive>
 800a132:	bf00      	nop
 800a134:	240003ed 	.word	0x240003ed

0800a138 <__sfp_lock_release>:
 800a138:	4801      	ldr	r0, [pc, #4]	@ (800a140 <__sfp_lock_release+0x8>)
 800a13a:	f000 b9f9 	b.w	800a530 <__retarget_lock_release_recursive>
 800a13e:	bf00      	nop
 800a140:	240003ed 	.word	0x240003ed

0800a144 <__sinit>:
 800a144:	b510      	push	{r4, lr}
 800a146:	4604      	mov	r4, r0
 800a148:	f7ff fff0 	bl	800a12c <__sfp_lock_acquire>
 800a14c:	6a23      	ldr	r3, [r4, #32]
 800a14e:	b11b      	cbz	r3, 800a158 <__sinit+0x14>
 800a150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a154:	f7ff bff0 	b.w	800a138 <__sfp_lock_release>
 800a158:	4b04      	ldr	r3, [pc, #16]	@ (800a16c <__sinit+0x28>)
 800a15a:	6223      	str	r3, [r4, #32]
 800a15c:	4b04      	ldr	r3, [pc, #16]	@ (800a170 <__sinit+0x2c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1f5      	bne.n	800a150 <__sinit+0xc>
 800a164:	f7ff ffc4 	bl	800a0f0 <global_stdio_init.part.0>
 800a168:	e7f2      	b.n	800a150 <__sinit+0xc>
 800a16a:	bf00      	nop
 800a16c:	0800a0b1 	.word	0x0800a0b1
 800a170:	240003e4 	.word	0x240003e4

0800a174 <_fwalk_sglue>:
 800a174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a178:	4607      	mov	r7, r0
 800a17a:	4688      	mov	r8, r1
 800a17c:	4614      	mov	r4, r2
 800a17e:	2600      	movs	r6, #0
 800a180:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a184:	f1b9 0901 	subs.w	r9, r9, #1
 800a188:	d505      	bpl.n	800a196 <_fwalk_sglue+0x22>
 800a18a:	6824      	ldr	r4, [r4, #0]
 800a18c:	2c00      	cmp	r4, #0
 800a18e:	d1f7      	bne.n	800a180 <_fwalk_sglue+0xc>
 800a190:	4630      	mov	r0, r6
 800a192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a196:	89ab      	ldrh	r3, [r5, #12]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d907      	bls.n	800a1ac <_fwalk_sglue+0x38>
 800a19c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	d003      	beq.n	800a1ac <_fwalk_sglue+0x38>
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	47c0      	blx	r8
 800a1aa:	4306      	orrs	r6, r0
 800a1ac:	3568      	adds	r5, #104	@ 0x68
 800a1ae:	e7e9      	b.n	800a184 <_fwalk_sglue+0x10>

0800a1b0 <_puts_r>:
 800a1b0:	6a03      	ldr	r3, [r0, #32]
 800a1b2:	b570      	push	{r4, r5, r6, lr}
 800a1b4:	6884      	ldr	r4, [r0, #8]
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	460e      	mov	r6, r1
 800a1ba:	b90b      	cbnz	r3, 800a1c0 <_puts_r+0x10>
 800a1bc:	f7ff ffc2 	bl	800a144 <__sinit>
 800a1c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1c2:	07db      	lsls	r3, r3, #31
 800a1c4:	d405      	bmi.n	800a1d2 <_puts_r+0x22>
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	0598      	lsls	r0, r3, #22
 800a1ca:	d402      	bmi.n	800a1d2 <_puts_r+0x22>
 800a1cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1ce:	f000 f9ae 	bl	800a52e <__retarget_lock_acquire_recursive>
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	0719      	lsls	r1, r3, #28
 800a1d6:	d502      	bpl.n	800a1de <_puts_r+0x2e>
 800a1d8:	6923      	ldr	r3, [r4, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d135      	bne.n	800a24a <_puts_r+0x9a>
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f000 f8c5 	bl	800a370 <__swsetup_r>
 800a1e6:	b380      	cbz	r0, 800a24a <_puts_r+0x9a>
 800a1e8:	f04f 35ff 	mov.w	r5, #4294967295
 800a1ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1ee:	07da      	lsls	r2, r3, #31
 800a1f0:	d405      	bmi.n	800a1fe <_puts_r+0x4e>
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	059b      	lsls	r3, r3, #22
 800a1f6:	d402      	bmi.n	800a1fe <_puts_r+0x4e>
 800a1f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1fa:	f000 f999 	bl	800a530 <__retarget_lock_release_recursive>
 800a1fe:	4628      	mov	r0, r5
 800a200:	bd70      	pop	{r4, r5, r6, pc}
 800a202:	2b00      	cmp	r3, #0
 800a204:	da04      	bge.n	800a210 <_puts_r+0x60>
 800a206:	69a2      	ldr	r2, [r4, #24]
 800a208:	429a      	cmp	r2, r3
 800a20a:	dc17      	bgt.n	800a23c <_puts_r+0x8c>
 800a20c:	290a      	cmp	r1, #10
 800a20e:	d015      	beq.n	800a23c <_puts_r+0x8c>
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	1c5a      	adds	r2, r3, #1
 800a214:	6022      	str	r2, [r4, #0]
 800a216:	7019      	strb	r1, [r3, #0]
 800a218:	68a3      	ldr	r3, [r4, #8]
 800a21a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a21e:	3b01      	subs	r3, #1
 800a220:	60a3      	str	r3, [r4, #8]
 800a222:	2900      	cmp	r1, #0
 800a224:	d1ed      	bne.n	800a202 <_puts_r+0x52>
 800a226:	2b00      	cmp	r3, #0
 800a228:	da11      	bge.n	800a24e <_puts_r+0x9e>
 800a22a:	4622      	mov	r2, r4
 800a22c:	210a      	movs	r1, #10
 800a22e:	4628      	mov	r0, r5
 800a230:	f000 f85f 	bl	800a2f2 <__swbuf_r>
 800a234:	3001      	adds	r0, #1
 800a236:	d0d7      	beq.n	800a1e8 <_puts_r+0x38>
 800a238:	250a      	movs	r5, #10
 800a23a:	e7d7      	b.n	800a1ec <_puts_r+0x3c>
 800a23c:	4622      	mov	r2, r4
 800a23e:	4628      	mov	r0, r5
 800a240:	f000 f857 	bl	800a2f2 <__swbuf_r>
 800a244:	3001      	adds	r0, #1
 800a246:	d1e7      	bne.n	800a218 <_puts_r+0x68>
 800a248:	e7ce      	b.n	800a1e8 <_puts_r+0x38>
 800a24a:	3e01      	subs	r6, #1
 800a24c:	e7e4      	b.n	800a218 <_puts_r+0x68>
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	1c5a      	adds	r2, r3, #1
 800a252:	6022      	str	r2, [r4, #0]
 800a254:	220a      	movs	r2, #10
 800a256:	701a      	strb	r2, [r3, #0]
 800a258:	e7ee      	b.n	800a238 <_puts_r+0x88>
	...

0800a25c <puts>:
 800a25c:	4b02      	ldr	r3, [pc, #8]	@ (800a268 <puts+0xc>)
 800a25e:	4601      	mov	r1, r0
 800a260:	6818      	ldr	r0, [r3, #0]
 800a262:	f7ff bfa5 	b.w	800a1b0 <_puts_r>
 800a266:	bf00      	nop
 800a268:	2400001c 	.word	0x2400001c

0800a26c <__sread>:
 800a26c:	b510      	push	{r4, lr}
 800a26e:	460c      	mov	r4, r1
 800a270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a274:	f000 f8fc 	bl	800a470 <_read_r>
 800a278:	2800      	cmp	r0, #0
 800a27a:	bfab      	itete	ge
 800a27c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a27e:	89a3      	ldrhlt	r3, [r4, #12]
 800a280:	181b      	addge	r3, r3, r0
 800a282:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a286:	bfac      	ite	ge
 800a288:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a28a:	81a3      	strhlt	r3, [r4, #12]
 800a28c:	bd10      	pop	{r4, pc}

0800a28e <__swrite>:
 800a28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a292:	461f      	mov	r7, r3
 800a294:	898b      	ldrh	r3, [r1, #12]
 800a296:	05db      	lsls	r3, r3, #23
 800a298:	4605      	mov	r5, r0
 800a29a:	460c      	mov	r4, r1
 800a29c:	4616      	mov	r6, r2
 800a29e:	d505      	bpl.n	800a2ac <__swrite+0x1e>
 800a2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f000 f8d0 	bl	800a44c <_lseek_r>
 800a2ac:	89a3      	ldrh	r3, [r4, #12]
 800a2ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2b6:	81a3      	strh	r3, [r4, #12]
 800a2b8:	4632      	mov	r2, r6
 800a2ba:	463b      	mov	r3, r7
 800a2bc:	4628      	mov	r0, r5
 800a2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c2:	f000 b8f7 	b.w	800a4b4 <_write_r>

0800a2c6 <__sseek>:
 800a2c6:	b510      	push	{r4, lr}
 800a2c8:	460c      	mov	r4, r1
 800a2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ce:	f000 f8bd 	bl	800a44c <_lseek_r>
 800a2d2:	1c43      	adds	r3, r0, #1
 800a2d4:	89a3      	ldrh	r3, [r4, #12]
 800a2d6:	bf15      	itete	ne
 800a2d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a2da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a2de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a2e2:	81a3      	strheq	r3, [r4, #12]
 800a2e4:	bf18      	it	ne
 800a2e6:	81a3      	strhne	r3, [r4, #12]
 800a2e8:	bd10      	pop	{r4, pc}

0800a2ea <__sclose>:
 800a2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ee:	f000 b89d 	b.w	800a42c <_close_r>

0800a2f2 <__swbuf_r>:
 800a2f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f4:	460e      	mov	r6, r1
 800a2f6:	4614      	mov	r4, r2
 800a2f8:	4605      	mov	r5, r0
 800a2fa:	b118      	cbz	r0, 800a304 <__swbuf_r+0x12>
 800a2fc:	6a03      	ldr	r3, [r0, #32]
 800a2fe:	b90b      	cbnz	r3, 800a304 <__swbuf_r+0x12>
 800a300:	f7ff ff20 	bl	800a144 <__sinit>
 800a304:	69a3      	ldr	r3, [r4, #24]
 800a306:	60a3      	str	r3, [r4, #8]
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	071a      	lsls	r2, r3, #28
 800a30c:	d501      	bpl.n	800a312 <__swbuf_r+0x20>
 800a30e:	6923      	ldr	r3, [r4, #16]
 800a310:	b943      	cbnz	r3, 800a324 <__swbuf_r+0x32>
 800a312:	4621      	mov	r1, r4
 800a314:	4628      	mov	r0, r5
 800a316:	f000 f82b 	bl	800a370 <__swsetup_r>
 800a31a:	b118      	cbz	r0, 800a324 <__swbuf_r+0x32>
 800a31c:	f04f 37ff 	mov.w	r7, #4294967295
 800a320:	4638      	mov	r0, r7
 800a322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a324:	6823      	ldr	r3, [r4, #0]
 800a326:	6922      	ldr	r2, [r4, #16]
 800a328:	1a98      	subs	r0, r3, r2
 800a32a:	6963      	ldr	r3, [r4, #20]
 800a32c:	b2f6      	uxtb	r6, r6
 800a32e:	4283      	cmp	r3, r0
 800a330:	4637      	mov	r7, r6
 800a332:	dc05      	bgt.n	800a340 <__swbuf_r+0x4e>
 800a334:	4621      	mov	r1, r4
 800a336:	4628      	mov	r0, r5
 800a338:	f000 f9d8 	bl	800a6ec <_fflush_r>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	d1ed      	bne.n	800a31c <__swbuf_r+0x2a>
 800a340:	68a3      	ldr	r3, [r4, #8]
 800a342:	3b01      	subs	r3, #1
 800a344:	60a3      	str	r3, [r4, #8]
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	6022      	str	r2, [r4, #0]
 800a34c:	701e      	strb	r6, [r3, #0]
 800a34e:	6962      	ldr	r2, [r4, #20]
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	429a      	cmp	r2, r3
 800a354:	d004      	beq.n	800a360 <__swbuf_r+0x6e>
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	07db      	lsls	r3, r3, #31
 800a35a:	d5e1      	bpl.n	800a320 <__swbuf_r+0x2e>
 800a35c:	2e0a      	cmp	r6, #10
 800a35e:	d1df      	bne.n	800a320 <__swbuf_r+0x2e>
 800a360:	4621      	mov	r1, r4
 800a362:	4628      	mov	r0, r5
 800a364:	f000 f9c2 	bl	800a6ec <_fflush_r>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d0d9      	beq.n	800a320 <__swbuf_r+0x2e>
 800a36c:	e7d6      	b.n	800a31c <__swbuf_r+0x2a>
	...

0800a370 <__swsetup_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4b29      	ldr	r3, [pc, #164]	@ (800a418 <__swsetup_r+0xa8>)
 800a374:	4605      	mov	r5, r0
 800a376:	6818      	ldr	r0, [r3, #0]
 800a378:	460c      	mov	r4, r1
 800a37a:	b118      	cbz	r0, 800a384 <__swsetup_r+0x14>
 800a37c:	6a03      	ldr	r3, [r0, #32]
 800a37e:	b90b      	cbnz	r3, 800a384 <__swsetup_r+0x14>
 800a380:	f7ff fee0 	bl	800a144 <__sinit>
 800a384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a388:	0719      	lsls	r1, r3, #28
 800a38a:	d422      	bmi.n	800a3d2 <__swsetup_r+0x62>
 800a38c:	06da      	lsls	r2, r3, #27
 800a38e:	d407      	bmi.n	800a3a0 <__swsetup_r+0x30>
 800a390:	2209      	movs	r2, #9
 800a392:	602a      	str	r2, [r5, #0]
 800a394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a398:	81a3      	strh	r3, [r4, #12]
 800a39a:	f04f 30ff 	mov.w	r0, #4294967295
 800a39e:	e033      	b.n	800a408 <__swsetup_r+0x98>
 800a3a0:	0758      	lsls	r0, r3, #29
 800a3a2:	d512      	bpl.n	800a3ca <__swsetup_r+0x5a>
 800a3a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3a6:	b141      	cbz	r1, 800a3ba <__swsetup_r+0x4a>
 800a3a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3ac:	4299      	cmp	r1, r3
 800a3ae:	d002      	beq.n	800a3b6 <__swsetup_r+0x46>
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	f000 f8cd 	bl	800a550 <_free_r>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a3c0:	81a3      	strh	r3, [r4, #12]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	6063      	str	r3, [r4, #4]
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	f043 0308 	orr.w	r3, r3, #8
 800a3d0:	81a3      	strh	r3, [r4, #12]
 800a3d2:	6923      	ldr	r3, [r4, #16]
 800a3d4:	b94b      	cbnz	r3, 800a3ea <__swsetup_r+0x7a>
 800a3d6:	89a3      	ldrh	r3, [r4, #12]
 800a3d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a3dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3e0:	d003      	beq.n	800a3ea <__swsetup_r+0x7a>
 800a3e2:	4621      	mov	r1, r4
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	f000 f9cf 	bl	800a788 <__smakebuf_r>
 800a3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ee:	f013 0201 	ands.w	r2, r3, #1
 800a3f2:	d00a      	beq.n	800a40a <__swsetup_r+0x9a>
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	60a2      	str	r2, [r4, #8]
 800a3f8:	6962      	ldr	r2, [r4, #20]
 800a3fa:	4252      	negs	r2, r2
 800a3fc:	61a2      	str	r2, [r4, #24]
 800a3fe:	6922      	ldr	r2, [r4, #16]
 800a400:	b942      	cbnz	r2, 800a414 <__swsetup_r+0xa4>
 800a402:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a406:	d1c5      	bne.n	800a394 <__swsetup_r+0x24>
 800a408:	bd38      	pop	{r3, r4, r5, pc}
 800a40a:	0799      	lsls	r1, r3, #30
 800a40c:	bf58      	it	pl
 800a40e:	6962      	ldrpl	r2, [r4, #20]
 800a410:	60a2      	str	r2, [r4, #8]
 800a412:	e7f4      	b.n	800a3fe <__swsetup_r+0x8e>
 800a414:	2000      	movs	r0, #0
 800a416:	e7f7      	b.n	800a408 <__swsetup_r+0x98>
 800a418:	2400001c 	.word	0x2400001c

0800a41c <memset>:
 800a41c:	4402      	add	r2, r0
 800a41e:	4603      	mov	r3, r0
 800a420:	4293      	cmp	r3, r2
 800a422:	d100      	bne.n	800a426 <memset+0xa>
 800a424:	4770      	bx	lr
 800a426:	f803 1b01 	strb.w	r1, [r3], #1
 800a42a:	e7f9      	b.n	800a420 <memset+0x4>

0800a42c <_close_r>:
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	4d06      	ldr	r5, [pc, #24]	@ (800a448 <_close_r+0x1c>)
 800a430:	2300      	movs	r3, #0
 800a432:	4604      	mov	r4, r0
 800a434:	4608      	mov	r0, r1
 800a436:	602b      	str	r3, [r5, #0]
 800a438:	f7f7 fae7 	bl	8001a0a <_close>
 800a43c:	1c43      	adds	r3, r0, #1
 800a43e:	d102      	bne.n	800a446 <_close_r+0x1a>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	b103      	cbz	r3, 800a446 <_close_r+0x1a>
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	bd38      	pop	{r3, r4, r5, pc}
 800a448:	240003e8 	.word	0x240003e8

0800a44c <_lseek_r>:
 800a44c:	b538      	push	{r3, r4, r5, lr}
 800a44e:	4d07      	ldr	r5, [pc, #28]	@ (800a46c <_lseek_r+0x20>)
 800a450:	4604      	mov	r4, r0
 800a452:	4608      	mov	r0, r1
 800a454:	4611      	mov	r1, r2
 800a456:	2200      	movs	r2, #0
 800a458:	602a      	str	r2, [r5, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	f7f7 fafc 	bl	8001a58 <_lseek>
 800a460:	1c43      	adds	r3, r0, #1
 800a462:	d102      	bne.n	800a46a <_lseek_r+0x1e>
 800a464:	682b      	ldr	r3, [r5, #0]
 800a466:	b103      	cbz	r3, 800a46a <_lseek_r+0x1e>
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	bd38      	pop	{r3, r4, r5, pc}
 800a46c:	240003e8 	.word	0x240003e8

0800a470 <_read_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	4d07      	ldr	r5, [pc, #28]	@ (800a490 <_read_r+0x20>)
 800a474:	4604      	mov	r4, r0
 800a476:	4608      	mov	r0, r1
 800a478:	4611      	mov	r1, r2
 800a47a:	2200      	movs	r2, #0
 800a47c:	602a      	str	r2, [r5, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	f7f7 fa8a 	bl	8001998 <_read>
 800a484:	1c43      	adds	r3, r0, #1
 800a486:	d102      	bne.n	800a48e <_read_r+0x1e>
 800a488:	682b      	ldr	r3, [r5, #0]
 800a48a:	b103      	cbz	r3, 800a48e <_read_r+0x1e>
 800a48c:	6023      	str	r3, [r4, #0]
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
 800a490:	240003e8 	.word	0x240003e8

0800a494 <_sbrk_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4d06      	ldr	r5, [pc, #24]	@ (800a4b0 <_sbrk_r+0x1c>)
 800a498:	2300      	movs	r3, #0
 800a49a:	4604      	mov	r4, r0
 800a49c:	4608      	mov	r0, r1
 800a49e:	602b      	str	r3, [r5, #0]
 800a4a0:	f7f7 fae8 	bl	8001a74 <_sbrk>
 800a4a4:	1c43      	adds	r3, r0, #1
 800a4a6:	d102      	bne.n	800a4ae <_sbrk_r+0x1a>
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	b103      	cbz	r3, 800a4ae <_sbrk_r+0x1a>
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	bd38      	pop	{r3, r4, r5, pc}
 800a4b0:	240003e8 	.word	0x240003e8

0800a4b4 <_write_r>:
 800a4b4:	b538      	push	{r3, r4, r5, lr}
 800a4b6:	4d07      	ldr	r5, [pc, #28]	@ (800a4d4 <_write_r+0x20>)
 800a4b8:	4604      	mov	r4, r0
 800a4ba:	4608      	mov	r0, r1
 800a4bc:	4611      	mov	r1, r2
 800a4be:	2200      	movs	r2, #0
 800a4c0:	602a      	str	r2, [r5, #0]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	f7f7 fa85 	bl	80019d2 <_write>
 800a4c8:	1c43      	adds	r3, r0, #1
 800a4ca:	d102      	bne.n	800a4d2 <_write_r+0x1e>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	b103      	cbz	r3, 800a4d2 <_write_r+0x1e>
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}
 800a4d4:	240003e8 	.word	0x240003e8

0800a4d8 <__errno>:
 800a4d8:	4b01      	ldr	r3, [pc, #4]	@ (800a4e0 <__errno+0x8>)
 800a4da:	6818      	ldr	r0, [r3, #0]
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	2400001c 	.word	0x2400001c

0800a4e4 <__libc_init_array>:
 800a4e4:	b570      	push	{r4, r5, r6, lr}
 800a4e6:	4d0d      	ldr	r5, [pc, #52]	@ (800a51c <__libc_init_array+0x38>)
 800a4e8:	4c0d      	ldr	r4, [pc, #52]	@ (800a520 <__libc_init_array+0x3c>)
 800a4ea:	1b64      	subs	r4, r4, r5
 800a4ec:	10a4      	asrs	r4, r4, #2
 800a4ee:	2600      	movs	r6, #0
 800a4f0:	42a6      	cmp	r6, r4
 800a4f2:	d109      	bne.n	800a508 <__libc_init_array+0x24>
 800a4f4:	4d0b      	ldr	r5, [pc, #44]	@ (800a524 <__libc_init_array+0x40>)
 800a4f6:	4c0c      	ldr	r4, [pc, #48]	@ (800a528 <__libc_init_array+0x44>)
 800a4f8:	f000 f9a4 	bl	800a844 <_init>
 800a4fc:	1b64      	subs	r4, r4, r5
 800a4fe:	10a4      	asrs	r4, r4, #2
 800a500:	2600      	movs	r6, #0
 800a502:	42a6      	cmp	r6, r4
 800a504:	d105      	bne.n	800a512 <__libc_init_array+0x2e>
 800a506:	bd70      	pop	{r4, r5, r6, pc}
 800a508:	f855 3b04 	ldr.w	r3, [r5], #4
 800a50c:	4798      	blx	r3
 800a50e:	3601      	adds	r6, #1
 800a510:	e7ee      	b.n	800a4f0 <__libc_init_array+0xc>
 800a512:	f855 3b04 	ldr.w	r3, [r5], #4
 800a516:	4798      	blx	r3
 800a518:	3601      	adds	r6, #1
 800a51a:	e7f2      	b.n	800a502 <__libc_init_array+0x1e>
 800a51c:	0804d4e8 	.word	0x0804d4e8
 800a520:	0804d4e8 	.word	0x0804d4e8
 800a524:	0804d4e8 	.word	0x0804d4e8
 800a528:	0804d4ec 	.word	0x0804d4ec

0800a52c <__retarget_lock_init_recursive>:
 800a52c:	4770      	bx	lr

0800a52e <__retarget_lock_acquire_recursive>:
 800a52e:	4770      	bx	lr

0800a530 <__retarget_lock_release_recursive>:
 800a530:	4770      	bx	lr

0800a532 <memcpy>:
 800a532:	440a      	add	r2, r1
 800a534:	4291      	cmp	r1, r2
 800a536:	f100 33ff 	add.w	r3, r0, #4294967295
 800a53a:	d100      	bne.n	800a53e <memcpy+0xc>
 800a53c:	4770      	bx	lr
 800a53e:	b510      	push	{r4, lr}
 800a540:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a544:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a548:	4291      	cmp	r1, r2
 800a54a:	d1f9      	bne.n	800a540 <memcpy+0xe>
 800a54c:	bd10      	pop	{r4, pc}
	...

0800a550 <_free_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4605      	mov	r5, r0
 800a554:	2900      	cmp	r1, #0
 800a556:	d041      	beq.n	800a5dc <_free_r+0x8c>
 800a558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a55c:	1f0c      	subs	r4, r1, #4
 800a55e:	2b00      	cmp	r3, #0
 800a560:	bfb8      	it	lt
 800a562:	18e4      	addlt	r4, r4, r3
 800a564:	f7ff fd56 	bl	800a014 <__malloc_lock>
 800a568:	4a1d      	ldr	r2, [pc, #116]	@ (800a5e0 <_free_r+0x90>)
 800a56a:	6813      	ldr	r3, [r2, #0]
 800a56c:	b933      	cbnz	r3, 800a57c <_free_r+0x2c>
 800a56e:	6063      	str	r3, [r4, #4]
 800a570:	6014      	str	r4, [r2, #0]
 800a572:	4628      	mov	r0, r5
 800a574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a578:	f7ff bd52 	b.w	800a020 <__malloc_unlock>
 800a57c:	42a3      	cmp	r3, r4
 800a57e:	d908      	bls.n	800a592 <_free_r+0x42>
 800a580:	6820      	ldr	r0, [r4, #0]
 800a582:	1821      	adds	r1, r4, r0
 800a584:	428b      	cmp	r3, r1
 800a586:	bf01      	itttt	eq
 800a588:	6819      	ldreq	r1, [r3, #0]
 800a58a:	685b      	ldreq	r3, [r3, #4]
 800a58c:	1809      	addeq	r1, r1, r0
 800a58e:	6021      	streq	r1, [r4, #0]
 800a590:	e7ed      	b.n	800a56e <_free_r+0x1e>
 800a592:	461a      	mov	r2, r3
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	b10b      	cbz	r3, 800a59c <_free_r+0x4c>
 800a598:	42a3      	cmp	r3, r4
 800a59a:	d9fa      	bls.n	800a592 <_free_r+0x42>
 800a59c:	6811      	ldr	r1, [r2, #0]
 800a59e:	1850      	adds	r0, r2, r1
 800a5a0:	42a0      	cmp	r0, r4
 800a5a2:	d10b      	bne.n	800a5bc <_free_r+0x6c>
 800a5a4:	6820      	ldr	r0, [r4, #0]
 800a5a6:	4401      	add	r1, r0
 800a5a8:	1850      	adds	r0, r2, r1
 800a5aa:	4283      	cmp	r3, r0
 800a5ac:	6011      	str	r1, [r2, #0]
 800a5ae:	d1e0      	bne.n	800a572 <_free_r+0x22>
 800a5b0:	6818      	ldr	r0, [r3, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	6053      	str	r3, [r2, #4]
 800a5b6:	4408      	add	r0, r1
 800a5b8:	6010      	str	r0, [r2, #0]
 800a5ba:	e7da      	b.n	800a572 <_free_r+0x22>
 800a5bc:	d902      	bls.n	800a5c4 <_free_r+0x74>
 800a5be:	230c      	movs	r3, #12
 800a5c0:	602b      	str	r3, [r5, #0]
 800a5c2:	e7d6      	b.n	800a572 <_free_r+0x22>
 800a5c4:	6820      	ldr	r0, [r4, #0]
 800a5c6:	1821      	adds	r1, r4, r0
 800a5c8:	428b      	cmp	r3, r1
 800a5ca:	bf04      	itt	eq
 800a5cc:	6819      	ldreq	r1, [r3, #0]
 800a5ce:	685b      	ldreq	r3, [r3, #4]
 800a5d0:	6063      	str	r3, [r4, #4]
 800a5d2:	bf04      	itt	eq
 800a5d4:	1809      	addeq	r1, r1, r0
 800a5d6:	6021      	streq	r1, [r4, #0]
 800a5d8:	6054      	str	r4, [r2, #4]
 800a5da:	e7ca      	b.n	800a572 <_free_r+0x22>
 800a5dc:	bd38      	pop	{r3, r4, r5, pc}
 800a5de:	bf00      	nop
 800a5e0:	240002a8 	.word	0x240002a8

0800a5e4 <__sflush_r>:
 800a5e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ec:	0716      	lsls	r6, r2, #28
 800a5ee:	4605      	mov	r5, r0
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	d454      	bmi.n	800a69e <__sflush_r+0xba>
 800a5f4:	684b      	ldr	r3, [r1, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	dc02      	bgt.n	800a600 <__sflush_r+0x1c>
 800a5fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	dd48      	ble.n	800a692 <__sflush_r+0xae>
 800a600:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a602:	2e00      	cmp	r6, #0
 800a604:	d045      	beq.n	800a692 <__sflush_r+0xae>
 800a606:	2300      	movs	r3, #0
 800a608:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a60c:	682f      	ldr	r7, [r5, #0]
 800a60e:	6a21      	ldr	r1, [r4, #32]
 800a610:	602b      	str	r3, [r5, #0]
 800a612:	d030      	beq.n	800a676 <__sflush_r+0x92>
 800a614:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	0759      	lsls	r1, r3, #29
 800a61a:	d505      	bpl.n	800a628 <__sflush_r+0x44>
 800a61c:	6863      	ldr	r3, [r4, #4]
 800a61e:	1ad2      	subs	r2, r2, r3
 800a620:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a622:	b10b      	cbz	r3, 800a628 <__sflush_r+0x44>
 800a624:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a626:	1ad2      	subs	r2, r2, r3
 800a628:	2300      	movs	r3, #0
 800a62a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a62c:	6a21      	ldr	r1, [r4, #32]
 800a62e:	4628      	mov	r0, r5
 800a630:	47b0      	blx	r6
 800a632:	1c43      	adds	r3, r0, #1
 800a634:	89a3      	ldrh	r3, [r4, #12]
 800a636:	d106      	bne.n	800a646 <__sflush_r+0x62>
 800a638:	6829      	ldr	r1, [r5, #0]
 800a63a:	291d      	cmp	r1, #29
 800a63c:	d82b      	bhi.n	800a696 <__sflush_r+0xb2>
 800a63e:	4a2a      	ldr	r2, [pc, #168]	@ (800a6e8 <__sflush_r+0x104>)
 800a640:	40ca      	lsrs	r2, r1
 800a642:	07d6      	lsls	r6, r2, #31
 800a644:	d527      	bpl.n	800a696 <__sflush_r+0xb2>
 800a646:	2200      	movs	r2, #0
 800a648:	6062      	str	r2, [r4, #4]
 800a64a:	04d9      	lsls	r1, r3, #19
 800a64c:	6922      	ldr	r2, [r4, #16]
 800a64e:	6022      	str	r2, [r4, #0]
 800a650:	d504      	bpl.n	800a65c <__sflush_r+0x78>
 800a652:	1c42      	adds	r2, r0, #1
 800a654:	d101      	bne.n	800a65a <__sflush_r+0x76>
 800a656:	682b      	ldr	r3, [r5, #0]
 800a658:	b903      	cbnz	r3, 800a65c <__sflush_r+0x78>
 800a65a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a65c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a65e:	602f      	str	r7, [r5, #0]
 800a660:	b1b9      	cbz	r1, 800a692 <__sflush_r+0xae>
 800a662:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a666:	4299      	cmp	r1, r3
 800a668:	d002      	beq.n	800a670 <__sflush_r+0x8c>
 800a66a:	4628      	mov	r0, r5
 800a66c:	f7ff ff70 	bl	800a550 <_free_r>
 800a670:	2300      	movs	r3, #0
 800a672:	6363      	str	r3, [r4, #52]	@ 0x34
 800a674:	e00d      	b.n	800a692 <__sflush_r+0xae>
 800a676:	2301      	movs	r3, #1
 800a678:	4628      	mov	r0, r5
 800a67a:	47b0      	blx	r6
 800a67c:	4602      	mov	r2, r0
 800a67e:	1c50      	adds	r0, r2, #1
 800a680:	d1c9      	bne.n	800a616 <__sflush_r+0x32>
 800a682:	682b      	ldr	r3, [r5, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d0c6      	beq.n	800a616 <__sflush_r+0x32>
 800a688:	2b1d      	cmp	r3, #29
 800a68a:	d001      	beq.n	800a690 <__sflush_r+0xac>
 800a68c:	2b16      	cmp	r3, #22
 800a68e:	d11e      	bne.n	800a6ce <__sflush_r+0xea>
 800a690:	602f      	str	r7, [r5, #0]
 800a692:	2000      	movs	r0, #0
 800a694:	e022      	b.n	800a6dc <__sflush_r+0xf8>
 800a696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a69a:	b21b      	sxth	r3, r3
 800a69c:	e01b      	b.n	800a6d6 <__sflush_r+0xf2>
 800a69e:	690f      	ldr	r7, [r1, #16]
 800a6a0:	2f00      	cmp	r7, #0
 800a6a2:	d0f6      	beq.n	800a692 <__sflush_r+0xae>
 800a6a4:	0793      	lsls	r3, r2, #30
 800a6a6:	680e      	ldr	r6, [r1, #0]
 800a6a8:	bf08      	it	eq
 800a6aa:	694b      	ldreq	r3, [r1, #20]
 800a6ac:	600f      	str	r7, [r1, #0]
 800a6ae:	bf18      	it	ne
 800a6b0:	2300      	movne	r3, #0
 800a6b2:	eba6 0807 	sub.w	r8, r6, r7
 800a6b6:	608b      	str	r3, [r1, #8]
 800a6b8:	f1b8 0f00 	cmp.w	r8, #0
 800a6bc:	dde9      	ble.n	800a692 <__sflush_r+0xae>
 800a6be:	6a21      	ldr	r1, [r4, #32]
 800a6c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a6c2:	4643      	mov	r3, r8
 800a6c4:	463a      	mov	r2, r7
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	47b0      	blx	r6
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	dc08      	bgt.n	800a6e0 <__sflush_r+0xfc>
 800a6ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6d6:	81a3      	strh	r3, [r4, #12]
 800a6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e0:	4407      	add	r7, r0
 800a6e2:	eba8 0800 	sub.w	r8, r8, r0
 800a6e6:	e7e7      	b.n	800a6b8 <__sflush_r+0xd4>
 800a6e8:	20400001 	.word	0x20400001

0800a6ec <_fflush_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	690b      	ldr	r3, [r1, #16]
 800a6f0:	4605      	mov	r5, r0
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	b913      	cbnz	r3, 800a6fc <_fflush_r+0x10>
 800a6f6:	2500      	movs	r5, #0
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	bd38      	pop	{r3, r4, r5, pc}
 800a6fc:	b118      	cbz	r0, 800a706 <_fflush_r+0x1a>
 800a6fe:	6a03      	ldr	r3, [r0, #32]
 800a700:	b90b      	cbnz	r3, 800a706 <_fflush_r+0x1a>
 800a702:	f7ff fd1f 	bl	800a144 <__sinit>
 800a706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d0f3      	beq.n	800a6f6 <_fflush_r+0xa>
 800a70e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a710:	07d0      	lsls	r0, r2, #31
 800a712:	d404      	bmi.n	800a71e <_fflush_r+0x32>
 800a714:	0599      	lsls	r1, r3, #22
 800a716:	d402      	bmi.n	800a71e <_fflush_r+0x32>
 800a718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a71a:	f7ff ff08 	bl	800a52e <__retarget_lock_acquire_recursive>
 800a71e:	4628      	mov	r0, r5
 800a720:	4621      	mov	r1, r4
 800a722:	f7ff ff5f 	bl	800a5e4 <__sflush_r>
 800a726:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a728:	07da      	lsls	r2, r3, #31
 800a72a:	4605      	mov	r5, r0
 800a72c:	d4e4      	bmi.n	800a6f8 <_fflush_r+0xc>
 800a72e:	89a3      	ldrh	r3, [r4, #12]
 800a730:	059b      	lsls	r3, r3, #22
 800a732:	d4e1      	bmi.n	800a6f8 <_fflush_r+0xc>
 800a734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a736:	f7ff fefb 	bl	800a530 <__retarget_lock_release_recursive>
 800a73a:	e7dd      	b.n	800a6f8 <_fflush_r+0xc>

0800a73c <__swhatbuf_r>:
 800a73c:	b570      	push	{r4, r5, r6, lr}
 800a73e:	460c      	mov	r4, r1
 800a740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a744:	2900      	cmp	r1, #0
 800a746:	b096      	sub	sp, #88	@ 0x58
 800a748:	4615      	mov	r5, r2
 800a74a:	461e      	mov	r6, r3
 800a74c:	da0d      	bge.n	800a76a <__swhatbuf_r+0x2e>
 800a74e:	89a3      	ldrh	r3, [r4, #12]
 800a750:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a754:	f04f 0100 	mov.w	r1, #0
 800a758:	bf14      	ite	ne
 800a75a:	2340      	movne	r3, #64	@ 0x40
 800a75c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a760:	2000      	movs	r0, #0
 800a762:	6031      	str	r1, [r6, #0]
 800a764:	602b      	str	r3, [r5, #0]
 800a766:	b016      	add	sp, #88	@ 0x58
 800a768:	bd70      	pop	{r4, r5, r6, pc}
 800a76a:	466a      	mov	r2, sp
 800a76c:	f000 f848 	bl	800a800 <_fstat_r>
 800a770:	2800      	cmp	r0, #0
 800a772:	dbec      	blt.n	800a74e <__swhatbuf_r+0x12>
 800a774:	9901      	ldr	r1, [sp, #4]
 800a776:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a77a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a77e:	4259      	negs	r1, r3
 800a780:	4159      	adcs	r1, r3
 800a782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a786:	e7eb      	b.n	800a760 <__swhatbuf_r+0x24>

0800a788 <__smakebuf_r>:
 800a788:	898b      	ldrh	r3, [r1, #12]
 800a78a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a78c:	079d      	lsls	r5, r3, #30
 800a78e:	4606      	mov	r6, r0
 800a790:	460c      	mov	r4, r1
 800a792:	d507      	bpl.n	800a7a4 <__smakebuf_r+0x1c>
 800a794:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	6123      	str	r3, [r4, #16]
 800a79c:	2301      	movs	r3, #1
 800a79e:	6163      	str	r3, [r4, #20]
 800a7a0:	b003      	add	sp, #12
 800a7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7a4:	ab01      	add	r3, sp, #4
 800a7a6:	466a      	mov	r2, sp
 800a7a8:	f7ff ffc8 	bl	800a73c <__swhatbuf_r>
 800a7ac:	9f00      	ldr	r7, [sp, #0]
 800a7ae:	4605      	mov	r5, r0
 800a7b0:	4639      	mov	r1, r7
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f7ff fbae 	bl	8009f14 <_malloc_r>
 800a7b8:	b948      	cbnz	r0, 800a7ce <__smakebuf_r+0x46>
 800a7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7be:	059a      	lsls	r2, r3, #22
 800a7c0:	d4ee      	bmi.n	800a7a0 <__smakebuf_r+0x18>
 800a7c2:	f023 0303 	bic.w	r3, r3, #3
 800a7c6:	f043 0302 	orr.w	r3, r3, #2
 800a7ca:	81a3      	strh	r3, [r4, #12]
 800a7cc:	e7e2      	b.n	800a794 <__smakebuf_r+0xc>
 800a7ce:	89a3      	ldrh	r3, [r4, #12]
 800a7d0:	6020      	str	r0, [r4, #0]
 800a7d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7d6:	81a3      	strh	r3, [r4, #12]
 800a7d8:	9b01      	ldr	r3, [sp, #4]
 800a7da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a7de:	b15b      	cbz	r3, 800a7f8 <__smakebuf_r+0x70>
 800a7e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f000 f81d 	bl	800a824 <_isatty_r>
 800a7ea:	b128      	cbz	r0, 800a7f8 <__smakebuf_r+0x70>
 800a7ec:	89a3      	ldrh	r3, [r4, #12]
 800a7ee:	f023 0303 	bic.w	r3, r3, #3
 800a7f2:	f043 0301 	orr.w	r3, r3, #1
 800a7f6:	81a3      	strh	r3, [r4, #12]
 800a7f8:	89a3      	ldrh	r3, [r4, #12]
 800a7fa:	431d      	orrs	r5, r3
 800a7fc:	81a5      	strh	r5, [r4, #12]
 800a7fe:	e7cf      	b.n	800a7a0 <__smakebuf_r+0x18>

0800a800 <_fstat_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4d07      	ldr	r5, [pc, #28]	@ (800a820 <_fstat_r+0x20>)
 800a804:	2300      	movs	r3, #0
 800a806:	4604      	mov	r4, r0
 800a808:	4608      	mov	r0, r1
 800a80a:	4611      	mov	r1, r2
 800a80c:	602b      	str	r3, [r5, #0]
 800a80e:	f7f7 f908 	bl	8001a22 <_fstat>
 800a812:	1c43      	adds	r3, r0, #1
 800a814:	d102      	bne.n	800a81c <_fstat_r+0x1c>
 800a816:	682b      	ldr	r3, [r5, #0]
 800a818:	b103      	cbz	r3, 800a81c <_fstat_r+0x1c>
 800a81a:	6023      	str	r3, [r4, #0]
 800a81c:	bd38      	pop	{r3, r4, r5, pc}
 800a81e:	bf00      	nop
 800a820:	240003e8 	.word	0x240003e8

0800a824 <_isatty_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	4d06      	ldr	r5, [pc, #24]	@ (800a840 <_isatty_r+0x1c>)
 800a828:	2300      	movs	r3, #0
 800a82a:	4604      	mov	r4, r0
 800a82c:	4608      	mov	r0, r1
 800a82e:	602b      	str	r3, [r5, #0]
 800a830:	f7f7 f907 	bl	8001a42 <_isatty>
 800a834:	1c43      	adds	r3, r0, #1
 800a836:	d102      	bne.n	800a83e <_isatty_r+0x1a>
 800a838:	682b      	ldr	r3, [r5, #0]
 800a83a:	b103      	cbz	r3, 800a83e <_isatty_r+0x1a>
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	bd38      	pop	{r3, r4, r5, pc}
 800a840:	240003e8 	.word	0x240003e8

0800a844 <_init>:
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	bf00      	nop
 800a848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a84a:	bc08      	pop	{r3}
 800a84c:	469e      	mov	lr, r3
 800a84e:	4770      	bx	lr

0800a850 <_fini>:
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a852:	bf00      	nop
 800a854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a856:	bc08      	pop	{r3}
 800a858:	469e      	mov	lr, r3
 800a85a:	4770      	bx	lr
