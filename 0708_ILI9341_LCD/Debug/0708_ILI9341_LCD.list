
0708_ILI9341_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006060  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00041a6c  080062f8  080062f8  000072f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08047d64  08047d64  00048d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08047d6c  08047d6c  00048d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08047d70  08047d70  00048d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08047d74  00049000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000013c  24000010  08047d84  00049010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400014c  08047d84  0004914c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00049010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012d27  00000000  00000000  0004903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026bb  00000000  00000000  0005bd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000cc8  00000000  00000000  0005e420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009c9  00000000  00000000  0005f0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003610d  00000000  00000000  0005fab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000129f7  00000000  00000000  00095bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015b329  00000000  00000000  000a85b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002038de  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000342c  00000000  00000000  00203924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004f  00000000  00000000  00206d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080062e0 	.word	0x080062e0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080062e0 	.word	0x080062e0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <ILI9341_Select>:
		}
		else ILI9341_Unselect();
	}
}

static void ILI9341_Select() {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2140      	movs	r1, #64	@ 0x40
 800060c:	4802      	ldr	r0, [pc, #8]	@ (8000618 <ILI9341_Select+0x14>)
 800060e:	f001 fae3 	bl	8001bd8 <HAL_GPIO_WritePin>
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	58021000 	.word	0x58021000

0800061c <ILI9341_Unselect>:

void ILI9341_Unselect() {
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2140      	movs	r1, #64	@ 0x40
 8000624:	4802      	ldr	r0, [pc, #8]	@ (8000630 <ILI9341_Unselect+0x14>)
 8000626:	f001 fad7 	bl	8001bd8 <HAL_GPIO_WritePin>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	58021000 	.word	0x58021000

08000634 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063e:	4807      	ldr	r0, [pc, #28]	@ (800065c <ILI9341_Reset+0x28>)
 8000640:	f001 faca 	bl	8001bd8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000644:	2005      	movs	r0, #5
 8000646:	f000 ff8b 	bl	8001560 <HAL_Delay>
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000650:	4802      	ldr	r0, [pc, #8]	@ (800065c <ILI9341_Reset+0x28>)
 8000652:	f001 fac1 	bl	8001bd8 <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	58021800 	.word	0x58021800

08000660 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2110      	movs	r1, #16
 800066e:	4807      	ldr	r0, [pc, #28]	@ (800068c <ILI9341_WriteCommand+0x2c>)
 8000670:	f001 fab2 	bl	8001bd8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000674:	1df9      	adds	r1, r7, #7
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	2201      	movs	r2, #1
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <ILI9341_WriteCommand+0x30>)
 800067e:	f004 fa4f 	bl	8004b20 <HAL_SPI_Transmit>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	58020400 	.word	0x58020400
 8000690:	2400002c 	.word	0x2400002c

08000694 <ILI9341_WriteData>:
		chunk_size = img_size > ILI9341_MAX_LENTH ? ILI9341_MAX_LENTH : img_size;
		HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, pImgData, chunk_size);
	}
}

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	4811      	ldr	r0, [pc, #68]	@ (80006e8 <ILI9341_WriteData+0x54>)
 80006a4:	f001 fa98 	bl	8001bd8 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more then 64K at once
	while(buff_size > 0) {
 80006a8:	e015      	b.n	80006d6 <ILI9341_WriteData+0x42>
		uint16_t chunk_size = buff_size > ILI9341_MAX_LENTH ? ILI9341_MAX_LENTH : buff_size;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006b0:	4293      	cmp	r3, r2
 80006b2:	bf28      	it	cs
 80006b4:	4613      	movcs	r3, r2
 80006b6:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80006b8:	89fa      	ldrh	r2, [r7, #14]
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	480a      	ldr	r0, [pc, #40]	@ (80006ec <ILI9341_WriteData+0x58>)
 80006c2:	f004 fa2d 	bl	8004b20 <HAL_SPI_Transmit>
		buff += chunk_size;
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	4413      	add	r3, r2
 80006cc:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	603b      	str	r3, [r7, #0]
	while(buff_size > 0) {
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1e6      	bne.n	80006aa <ILI9341_WriteData+0x16>
	}
}
 80006dc:	bf00      	nop
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	58020400 	.word	0x58020400
 80006ec:	2400002c 	.word	0x2400002c

080006f0 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4604      	mov	r4, r0
 80006f8:	4608      	mov	r0, r1
 80006fa:	4611      	mov	r1, r2
 80006fc:	461a      	mov	r2, r3
 80006fe:	4623      	mov	r3, r4
 8000700:	80fb      	strh	r3, [r7, #6]
 8000702:	4603      	mov	r3, r0
 8000704:	80bb      	strh	r3, [r7, #4]
 8000706:	460b      	mov	r3, r1
 8000708:	807b      	strh	r3, [r7, #2]
 800070a:	4613      	mov	r3, r2
 800070c:	803b      	strh	r3, [r7, #0]
	// column address set
	ILI9341_WriteCommand(0x2A); // CASET
 800070e:	202a      	movs	r0, #42	@ 0x2a
 8000710:	f7ff ffa6 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000714:	88fb      	ldrh	r3, [r7, #6]
 8000716:	0a1b      	lsrs	r3, r3, #8
 8000718:	b29b      	uxth	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	733b      	strb	r3, [r7, #12]
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	737b      	strb	r3, [r7, #13]
 8000724:	887b      	ldrh	r3, [r7, #2]
 8000726:	0a1b      	lsrs	r3, r3, #8
 8000728:	b29b      	uxth	r3, r3
 800072a:	b2db      	uxtb	r3, r3
 800072c:	73bb      	strb	r3, [r7, #14]
 800072e:	887b      	ldrh	r3, [r7, #2]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	73fb      	strb	r3, [r7, #15]
		ILI9341_WriteData(data, sizeof(data));
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2104      	movs	r1, #4
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ffaa 	bl	8000694 <ILI9341_WriteData>
	}

	// row address set
	ILI9341_WriteCommand(0x2B); // RASET
 8000740:	202b      	movs	r0, #43	@ 0x2b
 8000742:	f7ff ff8d 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000746:	88bb      	ldrh	r3, [r7, #4]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	b29b      	uxth	r3, r3
 800074c:	b2db      	uxtb	r3, r3
 800074e:	723b      	strb	r3, [r7, #8]
 8000750:	88bb      	ldrh	r3, [r7, #4]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	727b      	strb	r3, [r7, #9]
 8000756:	883b      	ldrh	r3, [r7, #0]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	b29b      	uxth	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	72bb      	strb	r3, [r7, #10]
 8000760:	883b      	ldrh	r3, [r7, #0]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	72fb      	strb	r3, [r7, #11]
		ILI9341_WriteData(data, sizeof(data));
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	2104      	movs	r1, #4
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff91 	bl	8000694 <ILI9341_WriteData>
	}

	// write to RAM
	ILI9341_WriteCommand(0x2C); // RAMWR
 8000772:	202c      	movs	r0, #44	@ 0x2c
 8000774:	f7ff ff74 	bl	8000660 <ILI9341_WriteCommand>
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	bd90      	pop	{r4, r7, pc}

08000780 <ILI9341_Init>:

void ILI9341_Init() {
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b09b      	sub	sp, #108	@ 0x6c
 8000784:	af00      	add	r7, sp, #0
	ILI9341_Select();
 8000786:	f7ff ff3d 	bl	8000604 <ILI9341_Select>
	ILI9341_Reset();
 800078a:	f7ff ff53 	bl	8000634 <ILI9341_Reset>

	// command list is based on https://github.com/martnak/STM32-ILI9341

	// SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff ff66 	bl	8000660 <ILI9341_WriteCommand>
	HAL_Delay(1000);
 8000794:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000798:	f000 fee2 	bl	8001560 <HAL_Delay>

	// POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 800079c:	20cb      	movs	r0, #203	@ 0xcb
 800079e:	f7ff ff5f 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80007a2:	4a87      	ldr	r2, [pc, #540]	@ (80009c0 <ILI9341_Init+0x240>)
 80007a4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007ac:	6018      	str	r0, [r3, #0]
 80007ae:	3304      	adds	r3, #4
 80007b0:	7019      	strb	r1, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 80007b2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007b6:	2105      	movs	r1, #5
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff6b 	bl	8000694 <ILI9341_WriteData>
	}

	// POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80007be:	20cf      	movs	r0, #207	@ 0xcf
 80007c0:	f7ff ff4e 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80007c4:	4a7f      	ldr	r2, [pc, #508]	@ (80009c4 <ILI9341_Init+0x244>)
 80007c6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007ca:	6812      	ldr	r2, [r2, #0]
 80007cc:	4611      	mov	r1, r2
 80007ce:	8019      	strh	r1, [r3, #0]
 80007d0:	3302      	adds	r3, #2
 80007d2:	0c12      	lsrs	r2, r2, #16
 80007d4:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 80007d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007da:	2103      	movs	r1, #3
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff59 	bl	8000694 <ILI9341_WriteData>
	}

	// DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80007e2:	20e8      	movs	r0, #232	@ 0xe8
 80007e4:	f7ff ff3c 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x85, 0x00, 0x78 };
 80007e8:	4a77      	ldr	r2, [pc, #476]	@ (80009c8 <ILI9341_Init+0x248>)
 80007ea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80007ee:	6812      	ldr	r2, [r2, #0]
 80007f0:	4611      	mov	r1, r2
 80007f2:	8019      	strh	r1, [r3, #0]
 80007f4:	3302      	adds	r3, #2
 80007f6:	0c12      	lsrs	r2, r2, #16
 80007f8:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 80007fa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80007fe:	2103      	movs	r1, #3
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff47 	bl	8000694 <ILI9341_WriteData>
	}

	// DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000806:	20ea      	movs	r0, #234	@ 0xea
 8000808:	f7ff ff2a 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x00 };
 800080c:	2300      	movs	r3, #0
 800080e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		ILI9341_WriteData(data, sizeof(data));
 8000812:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000816:	2102      	movs	r1, #2
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff3b 	bl	8000694 <ILI9341_WriteData>
	}

	// POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 800081e:	20ed      	movs	r0, #237	@ 0xed
 8000820:	f7ff ff1e 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000824:	4b69      	ldr	r3, [pc, #420]	@ (80009cc <ILI9341_Init+0x24c>)
 8000826:	653b      	str	r3, [r7, #80]	@ 0x50
		ILI9341_WriteData(data, sizeof(data));
 8000828:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800082c:	2104      	movs	r1, #4
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff30 	bl	8000694 <ILI9341_WriteData>
	}

	// PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000834:	20f7      	movs	r0, #247	@ 0xf7
 8000836:	f7ff ff13 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x20 };
 800083a:	2320      	movs	r3, #32
 800083c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		ILI9341_WriteData(data, sizeof(data));
 8000840:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000844:	2101      	movs	r1, #1
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff24 	bl	8000694 <ILI9341_WriteData>
	}

	// POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 800084c:	20c0      	movs	r0, #192	@ 0xc0
 800084e:	f7ff ff07 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x23 };
 8000852:	2323      	movs	r3, #35	@ 0x23
 8000854:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
		ILI9341_WriteData(data, sizeof(data));
 8000858:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800085c:	2101      	movs	r1, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff18 	bl	8000694 <ILI9341_WriteData>
	}

	// POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000864:	20c1      	movs	r0, #193	@ 0xc1
 8000866:	f7ff fefb 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x10 };
 800086a:	2310      	movs	r3, #16
 800086c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
		ILI9341_WriteData(data, sizeof(data));
 8000870:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000874:	2101      	movs	r1, #1
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff0c 	bl	8000694 <ILI9341_WriteData>
	}

	// VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 800087c:	20c5      	movs	r0, #197	@ 0xc5
 800087e:	f7ff feef 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x3E, 0x28 };
 8000882:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000886:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
		ILI9341_WriteData(data, sizeof(data));
 800088a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800088e:	2102      	movs	r1, #2
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff feff 	bl	8000694 <ILI9341_WriteData>
	}

	// VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000896:	20c7      	movs	r0, #199	@ 0xc7
 8000898:	f7ff fee2 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x86 };
 800089c:	2386      	movs	r3, #134	@ 0x86
 800089e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
		ILI9341_WriteData(data, sizeof(data));
 80008a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008a6:	2101      	movs	r1, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fef3 	bl	8000694 <ILI9341_WriteData>
	}

	// MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 80008ae:	2036      	movs	r0, #54	@ 0x36
 80008b0:	f7ff fed6 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x48 };
 80008b4:	2348      	movs	r3, #72	@ 0x48
 80008b6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
		ILI9341_WriteData(data, sizeof(data));
 80008ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008be:	2101      	movs	r1, #1
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fee7 	bl	8000694 <ILI9341_WriteData>
	}

	// PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 80008c6:	203a      	movs	r0, #58	@ 0x3a
 80008c8:	f7ff feca 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x55 };
 80008cc:	2355      	movs	r3, #85	@ 0x55
 80008ce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
		ILI9341_WriteData(data, sizeof(data));
 80008d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80008d6:	2101      	movs	r1, #1
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fedb 	bl	8000694 <ILI9341_WriteData>
	}

	// FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 80008de:	20b1      	movs	r0, #177	@ 0xb1
 80008e0:	f7ff febe 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x18 };
 80008e4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008e8:	863b      	strh	r3, [r7, #48]	@ 0x30
		ILI9341_WriteData(data, sizeof(data));
 80008ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008ee:	2102      	movs	r1, #2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fecf 	bl	8000694 <ILI9341_WriteData>
	}

	// DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 80008f6:	20b6      	movs	r0, #182	@ 0xb6
 80008f8:	f7ff feb2 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x08, 0x82, 0x27 };
 80008fc:	4a34      	ldr	r2, [pc, #208]	@ (80009d0 <ILI9341_Init+0x250>)
 80008fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000902:	6812      	ldr	r2, [r2, #0]
 8000904:	4611      	mov	r1, r2
 8000906:	8019      	strh	r1, [r3, #0]
 8000908:	3302      	adds	r3, #2
 800090a:	0c12      	lsrs	r2, r2, #16
 800090c:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 800090e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000912:	2103      	movs	r1, #3
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff febd 	bl	8000694 <ILI9341_WriteData>
	}

	// 3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 800091a:	20f2      	movs	r0, #242	@ 0xf2
 800091c:	f7ff fea0 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00 };
 8000920:	2300      	movs	r3, #0
 8000922:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		ILI9341_WriteData(data, sizeof(data));
 8000926:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800092a:	2101      	movs	r1, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff feb1 	bl	8000694 <ILI9341_WriteData>
	}

	// GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000932:	2026      	movs	r0, #38	@ 0x26
 8000934:	f7ff fe94 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x01 };
 8000938:	2301      	movs	r3, #1
 800093a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		ILI9341_WriteData(data, sizeof(data));
 800093e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000942:	2101      	movs	r1, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fea5 	bl	8000694 <ILI9341_WriteData>
	}

	// POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 800094a:	20e0      	movs	r0, #224	@ 0xe0
 800094c:	f7ff fe88 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000950:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <ILI9341_Init+0x254>)
 8000952:	f107 0414 	add.w	r4, r7, #20
 8000956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000958:	c407      	stmia	r4!, {r0, r1, r2}
 800095a:	8023      	strh	r3, [r4, #0]
 800095c:	3402      	adds	r4, #2
 800095e:	0c1b      	lsrs	r3, r3, #16
 8000960:	7023      	strb	r3, [r4, #0]
				0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
		ILI9341_WriteData(data, sizeof(data));
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	210f      	movs	r1, #15
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fe93 	bl	8000694 <ILI9341_WriteData>
	}

	// NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 800096e:	20e1      	movs	r0, #225	@ 0xe1
 8000970:	f7ff fe76 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000974:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <ILI9341_Init+0x258>)
 8000976:	1d3c      	adds	r4, r7, #4
 8000978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800097a:	c407      	stmia	r4!, {r0, r1, r2}
 800097c:	8023      	strh	r3, [r4, #0]
 800097e:	3402      	adds	r4, #2
 8000980:	0c1b      	lsrs	r3, r3, #16
 8000982:	7023      	strb	r3, [r4, #0]
				0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
		ILI9341_WriteData(data, sizeof(data));
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	210f      	movs	r1, #15
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fe83 	bl	8000694 <ILI9341_WriteData>
	}

	// EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 800098e:	2011      	movs	r0, #17
 8000990:	f7ff fe66 	bl	8000660 <ILI9341_WriteCommand>
	HAL_Delay(120);
 8000994:	2078      	movs	r0, #120	@ 0x78
 8000996:	f000 fde3 	bl	8001560 <HAL_Delay>

	// TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 800099a:	2029      	movs	r0, #41	@ 0x29
 800099c:	f7ff fe60 	bl	8000660 <ILI9341_WriteCommand>

	// MADCTL
	ILI9341_WriteCommand(0x36);
 80009a0:	2036      	movs	r0, #54	@ 0x36
 80009a2:	f7ff fe5d 	bl	8000660 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { ILI9341_ROTATION };
 80009a6:	2348      	movs	r3, #72	@ 0x48
 80009a8:	703b      	strb	r3, [r7, #0]
		ILI9341_WriteData(data, sizeof(data));
 80009aa:	463b      	mov	r3, r7
 80009ac:	2101      	movs	r1, #1
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fe70 	bl	8000694 <ILI9341_WriteData>
	}

	ILI9341_Unselect();
 80009b4:	f7ff fe32 	bl	800061c <ILI9341_Unselect>
}
 80009b8:	bf00      	nop
 80009ba:	376c      	adds	r7, #108	@ 0x6c
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	080062f8 	.word	0x080062f8
 80009c4:	08006300 	.word	0x08006300
 80009c8:	08006304 	.word	0x08006304
 80009cc:	81120364 	.word	0x81120364
 80009d0:	08006308 	.word	0x08006308
 80009d4:	0800630c 	.word	0x0800630c
 80009d8:	0800631c 	.word	0x0800631c

080009dc <ILI9341_FillRectangle>:
	}

	ILI9341_Unselect();
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4604      	mov	r4, r0
 80009e4:	4608      	mov	r0, r1
 80009e6:	4611      	mov	r1, r2
 80009e8:	461a      	mov	r2, r3
 80009ea:	4623      	mov	r3, r4
 80009ec:	80fb      	strh	r3, [r7, #6]
 80009ee:	4603      	mov	r3, r0
 80009f0:	80bb      	strh	r3, [r7, #4]
 80009f2:	460b      	mov	r3, r1
 80009f4:	807b      	strh	r3, [r7, #2]
 80009f6:	4613      	mov	r3, r2
 80009f8:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	2bef      	cmp	r3, #239	@ 0xef
 80009fe:	d853      	bhi.n	8000aa8 <ILI9341_FillRectangle+0xcc>
 8000a00:	88bb      	ldrh	r3, [r7, #4]
 8000a02:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a06:	d24f      	bcs.n	8000aa8 <ILI9341_FillRectangle+0xcc>
	if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000a08:	88fa      	ldrh	r2, [r7, #6]
 8000a0a:	887b      	ldrh	r3, [r7, #2]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a10:	dd03      	ble.n	8000a1a <ILI9341_FillRectangle+0x3e>
 8000a12:	88fb      	ldrh	r3, [r7, #6]
 8000a14:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000a18:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000a1a:	88ba      	ldrh	r2, [r7, #4]
 8000a1c:	883b      	ldrh	r3, [r7, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a24:	dd03      	ble.n	8000a2e <ILI9341_FillRectangle+0x52>
 8000a26:	88bb      	ldrh	r3, [r7, #4]
 8000a28:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000a2c:	803b      	strh	r3, [r7, #0]

	ILI9341_Select();
 8000a2e:	f7ff fde9 	bl	8000604 <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000a32:	88fa      	ldrh	r2, [r7, #6]
 8000a34:	887b      	ldrh	r3, [r7, #2]
 8000a36:	4413      	add	r3, r2
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	b29c      	uxth	r4, r3
 8000a3e:	88ba      	ldrh	r2, [r7, #4]
 8000a40:	883b      	ldrh	r3, [r7, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	3b01      	subs	r3, #1
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	88b9      	ldrh	r1, [r7, #4]
 8000a4c:	88f8      	ldrh	r0, [r7, #6]
 8000a4e:	4622      	mov	r2, r4
 8000a50:	f7ff fe4e 	bl	80006f0 <ILI9341_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8000a54:	8c3b      	ldrh	r3, [r7, #32]
 8000a56:	0a1b      	lsrs	r3, r3, #8
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	733b      	strb	r3, [r7, #12]
 8000a5e:	8c3b      	ldrh	r3, [r7, #32]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2110      	movs	r1, #16
 8000a68:	4811      	ldr	r0, [pc, #68]	@ (8000ab0 <ILI9341_FillRectangle+0xd4>)
 8000a6a:	f001 f8b5 	bl	8001bd8 <HAL_GPIO_WritePin>

	for(y = h; y > 0; y--) {
 8000a6e:	883b      	ldrh	r3, [r7, #0]
 8000a70:	80bb      	strh	r3, [r7, #4]
 8000a72:	e013      	b.n	8000a9c <ILI9341_FillRectangle+0xc0>
		for(x = w; x > 0; x--) {
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	80fb      	strh	r3, [r7, #6]
 8000a78:	e00a      	b.n	8000a90 <ILI9341_FillRectangle+0xb4>
			HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000a7a:	f107 010c 	add.w	r1, r7, #12
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	2202      	movs	r2, #2
 8000a84:	480b      	ldr	r0, [pc, #44]	@ (8000ab4 <ILI9341_FillRectangle+0xd8>)
 8000a86:	f004 f84b 	bl	8004b20 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	80fb      	strh	r3, [r7, #6]
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1f1      	bne.n	8000a7a <ILI9341_FillRectangle+0x9e>
	for(y = h; y > 0; y--) {
 8000a96:	88bb      	ldrh	r3, [r7, #4]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	80bb      	strh	r3, [r7, #4]
 8000a9c:	88bb      	ldrh	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1e8      	bne.n	8000a74 <ILI9341_FillRectangle+0x98>
		}
	}

	ILI9341_Unselect();
 8000aa2:	f7ff fdbb 	bl	800061c <ILI9341_Unselect>
 8000aa6:	e000      	b.n	8000aaa <ILI9341_FillRectangle+0xce>
	if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000aa8:	bf00      	nop
}
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	58020400 	.word	0x58020400
 8000ab4:	2400002c 	.word	0x2400002c

08000ab8 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000aca:	22f0      	movs	r2, #240	@ 0xf0
 8000acc:	2100      	movs	r1, #0
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f7ff ff84 	bl	80009dc <ILI9341_FillRectangle>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4608      	mov	r0, r1
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4623      	mov	r3, r4
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	4603      	mov	r3, r0
 8000af0:	80bb      	strh	r3, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	807b      	strh	r3, [r7, #2]
 8000af6:	4613      	mov	r3, r2
 8000af8:	803b      	strh	r3, [r7, #0]
	if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	2bef      	cmp	r3, #239	@ 0xef
 8000afe:	d82d      	bhi.n	8000b5c <ILI9341_DrawImage+0x80>
 8000b00:	88bb      	ldrh	r3, [r7, #4]
 8000b02:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b06:	d229      	bcs.n	8000b5c <ILI9341_DrawImage+0x80>
	if((x + w - 1) >= ILI9341_WIDTH) return;
 8000b08:	88fa      	ldrh	r2, [r7, #6]
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	2bf0      	cmp	r3, #240	@ 0xf0
 8000b10:	dc26      	bgt.n	8000b60 <ILI9341_DrawImage+0x84>
	if((y + h - 1) >= ILI9341_HEIGHT) return;
 8000b12:	88ba      	ldrh	r2, [r7, #4]
 8000b14:	883b      	ldrh	r3, [r7, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b1c:	dc22      	bgt.n	8000b64 <ILI9341_DrawImage+0x88>

	ILI9341_Select();
 8000b1e:	f7ff fd71 	bl	8000604 <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b22:	88fa      	ldrh	r2, [r7, #6]
 8000b24:	887b      	ldrh	r3, [r7, #2]
 8000b26:	4413      	add	r3, r2
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	b29c      	uxth	r4, r3
 8000b2e:	88ba      	ldrh	r2, [r7, #4]
 8000b30:	883b      	ldrh	r3, [r7, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	3b01      	subs	r3, #1
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	88b9      	ldrh	r1, [r7, #4]
 8000b3c:	88f8      	ldrh	r0, [r7, #6]
 8000b3e:	4622      	mov	r2, r4
 8000b40:	f7ff fdd6 	bl	80006f0 <ILI9341_SetAddressWindow>
	ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	883a      	ldrh	r2, [r7, #0]
 8000b48:	fb02 f303 	mul.w	r3, r2, r3
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4619      	mov	r1, r3
 8000b50:	69b8      	ldr	r0, [r7, #24]
 8000b52:	f7ff fd9f 	bl	8000694 <ILI9341_WriteData>
	ILI9341_Unselect();
 8000b56:	f7ff fd61 	bl	800061c <ILI9341_Unselect>
 8000b5a:	e004      	b.n	8000b66 <ILI9341_DrawImage+0x8a>
	if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000b5c:	bf00      	nop
 8000b5e:	e002      	b.n	8000b66 <ILI9341_DrawImage+0x8a>
	if((x + w - 1) >= ILI9341_WIDTH) return;
 8000b60:	bf00      	nop
 8000b62:	e000      	b.n	8000b66 <ILI9341_DrawImage+0x8a>
	if((y + h - 1) >= ILI9341_HEIGHT) return;
 8000b64:	bf00      	nop
}
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd90      	pop	{r4, r7, pc}

08000b6c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	@ 0x30
 8000b70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	4b57      	ldr	r3, [pc, #348]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b88:	4a55      	ldr	r2, [pc, #340]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000b8a:	f043 0302 	orr.w	r3, r3, #2
 8000b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b92:	4b53      	ldr	r3, [pc, #332]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b98:	f003 0302 	and.w	r3, r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
 8000b9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b4f      	ldr	r3, [pc, #316]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba6:	4a4e      	ldr	r2, [pc, #312]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb0:	4b4b      	ldr	r3, [pc, #300]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bbe:	4b48      	ldr	r3, [pc, #288]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc4:	4a46      	ldr	r2, [pc, #280]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bce:	4b44      	ldr	r3, [pc, #272]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bdc:	4b40      	ldr	r3, [pc, #256]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bec:	4b3c      	ldr	r3, [pc, #240]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfa:	4b39      	ldr	r3, [pc, #228]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c00:	4a37      	ldr	r2, [pc, #220]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0a:	4b35      	ldr	r3, [pc, #212]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c18:	4b31      	ldr	r3, [pc, #196]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1e:	4a30      	ldr	r2, [pc, #192]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce0 <MX_GPIO_Init+0x174>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2110      	movs	r1, #16
 8000c3a:	482a      	ldr	r0, [pc, #168]	@ (8000ce4 <MX_GPIO_Init+0x178>)
 8000c3c:	f000 ffcc 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_RESET_GPIO_Port, ILI9341_RESET_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c46:	4828      	ldr	r0, [pc, #160]	@ (8000ce8 <MX_GPIO_Init+0x17c>)
 8000c48:	f000 ffc6 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c52:	4826      	ldr	r0, [pc, #152]	@ (8000cec <MX_GPIO_Init+0x180>)
 8000c54:	f000 ffc0 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2140      	movs	r1, #64	@ 0x40
 8000c5c:	4824      	ldr	r0, [pc, #144]	@ (8000cf0 <MX_GPIO_Init+0x184>)
 8000c5e:	f000 ffbb 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ILI9341_DC_Pin */
  GPIO_InitStruct.Pin = ILI9341_DC_Pin;
 8000c62:	2310      	movs	r3, #16
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ILI9341_DC_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	481a      	ldr	r0, [pc, #104]	@ (8000ce4 <MX_GPIO_Init+0x178>)
 8000c7a:	f000 fdfd 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : ILI9341_RESET_Pin */
  GPIO_InitStruct.Pin = ILI9341_RESET_Pin;
 8000c7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ILI9341_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	4814      	ldr	r0, [pc, #80]	@ (8000ce8 <MX_GPIO_Init+0x17c>)
 8000c98:	f000 fdee 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480d      	ldr	r0, [pc, #52]	@ (8000cec <MX_GPIO_Init+0x180>)
 8000cb6:	f000 fddf 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : ILI9341_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_CS_Pin;
 8000cba:	2340      	movs	r3, #64	@ 0x40
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ILI9341_CS_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4807      	ldr	r0, [pc, #28]	@ (8000cf0 <MX_GPIO_Init+0x184>)
 8000cd2:	f000 fdd1 	bl	8001878 <HAL_GPIO_Init>

}
 8000cd6:	bf00      	nop
 8000cd8:	3730      	adds	r7, #48	@ 0x30
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	58024400 	.word	0x58024400
 8000ce4:	58020400 	.word	0x58020400
 8000ce8:	58021800 	.word	0x58021800
 8000cec:	58020800 	.word	0x58020800
 8000cf0:	58021000 	.word	0x58021000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000cfa:	f000 f8bb 	bl	8000e74 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfe:	f000 fb9d 	bl	800143c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d02:	f000 f83d 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d06:	f7ff ff31 	bl	8000b6c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d0a:	f000 f8e5 	bl	8000ed8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000d0e:	f000 fab3 	bl	8001278 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  printf("Hello STM32\n");
  ILI9341_Init();
 8000d12:	f7ff fd35 	bl	8000780 <ILI9341_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000d16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d1a:	4816      	ldr	r0, [pc, #88]	@ (8000d74 <main+0x80>)
 8000d1c:	f000 ff75 	bl	8001c0a <HAL_GPIO_TogglePin>
	  ILI9341_FillScreen(ILI9341_BLACK);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fec9 	bl	8000ab8 <ILI9341_FillScreen>
	  HAL_Delay(500);
 8000d26:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d2a:	f000 fc19 	bl	8001560 <HAL_Delay>
	  ILI9341_FillScreen(ILI9341_RED);
 8000d2e:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000d32:	f7ff fec1 	bl	8000ab8 <ILI9341_FillScreen>
	  HAL_Delay(500);
 8000d36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d3a:	f000 fc11 	bl	8001560 <HAL_Delay>
	  ILI9341_FillScreen(ILI9341_BLUE);
 8000d3e:	201f      	movs	r0, #31
 8000d40:	f7ff feba 	bl	8000ab8 <ILI9341_FillScreen>

	  ILI9341_DrawImage((ILI9341_WIDTH -240)/2, (ILI9341_WIDTH -240)/2, 240, 240, (const uint16_t *) test_img_240x240);
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <main+0x84>)
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	23f0      	movs	r3, #240	@ 0xf0
 8000d4a:	22f0      	movs	r2, #240	@ 0xf0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff fec4 	bl	8000adc <ILI9341_DrawImage>
	  HAL_Delay(2000);
 8000d54:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d58:	f000 fc02 	bl	8001560 <HAL_Delay>



	  ILI9341_DrawImage((ILI9341_WIDTH -240)/2, (ILI9341_WIDTH -320)/2, 240, 3200, (const uint16_t *) pic_240x320);
 8000d5c:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <main+0x88>)
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8000d64:	22f0      	movs	r2, #240	@ 0xf0
 8000d66:	f64f 71d8 	movw	r1, #65496	@ 0xffd8
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff feb6 	bl	8000adc <ILI9341_DrawImage>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000d70:	bf00      	nop
 8000d72:	e7d0      	b.n	8000d16 <main+0x22>
 8000d74:	58020800 	.word	0x58020800
 8000d78:	0800632c 	.word	0x0800632c
 8000d7c:	0802252c 	.word	0x0802252c

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b09c      	sub	sp, #112	@ 0x70
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8a:	224c      	movs	r2, #76	@ 0x4c
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f005 fa7a 	bl	8006288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2220      	movs	r2, #32
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f005 fa74 	bl	8006288 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000da0:	2002      	movs	r0, #2
 8000da2:	f000 ff4d 	bl	8001c40 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4b30      	ldr	r3, [pc, #192]	@ (8000e6c <SystemClock_Config+0xec>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a2f      	ldr	r2, [pc, #188]	@ (8000e6c <SystemClock_Config+0xec>)
 8000db0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000db4:	6193      	str	r3, [r2, #24]
 8000db6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e6c <SystemClock_Config+0xec>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e70 <SystemClock_Config+0xf0>)
 8000dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8000e70 <SystemClock_Config+0xf0>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000dcc:	4b28      	ldr	r3, [pc, #160]	@ (8000e70 <SystemClock_Config+0xf0>)
 8000dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dd8:	bf00      	nop
 8000dda:	4b24      	ldr	r3, [pc, #144]	@ (8000e6c <SystemClock_Config+0xec>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000de2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000de6:	d1f8      	bne.n	8000dda <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de8:	2301      	movs	r3, #1
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	2302      	movs	r3, #2
 8000df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000dfe:	23c0      	movs	r3, #192	@ 0xc0
 8000e00:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e0e:	2308      	movs	r3, #8
 8000e10:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 ff48 	bl	8001cb4 <HAL_RCC_OscConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e2a:	f000 f84f 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2e:	233f      	movs	r3, #63	@ 0x3f
 8000e30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e32:	2303      	movs	r3, #3
 8000e34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e3e:	2340      	movs	r3, #64	@ 0x40
 8000e40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e42:	2340      	movs	r3, #64	@ 0x40
 8000e44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e4a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e4c:	2340      	movs	r3, #64	@ 0x40
 8000e4e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2104      	movs	r1, #4
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 fb87 	bl	8002568 <HAL_RCC_ClockConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000e60:	f000 f834 	bl	8000ecc <Error_Handler>
  }
}
 8000e64:	bf00      	nop
 8000e66:	3770      	adds	r7, #112	@ 0x70
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	58024800 	.word	0x58024800
 8000e70:	58000400 	.word	0x58000400

08000e74 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e86:	f000 fc7f 	bl	8001788 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e96:	231f      	movs	r3, #31
 8000e98:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e9a:	2387      	movs	r3, #135	@ 0x87
 8000e9c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fc9d 	bl	80017f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ebe:	2004      	movs	r0, #4
 8000ec0:	f000 fc7a 	bl	80017b8 <HAL_MPU_Enable>

}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <Error_Handler+0x8>

08000ed8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000edc:	4b27      	ldr	r3, [pc, #156]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000ede:	4a28      	ldr	r2, [pc, #160]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ee2:	4b26      	ldr	r3, [pc, #152]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000ee4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ee8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000eea:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000eec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ef0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef2:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef8:	4b20      	ldr	r3, [pc, #128]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000efe:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f06:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f14:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f20:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f26:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f38:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f68:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <MX_SPI1_Init+0xa4>)
 8000f6a:	f003 fcb5 	bl	80048d8 <HAL_SPI_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f74:	f7ff ffaa 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2400002c 	.word	0x2400002c
 8000f80:	40013000 	.word	0x40013000

08000f84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0ba      	sub	sp, #232	@ 0xe8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	22c0      	movs	r2, #192	@ 0xc0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f005 f96f 	bl	8006288 <memset>
  if(spiHandle->Instance==SPI1)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a2e      	ldr	r2, [pc, #184]	@ (8001068 <HAL_SPI_MspInit+0xe4>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d155      	bne.n	8001060 <HAL_SPI_MspInit+0xdc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000fb4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000fc0:	2319      	movs	r3, #25
 8000fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 8000fc4:	23c8      	movs	r3, #200	@ 0xc8
 8000fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000fe0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fe4:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fe48 	bl	8002c80 <HAL_RCCEx_PeriphCLKConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_SPI_MspInit+0x76>
    {
      Error_Handler();
 8000ff6:	f7ff ff69 	bl	8000ecc <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800106c <HAL_SPI_MspInit+0xe8>)
 8000ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001000:	4a1a      	ldr	r2, [pc, #104]	@ (800106c <HAL_SPI_MspInit+0xe8>)
 8001002:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001006:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800100a:	4b18      	ldr	r3, [pc, #96]	@ (800106c <HAL_SPI_MspInit+0xe8>)
 800100c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001018:	4b14      	ldr	r3, [pc, #80]	@ (800106c <HAL_SPI_MspInit+0xe8>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101e:	4a13      	ldr	r2, [pc, #76]	@ (800106c <HAL_SPI_MspInit+0xe8>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001028:	4b10      	ldr	r3, [pc, #64]	@ (800106c <HAL_SPI_MspInit+0xe8>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001036:	2328      	movs	r3, #40	@ 0x28
 8001038:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800104e:	2305      	movs	r3, #5
 8001050:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001058:	4619      	mov	r1, r3
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <HAL_SPI_MspInit+0xec>)
 800105c:	f000 fc0c 	bl	8001878 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001060:	bf00      	nop
 8001062:	37e8      	adds	r7, #232	@ 0xe8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40013000 	.word	0x40013000
 800106c:	58024400 	.word	0x58024400
 8001070:	58020400 	.word	0x58020400

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_MspInit+0x30>)
 800107c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001080:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <HAL_MspInit+0x30>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_MspInit+0x30>)
 800108c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	58024400 	.word	0x58024400

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <NMI_Handler+0x4>

080010b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <MemManage_Handler+0x4>

080010c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <UsageFault_Handler+0x4>

080010d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fe:	f000 fa0f 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800110c:	4b43      	ldr	r3, [pc, #268]	@ (800121c <SystemInit+0x114>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001112:	4a42      	ldr	r2, [pc, #264]	@ (800121c <SystemInit+0x114>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800111c:	4b40      	ldr	r3, [pc, #256]	@ (8001220 <SystemInit+0x118>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 030f 	and.w	r3, r3, #15
 8001124:	2b06      	cmp	r3, #6
 8001126:	d807      	bhi.n	8001138 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001128:	4b3d      	ldr	r3, [pc, #244]	@ (8001220 <SystemInit+0x118>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 030f 	bic.w	r3, r3, #15
 8001130:	4a3b      	ldr	r2, [pc, #236]	@ (8001220 <SystemInit+0x118>)
 8001132:	f043 0307 	orr.w	r3, r3, #7
 8001136:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001138:	4b3a      	ldr	r3, [pc, #232]	@ (8001224 <SystemInit+0x11c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a39      	ldr	r2, [pc, #228]	@ (8001224 <SystemInit+0x11c>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001144:	4b37      	ldr	r3, [pc, #220]	@ (8001224 <SystemInit+0x11c>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800114a:	4b36      	ldr	r3, [pc, #216]	@ (8001224 <SystemInit+0x11c>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4935      	ldr	r1, [pc, #212]	@ (8001224 <SystemInit+0x11c>)
 8001150:	4b35      	ldr	r3, [pc, #212]	@ (8001228 <SystemInit+0x120>)
 8001152:	4013      	ands	r3, r2
 8001154:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001156:	4b32      	ldr	r3, [pc, #200]	@ (8001220 <SystemInit+0x118>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	2b00      	cmp	r3, #0
 8001160:	d007      	beq.n	8001172 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001162:	4b2f      	ldr	r3, [pc, #188]	@ (8001220 <SystemInit+0x118>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f023 030f 	bic.w	r3, r3, #15
 800116a:	4a2d      	ldr	r2, [pc, #180]	@ (8001220 <SystemInit+0x118>)
 800116c:	f043 0307 	orr.w	r3, r3, #7
 8001170:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001172:	4b2c      	ldr	r3, [pc, #176]	@ (8001224 <SystemInit+0x11c>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001178:	4b2a      	ldr	r3, [pc, #168]	@ (8001224 <SystemInit+0x11c>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800117e:	4b29      	ldr	r3, [pc, #164]	@ (8001224 <SystemInit+0x11c>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001184:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <SystemInit+0x11c>)
 8001186:	4a29      	ldr	r2, [pc, #164]	@ (800122c <SystemInit+0x124>)
 8001188:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800118a:	4b26      	ldr	r3, [pc, #152]	@ (8001224 <SystemInit+0x11c>)
 800118c:	4a28      	ldr	r2, [pc, #160]	@ (8001230 <SystemInit+0x128>)
 800118e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001190:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <SystemInit+0x11c>)
 8001192:	4a28      	ldr	r2, [pc, #160]	@ (8001234 <SystemInit+0x12c>)
 8001194:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001196:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <SystemInit+0x11c>)
 8001198:	2200      	movs	r2, #0
 800119a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800119c:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <SystemInit+0x11c>)
 800119e:	4a25      	ldr	r2, [pc, #148]	@ (8001234 <SystemInit+0x12c>)
 80011a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011a2:	4b20      	ldr	r3, [pc, #128]	@ (8001224 <SystemInit+0x11c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <SystemInit+0x11c>)
 80011aa:	4a22      	ldr	r2, [pc, #136]	@ (8001234 <SystemInit+0x12c>)
 80011ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <SystemInit+0x11c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <SystemInit+0x11c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001224 <SystemInit+0x11c>)
 80011ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011c0:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <SystemInit+0x11c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <SystemInit+0x130>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <SystemInit+0x134>)
 80011cc:	4013      	ands	r3, r2
 80011ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011d2:	d202      	bcs.n	80011da <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <SystemInit+0x138>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80011da:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <SystemInit+0x11c>)
 80011dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d113      	bne.n	8001210 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80011e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <SystemInit+0x11c>)
 80011ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001224 <SystemInit+0x11c>)
 80011f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <SystemInit+0x13c>)
 80011fa:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011fe:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001200:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <SystemInit+0x11c>)
 8001202:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001206:	4a07      	ldr	r2, [pc, #28]	@ (8001224 <SystemInit+0x11c>)
 8001208:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800120c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00
 8001220:	52002000 	.word	0x52002000
 8001224:	58024400 	.word	0x58024400
 8001228:	eaf6ed7f 	.word	0xeaf6ed7f
 800122c:	02020200 	.word	0x02020200
 8001230:	01ff0000 	.word	0x01ff0000
 8001234:	01010280 	.word	0x01010280
 8001238:	5c001000 	.word	0x5c001000
 800123c:	ffff0000 	.word	0xffff0000
 8001240:	51008108 	.word	0x51008108
 8001244:	52004000 	.word	0x52004000

08001248 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800124c:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <ExitRun0Mode+0x2c>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	4a08      	ldr	r2, [pc, #32]	@ (8001274 <ExitRun0Mode+0x2c>)
 8001252:	f043 0302 	orr.w	r3, r3, #2
 8001256:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001258:	bf00      	nop
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <ExitRun0Mode+0x2c>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f9      	beq.n	800125a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	58024800 	.word	0x58024800

08001278 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800127c:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 800127e:	4a23      	ldr	r2, [pc, #140]	@ (800130c <MX_USART1_UART_Init+0x94>)
 8001280:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001282:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 8001284:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001288:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ae:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ba:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c0:	4811      	ldr	r0, [pc, #68]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012c2:	f003 ff04 	bl	80050ce <HAL_UART_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012cc:	f7ff fdfe 	bl	8000ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d0:	2100      	movs	r1, #0
 80012d2:	480d      	ldr	r0, [pc, #52]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012d4:	f004 ff0d 	bl	80060f2 <HAL_UARTEx_SetTxFifoThreshold>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012de:	f7ff fdf5 	bl	8000ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4808      	ldr	r0, [pc, #32]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012e6:	f004 ff42 	bl	800616e <HAL_UARTEx_SetRxFifoThreshold>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012f0:	f7ff fdec 	bl	8000ecc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012f6:	f004 fec3 	bl	8006080 <HAL_UARTEx_DisableFifoMode>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001300:	f7ff fde4 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	240000b4 	.word	0x240000b4
 800130c:	40011000 	.word	0x40011000

08001310 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0ba      	sub	sp, #232	@ 0xe8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	22c0      	movs	r2, #192	@ 0xc0
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f004 ffa9 	bl	8006288 <memset>
  if(uartHandle->Instance==USART1)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a27      	ldr	r2, [pc, #156]	@ (80013d8 <HAL_UART_MspInit+0xc8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d146      	bne.n	80013ce <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001340:	f04f 0201 	mov.w	r2, #1
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fc92 	bl	8002c80 <HAL_RCCEx_PeriphCLKConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001362:	f7ff fdb3 	bl	8000ecc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001366:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <HAL_UART_MspInit+0xcc>)
 8001368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800136c:	4a1b      	ldr	r2, [pc, #108]	@ (80013dc <HAL_UART_MspInit+0xcc>)
 800136e:	f043 0310 	orr.w	r3, r3, #16
 8001372:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001376:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_UART_MspInit+0xcc>)
 8001378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800137c:	f003 0310 	and.w	r3, r3, #16
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_UART_MspInit+0xcc>)
 8001386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138a:	4a14      	ldr	r2, [pc, #80]	@ (80013dc <HAL_UART_MspInit+0xcc>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <HAL_UART_MspInit+0xcc>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80013a2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013bc:	2307      	movs	r3, #7
 80013be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <HAL_UART_MspInit+0xd0>)
 80013ca:	f000 fa55 	bl	8001878 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80013ce:	bf00      	nop
 80013d0:	37e8      	adds	r7, #232	@ 0xe8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40011000 	.word	0x40011000
 80013dc:	58024400 	.word	0x58024400
 80013e0:	58020000 	.word	0x58020000

080013e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013e4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001420 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80013e8:	f7ff ff2e 	bl	8001248 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013ec:	f7ff fe8c 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f0:	480c      	ldr	r0, [pc, #48]	@ (8001424 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013f2:	490d      	ldr	r1, [pc, #52]	@ (8001428 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013f4:	4a0d      	ldr	r2, [pc, #52]	@ (800142c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f8:	e002      	b.n	8001400 <LoopCopyDataInit>

080013fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fe:	3304      	adds	r3, #4

08001400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001404:	d3f9      	bcc.n	80013fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001406:	4a0a      	ldr	r2, [pc, #40]	@ (8001430 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001408:	4c0a      	ldr	r4, [pc, #40]	@ (8001434 <LoopFillZerobss+0x22>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800140c:	e001      	b.n	8001412 <LoopFillZerobss>

0800140e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001410:	3204      	adds	r2, #4

08001412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001414:	d3fb      	bcc.n	800140e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001416:	f004 ff3f 	bl	8006298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800141a:	f7ff fc6b 	bl	8000cf4 <main>
  bx  lr
 800141e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001420:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001424:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001428:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800142c:	08047d74 	.word	0x08047d74
  ldr r2, =_sbss
 8001430:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001434:	2400014c 	.word	0x2400014c

08001438 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC3_IRQHandler>
	...

0800143c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001442:	2003      	movs	r0, #3
 8001444:	f000 f96e 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001448:	f001 fa44 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 800144c:	4602      	mov	r2, r0
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <HAL_Init+0x68>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	0a1b      	lsrs	r3, r3, #8
 8001454:	f003 030f 	and.w	r3, r3, #15
 8001458:	4913      	ldr	r1, [pc, #76]	@ (80014a8 <HAL_Init+0x6c>)
 800145a:	5ccb      	ldrb	r3, [r1, r3]
 800145c:	f003 031f 	and.w	r3, r3, #31
 8001460:	fa22 f303 	lsr.w	r3, r2, r3
 8001464:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001466:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <HAL_Init+0x68>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	4a0e      	ldr	r2, [pc, #56]	@ (80014a8 <HAL_Init+0x6c>)
 8001470:	5cd3      	ldrb	r3, [r2, r3]
 8001472:	f003 031f 	and.w	r3, r3, #31
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	fa22 f303 	lsr.w	r3, r2, r3
 800147c:	4a0b      	ldr	r2, [pc, #44]	@ (80014ac <HAL_Init+0x70>)
 800147e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001480:	4a0b      	ldr	r2, [pc, #44]	@ (80014b0 <HAL_Init+0x74>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001486:	200f      	movs	r0, #15
 8001488:	f000 f814 	bl	80014b4 <HAL_InitTick>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e002      	b.n	800149c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001496:	f7ff fded 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	58024400 	.word	0x58024400
 80014a8:	08047d2c 	.word	0x08047d2c
 80014ac:	24000004 	.word	0x24000004
 80014b0:	24000000 	.word	0x24000000

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014bc:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <HAL_InitTick+0x60>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e021      	b.n	800150c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <HAL_InitTick+0x64>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <HAL_InitTick+0x60>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f945 	bl	800176e <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f000 f91d 	bl	800173a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	@ (800151c <HAL_InitTick+0x68>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	2400000c 	.word	0x2400000c
 8001518:	24000000 	.word	0x24000000
 800151c:	24000008 	.word	0x24000008

08001520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	@ (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	2400000c 	.word	0x2400000c
 8001544:	24000148 	.word	0x24000148

08001548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b03      	ldr	r3, [pc, #12]	@ (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	24000148 	.word	0x24000148

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff ffee 	bl	8001548 <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d005      	beq.n	8001586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157a:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <HAL_Delay+0x44>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001586:	bf00      	nop
 8001588:	f7ff ffde 	bl	8001548 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8f7      	bhi.n	8001588 <HAL_Delay+0x28>
  {
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2400000c 	.word	0x2400000c

080015a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <HAL_GetREVID+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	0c1b      	lsrs	r3, r3, #16
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	5c001000 	.word	0x5c001000

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <__NVIC_SetPriorityGrouping+0x40>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	@ (8001600 <__NVIC_SetPriorityGrouping+0x40>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00
 8001604:	05fa0000 	.word	0x05fa0000

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	@ (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	@ (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	@ 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	@ 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff8e 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	@ (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff47 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001748:	f7ff ff5e 	bl	8001608 <__NVIC_GetPriorityGrouping>
 800174c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	6978      	ldr	r0, [r7, #20]
 8001754:	f7ff ff90 	bl	8001678 <NVIC_EncodePriority>
 8001758:	4602      	mov	r2, r0
 800175a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff5f 	bl	8001624 <__NVIC_SetPriority>
}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffb2 	bl	80016e0 <SysTick_Config>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800178c:	f3bf 8f5f 	dmb	sy
}
 8001790:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001792:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <HAL_MPU_Disable+0x28>)
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001796:	4a06      	ldr	r2, [pc, #24]	@ (80017b0 <HAL_MPU_Disable+0x28>)
 8001798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800179c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800179e:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_MPU_Disable+0x2c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	605a      	str	r2, [r3, #4]
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00
 80017b4:	e000ed90 	.word	0xe000ed90

080017b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80017c0:	4a0b      	ldr	r2, [pc, #44]	@ (80017f0 <HAL_MPU_Enable+0x38>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017ca:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <HAL_MPU_Enable+0x3c>)
 80017cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ce:	4a09      	ldr	r2, [pc, #36]	@ (80017f4 <HAL_MPU_Enable+0x3c>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017d6:	f3bf 8f4f 	dsb	sy
}
 80017da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017dc:	f3bf 8f6f 	isb	sy
}
 80017e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed90 	.word	0xe000ed90
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	785a      	ldrb	r2, [r3, #1]
 8001804:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <HAL_MPU_ConfigRegion+0x7c>)
 8001806:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001808:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <HAL_MPU_ConfigRegion+0x7c>)
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	4a19      	ldr	r2, [pc, #100]	@ (8001874 <HAL_MPU_ConfigRegion+0x7c>)
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001814:	4a17      	ldr	r2, [pc, #92]	@ (8001874 <HAL_MPU_ConfigRegion+0x7c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7b1b      	ldrb	r3, [r3, #12]
 8001820:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7adb      	ldrb	r3, [r3, #11]
 8001826:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001828:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7a9b      	ldrb	r3, [r3, #10]
 800182e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001830:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7b5b      	ldrb	r3, [r3, #13]
 8001836:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001838:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7b9b      	ldrb	r3, [r3, #14]
 800183e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001840:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7bdb      	ldrb	r3, [r3, #15]
 8001846:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001848:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7a5b      	ldrb	r3, [r3, #9]
 800184e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001850:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7a1b      	ldrb	r3, [r3, #8]
 8001856:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001858:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001860:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001862:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001864:	6113      	str	r3, [r2, #16]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed90 	.word	0xe000ed90

08001878 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001886:	4b89      	ldr	r3, [pc, #548]	@ (8001aac <HAL_GPIO_Init+0x234>)
 8001888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800188a:	e194      	b.n	8001bb6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2101      	movs	r1, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8186 	beq.w	8001bb0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d005      	beq.n	80018bc <HAL_GPIO_Init+0x44>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d130      	bne.n	800191e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018f2:	2201      	movs	r2, #1
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	f003 0201 	and.w	r2, r3, #1
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b03      	cmp	r3, #3
 8001928:	d017      	beq.n	800195a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d123      	bne.n	80019ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	69b9      	ldr	r1, [r7, #24]
 80019aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2203      	movs	r2, #3
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0203 	and.w	r2, r3, #3
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80e0 	beq.w	8001bb0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f0:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab0 <HAL_GPIO_Init+0x238>)
 80019f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019f6:	4a2e      	ldr	r2, [pc, #184]	@ (8001ab0 <HAL_GPIO_Init+0x238>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a00:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab0 <HAL_GPIO_Init+0x238>)
 8001a02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a0e:	4a29      	ldr	r2, [pc, #164]	@ (8001ab4 <HAL_GPIO_Init+0x23c>)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	220f      	movs	r2, #15
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a20      	ldr	r2, [pc, #128]	@ (8001ab8 <HAL_GPIO_Init+0x240>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d052      	beq.n	8001ae0 <HAL_GPIO_Init+0x268>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8001abc <HAL_GPIO_Init+0x244>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d031      	beq.n	8001aa6 <HAL_GPIO_Init+0x22e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac0 <HAL_GPIO_Init+0x248>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d02b      	beq.n	8001aa2 <HAL_GPIO_Init+0x22a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac4 <HAL_GPIO_Init+0x24c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d025      	beq.n	8001a9e <HAL_GPIO_Init+0x226>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac8 <HAL_GPIO_Init+0x250>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d01f      	beq.n	8001a9a <HAL_GPIO_Init+0x222>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001acc <HAL_GPIO_Init+0x254>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d019      	beq.n	8001a96 <HAL_GPIO_Init+0x21e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad0 <HAL_GPIO_Init+0x258>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d013      	beq.n	8001a92 <HAL_GPIO_Init+0x21a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a19      	ldr	r2, [pc, #100]	@ (8001ad4 <HAL_GPIO_Init+0x25c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00d      	beq.n	8001a8e <HAL_GPIO_Init+0x216>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a18      	ldr	r2, [pc, #96]	@ (8001ad8 <HAL_GPIO_Init+0x260>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d007      	beq.n	8001a8a <HAL_GPIO_Init+0x212>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a17      	ldr	r2, [pc, #92]	@ (8001adc <HAL_GPIO_Init+0x264>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_GPIO_Init+0x20e>
 8001a82:	2309      	movs	r3, #9
 8001a84:	e02d      	b.n	8001ae2 <HAL_GPIO_Init+0x26a>
 8001a86:	230a      	movs	r3, #10
 8001a88:	e02b      	b.n	8001ae2 <HAL_GPIO_Init+0x26a>
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	e029      	b.n	8001ae2 <HAL_GPIO_Init+0x26a>
 8001a8e:	2307      	movs	r3, #7
 8001a90:	e027      	b.n	8001ae2 <HAL_GPIO_Init+0x26a>
 8001a92:	2306      	movs	r3, #6
 8001a94:	e025      	b.n	8001ae2 <HAL_GPIO_Init+0x26a>
 8001a96:	2305      	movs	r3, #5
 8001a98:	e023      	b.n	8001ae2 <HAL_GPIO_Init+0x26a>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	e021      	b.n	8001ae2 <HAL_GPIO_Init+0x26a>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e01f      	b.n	8001ae2 <HAL_GPIO_Init+0x26a>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e01d      	b.n	8001ae2 <HAL_GPIO_Init+0x26a>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e01b      	b.n	8001ae2 <HAL_GPIO_Init+0x26a>
 8001aaa:	bf00      	nop
 8001aac:	58000080 	.word	0x58000080
 8001ab0:	58024400 	.word	0x58024400
 8001ab4:	58000400 	.word	0x58000400
 8001ab8:	58020000 	.word	0x58020000
 8001abc:	58020400 	.word	0x58020400
 8001ac0:	58020800 	.word	0x58020800
 8001ac4:	58020c00 	.word	0x58020c00
 8001ac8:	58021000 	.word	0x58021000
 8001acc:	58021400 	.word	0x58021400
 8001ad0:	58021800 	.word	0x58021800
 8001ad4:	58021c00 	.word	0x58021c00
 8001ad8:	58022000 	.word	0x58022000
 8001adc:	58022400 	.word	0x58022400
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	f002 0203 	and.w	r2, r2, #3
 8001ae8:	0092      	lsls	r2, r2, #2
 8001aea:	4093      	lsls	r3, r2
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af2:	4938      	ldr	r1, [pc, #224]	@ (8001bd4 <HAL_GPIO_Init+0x35c>)
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001b54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f47f ae63 	bne.w	800188c <HAL_GPIO_Init+0x14>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	3724      	adds	r7, #36	@ 0x24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	58000400 	.word	0x58000400

08001bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
 8001be4:	4613      	mov	r3, r2
 8001be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001be8:	787b      	ldrb	r3, [r7, #1]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001bf4:	e003      	b.n	8001bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	041a      	lsls	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	619a      	str	r2, [r3, #24]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c1c:	887a      	ldrh	r2, [r7, #2]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4013      	ands	r3, r2
 8001c22:	041a      	lsls	r2, r3, #16
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	887b      	ldrh	r3, [r7, #2]
 8001c2a:	400b      	ands	r3, r1
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	619a      	str	r2, [r3, #24]
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d00a      	beq.n	8001c6a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c54:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d001      	beq.n	8001c66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e01f      	b.n	8001ca6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e01d      	b.n	8001ca6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c6a:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f023 0207 	bic.w	r2, r3, #7
 8001c72:	490f      	ldr	r1, [pc, #60]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c7a:	f7ff fc65 	bl	8001548 <HAL_GetTick>
 8001c7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c80:	e009      	b.n	8001c96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c82:	f7ff fc61 	bl	8001548 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c90:	d901      	bls.n	8001c96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e007      	b.n	8001ca6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ca2:	d1ee      	bne.n	8001c82 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	58024800 	.word	0x58024800

08001cb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	@ 0x30
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f000 bc48 	b.w	8002558 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 8088 	beq.w	8001de6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4b99      	ldr	r3, [pc, #612]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ce0:	4b96      	ldr	r3, [pc, #600]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d007      	beq.n	8001cfc <HAL_RCC_OscConfig+0x48>
 8001cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cee:	2b18      	cmp	r3, #24
 8001cf0:	d111      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62>
 8001cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d10c      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	4b8f      	ldr	r3, [pc, #572]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d06d      	beq.n	8001de4 <HAL_RCC_OscConfig+0x130>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d169      	bne.n	8001de4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	f000 bc21 	b.w	8002558 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_OscConfig+0x7a>
 8001d20:	4b86      	ldr	r3, [pc, #536]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a85      	ldr	r2, [pc, #532]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	e02e      	b.n	8001d8c <HAL_RCC_OscConfig+0xd8>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x9c>
 8001d36:	4b81      	ldr	r3, [pc, #516]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a80      	ldr	r2, [pc, #512]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b7e      	ldr	r3, [pc, #504]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a7d      	ldr	r2, [pc, #500]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e01d      	b.n	8001d8c <HAL_RCC_OscConfig+0xd8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0xc0>
 8001d5a:	4b78      	ldr	r3, [pc, #480]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a77      	ldr	r2, [pc, #476]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	4b75      	ldr	r3, [pc, #468]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a74      	ldr	r2, [pc, #464]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0xd8>
 8001d74:	4b71      	ldr	r3, [pc, #452]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a70      	ldr	r2, [pc, #448]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b6e      	ldr	r3, [pc, #440]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a6d      	ldr	r2, [pc, #436]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff fbd8 	bl	8001548 <HAL_GetTick>
 8001d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fbd4 	bl	8001548 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	@ 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e3d4      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dae:	4b63      	ldr	r3, [pc, #396]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0xe8>
 8001dba:	e014      	b.n	8001de6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fbc4 	bl	8001548 <HAL_GetTick>
 8001dc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fbc0 	bl	8001548 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	@ 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e3c0      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dd6:	4b59      	ldr	r3, [pc, #356]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x110>
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80ca 	beq.w	8001f88 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df4:	4b51      	ldr	r3, [pc, #324]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dfc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e02:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_RCC_OscConfig+0x166>
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	2b18      	cmp	r3, #24
 8001e0e:	d156      	bne.n	8001ebe <HAL_RCC_OscConfig+0x20a>
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d151      	bne.n	8001ebe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e1a:	4b48      	ldr	r3, [pc, #288]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_RCC_OscConfig+0x17e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e392      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e32:	4b42      	ldr	r3, [pc, #264]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0219 	bic.w	r2, r3, #25
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	493f      	ldr	r1, [pc, #252]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff fb80 	bl	8001548 <HAL_GetTick>
 8001e48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fb7c 	bl	8001548 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e37c      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e5e:	4b37      	ldr	r3, [pc, #220]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	f7ff fb9d 	bl	80015a8 <HAL_GetREVID>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d817      	bhi.n	8001ea8 <HAL_RCC_OscConfig+0x1f4>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2b40      	cmp	r3, #64	@ 0x40
 8001e7e:	d108      	bne.n	8001e92 <HAL_RCC_OscConfig+0x1de>
 8001e80:	4b2e      	ldr	r3, [pc, #184]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001e88:	4a2c      	ldr	r2, [pc, #176]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e8e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e90:	e07a      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4b2a      	ldr	r3, [pc, #168]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	031b      	lsls	r3, r3, #12
 8001ea0:	4926      	ldr	r1, [pc, #152]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea6:	e06f      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea8:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	061b      	lsls	r3, r3, #24
 8001eb6:	4921      	ldr	r1, [pc, #132]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ebc:	e064      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d047      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0219 	bic.w	r2, r3, #25
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	491a      	ldr	r1, [pc, #104]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fb36 	bl	8001548 <HAL_GetTick>
 8001edc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fb32 	bl	8001548 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e332      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ef2:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	f7ff fb53 	bl	80015a8 <HAL_GetREVID>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d819      	bhi.n	8001f40 <HAL_RCC_OscConfig+0x28c>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2b40      	cmp	r3, #64	@ 0x40
 8001f12:	d108      	bne.n	8001f26 <HAL_RCC_OscConfig+0x272>
 8001f14:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001f1c:	4a07      	ldr	r2, [pc, #28]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f22:	6053      	str	r3, [r2, #4]
 8001f24:	e030      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
 8001f26:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	031b      	lsls	r3, r3, #12
 8001f34:	4901      	ldr	r1, [pc, #4]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]
 8001f3a:	e025      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
 8001f3c:	58024400 	.word	0x58024400
 8001f40:	4b9a      	ldr	r3, [pc, #616]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	061b      	lsls	r3, r3, #24
 8001f4e:	4997      	ldr	r1, [pc, #604]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
 8001f54:	e018      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f56:	4b95      	ldr	r3, [pc, #596]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a94      	ldr	r2, [pc, #592]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7ff faf1 	bl	8001548 <HAL_GetTick>
 8001f66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6a:	f7ff faed 	bl	8001548 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e2ed      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f7c:	4b8b      	ldr	r3, [pc, #556]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80a9 	beq.w	80020e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f96:	4b85      	ldr	r3, [pc, #532]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fa0:	4b82      	ldr	r3, [pc, #520]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d007      	beq.n	8001fbc <HAL_RCC_OscConfig+0x308>
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b18      	cmp	r3, #24
 8001fb0:	d13a      	bne.n	8002028 <HAL_RCC_OscConfig+0x374>
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d135      	bne.n	8002028 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fbc:	4b7b      	ldr	r3, [pc, #492]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x320>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	2b80      	cmp	r3, #128	@ 0x80
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e2c1      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fd4:	f7ff fae8 	bl	80015a8 <HAL_GetREVID>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d817      	bhi.n	8002012 <HAL_RCC_OscConfig+0x35e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d108      	bne.n	8001ffc <HAL_RCC_OscConfig+0x348>
 8001fea:	4b70      	ldr	r3, [pc, #448]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ff2:	4a6e      	ldr	r2, [pc, #440]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001ff4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ff8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ffa:	e075      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ffc:	4b6b      	ldr	r3, [pc, #428]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	069b      	lsls	r3, r3, #26
 800200a:	4968      	ldr	r1, [pc, #416]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002010:	e06a      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002012:	4b66      	ldr	r3, [pc, #408]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	061b      	lsls	r3, r3, #24
 8002020:	4962      	ldr	r1, [pc, #392]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002022:	4313      	orrs	r3, r2
 8002024:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002026:	e05f      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d042      	beq.n	80020b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002030:	4b5e      	ldr	r3, [pc, #376]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a5d      	ldr	r2, [pc, #372]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800203a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7ff fa84 	bl	8001548 <HAL_GetTick>
 8002040:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002044:	f7ff fa80 	bl	8001548 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e280      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002056:	4b55      	ldr	r3, [pc, #340]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002062:	f7ff faa1 	bl	80015a8 <HAL_GetREVID>
 8002066:	4603      	mov	r3, r0
 8002068:	f241 0203 	movw	r2, #4099	@ 0x1003
 800206c:	4293      	cmp	r3, r2
 800206e:	d817      	bhi.n	80020a0 <HAL_RCC_OscConfig+0x3ec>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	2b20      	cmp	r3, #32
 8002076:	d108      	bne.n	800208a <HAL_RCC_OscConfig+0x3d6>
 8002078:	4b4c      	ldr	r3, [pc, #304]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002080:	4a4a      	ldr	r2, [pc, #296]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002082:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002086:	6053      	str	r3, [r2, #4]
 8002088:	e02e      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
 800208a:	4b48      	ldr	r3, [pc, #288]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	069b      	lsls	r3, r3, #26
 8002098:	4944      	ldr	r1, [pc, #272]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
 800209e:	e023      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
 80020a0:	4b42      	ldr	r3, [pc, #264]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	061b      	lsls	r3, r3, #24
 80020ae:	493f      	ldr	r1, [pc, #252]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60cb      	str	r3, [r1, #12]
 80020b4:	e018      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020b6:	4b3d      	ldr	r3, [pc, #244]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a3c      	ldr	r2, [pc, #240]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7ff fa41 	bl	8001548 <HAL_GetTick>
 80020c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020ca:	f7ff fa3d 	bl	8001548 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e23d      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020dc:	4b33      	ldr	r3, [pc, #204]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d036      	beq.n	8002162 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d019      	beq.n	8002130 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fc:	4b2b      	ldr	r3, [pc, #172]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002100:	4a2a      	ldr	r2, [pc, #168]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7ff fa1e 	bl	8001548 <HAL_GetTick>
 800210c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff fa1a 	bl	8001548 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e21a      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002122:	4b22      	ldr	r3, [pc, #136]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x45c>
 800212e:	e018      	b.n	8002162 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002130:	4b1e      	ldr	r3, [pc, #120]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002134:	4a1d      	ldr	r2, [pc, #116]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7ff fa04 	bl	8001548 <HAL_GetTick>
 8002140:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002144:	f7ff fa00 	bl	8001548 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e200      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b00      	cmp	r3, #0
 800216c:	d039      	beq.n	80021e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d01c      	beq.n	80021b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002176:	4b0d      	ldr	r3, [pc, #52]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a0c      	ldr	r2, [pc, #48]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800217c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002180:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002182:	f7ff f9e1 	bl	8001548 <HAL_GetTick>
 8002186:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800218a:	f7ff f9dd 	bl	8001548 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e1dd      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800219c:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x4d6>
 80021a8:	e01b      	b.n	80021e2 <HAL_RCC_OscConfig+0x52e>
 80021aa:	bf00      	nop
 80021ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021b0:	4b9b      	ldr	r3, [pc, #620]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a9a      	ldr	r2, [pc, #616]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80021b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021bc:	f7ff f9c4 	bl	8001548 <HAL_GetTick>
 80021c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c4:	f7ff f9c0 	bl	8001548 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1c0      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021d6:	4b92      	ldr	r3, [pc, #584]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8081 	beq.w	80022f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002424 <HAL_RCC_OscConfig+0x770>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a8b      	ldr	r2, [pc, #556]	@ (8002424 <HAL_RCC_OscConfig+0x770>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021fc:	f7ff f9a4 	bl	8001548 <HAL_GetTick>
 8002200:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002204:	f7ff f9a0 	bl	8001548 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	@ 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1a0      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002216:	4b83      	ldr	r3, [pc, #524]	@ (8002424 <HAL_RCC_OscConfig+0x770>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d106      	bne.n	8002238 <HAL_RCC_OscConfig+0x584>
 800222a:	4b7d      	ldr	r3, [pc, #500]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222e:	4a7c      	ldr	r2, [pc, #496]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6713      	str	r3, [r2, #112]	@ 0x70
 8002236:	e02d      	b.n	8002294 <HAL_RCC_OscConfig+0x5e0>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10c      	bne.n	800225a <HAL_RCC_OscConfig+0x5a6>
 8002240:	4b77      	ldr	r3, [pc, #476]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002244:	4a76      	ldr	r2, [pc, #472]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	6713      	str	r3, [r2, #112]	@ 0x70
 800224c:	4b74      	ldr	r3, [pc, #464]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002250:	4a73      	ldr	r2, [pc, #460]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002252:	f023 0304 	bic.w	r3, r3, #4
 8002256:	6713      	str	r3, [r2, #112]	@ 0x70
 8002258:	e01c      	b.n	8002294 <HAL_RCC_OscConfig+0x5e0>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b05      	cmp	r3, #5
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x5c8>
 8002262:	4b6f      	ldr	r3, [pc, #444]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002266:	4a6e      	ldr	r2, [pc, #440]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6713      	str	r3, [r2, #112]	@ 0x70
 800226e:	4b6c      	ldr	r3, [pc, #432]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002272:	4a6b      	ldr	r2, [pc, #428]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6713      	str	r3, [r2, #112]	@ 0x70
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0x5e0>
 800227c:	4b68      	ldr	r3, [pc, #416]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002280:	4a67      	ldr	r2, [pc, #412]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	6713      	str	r3, [r2, #112]	@ 0x70
 8002288:	4b65      	ldr	r3, [pc, #404]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228c:	4a64      	ldr	r2, [pc, #400]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800228e:	f023 0304 	bic.w	r3, r3, #4
 8002292:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7ff f954 	bl	8001548 <HAL_GetTick>
 80022a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a4:	f7ff f950 	bl	8001548 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e14e      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022ba:	4b59      	ldr	r3, [pc, #356]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0ee      	beq.n	80022a4 <HAL_RCC_OscConfig+0x5f0>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7ff f93e 	bl	8001548 <HAL_GetTick>
 80022cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7ff f93a 	bl	8001548 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e138      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1ee      	bne.n	80022d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 812d 	beq.w	8002556 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80022fc:	4b48      	ldr	r3, [pc, #288]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002304:	2b18      	cmp	r3, #24
 8002306:	f000 80bd 	beq.w	8002484 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	2b02      	cmp	r3, #2
 8002310:	f040 809e 	bne.w	8002450 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	4b42      	ldr	r3, [pc, #264]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a41      	ldr	r2, [pc, #260]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800231a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800231e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7ff f912 	bl	8001548 <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7ff f90e 	bl	8001548 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e10e      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800233a:	4b39      	ldr	r3, [pc, #228]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002346:	4b36      	ldr	r3, [pc, #216]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800234a:	4b37      	ldr	r3, [pc, #220]	@ (8002428 <HAL_RCC_OscConfig+0x774>)
 800234c:	4013      	ands	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	430a      	orrs	r2, r1
 800235a:	4931      	ldr	r1, [pc, #196]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800235c:	4313      	orrs	r3, r2
 800235e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002364:	3b01      	subs	r3, #1
 8002366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236e:	3b01      	subs	r3, #1
 8002370:	025b      	lsls	r3, r3, #9
 8002372:	b29b      	uxth	r3, r3
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237a:	3b01      	subs	r3, #1
 800237c:	041b      	lsls	r3, r3, #16
 800237e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002388:	3b01      	subs	r3, #1
 800238a:	061b      	lsls	r3, r3, #24
 800238c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002390:	4923      	ldr	r1, [pc, #140]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002396:	4b22      	ldr	r3, [pc, #136]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239a:	4a21      	ldr	r2, [pc, #132]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023a6:	4b21      	ldr	r3, [pc, #132]	@ (800242c <HAL_RCC_OscConfig+0x778>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023ae:	00d2      	lsls	r2, r2, #3
 80023b0:	491b      	ldr	r1, [pc, #108]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ba:	f023 020c 	bic.w	r2, r3, #12
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	4917      	ldr	r1, [pc, #92]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023c8:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	f023 0202 	bic.w	r2, r3, #2
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d4:	4912      	ldr	r1, [pc, #72]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023da:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	4a10      	ldr	r2, [pc, #64]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80023f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80023fe:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002402:	4a07      	ldr	r2, [pc, #28]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240a:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a04      	ldr	r2, [pc, #16]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002410:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002416:	f7ff f897 	bl	8001548 <HAL_GetTick>
 800241a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800241c:	e011      	b.n	8002442 <HAL_RCC_OscConfig+0x78e>
 800241e:	bf00      	nop
 8002420:	58024400 	.word	0x58024400
 8002424:	58024800 	.word	0x58024800
 8002428:	fffffc0c 	.word	0xfffffc0c
 800242c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7ff f88a 	bl	8001548 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e08a      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002442:	4b47      	ldr	r3, [pc, #284]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x77c>
 800244e:	e082      	b.n	8002556 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002450:	4b43      	ldr	r3, [pc, #268]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a42      	ldr	r2, [pc, #264]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002456:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800245a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7ff f874 	bl	8001548 <HAL_GetTick>
 8002460:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002464:	f7ff f870 	bl	8001548 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e070      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002476:	4b3a      	ldr	r3, [pc, #232]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x7b0>
 8002482:	e068      	b.n	8002556 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002484:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002488:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800248a:	4b35      	ldr	r3, [pc, #212]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	2b01      	cmp	r3, #1
 8002496:	d031      	beq.n	80024fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f003 0203 	and.w	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d12a      	bne.n	80024fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d122      	bne.n	80024fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d11a      	bne.n	80024fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	0a5b      	lsrs	r3, r3, #9
 80024ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d111      	bne.n	80024fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	0c1b      	lsrs	r3, r3, #16
 80024dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d108      	bne.n	80024fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	0e1b      	lsrs	r3, r3, #24
 80024ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e02b      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002500:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002504:	08db      	lsrs	r3, r3, #3
 8002506:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800250a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	429a      	cmp	r2, r3
 8002514:	d01f      	beq.n	8002556 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002516:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251a:	4a11      	ldr	r2, [pc, #68]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002522:	f7ff f811 	bl	8001548 <HAL_GetTick>
 8002526:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002528:	bf00      	nop
 800252a:	f7ff f80d 	bl	8001548 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	4293      	cmp	r3, r2
 8002534:	d0f9      	beq.n	800252a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002536:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800253a:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <HAL_RCC_OscConfig+0x8b0>)
 800253c:	4013      	ands	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002542:	00d2      	lsls	r2, r2, #3
 8002544:	4906      	ldr	r1, [pc, #24]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002546:	4313      	orrs	r3, r2
 8002548:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800254a:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 800254c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254e:	4a04      	ldr	r2, [pc, #16]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3730      	adds	r7, #48	@ 0x30
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	58024400 	.word	0x58024400
 8002564:	ffff0007 	.word	0xffff0007

08002568 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e19c      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800257c:	4b8a      	ldr	r3, [pc, #552]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d910      	bls.n	80025ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b87      	ldr	r3, [pc, #540]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 020f 	bic.w	r2, r3, #15
 8002592:	4985      	ldr	r1, [pc, #532]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b83      	ldr	r3, [pc, #524]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e184      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d010      	beq.n	80025da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	4b7b      	ldr	r3, [pc, #492]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d908      	bls.n	80025da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025c8:	4b78      	ldr	r3, [pc, #480]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	4975      	ldr	r1, [pc, #468]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	4b70      	ldr	r3, [pc, #448]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d908      	bls.n	8002608 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025f6:	4b6d      	ldr	r3, [pc, #436]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	496a      	ldr	r1, [pc, #424]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002604:	4313      	orrs	r3, r2
 8002606:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	4b64      	ldr	r3, [pc, #400]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002620:	429a      	cmp	r2, r3
 8002622:	d908      	bls.n	8002636 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002624:	4b61      	ldr	r3, [pc, #388]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	495e      	ldr	r1, [pc, #376]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002632:	4313      	orrs	r3, r2
 8002634:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	4b59      	ldr	r3, [pc, #356]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800264e:	429a      	cmp	r2, r3
 8002650:	d908      	bls.n	8002664 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002652:	4b56      	ldr	r3, [pc, #344]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4953      	ldr	r1, [pc, #332]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002660:	4313      	orrs	r3, r2
 8002662:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d010      	beq.n	8002692 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	4b4d      	ldr	r3, [pc, #308]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	429a      	cmp	r2, r3
 800267e:	d908      	bls.n	8002692 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b4a      	ldr	r3, [pc, #296]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f023 020f 	bic.w	r2, r3, #15
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4947      	ldr	r1, [pc, #284]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 800268e:	4313      	orrs	r3, r2
 8002690:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d055      	beq.n	800274a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800269e:	4b43      	ldr	r3, [pc, #268]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	4940      	ldr	r1, [pc, #256]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026b8:	4b3c      	ldr	r3, [pc, #240]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d121      	bne.n	8002708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0f6      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d107      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026d0:	4b36      	ldr	r3, [pc, #216]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d115      	bne.n	8002708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0ea      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026e8:	4b30      	ldr	r3, [pc, #192]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0de      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026f8:	4b2c      	ldr	r3, [pc, #176]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0d6      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002708:	4b28      	ldr	r3, [pc, #160]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f023 0207 	bic.w	r2, r3, #7
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4925      	ldr	r1, [pc, #148]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002716:	4313      	orrs	r3, r2
 8002718:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800271a:	f7fe ff15 	bl	8001548 <HAL_GetTick>
 800271e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002720:	e00a      	b.n	8002738 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002722:	f7fe ff11 	bl	8001548 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e0be      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002738:	4b1c      	ldr	r3, [pc, #112]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	429a      	cmp	r2, r3
 8002748:	d1eb      	bne.n	8002722 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d010      	beq.n	8002778 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	429a      	cmp	r2, r3
 8002764:	d208      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002766:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f023 020f 	bic.w	r2, r3, #15
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	490e      	ldr	r1, [pc, #56]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002774:	4313      	orrs	r3, r2
 8002776:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d214      	bcs.n	80027b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 020f 	bic.w	r2, r3, #15
 800278e:	4906      	ldr	r1, [pc, #24]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b04      	ldr	r3, [pc, #16]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e086      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
 80027a8:	52002000 	.word	0x52002000
 80027ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d010      	beq.n	80027de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	4b3f      	ldr	r3, [pc, #252]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d208      	bcs.n	80027de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027cc:	4b3c      	ldr	r3, [pc, #240]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	4939      	ldr	r1, [pc, #228]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d010      	beq.n	800280c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	4b34      	ldr	r3, [pc, #208]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d208      	bcs.n	800280c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027fa:	4b31      	ldr	r3, [pc, #196]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	492e      	ldr	r1, [pc, #184]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002808:	4313      	orrs	r3, r2
 800280a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	2b00      	cmp	r3, #0
 8002816:	d010      	beq.n	800283a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	4b28      	ldr	r3, [pc, #160]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002824:	429a      	cmp	r2, r3
 8002826:	d208      	bcs.n	800283a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002828:	4b25      	ldr	r3, [pc, #148]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	4922      	ldr	r1, [pc, #136]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002836:	4313      	orrs	r3, r2
 8002838:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69da      	ldr	r2, [r3, #28]
 800284a:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002852:	429a      	cmp	r2, r3
 8002854:	d208      	bcs.n	8002868 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002856:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4917      	ldr	r1, [pc, #92]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002864:	4313      	orrs	r3, r2
 8002866:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002868:	f000 f834 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b14      	ldr	r3, [pc, #80]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	4912      	ldr	r1, [pc, #72]	@ (80028c4 <HAL_RCC_ClockConfig+0x35c>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
 8002884:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002886:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	4a0d      	ldr	r2, [pc, #52]	@ (80028c4 <HAL_RCC_ClockConfig+0x35c>)
 8002890:	5cd3      	ldrb	r3, [r2, r3]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
 800289c:	4a0a      	ldr	r2, [pc, #40]	@ (80028c8 <HAL_RCC_ClockConfig+0x360>)
 800289e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028a0:	4a0a      	ldr	r2, [pc, #40]	@ (80028cc <HAL_RCC_ClockConfig+0x364>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028a6:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <HAL_RCC_ClockConfig+0x368>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fe02 	bl	80014b4 <HAL_InitTick>
 80028b0:	4603      	mov	r3, r0
 80028b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	58024400 	.word	0x58024400
 80028c4:	08047d2c 	.word	0x08047d2c
 80028c8:	24000004 	.word	0x24000004
 80028cc:	24000000 	.word	0x24000000
 80028d0:	24000008 	.word	0x24000008

080028d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	@ 0x24
 80028d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028da:	4bb3      	ldr	r3, [pc, #716]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028e2:	2b18      	cmp	r3, #24
 80028e4:	f200 8155 	bhi.w	8002b92 <HAL_RCC_GetSysClockFreq+0x2be>
 80028e8:	a201      	add	r2, pc, #4	@ (adr r2, 80028f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ee:	bf00      	nop
 80028f0:	08002955 	.word	0x08002955
 80028f4:	08002b93 	.word	0x08002b93
 80028f8:	08002b93 	.word	0x08002b93
 80028fc:	08002b93 	.word	0x08002b93
 8002900:	08002b93 	.word	0x08002b93
 8002904:	08002b93 	.word	0x08002b93
 8002908:	08002b93 	.word	0x08002b93
 800290c:	08002b93 	.word	0x08002b93
 8002910:	0800297b 	.word	0x0800297b
 8002914:	08002b93 	.word	0x08002b93
 8002918:	08002b93 	.word	0x08002b93
 800291c:	08002b93 	.word	0x08002b93
 8002920:	08002b93 	.word	0x08002b93
 8002924:	08002b93 	.word	0x08002b93
 8002928:	08002b93 	.word	0x08002b93
 800292c:	08002b93 	.word	0x08002b93
 8002930:	08002981 	.word	0x08002981
 8002934:	08002b93 	.word	0x08002b93
 8002938:	08002b93 	.word	0x08002b93
 800293c:	08002b93 	.word	0x08002b93
 8002940:	08002b93 	.word	0x08002b93
 8002944:	08002b93 	.word	0x08002b93
 8002948:	08002b93 	.word	0x08002b93
 800294c:	08002b93 	.word	0x08002b93
 8002950:	08002987 	.word	0x08002987
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002954:	4b94      	ldr	r3, [pc, #592]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d009      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002960:	4b91      	ldr	r3, [pc, #580]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	08db      	lsrs	r3, r3, #3
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	4a90      	ldr	r2, [pc, #576]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
 8002970:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002972:	e111      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002974:	4b8d      	ldr	r3, [pc, #564]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002976:	61bb      	str	r3, [r7, #24]
      break;
 8002978:	e10e      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800297a:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800297c:	61bb      	str	r3, [r7, #24]
      break;
 800297e:	e10b      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002980:	4b8c      	ldr	r3, [pc, #560]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002982:	61bb      	str	r3, [r7, #24]
      break;
 8002984:	e108      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002986:	4b88      	ldr	r3, [pc, #544]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002990:	4b85      	ldr	r3, [pc, #532]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800299a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800299c:	4b82      	ldr	r3, [pc, #520]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029a6:	4b80      	ldr	r3, [pc, #512]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029aa:	08db      	lsrs	r3, r3, #3
 80029ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80e1 	beq.w	8002b8c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	f000 8083 	beq.w	8002ad8 <HAL_RCC_GetSysClockFreq+0x204>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	f200 80a1 	bhi.w	8002b1c <HAL_RCC_GetSysClockFreq+0x248>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x114>
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d056      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x1c0>
 80029e6:	e099      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029e8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d02d      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029f4:	4b6c      	ldr	r3, [pc, #432]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	08db      	lsrs	r3, r3, #3
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	4a6b      	ldr	r2, [pc, #428]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
 8002a04:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a1e:	4b62      	ldr	r3, [pc, #392]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a32:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a4e:	e087      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	ee07 3a90 	vmov	s15, r3
 8002a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002bbc <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a62:	4b51      	ldr	r3, [pc, #324]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6a:	ee07 3a90 	vmov	s15, r3
 8002a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a76:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a92:	e065      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002bc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aa6:	4b40      	ldr	r3, [pc, #256]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ad6:	e043      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002bc4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aea:	4b2f      	ldr	r3, [pc, #188]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002afe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b1a:	e021      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b26:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002bc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b42:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b60:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	0a5b      	lsrs	r3, r3, #9
 8002b66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b78:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b84:	ee17 3a90 	vmov	r3, s15
 8002b88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b8a:	e005      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61bb      	str	r3, [r7, #24]
      break;
 8002b90:	e002      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002b92:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b94:	61bb      	str	r3, [r7, #24]
      break;
 8002b96:	bf00      	nop
  }

  return sysclockfreq;
 8002b98:	69bb      	ldr	r3, [r7, #24]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	@ 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	03d09000 	.word	0x03d09000
 8002bb0:	003d0900 	.word	0x003d0900
 8002bb4:	017d7840 	.word	0x017d7840
 8002bb8:	46000000 	.word	0x46000000
 8002bbc:	4c742400 	.word	0x4c742400
 8002bc0:	4a742400 	.word	0x4a742400
 8002bc4:	4bbebc20 	.word	0x4bbebc20

08002bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002bce:	f7ff fe81 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b10      	ldr	r3, [pc, #64]	@ (8002c18 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	490f      	ldr	r1, [pc, #60]	@ (8002c1c <HAL_RCC_GetHCLKFreq+0x54>)
 8002be0:	5ccb      	ldrb	r3, [r1, r3]
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bec:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	4a09      	ldr	r2, [pc, #36]	@ (8002c1c <HAL_RCC_GetHCLKFreq+0x54>)
 8002bf6:	5cd3      	ldrb	r3, [r2, r3]
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	4a07      	ldr	r2, [pc, #28]	@ (8002c20 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c06:	4a07      	ldr	r2, [pc, #28]	@ (8002c24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c0c:	4b04      	ldr	r3, [pc, #16]	@ (8002c20 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	58024400 	.word	0x58024400
 8002c1c:	08047d2c 	.word	0x08047d2c
 8002c20:	24000004 	.word	0x24000004
 8002c24:	24000000 	.word	0x24000000

08002c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c2c:	f7ff ffcc 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	4904      	ldr	r1, [pc, #16]	@ (8002c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c3e:	5ccb      	ldrb	r3, [r1, r3]
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	58024400 	.word	0x58024400
 8002c50:	08047d2c 	.word	0x08047d2c

08002c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c58:	f7ff ffb6 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	4904      	ldr	r1, [pc, #16]	@ (8002c7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	58024400 	.word	0x58024400
 8002c7c:	08047d2c 	.word	0x08047d2c

08002c80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c84:	b0ca      	sub	sp, #296	@ 0x128
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c92:	2300      	movs	r3, #0
 8002c94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002ca4:	2500      	movs	r5, #0
 8002ca6:	ea54 0305 	orrs.w	r3, r4, r5
 8002caa:	d049      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002cb6:	d02f      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002cb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002cbc:	d828      	bhi.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002cbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cc2:	d01a      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002cc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cc8:	d822      	bhi.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cd2:	d007      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cd4:	e01c      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd6:	4bb8      	ldr	r3, [pc, #736]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cda:	4ab7      	ldr	r2, [pc, #732]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ce2:	e01a      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce8:	3308      	adds	r3, #8
 8002cea:	2102      	movs	r1, #2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f001 fc8f 	bl	8004610 <RCCEx_PLL2_Config>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002cf8:	e00f      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cfe:	3328      	adds	r3, #40	@ 0x28
 8002d00:	2102      	movs	r1, #2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f001 fd36 	bl	8004774 <RCCEx_PLL3_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d0e:	e004      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d16:	e000      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10a      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d22:	4ba5      	ldr	r3, [pc, #660]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d30:	4aa1      	ldr	r2, [pc, #644]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d32:	430b      	orrs	r3, r1
 8002d34:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d36:	e003      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d48:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002d4c:	f04f 0900 	mov.w	r9, #0
 8002d50:	ea58 0309 	orrs.w	r3, r8, r9
 8002d54:	d047      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d82a      	bhi.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002d60:	a201      	add	r2, pc, #4	@ (adr r2, 8002d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d66:	bf00      	nop
 8002d68:	08002d7d 	.word	0x08002d7d
 8002d6c:	08002d8b 	.word	0x08002d8b
 8002d70:	08002da1 	.word	0x08002da1
 8002d74:	08002dbf 	.word	0x08002dbf
 8002d78:	08002dbf 	.word	0x08002dbf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d7c:	4b8e      	ldr	r3, [pc, #568]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	4a8d      	ldr	r2, [pc, #564]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d88:	e01a      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8e:	3308      	adds	r3, #8
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 fc3c 	bl	8004610 <RCCEx_PLL2_Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d9e:	e00f      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da4:	3328      	adds	r3, #40	@ 0x28
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 fce3 	bl	8004774 <RCCEx_PLL3_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002db4:	e004      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dbc:	e000      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dc8:	4b7b      	ldr	r3, [pc, #492]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dcc:	f023 0107 	bic.w	r1, r3, #7
 8002dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd6:	4a78      	ldr	r2, [pc, #480]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ddc:	e003      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002df2:	f04f 0b00 	mov.w	fp, #0
 8002df6:	ea5a 030b 	orrs.w	r3, sl, fp
 8002dfa:	d04c      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e06:	d030      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e0c:	d829      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e10:	d02d      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002e12:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e14:	d825      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e16:	2b80      	cmp	r3, #128	@ 0x80
 8002e18:	d018      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e1a:	2b80      	cmp	r3, #128	@ 0x80
 8002e1c:	d821      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002e22:	2b40      	cmp	r3, #64	@ 0x40
 8002e24:	d007      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002e26:	e01c      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e28:	4b63      	ldr	r3, [pc, #396]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2c:	4a62      	ldr	r2, [pc, #392]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e34:	e01c      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 fbe6 	bl	8004610 <RCCEx_PLL2_Config>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e4a:	e011      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e50:	3328      	adds	r3, #40	@ 0x28
 8002e52:	2100      	movs	r1, #0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 fc8d 	bl	8004774 <RCCEx_PLL3_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e60:	e006      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e68:	e002      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002e6a:	bf00      	nop
 8002e6c:	e000      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e78:	4b4f      	ldr	r3, [pc, #316]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e7c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e86:	4a4c      	ldr	r2, [pc, #304]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e8c:	e003      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002ea2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002eac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	d053      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ebe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ec2:	d035      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002ec4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ec8:	d82e      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002eca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002ece:	d031      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002ed0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002ed4:	d828      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002ed6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eda:	d01a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002edc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ee0:	d822      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002ee6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002eea:	d007      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002eec:	e01c      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eee:	4b32      	ldr	r3, [pc, #200]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef2:	4a31      	ldr	r2, [pc, #196]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002efa:	e01c      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f00:	3308      	adds	r3, #8
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f001 fb83 	bl	8004610 <RCCEx_PLL2_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f10:	e011      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f16:	3328      	adds	r3, #40	@ 0x28
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 fc2a 	bl	8004774 <RCCEx_PLL3_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f26:	e006      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f2e:	e002      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f30:	bf00      	nop
 8002f32:	e000      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10b      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f42:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f54:	e003      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002f6a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002f74:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	d056      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002f86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f8a:	d038      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002f8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f90:	d831      	bhi.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f96:	d034      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002f98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f9c:	d82b      	bhi.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fa2:	d01d      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002fa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fa8:	d825      	bhi.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d006      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002fae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002fb4:	e01f      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002fb6:	bf00      	nop
 8002fb8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fbc:	4ba2      	ldr	r3, [pc, #648]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc0:	4aa1      	ldr	r2, [pc, #644]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fc8:	e01c      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fce:	3308      	adds	r3, #8
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 fb1c 	bl	8004610 <RCCEx_PLL2_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002fde:	e011      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe4:	3328      	adds	r3, #40	@ 0x28
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f001 fbc3 	bl	8004774 <RCCEx_PLL3_Config>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ff4:	e006      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ffc:	e002      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800300c:	4b8e      	ldr	r3, [pc, #568]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003010:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003018:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800301c:	4a8a      	ldr	r2, [pc, #552]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800301e:	430b      	orrs	r3, r1
 8003020:	6593      	str	r3, [r2, #88]	@ 0x58
 8003022:	e003      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003024:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003028:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800302c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003034:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003038:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800303c:	2300      	movs	r3, #0
 800303e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003042:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003046:	460b      	mov	r3, r1
 8003048:	4313      	orrs	r3, r2
 800304a:	d03a      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800304c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003052:	2b30      	cmp	r3, #48	@ 0x30
 8003054:	d01f      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003056:	2b30      	cmp	r3, #48	@ 0x30
 8003058:	d819      	bhi.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800305a:	2b20      	cmp	r3, #32
 800305c:	d00c      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800305e:	2b20      	cmp	r3, #32
 8003060:	d815      	bhi.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003062:	2b00      	cmp	r3, #0
 8003064:	d019      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003066:	2b10      	cmp	r3, #16
 8003068:	d111      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800306a:	4b77      	ldr	r3, [pc, #476]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800306c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306e:	4a76      	ldr	r2, [pc, #472]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003074:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003076:	e011      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307c:	3308      	adds	r3, #8
 800307e:	2102      	movs	r1, #2
 8003080:	4618      	mov	r0, r3
 8003082:	f001 fac5 	bl	8004610 <RCCEx_PLL2_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800308c:	e006      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003094:	e002      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003096:	bf00      	nop
 8003098:	e000      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800309a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800309c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10a      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80030a4:	4b68      	ldr	r3, [pc, #416]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80030ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b2:	4a65      	ldr	r2, [pc, #404]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030b4:	430b      	orrs	r3, r1
 80030b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030b8:	e003      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80030c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80030ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80030d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80030dc:	460b      	mov	r3, r1
 80030de:	4313      	orrs	r3, r2
 80030e0:	d051      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80030e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030ec:	d035      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80030ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030f2:	d82e      	bhi.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80030f8:	d031      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80030fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80030fe:	d828      	bhi.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003104:	d01a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800310a:	d822      	bhi.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003114:	d007      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003116:	e01c      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003118:	4b4b      	ldr	r3, [pc, #300]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800311a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311c:	4a4a      	ldr	r2, [pc, #296]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800311e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003122:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003124:	e01c      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312a:	3308      	adds	r3, #8
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f001 fa6e 	bl	8004610 <RCCEx_PLL2_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800313a:	e011      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800313c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003140:	3328      	adds	r3, #40	@ 0x28
 8003142:	2100      	movs	r1, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f001 fb15 	bl	8004774 <RCCEx_PLL3_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003150:	e006      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003158:	e002      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800315a:	bf00      	nop
 800315c:	e000      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800315e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003168:	4b37      	ldr	r3, [pc, #220]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800316a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800316c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003176:	4a34      	ldr	r2, [pc, #208]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003178:	430b      	orrs	r3, r1
 800317a:	6513      	str	r3, [r2, #80]	@ 0x50
 800317c:	e003      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003192:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800319c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80031a0:	460b      	mov	r3, r1
 80031a2:	4313      	orrs	r3, r2
 80031a4:	d056      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80031a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031b0:	d033      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80031b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031b6:	d82c      	bhi.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031bc:	d02f      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80031be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031c2:	d826      	bhi.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031c8:	d02b      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80031ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031ce:	d820      	bhi.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031d4:	d012      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80031d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031da:	d81a      	bhi.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d022      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e4:	d115      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ea:	3308      	adds	r3, #8
 80031ec:	2101      	movs	r1, #1
 80031ee:	4618      	mov	r0, r3
 80031f0:	f001 fa0e 	bl	8004610 <RCCEx_PLL2_Config>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80031fa:	e015      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003200:	3328      	adds	r3, #40	@ 0x28
 8003202:	2101      	movs	r1, #1
 8003204:	4618      	mov	r0, r3
 8003206:	f001 fab5 	bl	8004774 <RCCEx_PLL3_Config>
 800320a:	4603      	mov	r3, r0
 800320c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003210:	e00a      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003218:	e006      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800321a:	bf00      	nop
 800321c:	e004      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800321e:	bf00      	nop
 8003220:	e002      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003222:	bf00      	nop
 8003224:	e000      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10d      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003230:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003234:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800323e:	4a02      	ldr	r2, [pc, #8]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003240:	430b      	orrs	r3, r1
 8003242:	6513      	str	r3, [r2, #80]	@ 0x50
 8003244:	e006      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003246:	bf00      	nop
 8003248:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003250:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003260:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003264:	2300      	movs	r3, #0
 8003266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800326a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800326e:	460b      	mov	r3, r1
 8003270:	4313      	orrs	r3, r2
 8003272:	d055      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003278:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800327c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003280:	d033      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003282:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003286:	d82c      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328c:	d02f      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003292:	d826      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003294:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003298:	d02b      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800329a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800329e:	d820      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032a4:	d012      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80032a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032aa:	d81a      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d022      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80032b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032b4:	d115      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ba:	3308      	adds	r3, #8
 80032bc:	2101      	movs	r1, #1
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 f9a6 	bl	8004610 <RCCEx_PLL2_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80032ca:	e015      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d0:	3328      	adds	r3, #40	@ 0x28
 80032d2:	2101      	movs	r1, #1
 80032d4:	4618      	mov	r0, r3
 80032d6:	f001 fa4d 	bl	8004774 <RCCEx_PLL3_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80032e0:	e00a      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032e8:	e006      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032ea:	bf00      	nop
 80032ec:	e004      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032ee:	bf00      	nop
 80032f0:	e002      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032f2:	bf00      	nop
 80032f4:	e000      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10b      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003300:	4ba3      	ldr	r3, [pc, #652]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003304:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003310:	4a9f      	ldr	r2, [pc, #636]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003312:	430b      	orrs	r3, r1
 8003314:	6593      	str	r3, [r2, #88]	@ 0x58
 8003316:	e003      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800331c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800332c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003336:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800333a:	460b      	mov	r3, r1
 800333c:	4313      	orrs	r3, r2
 800333e:	d037      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800334a:	d00e      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800334c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003350:	d816      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003352:	2b00      	cmp	r3, #0
 8003354:	d018      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003356:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800335a:	d111      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800335c:	4b8c      	ldr	r3, [pc, #560]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	4a8b      	ldr	r2, [pc, #556]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003368:	e00f      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800336a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336e:	3308      	adds	r3, #8
 8003370:	2101      	movs	r1, #1
 8003372:	4618      	mov	r0, r3
 8003374:	f001 f94c 	bl	8004610 <RCCEx_PLL2_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800337e:	e004      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003386:	e000      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800338a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003392:	4b7f      	ldr	r3, [pc, #508]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003396:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800339a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a0:	4a7b      	ldr	r2, [pc, #492]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a2:	430b      	orrs	r3, r1
 80033a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80033a6:	e003      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80033bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80033c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4313      	orrs	r3, r2
 80033ce:	d039      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d81c      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80033da:	a201      	add	r2, pc, #4	@ (adr r2, 80033e0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	0800341d 	.word	0x0800341d
 80033e4:	080033f1 	.word	0x080033f1
 80033e8:	080033ff 	.word	0x080033ff
 80033ec:	0800341d 	.word	0x0800341d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f0:	4b67      	ldr	r3, [pc, #412]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	4a66      	ldr	r2, [pc, #408]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80033fc:	e00f      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003402:	3308      	adds	r3, #8
 8003404:	2102      	movs	r1, #2
 8003406:	4618      	mov	r0, r3
 8003408:	f001 f902 	bl	8004610 <RCCEx_PLL2_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003412:	e004      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800341a:	e000      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800341c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800341e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003426:	4b5a      	ldr	r3, [pc, #360]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342a:	f023 0103 	bic.w	r1, r3, #3
 800342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003434:	4a56      	ldr	r2, [pc, #344]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003436:	430b      	orrs	r3, r1
 8003438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800343a:	e003      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003440:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003450:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800345a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800345e:	460b      	mov	r3, r1
 8003460:	4313      	orrs	r3, r2
 8003462:	f000 809f 	beq.w	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003466:	4b4b      	ldr	r3, [pc, #300]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a4a      	ldr	r2, [pc, #296]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800346c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003470:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003472:	f7fe f869 	bl	8001548 <HAL_GetTick>
 8003476:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800347a:	e00b      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347c:	f7fe f864 	bl	8001548 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b64      	cmp	r3, #100	@ 0x64
 800348a:	d903      	bls.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003492:	e005      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003494:	4b3f      	ldr	r3, [pc, #252]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ed      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80034a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d179      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80034a8:	4b39      	ldr	r3, [pc, #228]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80034ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034b4:	4053      	eors	r3, r2
 80034b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d015      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034be:	4b34      	ldr	r3, [pc, #208]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034ca:	4b31      	ldr	r3, [pc, #196]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ce:	4a30      	ldr	r2, [pc, #192]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034da:	4a2d      	ldr	r2, [pc, #180]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80034e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034f6:	d118      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe f826 	bl	8001548 <HAL_GetTick>
 80034fc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003500:	e00d      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003502:	f7fe f821 	bl	8001548 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800350c:	1ad2      	subs	r2, r2, r3
 800350e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003512:	429a      	cmp	r2, r3
 8003514:	d903      	bls.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800351c:	e005      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800351e:	4b1c      	ldr	r3, [pc, #112]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0eb      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800352a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800352e:	2b00      	cmp	r3, #0
 8003530:	d129      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003536:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800353a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800353e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003542:	d10e      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003544:	4b12      	ldr	r3, [pc, #72]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800354c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003550:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003554:	091a      	lsrs	r2, r3, #4
 8003556:	4b10      	ldr	r3, [pc, #64]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003558:	4013      	ands	r3, r2
 800355a:	4a0d      	ldr	r2, [pc, #52]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800355c:	430b      	orrs	r3, r1
 800355e:	6113      	str	r3, [r2, #16]
 8003560:	e005      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003562:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	4a0a      	ldr	r2, [pc, #40]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003568:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800356c:	6113      	str	r3, [r2, #16]
 800356e:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003570:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003576:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800357a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357e:	4a04      	ldr	r2, [pc, #16]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003580:	430b      	orrs	r3, r1
 8003582:	6713      	str	r3, [r2, #112]	@ 0x70
 8003584:	e00e      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800358a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800358e:	e009      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003590:	58024400 	.word	0x58024400
 8003594:	58024800 	.word	0x58024800
 8003598:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80035a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f002 0301 	and.w	r3, r2, #1
 80035b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035be:	460b      	mov	r3, r1
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f000 8089 	beq.w	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035cc:	2b28      	cmp	r3, #40	@ 0x28
 80035ce:	d86b      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80035d0:	a201      	add	r2, pc, #4	@ (adr r2, 80035d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d6:	bf00      	nop
 80035d8:	080036b1 	.word	0x080036b1
 80035dc:	080036a9 	.word	0x080036a9
 80035e0:	080036a9 	.word	0x080036a9
 80035e4:	080036a9 	.word	0x080036a9
 80035e8:	080036a9 	.word	0x080036a9
 80035ec:	080036a9 	.word	0x080036a9
 80035f0:	080036a9 	.word	0x080036a9
 80035f4:	080036a9 	.word	0x080036a9
 80035f8:	0800367d 	.word	0x0800367d
 80035fc:	080036a9 	.word	0x080036a9
 8003600:	080036a9 	.word	0x080036a9
 8003604:	080036a9 	.word	0x080036a9
 8003608:	080036a9 	.word	0x080036a9
 800360c:	080036a9 	.word	0x080036a9
 8003610:	080036a9 	.word	0x080036a9
 8003614:	080036a9 	.word	0x080036a9
 8003618:	08003693 	.word	0x08003693
 800361c:	080036a9 	.word	0x080036a9
 8003620:	080036a9 	.word	0x080036a9
 8003624:	080036a9 	.word	0x080036a9
 8003628:	080036a9 	.word	0x080036a9
 800362c:	080036a9 	.word	0x080036a9
 8003630:	080036a9 	.word	0x080036a9
 8003634:	080036a9 	.word	0x080036a9
 8003638:	080036b1 	.word	0x080036b1
 800363c:	080036a9 	.word	0x080036a9
 8003640:	080036a9 	.word	0x080036a9
 8003644:	080036a9 	.word	0x080036a9
 8003648:	080036a9 	.word	0x080036a9
 800364c:	080036a9 	.word	0x080036a9
 8003650:	080036a9 	.word	0x080036a9
 8003654:	080036a9 	.word	0x080036a9
 8003658:	080036b1 	.word	0x080036b1
 800365c:	080036a9 	.word	0x080036a9
 8003660:	080036a9 	.word	0x080036a9
 8003664:	080036a9 	.word	0x080036a9
 8003668:	080036a9 	.word	0x080036a9
 800366c:	080036a9 	.word	0x080036a9
 8003670:	080036a9 	.word	0x080036a9
 8003674:	080036a9 	.word	0x080036a9
 8003678:	080036b1 	.word	0x080036b1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800367c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003680:	3308      	adds	r3, #8
 8003682:	2101      	movs	r1, #1
 8003684:	4618      	mov	r0, r3
 8003686:	f000 ffc3 	bl	8004610 <RCCEx_PLL2_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003690:	e00f      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003696:	3328      	adds	r3, #40	@ 0x28
 8003698:	2101      	movs	r1, #1
 800369a:	4618      	mov	r0, r3
 800369c:	f001 f86a 	bl	8004774 <RCCEx_PLL3_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036a6:	e004      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036ae:	e000      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80036b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80036ba:	4bbf      	ldr	r3, [pc, #764]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036be:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80036c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036c8:	4abb      	ldr	r2, [pc, #748]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036ca:	430b      	orrs	r3, r1
 80036cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80036ce:	e003      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f002 0302 	and.w	r3, r2, #2
 80036e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80036ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	d041      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80036f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036fe:	2b05      	cmp	r3, #5
 8003700:	d824      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003702:	a201      	add	r2, pc, #4	@ (adr r2, 8003708 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003708:	08003755 	.word	0x08003755
 800370c:	08003721 	.word	0x08003721
 8003710:	08003737 	.word	0x08003737
 8003714:	08003755 	.word	0x08003755
 8003718:	08003755 	.word	0x08003755
 800371c:	08003755 	.word	0x08003755
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003724:	3308      	adds	r3, #8
 8003726:	2101      	movs	r1, #1
 8003728:	4618      	mov	r0, r3
 800372a:	f000 ff71 	bl	8004610 <RCCEx_PLL2_Config>
 800372e:	4603      	mov	r3, r0
 8003730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003734:	e00f      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373a:	3328      	adds	r3, #40	@ 0x28
 800373c:	2101      	movs	r1, #1
 800373e:	4618      	mov	r0, r3
 8003740:	f001 f818 	bl	8004774 <RCCEx_PLL3_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800374a:	e004      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003752:	e000      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10a      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800375e:	4b96      	ldr	r3, [pc, #600]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003762:	f023 0107 	bic.w	r1, r3, #7
 8003766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800376c:	4a92      	ldr	r2, [pc, #584]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800376e:	430b      	orrs	r3, r1
 8003770:	6553      	str	r3, [r2, #84]	@ 0x54
 8003772:	e003      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003778:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800377c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	f002 0304 	and.w	r3, r2, #4
 8003788:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003792:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003796:	460b      	mov	r3, r1
 8003798:	4313      	orrs	r3, r2
 800379a:	d044      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800379c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037a4:	2b05      	cmp	r3, #5
 80037a6:	d825      	bhi.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80037a8:	a201      	add	r2, pc, #4	@ (adr r2, 80037b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80037aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ae:	bf00      	nop
 80037b0:	080037fd 	.word	0x080037fd
 80037b4:	080037c9 	.word	0x080037c9
 80037b8:	080037df 	.word	0x080037df
 80037bc:	080037fd 	.word	0x080037fd
 80037c0:	080037fd 	.word	0x080037fd
 80037c4:	080037fd 	.word	0x080037fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037cc:	3308      	adds	r3, #8
 80037ce:	2101      	movs	r1, #1
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 ff1d 	bl	8004610 <RCCEx_PLL2_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80037dc:	e00f      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	3328      	adds	r3, #40	@ 0x28
 80037e4:	2101      	movs	r1, #1
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 ffc4 	bl	8004774 <RCCEx_PLL3_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80037f2:	e004      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037fa:	e000      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80037fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003806:	4b6c      	ldr	r3, [pc, #432]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380a:	f023 0107 	bic.w	r1, r3, #7
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003816:	4a68      	ldr	r2, [pc, #416]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003818:	430b      	orrs	r3, r1
 800381a:	6593      	str	r3, [r2, #88]	@ 0x58
 800381c:	e003      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f002 0320 	and.w	r3, r2, #32
 8003832:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800383c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003840:	460b      	mov	r3, r1
 8003842:	4313      	orrs	r3, r2
 8003844:	d055      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003852:	d033      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003854:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003858:	d82c      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800385a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800385e:	d02f      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003864:	d826      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003866:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800386a:	d02b      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800386c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003870:	d820      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003876:	d012      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800387c:	d81a      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800387e:	2b00      	cmp	r3, #0
 8003880:	d022      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003886:	d115      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388c:	3308      	adds	r3, #8
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f000 febd 	bl	8004610 <RCCEx_PLL2_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800389c:	e015      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800389e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a2:	3328      	adds	r3, #40	@ 0x28
 80038a4:	2102      	movs	r1, #2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 ff64 	bl	8004774 <RCCEx_PLL3_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038b2:	e00a      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038ba:	e006      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80038bc:	bf00      	nop
 80038be:	e004      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80038c0:	bf00      	nop
 80038c2:	e002      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80038c4:	bf00      	nop
 80038c6:	e000      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80038c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10b      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038d2:	4b39      	ldr	r3, [pc, #228]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e2:	4a35      	ldr	r2, [pc, #212]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80038e8:	e003      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80038fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003902:	2300      	movs	r3, #0
 8003904:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003908:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800390c:	460b      	mov	r3, r1
 800390e:	4313      	orrs	r3, r2
 8003910:	d058      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003916:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800391a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800391e:	d033      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003920:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003924:	d82c      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800392a:	d02f      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800392c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003930:	d826      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003932:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003936:	d02b      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003938:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800393c:	d820      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800393e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003942:	d012      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003948:	d81a      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d022      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800394e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003952:	d115      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003958:	3308      	adds	r3, #8
 800395a:	2100      	movs	r1, #0
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fe57 	bl	8004610 <RCCEx_PLL2_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003968:	e015      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396e:	3328      	adds	r3, #40	@ 0x28
 8003970:	2102      	movs	r1, #2
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fefe 	bl	8004774 <RCCEx_PLL3_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800397e:	e00a      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003986:	e006      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003988:	bf00      	nop
 800398a:	e004      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800398c:	bf00      	nop
 800398e:	e002      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003990:	bf00      	nop
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10e      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800399e:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039ae:	4a02      	ldr	r2, [pc, #8]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80039b4:	e006      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80039b6:	bf00      	nop
 80039b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80039c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039cc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80039d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039d4:	2300      	movs	r3, #0
 80039d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039da:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80039de:	460b      	mov	r3, r1
 80039e0:	4313      	orrs	r3, r2
 80039e2:	d055      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80039ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80039f0:	d033      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80039f2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80039f6:	d82c      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039fc:	d02f      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80039fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a02:	d826      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003a08:	d02b      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003a0a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003a0e:	d820      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a14:	d012      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003a16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a1a:	d81a      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d022      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a24:	d115      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fdee 	bl	8004610 <RCCEx_PLL2_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a3a:	e015      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a40:	3328      	adds	r3, #40	@ 0x28
 8003a42:	2102      	movs	r1, #2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fe95 	bl	8004774 <RCCEx_PLL3_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a50:	e00a      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a58:	e006      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a5a:	bf00      	nop
 8003a5c:	e004      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a5e:	bf00      	nop
 8003a60:	e002      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a62:	bf00      	nop
 8003a64:	e000      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10b      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003a70:	4ba1      	ldr	r3, [pc, #644]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a74:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a80:	4a9d      	ldr	r2, [pc, #628]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a82:	430b      	orrs	r3, r1
 8003a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a86:	e003      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f002 0308 	and.w	r3, r2, #8
 8003a9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003aa6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4313      	orrs	r3, r2
 8003aae:	d01e      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac2:	3328      	adds	r3, #40	@ 0x28
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fe54 	bl	8004774 <RCCEx_PLL3_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ad8:	4b87      	ldr	r3, [pc, #540]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003adc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ae8:	4a83      	ldr	r2, [pc, #524]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003aea:	430b      	orrs	r3, r1
 8003aec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	f002 0310 	and.w	r3, r2, #16
 8003afa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003afe:	2300      	movs	r3, #0
 8003b00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003b04:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	d01e      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b1a:	d10c      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b20:	3328      	adds	r3, #40	@ 0x28
 8003b22:	2102      	movs	r1, #2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fe25 	bl	8004774 <RCCEx_PLL3_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b36:	4b70      	ldr	r3, [pc, #448]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b46:	4a6c      	ldr	r2, [pc, #432]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003b58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b62:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003b66:	460b      	mov	r3, r1
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	d03e      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b78:	d022      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003b7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b7e:	d81b      	bhi.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b88:	d00b      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003b8a:	e015      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	3308      	adds	r3, #8
 8003b92:	2100      	movs	r1, #0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fd3b 	bl	8004610 <RCCEx_PLL2_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ba0:	e00f      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba6:	3328      	adds	r3, #40	@ 0x28
 8003ba8:	2102      	movs	r1, #2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fde2 	bl	8004774 <RCCEx_PLL3_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003bb6:	e004      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10b      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bca:	4b4b      	ldr	r3, [pc, #300]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003bda:	4a47      	ldr	r2, [pc, #284]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8003be0:	e003      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003bf6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bfc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003c00:	460b      	mov	r3, r1
 8003c02:	4313      	orrs	r3, r2
 8003c04:	d03b      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c12:	d01f      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003c14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c18:	d818      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003c1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c1e:	d003      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003c20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c24:	d007      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003c26:	e011      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c28:	4b33      	ldr	r3, [pc, #204]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2c:	4a32      	ldr	r2, [pc, #200]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c34:	e00f      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3a:	3328      	adds	r3, #40	@ 0x28
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fd98 	bl	8004774 <RCCEx_PLL3_Config>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c4a:	e004      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c52:	e000      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10b      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c5e:	4b26      	ldr	r3, [pc, #152]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6e:	4a22      	ldr	r2, [pc, #136]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c74:	e003      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003c8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c90:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003c94:	460b      	mov	r3, r1
 8003c96:	4313      	orrs	r3, r2
 8003c98:	d034      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca8:	d007      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003caa:	e011      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cac:	4b12      	ldr	r3, [pc, #72]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb0:	4a11      	ldr	r2, [pc, #68]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003cb8:	e00e      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbe:	3308      	adds	r3, #8
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fca4 	bl	8004610 <RCCEx_PLL2_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003cce:	e003      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10d      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003ce0:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cee:	4a02      	ldr	r2, [pc, #8]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cf4:	e006      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003cf6:	bf00      	nop
 8003cf8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003d10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d12:	2300      	movs	r3, #0
 8003d14:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d16:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	d00c      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d24:	3328      	adds	r3, #40	@ 0x28
 8003d26:	2102      	movs	r1, #2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fd23 	bl	8004774 <RCCEx_PLL3_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003d46:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d48:	2300      	movs	r3, #0
 8003d4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d4c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003d50:	460b      	mov	r3, r1
 8003d52:	4313      	orrs	r3, r2
 8003d54:	d038      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d62:	d018      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003d64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d68:	d811      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003d6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d6e:	d014      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d74:	d80b      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d011      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d80:	4bc3      	ldr	r3, [pc, #780]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d84:	4ac2      	ldr	r2, [pc, #776]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003d8c:	e008      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d94:	e004      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10b      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003da8:	4bb9      	ldr	r3, [pc, #740]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003db8:	4ab5      	ldr	r2, [pc, #724]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dbe:	e003      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003dd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dda:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003dde:	460b      	mov	r3, r1
 8003de0:	4313      	orrs	r3, r2
 8003de2:	d009      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003de4:	4baa      	ldr	r3, [pc, #680]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df2:	4aa7      	ldr	r2, [pc, #668]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003e04:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e06:	2300      	movs	r3, #0
 8003e08:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e0a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003e14:	4b9e      	ldr	r3, [pc, #632]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003e24:	4a9a      	ldr	r2, [pc, #616]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e26:	430b      	orrs	r3, r1
 8003e28:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e38:	2300      	movs	r3, #0
 8003e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e3c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003e40:	460b      	mov	r3, r1
 8003e42:	4313      	orrs	r3, r2
 8003e44:	d009      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e46:	4b92      	ldr	r3, [pc, #584]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e54:	4a8e      	ldr	r2, [pc, #568]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e56:	430b      	orrs	r3, r1
 8003e58:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003e66:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e68:	2300      	movs	r3, #0
 8003e6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e6c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003e70:	460b      	mov	r3, r1
 8003e72:	4313      	orrs	r3, r2
 8003e74:	d00e      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e76:	4b86      	ldr	r3, [pc, #536]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	4a85      	ldr	r2, [pc, #532]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e7c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e80:	6113      	str	r3, [r2, #16]
 8003e82:	4b83      	ldr	r3, [pc, #524]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e84:	6919      	ldr	r1, [r3, #16]
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e8e:	4a80      	ldr	r2, [pc, #512]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ea6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4313      	orrs	r3, r2
 8003eae:	d009      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003eb0:	4b77      	ldr	r3, [pc, #476]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eb4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebe:	4a74      	ldr	r2, [pc, #464]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003ed0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ed6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003eda:	460b      	mov	r3, r1
 8003edc:	4313      	orrs	r3, r2
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ee0:	4b6b      	ldr	r3, [pc, #428]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ef0:	4a67      	ldr	r2, [pc, #412]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ef2:	430b      	orrs	r3, r1
 8003ef4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efe:	2100      	movs	r1, #0
 8003f00:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f08:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	d011      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f16:	3308      	adds	r3, #8
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fb78 	bl	8004610 <RCCEx_PLL2_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	2100      	movs	r1, #0
 8003f40:	6239      	str	r1, [r7, #32]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f48:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	d011      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f56:	3308      	adds	r3, #8
 8003f58:	2101      	movs	r1, #1
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fb58 	bl	8004610 <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	2100      	movs	r1, #0
 8003f80:	61b9      	str	r1, [r7, #24]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	d011      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f96:	3308      	adds	r3, #8
 8003f98:	2102      	movs	r1, #2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fb38 	bl	8004610 <RCCEx_PLL2_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	6139      	str	r1, [r7, #16]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	d011      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd6:	3328      	adds	r3, #40	@ 0x28
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fbca 	bl	8004774 <RCCEx_PLL3_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	2100      	movs	r1, #0
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800400c:	460b      	mov	r3, r1
 800400e:	4313      	orrs	r3, r2
 8004010:	d011      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004016:	3328      	adds	r3, #40	@ 0x28
 8004018:	2101      	movs	r1, #1
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fbaa 	bl	8004774 <RCCEx_PLL3_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004032:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	2100      	movs	r1, #0
 8004040:	6039      	str	r1, [r7, #0]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	607b      	str	r3, [r7, #4]
 8004048:	e9d7 1200 	ldrd	r1, r2, [r7]
 800404c:	460b      	mov	r3, r1
 800404e:	4313      	orrs	r3, r2
 8004050:	d011      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004056:	3328      	adds	r3, #40	@ 0x28
 8004058:	2102      	movs	r1, #2
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fb8a 	bl	8004774 <RCCEx_PLL3_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004076:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	e000      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
}
 8004084:	4618      	mov	r0, r3
 8004086:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800408a:	46bd      	mov	sp, r7
 800408c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004090:	58024400 	.word	0x58024400

08004094 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004098:	f7fe fd96 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b06      	ldr	r3, [pc, #24]	@ (80040b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	091b      	lsrs	r3, r3, #4
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4904      	ldr	r1, [pc, #16]	@ (80040bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	58024400 	.word	0x58024400
 80040bc:	08047d2c 	.word	0x08047d2c

080040c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	@ 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040c8:	4ba1      	ldr	r3, [pc, #644]	@ (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80040d2:	4b9f      	ldr	r3, [pc, #636]	@ (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d6:	0b1b      	lsrs	r3, r3, #12
 80040d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80040de:	4b9c      	ldr	r3, [pc, #624]	@ (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	091b      	lsrs	r3, r3, #4
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80040ea:	4b99      	ldr	r3, [pc, #612]	@ (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ee:	08db      	lsrs	r3, r3, #3
 80040f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004102:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8111 	beq.w	8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b02      	cmp	r3, #2
 8004112:	f000 8083 	beq.w	800421c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b02      	cmp	r3, #2
 800411a:	f200 80a1 	bhi.w	8004260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d056      	beq.n	80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800412a:	e099      	b.n	8004260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800412c:	4b88      	ldr	r3, [pc, #544]	@ (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d02d      	beq.n	8004194 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004138:	4b85      	ldr	r3, [pc, #532]	@ (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	08db      	lsrs	r3, r3, #3
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	4a84      	ldr	r2, [pc, #528]	@ (8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
 8004148:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	ee07 3a90 	vmov	s15, r3
 8004150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004162:	4b7b      	ldr	r3, [pc, #492]	@ (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004172:	ed97 6a03 	vldr	s12, [r7, #12]
 8004176:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800417a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800417e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800418a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004192:	e087      	b.n	80042a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800435c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80041a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ae:	ee07 3a90 	vmov	s15, r3
 80041b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041d6:	e065      	b.n	80042a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ea:	4b59      	ldr	r3, [pc, #356]	@ (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80041fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800420e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800421a:	e043      	b.n	80042a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800422a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422e:	4b48      	ldr	r3, [pc, #288]	@ (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004242:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800424a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800425e:	e021      	b.n	80042a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800426e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004272:	4b37      	ldr	r3, [pc, #220]	@ (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004282:	ed97 6a03 	vldr	s12, [r7, #12]
 8004286:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800428a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800429a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80042a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a8:	0a5b      	lsrs	r3, r3, #9
 80042aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042be:	edd7 6a07 	vldr	s13, [r7, #28]
 80042c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ca:	ee17 2a90 	vmov	r2, s15
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80042d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d6:	0c1b      	lsrs	r3, r3, #16
 80042d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042dc:	ee07 3a90 	vmov	s15, r3
 80042e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80042f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f8:	ee17 2a90 	vmov	r2, s15
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004300:	4b13      	ldr	r3, [pc, #76]	@ (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004304:	0e1b      	lsrs	r3, r3, #24
 8004306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800431a:	edd7 6a07 	vldr	s13, [r7, #28]
 800431e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004326:	ee17 2a90 	vmov	r2, s15
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800432e:	e008      	b.n	8004342 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	609a      	str	r2, [r3, #8]
}
 8004342:	bf00      	nop
 8004344:	3724      	adds	r7, #36	@ 0x24
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	58024400 	.word	0x58024400
 8004354:	03d09000 	.word	0x03d09000
 8004358:	46000000 	.word	0x46000000
 800435c:	4c742400 	.word	0x4c742400
 8004360:	4a742400 	.word	0x4a742400
 8004364:	4bbebc20 	.word	0x4bbebc20

08004368 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	@ 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004370:	4ba1      	ldr	r3, [pc, #644]	@ (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800437a:	4b9f      	ldr	r3, [pc, #636]	@ (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437e:	0d1b      	lsrs	r3, r3, #20
 8004380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004384:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004386:	4b9c      	ldr	r3, [pc, #624]	@ (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	0a1b      	lsrs	r3, r3, #8
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004392:	4b99      	ldr	r3, [pc, #612]	@ (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004396:	08db      	lsrs	r3, r3, #3
 8004398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	ee07 3a90 	vmov	s15, r3
 80043a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8111 	beq.w	80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	f000 8083 	beq.w	80044c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	f200 80a1 	bhi.w	8004508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d056      	beq.n	8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80043d2:	e099      	b.n	8004508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043d4:	4b88      	ldr	r3, [pc, #544]	@ (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d02d      	beq.n	800443c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043e0:	4b85      	ldr	r3, [pc, #532]	@ (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	08db      	lsrs	r3, r3, #3
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	4a84      	ldr	r2, [pc, #528]	@ (80045fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
 80043f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	ee07 3a90 	vmov	s15, r3
 80043f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440a:	4b7b      	ldr	r3, [pc, #492]	@ (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441a:	ed97 6a03 	vldr	s12, [r7, #12]
 800441e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800442e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004436:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800443a:	e087      	b.n	800454c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004446:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004604 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800444a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444e:	4b6a      	ldr	r3, [pc, #424]	@ (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004462:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800446e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800447e:	e065      	b.n	800454c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800448e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004492:	4b59      	ldr	r3, [pc, #356]	@ (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044c2:	e043      	b.n	800454c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800460c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80044d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d6:	4b48      	ldr	r3, [pc, #288]	@ (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004506:	e021      	b.n	800454c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451a:	4b37      	ldr	r3, [pc, #220]	@ (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452a:	ed97 6a03 	vldr	s12, [r7, #12]
 800452e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800453e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800454a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800454c:	4b2a      	ldr	r3, [pc, #168]	@ (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800454e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004550:	0a5b      	lsrs	r3, r3, #9
 8004552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004562:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004566:	edd7 6a07 	vldr	s13, [r7, #28]
 800456a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800456e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004572:	ee17 2a90 	vmov	r2, s15
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800457a:	4b1f      	ldr	r3, [pc, #124]	@ (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004590:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004594:	edd7 6a07 	vldr	s13, [r7, #28]
 8004598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800459c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a0:	ee17 2a90 	vmov	r2, s15
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80045a8:	4b13      	ldr	r3, [pc, #76]	@ (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ac:	0e1b      	lsrs	r3, r3, #24
 80045ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ce:	ee17 2a90 	vmov	r2, s15
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80045d6:	e008      	b.n	80045ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]
}
 80045ea:	bf00      	nop
 80045ec:	3724      	adds	r7, #36	@ 0x24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	58024400 	.word	0x58024400
 80045fc:	03d09000 	.word	0x03d09000
 8004600:	46000000 	.word	0x46000000
 8004604:	4c742400 	.word	0x4c742400
 8004608:	4a742400 	.word	0x4a742400
 800460c:	4bbebc20 	.word	0x4bbebc20

08004610 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800461e:	4b53      	ldr	r3, [pc, #332]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 8004620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b03      	cmp	r3, #3
 8004628:	d101      	bne.n	800462e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e099      	b.n	8004762 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800462e:	4b4f      	ldr	r3, [pc, #316]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a4e      	ldr	r2, [pc, #312]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 8004634:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463a:	f7fc ff85 	bl	8001548 <HAL_GetTick>
 800463e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004640:	e008      	b.n	8004654 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004642:	f7fc ff81 	bl	8001548 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e086      	b.n	8004762 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004654:	4b45      	ldr	r3, [pc, #276]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f0      	bne.n	8004642 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004660:	4b42      	ldr	r3, [pc, #264]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 8004662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004664:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	031b      	lsls	r3, r3, #12
 800466e:	493f      	ldr	r1, [pc, #252]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	628b      	str	r3, [r1, #40]	@ 0x28
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	3b01      	subs	r3, #1
 800467a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	3b01      	subs	r3, #1
 8004684:	025b      	lsls	r3, r3, #9
 8004686:	b29b      	uxth	r3, r3
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	3b01      	subs	r3, #1
 8004690:	041b      	lsls	r3, r3, #16
 8004692:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	3b01      	subs	r3, #1
 800469e:	061b      	lsls	r3, r3, #24
 80046a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80046a4:	4931      	ldr	r1, [pc, #196]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046aa:	4b30      	ldr	r3, [pc, #192]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	492d      	ldr	r1, [pc, #180]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80046bc:	4b2b      	ldr	r3, [pc, #172]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 80046be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c0:	f023 0220 	bic.w	r2, r3, #32
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	4928      	ldr	r1, [pc, #160]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80046ce:	4b27      	ldr	r3, [pc, #156]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 80046d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d2:	4a26      	ldr	r2, [pc, #152]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 80046d4:	f023 0310 	bic.w	r3, r3, #16
 80046d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80046da:	4b24      	ldr	r3, [pc, #144]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 80046dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046de:	4b24      	ldr	r3, [pc, #144]	@ (8004770 <RCCEx_PLL2_Config+0x160>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	69d2      	ldr	r2, [r2, #28]
 80046e6:	00d2      	lsls	r2, r2, #3
 80046e8:	4920      	ldr	r1, [pc, #128]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046ee:	4b1f      	ldr	r3, [pc, #124]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 80046f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f2:	4a1e      	ldr	r2, [pc, #120]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 80046f4:	f043 0310 	orr.w	r3, r3, #16
 80046f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d106      	bne.n	800470e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004700:	4b1a      	ldr	r3, [pc, #104]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 8004702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004704:	4a19      	ldr	r2, [pc, #100]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 8004706:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800470a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800470c:	e00f      	b.n	800472e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d106      	bne.n	8004722 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004714:	4b15      	ldr	r3, [pc, #84]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004718:	4a14      	ldr	r2, [pc, #80]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 800471a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800471e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004720:	e005      	b.n	800472e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004722:	4b12      	ldr	r3, [pc, #72]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 8004724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004726:	4a11      	ldr	r2, [pc, #68]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 8004728:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800472c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800472e:	4b0f      	ldr	r3, [pc, #60]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a0e      	ldr	r2, [pc, #56]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 8004734:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473a:	f7fc ff05 	bl	8001548 <HAL_GetTick>
 800473e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004740:	e008      	b.n	8004754 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004742:	f7fc ff01 	bl	8001548 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e006      	b.n	8004762 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004754:	4b05      	ldr	r3, [pc, #20]	@ (800476c <RCCEx_PLL2_Config+0x15c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	58024400 	.word	0x58024400
 8004770:	ffff0007 	.word	0xffff0007

08004774 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004782:	4b53      	ldr	r3, [pc, #332]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b03      	cmp	r3, #3
 800478c:	d101      	bne.n	8004792 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e099      	b.n	80048c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004792:	4b4f      	ldr	r3, [pc, #316]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a4e      	ldr	r2, [pc, #312]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004798:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800479c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800479e:	f7fc fed3 	bl	8001548 <HAL_GetTick>
 80047a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047a4:	e008      	b.n	80047b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047a6:	f7fc fecf 	bl	8001548 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e086      	b.n	80048c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047b8:	4b45      	ldr	r3, [pc, #276]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f0      	bne.n	80047a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80047c4:	4b42      	ldr	r3, [pc, #264]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 80047c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	051b      	lsls	r3, r3, #20
 80047d2:	493f      	ldr	r1, [pc, #252]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	3b01      	subs	r3, #1
 80047de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	025b      	lsls	r3, r3, #9
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	3b01      	subs	r3, #1
 8004802:	061b      	lsls	r3, r3, #24
 8004804:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004808:	4931      	ldr	r1, [pc, #196]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800480a:	4313      	orrs	r3, r2
 800480c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800480e:	4b30      	ldr	r3, [pc, #192]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	492d      	ldr	r1, [pc, #180]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800481c:	4313      	orrs	r3, r2
 800481e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004820:	4b2b      	ldr	r3, [pc, #172]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004824:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	4928      	ldr	r1, [pc, #160]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800482e:	4313      	orrs	r3, r2
 8004830:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004832:	4b27      	ldr	r3, [pc, #156]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004836:	4a26      	ldr	r2, [pc, #152]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800483c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800483e:	4b24      	ldr	r3, [pc, #144]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004842:	4b24      	ldr	r3, [pc, #144]	@ (80048d4 <RCCEx_PLL3_Config+0x160>)
 8004844:	4013      	ands	r3, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	69d2      	ldr	r2, [r2, #28]
 800484a:	00d2      	lsls	r2, r2, #3
 800484c:	4920      	ldr	r1, [pc, #128]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800484e:	4313      	orrs	r3, r2
 8004850:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004852:	4b1f      	ldr	r3, [pc, #124]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004856:	4a1e      	ldr	r2, [pc, #120]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800485c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004864:	4b1a      	ldr	r3, [pc, #104]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004868:	4a19      	ldr	r2, [pc, #100]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800486a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800486e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004870:	e00f      	b.n	8004892 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d106      	bne.n	8004886 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004878:	4b15      	ldr	r3, [pc, #84]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800487a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487c:	4a14      	ldr	r2, [pc, #80]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800487e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004882:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004884:	e005      	b.n	8004892 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004886:	4b12      	ldr	r3, [pc, #72]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488a:	4a11      	ldr	r2, [pc, #68]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800488c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004890:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004892:	4b0f      	ldr	r3, [pc, #60]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a0e      	ldr	r2, [pc, #56]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800489c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489e:	f7fc fe53 	bl	8001548 <HAL_GetTick>
 80048a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048a4:	e008      	b.n	80048b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048a6:	f7fc fe4f 	bl	8001548 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e006      	b.n	80048c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048b8:	4b05      	ldr	r3, [pc, #20]	@ (80048d0 <RCCEx_PLL3_Config+0x15c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	58024400 	.word	0x58024400
 80048d4:	ffff0007 	.word	0xffff0007

080048d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e10f      	b.n	8004b0a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a87      	ldr	r2, [pc, #540]	@ (8004b14 <HAL_SPI_Init+0x23c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00f      	beq.n	800491a <HAL_SPI_Init+0x42>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a86      	ldr	r2, [pc, #536]	@ (8004b18 <HAL_SPI_Init+0x240>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00a      	beq.n	800491a <HAL_SPI_Init+0x42>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a84      	ldr	r2, [pc, #528]	@ (8004b1c <HAL_SPI_Init+0x244>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d005      	beq.n	800491a <HAL_SPI_Init+0x42>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	2b0f      	cmp	r3, #15
 8004914:	d901      	bls.n	800491a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e0f7      	b.n	8004b0a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fbbc 	bl	8005098 <SPI_GetPacketSize>
 8004920:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7b      	ldr	r2, [pc, #492]	@ (8004b14 <HAL_SPI_Init+0x23c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00c      	beq.n	8004946 <HAL_SPI_Init+0x6e>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a79      	ldr	r2, [pc, #484]	@ (8004b18 <HAL_SPI_Init+0x240>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <HAL_SPI_Init+0x6e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a78      	ldr	r2, [pc, #480]	@ (8004b1c <HAL_SPI_Init+0x244>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d002      	beq.n	8004946 <HAL_SPI_Init+0x6e>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b08      	cmp	r3, #8
 8004944:	d811      	bhi.n	800496a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800494a:	4a72      	ldr	r2, [pc, #456]	@ (8004b14 <HAL_SPI_Init+0x23c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d009      	beq.n	8004964 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a70      	ldr	r2, [pc, #448]	@ (8004b18 <HAL_SPI_Init+0x240>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_SPI_Init+0x8c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a6f      	ldr	r2, [pc, #444]	@ (8004b1c <HAL_SPI_Init+0x244>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d104      	bne.n	800496e <HAL_SPI_Init+0x96>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b10      	cmp	r3, #16
 8004968:	d901      	bls.n	800496e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e0cd      	b.n	8004b0a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fc fafe 	bl	8000f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80049aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049b4:	d119      	bne.n	80049ea <HAL_SPI_Init+0x112>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049be:	d103      	bne.n	80049c8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10c      	bne.n	80049ea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80049d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049d8:	d107      	bne.n	80049ea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00f      	beq.n	8004a16 <HAL_SPI_Init+0x13e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d90b      	bls.n	8004a16 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	e007      	b.n	8004a26 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a24:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69da      	ldr	r2, [r3, #28]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a38:	ea42 0103 	orr.w	r1, r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a86:	ea42 0103 	orr.w	r1, r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d113      	bne.n	8004ac6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ab0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ac4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0201 	bic.w	r2, r2, #1
 8004ad4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40013000 	.word	0x40013000
 8004b18:	40003800 	.word	0x40003800
 8004b1c:	40003c00 	.word	0x40003c00

08004b20 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3320      	adds	r3, #32
 8004b36:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b38:	f7fc fd06 	bl	8001548 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d001      	beq.n	8004b4e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e1d1      	b.n	8004ef2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <HAL_SPI_Transmit+0x3a>
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e1c9      	b.n	8004ef2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_SPI_Transmit+0x4c>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e1c2      	b.n	8004ef2 <HAL_SPI_Transmit+0x3d2>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2203      	movs	r2, #3
 8004b78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	88fa      	ldrh	r2, [r7, #6]
 8004b8e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	88fa      	ldrh	r2, [r7, #6]
 8004b96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004bc4:	d108      	bne.n	8004bd8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	e009      	b.n	8004bec <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004bea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	4b96      	ldr	r3, [pc, #600]	@ (8004e4c <HAL_SPI_Transmit+0x32c>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	88f9      	ldrh	r1, [r7, #6]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c18:	d107      	bne.n	8004c2a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b0f      	cmp	r3, #15
 8004c30:	d947      	bls.n	8004cc2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004c32:	e03f      	b.n	8004cb4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d114      	bne.n	8004c6c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c52:	1d1a      	adds	r2, r3, #4
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004c6a:	e023      	b.n	8004cb4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c6c:	f7fc fc6c 	bl	8001548 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d803      	bhi.n	8004c84 <HAL_SPI_Transmit+0x164>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d102      	bne.n	8004c8a <HAL_SPI_Transmit+0x16a>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d114      	bne.n	8004cb4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f936 	bl	8004efc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e11e      	b.n	8004ef2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1b9      	bne.n	8004c34 <HAL_SPI_Transmit+0x114>
 8004cc0:	e0f1      	b.n	8004ea6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	2b07      	cmp	r3, #7
 8004cc8:	f240 80e6 	bls.w	8004e98 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004ccc:	e05d      	b.n	8004d8a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d132      	bne.n	8004d42 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d918      	bls.n	8004d1a <HAL_SPI_Transmit+0x1fa>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d014      	beq.n	8004d1a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d00:	1d1a      	adds	r2, r3, #4
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b02      	subs	r3, #2
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004d18:	e037      	b.n	8004d8a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d1e:	881a      	ldrh	r2, [r3, #0]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d28:	1c9a      	adds	r2, r3, #2
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004d40:	e023      	b.n	8004d8a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d42:	f7fc fc01 	bl	8001548 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d803      	bhi.n	8004d5a <HAL_SPI_Transmit+0x23a>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d102      	bne.n	8004d60 <HAL_SPI_Transmit+0x240>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d114      	bne.n	8004d8a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f8cb 	bl	8004efc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e0b3      	b.n	8004ef2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d19b      	bne.n	8004cce <HAL_SPI_Transmit+0x1ae>
 8004d96:	e086      	b.n	8004ea6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d154      	bne.n	8004e50 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d918      	bls.n	8004de4 <HAL_SPI_Transmit+0x2c4>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db6:	2b40      	cmp	r3, #64	@ 0x40
 8004db8:	d914      	bls.n	8004de4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dca:	1d1a      	adds	r2, r3, #4
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b04      	subs	r3, #4
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004de2:	e059      	b.n	8004e98 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d917      	bls.n	8004e20 <HAL_SPI_Transmit+0x300>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d013      	beq.n	8004e20 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dfc:	881a      	ldrh	r2, [r3, #0]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e06:	1c9a      	adds	r2, r3, #2
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b02      	subs	r3, #2
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004e1e:	e03b      	b.n	8004e98 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3320      	adds	r3, #32
 8004e2a:	7812      	ldrb	r2, [r2, #0]
 8004e2c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004e4a:	e025      	b.n	8004e98 <HAL_SPI_Transmit+0x378>
 8004e4c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e50:	f7fc fb7a 	bl	8001548 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d803      	bhi.n	8004e68 <HAL_SPI_Transmit+0x348>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e66:	d102      	bne.n	8004e6e <HAL_SPI_Transmit+0x34e>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d114      	bne.n	8004e98 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f844 	bl	8004efc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e02c      	b.n	8004ef2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f47f af79 	bne.w	8004d98 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2200      	movs	r2, #0
 8004eae:	2108      	movs	r1, #8
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f8c3 	bl	800503c <SPI_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ec2:	f043 0220 	orr.w	r2, r3, #32
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 f815 	bl	8004efc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
  }
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop

08004efc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0208 	orr.w	r2, r2, #8
 8004f1a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0210 	orr.w	r2, r2, #16
 8004f2a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6919      	ldr	r1, [r3, #16]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	4b3c      	ldr	r3, [pc, #240]	@ (8005038 <SPI_CloseTransfer+0x13c>)
 8004f48:	400b      	ands	r3, r1
 8004f4a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004f5a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d014      	beq.n	8004f92 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00f      	beq.n	8004f92 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f78:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0220 	orr.w	r2, r2, #32
 8004f90:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d014      	beq.n	8004fc8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00f      	beq.n	8004fc8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fae:	f043 0204 	orr.w	r2, r3, #4
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fc6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00f      	beq.n	8004ff2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fd8:	f043 0201 	orr.w	r2, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699a      	ldr	r2, [r3, #24]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00f      	beq.n	800501c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005002:	f043 0208 	orr.w	r2, r3, #8
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800501a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800502c:	bf00      	nop
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	fffffc90 	.word	0xfffffc90

0800503c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800504c:	e010      	b.n	8005070 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800504e:	f7fc fa7b 	bl	8001548 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d803      	bhi.n	8005066 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d102      	bne.n	800506c <SPI_WaitOnFlagUntilTimeout+0x30>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e00f      	b.n	8005090 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695a      	ldr	r2, [r3, #20]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	4013      	ands	r3, r2
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	429a      	cmp	r2, r3
 800507e:	bf0c      	ite	eq
 8005080:	2301      	moveq	r3, #1
 8005082:	2300      	movne	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	461a      	mov	r2, r3
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	429a      	cmp	r2, r3
 800508c:	d0df      	beq.n	800504e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	3301      	adds	r3, #1
 80050a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	3301      	adds	r3, #1
 80050b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	3307      	adds	r3, #7
 80050b6:	08db      	lsrs	r3, r3, #3
 80050b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	fb02 f303 	mul.w	r3, r2, r3
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e042      	b.n	8005166 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fc f90c 	bl	8001310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2224      	movs	r2, #36	@ 0x24
 80050fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0201 	bic.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fd91 	bl	8005c40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f826 	bl	8005170 <UART_SetConfig>
 8005124:	4603      	mov	r3, r0
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e01b      	b.n	8005166 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800513c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800514c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fe10 	bl	8005d84 <UART_CheckIdleState>
 8005164:	4603      	mov	r3, r0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005174:	b092      	sub	sp, #72	@ 0x48
 8005176:	af00      	add	r7, sp, #0
 8005178:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	431a      	orrs	r2, r3
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	431a      	orrs	r2, r3
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	4313      	orrs	r3, r2
 8005196:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	4bbe      	ldr	r3, [pc, #760]	@ (8005498 <UART_SetConfig+0x328>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051a8:	430b      	orrs	r3, r1
 80051aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4ab3      	ldr	r2, [pc, #716]	@ (800549c <UART_SetConfig+0x32c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d004      	beq.n	80051dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051d8:	4313      	orrs	r3, r2
 80051da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	4baf      	ldr	r3, [pc, #700]	@ (80054a0 <UART_SetConfig+0x330>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051ec:	430b      	orrs	r3, r1
 80051ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f6:	f023 010f 	bic.w	r1, r3, #15
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4aa6      	ldr	r2, [pc, #664]	@ (80054a4 <UART_SetConfig+0x334>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d177      	bne.n	8005300 <UART_SetConfig+0x190>
 8005210:	4ba5      	ldr	r3, [pc, #660]	@ (80054a8 <UART_SetConfig+0x338>)
 8005212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005214:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005218:	2b28      	cmp	r3, #40	@ 0x28
 800521a:	d86d      	bhi.n	80052f8 <UART_SetConfig+0x188>
 800521c:	a201      	add	r2, pc, #4	@ (adr r2, 8005224 <UART_SetConfig+0xb4>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	080052c9 	.word	0x080052c9
 8005228:	080052f9 	.word	0x080052f9
 800522c:	080052f9 	.word	0x080052f9
 8005230:	080052f9 	.word	0x080052f9
 8005234:	080052f9 	.word	0x080052f9
 8005238:	080052f9 	.word	0x080052f9
 800523c:	080052f9 	.word	0x080052f9
 8005240:	080052f9 	.word	0x080052f9
 8005244:	080052d1 	.word	0x080052d1
 8005248:	080052f9 	.word	0x080052f9
 800524c:	080052f9 	.word	0x080052f9
 8005250:	080052f9 	.word	0x080052f9
 8005254:	080052f9 	.word	0x080052f9
 8005258:	080052f9 	.word	0x080052f9
 800525c:	080052f9 	.word	0x080052f9
 8005260:	080052f9 	.word	0x080052f9
 8005264:	080052d9 	.word	0x080052d9
 8005268:	080052f9 	.word	0x080052f9
 800526c:	080052f9 	.word	0x080052f9
 8005270:	080052f9 	.word	0x080052f9
 8005274:	080052f9 	.word	0x080052f9
 8005278:	080052f9 	.word	0x080052f9
 800527c:	080052f9 	.word	0x080052f9
 8005280:	080052f9 	.word	0x080052f9
 8005284:	080052e1 	.word	0x080052e1
 8005288:	080052f9 	.word	0x080052f9
 800528c:	080052f9 	.word	0x080052f9
 8005290:	080052f9 	.word	0x080052f9
 8005294:	080052f9 	.word	0x080052f9
 8005298:	080052f9 	.word	0x080052f9
 800529c:	080052f9 	.word	0x080052f9
 80052a0:	080052f9 	.word	0x080052f9
 80052a4:	080052e9 	.word	0x080052e9
 80052a8:	080052f9 	.word	0x080052f9
 80052ac:	080052f9 	.word	0x080052f9
 80052b0:	080052f9 	.word	0x080052f9
 80052b4:	080052f9 	.word	0x080052f9
 80052b8:	080052f9 	.word	0x080052f9
 80052bc:	080052f9 	.word	0x080052f9
 80052c0:	080052f9 	.word	0x080052f9
 80052c4:	080052f1 	.word	0x080052f1
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ce:	e222      	b.n	8005716 <UART_SetConfig+0x5a6>
 80052d0:	2304      	movs	r3, #4
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d6:	e21e      	b.n	8005716 <UART_SetConfig+0x5a6>
 80052d8:	2308      	movs	r3, #8
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052de:	e21a      	b.n	8005716 <UART_SetConfig+0x5a6>
 80052e0:	2310      	movs	r3, #16
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052e6:	e216      	b.n	8005716 <UART_SetConfig+0x5a6>
 80052e8:	2320      	movs	r3, #32
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ee:	e212      	b.n	8005716 <UART_SetConfig+0x5a6>
 80052f0:	2340      	movs	r3, #64	@ 0x40
 80052f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052f6:	e20e      	b.n	8005716 <UART_SetConfig+0x5a6>
 80052f8:	2380      	movs	r3, #128	@ 0x80
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052fe:	e20a      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a69      	ldr	r2, [pc, #420]	@ (80054ac <UART_SetConfig+0x33c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d130      	bne.n	800536c <UART_SetConfig+0x1fc>
 800530a:	4b67      	ldr	r3, [pc, #412]	@ (80054a8 <UART_SetConfig+0x338>)
 800530c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	2b05      	cmp	r3, #5
 8005314:	d826      	bhi.n	8005364 <UART_SetConfig+0x1f4>
 8005316:	a201      	add	r2, pc, #4	@ (adr r2, 800531c <UART_SetConfig+0x1ac>)
 8005318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531c:	08005335 	.word	0x08005335
 8005320:	0800533d 	.word	0x0800533d
 8005324:	08005345 	.word	0x08005345
 8005328:	0800534d 	.word	0x0800534d
 800532c:	08005355 	.word	0x08005355
 8005330:	0800535d 	.word	0x0800535d
 8005334:	2300      	movs	r3, #0
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533a:	e1ec      	b.n	8005716 <UART_SetConfig+0x5a6>
 800533c:	2304      	movs	r3, #4
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005342:	e1e8      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005344:	2308      	movs	r3, #8
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534a:	e1e4      	b.n	8005716 <UART_SetConfig+0x5a6>
 800534c:	2310      	movs	r3, #16
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005352:	e1e0      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005354:	2320      	movs	r3, #32
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535a:	e1dc      	b.n	8005716 <UART_SetConfig+0x5a6>
 800535c:	2340      	movs	r3, #64	@ 0x40
 800535e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005362:	e1d8      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005364:	2380      	movs	r3, #128	@ 0x80
 8005366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536a:	e1d4      	b.n	8005716 <UART_SetConfig+0x5a6>
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a4f      	ldr	r2, [pc, #316]	@ (80054b0 <UART_SetConfig+0x340>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d130      	bne.n	80053d8 <UART_SetConfig+0x268>
 8005376:	4b4c      	ldr	r3, [pc, #304]	@ (80054a8 <UART_SetConfig+0x338>)
 8005378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	2b05      	cmp	r3, #5
 8005380:	d826      	bhi.n	80053d0 <UART_SetConfig+0x260>
 8005382:	a201      	add	r2, pc, #4	@ (adr r2, 8005388 <UART_SetConfig+0x218>)
 8005384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005388:	080053a1 	.word	0x080053a1
 800538c:	080053a9 	.word	0x080053a9
 8005390:	080053b1 	.word	0x080053b1
 8005394:	080053b9 	.word	0x080053b9
 8005398:	080053c1 	.word	0x080053c1
 800539c:	080053c9 	.word	0x080053c9
 80053a0:	2300      	movs	r3, #0
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e1b6      	b.n	8005716 <UART_SetConfig+0x5a6>
 80053a8:	2304      	movs	r3, #4
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e1b2      	b.n	8005716 <UART_SetConfig+0x5a6>
 80053b0:	2308      	movs	r3, #8
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b6:	e1ae      	b.n	8005716 <UART_SetConfig+0x5a6>
 80053b8:	2310      	movs	r3, #16
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053be:	e1aa      	b.n	8005716 <UART_SetConfig+0x5a6>
 80053c0:	2320      	movs	r3, #32
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c6:	e1a6      	b.n	8005716 <UART_SetConfig+0x5a6>
 80053c8:	2340      	movs	r3, #64	@ 0x40
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ce:	e1a2      	b.n	8005716 <UART_SetConfig+0x5a6>
 80053d0:	2380      	movs	r3, #128	@ 0x80
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d6:	e19e      	b.n	8005716 <UART_SetConfig+0x5a6>
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a35      	ldr	r2, [pc, #212]	@ (80054b4 <UART_SetConfig+0x344>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d130      	bne.n	8005444 <UART_SetConfig+0x2d4>
 80053e2:	4b31      	ldr	r3, [pc, #196]	@ (80054a8 <UART_SetConfig+0x338>)
 80053e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	2b05      	cmp	r3, #5
 80053ec:	d826      	bhi.n	800543c <UART_SetConfig+0x2cc>
 80053ee:	a201      	add	r2, pc, #4	@ (adr r2, 80053f4 <UART_SetConfig+0x284>)
 80053f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f4:	0800540d 	.word	0x0800540d
 80053f8:	08005415 	.word	0x08005415
 80053fc:	0800541d 	.word	0x0800541d
 8005400:	08005425 	.word	0x08005425
 8005404:	0800542d 	.word	0x0800542d
 8005408:	08005435 	.word	0x08005435
 800540c:	2300      	movs	r3, #0
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e180      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005414:	2304      	movs	r3, #4
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e17c      	b.n	8005716 <UART_SetConfig+0x5a6>
 800541c:	2308      	movs	r3, #8
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005422:	e178      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005424:	2310      	movs	r3, #16
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542a:	e174      	b.n	8005716 <UART_SetConfig+0x5a6>
 800542c:	2320      	movs	r3, #32
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005432:	e170      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005434:	2340      	movs	r3, #64	@ 0x40
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800543a:	e16c      	b.n	8005716 <UART_SetConfig+0x5a6>
 800543c:	2380      	movs	r3, #128	@ 0x80
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005442:	e168      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1b      	ldr	r2, [pc, #108]	@ (80054b8 <UART_SetConfig+0x348>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d142      	bne.n	80054d4 <UART_SetConfig+0x364>
 800544e:	4b16      	ldr	r3, [pc, #88]	@ (80054a8 <UART_SetConfig+0x338>)
 8005450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	2b05      	cmp	r3, #5
 8005458:	d838      	bhi.n	80054cc <UART_SetConfig+0x35c>
 800545a:	a201      	add	r2, pc, #4	@ (adr r2, 8005460 <UART_SetConfig+0x2f0>)
 800545c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005460:	08005479 	.word	0x08005479
 8005464:	08005481 	.word	0x08005481
 8005468:	08005489 	.word	0x08005489
 800546c:	08005491 	.word	0x08005491
 8005470:	080054bd 	.word	0x080054bd
 8005474:	080054c5 	.word	0x080054c5
 8005478:	2300      	movs	r3, #0
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547e:	e14a      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005480:	2304      	movs	r3, #4
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005486:	e146      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005488:	2308      	movs	r3, #8
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548e:	e142      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005490:	2310      	movs	r3, #16
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005496:	e13e      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005498:	cfff69f3 	.word	0xcfff69f3
 800549c:	58000c00 	.word	0x58000c00
 80054a0:	11fff4ff 	.word	0x11fff4ff
 80054a4:	40011000 	.word	0x40011000
 80054a8:	58024400 	.word	0x58024400
 80054ac:	40004400 	.word	0x40004400
 80054b0:	40004800 	.word	0x40004800
 80054b4:	40004c00 	.word	0x40004c00
 80054b8:	40005000 	.word	0x40005000
 80054bc:	2320      	movs	r3, #32
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e128      	b.n	8005716 <UART_SetConfig+0x5a6>
 80054c4:	2340      	movs	r3, #64	@ 0x40
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ca:	e124      	b.n	8005716 <UART_SetConfig+0x5a6>
 80054cc:	2380      	movs	r3, #128	@ 0x80
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d2:	e120      	b.n	8005716 <UART_SetConfig+0x5a6>
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4acb      	ldr	r2, [pc, #812]	@ (8005808 <UART_SetConfig+0x698>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d176      	bne.n	80055cc <UART_SetConfig+0x45c>
 80054de:	4bcb      	ldr	r3, [pc, #812]	@ (800580c <UART_SetConfig+0x69c>)
 80054e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054e6:	2b28      	cmp	r3, #40	@ 0x28
 80054e8:	d86c      	bhi.n	80055c4 <UART_SetConfig+0x454>
 80054ea:	a201      	add	r2, pc, #4	@ (adr r2, 80054f0 <UART_SetConfig+0x380>)
 80054ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f0:	08005595 	.word	0x08005595
 80054f4:	080055c5 	.word	0x080055c5
 80054f8:	080055c5 	.word	0x080055c5
 80054fc:	080055c5 	.word	0x080055c5
 8005500:	080055c5 	.word	0x080055c5
 8005504:	080055c5 	.word	0x080055c5
 8005508:	080055c5 	.word	0x080055c5
 800550c:	080055c5 	.word	0x080055c5
 8005510:	0800559d 	.word	0x0800559d
 8005514:	080055c5 	.word	0x080055c5
 8005518:	080055c5 	.word	0x080055c5
 800551c:	080055c5 	.word	0x080055c5
 8005520:	080055c5 	.word	0x080055c5
 8005524:	080055c5 	.word	0x080055c5
 8005528:	080055c5 	.word	0x080055c5
 800552c:	080055c5 	.word	0x080055c5
 8005530:	080055a5 	.word	0x080055a5
 8005534:	080055c5 	.word	0x080055c5
 8005538:	080055c5 	.word	0x080055c5
 800553c:	080055c5 	.word	0x080055c5
 8005540:	080055c5 	.word	0x080055c5
 8005544:	080055c5 	.word	0x080055c5
 8005548:	080055c5 	.word	0x080055c5
 800554c:	080055c5 	.word	0x080055c5
 8005550:	080055ad 	.word	0x080055ad
 8005554:	080055c5 	.word	0x080055c5
 8005558:	080055c5 	.word	0x080055c5
 800555c:	080055c5 	.word	0x080055c5
 8005560:	080055c5 	.word	0x080055c5
 8005564:	080055c5 	.word	0x080055c5
 8005568:	080055c5 	.word	0x080055c5
 800556c:	080055c5 	.word	0x080055c5
 8005570:	080055b5 	.word	0x080055b5
 8005574:	080055c5 	.word	0x080055c5
 8005578:	080055c5 	.word	0x080055c5
 800557c:	080055c5 	.word	0x080055c5
 8005580:	080055c5 	.word	0x080055c5
 8005584:	080055c5 	.word	0x080055c5
 8005588:	080055c5 	.word	0x080055c5
 800558c:	080055c5 	.word	0x080055c5
 8005590:	080055bd 	.word	0x080055bd
 8005594:	2301      	movs	r3, #1
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559a:	e0bc      	b.n	8005716 <UART_SetConfig+0x5a6>
 800559c:	2304      	movs	r3, #4
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a2:	e0b8      	b.n	8005716 <UART_SetConfig+0x5a6>
 80055a4:	2308      	movs	r3, #8
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055aa:	e0b4      	b.n	8005716 <UART_SetConfig+0x5a6>
 80055ac:	2310      	movs	r3, #16
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b2:	e0b0      	b.n	8005716 <UART_SetConfig+0x5a6>
 80055b4:	2320      	movs	r3, #32
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ba:	e0ac      	b.n	8005716 <UART_SetConfig+0x5a6>
 80055bc:	2340      	movs	r3, #64	@ 0x40
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c2:	e0a8      	b.n	8005716 <UART_SetConfig+0x5a6>
 80055c4:	2380      	movs	r3, #128	@ 0x80
 80055c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ca:	e0a4      	b.n	8005716 <UART_SetConfig+0x5a6>
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a8f      	ldr	r2, [pc, #572]	@ (8005810 <UART_SetConfig+0x6a0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d130      	bne.n	8005638 <UART_SetConfig+0x4c8>
 80055d6:	4b8d      	ldr	r3, [pc, #564]	@ (800580c <UART_SetConfig+0x69c>)
 80055d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	2b05      	cmp	r3, #5
 80055e0:	d826      	bhi.n	8005630 <UART_SetConfig+0x4c0>
 80055e2:	a201      	add	r2, pc, #4	@ (adr r2, 80055e8 <UART_SetConfig+0x478>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	08005601 	.word	0x08005601
 80055ec:	08005609 	.word	0x08005609
 80055f0:	08005611 	.word	0x08005611
 80055f4:	08005619 	.word	0x08005619
 80055f8:	08005621 	.word	0x08005621
 80055fc:	08005629 	.word	0x08005629
 8005600:	2300      	movs	r3, #0
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005606:	e086      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005608:	2304      	movs	r3, #4
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560e:	e082      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005610:	2308      	movs	r3, #8
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005616:	e07e      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005618:	2310      	movs	r3, #16
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561e:	e07a      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005620:	2320      	movs	r3, #32
 8005622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005626:	e076      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005628:	2340      	movs	r3, #64	@ 0x40
 800562a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800562e:	e072      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005630:	2380      	movs	r3, #128	@ 0x80
 8005632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005636:	e06e      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a75      	ldr	r2, [pc, #468]	@ (8005814 <UART_SetConfig+0x6a4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d130      	bne.n	80056a4 <UART_SetConfig+0x534>
 8005642:	4b72      	ldr	r3, [pc, #456]	@ (800580c <UART_SetConfig+0x69c>)
 8005644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	2b05      	cmp	r3, #5
 800564c:	d826      	bhi.n	800569c <UART_SetConfig+0x52c>
 800564e:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <UART_SetConfig+0x4e4>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	0800566d 	.word	0x0800566d
 8005658:	08005675 	.word	0x08005675
 800565c:	0800567d 	.word	0x0800567d
 8005660:	08005685 	.word	0x08005685
 8005664:	0800568d 	.word	0x0800568d
 8005668:	08005695 	.word	0x08005695
 800566c:	2300      	movs	r3, #0
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005672:	e050      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005674:	2304      	movs	r3, #4
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567a:	e04c      	b.n	8005716 <UART_SetConfig+0x5a6>
 800567c:	2308      	movs	r3, #8
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005682:	e048      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005684:	2310      	movs	r3, #16
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568a:	e044      	b.n	8005716 <UART_SetConfig+0x5a6>
 800568c:	2320      	movs	r3, #32
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005692:	e040      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005694:	2340      	movs	r3, #64	@ 0x40
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800569a:	e03c      	b.n	8005716 <UART_SetConfig+0x5a6>
 800569c:	2380      	movs	r3, #128	@ 0x80
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a2:	e038      	b.n	8005716 <UART_SetConfig+0x5a6>
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a5b      	ldr	r2, [pc, #364]	@ (8005818 <UART_SetConfig+0x6a8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d130      	bne.n	8005710 <UART_SetConfig+0x5a0>
 80056ae:	4b57      	ldr	r3, [pc, #348]	@ (800580c <UART_SetConfig+0x69c>)
 80056b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	2b05      	cmp	r3, #5
 80056b8:	d826      	bhi.n	8005708 <UART_SetConfig+0x598>
 80056ba:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <UART_SetConfig+0x550>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056d9 	.word	0x080056d9
 80056c4:	080056e1 	.word	0x080056e1
 80056c8:	080056e9 	.word	0x080056e9
 80056cc:	080056f1 	.word	0x080056f1
 80056d0:	080056f9 	.word	0x080056f9
 80056d4:	08005701 	.word	0x08005701
 80056d8:	2302      	movs	r3, #2
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056de:	e01a      	b.n	8005716 <UART_SetConfig+0x5a6>
 80056e0:	2304      	movs	r3, #4
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e6:	e016      	b.n	8005716 <UART_SetConfig+0x5a6>
 80056e8:	2308      	movs	r3, #8
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ee:	e012      	b.n	8005716 <UART_SetConfig+0x5a6>
 80056f0:	2310      	movs	r3, #16
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056f6:	e00e      	b.n	8005716 <UART_SetConfig+0x5a6>
 80056f8:	2320      	movs	r3, #32
 80056fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056fe:	e00a      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005700:	2340      	movs	r3, #64	@ 0x40
 8005702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005706:	e006      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005708:	2380      	movs	r3, #128	@ 0x80
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570e:	e002      	b.n	8005716 <UART_SetConfig+0x5a6>
 8005710:	2380      	movs	r3, #128	@ 0x80
 8005712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a3f      	ldr	r2, [pc, #252]	@ (8005818 <UART_SetConfig+0x6a8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	f040 80f8 	bne.w	8005912 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005722:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005726:	2b20      	cmp	r3, #32
 8005728:	dc46      	bgt.n	80057b8 <UART_SetConfig+0x648>
 800572a:	2b02      	cmp	r3, #2
 800572c:	f2c0 8082 	blt.w	8005834 <UART_SetConfig+0x6c4>
 8005730:	3b02      	subs	r3, #2
 8005732:	2b1e      	cmp	r3, #30
 8005734:	d87e      	bhi.n	8005834 <UART_SetConfig+0x6c4>
 8005736:	a201      	add	r2, pc, #4	@ (adr r2, 800573c <UART_SetConfig+0x5cc>)
 8005738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573c:	080057bf 	.word	0x080057bf
 8005740:	08005835 	.word	0x08005835
 8005744:	080057c7 	.word	0x080057c7
 8005748:	08005835 	.word	0x08005835
 800574c:	08005835 	.word	0x08005835
 8005750:	08005835 	.word	0x08005835
 8005754:	080057d7 	.word	0x080057d7
 8005758:	08005835 	.word	0x08005835
 800575c:	08005835 	.word	0x08005835
 8005760:	08005835 	.word	0x08005835
 8005764:	08005835 	.word	0x08005835
 8005768:	08005835 	.word	0x08005835
 800576c:	08005835 	.word	0x08005835
 8005770:	08005835 	.word	0x08005835
 8005774:	080057e7 	.word	0x080057e7
 8005778:	08005835 	.word	0x08005835
 800577c:	08005835 	.word	0x08005835
 8005780:	08005835 	.word	0x08005835
 8005784:	08005835 	.word	0x08005835
 8005788:	08005835 	.word	0x08005835
 800578c:	08005835 	.word	0x08005835
 8005790:	08005835 	.word	0x08005835
 8005794:	08005835 	.word	0x08005835
 8005798:	08005835 	.word	0x08005835
 800579c:	08005835 	.word	0x08005835
 80057a0:	08005835 	.word	0x08005835
 80057a4:	08005835 	.word	0x08005835
 80057a8:	08005835 	.word	0x08005835
 80057ac:	08005835 	.word	0x08005835
 80057b0:	08005835 	.word	0x08005835
 80057b4:	08005827 	.word	0x08005827
 80057b8:	2b40      	cmp	r3, #64	@ 0x40
 80057ba:	d037      	beq.n	800582c <UART_SetConfig+0x6bc>
 80057bc:	e03a      	b.n	8005834 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80057be:	f7fe fc69 	bl	8004094 <HAL_RCCEx_GetD3PCLK1Freq>
 80057c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057c4:	e03c      	b.n	8005840 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fe fc78 	bl	80040c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057d4:	e034      	b.n	8005840 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057d6:	f107 0318 	add.w	r3, r7, #24
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fe fdc4 	bl	8004368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057e4:	e02c      	b.n	8005840 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057e6:	4b09      	ldr	r3, [pc, #36]	@ (800580c <UART_SetConfig+0x69c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d016      	beq.n	8005820 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057f2:	4b06      	ldr	r3, [pc, #24]	@ (800580c <UART_SetConfig+0x69c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	08db      	lsrs	r3, r3, #3
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	4a07      	ldr	r2, [pc, #28]	@ (800581c <UART_SetConfig+0x6ac>)
 80057fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005804:	e01c      	b.n	8005840 <UART_SetConfig+0x6d0>
 8005806:	bf00      	nop
 8005808:	40011400 	.word	0x40011400
 800580c:	58024400 	.word	0x58024400
 8005810:	40007800 	.word	0x40007800
 8005814:	40007c00 	.word	0x40007c00
 8005818:	58000c00 	.word	0x58000c00
 800581c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005820:	4b9d      	ldr	r3, [pc, #628]	@ (8005a98 <UART_SetConfig+0x928>)
 8005822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005824:	e00c      	b.n	8005840 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005826:	4b9d      	ldr	r3, [pc, #628]	@ (8005a9c <UART_SetConfig+0x92c>)
 8005828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800582a:	e009      	b.n	8005840 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800582c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005832:	e005      	b.n	8005840 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800583e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 81de 	beq.w	8005c04 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584c:	4a94      	ldr	r2, [pc, #592]	@ (8005aa0 <UART_SetConfig+0x930>)
 800584e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005852:	461a      	mov	r2, r3
 8005854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005856:	fbb3 f3f2 	udiv	r3, r3, r2
 800585a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	4413      	add	r3, r2
 8005866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005868:	429a      	cmp	r2, r3
 800586a:	d305      	bcc.n	8005878 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005874:	429a      	cmp	r2, r3
 8005876:	d903      	bls.n	8005880 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800587e:	e1c1      	b.n	8005c04 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005882:	2200      	movs	r2, #0
 8005884:	60bb      	str	r3, [r7, #8]
 8005886:	60fa      	str	r2, [r7, #12]
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588c:	4a84      	ldr	r2, [pc, #528]	@ (8005aa0 <UART_SetConfig+0x930>)
 800588e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005892:	b29b      	uxth	r3, r3
 8005894:	2200      	movs	r2, #0
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800589e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058a2:	f7fa fd19 	bl	80002d8 <__aeabi_uldivmod>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4610      	mov	r0, r2
 80058ac:	4619      	mov	r1, r3
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	020b      	lsls	r3, r1, #8
 80058b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058bc:	0202      	lsls	r2, r0, #8
 80058be:	6979      	ldr	r1, [r7, #20]
 80058c0:	6849      	ldr	r1, [r1, #4]
 80058c2:	0849      	lsrs	r1, r1, #1
 80058c4:	2000      	movs	r0, #0
 80058c6:	460c      	mov	r4, r1
 80058c8:	4605      	mov	r5, r0
 80058ca:	eb12 0804 	adds.w	r8, r2, r4
 80058ce:	eb43 0905 	adc.w	r9, r3, r5
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	469a      	mov	sl, r3
 80058da:	4693      	mov	fp, r2
 80058dc:	4652      	mov	r2, sl
 80058de:	465b      	mov	r3, fp
 80058e0:	4640      	mov	r0, r8
 80058e2:	4649      	mov	r1, r9
 80058e4:	f7fa fcf8 	bl	80002d8 <__aeabi_uldivmod>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4613      	mov	r3, r2
 80058ee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058f6:	d308      	bcc.n	800590a <UART_SetConfig+0x79a>
 80058f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058fe:	d204      	bcs.n	800590a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005906:	60da      	str	r2, [r3, #12]
 8005908:	e17c      	b.n	8005c04 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005910:	e178      	b.n	8005c04 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800591a:	f040 80c5 	bne.w	8005aa8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800591e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005922:	2b20      	cmp	r3, #32
 8005924:	dc48      	bgt.n	80059b8 <UART_SetConfig+0x848>
 8005926:	2b00      	cmp	r3, #0
 8005928:	db7b      	blt.n	8005a22 <UART_SetConfig+0x8b2>
 800592a:	2b20      	cmp	r3, #32
 800592c:	d879      	bhi.n	8005a22 <UART_SetConfig+0x8b2>
 800592e:	a201      	add	r2, pc, #4	@ (adr r2, 8005934 <UART_SetConfig+0x7c4>)
 8005930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005934:	080059bf 	.word	0x080059bf
 8005938:	080059c7 	.word	0x080059c7
 800593c:	08005a23 	.word	0x08005a23
 8005940:	08005a23 	.word	0x08005a23
 8005944:	080059cf 	.word	0x080059cf
 8005948:	08005a23 	.word	0x08005a23
 800594c:	08005a23 	.word	0x08005a23
 8005950:	08005a23 	.word	0x08005a23
 8005954:	080059df 	.word	0x080059df
 8005958:	08005a23 	.word	0x08005a23
 800595c:	08005a23 	.word	0x08005a23
 8005960:	08005a23 	.word	0x08005a23
 8005964:	08005a23 	.word	0x08005a23
 8005968:	08005a23 	.word	0x08005a23
 800596c:	08005a23 	.word	0x08005a23
 8005970:	08005a23 	.word	0x08005a23
 8005974:	080059ef 	.word	0x080059ef
 8005978:	08005a23 	.word	0x08005a23
 800597c:	08005a23 	.word	0x08005a23
 8005980:	08005a23 	.word	0x08005a23
 8005984:	08005a23 	.word	0x08005a23
 8005988:	08005a23 	.word	0x08005a23
 800598c:	08005a23 	.word	0x08005a23
 8005990:	08005a23 	.word	0x08005a23
 8005994:	08005a23 	.word	0x08005a23
 8005998:	08005a23 	.word	0x08005a23
 800599c:	08005a23 	.word	0x08005a23
 80059a0:	08005a23 	.word	0x08005a23
 80059a4:	08005a23 	.word	0x08005a23
 80059a8:	08005a23 	.word	0x08005a23
 80059ac:	08005a23 	.word	0x08005a23
 80059b0:	08005a23 	.word	0x08005a23
 80059b4:	08005a15 	.word	0x08005a15
 80059b8:	2b40      	cmp	r3, #64	@ 0x40
 80059ba:	d02e      	beq.n	8005a1a <UART_SetConfig+0x8aa>
 80059bc:	e031      	b.n	8005a22 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059be:	f7fd f933 	bl	8002c28 <HAL_RCC_GetPCLK1Freq>
 80059c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059c4:	e033      	b.n	8005a2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059c6:	f7fd f945 	bl	8002c54 <HAL_RCC_GetPCLK2Freq>
 80059ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059cc:	e02f      	b.n	8005a2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe fb74 	bl	80040c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059dc:	e027      	b.n	8005a2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059de:	f107 0318 	add.w	r3, r7, #24
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fcc0 	bl	8004368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059ec:	e01f      	b.n	8005a2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059ee:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa4 <UART_SetConfig+0x934>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059fa:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa4 <UART_SetConfig+0x934>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	08db      	lsrs	r3, r3, #3
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	4a24      	ldr	r2, [pc, #144]	@ (8005a98 <UART_SetConfig+0x928>)
 8005a06:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a0c:	e00f      	b.n	8005a2e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005a0e:	4b22      	ldr	r3, [pc, #136]	@ (8005a98 <UART_SetConfig+0x928>)
 8005a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a12:	e00c      	b.n	8005a2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a14:	4b21      	ldr	r3, [pc, #132]	@ (8005a9c <UART_SetConfig+0x92c>)
 8005a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a18:	e009      	b.n	8005a2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a20:	e005      	b.n	8005a2e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80e7 	beq.w	8005c04 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3a:	4a19      	ldr	r2, [pc, #100]	@ (8005aa0 <UART_SetConfig+0x930>)
 8005a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a40:	461a      	mov	r2, r3
 8005a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a48:	005a      	lsls	r2, r3, #1
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	085b      	lsrs	r3, r3, #1
 8005a50:	441a      	add	r2, r3
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5e:	2b0f      	cmp	r3, #15
 8005a60:	d916      	bls.n	8005a90 <UART_SetConfig+0x920>
 8005a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a68:	d212      	bcs.n	8005a90 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f023 030f 	bic.w	r3, r3, #15
 8005a72:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a82:	4313      	orrs	r3, r2
 8005a84:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005a8c:	60da      	str	r2, [r3, #12]
 8005a8e:	e0b9      	b.n	8005c04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a96:	e0b5      	b.n	8005c04 <UART_SetConfig+0xa94>
 8005a98:	03d09000 	.word	0x03d09000
 8005a9c:	003d0900 	.word	0x003d0900
 8005aa0:	08047d3c 	.word	0x08047d3c
 8005aa4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aa8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	dc49      	bgt.n	8005b44 <UART_SetConfig+0x9d4>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	db7c      	blt.n	8005bae <UART_SetConfig+0xa3e>
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d87a      	bhi.n	8005bae <UART_SetConfig+0xa3e>
 8005ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac0 <UART_SetConfig+0x950>)
 8005aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abe:	bf00      	nop
 8005ac0:	08005b4b 	.word	0x08005b4b
 8005ac4:	08005b53 	.word	0x08005b53
 8005ac8:	08005baf 	.word	0x08005baf
 8005acc:	08005baf 	.word	0x08005baf
 8005ad0:	08005b5b 	.word	0x08005b5b
 8005ad4:	08005baf 	.word	0x08005baf
 8005ad8:	08005baf 	.word	0x08005baf
 8005adc:	08005baf 	.word	0x08005baf
 8005ae0:	08005b6b 	.word	0x08005b6b
 8005ae4:	08005baf 	.word	0x08005baf
 8005ae8:	08005baf 	.word	0x08005baf
 8005aec:	08005baf 	.word	0x08005baf
 8005af0:	08005baf 	.word	0x08005baf
 8005af4:	08005baf 	.word	0x08005baf
 8005af8:	08005baf 	.word	0x08005baf
 8005afc:	08005baf 	.word	0x08005baf
 8005b00:	08005b7b 	.word	0x08005b7b
 8005b04:	08005baf 	.word	0x08005baf
 8005b08:	08005baf 	.word	0x08005baf
 8005b0c:	08005baf 	.word	0x08005baf
 8005b10:	08005baf 	.word	0x08005baf
 8005b14:	08005baf 	.word	0x08005baf
 8005b18:	08005baf 	.word	0x08005baf
 8005b1c:	08005baf 	.word	0x08005baf
 8005b20:	08005baf 	.word	0x08005baf
 8005b24:	08005baf 	.word	0x08005baf
 8005b28:	08005baf 	.word	0x08005baf
 8005b2c:	08005baf 	.word	0x08005baf
 8005b30:	08005baf 	.word	0x08005baf
 8005b34:	08005baf 	.word	0x08005baf
 8005b38:	08005baf 	.word	0x08005baf
 8005b3c:	08005baf 	.word	0x08005baf
 8005b40:	08005ba1 	.word	0x08005ba1
 8005b44:	2b40      	cmp	r3, #64	@ 0x40
 8005b46:	d02e      	beq.n	8005ba6 <UART_SetConfig+0xa36>
 8005b48:	e031      	b.n	8005bae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b4a:	f7fd f86d 	bl	8002c28 <HAL_RCC_GetPCLK1Freq>
 8005b4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b50:	e033      	b.n	8005bba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b52:	f7fd f87f 	bl	8002c54 <HAL_RCC_GetPCLK2Freq>
 8005b56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b58:	e02f      	b.n	8005bba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe faae 	bl	80040c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b68:	e027      	b.n	8005bba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b6a:	f107 0318 	add.w	r3, r7, #24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe fbfa 	bl	8004368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b78:	e01f      	b.n	8005bba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8005c30 <UART_SetConfig+0xac0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d009      	beq.n	8005b9a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b86:	4b2a      	ldr	r3, [pc, #168]	@ (8005c30 <UART_SetConfig+0xac0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	08db      	lsrs	r3, r3, #3
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	4a28      	ldr	r2, [pc, #160]	@ (8005c34 <UART_SetConfig+0xac4>)
 8005b92:	fa22 f303 	lsr.w	r3, r2, r3
 8005b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b98:	e00f      	b.n	8005bba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005b9a:	4b26      	ldr	r3, [pc, #152]	@ (8005c34 <UART_SetConfig+0xac4>)
 8005b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b9e:	e00c      	b.n	8005bba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ba0:	4b25      	ldr	r3, [pc, #148]	@ (8005c38 <UART_SetConfig+0xac8>)
 8005ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ba4:	e009      	b.n	8005bba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bac:	e005      	b.n	8005bba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005bb8:	bf00      	nop
    }

    if (pclk != 0U)
 8005bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d021      	beq.n	8005c04 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c3c <UART_SetConfig+0xacc>)
 8005bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bce:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	085b      	lsrs	r3, r3, #1
 8005bd8:	441a      	add	r2, r3
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be6:	2b0f      	cmp	r3, #15
 8005be8:	d909      	bls.n	8005bfe <UART_SetConfig+0xa8e>
 8005bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bf0:	d205      	bcs.n	8005bfe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	60da      	str	r2, [r3, #12]
 8005bfc:	e002      	b.n	8005c04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2200      	movs	r2, #0
 8005c18:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005c20:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3748      	adds	r7, #72	@ 0x48
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c2e:	bf00      	nop
 8005c30:	58024400 	.word	0x58024400
 8005c34:	03d09000 	.word	0x03d09000
 8005c38:	003d0900 	.word	0x003d0900
 8005c3c:	08047d3c 	.word	0x08047d3c

08005c40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01a      	beq.n	8005d56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d3e:	d10a      	bne.n	8005d56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	605a      	str	r2, [r3, #4]
  }
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b098      	sub	sp, #96	@ 0x60
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d94:	f7fb fbd8 	bl	8001548 <HAL_GetTick>
 8005d98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d12f      	bne.n	8005e08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005da8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005db0:	2200      	movs	r2, #0
 8005db2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f88e 	bl	8005ed8 <UART_WaitOnFlagUntilTimeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d022      	beq.n	8005e08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005de2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005de6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e6      	bne.n	8005dc2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e063      	b.n	8005ed0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0304 	and.w	r3, r3, #4
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d149      	bne.n	8005eaa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e16:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f857 	bl	8005ed8 <UART_WaitOnFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d03c      	beq.n	8005eaa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	623b      	str	r3, [r7, #32]
   return(result);
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e50:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e6      	bne.n	8005e30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3308      	adds	r3, #8
 8005e68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f023 0301 	bic.w	r3, r3, #1
 8005e78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e82:	61fa      	str	r2, [r7, #28]
 8005e84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	69b9      	ldr	r1, [r7, #24]
 8005e88:	69fa      	ldr	r2, [r7, #28]
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e5      	bne.n	8005e62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e012      	b.n	8005ed0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3758      	adds	r7, #88	@ 0x58
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	603b      	str	r3, [r7, #0]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee8:	e04f      	b.n	8005f8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef0:	d04b      	beq.n	8005f8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef2:	f7fb fb29 	bl	8001548 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d302      	bcc.n	8005f08 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e04e      	b.n	8005faa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d037      	beq.n	8005f8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b80      	cmp	r3, #128	@ 0x80
 8005f1e:	d034      	beq.n	8005f8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b40      	cmp	r3, #64	@ 0x40
 8005f24:	d031      	beq.n	8005f8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d110      	bne.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2208      	movs	r2, #8
 8005f3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 f839 	bl	8005fb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2208      	movs	r2, #8
 8005f46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e029      	b.n	8005faa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f64:	d111      	bne.n	8005f8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f81f 	bl	8005fb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e00f      	b.n	8005faa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4013      	ands	r3, r2
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	bf0c      	ite	eq
 8005f9a:	2301      	moveq	r3, #1
 8005f9c:	2300      	movne	r3, #0
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d0a0      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b095      	sub	sp, #84	@ 0x54
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fda:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fe0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e6      	bne.n	8005fbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	4b1e      	ldr	r3, [pc, #120]	@ (800607c <UART_EndRxTransfer+0xc8>)
 8006002:	4013      	ands	r3, r2
 8006004:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3308      	adds	r3, #8
 800600c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800600e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006010:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006014:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e5      	bne.n	8005fee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006026:	2b01      	cmp	r3, #1
 8006028:	d118      	bne.n	800605c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	60bb      	str	r3, [r7, #8]
   return(result);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f023 0310 	bic.w	r3, r3, #16
 800603e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	6979      	ldr	r1, [r7, #20]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	613b      	str	r3, [r7, #16]
   return(result);
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e6      	bne.n	800602a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006070:	bf00      	nop
 8006072:	3754      	adds	r7, #84	@ 0x54
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	effffffe 	.word	0xeffffffe

08006080 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_UARTEx_DisableFifoMode+0x16>
 8006092:	2302      	movs	r3, #2
 8006094:	e027      	b.n	80060e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2224      	movs	r2, #36	@ 0x24
 80060a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0201 	bic.w	r2, r2, #1
 80060bc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80060c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006102:	2b01      	cmp	r3, #1
 8006104:	d101      	bne.n	800610a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006106:	2302      	movs	r3, #2
 8006108:	e02d      	b.n	8006166 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2224      	movs	r2, #36	@ 0x24
 8006116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0201 	bic.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f850 	bl	80061ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006182:	2302      	movs	r3, #2
 8006184:	e02d      	b.n	80061e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2224      	movs	r2, #36	@ 0x24
 8006192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0201 	bic.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f812 	bl	80061ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d108      	bne.n	800620e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800620c:	e031      	b.n	8006272 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800620e:	2310      	movs	r3, #16
 8006210:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006212:	2310      	movs	r3, #16
 8006214:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	0e5b      	lsrs	r3, r3, #25
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	0f5b      	lsrs	r3, r3, #29
 800622e:	b2db      	uxtb	r3, r3
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006236:	7bbb      	ldrb	r3, [r7, #14]
 8006238:	7b3a      	ldrb	r2, [r7, #12]
 800623a:	4911      	ldr	r1, [pc, #68]	@ (8006280 <UARTEx_SetNbDataToProcess+0x94>)
 800623c:	5c8a      	ldrb	r2, [r1, r2]
 800623e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006242:	7b3a      	ldrb	r2, [r7, #12]
 8006244:	490f      	ldr	r1, [pc, #60]	@ (8006284 <UARTEx_SetNbDataToProcess+0x98>)
 8006246:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006248:	fb93 f3f2 	sdiv	r3, r3, r2
 800624c:	b29a      	uxth	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	7b7a      	ldrb	r2, [r7, #13]
 8006258:	4909      	ldr	r1, [pc, #36]	@ (8006280 <UARTEx_SetNbDataToProcess+0x94>)
 800625a:	5c8a      	ldrb	r2, [r1, r2]
 800625c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006260:	7b7a      	ldrb	r2, [r7, #13]
 8006262:	4908      	ldr	r1, [pc, #32]	@ (8006284 <UARTEx_SetNbDataToProcess+0x98>)
 8006264:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006266:	fb93 f3f2 	sdiv	r3, r3, r2
 800626a:	b29a      	uxth	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	08047d54 	.word	0x08047d54
 8006284:	08047d5c 	.word	0x08047d5c

08006288 <memset>:
 8006288:	4402      	add	r2, r0
 800628a:	4603      	mov	r3, r0
 800628c:	4293      	cmp	r3, r2
 800628e:	d100      	bne.n	8006292 <memset+0xa>
 8006290:	4770      	bx	lr
 8006292:	f803 1b01 	strb.w	r1, [r3], #1
 8006296:	e7f9      	b.n	800628c <memset+0x4>

08006298 <__libc_init_array>:
 8006298:	b570      	push	{r4, r5, r6, lr}
 800629a:	4d0d      	ldr	r5, [pc, #52]	@ (80062d0 <__libc_init_array+0x38>)
 800629c:	4c0d      	ldr	r4, [pc, #52]	@ (80062d4 <__libc_init_array+0x3c>)
 800629e:	1b64      	subs	r4, r4, r5
 80062a0:	10a4      	asrs	r4, r4, #2
 80062a2:	2600      	movs	r6, #0
 80062a4:	42a6      	cmp	r6, r4
 80062a6:	d109      	bne.n	80062bc <__libc_init_array+0x24>
 80062a8:	4d0b      	ldr	r5, [pc, #44]	@ (80062d8 <__libc_init_array+0x40>)
 80062aa:	4c0c      	ldr	r4, [pc, #48]	@ (80062dc <__libc_init_array+0x44>)
 80062ac:	f000 f818 	bl	80062e0 <_init>
 80062b0:	1b64      	subs	r4, r4, r5
 80062b2:	10a4      	asrs	r4, r4, #2
 80062b4:	2600      	movs	r6, #0
 80062b6:	42a6      	cmp	r6, r4
 80062b8:	d105      	bne.n	80062c6 <__libc_init_array+0x2e>
 80062ba:	bd70      	pop	{r4, r5, r6, pc}
 80062bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c0:	4798      	blx	r3
 80062c2:	3601      	adds	r6, #1
 80062c4:	e7ee      	b.n	80062a4 <__libc_init_array+0xc>
 80062c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ca:	4798      	blx	r3
 80062cc:	3601      	adds	r6, #1
 80062ce:	e7f2      	b.n	80062b6 <__libc_init_array+0x1e>
 80062d0:	08047d6c 	.word	0x08047d6c
 80062d4:	08047d6c 	.word	0x08047d6c
 80062d8:	08047d6c 	.word	0x08047d6c
 80062dc:	08047d70 	.word	0x08047d70

080062e0 <_init>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	bf00      	nop
 80062e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e6:	bc08      	pop	{r3}
 80062e8:	469e      	mov	lr, r3
 80062ea:	4770      	bx	lr

080062ec <_fini>:
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ee:	bf00      	nop
 80062f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f2:	bc08      	pop	{r3}
 80062f4:	469e      	mov	lr, r3
 80062f6:	4770      	bx	lr
