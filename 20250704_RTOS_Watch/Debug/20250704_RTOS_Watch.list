
20250704_RTOS_Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075dc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  0800777c  0800777c  0000877c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007938  08007938  000090c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007938  08007938  00008938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007940  08007940  000090c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007940  08007940  00008940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007944  08007944  00008944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08007948  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004304  200000c0  08007a08  000090c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043c4  08007a08  000093c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b8c  00000000  00000000  000090f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f17  00000000  00000000  00021c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  00026b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001128  00000000  00000000  00028248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b632  00000000  00000000  00029370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fc3d  00000000  00000000  000449a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098753  00000000  00000000  000645df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcd32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d74  00000000  00000000  000fcd78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00102aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007764 	.word	0x08007764

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	08007764 	.word	0x08007764

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200000fc 	.word	0x200000fc
 80005dc:	2000019c 	.word	0x2000019c

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b09c      	sub	sp, #112	@ 0x70
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	Model_StopWatchInit();
 80005e6:	f001 f889 	bl	80016fc <Model_StopWatchInit>
	Model_modeInit();
 80005ea:	f001 f85b 	bl	80016a4 <Model_modeInit>
	Model_timeWatchInit();
 80005ee:	f001 f8bb 	bl	8001768 <Model_timeWatchInit>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  btnMail = osMailCreate(osMailQ(btnMail), NULL);
 80005f2:	2100      	movs	r1, #0
 80005f4:	482e      	ldr	r0, [pc, #184]	@ (80006b0 <MX_FREERTOS_Init+0xd0>)
 80005f6:	f004 f911 	bl	800481c <osMailCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a2d      	ldr	r2, [pc, #180]	@ (80006b4 <MX_FREERTOS_Init+0xd4>)
 80005fe:	6013      	str	r3, [r2, #0]
  btnFndMail = osMailCreate(osMailQ(btnFndMail), NULL);
 8000600:	2100      	movs	r1, #0
 8000602:	482d      	ldr	r0, [pc, #180]	@ (80006b8 <MX_FREERTOS_Init+0xd8>)
 8000604:	f004 f90a 	bl	800481c <osMailCreate>
 8000608:	4603      	mov	r3, r0
 800060a:	4a2c      	ldr	r2, [pc, #176]	@ (80006bc <MX_FREERTOS_Init+0xdc>)
 800060c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800060e:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <MX_FREERTOS_Init+0xe0>)
 8000610:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000614:	461d      	mov	r5, r3
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000622:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f003 feba 	bl	80043a2 <osThreadCreate>
 800062e:	4603      	mov	r3, r0
 8000630:	4a24      	ldr	r2, [pc, #144]	@ (80006c4 <MX_FREERTOS_Init+0xe4>)
 8000632:	6013      	str	r3, [r2, #0]

  /* definition and creation of nyListenerTask */
  osThreadDef(nyListenerTask, StartListenerTask, osPriorityNormal, 0, 128);
 8000634:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <MX_FREERTOS_Init+0xe8>)
 8000636:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800063a:	461d      	mov	r5, r3
 800063c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000640:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  nyListenerTaskHandle = osThreadCreate(osThread(nyListenerTask), NULL);
 8000648:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fea7 	bl	80043a2 <osThreadCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a1d      	ldr	r2, [pc, #116]	@ (80006cc <MX_FREERTOS_Init+0xec>)
 8000658:	6013      	str	r3, [r2, #0]

  /* definition and creation of myControllerTas */
  osThreadDef(myControllerTas, StartControllerTask, osPriorityNormal, 0, 128);
 800065a:	4b1d      	ldr	r3, [pc, #116]	@ (80006d0 <MX_FREERTOS_Init+0xf0>)
 800065c:	f107 041c 	add.w	r4, r7, #28
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myControllerTasHandle = osThreadCreate(osThread(myControllerTas), NULL);
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f003 fe94 	bl	80043a2 <osThreadCreate>
 800067a:	4603      	mov	r3, r0
 800067c:	4a15      	ldr	r2, [pc, #84]	@ (80006d4 <MX_FREERTOS_Init+0xf4>)
 800067e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myPresenterTask */
  osThreadDef(myPresenterTask, StartPresenterTask, osPriorityNormal, 0, 128);
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <MX_FREERTOS_Init+0xf8>)
 8000682:	463c      	mov	r4, r7
 8000684:	461d      	mov	r5, r3
 8000686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myPresenterTaskHandle = osThreadCreate(osThread(myPresenterTask), NULL);
 8000692:	463b      	mov	r3, r7
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f003 fe83 	bl	80043a2 <osThreadCreate>
 800069c:	4603      	mov	r3, r0
 800069e:	4a0f      	ldr	r2, [pc, #60]	@ (80006dc <MX_FREERTOS_Init+0xfc>)
 80006a0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_TIM_Base_Start_IT(&htim2);
 80006a2:	480f      	ldr	r0, [pc, #60]	@ (80006e0 <MX_FREERTOS_Init+0x100>)
 80006a4:	f003 fa68 	bl	8003b78 <HAL_TIM_Base_Start_IT>
  /* USER CODE END RTOS_THREADS */

}
 80006a8:	bf00      	nop
 80006aa:	3770      	adds	r7, #112	@ 0x70
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bdb0      	pop	{r4, r5, r7, pc}
 80006b0:	0800788c 	.word	0x0800788c
 80006b4:	200000e0 	.word	0x200000e0
 80006b8:	08007898 	.word	0x08007898
 80006bc:	200000e8 	.word	0x200000e8
 80006c0:	08007788 	.word	0x08007788
 80006c4:	200000ec 	.word	0x200000ec
 80006c8:	080077b4 	.word	0x080077b4
 80006cc:	200000f0 	.word	0x200000f0
 80006d0:	080077e0 	.word	0x080077e0
 80006d4:	200000f4 	.word	0x200000f4
 80006d8:	0800780c 	.word	0x0800780c
 80006dc:	200000f8 	.word	0x200000f8
 80006e0:	2000043c 	.word	0x2000043c

080006e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f003 fea4 	bl	800443a <osDelay>
 80006f2:	e7fb      	b.n	80006ec <StartDefaultTask+0x8>

080006f4 <StartListenerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartListenerTask */
void StartListenerTask(void const * argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartListenerTask */
	Listener_Init();
 80006fc:	f000 fefa 	bl	80014f4 <Listener_Init>
  /* Infinite loop */
  for(;;)
  {
	  Listener_Excute();
 8000700:	f000 ff0c 	bl	800151c <Listener_Excute>

    osDelay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f003 fe98 	bl	800443a <osDelay>
	  Listener_Excute();
 800070a:	bf00      	nop
 800070c:	e7f8      	b.n	8000700 <StartListenerTask+0xc>

0800070e <StartControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerTask */
void StartControllerTask(void const * argument)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerTask */
	Controller_Init();
 8000716:	f000 fb80 	bl	8000e1a <Controller_Init>
  /* Infinite loop */
  for(;;)
  {
Controller_Excute();
 800071a:	f000 fb88 	bl	8000e2e <Controller_Excute>
    osDelay(1);
 800071e:	2001      	movs	r0, #1
 8000720:	f003 fe8b 	bl	800443a <osDelay>
Controller_Excute();
 8000724:	bf00      	nop
 8000726:	e7f8      	b.n	800071a <StartControllerTask+0xc>

08000728 <StartPresenterTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPresenterTask */
void StartPresenterTask(void const * argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPresenterTask */
	Presenter_Init();
 8000730:	f001 f850 	bl	80017d4 <Presenter_Init>
  /* Infinite loop */
  for(;;)
  {
	  Presenter_Excute();
 8000734:	f001 f858 	bl	80017e8 <Presenter_Excute>
    osDelay(1);
 8000738:	2001      	movs	r0, #1
 800073a:	f003 fe7e 	bl	800443a <osDelay>
	  Presenter_Excute();
 800073e:	bf00      	nop
 8000740:	e7f8      	b.n	8000734 <StartPresenterTask+0xc>
	...

08000744 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	@ 0x28
 8000748:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b49      	ldr	r3, [pc, #292]	@ (8000884 <MX_GPIO_Init+0x140>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a48      	ldr	r2, [pc, #288]	@ (8000884 <MX_GPIO_Init+0x140>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b46      	ldr	r3, [pc, #280]	@ (8000884 <MX_GPIO_Init+0x140>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b42      	ldr	r3, [pc, #264]	@ (8000884 <MX_GPIO_Init+0x140>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a41      	ldr	r2, [pc, #260]	@ (8000884 <MX_GPIO_Init+0x140>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b3f      	ldr	r3, [pc, #252]	@ (8000884 <MX_GPIO_Init+0x140>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b3b      	ldr	r3, [pc, #236]	@ (8000884 <MX_GPIO_Init+0x140>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a3a      	ldr	r2, [pc, #232]	@ (8000884 <MX_GPIO_Init+0x140>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b38      	ldr	r3, [pc, #224]	@ (8000884 <MX_GPIO_Init+0x140>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b34      	ldr	r3, [pc, #208]	@ (8000884 <MX_GPIO_Init+0x140>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a33      	ldr	r2, [pc, #204]	@ (8000884 <MX_GPIO_Init+0x140>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b31      	ldr	r3, [pc, #196]	@ (8000884 <MX_GPIO_Init+0x140>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007ca:	2200      	movs	r2, #0
 80007cc:	f240 117f 	movw	r1, #383	@ 0x17f
 80007d0:	482d      	ldr	r0, [pc, #180]	@ (8000888 <MX_GPIO_Init+0x144>)
 80007d2:	f001 ffff 	bl	80027d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 80007d6:	2200      	movs	r2, #0
 80007d8:	f641 0113 	movw	r1, #6163	@ 0x1813
 80007dc:	482b      	ldr	r0, [pc, #172]	@ (800088c <MX_GPIO_Init+0x148>)
 80007de:	f001 fff9 	bl	80027d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80007e2:	2200      	movs	r2, #0
 80007e4:	f24f 0107 	movw	r1, #61447	@ 0xf007
 80007e8:	4829      	ldr	r0, [pc, #164]	@ (8000890 <MX_GPIO_Init+0x14c>)
 80007ea:	f001 fff3 	bl	80027d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007ee:	f240 137f 	movw	r3, #383	@ 0x17f
 80007f2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4820      	ldr	r0, [pc, #128]	@ (8000888 <MX_GPIO_Init+0x144>)
 8000808:	f001 fe48 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 800080c:	f641 0313 	movw	r3, #6163	@ 0x1813
 8000810:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	4819      	ldr	r0, [pc, #100]	@ (800088c <MX_GPIO_Init+0x148>)
 8000826:	f001 fe39 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800082a:	f24f 0307 	movw	r3, #61447	@ 0xf007
 800082e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4813      	ldr	r0, [pc, #76]	@ (8000890 <MX_GPIO_Init+0x14c>)
 8000844:	f001 fe2a 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	480b      	ldr	r0, [pc, #44]	@ (800088c <MX_GPIO_Init+0x148>)
 800085e:	f001 fe1d 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000862:	2328      	movs	r3, #40	@ 0x28
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	4806      	ldr	r0, [pc, #24]	@ (8000890 <MX_GPIO_Init+0x14c>)
 8000876:	f001 fe11 	bl	800249c <HAL_GPIO_Init>

}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	@ 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40020800 	.word	0x40020800
 800088c:	40020000 	.word	0x40020000
 8000890:	40020400 	.word	0x40020400

08000894 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_I2C1_Init+0x50>)
 800089a:	4a13      	ldr	r2, [pc, #76]	@ (80008e8 <MX_I2C1_Init+0x54>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008a0:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <MX_I2C1_Init+0x58>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008d2:	f001 ff99 	bl	8002808 <HAL_I2C_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008dc:	f000 f8e6 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000039c 	.word	0x2000039c
 80008e8:	40005400 	.word	0x40005400
 80008ec:	000186a0 	.word	0x000186a0

080008f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	@ 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a19      	ldr	r2, [pc, #100]	@ (8000974 <HAL_I2C_MspInit+0x84>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d12c      	bne.n	800096c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <HAL_I2C_MspInit+0x88>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <HAL_I2C_MspInit+0x88>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <HAL_I2C_MspInit+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800092e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000934:	2312      	movs	r3, #18
 8000936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000940:	2304      	movs	r3, #4
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	480c      	ldr	r0, [pc, #48]	@ (800097c <HAL_I2C_MspInit+0x8c>)
 800094c:	f001 fda6 	bl	800249c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <HAL_I2C_MspInit+0x88>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000958:	4a07      	ldr	r2, [pc, #28]	@ (8000978 <HAL_I2C_MspInit+0x88>)
 800095a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800095e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <HAL_I2C_MspInit+0x88>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	@ 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40005400 	.word	0x40005400
 8000978:	40023800 	.word	0x40023800
 800097c:	40020400 	.word	0x40020400

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f001 fc42 	bl	800220c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f80c 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f7ff feda 	bl	8000744 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000990:	f7ff ff80 	bl	8000894 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000994:	f000 f9a6 	bl	8000ce4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000998:	f7ff fe22 	bl	80005e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800099c:	f003 fcfa 	bl	8004394 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <main+0x20>

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	@ 0x50
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	2230      	movs	r2, #48	@ 0x30
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f006 f9fa 	bl	8006dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	4b27      	ldr	r3, [pc, #156]	@ (8000a6c <SystemClock_Config+0xc8>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d0:	4a26      	ldr	r2, [pc, #152]	@ (8000a6c <SystemClock_Config+0xc8>)
 80009d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d8:	4b24      	ldr	r3, [pc, #144]	@ (8000a6c <SystemClock_Config+0xc8>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <SystemClock_Config+0xcc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a20      	ldr	r2, [pc, #128]	@ (8000a70 <SystemClock_Config+0xcc>)
 80009ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <SystemClock_Config+0xcc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a14:	2304      	movs	r3, #4
 8000a16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a18:	2364      	movs	r3, #100	@ 0x64
 8000a1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a20:	2304      	movs	r3, #4
 8000a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a24:	f107 0320 	add.w	r3, r7, #32
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fb8b 	bl	8003144 <HAL_RCC_OscConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a34:	f000 f83a 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a38:	230f      	movs	r3, #15
 8000a3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	2103      	movs	r1, #3
 8000a54:	4618      	mov	r0, r3
 8000a56:	f002 fded 	bl	8003634 <HAL_RCC_ClockConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a60:	f000 f824 	bl	8000aac <Error_Handler>
  }
}
 8000a64:	bf00      	nop
 8000a66:	3750      	adds	r7, #80	@ 0x50
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40007000 	.word	0x40007000

08000a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a09      	ldr	r2, [pc, #36]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a86:	f001 fbe3 	bl	8002250 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	  if(htim->Instance == TIM2) {
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a92:	d105      	bne.n	8000aa0 <HAL_TIM_PeriodElapsedCallback+0x2c>
		 FND_DispDataCallBack();
 8000a94:	f001 f8c4 	bl	8001c20 <FND_DispDataCallBack>
		 StopWatch_IncTimeCallBack();
 8000a98:	f000 fb54 	bl	8001144 <StopWatch_IncTimeCallBack>
		 timeWatch_IncTimeCallBack();
 8000a9c:	f000 fce8 	bl	8001470 <timeWatch_IncTimeCallBack>

	  }
  /* USER CODE END Callback 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40014800 	.word	0x40014800

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <HAL_MspInit+0x54>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac6:	4a11      	ldr	r2, [pc, #68]	@ (8000b0c <HAL_MspInit+0x54>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ace:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <HAL_MspInit+0x54>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <HAL_MspInit+0x54>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b0c <HAL_MspInit+0x54>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <HAL_MspInit+0x54>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	210f      	movs	r1, #15
 8000afa:	f06f 0001 	mvn.w	r0, #1
 8000afe:	f001 fca3 	bl	8002448 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	@ 0x30
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	4b2e      	ldr	r3, [pc, #184]	@ (8000be0 <HAL_InitTick+0xd0>)
 8000b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b28:	4a2d      	ldr	r2, [pc, #180]	@ (8000be0 <HAL_InitTick+0xd0>)
 8000b2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b30:	4b2b      	ldr	r3, [pc, #172]	@ (8000be0 <HAL_InitTick+0xd0>)
 8000b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b3c:	f107 020c 	add.w	r2, r7, #12
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 ff94 	bl	8003a74 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b4c:	f002 ff7e 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 8000b50:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b54:	4a23      	ldr	r2, [pc, #140]	@ (8000be4 <HAL_InitTick+0xd4>)
 8000b56:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5a:	0c9b      	lsrs	r3, r3, #18
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000b60:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <HAL_InitTick+0xd8>)
 8000b62:	4a22      	ldr	r2, [pc, #136]	@ (8000bec <HAL_InitTick+0xdc>)
 8000b64:	601a      	str	r2, [r3, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000b66:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <HAL_InitTick+0xd8>)
 8000b68:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b6c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000be8 <HAL_InitTick+0xd8>)
 8000b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b72:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000b74:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <HAL_InitTick+0xd8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <HAL_InitTick+0xd8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <HAL_InitTick+0xd8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000b86:	4818      	ldr	r0, [pc, #96]	@ (8000be8 <HAL_InitTick+0xd8>)
 8000b88:	f002 ffa6 	bl	8003ad8 <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d11b      	bne.n	8000bd2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000b9a:	4813      	ldr	r0, [pc, #76]	@ (8000be8 <HAL_InitTick+0xd8>)
 8000b9c:	f002 ffec 	bl	8003b78 <HAL_TIM_Base_Start_IT>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d111      	bne.n	8000bd2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000bae:	201a      	movs	r0, #26
 8000bb0:	f001 fc66 	bl	8002480 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b0f      	cmp	r3, #15
 8000bb8:	d808      	bhi.n	8000bcc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	201a      	movs	r0, #26
 8000bc0:	f001 fc42 	bl	8002448 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf0 <HAL_InitTick+0xe0>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	e002      	b.n	8000bd2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3730      	adds	r7, #48	@ 0x30
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	431bde83 	.word	0x431bde83
 8000be8:	200003f0 	.word	0x200003f0
 8000bec:	40014800 	.word	0x40014800
 8000bf0:	20000064 	.word	0x20000064

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000c30:	4802      	ldr	r0, [pc, #8]	@ (8000c3c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000c32:	f003 f803 	bl	8003c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200003f0 	.word	0x200003f0

08000c40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c44:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <TIM2_IRQHandler+0x10>)
 8000c46:	f002 fff9 	bl	8003c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000043c 	.word	0x2000043c

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	@ (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	@ (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f006 f8f8 	bl	8006e78 <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20020000 	.word	0x20020000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	20000438 	.word	0x20000438
 8000cbc:	200043c8 	.word	0x200043c8

08000cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	@ (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d0a:	2263      	movs	r2, #99	@ 0x63
 8000d0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000d14:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d22:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d24:	2280      	movs	r2, #128	@ 0x80
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d28:	4813      	ldr	r0, [pc, #76]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d2a:	f002 fed5 	bl	8003ad8 <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d34:	f7ff feba 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4619      	mov	r1, r3
 8000d44:	480c      	ldr	r0, [pc, #48]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d46:	f003 f869 	bl	8003e1c <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d50:	f7ff feac 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d62:	f003 fa6b 	bl	800423c <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f7ff fe9e 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000043c 	.word	0x2000043c

08000d7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d8c:	d115      	bne.n	8000dba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x48>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x48>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x48>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2105      	movs	r1, #5
 8000dae:	201c      	movs	r0, #28
 8000db0:	f001 fb4a 	bl	8002448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000db4:	201c      	movs	r0, #28
 8000db6:	f001 fb63 	bl	8002480 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dcc:	f7ff ff78 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd0:	480c      	ldr	r0, [pc, #48]	@ (8000e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dd2:	490d      	ldr	r1, [pc, #52]	@ (8000e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df6:	f006 f845 	bl	8006e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fdc1 	bl	8000980 <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 8000e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8000e0c:	08007948 	.word	0x08007948
  ldr r2, =_sbss
 8000e10:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8000e14:	200043c4 	.word	0x200043c4

08000e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>

08000e1a <Controller_Init>:


void Controller_CheckEventMode();

void Controller_Init()
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
	StopWatch_Init();
 8000e1e:	f000 f889 	bl	8000f34 <StopWatch_Init>
	TimeWatch_Init();
 8000e22:	f000 f9d5 	bl	80011d0 <TimeWatch_Init>
	Distance_Init();
 8000e26:	f000 f877 	bl	8000f18 <Distance_Init>
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <Controller_Excute>:


void Controller_Excute()
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
	eModestate_t state = Model_GetModeState();
 8000e34:	f000 fc56 	bl	80016e4 <Model_GetModeState>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71fb      	strb	r3, [r7, #7]
	Controller_CheckEventMode();
 8000e3c:	f000 f814 	bl	8000e68 <Controller_CheckEventMode>

	switch (state)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d00a      	beq.n	8000e5c <Controller_Excute+0x2e>
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	dc0a      	bgt.n	8000e60 <Controller_Excute+0x32>
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d002      	beq.n	8000e54 <Controller_Excute+0x26>
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d002      	beq.n	8000e58 <Controller_Excute+0x2a>
	case S_DISTANCE_MODE:
		Distance_Excute();
	}


}
 8000e52:	e005      	b.n	8000e60 <Controller_Excute+0x32>
		TimeWatch_Excute();
 8000e54:	f000 f9e6 	bl	8001224 <TimeWatch_Excute>
		StopWatch_Excute();
 8000e58:	f000 f896 	bl	8000f88 <StopWatch_Excute>
		Distance_Excute();
 8000e5c:	f000 f863 	bl	8000f26 <Distance_Excute>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <Controller_CheckEventMode>:


void Controller_CheckEventMode()
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(modeEventMsgBox, 0);
 8000e6e:	4b25      	ldr	r3, [pc, #148]	@ (8000f04 <Controller_CheckEventMode+0x9c>)
 8000e70:	6819      	ldr	r1, [r3, #0]
 8000e72:	463b      	mov	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 fc5c 	bl	8004734 <osMessageGet>
	uint16_t evtState = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	82fb      	strh	r3, [r7, #22]
	eModestate_t state = Model_GetModeState();
 8000e80:	f000 fc30 	bl	80016e4 <Model_GetModeState>
 8000e84:	4603      	mov	r3, r0
 8000e86:	757b      	strb	r3, [r7, #21]

	  if(evt.status == osEventMessage) {
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	2b10      	cmp	r3, #16
 8000e8c:	d137      	bne.n	8000efe <Controller_CheckEventMode+0x96>
	    	evtState = evt.value.v;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	82fb      	strh	r3, [r7, #22]
	    	if(evtState != EVENT_MODE){
 8000e92:	8afb      	ldrh	r3, [r7, #22]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d131      	bne.n	8000efc <Controller_CheckEventMode+0x94>
	    		return;
	    	}

	    if(state == S_STOP_WATCH_MODE) {
 8000e98:	7d7b      	ldrb	r3, [r7, #21]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d115      	bne.n	8000eca <Controller_CheckEventMode+0x62>
		   Model_SetModeState(S_TIME_WATCH_MODE);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 fc10 	bl	80016c4 <Model_SetModeState>
			stopWatch_t *pstopWatchData = osMailAlloc(stopWatchDataMailBox, 0);
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <Controller_CheckEventMode+0xa0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 fd0e 	bl	80048cc <osMailAlloc>
 8000eb0:	60f8      	str	r0, [r7, #12]
			memcpy(pstopWatchData, &stopWatchData, sizeof(stopWatch_t));
 8000eb2:	2206      	movs	r2, #6
 8000eb4:	4915      	ldr	r1, [pc, #84]	@ (8000f0c <Controller_CheckEventMode+0xa4>)
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f006 f80a 	bl	8006ed0 <memcpy>
			osMailPut(stopWatchDataMailBox, pstopWatchData);
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <Controller_CheckEventMode+0xa0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68f9      	ldr	r1, [r7, #12]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fd18 	bl	80048f8 <osMailPut>
 8000ec8:	e019      	b.n	8000efe <Controller_CheckEventMode+0x96>
		 }

	    else if(state == S_TIME_WATCH_MODE) {
 8000eca:	7d7b      	ldrb	r3, [r7, #21]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d116      	bne.n	8000efe <Controller_CheckEventMode+0x96>
		   Model_SetModeState(S_STOP_WATCH_MODE);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f000 fbf7 	bl	80016c4 <Model_SetModeState>
			timeWatch_t *ptimeWatchData = osMailAlloc(timeWatchDataMailBox, 0);
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <Controller_CheckEventMode+0xa8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f003 fcf5 	bl	80048cc <osMailAlloc>
 8000ee2:	6138      	str	r0, [r7, #16]
			memcpy(ptimeWatchData, &timeWatchData, sizeof(timeWatch_t));
 8000ee4:	2206      	movs	r2, #6
 8000ee6:	490b      	ldr	r1, [pc, #44]	@ (8000f14 <Controller_CheckEventMode+0xac>)
 8000ee8:	6938      	ldr	r0, [r7, #16]
 8000eea:	f005 fff1 	bl	8006ed0 <memcpy>
			osMailPut(timeWatchDataMailBox, ptimeWatchData);
 8000eee:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <Controller_CheckEventMode+0xa8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6939      	ldr	r1, [r7, #16]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f003 fcff 	bl	80048f8 <osMailPut>
 8000efa:	e000      	b.n	8000efe <Controller_CheckEventMode+0x96>
	    		return;
 8000efc:	bf00      	nop
		 }
	  }


}
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200004dc 	.word	0x200004dc
 8000f08:	200004e8 	.word	0x200004e8
 8000f0c:	20000484 	.word	0x20000484
 8000f10:	200004f8 	.word	0x200004f8
 8000f14:	20000494 	.word	0x20000494

08000f18 <Distance_Init>:




void Distance_Init()
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <Distance_Excute>:


void Distance_Excute()
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <StopWatch_Init>:
static void StopWatch_Run();
static void StopWatch_Clear();


void StopWatch_Init()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
	stopWatchData.hour = 0;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <StopWatch_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
	stopWatchData.min = 0;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <StopWatch_Init+0x4c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	705a      	strb	r2, [r3, #1]
	stopWatchData.sec = 0;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <StopWatch_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	709a      	strb	r2, [r3, #2]
	stopWatchData.msec = 0;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <StopWatch_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	809a      	strh	r2, [r3, #4]
	stopWatch_t *pstopWatchData = osMailAlloc(stopWatchDataMailBox, 0);
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <StopWatch_Init+0x50>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f003 fcb7 	bl	80048cc <osMailAlloc>
 8000f5e:	6078      	str	r0, [r7, #4]
	memcpy(pstopWatchData, &stopWatchData, sizeof(stopWatch_t));
 8000f60:	2206      	movs	r2, #6
 8000f62:	4907      	ldr	r1, [pc, #28]	@ (8000f80 <StopWatch_Init+0x4c>)
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f005 ffb3 	bl	8006ed0 <memcpy>
	osMailPut(stopWatchDataMailBox, pstopWatchData);
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <StopWatch_Init+0x50>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f003 fcc1 	bl	80048f8 <osMailPut>

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000484 	.word	0x20000484
 8000f84:	200004e8 	.word	0x200004e8

08000f88 <StopWatch_Excute>:

void StopWatch_Excute()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0

stopWatchState_e state = Model_GetStopWatchState();
 8000f8e:	f000 fbdf 	bl	8001750 <Model_GetStopWatchState>
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]

switch(state)
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d00c      	beq.n	8000fb6 <StopWatch_Excute+0x2e>
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	dc0d      	bgt.n	8000fbc <StopWatch_Excute+0x34>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <StopWatch_Excute+0x22>
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d003      	beq.n	8000fb0 <StopWatch_Excute+0x28>
	break;
case S_STOPWATCH_CLEAR:
	StopWatch_Clear();
	break;
default:
	break;
 8000fa8:	e008      	b.n	8000fbc <StopWatch_Excute+0x34>
	StopWatch_Stop();
 8000faa:	f000 f80d 	bl	8000fc8 <StopWatch_Stop>
	break;
 8000fae:	e006      	b.n	8000fbe <StopWatch_Excute+0x36>
	StopWatch_Run();
 8000fb0:	f000 f844 	bl	800103c <StopWatch_Run>
	break;
 8000fb4:	e003      	b.n	8000fbe <StopWatch_Excute+0x36>
	StopWatch_Clear();
 8000fb6:	f000 f885 	bl	80010c4 <StopWatch_Clear>
	break;
 8000fba:	e000      	b.n	8000fbe <StopWatch_Excute+0x36>
	break;
 8000fbc:	bf00      	nop
}
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <StopWatch_Stop>:



void StopWatch_Stop()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
    osEvent evt = osMessageGet(stopWatchEventMsgBox, 0);
 8000fce:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <StopWatch_Stop+0x68>)
 8000fd0:	6819      	ldr	r1, [r3, #0]
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 fbac 	bl	8004734 <osMessageGet>
    uint16_t evtState = 2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	82fb      	strh	r3, [r7, #22]

    if(evt.status == osEventMessage) {
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b10      	cmp	r3, #16
 8000fe4:	d10e      	bne.n	8001004 <StopWatch_Stop+0x3c>
    	evtState = evt.value.v;
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	82fb      	strh	r3, [r7, #22]

	if(evtState == EVENT_RUN_STOP) {
 8000fea:	8afb      	ldrh	r3, [r7, #22]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d103      	bne.n	8000ff8 <StopWatch_Stop+0x30>
	   Model_SetStopWatchState(S_STOPWATCH_RUN);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f000 fb9d 	bl	8001730 <Model_SetStopWatchState>
 8000ff6:	e005      	b.n	8001004 <StopWatch_Stop+0x3c>
	 }

	else if(evtState == EVENT_CLEAR) {
 8000ff8:	8afb      	ldrh	r3, [r7, #22]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d102      	bne.n	8001004 <StopWatch_Stop+0x3c>
	   Model_SetStopWatchState(S_STOPWATCH_CLEAR);
 8000ffe:	2002      	movs	r0, #2
 8001000:	f000 fb96 	bl	8001730 <Model_SetStopWatchState>
	 }

    }

	stopWatch_t *pstopWatchData = osMailAlloc(stopWatchDataMailBox, 0);
 8001004:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <StopWatch_Stop+0x6c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f003 fc5e 	bl	80048cc <osMailAlloc>
 8001010:	6138      	str	r0, [r7, #16]
	memcpy(pstopWatchData, &stopWatchData, sizeof(stopWatch_t));
 8001012:	2206      	movs	r2, #6
 8001014:	4908      	ldr	r1, [pc, #32]	@ (8001038 <StopWatch_Stop+0x70>)
 8001016:	6938      	ldr	r0, [r7, #16]
 8001018:	f005 ff5a 	bl	8006ed0 <memcpy>
	osMailPut(stopWatchDataMailBox, pstopWatchData);
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <StopWatch_Stop+0x6c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6939      	ldr	r1, [r7, #16]
 8001022:	4618      	mov	r0, r3
 8001024:	f003 fc68 	bl	80048f8 <osMailPut>

}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200004e4 	.word	0x200004e4
 8001034:	200004e8 	.word	0x200004e8
 8001038:	20000484 	.word	0x20000484

0800103c <StopWatch_Run>:

void StopWatch_Run()
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
    osEvent evt = osMessageGet(stopWatchEventMsgBox, 0);
 8001042:	4b1c      	ldr	r3, [pc, #112]	@ (80010b4 <StopWatch_Run+0x78>)
 8001044:	6819      	ldr	r1, [r3, #0]
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2200      	movs	r2, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f003 fb72 	bl	8004734 <osMessageGet>
    uint16_t evtState = 2;
 8001050:	2302      	movs	r3, #2
 8001052:	82fb      	strh	r3, [r7, #22]

    if(evt.status == osEventMessage) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b10      	cmp	r3, #16
 8001058:	d107      	bne.n	800106a <StopWatch_Run+0x2e>
    	evtState = evt.value.v;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	82fb      	strh	r3, [r7, #22]

	if(evtState == EVENT_RUN_STOP) {
 800105e:	8afb      	ldrh	r3, [r7, #22]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <StopWatch_Run+0x2e>
	   Model_SetStopWatchState(S_STOPWATCH_STOP);
 8001064:	2000      	movs	r0, #0
 8001066:	f000 fb63 	bl	8001730 <Model_SetStopWatchState>
	 }
    }

	static stopWatch_t prevStopWatchData;

	if (memcmp(&stopWatchData, &prevStopWatchData, sizeof(stopWatch_t)))//메모리를 비교해서 값이 다르면
 800106a:	2206      	movs	r2, #6
 800106c:	4912      	ldr	r1, [pc, #72]	@ (80010b8 <StopWatch_Run+0x7c>)
 800106e:	4813      	ldr	r0, [pc, #76]	@ (80010bc <StopWatch_Run+0x80>)
 8001070:	f005 fe8c 	bl	8006d8c <memcmp>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d018      	beq.n	80010ac <StopWatch_Run+0x70>
	{
	memcpy(&prevStopWatchData, &stopWatchData, sizeof(stopWatch_t));
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <StopWatch_Run+0x7c>)
 800107c:	4a0f      	ldr	r2, [pc, #60]	@ (80010bc <StopWatch_Run+0x80>)
 800107e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001082:	6018      	str	r0, [r3, #0]
 8001084:	3304      	adds	r3, #4
 8001086:	8019      	strh	r1, [r3, #0]
	stopWatch_t *pstopWatchData = osMailAlloc(stopWatchDataMailBox, 0);
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <StopWatch_Run+0x84>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f003 fc1c 	bl	80048cc <osMailAlloc>
 8001094:	6138      	str	r0, [r7, #16]
	memcpy(pstopWatchData, &stopWatchData, sizeof(stopWatch_t));
 8001096:	2206      	movs	r2, #6
 8001098:	4908      	ldr	r1, [pc, #32]	@ (80010bc <StopWatch_Run+0x80>)
 800109a:	6938      	ldr	r0, [r7, #16]
 800109c:	f005 ff18 	bl	8006ed0 <memcpy>
	osMailPut(stopWatchDataMailBox, pstopWatchData);
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <StopWatch_Run+0x84>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6939      	ldr	r1, [r7, #16]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 fc26 	bl	80048f8 <osMailPut>
	}
}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200004e4 	.word	0x200004e4
 80010b8:	2000048c 	.word	0x2000048c
 80010bc:	20000484 	.word	0x20000484
 80010c0:	200004e8 	.word	0x200004e8

080010c4 <StopWatch_Clear>:

void StopWatch_Clear()
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
    osEvent evt = osMessageGet(stopWatchEventMsgBox, 0);
 80010ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <StopWatch_Clear+0x74>)
 80010cc:	6819      	ldr	r1, [r3, #0]
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2200      	movs	r2, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 fb2e 	bl	8004734 <osMessageGet>
    uint16_t evtState = 2;
 80010d8:	2302      	movs	r3, #2
 80010da:	82fb      	strh	r3, [r7, #22]

    if(evt.status == osEventMessage) {
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b10      	cmp	r3, #16
 80010e0:	d107      	bne.n	80010f2 <StopWatch_Clear+0x2e>
    	evtState = evt.value.v;
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	82fb      	strh	r3, [r7, #22]

	if(evtState == EVENT_RUN_STOP) {
 80010e6:	8afb      	ldrh	r3, [r7, #22]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <StopWatch_Clear+0x2e>
	   Model_SetStopWatchState(S_STOPWATCH_RUN);
 80010ec:	2001      	movs	r0, #1
 80010ee:	f000 fb1f 	bl	8001730 <Model_SetStopWatchState>
	 }
    }
//	Model_SetStopWatchState(S_STOPWATCH_STOP);
	stopWatchData.hour = 0;
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <StopWatch_Clear+0x78>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
	stopWatchData.min = 0;
 80010f8:	4b10      	ldr	r3, [pc, #64]	@ (800113c <StopWatch_Clear+0x78>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	705a      	strb	r2, [r3, #1]
	stopWatchData.sec = 0;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <StopWatch_Clear+0x78>)
 8001100:	2200      	movs	r2, #0
 8001102:	709a      	strb	r2, [r3, #2]
	stopWatchData.msec = 0;
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <StopWatch_Clear+0x78>)
 8001106:	2200      	movs	r2, #0
 8001108:	809a      	strh	r2, [r3, #4]


	stopWatch_t *pstopWatchData = osMailAlloc(stopWatchDataMailBox, 0);
 800110a:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <StopWatch_Clear+0x7c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f003 fbdb 	bl	80048cc <osMailAlloc>
 8001116:	6138      	str	r0, [r7, #16]
	memcpy(pstopWatchData, &stopWatchData, sizeof(stopWatch_t));
 8001118:	2206      	movs	r2, #6
 800111a:	4908      	ldr	r1, [pc, #32]	@ (800113c <StopWatch_Clear+0x78>)
 800111c:	6938      	ldr	r0, [r7, #16]
 800111e:	f005 fed7 	bl	8006ed0 <memcpy>
	osMailPut(stopWatchDataMailBox, pstopWatchData);
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <StopWatch_Clear+0x7c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6939      	ldr	r1, [r7, #16]
 8001128:	4618      	mov	r0, r3
 800112a:	f003 fbe5 	bl	80048f8 <osMailPut>

}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200004e4 	.word	0x200004e4
 800113c:	20000484 	.word	0x20000484
 8001140:	200004e8 	.word	0x200004e8

08001144 <StopWatch_IncTimeCallBack>:


void StopWatch_IncTimeCallBack()
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	 if(Model_GetStopWatchState() != S_STOPWATCH_RUN)
 8001148:	f000 fb02 	bl	8001750 <Model_GetStopWatchState>
 800114c:	4603      	mov	r3, r0
 800114e:	2b01      	cmp	r3, #1
 8001150:	d13a      	bne.n	80011c8 <StopWatch_IncTimeCallBack+0x84>
	 {
		 return;
	 }

	if (stopWatchData.msec != 1000-1){
 8001152:	4b1e      	ldr	r3, [pc, #120]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 8001154:	889b      	ldrh	r3, [r3, #4]
 8001156:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800115a:	4293      	cmp	r3, r2
 800115c:	d006      	beq.n	800116c <StopWatch_IncTimeCallBack+0x28>
		stopWatchData.msec++;
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 8001160:	889b      	ldrh	r3, [r3, #4]
 8001162:	3301      	adds	r3, #1
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 8001168:	809a      	strh	r2, [r3, #4]
		return;
 800116a:	e02e      	b.n	80011ca <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.msec = 0;
 800116c:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 800116e:	2200      	movs	r2, #0
 8001170:	809a      	strh	r2, [r3, #4]

	if (stopWatchData.sec != 60-1){
 8001172:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 8001174:	789b      	ldrb	r3, [r3, #2]
 8001176:	2b3b      	cmp	r3, #59	@ 0x3b
 8001178:	d006      	beq.n	8001188 <StopWatch_IncTimeCallBack+0x44>
		stopWatchData.sec++;
 800117a:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 800117c:	789b      	ldrb	r3, [r3, #2]
 800117e:	3301      	adds	r3, #1
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 8001184:	709a      	strb	r2, [r3, #2]
		return;
 8001186:	e020      	b.n	80011ca <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.sec = 0;
 8001188:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 800118a:	2200      	movs	r2, #0
 800118c:	709a      	strb	r2, [r3, #2]

	if (stopWatchData.min != 60-1){
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	2b3b      	cmp	r3, #59	@ 0x3b
 8001194:	d006      	beq.n	80011a4 <StopWatch_IncTimeCallBack+0x60>
		stopWatchData.min++;
 8001196:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 8001198:	785b      	ldrb	r3, [r3, #1]
 800119a:	3301      	adds	r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 80011a0:	705a      	strb	r2, [r3, #1]
		return;
 80011a2:	e012      	b.n	80011ca <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.min = 0;
 80011a4:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	705a      	strb	r2, [r3, #1]

	if (stopWatchData.hour != 24-1){
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b17      	cmp	r3, #23
 80011b0:	d006      	beq.n	80011c0 <StopWatch_IncTimeCallBack+0x7c>
		stopWatchData.hour++;
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 80011bc:	701a      	strb	r2, [r3, #0]
		return;
 80011be:	e004      	b.n	80011ca <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.hour = 0;
 80011c0:	4b02      	ldr	r3, [pc, #8]	@ (80011cc <StopWatch_IncTimeCallBack+0x88>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	e000      	b.n	80011ca <StopWatch_IncTimeCallBack+0x86>
		 return;
 80011c8:	bf00      	nop

}
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000484 	.word	0x20000484

080011d0 <TimeWatch_Init>:
void TimeWatch_Modify_Hour();



void TimeWatch_Init()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
	timeWatchData.hour = 12;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <TimeWatch_Init+0x4c>)
 80011d8:	220c      	movs	r2, #12
 80011da:	701a      	strb	r2, [r3, #0]
	timeWatchData.min = 0;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <TimeWatch_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	705a      	strb	r2, [r3, #1]
	timeWatchData.sec = 0;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <TimeWatch_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	709a      	strb	r2, [r3, #2]
	timeWatchData.msec = 0;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <TimeWatch_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	809a      	strh	r2, [r3, #4]


	timeWatch_t *ptimeWatchData = osMailAlloc(timeWatchDataMailBox, 0);
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <TimeWatch_Init+0x50>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f003 fb69 	bl	80048cc <osMailAlloc>
 80011fa:	6078      	str	r0, [r7, #4]
	memcpy(ptimeWatchData, &timeWatchData, sizeof(timeWatch_t));
 80011fc:	2206      	movs	r2, #6
 80011fe:	4907      	ldr	r1, [pc, #28]	@ (800121c <TimeWatch_Init+0x4c>)
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f005 fe65 	bl	8006ed0 <memcpy>
	osMailPut(timeWatchDataMailBox, ptimeWatchData);
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <TimeWatch_Init+0x50>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	f003 fb73 	bl	80048f8 <osMailPut>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000494 	.word	0x20000494
 8001220:	200004f8 	.word	0x200004f8

08001224 <TimeWatch_Excute>:

void TimeWatch_Excute()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
	timeWatchState_t state = Model_GetTimeWatchState();
 800122a:	f000 fac7 	bl	80017bc <Model_GetTimeWatchState>
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]

	switch(state)
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b03      	cmp	r3, #3
 8001236:	d817      	bhi.n	8001268 <TimeWatch_Excute+0x44>
 8001238:	a201      	add	r2, pc, #4	@ (adr r2, 8001240 <TimeWatch_Excute+0x1c>)
 800123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123e:	bf00      	nop
 8001240:	08001251 	.word	0x08001251
 8001244:	08001257 	.word	0x08001257
 8001248:	0800125d 	.word	0x0800125d
 800124c:	08001263 	.word	0x08001263
	{
	case S_TIMEWATCH_NORMAL:
		TimeWatch_Normal();
 8001250:	f000 f810 	bl	8001274 <TimeWatch_Normal>
		break;
 8001254:	e009      	b.n	800126a <TimeWatch_Excute+0x46>
	case S_TIMEWATCH_SEC:
		TimeWatch_Modify_Sec();
 8001256:	f000 f84b 	bl	80012f0 <TimeWatch_Modify_Sec>
		break;
 800125a:	e006      	b.n	800126a <TimeWatch_Excute+0x46>
	case S_TIMEWATCH_MIN:
		TimeWatch_Modify_Min();
 800125c:	f000 f88a 	bl	8001374 <TimeWatch_Modify_Min>
		break;
 8001260:	e003      	b.n	800126a <TimeWatch_Excute+0x46>
	case S_TIMEWATCH_HOUR:
		TimeWatch_Modify_Hour();
 8001262:	f000 f8c9 	bl	80013f8 <TimeWatch_Modify_Hour>
		break;
 8001266:	e000      	b.n	800126a <TimeWatch_Excute+0x46>
	default:
		break;
 8001268:	bf00      	nop
	}



}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop

08001274 <TimeWatch_Normal>:


void TimeWatch_Normal()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
	static uint16_t prevSec = 0;
	osEvent evt = osMessageGet(timeWatchEventMsgBox, 0);
 800127a:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <TimeWatch_Normal+0x6c>)
 800127c:	6819      	ldr	r1, [r3, #0]
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f003 fa56 	bl	8004734 <osMessageGet>
	uint16_t evtState;

	if(evt.status == osEventMessage) {
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b10      	cmp	r3, #16
 800128c:	d107      	bne.n	800129e <TimeWatch_Normal+0x2a>
		evtState = evt.value.v;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	82fb      	strh	r3, [r7, #22]

		if (evtState == EVENT_TIME_MODIFY) {
 8001292:	8afb      	ldrh	r3, [r7, #22]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <TimeWatch_Normal+0x2a>
			Model_SetTimeWatchState(S_TIMEWATCH_SEC);
 8001298:	2001      	movs	r0, #1
 800129a:	f000 fa7f 	bl	800179c <Model_SetTimeWatchState>


	}


	if(prevSec == timeWatchData.msec) {
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <TimeWatch_Normal+0x70>)
 80012a0:	889a      	ldrh	r2, [r3, #4]
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <TimeWatch_Normal+0x74>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d016      	beq.n	80012d8 <TimeWatch_Normal+0x64>
		return;
	}

	prevSec = timeWatchData.msec;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <TimeWatch_Normal+0x70>)
 80012ac:	889a      	ldrh	r2, [r3, #4]
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <TimeWatch_Normal+0x74>)
 80012b0:	801a      	strh	r2, [r3, #0]

	timeWatch_t *ptimeWatchData = osMailAlloc(timeWatchDataMailBox, 0);
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <TimeWatch_Normal+0x78>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 fb07 	bl	80048cc <osMailAlloc>
 80012be:	6138      	str	r0, [r7, #16]
	memcpy(ptimeWatchData, &timeWatchData, sizeof(timeWatch_t));
 80012c0:	2206      	movs	r2, #6
 80012c2:	4908      	ldr	r1, [pc, #32]	@ (80012e4 <TimeWatch_Normal+0x70>)
 80012c4:	6938      	ldr	r0, [r7, #16]
 80012c6:	f005 fe03 	bl	8006ed0 <memcpy>
	osMailPut(timeWatchDataMailBox, ptimeWatchData);
 80012ca:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <TimeWatch_Normal+0x78>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6939      	ldr	r1, [r7, #16]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 fb11 	bl	80048f8 <osMailPut>
 80012d6:	e000      	b.n	80012da <TimeWatch_Normal+0x66>
		return;
 80012d8:	bf00      	nop
}
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200004f4 	.word	0x200004f4
 80012e4:	20000494 	.word	0x20000494
 80012e8:	2000049a 	.word	0x2000049a
 80012ec:	200004f8 	.word	0x200004f8

080012f0 <TimeWatch_Modify_Sec>:

void TimeWatch_Modify_Sec()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(timeWatchEventMsgBox, 0);
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <TimeWatch_Modify_Sec+0x78>)
 80012f8:	6819      	ldr	r1, [r3, #0]
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2200      	movs	r2, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 fa18 	bl	8004734 <osMessageGet>
	uint16_t evtState;

	if(evt.status == osEventMessage) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b10      	cmp	r3, #16
 8001308:	d129      	bne.n	800135e <TimeWatch_Modify_Sec+0x6e>
		evtState = evt.value.v;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	82fb      	strh	r3, [r7, #22]

		if(evtState == EVENT_TIME_SET) {
 800130e:	8afb      	ldrh	r3, [r7, #22]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d11e      	bne.n	8001352 <TimeWatch_Modify_Sec+0x62>
			timeWatchData.sec++;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <TimeWatch_Modify_Sec+0x7c>)
 8001316:	789b      	ldrb	r3, [r3, #2]
 8001318:	3301      	adds	r3, #1
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b13      	ldr	r3, [pc, #76]	@ (800136c <TimeWatch_Modify_Sec+0x7c>)
 800131e:	709a      	strb	r2, [r3, #2]
			timeWatchData.msec++;
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <TimeWatch_Modify_Sec+0x7c>)
 8001322:	889b      	ldrh	r3, [r3, #4]
 8001324:	3301      	adds	r3, #1
 8001326:	b29a      	uxth	r2, r3
 8001328:	4b10      	ldr	r3, [pc, #64]	@ (800136c <TimeWatch_Modify_Sec+0x7c>)
 800132a:	809a      	strh	r2, [r3, #4]
			timeWatch_t *ptimeWatchData = osMailAlloc(timeWatchDataMailBox, 0);
 800132c:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <TimeWatch_Modify_Sec+0x80>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f003 faca 	bl	80048cc <osMailAlloc>
 8001338:	6138      	str	r0, [r7, #16]
			memcpy(ptimeWatchData, &timeWatchData, sizeof(timeWatch_t));
 800133a:	2206      	movs	r2, #6
 800133c:	490b      	ldr	r1, [pc, #44]	@ (800136c <TimeWatch_Modify_Sec+0x7c>)
 800133e:	6938      	ldr	r0, [r7, #16]
 8001340:	f005 fdc6 	bl	8006ed0 <memcpy>
			osMailPut(timeWatchDataMailBox, ptimeWatchData);
 8001344:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <TimeWatch_Modify_Sec+0x80>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6939      	ldr	r1, [r7, #16]
 800134a:	4618      	mov	r0, r3
 800134c:	f003 fad4 	bl	80048f8 <osMailPut>
		}
		else if (evtState == EVENT_TIME_MODIFY) {
			Model_SetTimeWatchState(S_TIMEWATCH_MIN);
		}
	}
}
 8001350:	e005      	b.n	800135e <TimeWatch_Modify_Sec+0x6e>
		else if (evtState == EVENT_TIME_MODIFY) {
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <TimeWatch_Modify_Sec+0x6e>
			Model_SetTimeWatchState(S_TIMEWATCH_MIN);
 8001358:	2002      	movs	r0, #2
 800135a:	f000 fa1f 	bl	800179c <Model_SetTimeWatchState>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200004f4 	.word	0x200004f4
 800136c:	20000494 	.word	0x20000494
 8001370:	200004f8 	.word	0x200004f8

08001374 <TimeWatch_Modify_Min>:

void TimeWatch_Modify_Min()
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(timeWatchEventMsgBox, 0);
 800137a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <TimeWatch_Modify_Min+0x78>)
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2200      	movs	r2, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f003 f9d6 	bl	8004734 <osMessageGet>
	uint16_t evtState;

	if(evt.status == osEventMessage) {
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b10      	cmp	r3, #16
 800138c:	d12a      	bne.n	80013e4 <TimeWatch_Modify_Min+0x70>
		evtState = evt.value.v;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	82fb      	strh	r3, [r7, #22]

		if(evtState == EVENT_TIME_SET) {
 8001392:	8afb      	ldrh	r3, [r7, #22]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d11f      	bne.n	80013d8 <TimeWatch_Modify_Min+0x64>
			timeWatchData.min++;
 8001398:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <TimeWatch_Modify_Min+0x7c>)
 800139a:	785b      	ldrb	r3, [r3, #1]
 800139c:	3301      	adds	r3, #1
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <TimeWatch_Modify_Min+0x7c>)
 80013a2:	705a      	strb	r2, [r3, #1]
			if(timeWatchData.min == 60) {
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <TimeWatch_Modify_Min+0x7c>)
 80013a6:	785b      	ldrb	r3, [r3, #1]
 80013a8:	2b3c      	cmp	r3, #60	@ 0x3c
 80013aa:	d102      	bne.n	80013b2 <TimeWatch_Modify_Min+0x3e>
				timeWatchData.min = 0;
 80013ac:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <TimeWatch_Modify_Min+0x7c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	705a      	strb	r2, [r3, #1]
			}
			timeWatch_t *ptimeWatchData = osMailAlloc(timeWatchDataMailBox, 0);
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <TimeWatch_Modify_Min+0x80>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fa87 	bl	80048cc <osMailAlloc>
 80013be:	6138      	str	r0, [r7, #16]
			memcpy(ptimeWatchData, &timeWatchData, sizeof(timeWatch_t));
 80013c0:	2206      	movs	r2, #6
 80013c2:	490b      	ldr	r1, [pc, #44]	@ (80013f0 <TimeWatch_Modify_Min+0x7c>)
 80013c4:	6938      	ldr	r0, [r7, #16]
 80013c6:	f005 fd83 	bl	8006ed0 <memcpy>
			osMailPut(timeWatchDataMailBox, ptimeWatchData);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <TimeWatch_Modify_Min+0x80>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6939      	ldr	r1, [r7, #16]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 fa91 	bl	80048f8 <osMailPut>
		}
		else if (evtState == EVENT_TIME_MODIFY) {
			Model_SetTimeWatchState(S_TIMEWATCH_HOUR);
		}
	}
}
 80013d6:	e005      	b.n	80013e4 <TimeWatch_Modify_Min+0x70>
		else if (evtState == EVENT_TIME_MODIFY) {
 80013d8:	8afb      	ldrh	r3, [r7, #22]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <TimeWatch_Modify_Min+0x70>
			Model_SetTimeWatchState(S_TIMEWATCH_HOUR);
 80013de:	2003      	movs	r0, #3
 80013e0:	f000 f9dc 	bl	800179c <Model_SetTimeWatchState>
}
 80013e4:	bf00      	nop
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200004f4 	.word	0x200004f4
 80013f0:	20000494 	.word	0x20000494
 80013f4:	200004f8 	.word	0x200004f8

080013f8 <TimeWatch_Modify_Hour>:

void TimeWatch_Modify_Hour()
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(timeWatchEventMsgBox, 0);
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <TimeWatch_Modify_Hour+0x6c>)
 8001400:	6819      	ldr	r1, [r3, #0]
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f003 f994 	bl	8004734 <osMessageGet>
	uint16_t evtState;

	if(evt.status == osEventMessage) {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b10      	cmp	r3, #16
 8001410:	d123      	bne.n	800145a <TimeWatch_Modify_Hour+0x62>
		evtState = evt.value.v;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	82fb      	strh	r3, [r7, #22]

		if(evtState == EVENT_TIME_SET) {
 8001416:	8afb      	ldrh	r3, [r7, #22]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d118      	bne.n	800144e <TimeWatch_Modify_Hour+0x56>
			timeWatchData.hour++;
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <TimeWatch_Modify_Hour+0x70>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <TimeWatch_Modify_Hour+0x70>)
 8001426:	701a      	strb	r2, [r3, #0]
			timeWatch_t *ptimeWatchData = osMailAlloc(timeWatchDataMailBox, 0);
 8001428:	4b10      	ldr	r3, [pc, #64]	@ (800146c <TimeWatch_Modify_Hour+0x74>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f003 fa4c 	bl	80048cc <osMailAlloc>
 8001434:	6138      	str	r0, [r7, #16]
			memcpy(ptimeWatchData, &timeWatchData, sizeof(timeWatch_t));
 8001436:	2206      	movs	r2, #6
 8001438:	490b      	ldr	r1, [pc, #44]	@ (8001468 <TimeWatch_Modify_Hour+0x70>)
 800143a:	6938      	ldr	r0, [r7, #16]
 800143c:	f005 fd48 	bl	8006ed0 <memcpy>
			osMailPut(timeWatchDataMailBox, ptimeWatchData);
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <TimeWatch_Modify_Hour+0x74>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6939      	ldr	r1, [r7, #16]
 8001446:	4618      	mov	r0, r3
 8001448:	f003 fa56 	bl	80048f8 <osMailPut>
		}
		else if (evtState == EVENT_TIME_MODIFY) {
			Model_SetTimeWatchState(S_TIMEWATCH_NORMAL);
		}
	}
}
 800144c:	e005      	b.n	800145a <TimeWatch_Modify_Hour+0x62>
		else if (evtState == EVENT_TIME_MODIFY) {
 800144e:	8afb      	ldrh	r3, [r7, #22]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <TimeWatch_Modify_Hour+0x62>
			Model_SetTimeWatchState(S_TIMEWATCH_NORMAL);
 8001454:	2000      	movs	r0, #0
 8001456:	f000 f9a1 	bl	800179c <Model_SetTimeWatchState>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200004f4 	.word	0x200004f4
 8001468:	20000494 	.word	0x20000494
 800146c:	200004f8 	.word	0x200004f8

08001470 <timeWatch_IncTimeCallBack>:

void timeWatch_IncTimeCallBack()
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

	if (timeWatchData.msec != 1000-1){
 8001474:	4b1e      	ldr	r3, [pc, #120]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 8001476:	889b      	ldrh	r3, [r3, #4]
 8001478:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800147c:	4293      	cmp	r3, r2
 800147e:	d006      	beq.n	800148e <timeWatch_IncTimeCallBack+0x1e>
		timeWatchData.msec++;
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 8001482:	889b      	ldrh	r3, [r3, #4]
 8001484:	3301      	adds	r3, #1
 8001486:	b29a      	uxth	r2, r3
 8001488:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 800148a:	809a      	strh	r2, [r3, #4]
		return;
 800148c:	e02c      	b.n	80014e8 <timeWatch_IncTimeCallBack+0x78>
	}
	timeWatchData.msec = 0;
 800148e:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 8001490:	2200      	movs	r2, #0
 8001492:	809a      	strh	r2, [r3, #4]

	if (timeWatchData.sec != 60-1){
 8001494:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 8001496:	789b      	ldrb	r3, [r3, #2]
 8001498:	2b3b      	cmp	r3, #59	@ 0x3b
 800149a:	d006      	beq.n	80014aa <timeWatch_IncTimeCallBack+0x3a>
		timeWatchData.sec++;
 800149c:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 800149e:	789b      	ldrb	r3, [r3, #2]
 80014a0:	3301      	adds	r3, #1
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 80014a6:	709a      	strb	r2, [r3, #2]
		return;
 80014a8:	e01e      	b.n	80014e8 <timeWatch_IncTimeCallBack+0x78>
	}
	timeWatchData.sec = 0;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	709a      	strb	r2, [r3, #2]

	if (timeWatchData.min != 60-1){
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 80014b2:	785b      	ldrb	r3, [r3, #1]
 80014b4:	2b3b      	cmp	r3, #59	@ 0x3b
 80014b6:	d006      	beq.n	80014c6 <timeWatch_IncTimeCallBack+0x56>
		timeWatchData.min++;
 80014b8:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 80014ba:	785b      	ldrb	r3, [r3, #1]
 80014bc:	3301      	adds	r3, #1
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 80014c2:	705a      	strb	r2, [r3, #1]
		return;
 80014c4:	e010      	b.n	80014e8 <timeWatch_IncTimeCallBack+0x78>
	}
	timeWatchData.min = 0;
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	705a      	strb	r2, [r3, #1]

	if (timeWatchData.hour != 24-1){
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b17      	cmp	r3, #23
 80014d2:	d006      	beq.n	80014e2 <timeWatch_IncTimeCallBack+0x72>
		timeWatchData.hour++;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 80014de:	701a      	strb	r2, [r3, #0]
		return;
 80014e0:	e002      	b.n	80014e8 <timeWatch_IncTimeCallBack+0x78>
	}
	timeWatchData.hour = 0;
 80014e2:	4b03      	ldr	r3, [pc, #12]	@ (80014f0 <timeWatch_IncTimeCallBack+0x80>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]


}
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	20000494 	.word	0x20000494

080014f4 <Listener_Init>:
Button_Handler_t hbtnMode;

void Listener_CheckButton();

void Listener_Init()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	Listener_StopWatchInit();
 80014f8:	f000 f846 	bl	8001588 <Listener_StopWatchInit>
	Listener_TimeWatchInit();
 80014fc:	f000 f884 	bl	8001608 <Listener_TimeWatchInit>
	Button_Init(&hbtnMode, GPIOA, GPIO_PIN_10);
 8001500:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001504:	4903      	ldr	r1, [pc, #12]	@ (8001514 <Listener_Init+0x20>)
 8001506:	4804      	ldr	r0, [pc, #16]	@ (8001518 <Listener_Init+0x24>)
 8001508:	f000 fb0b 	bl	8001b22 <Button_Init>
	Listener_DistanceInit();
 800150c:	f000 f8c3 	bl	8001696 <Listener_DistanceInit>


}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40020000 	.word	0x40020000
 8001518:	2000049c 	.word	0x2000049c

0800151c <Listener_Excute>:


void Listener_Excute()
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
	eModestate_t state = Model_GetModeState();
 8001522:	f000 f8df 	bl	80016e4 <Model_GetModeState>
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
	Listener_CheckButton();
 800152a:	f000 f817 	bl	800155c <Listener_CheckButton>
	switch(state)
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d00c      	beq.n	800154e <Listener_Excute+0x32>
 8001534:	2b02      	cmp	r3, #2
 8001536:	dc0d      	bgt.n	8001554 <Listener_Excute+0x38>
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <Listener_Excute+0x26>
 800153c:	2b01      	cmp	r3, #1
 800153e:	d003      	beq.n	8001548 <Listener_Excute+0x2c>
       	break;
	case S_DISTANCE_MODE:
		Listener_DistanceExcute();
	}

}
 8001540:	e008      	b.n	8001554 <Listener_Excute+0x38>
		Listener_TimeWatchExcute();
 8001542:	f000 f875 	bl	8001630 <Listener_TimeWatchExcute>
		break;
 8001546:	e005      	b.n	8001554 <Listener_Excute+0x38>
       	Listener_StopWatchExcute();
 8001548:	f000 f832 	bl	80015b0 <Listener_StopWatchExcute>
       	break;
 800154c:	e002      	b.n	8001554 <Listener_Excute+0x38>
		Listener_DistanceExcute();
 800154e:	f000 f89b 	bl	8001688 <Listener_DistanceExcute>
}
 8001552:	e7ff      	b.n	8001554 <Listener_Excute+0x38>
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <Listener_CheckButton>:



void Listener_CheckButton()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
 if (Button_GetState(&hbtnMode) == ACT_RELEASED) {
 8001560:	4807      	ldr	r0, [pc, #28]	@ (8001580 <Listener_CheckButton+0x24>)
 8001562:	f000 faf4 	bl	8001b4e <Button_GetState>
 8001566:	4603      	mov	r3, r0
 8001568:	2b02      	cmp	r3, #2
 800156a:	d106      	bne.n	800157a <Listener_CheckButton+0x1e>
	 osMessagePut(modeEventMsgBox, EVENT_MODE, 0);
 800156c:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <Listener_CheckButton+0x28>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f003 f89d 	bl	80046b4 <osMessagePut>
 }


}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000049c 	.word	0x2000049c
 8001584:	200004dc 	.word	0x200004dc

08001588 <Listener_StopWatchInit>:

void Listener_StopWatch_CheckButton();


void Listener_StopWatchInit()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	  Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_5);
 800158c:	2220      	movs	r2, #32
 800158e:	4905      	ldr	r1, [pc, #20]	@ (80015a4 <Listener_StopWatchInit+0x1c>)
 8001590:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <Listener_StopWatchInit+0x20>)
 8001592:	f000 fac6 	bl	8001b22 <Button_Init>
	  Button_Init(&hBtnClear, GPIOB, GPIO_PIN_3);
 8001596:	2208      	movs	r2, #8
 8001598:	4902      	ldr	r1, [pc, #8]	@ (80015a4 <Listener_StopWatchInit+0x1c>)
 800159a:	4804      	ldr	r0, [pc, #16]	@ (80015ac <Listener_StopWatchInit+0x24>)
 800159c:	f000 fac1 	bl	8001b22 <Button_Init>


}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40020400 	.word	0x40020400
 80015a8:	200004a8 	.word	0x200004a8
 80015ac:	200004b4 	.word	0x200004b4

080015b0 <Listener_StopWatchExcute>:



void Listener_StopWatchExcute()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0

	Listener_StopWatch_CheckButton();
 80015b4:	f000 f802 	bl	80015bc <Listener_StopWatch_CheckButton>


}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <Listener_StopWatch_CheckButton>:

void Listener_StopWatch_CheckButton()
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
 if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) {
 80015c0:	480e      	ldr	r0, [pc, #56]	@ (80015fc <Listener_StopWatch_CheckButton+0x40>)
 80015c2:	f000 fac4 	bl	8001b4e <Button_GetState>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d107      	bne.n	80015dc <Listener_StopWatch_CheckButton+0x20>
	 osMessagePut(stopWatchEventMsgBox, EVENT_RUN_STOP, 0);
 80015cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <Listener_StopWatch_CheckButton+0x44>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 f86d 	bl	80046b4 <osMessagePut>
	 osMessagePut(stopWatchEventMsgBox, EVENT_CLEAR, 0);
 }



}
 80015da:	e00c      	b.n	80015f6 <Listener_StopWatch_CheckButton+0x3a>
 else if (Button_GetState(&hBtnClear) == ACT_PUSHED) {
 80015dc:	4809      	ldr	r0, [pc, #36]	@ (8001604 <Listener_StopWatch_CheckButton+0x48>)
 80015de:	f000 fab6 	bl	8001b4e <Button_GetState>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d106      	bne.n	80015f6 <Listener_StopWatch_CheckButton+0x3a>
	 osMessagePut(stopWatchEventMsgBox, EVENT_CLEAR, 0);
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <Listener_StopWatch_CheckButton+0x44>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2200      	movs	r2, #0
 80015ee:	2101      	movs	r1, #1
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 f85f 	bl	80046b4 <osMessagePut>
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200004a8 	.word	0x200004a8
 8001600:	200004e4 	.word	0x200004e4
 8001604:	200004b4 	.word	0x200004b4

08001608 <Listener_TimeWatchInit>:

void Listener_TimeWatch_CheckButton();


void Listener_TimeWatchInit()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	  Button_Init(&hBtnTimeModify, GPIOB, GPIO_PIN_5);
 800160c:	2220      	movs	r2, #32
 800160e:	4905      	ldr	r1, [pc, #20]	@ (8001624 <Listener_TimeWatchInit+0x1c>)
 8001610:	4805      	ldr	r0, [pc, #20]	@ (8001628 <Listener_TimeWatchInit+0x20>)
 8001612:	f000 fa86 	bl	8001b22 <Button_Init>
	  Button_Init(&hBtnTimeSet, GPIOB, GPIO_PIN_3);
 8001616:	2208      	movs	r2, #8
 8001618:	4902      	ldr	r1, [pc, #8]	@ (8001624 <Listener_TimeWatchInit+0x1c>)
 800161a:	4804      	ldr	r0, [pc, #16]	@ (800162c <Listener_TimeWatchInit+0x24>)
 800161c:	f000 fa81 	bl	8001b22 <Button_Init>


}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40020400 	.word	0x40020400
 8001628:	200004c0 	.word	0x200004c0
 800162c:	200004cc 	.word	0x200004cc

08001630 <Listener_TimeWatchExcute>:



void Listener_TimeWatchExcute()
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

	Listener_TimeWatch_CheckButton();
 8001634:	f000 f802 	bl	800163c <Listener_TimeWatch_CheckButton>


}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <Listener_TimeWatch_CheckButton>:

void Listener_TimeWatch_CheckButton()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
 if (Button_GetState(&hBtnTimeModify) == ACT_RELEASED) {
 8001640:	480e      	ldr	r0, [pc, #56]	@ (800167c <Listener_TimeWatch_CheckButton+0x40>)
 8001642:	f000 fa84 	bl	8001b4e <Button_GetState>
 8001646:	4603      	mov	r3, r0
 8001648:	2b02      	cmp	r3, #2
 800164a:	d107      	bne.n	800165c <Listener_TimeWatch_CheckButton+0x20>
	 osMessagePut(timeWatchEventMsgBox, EVENT_TIME_MODIFY, 0);
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <Listener_TimeWatch_CheckButton+0x44>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f003 f82d 	bl	80046b4 <osMessagePut>
	 osMessagePut(timeWatchEventMsgBox, EVENT_TIME_SET, 0);
 }



}
 800165a:	e00c      	b.n	8001676 <Listener_TimeWatch_CheckButton+0x3a>
 else if (Button_GetState(&hBtnTimeSet) == ACT_RELEASED) {
 800165c:	4809      	ldr	r0, [pc, #36]	@ (8001684 <Listener_TimeWatch_CheckButton+0x48>)
 800165e:	f000 fa76 	bl	8001b4e <Button_GetState>
 8001662:	4603      	mov	r3, r0
 8001664:	2b02      	cmp	r3, #2
 8001666:	d106      	bne.n	8001676 <Listener_TimeWatch_CheckButton+0x3a>
	 osMessagePut(timeWatchEventMsgBox, EVENT_TIME_SET, 0);
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <Listener_TimeWatch_CheckButton+0x44>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2200      	movs	r2, #0
 800166e:	2101      	movs	r1, #1
 8001670:	4618      	mov	r0, r3
 8001672:	f003 f81f 	bl	80046b4 <osMessagePut>
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200004c0 	.word	0x200004c0
 8001680:	200004f4 	.word	0x200004f4
 8001684:	200004cc 	.word	0x200004cc

08001688 <Listener_DistanceExcute>:

#include "Listener_distnace.h"


void Listener_DistanceExcute()
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <Listener_DistanceInit>:
void Listener_DistanceInit()
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <Model_modeInit>:
osMessageQId modeEventMsgBox;
osMessageQDef(modeEventQueue, 4, uint16_t);


void Model_modeInit()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	modeEventMsgBox = osMessageCreate(osMessageQ(modeEventQueue), NULL);
 80016a8:	2100      	movs	r1, #0
 80016aa:	4804      	ldr	r0, [pc, #16]	@ (80016bc <Model_modeInit+0x18>)
 80016ac:	f002 ffd9 	bl	8004662 <osMessageCreate>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a03      	ldr	r2, [pc, #12]	@ (80016c0 <Model_modeInit+0x1c>)
 80016b4:	6013      	str	r3, [r2, #0]
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	080078bc 	.word	0x080078bc
 80016c0:	200004dc 	.word	0x200004dc

080016c4 <Model_SetModeState>:




void Model_SetModeState(eModestate_t state)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
	modeState = state;
 80016ce:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <Model_SetModeState+0x1c>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	7013      	strb	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	200004d8 	.word	0x200004d8

080016e4 <Model_GetModeState>:

eModestate_t Model_GetModeState()
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
	return modeState;
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <Model_GetModeState+0x14>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	200004d8 	.word	0x200004d8

080016fc <Model_StopWatchInit>:
osMailQDef (stopWatchDataQueue, 4, stopWatch_t);



void Model_StopWatchInit()
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	stopWatchEventMsgBox = osMessageCreate(osMessageQ(stopWatchEventQueue), NULL);
 8001700:	2100      	movs	r1, #0
 8001702:	4807      	ldr	r0, [pc, #28]	@ (8001720 <Model_StopWatchInit+0x24>)
 8001704:	f002 ffad 	bl	8004662 <osMessageCreate>
 8001708:	4603      	mov	r3, r0
 800170a:	4a06      	ldr	r2, [pc, #24]	@ (8001724 <Model_StopWatchInit+0x28>)
 800170c:	6013      	str	r3, [r2, #0]
	stopWatchDataMailBox = osMailCreate(osMailQ(stopWatchDataQueue), NULL);
 800170e:	2100      	movs	r1, #0
 8001710:	4805      	ldr	r0, [pc, #20]	@ (8001728 <Model_StopWatchInit+0x2c>)
 8001712:	f003 f883 	bl	800481c <osMailCreate>
 8001716:	4603      	mov	r3, r0
 8001718:	4a04      	ldr	r2, [pc, #16]	@ (800172c <Model_StopWatchInit+0x30>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	080078cc 	.word	0x080078cc
 8001724:	200004e4 	.word	0x200004e4
 8001728:	080078dc 	.word	0x080078dc
 800172c:	200004e8 	.word	0x200004e8

08001730 <Model_SetStopWatchState>:

void Model_SetStopWatchState(stopWatchState_e state)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
	stopWatchState = state;
 800173a:	4a04      	ldr	r2, [pc, #16]	@ (800174c <Model_SetStopWatchState+0x1c>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	7013      	strb	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	200004e0 	.word	0x200004e0

08001750 <Model_GetStopWatchState>:

stopWatchState_e Model_GetStopWatchState()
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
	return stopWatchState;
 8001754:	4b03      	ldr	r3, [pc, #12]	@ (8001764 <Model_GetStopWatchState+0x14>)
 8001756:	781b      	ldrb	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	200004e0 	.word	0x200004e0

08001768 <Model_timeWatchInit>:
osMailQDef (timeWatchDataQueue, 4, timeWatch_t);



void Model_timeWatchInit()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	timeWatchEventMsgBox = osMessageCreate(osMessageQ(timeWatchEventQueue), NULL);
 800176c:	2100      	movs	r1, #0
 800176e:	4807      	ldr	r0, [pc, #28]	@ (800178c <Model_timeWatchInit+0x24>)
 8001770:	f002 ff77 	bl	8004662 <osMessageCreate>
 8001774:	4603      	mov	r3, r0
 8001776:	4a06      	ldr	r2, [pc, #24]	@ (8001790 <Model_timeWatchInit+0x28>)
 8001778:	6013      	str	r3, [r2, #0]
	timeWatchDataMailBox = osMailCreate(osMailQ(timeWatchDataQueue), NULL);
 800177a:	2100      	movs	r1, #0
 800177c:	4805      	ldr	r0, [pc, #20]	@ (8001794 <Model_timeWatchInit+0x2c>)
 800177e:	f003 f84d 	bl	800481c <osMailCreate>
 8001782:	4603      	mov	r3, r0
 8001784:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <Model_timeWatchInit+0x30>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	080078e8 	.word	0x080078e8
 8001790:	200004f4 	.word	0x200004f4
 8001794:	080078f8 	.word	0x080078f8
 8001798:	200004f8 	.word	0x200004f8

0800179c <Model_SetTimeWatchState>:



void Model_SetTimeWatchState(timeWatchState_t state)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
	timeWatchState = state;
 80017a6:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <Model_SetTimeWatchState+0x1c>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	7013      	strb	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	200004f0 	.word	0x200004f0

080017bc <Model_GetTimeWatchState>:

timeWatchState_t Model_GetTimeWatchState()
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	return timeWatchState;
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <Model_GetTimeWatchState+0x14>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	200004f0 	.word	0x200004f0

080017d4 <Presenter_Init>:

#include "Presenter.h"


void Presenter_Init()
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	Presenter_StopWatch_Init();
 80017d8:	f000 f834 	bl	8001844 <Presenter_StopWatch_Init>
	Presenter_TimeWatch_Init();
 80017dc:	f000 f91a 	bl	8001a14 <Presenter_TimeWatch_Init>
	Presenter_Distance_Init();
 80017e0:	f000 f822 	bl	8001828 <Presenter_Distance_Init>
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <Presenter_Excute>:


void Presenter_Excute()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	static eModestate_t state = S_TIME_WATCH_MODE;


    state = Model_GetModeState();
 80017ec:	f7ff ff7a 	bl	80016e4 <Model_GetModeState>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <Presenter_Excute+0x3c>)
 80017f6:	701a      	strb	r2, [r3, #0]
	switch(state)
 80017f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <Presenter_Excute+0x3c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d00c      	beq.n	800181a <Presenter_Excute+0x32>
 8001800:	2b02      	cmp	r3, #2
 8001802:	dc0d      	bgt.n	8001820 <Presenter_Excute+0x38>
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <Presenter_Excute+0x26>
 8001808:	2b01      	cmp	r3, #1
 800180a:	d003      	beq.n	8001814 <Presenter_Excute+0x2c>
		break;
	}



}
 800180c:	e008      	b.n	8001820 <Presenter_Excute+0x38>
		Presenter_TimeWatch_Excute();
 800180e:	f000 f909 	bl	8001a24 <Presenter_TimeWatch_Excute>
		break;
 8001812:	e005      	b.n	8001820 <Presenter_Excute+0x38>
		Presenter_StopWatch_Excute();
 8001814:	f000 f820 	bl	8001858 <Presenter_StopWatch_Excute>
		break;
 8001818:	e002      	b.n	8001820 <Presenter_Excute+0x38>
		Presenter_Distance_Excute();
 800181a:	f000 f80c 	bl	8001836 <Presenter_Distance_Excute>
		break;
 800181e:	bf00      	nop
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000500 	.word	0x20000500

08001828 <Presenter_Distance_Init>:

#include "Presenter_Distance.h"


void Presenter_Distance_Init()
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <Presenter_Distance_Excute>:


void Presenter_Distance_Excute()
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <Presenter_StopWatch_Init>:

void Presenter_StopWatch_FND(stopWatch_t StopWatchData);
void Presenter_StopWatch_LCD(stopWatch_t pstopWatchData);

void Presenter_StopWatch_Init()
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <Presenter_StopWatch_Init+0x10>)
 800184a:	f000 fb7b 	bl	8001f44 <LCD_Init>
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000039c 	.word	0x2000039c

08001858 <Presenter_StopWatch_Excute>:

void Presenter_StopWatch_Excute()
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0

	stopWatch_t *pstopWatchData;
	static stopWatch_t stopWatchData;
	osEvent evt = osMailGet(stopWatchDataMailBox, 0);
 800185e:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <Presenter_StopWatch_Excute+0x50>)
 8001860:	6819      	ldr	r1, [r3, #0]
 8001862:	463b      	mov	r3, r7
 8001864:	2200      	movs	r2, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f003 f884 	bl	8004974 <osMailGet>

	if(evt.status == osEventMail){
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	2b20      	cmp	r3, #32
 8001870:	d116      	bne.n	80018a0 <Presenter_StopWatch_Excute+0x48>
		pstopWatchData = evt.value.p;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60fb      	str	r3, [r7, #12]
		memcpy(&stopWatchData,pstopWatchData,sizeof(stopWatch_t));
 8001876:	2206      	movs	r2, #6
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	480c      	ldr	r0, [pc, #48]	@ (80018ac <Presenter_StopWatch_Excute+0x54>)
 800187c:	f005 fb28 	bl	8006ed0 <memcpy>
		osMailFree(stopWatchDataMailBox, pstopWatchData);
 8001880:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <Presenter_StopWatch_Excute+0x50>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68f9      	ldr	r1, [r7, #12]
 8001886:	4618      	mov	r0, r3
 8001888:	f003 f8e8 	bl	8004a5c <osMailFree>
	Presenter_StopWatch_FND(stopWatchData);
 800188c:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <Presenter_StopWatch_Excute+0x54>)
 800188e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001892:	f000 f867 	bl	8001964 <Presenter_StopWatch_FND>
		  Presenter_StopWatch_LCD(stopWatchData);
 8001896:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <Presenter_StopWatch_Excute+0x54>)
 8001898:	e893 0003 	ldmia.w	r3, {r0, r1}
 800189c:	f000 f808 	bl	80018b0 <Presenter_StopWatch_LCD>
	}
}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	200004e8 	.word	0x200004e8
 80018ac:	20000504 	.word	0x20000504

080018b0 <Presenter_StopWatch_LCD>:

void Presenter_StopWatch_LCD(stopWatch_t pstopWatchData)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b09f      	sub	sp, #124	@ 0x7c
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	463b      	mov	r3, r7
 80018b8:	e883 0003 	stmia.w	r3, {r0, r1}
	char str[50];
	char str2[50];
	uint16_t state;
	sprintf(str,"SW:%02d:%02d:%02d:%03d", pstopWatchData.hour, pstopWatchData.min, pstopWatchData.sec, pstopWatchData.msec);
 80018bc:	783b      	ldrb	r3, [r7, #0]
 80018be:	4619      	mov	r1, r3
 80018c0:	787b      	ldrb	r3, [r7, #1]
 80018c2:	461c      	mov	r4, r3
 80018c4:	78bb      	ldrb	r3, [r7, #2]
 80018c6:	88ba      	ldrh	r2, [r7, #4]
 80018c8:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80018cc:	9201      	str	r2, [sp, #4]
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	4623      	mov	r3, r4
 80018d2:	460a      	mov	r2, r1
 80018d4:	491f      	ldr	r1, [pc, #124]	@ (8001954 <Presenter_StopWatch_LCD+0xa4>)
 80018d6:	f005 fa37 	bl	8006d48 <siprintf>
	state = Model_GetStopWatchState();
 80018da:	f7ff ff39 	bl	8001750 <Model_GetStopWatchState>
 80018de:	4603      	mov	r3, r0
 80018e0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	if(state == S_STOPWATCH_RUN)
 80018e4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d108      	bne.n	80018fe <Presenter_StopWatch_LCD+0x4e>
	{
		strcpy(str2, "RUN  ");
 80018ec:	f107 0308 	add.w	r3, r7, #8
 80018f0:	4a19      	ldr	r2, [pc, #100]	@ (8001958 <Presenter_StopWatch_LCD+0xa8>)
 80018f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018f6:	6018      	str	r0, [r3, #0]
 80018f8:	3304      	adds	r3, #4
 80018fa:	8019      	strh	r1, [r3, #0]
 80018fc:	e018      	b.n	8001930 <Presenter_StopWatch_LCD+0x80>
	}
	else if(state == S_STOPWATCH_STOP)
 80018fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001902:	2b00      	cmp	r3, #0
 8001904:	d108      	bne.n	8001918 <Presenter_StopWatch_LCD+0x68>
	{
		strcpy(str2, "STOP ");
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	4a14      	ldr	r2, [pc, #80]	@ (800195c <Presenter_StopWatch_LCD+0xac>)
 800190c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001910:	6018      	str	r0, [r3, #0]
 8001912:	3304      	adds	r3, #4
 8001914:	8019      	strh	r1, [r3, #0]
 8001916:	e00b      	b.n	8001930 <Presenter_StopWatch_LCD+0x80>
	}
	else if(state == S_STOPWATCH_CLEAR)
 8001918:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800191c:	2b02      	cmp	r3, #2
 800191e:	d107      	bne.n	8001930 <Presenter_StopWatch_LCD+0x80>
	{
		strcpy(str2, "CLEAR");
 8001920:	f107 0308 	add.w	r3, r7, #8
 8001924:	4a0e      	ldr	r2, [pc, #56]	@ (8001960 <Presenter_StopWatch_LCD+0xb0>)
 8001926:	e892 0003 	ldmia.w	r2, {r0, r1}
 800192a:	6018      	str	r0, [r3, #0]
 800192c:	3304      	adds	r3, #4
 800192e:	8019      	strh	r1, [r3, #0]
	}
	LCD_writeStringXY(0, 0, str);
 8001930:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001934:	461a      	mov	r2, r3
 8001936:	2100      	movs	r1, #0
 8001938:	2000      	movs	r0, #0
 800193a:	f000 fc52 	bl	80021e2 <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, str2);
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	461a      	mov	r2, r3
 8001944:	2100      	movs	r1, #0
 8001946:	2001      	movs	r0, #1
 8001948:	f000 fc4b 	bl	80021e2 <LCD_writeStringXY>
}
 800194c:	bf00      	nop
 800194e:	3774      	adds	r7, #116	@ 0x74
 8001950:	46bd      	mov	sp, r7
 8001952:	bd90      	pop	{r4, r7, pc}
 8001954:	08007828 	.word	0x08007828
 8001958:	08007840 	.word	0x08007840
 800195c:	08007848 	.word	0x08007848
 8001960:	08007850 	.word	0x08007850

08001964 <Presenter_StopWatch_FND>:

void Presenter_StopWatch_FND(stopWatch_t StopWatchData)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	463b      	mov	r3, r7
 800196c:	e883 0003 	stmia.w	r3, {r0, r1}
	FND_WriteData(StopWatchData.min%10*1000 + StopWatchData.sec%100*10 + StopWatchData.msec/100);
 8001970:	787a      	ldrb	r2, [r7, #1]
 8001972:	4b26      	ldr	r3, [pc, #152]	@ (8001a0c <Presenter_StopWatch_FND+0xa8>)
 8001974:	fba3 1302 	umull	r1, r3, r3, r2
 8001978:	08d9      	lsrs	r1, r3, #3
 800197a:	460b      	mov	r3, r1
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	461a      	mov	r2, r3
 8001988:	0152      	lsls	r2, r2, #5
 800198a:	1ad2      	subs	r2, r2, r3
 800198c:	0092      	lsls	r2, r2, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	b29a      	uxth	r2, r3
 8001994:	78bb      	ldrb	r3, [r7, #2]
 8001996:	491e      	ldr	r1, [pc, #120]	@ (8001a10 <Presenter_StopWatch_FND+0xac>)
 8001998:	fba1 0103 	umull	r0, r1, r1, r3
 800199c:	0949      	lsrs	r1, r1, #5
 800199e:	2064      	movs	r0, #100	@ 0x64
 80019a0:	fb00 f101 	mul.w	r1, r0, r1
 80019a4:	1a5b      	subs	r3, r3, r1
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	4619      	mov	r1, r3
 80019aa:	0089      	lsls	r1, r1, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	88bb      	ldrh	r3, [r7, #4]
 80019b8:	4915      	ldr	r1, [pc, #84]	@ (8001a10 <Presenter_StopWatch_FND+0xac>)
 80019ba:	fba1 1303 	umull	r1, r3, r1, r3
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f91a 	bl	8001c00 <FND_WriteData>
	FND_WriteDp(0b1111,FND_DP_OFF);
 80019cc:	2100      	movs	r1, #0
 80019ce:	200f      	movs	r0, #15
 80019d0:	f000 f8ee 	bl	8001bb0 <FND_WriteDp>
	if (StopWatchData.msec%100 < 50)
 80019d4:	88bb      	ldrh	r3, [r7, #4]
 80019d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a10 <Presenter_StopWatch_FND+0xac>)
 80019d8:	fba2 1203 	umull	r1, r2, r2, r3
 80019dc:	0952      	lsrs	r2, r2, #5
 80019de:	2164      	movs	r1, #100	@ 0x64
 80019e0:	fb01 f202 	mul.w	r2, r1, r2
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	2b31      	cmp	r3, #49	@ 0x31
 80019ea:	d803      	bhi.n	80019f4 <Presenter_StopWatch_FND+0x90>
	{
		FND_WriteDp(FND_DP_10,FND_DP_ON);
 80019ec:	2101      	movs	r1, #1
 80019ee:	2002      	movs	r0, #2
 80019f0:	f000 f8de 	bl	8001bb0 <FND_WriteDp>
	}

	if (StopWatchData.msec < 500)
 80019f4:	88bb      	ldrh	r3, [r7, #4]
 80019f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019fa:	d203      	bcs.n	8001a04 <Presenter_StopWatch_FND+0xa0>
	{
		FND_WriteDp(FND_DP_1000,FND_DP_ON);
 80019fc:	2101      	movs	r1, #1
 80019fe:	2008      	movs	r0, #8
 8001a00:	f000 f8d6 	bl	8001bb0 <FND_WriteDp>
	}

}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	cccccccd 	.word	0xcccccccd
 8001a10:	51eb851f 	.word	0x51eb851f

08001a14 <Presenter_TimeWatch_Init>:
void Presenter_TimeWatch_LCD(timeWatch_t pstopWatchData);
void Presenter_TimeWatch_FND(timeWatch_t timeWatchData);


void Presenter_TimeWatch_Init()
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <Presenter_TimeWatch_Excute>:

void Presenter_TimeWatch_Excute()
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
	timeWatch_t *ptimeWatchData;
	static timeWatch_t timeWatchData;


	osEvent evt = osMailGet(timeWatchDataMailBox, osWaitForever);
 8001a2a:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <Presenter_TimeWatch_Excute+0x54>)
 8001a2c:	6819      	ldr	r1, [r3, #0]
 8001a2e:	463b      	mov	r3, r7
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 ff9d 	bl	8004974 <osMailGet>

	if(evt.status == osEventMail){
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b20      	cmp	r3, #32
 8001a3e:	d116      	bne.n	8001a6e <Presenter_TimeWatch_Excute+0x4a>
		ptimeWatchData = evt.value.p;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	60fb      	str	r3, [r7, #12]
	  memcpy(&timeWatchData,ptimeWatchData,sizeof(timeWatch_t));
 8001a44:	2206      	movs	r2, #6
 8001a46:	68f9      	ldr	r1, [r7, #12]
 8001a48:	480c      	ldr	r0, [pc, #48]	@ (8001a7c <Presenter_TimeWatch_Excute+0x58>)
 8001a4a:	f005 fa41 	bl	8006ed0 <memcpy>
	  osMailFree(timeWatchDataMailBox, ptimeWatchData);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <Presenter_TimeWatch_Excute+0x54>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68f9      	ldr	r1, [r7, #12]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f003 f801 	bl	8004a5c <osMailFree>
	 Presenter_TimeWatch_FND(timeWatchData);
 8001a5a:	4b08      	ldr	r3, [pc, #32]	@ (8001a7c <Presenter_TimeWatch_Excute+0x58>)
 8001a5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a60:	f000 f838 	bl	8001ad4 <Presenter_TimeWatch_FND>
	 Presenter_TimeWatch_LCD(timeWatchData);
 8001a64:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <Presenter_TimeWatch_Excute+0x58>)
 8001a66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a6a:	f000 f809 	bl	8001a80 <Presenter_TimeWatch_LCD>
	}

}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200004f8 	.word	0x200004f8
 8001a7c:	2000050c 	.word	0x2000050c

08001a80 <Presenter_TimeWatch_LCD>:


void Presenter_TimeWatch_LCD(timeWatch_t pstopWatchData)
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b093      	sub	sp, #76	@ 0x4c
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	463b      	mov	r3, r7
 8001a88:	e883 0003 	stmia.w	r3, {r0, r1}
	char str[50];

	sprintf(str,"TM:%02d:%02d:%02d:%03d", pstopWatchData.hour, pstopWatchData.min, pstopWatchData.sec, pstopWatchData.msec);
 8001a8c:	783b      	ldrb	r3, [r7, #0]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	787b      	ldrb	r3, [r7, #1]
 8001a92:	461c      	mov	r4, r3
 8001a94:	78bb      	ldrb	r3, [r7, #2]
 8001a96:	88ba      	ldrh	r2, [r7, #4]
 8001a98:	f107 000c 	add.w	r0, r7, #12
 8001a9c:	9201      	str	r2, [sp, #4]
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	4623      	mov	r3, r4
 8001aa2:	460a      	mov	r2, r1
 8001aa4:	4909      	ldr	r1, [pc, #36]	@ (8001acc <Presenter_TimeWatch_LCD+0x4c>)
 8001aa6:	f005 f94f 	bl	8006d48 <siprintf>
	LCD_writeStringXY(0, 0, str);
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	461a      	mov	r2, r3
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f000 fb95 	bl	80021e2 <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, "    ");
 8001ab8:	4a05      	ldr	r2, [pc, #20]	@ (8001ad0 <Presenter_TimeWatch_LCD+0x50>)
 8001aba:	2100      	movs	r1, #0
 8001abc:	2001      	movs	r0, #1
 8001abe:	f000 fb90 	bl	80021e2 <LCD_writeStringXY>

}
 8001ac2:	bf00      	nop
 8001ac4:	3744      	adds	r7, #68	@ 0x44
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd90      	pop	{r4, r7, pc}
 8001aca:	bf00      	nop
 8001acc:	08007858 	.word	0x08007858
 8001ad0:	08007870 	.word	0x08007870

08001ad4 <Presenter_TimeWatch_FND>:




void Presenter_TimeWatch_FND(timeWatch_t timeWatchData)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	463b      	mov	r3, r7
 8001adc:	e883 0003 	stmia.w	r3, {r0, r1}
	FND_WriteData(timeWatchData.hour*100 + timeWatchData.min);
 8001ae0:	783b      	ldrb	r3, [r7, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	0092      	lsls	r2, r2, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	461a      	mov	r2, r3
 8001aea:	0091      	lsls	r1, r2, #2
 8001aec:	461a      	mov	r2, r3
 8001aee:	460b      	mov	r3, r1
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	787a      	ldrb	r2, [r7, #1]
 8001af8:	4413      	add	r3, r2
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 f87f 	bl	8001c00 <FND_WriteData>
	FND_WriteDp(0b1111,FND_DP_OFF);
 8001b02:	2100      	movs	r1, #0
 8001b04:	200f      	movs	r0, #15
 8001b06:	f000 f853 	bl	8001bb0 <FND_WriteDp>
	    if (timeWatchData.msec < 500)
 8001b0a:	88bb      	ldrh	r3, [r7, #4]
 8001b0c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b10:	d203      	bcs.n	8001b1a <Presenter_TimeWatch_FND+0x46>
	    {
	        FND_WriteDp(FND_DP_100,FND_DP_ON);
 8001b12:	2101      	movs	r1, #1
 8001b14:	2004      	movs	r0, #4
 8001b16:	f000 f84b 	bl	8001bb0 <FND_WriteDp>
	    }



}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <Button_Init>:

enum {PUSHED=0, RELEASED};


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	88fa      	ldrh	r2, [r7, #6]
 8001b3a:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	609a      	str	r2, [r3, #8]
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); // normal state is high.
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	889b      	ldrh	r3, [r3, #4]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4610      	mov	r0, r2
 8001b62:	f000 fe1f 	bl	80027a4 <HAL_GPIO_ReadPin>
 8001b66:	4603      	mov	r3, r0
 8001b68:	60fb      	str	r3, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d10a      	bne.n	8001b88 <Button_GetState+0x3a>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <Button_GetState+0x3a>
		HAL_Delay(2); // debounce
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f000 fb89 	bl	8002290 <HAL_Delay>
		hbtn->prevState = PUSHED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e00f      	b.n	8001ba8 <Button_GetState+0x5a>
	}
	else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10a      	bne.n	8001ba6 <Button_GetState+0x58>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d107      	bne.n	8001ba6 <Button_GetState+0x58>
		HAL_Delay(2); // debounce
 8001b96:	2002      	movs	r0, #2
 8001b98:	f000 fb7a 	bl	8002290 <HAL_Delay>
		hbtn->prevState = RELEASED;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e000      	b.n	8001ba8 <Button_GetState+0x5a>
	}
	return NO_ACT;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <FND_WriteDp>:
static uint8_t fndDispDp = 0;   // fnd dp data, xxxx1111 -> xxxx_dp1000_dp100_dp10_dp1



void FND_WriteDp(uint8_t dpData, uint8_t dpState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	460a      	mov	r2, r1
 8001bba:	71fb      	strb	r3, [r7, #7]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	71bb      	strb	r3, [r7, #6]
	if (dpState == FND_DP_ON)
 8001bc0:	79bb      	ldrb	r3, [r7, #6]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d107      	bne.n	8001bd6 <FND_WriteDp+0x26>
		fndDispDp |= dpData;
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <FND_WriteDp+0x4c>)
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <FND_WriteDp+0x4c>)
 8001bd2:	701a      	strb	r2, [r3, #0]
	else
		fndDispDp &= ~dpData;
}
 8001bd4:	e00b      	b.n	8001bee <FND_WriteDp+0x3e>
		fndDispDp &= ~dpData;
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	b25a      	sxtb	r2, r3
 8001bde:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <FND_WriteDp+0x4c>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b25b      	sxtb	r3, r3
 8001be4:	4013      	ands	r3, r2
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <FND_WriteDp+0x4c>)
 8001bec:	701a      	strb	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000514 	.word	0x20000514

08001c00 <FND_WriteData>:

// write fndDispNum
void FND_WriteData(uint16_t data)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 8001c0a:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <FND_WriteData+0x1c>)
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	8013      	strh	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	20000512 	.word	0x20000512

08001c20 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 8001c24:	4b80      	ldr	r3, [pc, #512]	@ (8001e28 <FND_DispDataCallBack+0x208>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	425a      	negs	r2, r3
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	f002 0207 	and.w	r2, r2, #7
 8001c34:	bf58      	it	pl
 8001c36:	4253      	negpl	r3, r2
 8001c38:	4a7b      	ldr	r2, [pc, #492]	@ (8001e28 <FND_DispDataCallBack+0x208>)
 8001c3a:	6013      	str	r3, [r2, #0]

	switch(digitPos)
 8001c3c:	4b7a      	ldr	r3, [pc, #488]	@ (8001e28 <FND_DispDataCallBack+0x208>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b07      	cmp	r3, #7
 8001c42:	f200 80ee 	bhi.w	8001e22 <FND_DispDataCallBack+0x202>
 8001c46:	a201      	add	r2, pc, #4	@ (adr r2, 8001c4c <FND_DispDataCallBack+0x2c>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001c6d 	.word	0x08001c6d
 8001c50:	08001c9b 	.word	0x08001c9b
 8001c54:	08001cd3 	.word	0x08001cd3
 8001c58:	08001d0b 	.word	0x08001d0b
 8001c5c:	08001d43 	.word	0x08001d43
 8001c60:	08001d7b 	.word	0x08001d7b
 8001c64:	08001db3 	.word	0x08001db3
 8001c68:	08001deb 	.word	0x08001deb
	{
	case DIGIT_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001c6c:	f000 f900 	bl	8001e70 <FND_DispOffAll>
		FND_DispDigit(fndDispNum%10);
 8001c70:	4b6e      	ldr	r3, [pc, #440]	@ (8001e2c <FND_DispDataCallBack+0x20c>)
 8001c72:	881a      	ldrh	r2, [r3, #0]
 8001c74:	4b6e      	ldr	r3, [pc, #440]	@ (8001e30 <FND_DispDataCallBack+0x210>)
 8001c76:	fba3 1302 	umull	r1, r3, r3, r2
 8001c7a:	08d9      	lsrs	r1, r3, #3
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 f913 	bl	8001eb4 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001c8e:	4b66      	ldr	r3, [pc, #408]	@ (8001e28 <FND_DispDataCallBack+0x208>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f8d4 	bl	8001e40 <FND_DispOn>
		break;
 8001c98:	e0c3      	b.n	8001e22 <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001c9a:	f000 f8e9 	bl	8001e70 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/10%10);
 8001c9e:	4b63      	ldr	r3, [pc, #396]	@ (8001e2c <FND_DispDataCallBack+0x20c>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	4a63      	ldr	r2, [pc, #396]	@ (8001e30 <FND_DispDataCallBack+0x210>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	08db      	lsrs	r3, r3, #3
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b60      	ldr	r3, [pc, #384]	@ (8001e30 <FND_DispDataCallBack+0x210>)
 8001cae:	fba3 1302 	umull	r1, r3, r3, r2
 8001cb2:	08d9      	lsrs	r1, r3, #3
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f8f7 	bl	8001eb4 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001cc6:	4b58      	ldr	r3, [pc, #352]	@ (8001e28 <FND_DispDataCallBack+0x208>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f8b8 	bl	8001e40 <FND_DispOn>
		break;
 8001cd0:	e0a7      	b.n	8001e22 <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001cd2:	f000 f8cd 	bl	8001e70 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/100%10);
 8001cd6:	4b55      	ldr	r3, [pc, #340]	@ (8001e2c <FND_DispDataCallBack+0x20c>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	4a56      	ldr	r2, [pc, #344]	@ (8001e34 <FND_DispDataCallBack+0x214>)
 8001cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce0:	095b      	lsrs	r3, r3, #5
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b52      	ldr	r3, [pc, #328]	@ (8001e30 <FND_DispDataCallBack+0x210>)
 8001ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8001cea:	08d9      	lsrs	r1, r3, #3
 8001cec:	460b      	mov	r3, r1
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 f8db 	bl	8001eb4 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8001e28 <FND_DispDataCallBack+0x208>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f89c 	bl	8001e40 <FND_DispOn>
		break;
 8001d08:	e08b      	b.n	8001e22 <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001d0a:	f000 f8b1 	bl	8001e70 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/1000%10);
 8001d0e:	4b47      	ldr	r3, [pc, #284]	@ (8001e2c <FND_DispDataCallBack+0x20c>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	4a49      	ldr	r2, [pc, #292]	@ (8001e38 <FND_DispDataCallBack+0x218>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	099b      	lsrs	r3, r3, #6
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	4b44      	ldr	r3, [pc, #272]	@ (8001e30 <FND_DispDataCallBack+0x210>)
 8001d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8001d22:	08d9      	lsrs	r1, r3, #3
 8001d24:	460b      	mov	r3, r1
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 f8bf 	bl	8001eb4 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001d36:	4b3c      	ldr	r3, [pc, #240]	@ (8001e28 <FND_DispDataCallBack+0x208>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f880 	bl	8001e40 <FND_DispOn>
		break;
 8001d40:	e06f      	b.n	8001e22 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001d42:	f000 f895 	bl	8001e70 <FND_DispOffAll>
		if (fndDispDp & (1<<0)){
 8001d46:	4b3d      	ldr	r3, [pc, #244]	@ (8001e3c <FND_DispDataCallBack+0x21c>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 8001d52:	200a      	movs	r0, #10
 8001d54:	f000 f8ae 	bl	8001eb4 <FND_DispDigit>
 8001d58:	e002      	b.n	8001d60 <FND_DispDataCallBack+0x140>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8001d5a:	200b      	movs	r0, #11
 8001d5c:	f000 f8aa 	bl	8001eb4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001d60:	4b31      	ldr	r3, [pc, #196]	@ (8001e28 <FND_DispDataCallBack+0x208>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	425a      	negs	r2, r3
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	f002 0203 	and.w	r2, r2, #3
 8001d6e:	bf58      	it	pl
 8001d70:	4253      	negpl	r3, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f864 	bl	8001e40 <FND_DispOn>
		break;
 8001d78:	e053      	b.n	8001e22 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001d7a:	f000 f879 	bl	8001e70 <FND_DispOffAll>
		if (fndDispDp & (1<<1)){
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e3c <FND_DispDataCallBack+0x21c>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 8001d8a:	200a      	movs	r0, #10
 8001d8c:	f000 f892 	bl	8001eb4 <FND_DispDigit>
 8001d90:	e002      	b.n	8001d98 <FND_DispDataCallBack+0x178>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8001d92:	200b      	movs	r0, #11
 8001d94:	f000 f88e 	bl	8001eb4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001d98:	4b23      	ldr	r3, [pc, #140]	@ (8001e28 <FND_DispDataCallBack+0x208>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	425a      	negs	r2, r3
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	f002 0203 	and.w	r2, r2, #3
 8001da6:	bf58      	it	pl
 8001da8:	4253      	negpl	r3, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f848 	bl	8001e40 <FND_DispOn>
		break;
 8001db0:	e037      	b.n	8001e22 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001db2:	f000 f85d 	bl	8001e70 <FND_DispOffAll>
		if (fndDispDp & (1<<2)){
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <FND_DispDataCallBack+0x21c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 8001dc2:	200a      	movs	r0, #10
 8001dc4:	f000 f876 	bl	8001eb4 <FND_DispDigit>
 8001dc8:	e002      	b.n	8001dd0 <FND_DispDataCallBack+0x1b0>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8001dca:	200b      	movs	r0, #11
 8001dcc:	f000 f872 	bl	8001eb4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001dd0:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <FND_DispDataCallBack+0x208>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	425a      	negs	r2, r3
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	f002 0203 	and.w	r2, r2, #3
 8001dde:	bf58      	it	pl
 8001de0:	4253      	negpl	r3, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f82c 	bl	8001e40 <FND_DispOn>
		break;
 8001de8:	e01b      	b.n	8001e22 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001dea:	f000 f841 	bl	8001e70 <FND_DispOffAll>
		if (fndDispDp & (1<<3)){
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <FND_DispDataCallBack+0x21c>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 8001dfa:	200a      	movs	r0, #10
 8001dfc:	f000 f85a 	bl	8001eb4 <FND_DispDigit>
 8001e00:	e002      	b.n	8001e08 <FND_DispDataCallBack+0x1e8>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8001e02:	200b      	movs	r0, #11
 8001e04:	f000 f856 	bl	8001eb4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001e08:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <FND_DispDataCallBack+0x208>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	425a      	negs	r2, r3
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	f002 0203 	and.w	r2, r2, #3
 8001e16:	bf58      	it	pl
 8001e18:	4253      	negpl	r3, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f810 	bl	8001e40 <FND_DispOn>
		break;
 8001e20:	bf00      	nop
	}
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000518 	.word	0x20000518
 8001e2c:	20000512 	.word	0x20000512
 8001e30:	cccccccd 	.word	0xcccccccd
 8001e34:	51eb851f 	.word	0x51eb851f
 8001e38:	10624dd3 	.word	0x10624dd3
 8001e3c:	20000514 	.word	0x20000514

08001e40 <FND_DispOn>:
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
}
*/

void FND_DispOn(int fndPos)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, RESET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8001e48:	4a08      	ldr	r2, [pc, #32]	@ (8001e6c <FND_DispOn+0x2c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001e50:	4a06      	ldr	r2, [pc, #24]	@ (8001e6c <FND_DispOn+0x2c>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4413      	add	r3, r2
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f000 fcb8 	bl	80027d4 <HAL_GPIO_WritePin>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000004 	.word	0x20000004

08001e70 <FND_DispOffAll>:

void FND_DispOffAll()
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++) {
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	e010      	b.n	8001e9e <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 8001e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb0 <FND_DispOffAll+0x40>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <FND_DispOffAll+0x40>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2201      	movs	r2, #1
 8001e92:	4619      	mov	r1, r3
 8001e94:	f000 fc9e 	bl	80027d4 <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	ddeb      	ble.n	8001e7c <FND_DispOffAll+0xc>
	}
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000004 	.word	0x20000004

08001eb4 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 8001ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8001f3c <FND_DispDigit+0x88>)
 8001ec0:	f107 0308 	add.w	r3, r7, #8
 8001ec4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ec6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    0x6F,  // 9 => 01101111
	    0x80,  // 10(dp) => 10000000
	    0x00,  // 11(off)=> 00000000
	};

	for (int i=0; i<8; i++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e02c      	b.n	8001f2a <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	3318      	adds	r3, #24
 8001ed4:	443b      	add	r3, r7
 8001ed6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001eda:	461a      	mov	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa42 f303 	asr.w	r3, r2, r3
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10e      	bne.n	8001f08 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 8001eea:	4a15      	ldr	r2, [pc, #84]	@ (8001f40 <FND_DispDigit+0x8c>)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001ef2:	4a13      	ldr	r2, [pc, #76]	@ (8001f40 <FND_DispDigit+0x8c>)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2200      	movs	r2, #0
 8001f00:	4619      	mov	r1, r3
 8001f02:	f000 fc67 	bl	80027d4 <HAL_GPIO_WritePin>
 8001f06:	e00d      	b.n	8001f24 <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 8001f08:	4a0d      	ldr	r2, [pc, #52]	@ (8001f40 <FND_DispDigit+0x8c>)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001f10:	4a0b      	ldr	r2, [pc, #44]	@ (8001f40 <FND_DispDigit+0x8c>)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f000 fc58 	bl	80027d4 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3301      	adds	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b07      	cmp	r3, #7
 8001f2e:	ddcf      	ble.n	8001ed0 <FND_DispDigit+0x1c>
		}
	}
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	08007878 	.word	0x08007878
 8001f40:	20000024 	.word	0x20000024

08001f44 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8001f4c:	4a18      	ldr	r2, [pc, #96]	@ (8001fb0 <LCD_Init+0x6c>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 8001f52:	2032      	movs	r0, #50	@ 0x32
 8001f54:	f000 f99c 	bl	8002290 <HAL_Delay>
	LCD_cmdMode();
 8001f58:	f000 f852 	bl	8002000 <LCD_cmdMode>
	LCD_writeMode();
 8001f5c:	f000 f874 	bl	8002048 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 8001f60:	2030      	movs	r0, #48	@ 0x30
 8001f62:	f000 f8a7 	bl	80020b4 <LCD_sendNibbleData>
	HAL_Delay(5);
 8001f66:	2005      	movs	r0, #5
 8001f68:	f000 f992 	bl	8002290 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001f6c:	2030      	movs	r0, #48	@ 0x30
 8001f6e:	f000 f8a1 	bl	80020b4 <LCD_sendNibbleData>
	HAL_Delay(1);
 8001f72:	2001      	movs	r0, #1
 8001f74:	f000 f98c 	bl	8002290 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001f78:	2030      	movs	r0, #48	@ 0x30
 8001f7a:	f000 f89b 	bl	80020b4 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 8001f7e:	2020      	movs	r0, #32
 8001f80:	f000 f898 	bl	80020b4 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 8001f84:	2028      	movs	r0, #40	@ 0x28
 8001f86:	f000 f8b9 	bl	80020fc <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 8001f8a:	2008      	movs	r0, #8
 8001f8c:	f000 f8b6 	bl	80020fc <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 8001f90:	2001      	movs	r0, #1
 8001f92:	f000 f8b3 	bl	80020fc <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 8001f96:	2006      	movs	r0, #6
 8001f98:	f000 f8b0 	bl	80020fc <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 8001f9c:	200c      	movs	r0, #12
 8001f9e:	f000 f8ad 	bl	80020fc <LCD_sendData>
	LCD_backLightOn();
 8001fa2:	f000 f81d 	bl	8001fe0 <LCD_backLightOn>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000520 	.word	0x20000520

08001fb4 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 8001fbe:	4b07      	ldr	r3, [pc, #28]	@ (8001fdc <LCD_sendI2C+0x28>)
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	1dfa      	adds	r2, r7, #7
 8001fc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2301      	movs	r3, #1
 8001fcc:	214e      	movs	r1, #78	@ 0x4e
 8001fce:	f000 fd5f 	bl	8002a90 <HAL_I2C_Master_Transmit>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000520 	.word	0x20000520

08001fe0 <LCD_backLightOn>:

void LCD_backLightOn()
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <LCD_backLightOn+0x1c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	f043 0308 	orr.w	r3, r3, #8
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <LCD_backLightOn+0x1c>)
 8001ff0:	701a      	strb	r2, [r3, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	2000051c 	.word	0x2000051c

08002000 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <LCD_cmdMode+0x20>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4b04      	ldr	r3, [pc, #16]	@ (8002020 <LCD_cmdMode+0x20>)
 8002010:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002012:	4b03      	ldr	r3, [pc, #12]	@ (8002020 <LCD_cmdMode+0x20>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ffcc 	bl	8001fb4 <LCD_sendI2C>
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	2000051c 	.word	0x2000051c

08002024 <LCD_charMode>:

void LCD_charMode()
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <LCD_charMode+0x20>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <LCD_charMode+0x20>)
 8002034:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002036:	4b03      	ldr	r3, [pc, #12]	@ (8002044 <LCD_charMode+0x20>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ffba 	bl	8001fb4 <LCD_sendI2C>
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	2000051c 	.word	0x2000051c

08002048 <LCD_writeMode>:

void LCD_writeMode()
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <LCD_writeMode+0x20>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	f023 0302 	bic.w	r3, r3, #2
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <LCD_writeMode+0x20>)
 8002058:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800205a:	4b03      	ldr	r3, [pc, #12]	@ (8002068 <LCD_writeMode+0x20>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ffa8 	bl	8001fb4 <LCD_sendI2C>
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	2000051c 	.word	0x2000051c

0800206c <LCD_E_High>:

void LCD_E_High()
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <LCD_E_High+0x20>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4b04      	ldr	r3, [pc, #16]	@ (800208c <LCD_E_High+0x20>)
 800207c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800207e:	4b03      	ldr	r3, [pc, #12]	@ (800208c <LCD_E_High+0x20>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff96 	bl	8001fb4 <LCD_sendI2C>
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	2000051c 	.word	0x2000051c

08002090 <LCD_E_Low>:

void LCD_E_Low()
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <LCD_E_Low+0x20>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	f023 0304 	bic.w	r3, r3, #4
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <LCD_E_Low+0x20>)
 80020a0:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80020a2:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <LCD_E_Low+0x20>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ff84 	bl	8001fb4 <LCD_sendI2C>
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	2000051c 	.word	0x2000051c

080020b4 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 80020be:	f7ff ffd5 	bl	800206c <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	f023 030f 	bic.w	r3, r3, #15
 80020ca:	b25a      	sxtb	r2, r3
 80020cc:	4b0a      	ldr	r3, [pc, #40]	@ (80020f8 <LCD_sendNibbleData+0x44>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	b25b      	sxtb	r3, r3
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	b25b      	sxtb	r3, r3
 80020d8:	4313      	orrs	r3, r2
 80020da:	b25b      	sxtb	r3, r3
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <LCD_sendNibbleData+0x44>)
 80020e0:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80020e2:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <LCD_sendNibbleData+0x44>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff ff64 	bl	8001fb4 <LCD_sendI2C>
	LCD_E_Low();
 80020ec:	f7ff ffd0 	bl	8002090 <LCD_E_Low>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	2000051c 	.word	0x2000051c

080020fc <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ffd3 	bl	80020b4 <LCD_sendNibbleData>

	data = data << 4;
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ffcc 	bl	80020b4 <LCD_sendNibbleData>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 800212e:	f7ff ff8b 	bl	8002048 <LCD_writeMode>
	LCD_cmdMode();
 8002132:	f7ff ff65 	bl	8002000 <LCD_cmdMode>
	LCD_sendData(data);
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ffdf 	bl	80020fc <LCD_sendData>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8002150:	f7ff ff7a 	bl	8002048 <LCD_writeMode>
	LCD_charMode();
 8002154:	f7ff ff66 	bl	8002024 <LCD_charMode>
	LCD_sendData(data);
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ffce 	bl	80020fc <LCD_sendData>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <LCD_writeString>:

void LCD_writeString(char *str)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++) {
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	e009      	b.n	800218a <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ffe1 	bl	8002146 <LCD_writeCharData>
	for (int i=0; str[i]; i++) {
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3301      	adds	r3, #1
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1ef      	bne.n	8002176 <LCD_writeString+0xe>
	}
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	460a      	mov	r2, r1
 80021aa:	71fb      	strb	r3, [r7, #7]
 80021ac:	4613      	mov	r3, r2
 80021ae:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 80021b0:	79bb      	ldrb	r3, [r7, #6]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	019b      	lsls	r3, r3, #6
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	79bb      	ldrb	r3, [r7, #6]
 80021c8:	4413      	add	r3, r2
 80021ca:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	3b80      	subs	r3, #128	@ 0x80
 80021d0:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 80021d2:	7bbb      	ldrb	r3, [r7, #14]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ffa5 	bl	8002124 <LCD_writeCmdData>
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	603a      	str	r2, [r7, #0]
 80021ec:	71fb      	strb	r3, [r7, #7]
 80021ee:	460b      	mov	r3, r1
 80021f0:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 80021f2:	79ba      	ldrb	r2, [r7, #6]
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ffd1 	bl	80021a0 <LCD_gotoXY>
	LCD_writeString(str);
 80021fe:	6838      	ldr	r0, [r7, #0]
 8002200:	f7ff ffb2 	bl	8002168 <LCD_writeString>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002210:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <HAL_Init+0x40>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <HAL_Init+0x40>)
 8002216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800221a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800221c:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <HAL_Init+0x40>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0a      	ldr	r2, [pc, #40]	@ (800224c <HAL_Init+0x40>)
 8002222:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002228:	4b08      	ldr	r3, [pc, #32]	@ (800224c <HAL_Init+0x40>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a07      	ldr	r2, [pc, #28]	@ (800224c <HAL_Init+0x40>)
 800222e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002234:	2003      	movs	r0, #3
 8002236:	f000 f8fc 	bl	8002432 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223a:	200f      	movs	r0, #15
 800223c:	f7fe fc68 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002240:	f7fe fc3a 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023c00 	.word	0x40023c00

08002250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_IncTick+0x20>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <HAL_IncTick+0x24>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4413      	add	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <HAL_IncTick+0x24>)
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000068 	.word	0x20000068
 8002274:	20000524 	.word	0x20000524

08002278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;
 800227c:	4b03      	ldr	r3, [pc, #12]	@ (800228c <HAL_GetTick+0x14>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000524 	.word	0x20000524

08002290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff ffee 	bl	8002278 <HAL_GetTick>
 800229c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d005      	beq.n	80022b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022aa:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <HAL_Delay+0x44>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022b6:	bf00      	nop
 80022b8:	f7ff ffde 	bl	8002278 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d8f7      	bhi.n	80022b8 <HAL_Delay+0x28>
  {
  }
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000068 	.word	0x20000068

080022d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e8:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <__NVIC_SetPriorityGrouping+0x44>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022f4:	4013      	ands	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002300:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002304:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230a:	4a04      	ldr	r2, [pc, #16]	@ (800231c <__NVIC_SetPriorityGrouping+0x44>)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	60d3      	str	r3, [r2, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002324:	4b04      	ldr	r3, [pc, #16]	@ (8002338 <__NVIC_GetPriorityGrouping+0x18>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	f003 0307 	and.w	r3, r3, #7
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	db0b      	blt.n	8002366 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	4907      	ldr	r1, [pc, #28]	@ (8002374 <__NVIC_EnableIRQ+0x38>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	2001      	movs	r0, #1
 800235e:	fa00 f202 	lsl.w	r2, r0, r2
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000e100 	.word	0xe000e100

08002378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	@ (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	@ (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	@ 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
         );
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	@ 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff ff4c 	bl	80022d8 <__NVIC_SetPriorityGrouping>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800245a:	f7ff ff61 	bl	8002320 <__NVIC_GetPriorityGrouping>
 800245e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	6978      	ldr	r0, [r7, #20]
 8002466:	f7ff ffb1 	bl	80023cc <NVIC_EncodePriority>
 800246a:	4602      	mov	r2, r0
 800246c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ff80 	bl	8002378 <__NVIC_SetPriority>
}
 8002478:	bf00      	nop
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff54 	bl	800233c <__NVIC_EnableIRQ>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	@ 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e159      	b.n	800276c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f040 8148 	bne.w	8002766 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d005      	beq.n	80024ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d130      	bne.n	8002550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	2203      	movs	r2, #3
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 0201 	and.w	r2, r3, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b03      	cmp	r3, #3
 800255a:	d017      	beq.n	800258c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d123      	bne.n	80025e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	08da      	lsrs	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3208      	adds	r2, #8
 80025a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3208      	adds	r2, #8
 80025da:	69b9      	ldr	r1, [r7, #24]
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0203 	and.w	r2, r3, #3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80a2 	beq.w	8002766 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	4b57      	ldr	r3, [pc, #348]	@ (8002784 <HAL_GPIO_Init+0x2e8>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	4a56      	ldr	r2, [pc, #344]	@ (8002784 <HAL_GPIO_Init+0x2e8>)
 800262c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002630:	6453      	str	r3, [r2, #68]	@ 0x44
 8002632:	4b54      	ldr	r3, [pc, #336]	@ (8002784 <HAL_GPIO_Init+0x2e8>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800263e:	4a52      	ldr	r2, [pc, #328]	@ (8002788 <HAL_GPIO_Init+0x2ec>)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a49      	ldr	r2, [pc, #292]	@ (800278c <HAL_GPIO_Init+0x2f0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d019      	beq.n	800269e <HAL_GPIO_Init+0x202>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a48      	ldr	r2, [pc, #288]	@ (8002790 <HAL_GPIO_Init+0x2f4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <HAL_GPIO_Init+0x1fe>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a47      	ldr	r2, [pc, #284]	@ (8002794 <HAL_GPIO_Init+0x2f8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00d      	beq.n	8002696 <HAL_GPIO_Init+0x1fa>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a46      	ldr	r2, [pc, #280]	@ (8002798 <HAL_GPIO_Init+0x2fc>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d007      	beq.n	8002692 <HAL_GPIO_Init+0x1f6>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a45      	ldr	r2, [pc, #276]	@ (800279c <HAL_GPIO_Init+0x300>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_GPIO_Init+0x1f2>
 800268a:	2304      	movs	r3, #4
 800268c:	e008      	b.n	80026a0 <HAL_GPIO_Init+0x204>
 800268e:	2307      	movs	r3, #7
 8002690:	e006      	b.n	80026a0 <HAL_GPIO_Init+0x204>
 8002692:	2303      	movs	r3, #3
 8002694:	e004      	b.n	80026a0 <HAL_GPIO_Init+0x204>
 8002696:	2302      	movs	r3, #2
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_Init+0x204>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_GPIO_Init+0x204>
 800269e:	2300      	movs	r3, #0
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	f002 0203 	and.w	r2, r2, #3
 80026a6:	0092      	lsls	r2, r2, #2
 80026a8:	4093      	lsls	r3, r2
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b0:	4935      	ldr	r1, [pc, #212]	@ (8002788 <HAL_GPIO_Init+0x2ec>)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	3302      	adds	r3, #2
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026be:	4b38      	ldr	r3, [pc, #224]	@ (80027a0 <HAL_GPIO_Init+0x304>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026e2:	4a2f      	ldr	r2, [pc, #188]	@ (80027a0 <HAL_GPIO_Init+0x304>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026e8:	4b2d      	ldr	r3, [pc, #180]	@ (80027a0 <HAL_GPIO_Init+0x304>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800270c:	4a24      	ldr	r2, [pc, #144]	@ (80027a0 <HAL_GPIO_Init+0x304>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002712:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <HAL_GPIO_Init+0x304>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002736:	4a1a      	ldr	r2, [pc, #104]	@ (80027a0 <HAL_GPIO_Init+0x304>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800273c:	4b18      	ldr	r3, [pc, #96]	@ (80027a0 <HAL_GPIO_Init+0x304>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002760:	4a0f      	ldr	r2, [pc, #60]	@ (80027a0 <HAL_GPIO_Init+0x304>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3301      	adds	r3, #1
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b0f      	cmp	r3, #15
 8002770:	f67f aea2 	bls.w	80024b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3724      	adds	r7, #36	@ 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
 8002788:	40013800 	.word	0x40013800
 800278c:	40020000 	.word	0x40020000
 8002790:	40020400 	.word	0x40020400
 8002794:	40020800 	.word	0x40020800
 8002798:	40020c00 	.word	0x40020c00
 800279c:	40021000 	.word	0x40021000
 80027a0:	40013c00 	.word	0x40013c00

080027a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	887b      	ldrh	r3, [r7, #2]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	e001      	b.n	80027c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
 80027e0:	4613      	mov	r3, r2
 80027e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e4:	787b      	ldrb	r3, [r7, #1]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f0:	e003      	b.n	80027fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027f2:	887b      	ldrh	r3, [r7, #2]
 80027f4:	041a      	lsls	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	619a      	str	r2, [r3, #24]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e12b      	b.n	8002a72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe f85e 	bl	80008f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2224      	movs	r2, #36	@ 0x24
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800285a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800286a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800286c:	f001 f8da 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 8002870:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a81      	ldr	r2, [pc, #516]	@ (8002a7c <HAL_I2C_Init+0x274>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d807      	bhi.n	800288c <HAL_I2C_Init+0x84>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a80      	ldr	r2, [pc, #512]	@ (8002a80 <HAL_I2C_Init+0x278>)
 8002880:	4293      	cmp	r3, r2
 8002882:	bf94      	ite	ls
 8002884:	2301      	movls	r3, #1
 8002886:	2300      	movhi	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	e006      	b.n	800289a <HAL_I2C_Init+0x92>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a84 <HAL_I2C_Init+0x27c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	bf94      	ite	ls
 8002894:	2301      	movls	r3, #1
 8002896:	2300      	movhi	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0e7      	b.n	8002a72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4a78      	ldr	r2, [pc, #480]	@ (8002a88 <HAL_I2C_Init+0x280>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0c9b      	lsrs	r3, r3, #18
 80028ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a7c <HAL_I2C_Init+0x274>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d802      	bhi.n	80028dc <HAL_I2C_Init+0xd4>
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	3301      	adds	r3, #1
 80028da:	e009      	b.n	80028f0 <HAL_I2C_Init+0xe8>
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	4a69      	ldr	r2, [pc, #420]	@ (8002a8c <HAL_I2C_Init+0x284>)
 80028e8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ec:	099b      	lsrs	r3, r3, #6
 80028ee:	3301      	adds	r3, #1
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002902:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	495c      	ldr	r1, [pc, #368]	@ (8002a7c <HAL_I2C_Init+0x274>)
 800290c:	428b      	cmp	r3, r1
 800290e:	d819      	bhi.n	8002944 <HAL_I2C_Init+0x13c>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1e59      	subs	r1, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fbb1 f3f3 	udiv	r3, r1, r3
 800291e:	1c59      	adds	r1, r3, #1
 8002920:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002924:	400b      	ands	r3, r1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_I2C_Init+0x138>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1e59      	subs	r1, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fbb1 f3f3 	udiv	r3, r1, r3
 8002938:	3301      	adds	r3, #1
 800293a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293e:	e051      	b.n	80029e4 <HAL_I2C_Init+0x1dc>
 8002940:	2304      	movs	r3, #4
 8002942:	e04f      	b.n	80029e4 <HAL_I2C_Init+0x1dc>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d111      	bne.n	8002970 <HAL_I2C_Init+0x168>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1e58      	subs	r0, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	440b      	add	r3, r1
 800295a:	fbb0 f3f3 	udiv	r3, r0, r3
 800295e:	3301      	adds	r3, #1
 8002960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	e012      	b.n	8002996 <HAL_I2C_Init+0x18e>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1e58      	subs	r0, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	0099      	lsls	r1, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	fbb0 f3f3 	udiv	r3, r0, r3
 8002986:	3301      	adds	r3, #1
 8002988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Init+0x196>
 800299a:	2301      	movs	r3, #1
 800299c:	e022      	b.n	80029e4 <HAL_I2C_Init+0x1dc>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10e      	bne.n	80029c4 <HAL_I2C_Init+0x1bc>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1e58      	subs	r0, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6859      	ldr	r1, [r3, #4]
 80029ae:	460b      	mov	r3, r1
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	440b      	add	r3, r1
 80029b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b8:	3301      	adds	r3, #1
 80029ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029c2:	e00f      	b.n	80029e4 <HAL_I2C_Init+0x1dc>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1e58      	subs	r0, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6859      	ldr	r1, [r3, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	0099      	lsls	r1, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029da:	3301      	adds	r3, #1
 80029dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	6809      	ldr	r1, [r1, #0]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6911      	ldr	r1, [r2, #16]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68d2      	ldr	r2, [r2, #12]
 8002a1e:	4311      	orrs	r1, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	430b      	orrs	r3, r1
 8002a26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	000186a0 	.word	0x000186a0
 8002a80:	001e847f 	.word	0x001e847f
 8002a84:	003d08ff 	.word	0x003d08ff
 8002a88:	431bde83 	.word	0x431bde83
 8002a8c:	10624dd3 	.word	0x10624dd3

08002a90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	817b      	strh	r3, [r7, #10]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aa4:	f7ff fbe8 	bl	8002278 <HAL_GetTick>
 8002aa8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	f040 80e0 	bne.w	8002c78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2319      	movs	r3, #25
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4970      	ldr	r1, [pc, #448]	@ (8002c84 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f964 	bl	8002d90 <I2C_WaitOnFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e0d3      	b.n	8002c7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_I2C_Master_Transmit+0x50>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e0cc      	b.n	8002c7a <HAL_I2C_Master_Transmit+0x1ea>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d007      	beq.n	8002b06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0201 	orr.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2221      	movs	r2, #33	@ 0x21
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2210      	movs	r2, #16
 8002b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	893a      	ldrh	r2, [r7, #8]
 8002b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4a50      	ldr	r2, [pc, #320]	@ (8002c88 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b48:	8979      	ldrh	r1, [r7, #10]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	6a3a      	ldr	r2, [r7, #32]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f89c 	bl	8002c8c <I2C_MasterRequestWrite>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e08d      	b.n	8002c7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b74:	e066      	b.n	8002c44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	6a39      	ldr	r1, [r7, #32]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fa22 	bl	8002fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d107      	bne.n	8002b9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e06b      	b.n	8002c7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d11b      	bne.n	8002c18 <HAL_I2C_Master_Transmit+0x188>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d017      	beq.n	8002c18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	6a39      	ldr	r1, [r7, #32]
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 fa19 	bl	8003054 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00d      	beq.n	8002c44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d107      	bne.n	8002c40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e01a      	b.n	8002c7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d194      	bne.n	8002b76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	e000      	b.n	8002c7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c78:	2302      	movs	r3, #2
  }
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	00100002 	.word	0x00100002
 8002c88:	ffff0000 	.word	0xffff0000

08002c8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d006      	beq.n	8002cb6 <I2C_MasterRequestWrite+0x2a>
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d003      	beq.n	8002cb6 <I2C_MasterRequestWrite+0x2a>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cb4:	d108      	bne.n	8002cc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e00b      	b.n	8002ce0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ccc:	2b12      	cmp	r3, #18
 8002cce:	d107      	bne.n	8002ce0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f84f 	bl	8002d90 <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00d      	beq.n	8002d14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d06:	d103      	bne.n	8002d10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e035      	b.n	8002d80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d1c:	d108      	bne.n	8002d30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d1e:	897b      	ldrh	r3, [r7, #10]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d2c:	611a      	str	r2, [r3, #16]
 8002d2e:	e01b      	b.n	8002d68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d30:	897b      	ldrh	r3, [r7, #10]
 8002d32:	11db      	asrs	r3, r3, #7
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f003 0306 	and.w	r3, r3, #6
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f063 030f 	orn	r3, r3, #15
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	490e      	ldr	r1, [pc, #56]	@ (8002d88 <I2C_MasterRequestWrite+0xfc>)
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f898 	bl	8002e84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e010      	b.n	8002d80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d5e:	897b      	ldrh	r3, [r7, #10]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4907      	ldr	r1, [pc, #28]	@ (8002d8c <I2C_MasterRequestWrite+0x100>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f888 	bl	8002e84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	00010008 	.word	0x00010008
 8002d8c:	00010002 	.word	0x00010002

08002d90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da0:	e048      	b.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d044      	beq.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002daa:	f7ff fa65 	bl	8002278 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d139      	bne.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d10d      	bne.n	8002de6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	43da      	mvns	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	e00c      	b.n	8002e00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	43da      	mvns	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4013      	ands	r3, r2
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d116      	bne.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e023      	b.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	0c1b      	lsrs	r3, r3, #16
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d10d      	bne.n	8002e5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	43da      	mvns	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	e00c      	b.n	8002e74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	43da      	mvns	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4013      	ands	r3, r2
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d093      	beq.n	8002da2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e92:	e071      	b.n	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea2:	d123      	bne.n	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ebc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed8:	f043 0204 	orr.w	r2, r3, #4
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e067      	b.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef2:	d041      	beq.n	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef4:	f7ff f9c0 	bl	8002278 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d302      	bcc.n	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d136      	bne.n	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	0c1b      	lsrs	r3, r3, #16
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d10c      	bne.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	bf14      	ite	ne
 8002f26:	2301      	movne	r3, #1
 8002f28:	2300      	moveq	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	e00b      	b.n	8002f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	43da      	mvns	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d016      	beq.n	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e021      	b.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	0c1b      	lsrs	r3, r3, #16
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d10c      	bne.n	8002f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf14      	ite	ne
 8002f94:	2301      	movne	r3, #1
 8002f96:	2300      	moveq	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e00b      	b.n	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f47f af6d 	bne.w	8002e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fd0:	e034      	b.n	800303c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f886 	bl	80030e4 <I2C_IsAcknowledgeFailed>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e034      	b.n	800304c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d028      	beq.n	800303c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fea:	f7ff f945 	bl	8002278 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d302      	bcc.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d11d      	bne.n	800303c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300a:	2b80      	cmp	r3, #128	@ 0x80
 800300c:	d016      	beq.n	800303c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	f043 0220 	orr.w	r2, r3, #32
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e007      	b.n	800304c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003046:	2b80      	cmp	r3, #128	@ 0x80
 8003048:	d1c3      	bne.n	8002fd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003060:	e034      	b.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f83e 	bl	80030e4 <I2C_IsAcknowledgeFailed>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e034      	b.n	80030dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d028      	beq.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307a:	f7ff f8fd 	bl	8002278 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d11d      	bne.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b04      	cmp	r3, #4
 800309c:	d016      	beq.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e007      	b.n	80030dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d1c3      	bne.n	8003062 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030fa:	d11b      	bne.n	8003134 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003104:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	f043 0204 	orr.w	r2, r3, #4
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e267      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d075      	beq.n	800324e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003162:	4b88      	ldr	r3, [pc, #544]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b04      	cmp	r3, #4
 800316c:	d00c      	beq.n	8003188 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316e:	4b85      	ldr	r3, [pc, #532]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003176:	2b08      	cmp	r3, #8
 8003178:	d112      	bne.n	80031a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317a:	4b82      	ldr	r3, [pc, #520]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003182:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003186:	d10b      	bne.n	80031a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	4b7e      	ldr	r3, [pc, #504]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d05b      	beq.n	800324c <HAL_RCC_OscConfig+0x108>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d157      	bne.n	800324c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e242      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a8:	d106      	bne.n	80031b8 <HAL_RCC_OscConfig+0x74>
 80031aa:	4b76      	ldr	r3, [pc, #472]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a75      	ldr	r2, [pc, #468]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e01d      	b.n	80031f4 <HAL_RCC_OscConfig+0xb0>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x98>
 80031c2:	4b70      	ldr	r3, [pc, #448]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6f      	ldr	r2, [pc, #444]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 80031c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a6c      	ldr	r2, [pc, #432]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0xb0>
 80031dc:	4b69      	ldr	r3, [pc, #420]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a68      	ldr	r2, [pc, #416]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 80031e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b66      	ldr	r3, [pc, #408]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a65      	ldr	r2, [pc, #404]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 80031ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7ff f83c 	bl	8002278 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7ff f838 	bl	8002278 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	@ 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e207      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b5b      	ldr	r3, [pc, #364]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0xc0>
 8003222:	e014      	b.n	800324e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7ff f828 	bl	8002278 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800322c:	f7ff f824 	bl	8002278 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	@ 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e1f3      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	4b51      	ldr	r3, [pc, #324]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0xe8>
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d063      	beq.n	8003322 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800325a:	4b4a      	ldr	r3, [pc, #296]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b47      	ldr	r3, [pc, #284]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800326e:	2b08      	cmp	r3, #8
 8003270:	d11c      	bne.n	80032ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003272:	4b44      	ldr	r3, [pc, #272]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d116      	bne.n	80032ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327e:	4b41      	ldr	r3, [pc, #260]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x152>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e1c7      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003296:	4b3b      	ldr	r3, [pc, #236]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4937      	ldr	r1, [pc, #220]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032aa:	e03a      	b.n	8003322 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d020      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b4:	4b34      	ldr	r3, [pc, #208]	@ (8003388 <HAL_RCC_OscConfig+0x244>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fe ffdd 	bl	8002278 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fe ffd9 	bl	8002278 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e1a8      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b28      	ldr	r3, [pc, #160]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4925      	ldr	r1, [pc, #148]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]
 80032f4:	e015      	b.n	8003322 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f6:	4b24      	ldr	r3, [pc, #144]	@ (8003388 <HAL_RCC_OscConfig+0x244>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe ffbc 	bl	8002278 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003304:	f7fe ffb8 	bl	8002278 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e187      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	4b1b      	ldr	r3, [pc, #108]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d036      	beq.n	800339c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003336:	4b15      	ldr	r3, [pc, #84]	@ (800338c <HAL_RCC_OscConfig+0x248>)
 8003338:	2201      	movs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333c:	f7fe ff9c 	bl	8002278 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003344:	f7fe ff98 	bl	8002278 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e167      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <HAL_RCC_OscConfig+0x240>)
 8003358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x200>
 8003362:	e01b      	b.n	800339c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003364:	4b09      	ldr	r3, [pc, #36]	@ (800338c <HAL_RCC_OscConfig+0x248>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336a:	f7fe ff85 	bl	8002278 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	e00e      	b.n	8003390 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003372:	f7fe ff81 	bl	8002278 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d907      	bls.n	8003390 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e150      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
 8003384:	40023800 	.word	0x40023800
 8003388:	42470000 	.word	0x42470000
 800338c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003390:	4b88      	ldr	r3, [pc, #544]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1ea      	bne.n	8003372 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8097 	beq.w	80034d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ae:	4b81      	ldr	r3, [pc, #516]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	4b7d      	ldr	r3, [pc, #500]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	4a7c      	ldr	r2, [pc, #496]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ca:	4b7a      	ldr	r3, [pc, #488]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b77      	ldr	r3, [pc, #476]	@ (80035b8 <HAL_RCC_OscConfig+0x474>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d118      	bne.n	8003418 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e6:	4b74      	ldr	r3, [pc, #464]	@ (80035b8 <HAL_RCC_OscConfig+0x474>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a73      	ldr	r2, [pc, #460]	@ (80035b8 <HAL_RCC_OscConfig+0x474>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f2:	f7fe ff41 	bl	8002278 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fa:	f7fe ff3d 	bl	8002278 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e10c      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340c:	4b6a      	ldr	r3, [pc, #424]	@ (80035b8 <HAL_RCC_OscConfig+0x474>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x2ea>
 8003420:	4b64      	ldr	r3, [pc, #400]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003424:	4a63      	ldr	r2, [pc, #396]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6713      	str	r3, [r2, #112]	@ 0x70
 800342c:	e01c      	b.n	8003468 <HAL_RCC_OscConfig+0x324>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b05      	cmp	r3, #5
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x30c>
 8003436:	4b5f      	ldr	r3, [pc, #380]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343a:	4a5e      	ldr	r2, [pc, #376]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	6713      	str	r3, [r2, #112]	@ 0x70
 8003442:	4b5c      	ldr	r3, [pc, #368]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003446:	4a5b      	ldr	r2, [pc, #364]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6713      	str	r3, [r2, #112]	@ 0x70
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0x324>
 8003450:	4b58      	ldr	r3, [pc, #352]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003454:	4a57      	ldr	r2, [pc, #348]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	6713      	str	r3, [r2, #112]	@ 0x70
 800345c:	4b55      	ldr	r3, [pc, #340]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003460:	4a54      	ldr	r2, [pc, #336]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003462:	f023 0304 	bic.w	r3, r3, #4
 8003466:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d015      	beq.n	800349c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7fe ff02 	bl	8002278 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003476:	e00a      	b.n	800348e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003478:	f7fe fefe 	bl	8002278 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e0cb      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348e:	4b49      	ldr	r3, [pc, #292]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0ee      	beq.n	8003478 <HAL_RCC_OscConfig+0x334>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349c:	f7fe feec 	bl	8002278 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f7fe fee8 	bl	8002278 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e0b5      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ba:	4b3e      	ldr	r3, [pc, #248]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1ee      	bne.n	80034a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034cc:	4b39      	ldr	r3, [pc, #228]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	4a38      	ldr	r2, [pc, #224]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 80034d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80a1 	beq.w	8003624 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034e2:	4b34      	ldr	r3, [pc, #208]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d05c      	beq.n	80035a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d141      	bne.n	800357a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f6:	4b31      	ldr	r3, [pc, #196]	@ (80035bc <HAL_RCC_OscConfig+0x478>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fc:	f7fe febc 	bl	8002278 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003504:	f7fe feb8 	bl	8002278 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e087      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	4b27      	ldr	r3, [pc, #156]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	019b      	lsls	r3, r3, #6
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	3b01      	subs	r3, #1
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	491b      	ldr	r1, [pc, #108]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800354c:	4b1b      	ldr	r3, [pc, #108]	@ (80035bc <HAL_RCC_OscConfig+0x478>)
 800354e:	2201      	movs	r2, #1
 8003550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fe fe91 	bl	8002278 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355a:	f7fe fe8d 	bl	8002278 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e05c      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356c:	4b11      	ldr	r3, [pc, #68]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x416>
 8003578:	e054      	b.n	8003624 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	4b10      	ldr	r3, [pc, #64]	@ (80035bc <HAL_RCC_OscConfig+0x478>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fe fe7a 	bl	8002278 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003588:	f7fe fe76 	bl	8002278 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e045      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359a:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <HAL_RCC_OscConfig+0x470>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x444>
 80035a6:	e03d      	b.n	8003624 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d107      	bne.n	80035c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e038      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40007000 	.word	0x40007000
 80035bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003630 <HAL_RCC_OscConfig+0x4ec>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d028      	beq.n	8003620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d8:	429a      	cmp	r2, r3
 80035da:	d121      	bne.n	8003620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d11a      	bne.n	8003620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035f0:	4013      	ands	r3, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d111      	bne.n	8003620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	3b01      	subs	r3, #1
 800360a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d107      	bne.n	8003620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800

08003634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0cc      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003648:	4b68      	ldr	r3, [pc, #416]	@ (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d90c      	bls.n	8003670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b65      	ldr	r3, [pc, #404]	@ (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b63      	ldr	r3, [pc, #396]	@ (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0b8      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003688:	4b59      	ldr	r3, [pc, #356]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4a58      	ldr	r2, [pc, #352]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003692:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a0:	4b53      	ldr	r3, [pc, #332]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a52      	ldr	r2, [pc, #328]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ac:	4b50      	ldr	r3, [pc, #320]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	494d      	ldr	r1, [pc, #308]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d044      	beq.n	8003754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	4b47      	ldr	r3, [pc, #284]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d119      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e07f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d003      	beq.n	80036f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	4b3f      	ldr	r3, [pc, #252]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e06f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003702:	4b3b      	ldr	r3, [pc, #236]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e067      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003712:	4b37      	ldr	r3, [pc, #220]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4934      	ldr	r1, [pc, #208]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003724:	f7fe fda8 	bl	8002278 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	e00a      	b.n	8003742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372c:	f7fe fda4 	bl	8002278 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e04f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	4b2b      	ldr	r3, [pc, #172]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 020c 	and.w	r2, r3, #12
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	429a      	cmp	r2, r3
 8003752:	d1eb      	bne.n	800372c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003754:	4b25      	ldr	r3, [pc, #148]	@ (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d20c      	bcs.n	800377c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	4b22      	ldr	r3, [pc, #136]	@ (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b20      	ldr	r3, [pc, #128]	@ (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e032      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003788:	4b19      	ldr	r3, [pc, #100]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4916      	ldr	r1, [pc, #88]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a6:	4b12      	ldr	r3, [pc, #72]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	490e      	ldr	r1, [pc, #56]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ba:	f000 f821 	bl	8003800 <HAL_RCC_GetSysClockFreq>
 80037be:	4602      	mov	r2, r0
 80037c0:	4b0b      	ldr	r3, [pc, #44]	@ (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	490a      	ldr	r1, [pc, #40]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	5ccb      	ldrb	r3, [r1, r3]
 80037ce:	fa22 f303 	lsr.w	r3, r2, r3
 80037d2:	4a09      	ldr	r2, [pc, #36]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037d6:	4b09      	ldr	r3, [pc, #36]	@ (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fd f998 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023c00 	.word	0x40023c00
 80037f0:	40023800 	.word	0x40023800
 80037f4:	080078a4 	.word	0x080078a4
 80037f8:	20000000 	.word	0x20000000
 80037fc:	20000064 	.word	0x20000064

08003800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003804:	b094      	sub	sp, #80	@ 0x50
 8003806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003818:	4b79      	ldr	r3, [pc, #484]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 030c 	and.w	r3, r3, #12
 8003820:	2b08      	cmp	r3, #8
 8003822:	d00d      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x40>
 8003824:	2b08      	cmp	r3, #8
 8003826:	f200 80e1 	bhi.w	80039ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x34>
 800382e:	2b04      	cmp	r3, #4
 8003830:	d003      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x3a>
 8003832:	e0db      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b73      	ldr	r3, [pc, #460]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003836:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003838:	e0db      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800383a:	4b73      	ldr	r3, [pc, #460]	@ (8003a08 <HAL_RCC_GetSysClockFreq+0x208>)
 800383c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800383e:	e0d8      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003840:	4b6f      	ldr	r3, [pc, #444]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003848:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800384a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d063      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003856:	4b6a      	ldr	r3, [pc, #424]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	099b      	lsrs	r3, r3, #6
 800385c:	2200      	movs	r2, #0
 800385e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003860:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003868:	633b      	str	r3, [r7, #48]	@ 0x30
 800386a:	2300      	movs	r3, #0
 800386c:	637b      	str	r3, [r7, #52]	@ 0x34
 800386e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003872:	4622      	mov	r2, r4
 8003874:	462b      	mov	r3, r5
 8003876:	f04f 0000 	mov.w	r0, #0
 800387a:	f04f 0100 	mov.w	r1, #0
 800387e:	0159      	lsls	r1, r3, #5
 8003880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003884:	0150      	lsls	r0, r2, #5
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4621      	mov	r1, r4
 800388c:	1a51      	subs	r1, r2, r1
 800388e:	6139      	str	r1, [r7, #16]
 8003890:	4629      	mov	r1, r5
 8003892:	eb63 0301 	sbc.w	r3, r3, r1
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038a4:	4659      	mov	r1, fp
 80038a6:	018b      	lsls	r3, r1, #6
 80038a8:	4651      	mov	r1, sl
 80038aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ae:	4651      	mov	r1, sl
 80038b0:	018a      	lsls	r2, r1, #6
 80038b2:	4651      	mov	r1, sl
 80038b4:	ebb2 0801 	subs.w	r8, r2, r1
 80038b8:	4659      	mov	r1, fp
 80038ba:	eb63 0901 	sbc.w	r9, r3, r1
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038d2:	4690      	mov	r8, r2
 80038d4:	4699      	mov	r9, r3
 80038d6:	4623      	mov	r3, r4
 80038d8:	eb18 0303 	adds.w	r3, r8, r3
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	462b      	mov	r3, r5
 80038e0:	eb49 0303 	adc.w	r3, r9, r3
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038f2:	4629      	mov	r1, r5
 80038f4:	024b      	lsls	r3, r1, #9
 80038f6:	4621      	mov	r1, r4
 80038f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038fc:	4621      	mov	r1, r4
 80038fe:	024a      	lsls	r2, r1, #9
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003906:	2200      	movs	r2, #0
 8003908:	62bb      	str	r3, [r7, #40]	@ 0x28
 800390a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800390c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003910:	f7fc fcb6 	bl	8000280 <__aeabi_uldivmod>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4613      	mov	r3, r2
 800391a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800391c:	e058      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391e:	4b38      	ldr	r3, [pc, #224]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	099b      	lsrs	r3, r3, #6
 8003924:	2200      	movs	r2, #0
 8003926:	4618      	mov	r0, r3
 8003928:	4611      	mov	r1, r2
 800392a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800392e:	623b      	str	r3, [r7, #32]
 8003930:	2300      	movs	r3, #0
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24
 8003934:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003938:	4642      	mov	r2, r8
 800393a:	464b      	mov	r3, r9
 800393c:	f04f 0000 	mov.w	r0, #0
 8003940:	f04f 0100 	mov.w	r1, #0
 8003944:	0159      	lsls	r1, r3, #5
 8003946:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800394a:	0150      	lsls	r0, r2, #5
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4641      	mov	r1, r8
 8003952:	ebb2 0a01 	subs.w	sl, r2, r1
 8003956:	4649      	mov	r1, r9
 8003958:	eb63 0b01 	sbc.w	fp, r3, r1
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003968:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800396c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003970:	ebb2 040a 	subs.w	r4, r2, sl
 8003974:	eb63 050b 	sbc.w	r5, r3, fp
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	00eb      	lsls	r3, r5, #3
 8003982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003986:	00e2      	lsls	r2, r4, #3
 8003988:	4614      	mov	r4, r2
 800398a:	461d      	mov	r5, r3
 800398c:	4643      	mov	r3, r8
 800398e:	18e3      	adds	r3, r4, r3
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	464b      	mov	r3, r9
 8003994:	eb45 0303 	adc.w	r3, r5, r3
 8003998:	607b      	str	r3, [r7, #4]
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039a6:	4629      	mov	r1, r5
 80039a8:	028b      	lsls	r3, r1, #10
 80039aa:	4621      	mov	r1, r4
 80039ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039b0:	4621      	mov	r1, r4
 80039b2:	028a      	lsls	r2, r1, #10
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ba:	2200      	movs	r2, #0
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	61fa      	str	r2, [r7, #28]
 80039c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c4:	f7fc fc5c 	bl	8000280 <__aeabi_uldivmod>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4613      	mov	r3, r2
 80039ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	3301      	adds	r3, #1
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80039e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039ea:	e002      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039ec:	4b05      	ldr	r3, [pc, #20]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3750      	adds	r7, #80	@ 0x50
 80039f8:	46bd      	mov	sp, r7
 80039fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800
 8003a04:	00f42400 	.word	0x00f42400
 8003a08:	007a1200 	.word	0x007a1200

08003a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a10:	4b03      	ldr	r3, [pc, #12]	@ (8003a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000000 	.word	0x20000000

08003a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a28:	f7ff fff0 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4b05      	ldr	r3, [pc, #20]	@ (8003a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	0a9b      	lsrs	r3, r3, #10
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	4903      	ldr	r1, [pc, #12]	@ (8003a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a3a:	5ccb      	ldrb	r3, [r1, r3]
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40023800 	.word	0x40023800
 8003a48:	080078b4 	.word	0x080078b4

08003a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a50:	f7ff ffdc 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	0b5b      	lsrs	r3, r3, #13
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4903      	ldr	r1, [pc, #12]	@ (8003a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	080078b4 	.word	0x080078b4

08003a74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	220f      	movs	r2, #15
 8003a82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a84:	4b12      	ldr	r3, [pc, #72]	@ (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0203 	and.w	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a90:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003aa8:	4b09      	ldr	r3, [pc, #36]	@ (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	08db      	lsrs	r3, r3, #3
 8003aae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ab6:	4b07      	ldr	r3, [pc, #28]	@ (8003ad4 <HAL_RCC_GetClockConfig+0x60>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0207 	and.w	r2, r3, #7
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	601a      	str	r2, [r3, #0]
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40023c00 	.word	0x40023c00

08003ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e041      	b.n	8003b6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd f93c 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4619      	mov	r1, r3
 8003b16:	4610      	mov	r0, r2
 8003b18:	f000 fa70 	bl	8003ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d001      	beq.n	8003b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e044      	b.n	8003c1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1e      	ldr	r2, [pc, #120]	@ (8003c28 <HAL_TIM_Base_Start_IT+0xb0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d018      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bba:	d013      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c2c <HAL_TIM_Base_Start_IT+0xb4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00e      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a19      	ldr	r2, [pc, #100]	@ (8003c30 <HAL_TIM_Base_Start_IT+0xb8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d009      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a17      	ldr	r2, [pc, #92]	@ (8003c34 <HAL_TIM_Base_Start_IT+0xbc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a16      	ldr	r2, [pc, #88]	@ (8003c38 <HAL_TIM_Base_Start_IT+0xc0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d111      	bne.n	8003c08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d010      	beq.n	8003c18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0201 	orr.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c06:	e007      	b.n	8003c18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40010000 	.word	0x40010000
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800
 8003c34:	40000c00 	.word	0x40000c00
 8003c38:	40014000 	.word	0x40014000

08003c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d020      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01b      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0202 	mvn.w	r2, #2
 8003c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f999 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003c8c:	e005      	b.n	8003c9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f98b 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f99c 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d020      	beq.n	8003cec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01b      	beq.n	8003cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0204 	mvn.w	r2, #4
 8003cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f973 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003cd8:	e005      	b.n	8003ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f965 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f976 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d020      	beq.n	8003d38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01b      	beq.n	8003d38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0208 	mvn.w	r2, #8
 8003d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f94d 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f93f 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f950 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d020      	beq.n	8003d84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01b      	beq.n	8003d84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0210 	mvn.w	r2, #16
 8003d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2208      	movs	r2, #8
 8003d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f927 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f919 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f92a 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00c      	beq.n	8003da8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d007      	beq.n	8003da8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0201 	mvn.w	r2, #1
 8003da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fc fe66 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00c      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fab0 	bl	800432c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00c      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f8fb 	bl	8003fe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00c      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0220 	mvn.w	r2, #32
 8003e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fa82 	bl	8004318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e14:	bf00      	nop
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_TIM_ConfigClockSource+0x1c>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e0b4      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x186>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e70:	d03e      	beq.n	8003ef0 <HAL_TIM_ConfigClockSource+0xd4>
 8003e72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e76:	f200 8087 	bhi.w	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e7e:	f000 8086 	beq.w	8003f8e <HAL_TIM_ConfigClockSource+0x172>
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e86:	d87f      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003e88:	2b70      	cmp	r3, #112	@ 0x70
 8003e8a:	d01a      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0xa6>
 8003e8c:	2b70      	cmp	r3, #112	@ 0x70
 8003e8e:	d87b      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003e90:	2b60      	cmp	r3, #96	@ 0x60
 8003e92:	d050      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x11a>
 8003e94:	2b60      	cmp	r3, #96	@ 0x60
 8003e96:	d877      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003e98:	2b50      	cmp	r3, #80	@ 0x50
 8003e9a:	d03c      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0xfa>
 8003e9c:	2b50      	cmp	r3, #80	@ 0x50
 8003e9e:	d873      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea0:	2b40      	cmp	r3, #64	@ 0x40
 8003ea2:	d058      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x13a>
 8003ea4:	2b40      	cmp	r3, #64	@ 0x40
 8003ea6:	d86f      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b30      	cmp	r3, #48	@ 0x30
 8003eaa:	d064      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15a>
 8003eac:	2b30      	cmp	r3, #48	@ 0x30
 8003eae:	d86b      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d060      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15a>
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d867      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d05c      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15a>
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d05a      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15a>
 8003ec0:	e062      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ed2:	f000 f993 	bl	80041fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	609a      	str	r2, [r3, #8]
      break;
 8003eee:	e04f      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f00:	f000 f97c 	bl	80041fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f12:	609a      	str	r2, [r3, #8]
      break;
 8003f14:	e03c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f22:	461a      	mov	r2, r3
 8003f24:	f000 f8f0 	bl	8004108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2150      	movs	r1, #80	@ 0x50
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 f949 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003f34:	e02c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f42:	461a      	mov	r2, r3
 8003f44:	f000 f90f 	bl	8004166 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2160      	movs	r1, #96	@ 0x60
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 f939 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003f54:	e01c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f62:	461a      	mov	r2, r3
 8003f64:	f000 f8d0 	bl	8004108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2140      	movs	r1, #64	@ 0x40
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 f929 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003f74:	e00c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f000 f920 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003f86:	e003      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8c:	e000      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a37      	ldr	r2, [pc, #220]	@ (80040ec <TIM_Base_SetConfig+0xf0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00f      	beq.n	8004034 <TIM_Base_SetConfig+0x38>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800401a:	d00b      	beq.n	8004034 <TIM_Base_SetConfig+0x38>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a34      	ldr	r2, [pc, #208]	@ (80040f0 <TIM_Base_SetConfig+0xf4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d007      	beq.n	8004034 <TIM_Base_SetConfig+0x38>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a33      	ldr	r2, [pc, #204]	@ (80040f4 <TIM_Base_SetConfig+0xf8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <TIM_Base_SetConfig+0x38>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a32      	ldr	r2, [pc, #200]	@ (80040f8 <TIM_Base_SetConfig+0xfc>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d108      	bne.n	8004046 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800403a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a28      	ldr	r2, [pc, #160]	@ (80040ec <TIM_Base_SetConfig+0xf0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d01b      	beq.n	8004086 <TIM_Base_SetConfig+0x8a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004054:	d017      	beq.n	8004086 <TIM_Base_SetConfig+0x8a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a25      	ldr	r2, [pc, #148]	@ (80040f0 <TIM_Base_SetConfig+0xf4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d013      	beq.n	8004086 <TIM_Base_SetConfig+0x8a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a24      	ldr	r2, [pc, #144]	@ (80040f4 <TIM_Base_SetConfig+0xf8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00f      	beq.n	8004086 <TIM_Base_SetConfig+0x8a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a23      	ldr	r2, [pc, #140]	@ (80040f8 <TIM_Base_SetConfig+0xfc>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00b      	beq.n	8004086 <TIM_Base_SetConfig+0x8a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a22      	ldr	r2, [pc, #136]	@ (80040fc <TIM_Base_SetConfig+0x100>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d007      	beq.n	8004086 <TIM_Base_SetConfig+0x8a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a21      	ldr	r2, [pc, #132]	@ (8004100 <TIM_Base_SetConfig+0x104>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d003      	beq.n	8004086 <TIM_Base_SetConfig+0x8a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a20      	ldr	r2, [pc, #128]	@ (8004104 <TIM_Base_SetConfig+0x108>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d108      	bne.n	8004098 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800408c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a0c      	ldr	r2, [pc, #48]	@ (80040ec <TIM_Base_SetConfig+0xf0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d103      	bne.n	80040c6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f043 0204 	orr.w	r2, r3, #4
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	601a      	str	r2, [r3, #0]
}
 80040de:	bf00      	nop
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40010000 	.word	0x40010000
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800
 80040f8:	40000c00 	.word	0x40000c00
 80040fc:	40014000 	.word	0x40014000
 8004100:	40014400 	.word	0x40014400
 8004104:	40014800 	.word	0x40014800

08004108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f023 0201 	bic.w	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f023 030a 	bic.w	r3, r3, #10
 8004144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	621a      	str	r2, [r3, #32]
}
 800415a:	bf00      	nop
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004166:	b480      	push	{r7}
 8004168:	b087      	sub	sp, #28
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	f023 0210 	bic.w	r2, r3, #16
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004190:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	031b      	lsls	r3, r3, #12
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f043 0307 	orr.w	r3, r3, #7
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	609a      	str	r2, [r3, #8]
}
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004216:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	021a      	lsls	r2, r3, #8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	431a      	orrs	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4313      	orrs	r3, r2
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	609a      	str	r2, [r3, #8]
}
 8004230:	bf00      	nop
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004250:	2302      	movs	r3, #2
 8004252:	e050      	b.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800427a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1c      	ldr	r2, [pc, #112]	@ (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d018      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a0:	d013      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a18      	ldr	r2, [pc, #96]	@ (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00e      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a16      	ldr	r2, [pc, #88]	@ (800430c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d009      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a15      	ldr	r2, [pc, #84]	@ (8004310 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d004      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a13      	ldr	r2, [pc, #76]	@ (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d10c      	bne.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40010000 	.word	0x40010000
 8004308:	40000400 	.word	0x40000400
 800430c:	40000800 	.word	0x40000800
 8004310:	40000c00 	.word	0x40000c00
 8004314:	40014000 	.word	0x40014000

08004318 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800434e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004352:	2b84      	cmp	r3, #132	@ 0x84
 8004354:	d005      	beq.n	8004362 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004356:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	3303      	adds	r3, #3
 8004360:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004362:	68fb      	ldr	r3, [r7, #12]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004376:	f3ef 8305 	mrs	r3, IPSR
 800437a:	607b      	str	r3, [r7, #4]
  return(result);
 800437c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800437e:	2b00      	cmp	r3, #0
 8004380:	bf14      	ite	ne
 8004382:	2301      	movne	r3, #1
 8004384:	2300      	moveq	r3, #0
 8004386:	b2db      	uxtb	r3, r3
}
 8004388:	4618      	mov	r0, r3
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004398:	f001 fb66 	bl	8005a68 <vTaskStartScheduler>
  
  return osOK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80043a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043a4:	b089      	sub	sp, #36	@ 0x24
 80043a6:	af04      	add	r7, sp, #16
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <osThreadCreate+0x54>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01c      	beq.n	80043f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685c      	ldr	r4, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691e      	ldr	r6, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff ffb6 	bl	8004340 <makeFreeRtosPriority>
 80043d4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043de:	9202      	str	r2, [sp, #8]
 80043e0:	9301      	str	r3, [sp, #4]
 80043e2:	9100      	str	r1, [sp, #0]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	4632      	mov	r2, r6
 80043e8:	4629      	mov	r1, r5
 80043ea:	4620      	mov	r0, r4
 80043ec:	f001 f956 	bl	800569c <xTaskCreateStatic>
 80043f0:	4603      	mov	r3, r0
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e01c      	b.n	8004430 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685c      	ldr	r4, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004402:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff ff98 	bl	8004340 <makeFreeRtosPriority>
 8004410:	4602      	mov	r2, r0
 8004412:	f107 030c 	add.w	r3, r7, #12
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	9200      	str	r2, [sp, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	4632      	mov	r2, r6
 800441e:	4629      	mov	r1, r5
 8004420:	4620      	mov	r0, r4
 8004422:	f001 f99b 	bl	800575c <xTaskCreate>
 8004426:	4603      	mov	r3, r0
 8004428:	2b01      	cmp	r3, #1
 800442a:	d001      	beq.n	8004430 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	e000      	b.n	8004432 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004430:	68fb      	ldr	r3, [r7, #12]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800443a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <osDelay+0x16>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	e000      	b.n	8004452 <osDelay+0x18>
 8004450:	2301      	movs	r3, #1
 8004452:	4618      	mov	r0, r3
 8004454:	f001 fad2 	bl	80059fc <vTaskDelay>
  
  return osOK;
 8004458:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b086      	sub	sp, #24
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	3303      	adds	r3, #3
 8004470:	f023 0303 	bic.w	r3, r3, #3
 8004474:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8004476:	2014      	movs	r0, #20
 8004478:	f002 fa78 	bl	800696c <pvPortMalloc>
 800447c:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d046      	beq.n	8004512 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2200      	movs	r2, #0
 8004496:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f002 fa65 	bl	800696c <pvPortMalloc>
 80044a2:	4602      	mov	r2, r0
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d02b      	beq.n	8004508 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	fb02 f303 	mul.w	r3, r2, r3
 80044ba:	4618      	mov	r0, r3
 80044bc:	f002 fa56 	bl	800696c <pvPortMalloc>
 80044c0:	4602      	mov	r2, r0
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d011      	beq.n	80044f2 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e008      	b.n	80044e6 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	3301      	adds	r3, #1
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d3f1      	bcc.n	80044d4 <osPoolCreate+0x72>
 80044f0:	e00f      	b.n	8004512 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f002 fb06 	bl	8006b08 <vPortFree>
        vPortFree(thePool);
 80044fc:	6978      	ldr	r0, [r7, #20]
 80044fe:	f002 fb03 	bl	8006b08 <vPortFree>
        thePool = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	e004      	b.n	8004512 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8004508:	6978      	ldr	r0, [r7, #20]
 800450a:	f002 fafd 	bl	8006b08 <vPortFree>
      thePool = NULL;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8004512:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	@ 0x28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800452c:	f7ff ff20 	bl	8004370 <inHandlerMode>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00e      	beq.n	8004554 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004536:	f3ef 8211 	mrs	r2, BASEPRI
 800453a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	617a      	str	r2, [r7, #20]
 800454c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800454e:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8004550:	627b      	str	r3, [r7, #36]	@ 0x24
 8004552:	e001      	b.n	8004558 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8004554:	f002 f8e8 	bl	8006728 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8004558:	2300      	movs	r3, #0
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	e029      	b.n	80045b2 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	4413      	add	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6892      	ldr	r2, [r2, #8]
 800456a:	fbb3 f1f2 	udiv	r1, r3, r2
 800456e:	fb01 f202 	mul.w	r2, r1, r2
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	4413      	add	r3, r2
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d113      	bne.n	80045ac <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	4413      	add	r3, r2
 800458c:	2201      	movs	r2, #1
 800458e:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4619      	mov	r1, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	fb02 f303 	mul.w	r3, r2, r3
 80045a0:	440b      	add	r3, r1
 80045a2:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	611a      	str	r2, [r3, #16]
      break;
 80045aa:	e007      	b.n	80045bc <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	3301      	adds	r3, #1
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d3d0      	bcc.n	800455e <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80045bc:	f7ff fed8 	bl	8004370 <inHandlerMode>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80045d0:	e001      	b.n	80045d6 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80045d2:	f002 f8db 	bl	800678c <vPortExitCritical>
  }
  
  return p;
 80045d6:	6a3b      	ldr	r3, [r7, #32]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3728      	adds	r7, #40	@ 0x28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <osPoolFree+0x14>
    return osErrorParameter;
 80045f0:	2380      	movs	r3, #128	@ 0x80
 80045f2:	e030      	b.n	8004656 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <osPoolFree+0x1e>
    return osErrorParameter;
 80045fa:	2380      	movs	r3, #128	@ 0x80
 80045fc:	e02b      	b.n	8004656 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d201      	bcs.n	800460c <osPoolFree+0x2c>
    return osErrorParameter;
 8004608:	2380      	movs	r3, #128	@ 0x80
 800460a:	e024      	b.n	8004656 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004620:	fb01 f202 	mul.w	r2, r1, r2
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <osPoolFree+0x4e>
    return osErrorParameter;
 800462a:	2380      	movs	r3, #128	@ 0x80
 800462c:	e013      	b.n	8004656 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	429a      	cmp	r2, r3
 8004642:	d301      	bcc.n	8004648 <osPoolFree+0x68>
    return osErrorParameter;
 8004644:	2380      	movs	r3, #128	@ 0x80
 8004646:	e006      	b.n	8004656 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004662:	b590      	push	{r4, r7, lr}
 8004664:	b085      	sub	sp, #20
 8004666:	af02      	add	r7, sp, #8
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d011      	beq.n	8004698 <osMessageCreate+0x36>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00d      	beq.n	8004698 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6859      	ldr	r1, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2400      	movs	r4, #0
 800468e:	9400      	str	r4, [sp, #0]
 8004690:	f000 fb18 	bl	8004cc4 <xQueueGenericCreateStatic>
 8004694:	4603      	mov	r3, r0
 8004696:	e008      	b.n	80046aa <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	4619      	mov	r1, r3
 80046a4:	f000 fb8b 	bl	8004dbe <xQueueGenericCreate>
 80046a8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd90      	pop	{r4, r7, pc}
	...

080046b4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <osMessagePut+0x1e>
    ticks = 1;
 80046ce:	2301      	movs	r3, #1
 80046d0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80046d2:	f7ff fe4d 	bl	8004370 <inHandlerMode>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d018      	beq.n	800470e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80046dc:	f107 0210 	add.w	r2, r7, #16
 80046e0:	f107 0108 	add.w	r1, r7, #8
 80046e4:	2300      	movs	r3, #0
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 fcc6 	bl	8005078 <xQueueGenericSendFromISR>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d001      	beq.n	80046f6 <osMessagePut+0x42>
      return osErrorOS;
 80046f2:	23ff      	movs	r3, #255	@ 0xff
 80046f4:	e018      	b.n	8004728 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d014      	beq.n	8004726 <osMessagePut+0x72>
 80046fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004730 <osMessagePut+0x7c>)
 80046fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	e00b      	b.n	8004726 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800470e:	f107 0108 	add.w	r1, r7, #8
 8004712:	2300      	movs	r3, #0
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 fbac 	bl	8004e74 <xQueueGenericSend>
 800471c:	4603      	mov	r3, r0
 800471e:	2b01      	cmp	r3, #1
 8004720:	d001      	beq.n	8004726 <osMessagePut+0x72>
      return osErrorOS;
 8004722:	23ff      	movs	r3, #255	@ 0xff
 8004724:	e000      	b.n	8004728 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	e000ed04 	.word	0xe000ed04

08004734 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004734:	b590      	push	{r4, r7, lr}
 8004736:	b08b      	sub	sp, #44	@ 0x2c
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10a      	bne.n	8004764 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800474e:	2380      	movs	r3, #128	@ 0x80
 8004750:	617b      	str	r3, [r7, #20]
    return event;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	461c      	mov	r4, r3
 8004756:	f107 0314 	add.w	r3, r7, #20
 800475a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800475e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004762:	e054      	b.n	800480e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004764:	2300      	movs	r3, #0
 8004766:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004772:	d103      	bne.n	800477c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004774:	f04f 33ff 	mov.w	r3, #4294967295
 8004778:	627b      	str	r3, [r7, #36]	@ 0x24
 800477a:	e009      	b.n	8004790 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d006      	beq.n	8004790 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <osMessageGet+0x5c>
      ticks = 1;
 800478c:	2301      	movs	r3, #1
 800478e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004790:	f7ff fdee 	bl	8004370 <inHandlerMode>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d01c      	beq.n	80047d4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800479a:	f107 0220 	add.w	r2, r7, #32
 800479e:	f107 0314 	add.w	r3, r7, #20
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	68b8      	ldr	r0, [r7, #8]
 80047a8:	f000 fde6 	bl	8005378 <xQueueReceiveFromISR>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d102      	bne.n	80047b8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80047b2:	2310      	movs	r3, #16
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	e001      	b.n	80047bc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01d      	beq.n	80047fe <osMessageGet+0xca>
 80047c2:	4b15      	ldr	r3, [pc, #84]	@ (8004818 <osMessageGet+0xe4>)
 80047c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	e014      	b.n	80047fe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80047d4:	f107 0314 	add.w	r3, r7, #20
 80047d8:	3304      	adds	r3, #4
 80047da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047dc:	4619      	mov	r1, r3
 80047de:	68b8      	ldr	r0, [r7, #8]
 80047e0:	f000 fce8 	bl	80051b4 <xQueueReceive>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d102      	bne.n	80047f0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80047ea:	2310      	movs	r3, #16
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e006      	b.n	80047fe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <osMessageGet+0xc6>
 80047f6:	2300      	movs	r3, #0
 80047f8:	e000      	b.n	80047fc <osMessageGet+0xc8>
 80047fa:	2340      	movs	r3, #64	@ 0x40
 80047fc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	461c      	mov	r4, r3
 8004802:	f107 0314 	add.w	r3, r7, #20
 8004806:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800480a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	372c      	adds	r7, #44	@ 0x2c
 8004812:	46bd      	mov	sp, r7
 8004814:	bd90      	pop	{r4, r7, pc}
 8004816:	bf00      	nop
 8004818:	e000ed04 	.word	0xe000ed04

0800481c <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800481c:	b590      	push	{r4, r7, lr}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689c      	ldr	r4, [r3, #8]
 800483a:	200c      	movs	r0, #12
 800483c:	f002 f896 	bl	800696c <pvPortMalloc>
 8004840:	4603      	mov	r3, r0
 8004842:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <osMailCreate+0x36>
    return NULL;
 800484e:	2300      	movs	r3, #0
 8004850:	e038      	b.n	80048c4 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	681c      	ldr	r4, [r3, #0]
 8004866:	2200      	movs	r2, #0
 8004868:	2104      	movs	r1, #4
 800486a:	f000 faa8 	bl	8004dbe <xQueueGenericCreate>
 800486e:	4603      	mov	r3, r0
 8004870:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d107      	bne.n	800488e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f002 f93f 	bl	8006b08 <vPortFree>
    return NULL;
 800488a:	2300      	movs	r3, #0
 800488c:	e01a      	b.n	80048c4 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	681c      	ldr	r4, [r3, #0]
 8004894:	f107 030c 	add.w	r3, r7, #12
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff fde2 	bl	8004462 <osPoolCreate>
 800489e:	4603      	mov	r3, r0
 80048a0:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d107      	bne.n	80048be <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f002 f927 	bl	8006b08 <vPortFree>
    return NULL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	e002      	b.n	80048c4 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	371c      	adds	r7, #28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd90      	pop	{r4, r7, pc}

080048cc <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <osMailAlloc+0x14>
    return NULL;
 80048dc:	2300      	movs	r3, #0
 80048de:	e006      	b.n	80048ee <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fe19 	bl	800451c <osPoolAlloc>
 80048ea:	60f8      	str	r0, [r7, #12]
  
  return p;
 80048ec:	68fb      	ldr	r3, [r7, #12]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <osMailPut+0x14>
    return osErrorParameter;
 8004908:	2380      	movs	r3, #128	@ 0x80
 800490a:	e02c      	b.n	8004966 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8004910:	f7ff fd2e 	bl	8004370 <inHandlerMode>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d018      	beq.n	800494c <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6858      	ldr	r0, [r3, #4]
 800491e:	f107 020c 	add.w	r2, r7, #12
 8004922:	4639      	mov	r1, r7
 8004924:	2300      	movs	r3, #0
 8004926:	f000 fba7 	bl	8005078 <xQueueGenericSendFromISR>
 800492a:	4603      	mov	r3, r0
 800492c:	2b01      	cmp	r3, #1
 800492e:	d001      	beq.n	8004934 <osMailPut+0x3c>
      return osErrorOS;
 8004930:	23ff      	movs	r3, #255	@ 0xff
 8004932:	e018      	b.n	8004966 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d014      	beq.n	8004964 <osMailPut+0x6c>
 800493a:	4b0d      	ldr	r3, [pc, #52]	@ (8004970 <osMailPut+0x78>)
 800493c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	e00b      	b.n	8004964 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6858      	ldr	r0, [r3, #4]
 8004950:	4639      	mov	r1, r7
 8004952:	2300      	movs	r3, #0
 8004954:	2200      	movs	r2, #0
 8004956:	f000 fa8d 	bl	8004e74 <xQueueGenericSend>
 800495a:	4603      	mov	r3, r0
 800495c:	2b01      	cmp	r3, #1
 800495e:	d001      	beq.n	8004964 <osMailPut+0x6c>
      return osErrorOS;
 8004960:	23ff      	movs	r3, #255	@ 0xff
 8004962:	e000      	b.n	8004966 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	e000ed04 	.word	0xe000ed04

08004974 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8004974:	b590      	push	{r4, r7, lr}
 8004976:	b08b      	sub	sp, #44	@ 0x2c
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800498a:	2380      	movs	r3, #128	@ 0x80
 800498c:	617b      	str	r3, [r7, #20]
    return event;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	461c      	mov	r4, r3
 8004992:	f107 0314 	add.w	r3, r7, #20
 8004996:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800499a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800499e:	e056      	b.n	8004a4e <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80049a0:	2300      	movs	r3, #0
 80049a2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d103      	bne.n	80049b8 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80049b0:	f04f 33ff 	mov.w	r3, #4294967295
 80049b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b6:	e009      	b.n	80049cc <osMailGet+0x58>
  }
  else if (millisec != 0) {
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d006      	beq.n	80049cc <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <osMailGet+0x58>
      ticks = 1;
 80049c8:	2301      	movs	r3, #1
 80049ca:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80049cc:	f7ff fcd0 	bl	8004370 <inHandlerMode>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01d      	beq.n	8004a12 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	6858      	ldr	r0, [r3, #4]
 80049da:	f107 0220 	add.w	r2, r7, #32
 80049de:	f107 0314 	add.w	r3, r7, #20
 80049e2:	3304      	adds	r3, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	f000 fcc7 	bl	8005378 <xQueueReceiveFromISR>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d102      	bne.n	80049f6 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 80049f0:	2320      	movs	r3, #32
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	e001      	b.n	80049fa <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01e      	beq.n	8004a3e <osMailGet+0xca>
 8004a00:	4b15      	ldr	r3, [pc, #84]	@ (8004a58 <osMailGet+0xe4>)
 8004a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	e015      	b.n	8004a3e <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	6858      	ldr	r0, [r3, #4]
 8004a16:	f107 0314 	add.w	r3, r7, #20
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f000 fbc8 	bl	80051b4 <xQueueReceive>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d102      	bne.n	8004a30 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8004a2a:	2320      	movs	r3, #32
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	e006      	b.n	8004a3e <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <osMailGet+0xc6>
 8004a36:	2300      	movs	r3, #0
 8004a38:	e000      	b.n	8004a3c <osMailGet+0xc8>
 8004a3a:	2340      	movs	r3, #64	@ 0x40
 8004a3c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	461c      	mov	r4, r3
 8004a42:	f107 0314 	add.w	r3, r7, #20
 8004a46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	372c      	adds	r7, #44	@ 0x2c
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd90      	pop	{r4, r7, pc}
 8004a56:	bf00      	nop
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <osMailFree+0x14>
    return osErrorParameter;
 8004a6c:	2380      	movs	r3, #128	@ 0x80
 8004a6e:	e006      	b.n	8004a7e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	6839      	ldr	r1, [r7, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff fdb2 	bl	80045e0 <osPoolFree>
 8004a7c:	4603      	mov	r3, r0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f103 0208 	add.w	r2, r3, #8
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f103 0208 	add.w	r2, r3, #8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f103 0208 	add.w	r2, r3, #8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	601a      	str	r2, [r3, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3e:	d103      	bne.n	8004b48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	e00c      	b.n	8004b62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	e002      	b.n	8004b56 <vListInsert+0x2e>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d2f6      	bcs.n	8004b50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6892      	ldr	r2, [r2, #8]
 8004bb0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6852      	ldr	r2, [r2, #4]
 8004bba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d103      	bne.n	8004bce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	1e5a      	subs	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10b      	bne.n	8004c1c <xQueueGenericReset+0x2c>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	60bb      	str	r3, [r7, #8]
}
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	e7fd      	b.n	8004c18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c1c:	f001 fd84 	bl	8006728 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c28:	68f9      	ldr	r1, [r7, #12]
 8004c2a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	441a      	add	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	68f9      	ldr	r1, [r7, #12]
 8004c50:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	441a      	add	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	22ff      	movs	r2, #255	@ 0xff
 8004c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	22ff      	movs	r2, #255	@ 0xff
 8004c68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d114      	bne.n	8004c9c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01a      	beq.n	8004cb0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3310      	adds	r3, #16
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 f94c 	bl	8005f1c <xTaskRemoveFromEventList>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d012      	beq.n	8004cb0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc0 <xQueueGenericReset+0xd0>)
 8004c8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	e009      	b.n	8004cb0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3310      	adds	r3, #16
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fef0 	bl	8004a86 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3324      	adds	r3, #36	@ 0x24
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff feeb 	bl	8004a86 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004cb0:	f001 fd6c 	bl	800678c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004cb4:	2301      	movs	r3, #1
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	e000ed04 	.word	0xe000ed04

08004cc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08e      	sub	sp, #56	@ 0x38
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10b      	bne.n	8004cf0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	e7fd      	b.n	8004cec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10b      	bne.n	8004d0e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	e7fd      	b.n	8004d0a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <xQueueGenericCreateStatic+0x56>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <xQueueGenericCreateStatic+0x5a>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <xQueueGenericCreateStatic+0x5c>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10b      	bne.n	8004d3c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	623b      	str	r3, [r7, #32]
}
 8004d36:	bf00      	nop
 8004d38:	bf00      	nop
 8004d3a:	e7fd      	b.n	8004d38 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d102      	bne.n	8004d48 <xQueueGenericCreateStatic+0x84>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <xQueueGenericCreateStatic+0x88>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <xQueueGenericCreateStatic+0x8a>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10b      	bne.n	8004d6a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	61fb      	str	r3, [r7, #28]
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop
 8004d68:	e7fd      	b.n	8004d66 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d6a:	2348      	movs	r3, #72	@ 0x48
 8004d6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b48      	cmp	r3, #72	@ 0x48
 8004d72:	d00b      	beq.n	8004d8c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	61bb      	str	r3, [r7, #24]
}
 8004d86:	bf00      	nop
 8004d88:	bf00      	nop
 8004d8a:	e7fd      	b.n	8004d88 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d8c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00d      	beq.n	8004db4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004da0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f840 	bl	8004e34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3730      	adds	r7, #48	@ 0x30
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b08a      	sub	sp, #40	@ 0x28
 8004dc2:	af02      	add	r7, sp, #8
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10b      	bne.n	8004dea <xQueueGenericCreate+0x2c>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	613b      	str	r3, [r7, #16]
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	e7fd      	b.n	8004de6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	3348      	adds	r3, #72	@ 0x48
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f001 fdb7 	bl	800696c <pvPortMalloc>
 8004dfe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d011      	beq.n	8004e2a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	3348      	adds	r3, #72	@ 0x48
 8004e0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e18:	79fa      	ldrb	r2, [r7, #7]
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f805 	bl	8004e34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e2a:	69bb      	ldr	r3, [r7, #24]
	}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3720      	adds	r7, #32
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d103      	bne.n	8004e50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e002      	b.n	8004e56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e62:	2101      	movs	r1, #1
 8004e64:	69b8      	ldr	r0, [r7, #24]
 8004e66:	f7ff fec3 	bl	8004bf0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e6a:	bf00      	nop
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08e      	sub	sp, #56	@ 0x38
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e82:	2300      	movs	r3, #0
 8004e84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <xQueueGenericSend+0x34>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	e7fd      	b.n	8004ea4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <xQueueGenericSend+0x42>
 8004eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <xQueueGenericSend+0x46>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <xQueueGenericSend+0x48>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10b      	bne.n	8004ed8 <xQueueGenericSend+0x64>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ed2:	bf00      	nop
 8004ed4:	bf00      	nop
 8004ed6:	e7fd      	b.n	8004ed4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d103      	bne.n	8004ee6 <xQueueGenericSend+0x72>
 8004ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <xQueueGenericSend+0x76>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <xQueueGenericSend+0x78>
 8004eea:	2300      	movs	r3, #0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10b      	bne.n	8004f08 <xQueueGenericSend+0x94>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	623b      	str	r3, [r7, #32]
}
 8004f02:	bf00      	nop
 8004f04:	bf00      	nop
 8004f06:	e7fd      	b.n	8004f04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f08:	f001 f9ce 	bl	80062a8 <xTaskGetSchedulerState>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <xQueueGenericSend+0xa4>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <xQueueGenericSend+0xa8>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <xQueueGenericSend+0xaa>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10b      	bne.n	8004f3a <xQueueGenericSend+0xc6>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	61fb      	str	r3, [r7, #28]
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	e7fd      	b.n	8004f36 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f3a:	f001 fbf5 	bl	8006728 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d302      	bcc.n	8004f50 <xQueueGenericSend+0xdc>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d129      	bne.n	8004fa4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f56:	f000 fa91 	bl	800547c <prvCopyDataToQueue>
 8004f5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d010      	beq.n	8004f86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	3324      	adds	r3, #36	@ 0x24
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 ffd7 	bl	8005f1c <xTaskRemoveFromEventList>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d013      	beq.n	8004f9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f74:	4b3f      	ldr	r3, [pc, #252]	@ (8005074 <xQueueGenericSend+0x200>)
 8004f76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	e00a      	b.n	8004f9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f8c:	4b39      	ldr	r3, [pc, #228]	@ (8005074 <xQueueGenericSend+0x200>)
 8004f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f9c:	f001 fbf6 	bl	800678c <vPortExitCritical>
				return pdPASS;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e063      	b.n	800506c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d103      	bne.n	8004fb2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004faa:	f001 fbef 	bl	800678c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e05c      	b.n	800506c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d106      	bne.n	8004fc6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fb8:	f107 0314 	add.w	r3, r7, #20
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 f811 	bl	8005fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fc6:	f001 fbe1 	bl	800678c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fca:	f000 fdb7 	bl	8005b3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fce:	f001 fbab 	bl	8006728 <vPortEnterCritical>
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fd8:	b25b      	sxtb	r3, r3
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fde:	d103      	bne.n	8004fe8 <xQueueGenericSend+0x174>
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fee:	b25b      	sxtb	r3, r3
 8004ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff4:	d103      	bne.n	8004ffe <xQueueGenericSend+0x18a>
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ffe:	f001 fbc5 	bl	800678c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005002:	1d3a      	adds	r2, r7, #4
 8005004:	f107 0314 	add.w	r3, r7, #20
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f001 f800 	bl	8006010 <xTaskCheckForTimeOut>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d124      	bne.n	8005060 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005016:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005018:	f000 fb28 	bl	800566c <prvIsQueueFull>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d018      	beq.n	8005054 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005024:	3310      	adds	r3, #16
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	4611      	mov	r1, r2
 800502a:	4618      	mov	r0, r3
 800502c:	f000 ff50 	bl	8005ed0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005030:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005032:	f000 fab3 	bl	800559c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005036:	f000 fd8f 	bl	8005b58 <xTaskResumeAll>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	f47f af7c 	bne.w	8004f3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005042:	4b0c      	ldr	r3, [pc, #48]	@ (8005074 <xQueueGenericSend+0x200>)
 8005044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	e772      	b.n	8004f3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005054:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005056:	f000 faa1 	bl	800559c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800505a:	f000 fd7d 	bl	8005b58 <xTaskResumeAll>
 800505e:	e76c      	b.n	8004f3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005060:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005062:	f000 fa9b 	bl	800559c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005066:	f000 fd77 	bl	8005b58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800506a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800506c:	4618      	mov	r0, r3
 800506e:	3738      	adds	r7, #56	@ 0x38
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	e000ed04 	.word	0xe000ed04

08005078 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b090      	sub	sp, #64	@ 0x40
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800508a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10b      	bne.n	80050a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80050a2:	bf00      	nop
 80050a4:	bf00      	nop
 80050a6:	e7fd      	b.n	80050a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d103      	bne.n	80050b6 <xQueueGenericSendFromISR+0x3e>
 80050ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <xQueueGenericSendFromISR+0x42>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <xQueueGenericSendFromISR+0x44>
 80050ba:	2300      	movs	r3, #0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10b      	bne.n	80050d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050d2:	bf00      	nop
 80050d4:	bf00      	nop
 80050d6:	e7fd      	b.n	80050d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d103      	bne.n	80050e6 <xQueueGenericSendFromISR+0x6e>
 80050de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <xQueueGenericSendFromISR+0x72>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <xQueueGenericSendFromISR+0x74>
 80050ea:	2300      	movs	r3, #0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10b      	bne.n	8005108 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	623b      	str	r3, [r7, #32]
}
 8005102:	bf00      	nop
 8005104:	bf00      	nop
 8005106:	e7fd      	b.n	8005104 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005108:	f001 fbee 	bl	80068e8 <vPortValidateInterruptPriority>
	__asm volatile
 800510c:	f3ef 8211 	mrs	r2, BASEPRI
 8005110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	61fa      	str	r2, [r7, #28]
 8005122:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005124:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005126:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800512c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005130:	429a      	cmp	r2, r3
 8005132:	d302      	bcc.n	800513a <xQueueGenericSendFromISR+0xc2>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d12f      	bne.n	800519a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800513a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005140:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005148:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005150:	f000 f994 	bl	800547c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005154:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d112      	bne.n	8005184 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800515e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005162:	2b00      	cmp	r3, #0
 8005164:	d016      	beq.n	8005194 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005168:	3324      	adds	r3, #36	@ 0x24
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fed6 	bl	8005f1c <xTaskRemoveFromEventList>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00e      	beq.n	8005194 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00b      	beq.n	8005194 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	e007      	b.n	8005194 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005184:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005188:	3301      	adds	r3, #1
 800518a:	b2db      	uxtb	r3, r3
 800518c:	b25a      	sxtb	r2, r3
 800518e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005194:	2301      	movs	r3, #1
 8005196:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005198:	e001      	b.n	800519e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800519a:	2300      	movs	r3, #0
 800519c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800519e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a0:	617b      	str	r3, [r7, #20]
	__asm volatile
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f383 8811 	msr	BASEPRI, r3
}
 80051a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3740      	adds	r7, #64	@ 0x40
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08c      	sub	sp, #48	@ 0x30
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051c0:	2300      	movs	r3, #0
 80051c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10b      	bne.n	80051e6 <xQueueReceive+0x32>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	623b      	str	r3, [r7, #32]
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	e7fd      	b.n	80051e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d103      	bne.n	80051f4 <xQueueReceive+0x40>
 80051ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <xQueueReceive+0x44>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <xQueueReceive+0x46>
 80051f8:	2300      	movs	r3, #0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10b      	bne.n	8005216 <xQueueReceive+0x62>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	61fb      	str	r3, [r7, #28]
}
 8005210:	bf00      	nop
 8005212:	bf00      	nop
 8005214:	e7fd      	b.n	8005212 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005216:	f001 f847 	bl	80062a8 <xTaskGetSchedulerState>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <xQueueReceive+0x72>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <xQueueReceive+0x76>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <xQueueReceive+0x78>
 800522a:	2300      	movs	r3, #0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10b      	bne.n	8005248 <xQueueReceive+0x94>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	61bb      	str	r3, [r7, #24]
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	e7fd      	b.n	8005244 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005248:	f001 fa6e 	bl	8006728 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800524c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005250:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01f      	beq.n	8005298 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800525c:	f000 f978 	bl	8005550 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	1e5a      	subs	r2, r3, #1
 8005264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005266:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00f      	beq.n	8005290 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005272:	3310      	adds	r3, #16
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fe51 	bl	8005f1c <xTaskRemoveFromEventList>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d007      	beq.n	8005290 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005280:	4b3c      	ldr	r3, [pc, #240]	@ (8005374 <xQueueReceive+0x1c0>)
 8005282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005290:	f001 fa7c 	bl	800678c <vPortExitCritical>
				return pdPASS;
 8005294:	2301      	movs	r3, #1
 8005296:	e069      	b.n	800536c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d103      	bne.n	80052a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800529e:	f001 fa75 	bl	800678c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052a2:	2300      	movs	r3, #0
 80052a4:	e062      	b.n	800536c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052ac:	f107 0310 	add.w	r3, r7, #16
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fe97 	bl	8005fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052b6:	2301      	movs	r3, #1
 80052b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052ba:	f001 fa67 	bl	800678c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052be:	f000 fc3d 	bl	8005b3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052c2:	f001 fa31 	bl	8006728 <vPortEnterCritical>
 80052c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052cc:	b25b      	sxtb	r3, r3
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d2:	d103      	bne.n	80052dc <xQueueReceive+0x128>
 80052d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052e2:	b25b      	sxtb	r3, r3
 80052e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e8:	d103      	bne.n	80052f2 <xQueueReceive+0x13e>
 80052ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052f2:	f001 fa4b 	bl	800678c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052f6:	1d3a      	adds	r2, r7, #4
 80052f8:	f107 0310 	add.w	r3, r7, #16
 80052fc:	4611      	mov	r1, r2
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fe86 	bl	8006010 <xTaskCheckForTimeOut>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d123      	bne.n	8005352 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800530a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800530c:	f000 f998 	bl	8005640 <prvIsQueueEmpty>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d017      	beq.n	8005346 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005318:	3324      	adds	r3, #36	@ 0x24
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	4611      	mov	r1, r2
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fdd6 	bl	8005ed0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005324:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005326:	f000 f939 	bl	800559c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800532a:	f000 fc15 	bl	8005b58 <xTaskResumeAll>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d189      	bne.n	8005248 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005334:	4b0f      	ldr	r3, [pc, #60]	@ (8005374 <xQueueReceive+0x1c0>)
 8005336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	e780      	b.n	8005248 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005348:	f000 f928 	bl	800559c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800534c:	f000 fc04 	bl	8005b58 <xTaskResumeAll>
 8005350:	e77a      	b.n	8005248 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005354:	f000 f922 	bl	800559c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005358:	f000 fbfe 	bl	8005b58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800535c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800535e:	f000 f96f 	bl	8005640 <prvIsQueueEmpty>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	f43f af6f 	beq.w	8005248 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800536a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800536c:	4618      	mov	r0, r3
 800536e:	3730      	adds	r7, #48	@ 0x30
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	e000ed04 	.word	0xe000ed04

08005378 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08e      	sub	sp, #56	@ 0x38
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10b      	bne.n	80053a6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	623b      	str	r3, [r7, #32]
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	e7fd      	b.n	80053a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d103      	bne.n	80053b4 <xQueueReceiveFromISR+0x3c>
 80053ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <xQueueReceiveFromISR+0x40>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <xQueueReceiveFromISR+0x42>
 80053b8:	2300      	movs	r3, #0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	61fb      	str	r3, [r7, #28]
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	e7fd      	b.n	80053d2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053d6:	f001 fa87 	bl	80068e8 <vPortValidateInterruptPriority>
	__asm volatile
 80053da:	f3ef 8211 	mrs	r2, BASEPRI
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	61ba      	str	r2, [r7, #24]
 80053f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80053f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d02f      	beq.n	8005462 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005404:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005410:	f000 f89e 	bl	8005550 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	1e5a      	subs	r2, r3, #1
 8005418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800541c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005424:	d112      	bne.n	800544c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d016      	beq.n	800545c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	3310      	adds	r3, #16
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fd72 	bl	8005f1c <xTaskRemoveFromEventList>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00e      	beq.n	800545c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00b      	beq.n	800545c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	e007      	b.n	800545c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800544c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005450:	3301      	adds	r3, #1
 8005452:	b2db      	uxtb	r3, r3
 8005454:	b25a      	sxtb	r2, r3
 8005456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800545c:	2301      	movs	r3, #1
 800545e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005460:	e001      	b.n	8005466 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005462:	2300      	movs	r3, #0
 8005464:	637b      	str	r3, [r7, #52]	@ 0x34
 8005466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005468:	613b      	str	r3, [r7, #16]
	__asm volatile
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f383 8811 	msr	BASEPRI, r3
}
 8005470:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005474:	4618      	mov	r0, r3
 8005476:	3738      	adds	r7, #56	@ 0x38
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005490:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10d      	bne.n	80054b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d14d      	bne.n	800553e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 ff1c 	bl	80062e4 <xTaskPriorityDisinherit>
 80054ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	609a      	str	r2, [r3, #8]
 80054b4:	e043      	b.n	800553e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d119      	bne.n	80054f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6858      	ldr	r0, [r3, #4]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c4:	461a      	mov	r2, r3
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	f001 fd02 	bl	8006ed0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d4:	441a      	add	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d32b      	bcc.n	800553e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	605a      	str	r2, [r3, #4]
 80054ee:	e026      	b.n	800553e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68d8      	ldr	r0, [r3, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f8:	461a      	mov	r2, r3
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	f001 fce8 	bl	8006ed0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005508:	425b      	negs	r3, r3
 800550a:	441a      	add	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	429a      	cmp	r2, r3
 800551a:	d207      	bcs.n	800552c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005524:	425b      	negs	r3, r3
 8005526:	441a      	add	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d105      	bne.n	800553e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	3b01      	subs	r3, #1
 800553c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005546:	697b      	ldr	r3, [r7, #20]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d018      	beq.n	8005594 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556a:	441a      	add	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	429a      	cmp	r2, r3
 800557a:	d303      	bcc.n	8005584 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68d9      	ldr	r1, [r3, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558c:	461a      	mov	r2, r3
 800558e:	6838      	ldr	r0, [r7, #0]
 8005590:	f001 fc9e 	bl	8006ed0 <memcpy>
	}
}
 8005594:	bf00      	nop
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80055a4:	f001 f8c0 	bl	8006728 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055b0:	e011      	b.n	80055d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d012      	beq.n	80055e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3324      	adds	r3, #36	@ 0x24
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fcac 	bl	8005f1c <xTaskRemoveFromEventList>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055ca:	f000 fd85 	bl	80060d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	dce9      	bgt.n	80055b2 <prvUnlockQueue+0x16>
 80055de:	e000      	b.n	80055e2 <prvUnlockQueue+0x46>
					break;
 80055e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	22ff      	movs	r2, #255	@ 0xff
 80055e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80055ea:	f001 f8cf 	bl	800678c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055ee:	f001 f89b 	bl	8006728 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055fa:	e011      	b.n	8005620 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d012      	beq.n	800562a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3310      	adds	r3, #16
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fc87 	bl	8005f1c <xTaskRemoveFromEventList>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005614:	f000 fd60 	bl	80060d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005618:	7bbb      	ldrb	r3, [r7, #14]
 800561a:	3b01      	subs	r3, #1
 800561c:	b2db      	uxtb	r3, r3
 800561e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005620:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005624:	2b00      	cmp	r3, #0
 8005626:	dce9      	bgt.n	80055fc <prvUnlockQueue+0x60>
 8005628:	e000      	b.n	800562c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800562a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	22ff      	movs	r2, #255	@ 0xff
 8005630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005634:	f001 f8aa 	bl	800678c <vPortExitCritical>
}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005648:	f001 f86e 	bl	8006728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005654:	2301      	movs	r3, #1
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	e001      	b.n	800565e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800565a:	2300      	movs	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800565e:	f001 f895 	bl	800678c <vPortExitCritical>

	return xReturn;
 8005662:	68fb      	ldr	r3, [r7, #12]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005674:	f001 f858 	bl	8006728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005680:	429a      	cmp	r2, r3
 8005682:	d102      	bne.n	800568a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005684:	2301      	movs	r3, #1
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	e001      	b.n	800568e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800568e:	f001 f87d 	bl	800678c <vPortExitCritical>

	return xReturn;
 8005692:	68fb      	ldr	r3, [r7, #12]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08e      	sub	sp, #56	@ 0x38
 80056a0:	af04      	add	r7, sp, #16
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	623b      	str	r3, [r7, #32]
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	e7fd      	b.n	80056c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	61fb      	str	r3, [r7, #28]
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop
 80056e4:	e7fd      	b.n	80056e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056e6:	23a0      	movs	r3, #160	@ 0xa0
 80056e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80056ee:	d00b      	beq.n	8005708 <xTaskCreateStatic+0x6c>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	61bb      	str	r3, [r7, #24]
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	e7fd      	b.n	8005704 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005708:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800570a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01e      	beq.n	800574e <xTaskCreateStatic+0xb2>
 8005710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005712:	2b00      	cmp	r3, #0
 8005714:	d01b      	beq.n	800574e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005718:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800571e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	2202      	movs	r2, #2
 8005724:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005728:	2300      	movs	r3, #0
 800572a:	9303      	str	r3, [sp, #12]
 800572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572e:	9302      	str	r3, [sp, #8]
 8005730:	f107 0314 	add.w	r3, r7, #20
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f851 	bl	80057e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005746:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005748:	f000 f8ee 	bl	8005928 <prvAddNewTaskToReadyList>
 800574c:	e001      	b.n	8005752 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005752:	697b      	ldr	r3, [r7, #20]
	}
 8005754:	4618      	mov	r0, r3
 8005756:	3728      	adds	r7, #40	@ 0x28
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08c      	sub	sp, #48	@ 0x30
 8005760:	af04      	add	r7, sp, #16
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	4613      	mov	r3, r2
 800576a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800576c:	88fb      	ldrh	r3, [r7, #6]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4618      	mov	r0, r3
 8005772:	f001 f8fb 	bl	800696c <pvPortMalloc>
 8005776:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00e      	beq.n	800579c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800577e:	20a0      	movs	r0, #160	@ 0xa0
 8005780:	f001 f8f4 	bl	800696c <pvPortMalloc>
 8005784:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	631a      	str	r2, [r3, #48]	@ 0x30
 8005792:	e005      	b.n	80057a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005794:	6978      	ldr	r0, [r7, #20]
 8005796:	f001 f9b7 	bl	8006b08 <vPortFree>
 800579a:	e001      	b.n	80057a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800579c:	2300      	movs	r3, #0
 800579e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d017      	beq.n	80057d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057ae:	88fa      	ldrh	r2, [r7, #6]
 80057b0:	2300      	movs	r3, #0
 80057b2:	9303      	str	r3, [sp, #12]
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	9302      	str	r3, [sp, #8]
 80057b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f80f 	bl	80057e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057ca:	69f8      	ldr	r0, [r7, #28]
 80057cc:	f000 f8ac 	bl	8005928 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057d0:	2301      	movs	r3, #1
 80057d2:	61bb      	str	r3, [r7, #24]
 80057d4:	e002      	b.n	80057dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057d6:	f04f 33ff 	mov.w	r3, #4294967295
 80057da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057dc:	69bb      	ldr	r3, [r7, #24]
	}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005800:	3b01      	subs	r3, #1
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	f023 0307 	bic.w	r3, r3, #7
 800580e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00b      	beq.n	8005832 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	617b      	str	r3, [r7, #20]
}
 800582c:	bf00      	nop
 800582e:	bf00      	nop
 8005830:	e7fd      	b.n	800582e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01f      	beq.n	8005878 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005838:	2300      	movs	r3, #0
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	e012      	b.n	8005864 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	4413      	add	r3, r2
 8005844:	7819      	ldrb	r1, [r3, #0]
 8005846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	4413      	add	r3, r2
 800584c:	3334      	adds	r3, #52	@ 0x34
 800584e:	460a      	mov	r2, r1
 8005850:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	4413      	add	r3, r2
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d006      	beq.n	800586c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3301      	adds	r3, #1
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2b0f      	cmp	r3, #15
 8005868:	d9e9      	bls.n	800583e <prvInitialiseNewTask+0x56>
 800586a:	e000      	b.n	800586e <prvInitialiseNewTask+0x86>
			{
				break;
 800586c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800586e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005876:	e003      	b.n	8005880 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005882:	2b06      	cmp	r3, #6
 8005884:	d901      	bls.n	800588a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005886:	2306      	movs	r3, #6
 8005888:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800588e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005894:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005898:	2200      	movs	r2, #0
 800589a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589e:	3304      	adds	r3, #4
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff f910 	bl	8004ac6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a8:	3318      	adds	r3, #24
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff f90b 	bl	8004ac6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b8:	f1c3 0207 	rsb	r2, r3, #7
 80058bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c8:	2200      	movs	r2, #0
 80058ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80058d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d8:	334c      	adds	r3, #76	@ 0x4c
 80058da:	224c      	movs	r2, #76	@ 0x4c
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f001 fa64 	bl	8006dac <memset>
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	4a0d      	ldr	r2, [pc, #52]	@ (800591c <prvInitialiseNewTask+0x134>)
 80058e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80058ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005920 <prvInitialiseNewTask+0x138>)
 80058ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80058f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005924 <prvInitialiseNewTask+0x13c>)
 80058f4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	68f9      	ldr	r1, [r7, #12]
 80058fa:	69b8      	ldr	r0, [r7, #24]
 80058fc:	f000 fde0 	bl	80064c0 <pxPortInitialiseStack>
 8005900:	4602      	mov	r2, r0
 8005902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005904:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800590c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800590e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005912:	bf00      	nop
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	2000427c 	.word	0x2000427c
 8005920:	200042e4 	.word	0x200042e4
 8005924:	2000434c 	.word	0x2000434c

08005928 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005930:	f000 fefa 	bl	8006728 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005934:	4b2a      	ldr	r3, [pc, #168]	@ (80059e0 <prvAddNewTaskToReadyList+0xb8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3301      	adds	r3, #1
 800593a:	4a29      	ldr	r2, [pc, #164]	@ (80059e0 <prvAddNewTaskToReadyList+0xb8>)
 800593c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800593e:	4b29      	ldr	r3, [pc, #164]	@ (80059e4 <prvAddNewTaskToReadyList+0xbc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005946:	4a27      	ldr	r2, [pc, #156]	@ (80059e4 <prvAddNewTaskToReadyList+0xbc>)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800594c:	4b24      	ldr	r3, [pc, #144]	@ (80059e0 <prvAddNewTaskToReadyList+0xb8>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d110      	bne.n	8005976 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005954:	f000 fbe4 	bl	8006120 <prvInitialiseTaskLists>
 8005958:	e00d      	b.n	8005976 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800595a:	4b23      	ldr	r3, [pc, #140]	@ (80059e8 <prvAddNewTaskToReadyList+0xc0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005962:	4b20      	ldr	r3, [pc, #128]	@ (80059e4 <prvAddNewTaskToReadyList+0xbc>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596c:	429a      	cmp	r2, r3
 800596e:	d802      	bhi.n	8005976 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005970:	4a1c      	ldr	r2, [pc, #112]	@ (80059e4 <prvAddNewTaskToReadyList+0xbc>)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005976:	4b1d      	ldr	r3, [pc, #116]	@ (80059ec <prvAddNewTaskToReadyList+0xc4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3301      	adds	r3, #1
 800597c:	4a1b      	ldr	r2, [pc, #108]	@ (80059ec <prvAddNewTaskToReadyList+0xc4>)
 800597e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005984:	2201      	movs	r2, #1
 8005986:	409a      	lsls	r2, r3
 8005988:	4b19      	ldr	r3, [pc, #100]	@ (80059f0 <prvAddNewTaskToReadyList+0xc8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4313      	orrs	r3, r2
 800598e:	4a18      	ldr	r2, [pc, #96]	@ (80059f0 <prvAddNewTaskToReadyList+0xc8>)
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4a15      	ldr	r2, [pc, #84]	@ (80059f4 <prvAddNewTaskToReadyList+0xcc>)
 80059a0:	441a      	add	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f7ff f899 	bl	8004ae0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059ae:	f000 feed 	bl	800678c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059b2:	4b0d      	ldr	r3, [pc, #52]	@ (80059e8 <prvAddNewTaskToReadyList+0xc0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00e      	beq.n	80059d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059ba:	4b0a      	ldr	r3, [pc, #40]	@ (80059e4 <prvAddNewTaskToReadyList+0xbc>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d207      	bcs.n	80059d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059c8:	4b0b      	ldr	r3, [pc, #44]	@ (80059f8 <prvAddNewTaskToReadyList+0xd0>)
 80059ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059d8:	bf00      	nop
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20000628 	.word	0x20000628
 80059e4:	20000528 	.word	0x20000528
 80059e8:	20000634 	.word	0x20000634
 80059ec:	20000644 	.word	0x20000644
 80059f0:	20000630 	.word	0x20000630
 80059f4:	2000052c 	.word	0x2000052c
 80059f8:	e000ed04 	.word	0xe000ed04

080059fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d018      	beq.n	8005a40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a0e:	4b14      	ldr	r3, [pc, #80]	@ (8005a60 <vTaskDelay+0x64>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00b      	beq.n	8005a2e <vTaskDelay+0x32>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	60bb      	str	r3, [r7, #8]
}
 8005a28:	bf00      	nop
 8005a2a:	bf00      	nop
 8005a2c:	e7fd      	b.n	8005a2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a2e:	f000 f885 	bl	8005b3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a32:	2100      	movs	r1, #0
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fcdd 	bl	80063f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a3a:	f000 f88d 	bl	8005b58 <xTaskResumeAll>
 8005a3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d107      	bne.n	8005a56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005a46:	4b07      	ldr	r3, [pc, #28]	@ (8005a64 <vTaskDelay+0x68>)
 8005a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000650 	.word	0x20000650
 8005a64:	e000ed04 	.word	0xe000ed04

08005a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	@ 0x28
 8005a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a76:	463a      	mov	r2, r7
 8005a78:	1d39      	adds	r1, r7, #4
 8005a7a:	f107 0308 	add.w	r3, r7, #8
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fa fd94 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	9202      	str	r2, [sp, #8]
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	2300      	movs	r3, #0
 8005a94:	460a      	mov	r2, r1
 8005a96:	4921      	ldr	r1, [pc, #132]	@ (8005b1c <vTaskStartScheduler+0xb4>)
 8005a98:	4821      	ldr	r0, [pc, #132]	@ (8005b20 <vTaskStartScheduler+0xb8>)
 8005a9a:	f7ff fdff 	bl	800569c <xTaskCreateStatic>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4a20      	ldr	r2, [pc, #128]	@ (8005b24 <vTaskStartScheduler+0xbc>)
 8005aa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8005b24 <vTaskStartScheduler+0xbc>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005aac:	2301      	movs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e001      	b.n	8005ab6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d11b      	bne.n	8005af4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	613b      	str	r3, [r7, #16]
}
 8005ace:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ad0:	4b15      	ldr	r3, [pc, #84]	@ (8005b28 <vTaskStartScheduler+0xc0>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	334c      	adds	r3, #76	@ 0x4c
 8005ad6:	4a15      	ldr	r2, [pc, #84]	@ (8005b2c <vTaskStartScheduler+0xc4>)
 8005ad8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ada:	4b15      	ldr	r3, [pc, #84]	@ (8005b30 <vTaskStartScheduler+0xc8>)
 8005adc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ae2:	4b14      	ldr	r3, [pc, #80]	@ (8005b34 <vTaskStartScheduler+0xcc>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ae8:	4b13      	ldr	r3, [pc, #76]	@ (8005b38 <vTaskStartScheduler+0xd0>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005aee:	f000 fd77 	bl	80065e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005af2:	e00f      	b.n	8005b14 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	d10b      	bne.n	8005b14 <vTaskStartScheduler+0xac>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	60fb      	str	r3, [r7, #12]
}
 8005b0e:	bf00      	nop
 8005b10:	bf00      	nop
 8005b12:	e7fd      	b.n	8005b10 <vTaskStartScheduler+0xa8>
}
 8005b14:	bf00      	nop
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	08007884 	.word	0x08007884
 8005b20:	080060f1 	.word	0x080060f1
 8005b24:	2000064c 	.word	0x2000064c
 8005b28:	20000528 	.word	0x20000528
 8005b2c:	20000070 	.word	0x20000070
 8005b30:	20000648 	.word	0x20000648
 8005b34:	20000634 	.word	0x20000634
 8005b38:	2000062c 	.word	0x2000062c

08005b3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b40:	4b04      	ldr	r3, [pc, #16]	@ (8005b54 <vTaskSuspendAll+0x18>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3301      	adds	r3, #1
 8005b46:	4a03      	ldr	r2, [pc, #12]	@ (8005b54 <vTaskSuspendAll+0x18>)
 8005b48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b4a:	bf00      	nop
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	20000650 	.word	0x20000650

08005b58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b66:	4b42      	ldr	r3, [pc, #264]	@ (8005c70 <xTaskResumeAll+0x118>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10b      	bne.n	8005b86 <xTaskResumeAll+0x2e>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	603b      	str	r3, [r7, #0]
}
 8005b80:	bf00      	nop
 8005b82:	bf00      	nop
 8005b84:	e7fd      	b.n	8005b82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b86:	f000 fdcf 	bl	8006728 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b8a:	4b39      	ldr	r3, [pc, #228]	@ (8005c70 <xTaskResumeAll+0x118>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	4a37      	ldr	r2, [pc, #220]	@ (8005c70 <xTaskResumeAll+0x118>)
 8005b92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b94:	4b36      	ldr	r3, [pc, #216]	@ (8005c70 <xTaskResumeAll+0x118>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d161      	bne.n	8005c60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b9c:	4b35      	ldr	r3, [pc, #212]	@ (8005c74 <xTaskResumeAll+0x11c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d05d      	beq.n	8005c60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ba4:	e02e      	b.n	8005c04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba6:	4b34      	ldr	r3, [pc, #208]	@ (8005c78 <xTaskResumeAll+0x120>)
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3318      	adds	r3, #24
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fe fff1 	bl	8004b9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fe ffec 	bl	8004b9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	409a      	lsls	r2, r3
 8005bca:	4b2c      	ldr	r3, [pc, #176]	@ (8005c7c <xTaskResumeAll+0x124>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8005c7c <xTaskResumeAll+0x124>)
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4a27      	ldr	r2, [pc, #156]	@ (8005c80 <xTaskResumeAll+0x128>)
 8005be2:	441a      	add	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4619      	mov	r1, r3
 8005bea:	4610      	mov	r0, r2
 8005bec:	f7fe ff78 	bl	8004ae0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf4:	4b23      	ldr	r3, [pc, #140]	@ (8005c84 <xTaskResumeAll+0x12c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d302      	bcc.n	8005c04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005bfe:	4b22      	ldr	r3, [pc, #136]	@ (8005c88 <xTaskResumeAll+0x130>)
 8005c00:	2201      	movs	r2, #1
 8005c02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c04:	4b1c      	ldr	r3, [pc, #112]	@ (8005c78 <xTaskResumeAll+0x120>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1cc      	bne.n	8005ba6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c12:	f000 fb29 	bl	8006268 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c16:	4b1d      	ldr	r3, [pc, #116]	@ (8005c8c <xTaskResumeAll+0x134>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d010      	beq.n	8005c44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c22:	f000 f837 	bl	8005c94 <xTaskIncrementTick>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c2c:	4b16      	ldr	r3, [pc, #88]	@ (8005c88 <xTaskResumeAll+0x130>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f1      	bne.n	8005c22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c3e:	4b13      	ldr	r3, [pc, #76]	@ (8005c8c <xTaskResumeAll+0x134>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c44:	4b10      	ldr	r3, [pc, #64]	@ (8005c88 <xTaskResumeAll+0x130>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d009      	beq.n	8005c60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c50:	4b0f      	ldr	r3, [pc, #60]	@ (8005c90 <xTaskResumeAll+0x138>)
 8005c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c60:	f000 fd94 	bl	800678c <vPortExitCritical>

	return xAlreadyYielded;
 8005c64:	68bb      	ldr	r3, [r7, #8]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20000650 	.word	0x20000650
 8005c74:	20000628 	.word	0x20000628
 8005c78:	200005e8 	.word	0x200005e8
 8005c7c:	20000630 	.word	0x20000630
 8005c80:	2000052c 	.word	0x2000052c
 8005c84:	20000528 	.word	0x20000528
 8005c88:	2000063c 	.word	0x2000063c
 8005c8c:	20000638 	.word	0x20000638
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8005ddc <xTaskIncrementTick+0x148>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f040 808f 	bne.w	8005dc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8005de0 <xTaskIncrementTick+0x14c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3301      	adds	r3, #1
 8005cae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8005de0 <xTaskIncrementTick+0x14c>)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d121      	bne.n	8005d00 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cbc:	4b49      	ldr	r3, [pc, #292]	@ (8005de4 <xTaskIncrementTick+0x150>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00b      	beq.n	8005cde <xTaskIncrementTick+0x4a>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	603b      	str	r3, [r7, #0]
}
 8005cd8:	bf00      	nop
 8005cda:	bf00      	nop
 8005cdc:	e7fd      	b.n	8005cda <xTaskIncrementTick+0x46>
 8005cde:	4b41      	ldr	r3, [pc, #260]	@ (8005de4 <xTaskIncrementTick+0x150>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	4b40      	ldr	r3, [pc, #256]	@ (8005de8 <xTaskIncrementTick+0x154>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a3e      	ldr	r2, [pc, #248]	@ (8005de4 <xTaskIncrementTick+0x150>)
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	4a3e      	ldr	r2, [pc, #248]	@ (8005de8 <xTaskIncrementTick+0x154>)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8005dec <xTaskIncrementTick+0x158>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8005dec <xTaskIncrementTick+0x158>)
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	f000 fab4 	bl	8006268 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d00:	4b3b      	ldr	r3, [pc, #236]	@ (8005df0 <xTaskIncrementTick+0x15c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d348      	bcc.n	8005d9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d0a:	4b36      	ldr	r3, [pc, #216]	@ (8005de4 <xTaskIncrementTick+0x150>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d14:	4b36      	ldr	r3, [pc, #216]	@ (8005df0 <xTaskIncrementTick+0x15c>)
 8005d16:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1a:	601a      	str	r2, [r3, #0]
					break;
 8005d1c:	e03e      	b.n	8005d9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d1e:	4b31      	ldr	r3, [pc, #196]	@ (8005de4 <xTaskIncrementTick+0x150>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d203      	bcs.n	8005d3e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d36:	4a2e      	ldr	r2, [pc, #184]	@ (8005df0 <xTaskIncrementTick+0x15c>)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d3c:	e02e      	b.n	8005d9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	3304      	adds	r3, #4
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fe ff29 	bl	8004b9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	3318      	adds	r3, #24
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fe ff20 	bl	8004b9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5e:	2201      	movs	r2, #1
 8005d60:	409a      	lsls	r2, r3
 8005d62:	4b24      	ldr	r3, [pc, #144]	@ (8005df4 <xTaskIncrementTick+0x160>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	4a22      	ldr	r2, [pc, #136]	@ (8005df4 <xTaskIncrementTick+0x160>)
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4a1f      	ldr	r2, [pc, #124]	@ (8005df8 <xTaskIncrementTick+0x164>)
 8005d7a:	441a      	add	r2, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	4619      	mov	r1, r3
 8005d82:	4610      	mov	r0, r2
 8005d84:	f7fe feac 	bl	8004ae0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dfc <xTaskIncrementTick+0x168>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d3b9      	bcc.n	8005d0a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005d96:	2301      	movs	r3, #1
 8005d98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d9a:	e7b6      	b.n	8005d0a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d9c:	4b17      	ldr	r3, [pc, #92]	@ (8005dfc <xTaskIncrementTick+0x168>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da2:	4915      	ldr	r1, [pc, #84]	@ (8005df8 <xTaskIncrementTick+0x164>)
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d901      	bls.n	8005db8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005db4:	2301      	movs	r3, #1
 8005db6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005db8:	4b11      	ldr	r3, [pc, #68]	@ (8005e00 <xTaskIncrementTick+0x16c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d007      	beq.n	8005dd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	e004      	b.n	8005dd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8005e04 <xTaskIncrementTick+0x170>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8005e04 <xTaskIncrementTick+0x170>)
 8005dce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005dd0:	697b      	ldr	r3, [r7, #20]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000650 	.word	0x20000650
 8005de0:	2000062c 	.word	0x2000062c
 8005de4:	200005e0 	.word	0x200005e0
 8005de8:	200005e4 	.word	0x200005e4
 8005dec:	20000640 	.word	0x20000640
 8005df0:	20000648 	.word	0x20000648
 8005df4:	20000630 	.word	0x20000630
 8005df8:	2000052c 	.word	0x2000052c
 8005dfc:	20000528 	.word	0x20000528
 8005e00:	2000063c 	.word	0x2000063c
 8005e04:	20000638 	.word	0x20000638

08005e08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8005eb8 <vTaskSwitchContext+0xb0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e16:	4b29      	ldr	r3, [pc, #164]	@ (8005ebc <vTaskSwitchContext+0xb4>)
 8005e18:	2201      	movs	r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e1c:	e045      	b.n	8005eaa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005e1e:	4b27      	ldr	r3, [pc, #156]	@ (8005ebc <vTaskSwitchContext+0xb4>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e24:	4b26      	ldr	r3, [pc, #152]	@ (8005ec0 <vTaskSwitchContext+0xb8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	fab3 f383 	clz	r3, r3
 8005e30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e32:	7afb      	ldrb	r3, [r7, #11]
 8005e34:	f1c3 031f 	rsb	r3, r3, #31
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	4922      	ldr	r1, [pc, #136]	@ (8005ec4 <vTaskSwitchContext+0xbc>)
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	440b      	add	r3, r1
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	607b      	str	r3, [r7, #4]
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	e7fd      	b.n	8005e62 <vTaskSwitchContext+0x5a>
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4a14      	ldr	r2, [pc, #80]	@ (8005ec4 <vTaskSwitchContext+0xbc>)
 8005e72:	4413      	add	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	605a      	str	r2, [r3, #4]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	3308      	adds	r3, #8
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d104      	bne.n	8005e96 <vTaskSwitchContext+0x8e>
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	605a      	str	r2, [r3, #4]
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ec8 <vTaskSwitchContext+0xc0>)
 8005e9e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ea0:	4b09      	ldr	r3, [pc, #36]	@ (8005ec8 <vTaskSwitchContext+0xc0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	334c      	adds	r3, #76	@ 0x4c
 8005ea6:	4a09      	ldr	r2, [pc, #36]	@ (8005ecc <vTaskSwitchContext+0xc4>)
 8005ea8:	6013      	str	r3, [r2, #0]
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	20000650 	.word	0x20000650
 8005ebc:	2000063c 	.word	0x2000063c
 8005ec0:	20000630 	.word	0x20000630
 8005ec4:	2000052c 	.word	0x2000052c
 8005ec8:	20000528 	.word	0x20000528
 8005ecc:	20000070 	.word	0x20000070

08005ed0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10b      	bne.n	8005ef8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	60fb      	str	r3, [r7, #12]
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	e7fd      	b.n	8005ef4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ef8:	4b07      	ldr	r3, [pc, #28]	@ (8005f18 <vTaskPlaceOnEventList+0x48>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3318      	adds	r3, #24
 8005efe:	4619      	mov	r1, r3
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7fe fe11 	bl	8004b28 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f06:	2101      	movs	r1, #1
 8005f08:	6838      	ldr	r0, [r7, #0]
 8005f0a:	f000 fa73 	bl	80063f4 <prvAddCurrentTaskToDelayedList>
}
 8005f0e:	bf00      	nop
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20000528 	.word	0x20000528

08005f1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10b      	bne.n	8005f4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	60fb      	str	r3, [r7, #12]
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	e7fd      	b.n	8005f46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	3318      	adds	r3, #24
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe fe23 	bl	8004b9a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f54:	4b1d      	ldr	r3, [pc, #116]	@ (8005fcc <xTaskRemoveFromEventList+0xb0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d11c      	bne.n	8005f96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe fe1a 	bl	8004b9a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	409a      	lsls	r2, r3
 8005f6e:	4b18      	ldr	r3, [pc, #96]	@ (8005fd0 <xTaskRemoveFromEventList+0xb4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	4a16      	ldr	r2, [pc, #88]	@ (8005fd0 <xTaskRemoveFromEventList+0xb4>)
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4a13      	ldr	r2, [pc, #76]	@ (8005fd4 <xTaskRemoveFromEventList+0xb8>)
 8005f86:	441a      	add	r2, r3
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4610      	mov	r0, r2
 8005f90:	f7fe fda6 	bl	8004ae0 <vListInsertEnd>
 8005f94:	e005      	b.n	8005fa2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	3318      	adds	r3, #24
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	480e      	ldr	r0, [pc, #56]	@ (8005fd8 <xTaskRemoveFromEventList+0xbc>)
 8005f9e:	f7fe fd9f 	bl	8004ae0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8005fdc <xTaskRemoveFromEventList+0xc0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d905      	bls.n	8005fbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe0 <xTaskRemoveFromEventList+0xc4>)
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	e001      	b.n	8005fc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fc0:	697b      	ldr	r3, [r7, #20]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20000650 	.word	0x20000650
 8005fd0:	20000630 	.word	0x20000630
 8005fd4:	2000052c 	.word	0x2000052c
 8005fd8:	200005e8 	.word	0x200005e8
 8005fdc:	20000528 	.word	0x20000528
 8005fe0:	2000063c 	.word	0x2000063c

08005fe4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fec:	4b06      	ldr	r3, [pc, #24]	@ (8006008 <vTaskInternalSetTimeOutState+0x24>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ff4:	4b05      	ldr	r3, [pc, #20]	@ (800600c <vTaskInternalSetTimeOutState+0x28>)
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	605a      	str	r2, [r3, #4]
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	20000640 	.word	0x20000640
 800600c:	2000062c 	.word	0x2000062c

08006010 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10b      	bne.n	8006038 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	613b      	str	r3, [r7, #16]
}
 8006032:	bf00      	nop
 8006034:	bf00      	nop
 8006036:	e7fd      	b.n	8006034 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10b      	bne.n	8006056 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	60fb      	str	r3, [r7, #12]
}
 8006050:	bf00      	nop
 8006052:	bf00      	nop
 8006054:	e7fd      	b.n	8006052 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006056:	f000 fb67 	bl	8006728 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800605a:	4b1d      	ldr	r3, [pc, #116]	@ (80060d0 <xTaskCheckForTimeOut+0xc0>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006072:	d102      	bne.n	800607a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006074:	2300      	movs	r3, #0
 8006076:	61fb      	str	r3, [r7, #28]
 8006078:	e023      	b.n	80060c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b15      	ldr	r3, [pc, #84]	@ (80060d4 <xTaskCheckForTimeOut+0xc4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d007      	beq.n	8006096 <xTaskCheckForTimeOut+0x86>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	429a      	cmp	r2, r3
 800608e:	d302      	bcc.n	8006096 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006090:	2301      	movs	r3, #1
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	e015      	b.n	80060c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	429a      	cmp	r2, r3
 800609e:	d20b      	bcs.n	80060b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	1ad2      	subs	r2, r2, r3
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff ff99 	bl	8005fe4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060b2:	2300      	movs	r3, #0
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	e004      	b.n	80060c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060be:	2301      	movs	r3, #1
 80060c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060c2:	f000 fb63 	bl	800678c <vPortExitCritical>

	return xReturn;
 80060c6:	69fb      	ldr	r3, [r7, #28]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	2000062c 	.word	0x2000062c
 80060d4:	20000640 	.word	0x20000640

080060d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060dc:	4b03      	ldr	r3, [pc, #12]	@ (80060ec <vTaskMissedYield+0x14>)
 80060de:	2201      	movs	r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
}
 80060e2:	bf00      	nop
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	2000063c 	.word	0x2000063c

080060f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060f8:	f000 f852 	bl	80061a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060fc:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <prvIdleTask+0x28>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d9f9      	bls.n	80060f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006104:	4b05      	ldr	r3, [pc, #20]	@ (800611c <prvIdleTask+0x2c>)
 8006106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006114:	e7f0      	b.n	80060f8 <prvIdleTask+0x8>
 8006116:	bf00      	nop
 8006118:	2000052c 	.word	0x2000052c
 800611c:	e000ed04 	.word	0xe000ed04

08006120 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006126:	2300      	movs	r3, #0
 8006128:	607b      	str	r3, [r7, #4]
 800612a:	e00c      	b.n	8006146 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4a12      	ldr	r2, [pc, #72]	@ (8006180 <prvInitialiseTaskLists+0x60>)
 8006138:	4413      	add	r3, r2
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe fca3 	bl	8004a86 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3301      	adds	r3, #1
 8006144:	607b      	str	r3, [r7, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b06      	cmp	r3, #6
 800614a:	d9ef      	bls.n	800612c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800614c:	480d      	ldr	r0, [pc, #52]	@ (8006184 <prvInitialiseTaskLists+0x64>)
 800614e:	f7fe fc9a 	bl	8004a86 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006152:	480d      	ldr	r0, [pc, #52]	@ (8006188 <prvInitialiseTaskLists+0x68>)
 8006154:	f7fe fc97 	bl	8004a86 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006158:	480c      	ldr	r0, [pc, #48]	@ (800618c <prvInitialiseTaskLists+0x6c>)
 800615a:	f7fe fc94 	bl	8004a86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800615e:	480c      	ldr	r0, [pc, #48]	@ (8006190 <prvInitialiseTaskLists+0x70>)
 8006160:	f7fe fc91 	bl	8004a86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006164:	480b      	ldr	r0, [pc, #44]	@ (8006194 <prvInitialiseTaskLists+0x74>)
 8006166:	f7fe fc8e 	bl	8004a86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800616a:	4b0b      	ldr	r3, [pc, #44]	@ (8006198 <prvInitialiseTaskLists+0x78>)
 800616c:	4a05      	ldr	r2, [pc, #20]	@ (8006184 <prvInitialiseTaskLists+0x64>)
 800616e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006170:	4b0a      	ldr	r3, [pc, #40]	@ (800619c <prvInitialiseTaskLists+0x7c>)
 8006172:	4a05      	ldr	r2, [pc, #20]	@ (8006188 <prvInitialiseTaskLists+0x68>)
 8006174:	601a      	str	r2, [r3, #0]
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	2000052c 	.word	0x2000052c
 8006184:	200005b8 	.word	0x200005b8
 8006188:	200005cc 	.word	0x200005cc
 800618c:	200005e8 	.word	0x200005e8
 8006190:	200005fc 	.word	0x200005fc
 8006194:	20000614 	.word	0x20000614
 8006198:	200005e0 	.word	0x200005e0
 800619c:	200005e4 	.word	0x200005e4

080061a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061a6:	e019      	b.n	80061dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061a8:	f000 fabe 	bl	8006728 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ac:	4b10      	ldr	r3, [pc, #64]	@ (80061f0 <prvCheckTasksWaitingTermination+0x50>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3304      	adds	r3, #4
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fe fcee 	bl	8004b9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061be:	4b0d      	ldr	r3, [pc, #52]	@ (80061f4 <prvCheckTasksWaitingTermination+0x54>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	4a0b      	ldr	r2, [pc, #44]	@ (80061f4 <prvCheckTasksWaitingTermination+0x54>)
 80061c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061c8:	4b0b      	ldr	r3, [pc, #44]	@ (80061f8 <prvCheckTasksWaitingTermination+0x58>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	4a0a      	ldr	r2, [pc, #40]	@ (80061f8 <prvCheckTasksWaitingTermination+0x58>)
 80061d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061d2:	f000 fadb 	bl	800678c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f810 	bl	80061fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061dc:	4b06      	ldr	r3, [pc, #24]	@ (80061f8 <prvCheckTasksWaitingTermination+0x58>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e1      	bne.n	80061a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	200005fc 	.word	0x200005fc
 80061f4:	20000628 	.word	0x20000628
 80061f8:	20000610 	.word	0x20000610

080061fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	334c      	adds	r3, #76	@ 0x4c
 8006208:	4618      	mov	r0, r3
 800620a:	f000 fdd7 	bl	8006dbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006214:	2b00      	cmp	r3, #0
 8006216:	d108      	bne.n	800622a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fc73 	bl	8006b08 <vPortFree>
				vPortFree( pxTCB );
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fc70 	bl	8006b08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006228:	e019      	b.n	800625e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006230:	2b01      	cmp	r3, #1
 8006232:	d103      	bne.n	800623c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fc67 	bl	8006b08 <vPortFree>
	}
 800623a:	e010      	b.n	800625e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006242:	2b02      	cmp	r3, #2
 8006244:	d00b      	beq.n	800625e <prvDeleteTCB+0x62>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	60fb      	str	r3, [r7, #12]
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	e7fd      	b.n	800625a <prvDeleteTCB+0x5e>
	}
 800625e:	bf00      	nop
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800626e:	4b0c      	ldr	r3, [pc, #48]	@ (80062a0 <prvResetNextTaskUnblockTime+0x38>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d104      	bne.n	8006282 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006278:	4b0a      	ldr	r3, [pc, #40]	@ (80062a4 <prvResetNextTaskUnblockTime+0x3c>)
 800627a:	f04f 32ff 	mov.w	r2, #4294967295
 800627e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006280:	e008      	b.n	8006294 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006282:	4b07      	ldr	r3, [pc, #28]	@ (80062a0 <prvResetNextTaskUnblockTime+0x38>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	4a04      	ldr	r2, [pc, #16]	@ (80062a4 <prvResetNextTaskUnblockTime+0x3c>)
 8006292:	6013      	str	r3, [r2, #0]
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	200005e0 	.word	0x200005e0
 80062a4:	20000648 	.word	0x20000648

080062a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062ae:	4b0b      	ldr	r3, [pc, #44]	@ (80062dc <xTaskGetSchedulerState+0x34>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d102      	bne.n	80062bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062b6:	2301      	movs	r3, #1
 80062b8:	607b      	str	r3, [r7, #4]
 80062ba:	e008      	b.n	80062ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062bc:	4b08      	ldr	r3, [pc, #32]	@ (80062e0 <xTaskGetSchedulerState+0x38>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d102      	bne.n	80062ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062c4:	2302      	movs	r3, #2
 80062c6:	607b      	str	r3, [r7, #4]
 80062c8:	e001      	b.n	80062ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062ca:	2300      	movs	r3, #0
 80062cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062ce:	687b      	ldr	r3, [r7, #4]
	}
 80062d0:	4618      	mov	r0, r3
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	20000634 	.word	0x20000634
 80062e0:	20000650 	.word	0x20000650

080062e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062f0:	2300      	movs	r3, #0
 80062f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d070      	beq.n	80063dc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062fa:	4b3b      	ldr	r3, [pc, #236]	@ (80063e8 <xTaskPriorityDisinherit+0x104>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	429a      	cmp	r2, r3
 8006302:	d00b      	beq.n	800631c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	60fb      	str	r3, [r7, #12]
}
 8006316:	bf00      	nop
 8006318:	bf00      	nop
 800631a:	e7fd      	b.n	8006318 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10b      	bne.n	800633c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	60bb      	str	r3, [r7, #8]
}
 8006336:	bf00      	nop
 8006338:	bf00      	nop
 800633a:	e7fd      	b.n	8006338 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006340:	1e5a      	subs	r2, r3, #1
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800634e:	429a      	cmp	r2, r3
 8006350:	d044      	beq.n	80063dc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006356:	2b00      	cmp	r3, #0
 8006358:	d140      	bne.n	80063dc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	3304      	adds	r3, #4
 800635e:	4618      	mov	r0, r3
 8006360:	f7fe fc1b 	bl	8004b9a <uxListRemove>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d115      	bne.n	8006396 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800636e:	491f      	ldr	r1, [pc, #124]	@ (80063ec <xTaskPriorityDisinherit+0x108>)
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	440b      	add	r3, r1
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10a      	bne.n	8006396 <xTaskPriorityDisinherit+0xb2>
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006384:	2201      	movs	r2, #1
 8006386:	fa02 f303 	lsl.w	r3, r2, r3
 800638a:	43da      	mvns	r2, r3
 800638c:	4b18      	ldr	r3, [pc, #96]	@ (80063f0 <xTaskPriorityDisinherit+0x10c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4013      	ands	r3, r2
 8006392:	4a17      	ldr	r2, [pc, #92]	@ (80063f0 <xTaskPriorityDisinherit+0x10c>)
 8006394:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a2:	f1c3 0207 	rsb	r2, r3, #7
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ae:	2201      	movs	r2, #1
 80063b0:	409a      	lsls	r2, r3
 80063b2:	4b0f      	ldr	r3, [pc, #60]	@ (80063f0 <xTaskPriorityDisinherit+0x10c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	4a0d      	ldr	r2, [pc, #52]	@ (80063f0 <xTaskPriorityDisinherit+0x10c>)
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4a08      	ldr	r2, [pc, #32]	@ (80063ec <xTaskPriorityDisinherit+0x108>)
 80063ca:	441a      	add	r2, r3
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f7fe fb84 	bl	8004ae0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063d8:	2301      	movs	r3, #1
 80063da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063dc:	697b      	ldr	r3, [r7, #20]
	}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000528 	.word	0x20000528
 80063ec:	2000052c 	.word	0x2000052c
 80063f0:	20000630 	.word	0x20000630

080063f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063fe:	4b29      	ldr	r3, [pc, #164]	@ (80064a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006404:	4b28      	ldr	r3, [pc, #160]	@ (80064a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3304      	adds	r3, #4
 800640a:	4618      	mov	r0, r3
 800640c:	f7fe fbc5 	bl	8004b9a <uxListRemove>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10b      	bne.n	800642e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006416:	4b24      	ldr	r3, [pc, #144]	@ (80064a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641c:	2201      	movs	r2, #1
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	43da      	mvns	r2, r3
 8006424:	4b21      	ldr	r3, [pc, #132]	@ (80064ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4013      	ands	r3, r2
 800642a:	4a20      	ldr	r2, [pc, #128]	@ (80064ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800642c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006434:	d10a      	bne.n	800644c <prvAddCurrentTaskToDelayedList+0x58>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d007      	beq.n	800644c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800643c:	4b1a      	ldr	r3, [pc, #104]	@ (80064a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3304      	adds	r3, #4
 8006442:	4619      	mov	r1, r3
 8006444:	481a      	ldr	r0, [pc, #104]	@ (80064b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006446:	f7fe fb4b 	bl	8004ae0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800644a:	e026      	b.n	800649a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4413      	add	r3, r2
 8006452:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006454:	4b14      	ldr	r3, [pc, #80]	@ (80064a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	429a      	cmp	r2, r3
 8006462:	d209      	bcs.n	8006478 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006464:	4b13      	ldr	r3, [pc, #76]	@ (80064b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	4b0f      	ldr	r3, [pc, #60]	@ (80064a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3304      	adds	r3, #4
 800646e:	4619      	mov	r1, r3
 8006470:	4610      	mov	r0, r2
 8006472:	f7fe fb59 	bl	8004b28 <vListInsert>
}
 8006476:	e010      	b.n	800649a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006478:	4b0f      	ldr	r3, [pc, #60]	@ (80064b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	4b0a      	ldr	r3, [pc, #40]	@ (80064a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3304      	adds	r3, #4
 8006482:	4619      	mov	r1, r3
 8006484:	4610      	mov	r0, r2
 8006486:	f7fe fb4f 	bl	8004b28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800648a:	4b0c      	ldr	r3, [pc, #48]	@ (80064bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	429a      	cmp	r2, r3
 8006492:	d202      	bcs.n	800649a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006494:	4a09      	ldr	r2, [pc, #36]	@ (80064bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	6013      	str	r3, [r2, #0]
}
 800649a:	bf00      	nop
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	2000062c 	.word	0x2000062c
 80064a8:	20000528 	.word	0x20000528
 80064ac:	20000630 	.word	0x20000630
 80064b0:	20000614 	.word	0x20000614
 80064b4:	200005e4 	.word	0x200005e4
 80064b8:	200005e0 	.word	0x200005e0
 80064bc:	20000648 	.word	0x20000648

080064c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3b04      	subs	r3, #4
 80064d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3b04      	subs	r3, #4
 80064de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f023 0201 	bic.w	r2, r3, #1
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3b04      	subs	r3, #4
 80064ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064f0:	4a0c      	ldr	r2, [pc, #48]	@ (8006524 <pxPortInitialiseStack+0x64>)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3b14      	subs	r3, #20
 80064fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3b04      	subs	r3, #4
 8006506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f06f 0202 	mvn.w	r2, #2
 800650e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3b20      	subs	r3, #32
 8006514:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006516:	68fb      	ldr	r3, [r7, #12]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	08006529 	.word	0x08006529

08006528 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006532:	4b13      	ldr	r3, [pc, #76]	@ (8006580 <prvTaskExitError+0x58>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653a:	d00b      	beq.n	8006554 <prvTaskExitError+0x2c>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	60fb      	str	r3, [r7, #12]
}
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	e7fd      	b.n	8006550 <prvTaskExitError+0x28>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	60bb      	str	r3, [r7, #8]
}
 8006566:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006568:	bf00      	nop
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0fc      	beq.n	800656a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006570:	bf00      	nop
 8006572:	bf00      	nop
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	2000006c 	.word	0x2000006c
	...

08006590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006590:	4b07      	ldr	r3, [pc, #28]	@ (80065b0 <pxCurrentTCBConst2>)
 8006592:	6819      	ldr	r1, [r3, #0]
 8006594:	6808      	ldr	r0, [r1, #0]
 8006596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659a:	f380 8809 	msr	PSP, r0
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f04f 0000 	mov.w	r0, #0
 80065a6:	f380 8811 	msr	BASEPRI, r0
 80065aa:	4770      	bx	lr
 80065ac:	f3af 8000 	nop.w

080065b0 <pxCurrentTCBConst2>:
 80065b0:	20000528 	.word	0x20000528
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop

080065b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065b8:	4808      	ldr	r0, [pc, #32]	@ (80065dc <prvPortStartFirstTask+0x24>)
 80065ba:	6800      	ldr	r0, [r0, #0]
 80065bc:	6800      	ldr	r0, [r0, #0]
 80065be:	f380 8808 	msr	MSP, r0
 80065c2:	f04f 0000 	mov.w	r0, #0
 80065c6:	f380 8814 	msr	CONTROL, r0
 80065ca:	b662      	cpsie	i
 80065cc:	b661      	cpsie	f
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	df00      	svc	0
 80065d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065da:	bf00      	nop
 80065dc:	e000ed08 	.word	0xe000ed08

080065e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065e6:	4b47      	ldr	r3, [pc, #284]	@ (8006704 <xPortStartScheduler+0x124>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a47      	ldr	r2, [pc, #284]	@ (8006708 <xPortStartScheduler+0x128>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d10b      	bne.n	8006608 <xPortStartScheduler+0x28>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	60fb      	str	r3, [r7, #12]
}
 8006602:	bf00      	nop
 8006604:	bf00      	nop
 8006606:	e7fd      	b.n	8006604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006608:	4b3e      	ldr	r3, [pc, #248]	@ (8006704 <xPortStartScheduler+0x124>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a3f      	ldr	r2, [pc, #252]	@ (800670c <xPortStartScheduler+0x12c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d10b      	bne.n	800662a <xPortStartScheduler+0x4a>
	__asm volatile
 8006612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	613b      	str	r3, [r7, #16]
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop
 8006628:	e7fd      	b.n	8006626 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800662a:	4b39      	ldr	r3, [pc, #228]	@ (8006710 <xPortStartScheduler+0x130>)
 800662c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	22ff      	movs	r2, #255	@ 0xff
 800663a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	b2db      	uxtb	r3, r3
 8006642:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800664c:	b2da      	uxtb	r2, r3
 800664e:	4b31      	ldr	r3, [pc, #196]	@ (8006714 <xPortStartScheduler+0x134>)
 8006650:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006652:	4b31      	ldr	r3, [pc, #196]	@ (8006718 <xPortStartScheduler+0x138>)
 8006654:	2207      	movs	r2, #7
 8006656:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006658:	e009      	b.n	800666e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800665a:	4b2f      	ldr	r3, [pc, #188]	@ (8006718 <xPortStartScheduler+0x138>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3b01      	subs	r3, #1
 8006660:	4a2d      	ldr	r2, [pc, #180]	@ (8006718 <xPortStartScheduler+0x138>)
 8006662:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	b2db      	uxtb	r3, r3
 800666c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006676:	2b80      	cmp	r3, #128	@ 0x80
 8006678:	d0ef      	beq.n	800665a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800667a:	4b27      	ldr	r3, [pc, #156]	@ (8006718 <xPortStartScheduler+0x138>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f1c3 0307 	rsb	r3, r3, #7
 8006682:	2b04      	cmp	r3, #4
 8006684:	d00b      	beq.n	800669e <xPortStartScheduler+0xbe>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	60bb      	str	r3, [r7, #8]
}
 8006698:	bf00      	nop
 800669a:	bf00      	nop
 800669c:	e7fd      	b.n	800669a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800669e:	4b1e      	ldr	r3, [pc, #120]	@ (8006718 <xPortStartScheduler+0x138>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006718 <xPortStartScheduler+0x138>)
 80066a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006718 <xPortStartScheduler+0x138>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066b0:	4a19      	ldr	r2, [pc, #100]	@ (8006718 <xPortStartScheduler+0x138>)
 80066b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066bc:	4b17      	ldr	r3, [pc, #92]	@ (800671c <xPortStartScheduler+0x13c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a16      	ldr	r2, [pc, #88]	@ (800671c <xPortStartScheduler+0x13c>)
 80066c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80066c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066c8:	4b14      	ldr	r3, [pc, #80]	@ (800671c <xPortStartScheduler+0x13c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a13      	ldr	r2, [pc, #76]	@ (800671c <xPortStartScheduler+0x13c>)
 80066ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80066d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066d4:	f000 f8da 	bl	800688c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066d8:	4b11      	ldr	r3, [pc, #68]	@ (8006720 <xPortStartScheduler+0x140>)
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066de:	f000 f8f9 	bl	80068d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066e2:	4b10      	ldr	r3, [pc, #64]	@ (8006724 <xPortStartScheduler+0x144>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a0f      	ldr	r2, [pc, #60]	@ (8006724 <xPortStartScheduler+0x144>)
 80066e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80066ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066ee:	f7ff ff63 	bl	80065b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066f2:	f7ff fb89 	bl	8005e08 <vTaskSwitchContext>
	prvTaskExitError();
 80066f6:	f7ff ff17 	bl	8006528 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	e000ed00 	.word	0xe000ed00
 8006708:	410fc271 	.word	0x410fc271
 800670c:	410fc270 	.word	0x410fc270
 8006710:	e000e400 	.word	0xe000e400
 8006714:	20000654 	.word	0x20000654
 8006718:	20000658 	.word	0x20000658
 800671c:	e000ed20 	.word	0xe000ed20
 8006720:	2000006c 	.word	0x2000006c
 8006724:	e000ef34 	.word	0xe000ef34

08006728 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	607b      	str	r3, [r7, #4]
}
 8006740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006742:	4b10      	ldr	r3, [pc, #64]	@ (8006784 <vPortEnterCritical+0x5c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3301      	adds	r3, #1
 8006748:	4a0e      	ldr	r2, [pc, #56]	@ (8006784 <vPortEnterCritical+0x5c>)
 800674a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800674c:	4b0d      	ldr	r3, [pc, #52]	@ (8006784 <vPortEnterCritical+0x5c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d110      	bne.n	8006776 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006754:	4b0c      	ldr	r3, [pc, #48]	@ (8006788 <vPortEnterCritical+0x60>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00b      	beq.n	8006776 <vPortEnterCritical+0x4e>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	603b      	str	r3, [r7, #0]
}
 8006770:	bf00      	nop
 8006772:	bf00      	nop
 8006774:	e7fd      	b.n	8006772 <vPortEnterCritical+0x4a>
	}
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	2000006c 	.word	0x2000006c
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006792:	4b12      	ldr	r3, [pc, #72]	@ (80067dc <vPortExitCritical+0x50>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10b      	bne.n	80067b2 <vPortExitCritical+0x26>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	607b      	str	r3, [r7, #4]
}
 80067ac:	bf00      	nop
 80067ae:	bf00      	nop
 80067b0:	e7fd      	b.n	80067ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067b2:	4b0a      	ldr	r3, [pc, #40]	@ (80067dc <vPortExitCritical+0x50>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	4a08      	ldr	r2, [pc, #32]	@ (80067dc <vPortExitCritical+0x50>)
 80067ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067bc:	4b07      	ldr	r3, [pc, #28]	@ (80067dc <vPortExitCritical+0x50>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d105      	bne.n	80067d0 <vPortExitCritical+0x44>
 80067c4:	2300      	movs	r3, #0
 80067c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	f383 8811 	msr	BASEPRI, r3
}
 80067ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	2000006c 	.word	0x2000006c

080067e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067e0:	f3ef 8009 	mrs	r0, PSP
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	4b15      	ldr	r3, [pc, #84]	@ (8006840 <pxCurrentTCBConst>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	f01e 0f10 	tst.w	lr, #16
 80067f0:	bf08      	it	eq
 80067f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fa:	6010      	str	r0, [r2, #0]
 80067fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006800:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006804:	f380 8811 	msr	BASEPRI, r0
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f7ff fafa 	bl	8005e08 <vTaskSwitchContext>
 8006814:	f04f 0000 	mov.w	r0, #0
 8006818:	f380 8811 	msr	BASEPRI, r0
 800681c:	bc09      	pop	{r0, r3}
 800681e:	6819      	ldr	r1, [r3, #0]
 8006820:	6808      	ldr	r0, [r1, #0]
 8006822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006826:	f01e 0f10 	tst.w	lr, #16
 800682a:	bf08      	it	eq
 800682c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006830:	f380 8809 	msr	PSP, r0
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	f3af 8000 	nop.w

08006840 <pxCurrentTCBConst>:
 8006840:	20000528 	.word	0x20000528
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop

08006848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	607b      	str	r3, [r7, #4]
}
 8006860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006862:	f7ff fa17 	bl	8005c94 <xTaskIncrementTick>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800686c:	4b06      	ldr	r3, [pc, #24]	@ (8006888 <SysTick_Handler+0x40>)
 800686e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	2300      	movs	r3, #0
 8006876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	f383 8811 	msr	BASEPRI, r3
}
 800687e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	e000ed04 	.word	0xe000ed04

0800688c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006890:	4b0b      	ldr	r3, [pc, #44]	@ (80068c0 <vPortSetupTimerInterrupt+0x34>)
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006896:	4b0b      	ldr	r3, [pc, #44]	@ (80068c4 <vPortSetupTimerInterrupt+0x38>)
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800689c:	4b0a      	ldr	r3, [pc, #40]	@ (80068c8 <vPortSetupTimerInterrupt+0x3c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a0a      	ldr	r2, [pc, #40]	@ (80068cc <vPortSetupTimerInterrupt+0x40>)
 80068a2:	fba2 2303 	umull	r2, r3, r2, r3
 80068a6:	099b      	lsrs	r3, r3, #6
 80068a8:	4a09      	ldr	r2, [pc, #36]	@ (80068d0 <vPortSetupTimerInterrupt+0x44>)
 80068aa:	3b01      	subs	r3, #1
 80068ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068ae:	4b04      	ldr	r3, [pc, #16]	@ (80068c0 <vPortSetupTimerInterrupt+0x34>)
 80068b0:	2207      	movs	r2, #7
 80068b2:	601a      	str	r2, [r3, #0]
}
 80068b4:	bf00      	nop
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	e000e010 	.word	0xe000e010
 80068c4:	e000e018 	.word	0xe000e018
 80068c8:	20000000 	.word	0x20000000
 80068cc:	10624dd3 	.word	0x10624dd3
 80068d0:	e000e014 	.word	0xe000e014

080068d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80068e4 <vPortEnableVFP+0x10>
 80068d8:	6801      	ldr	r1, [r0, #0]
 80068da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80068de:	6001      	str	r1, [r0, #0]
 80068e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068e2:	bf00      	nop
 80068e4:	e000ed88 	.word	0xe000ed88

080068e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068ee:	f3ef 8305 	mrs	r3, IPSR
 80068f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b0f      	cmp	r3, #15
 80068f8:	d915      	bls.n	8006926 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068fa:	4a18      	ldr	r2, [pc, #96]	@ (800695c <vPortValidateInterruptPriority+0x74>)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4413      	add	r3, r2
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006904:	4b16      	ldr	r3, [pc, #88]	@ (8006960 <vPortValidateInterruptPriority+0x78>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	7afa      	ldrb	r2, [r7, #11]
 800690a:	429a      	cmp	r2, r3
 800690c:	d20b      	bcs.n	8006926 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	607b      	str	r3, [r7, #4]
}
 8006920:	bf00      	nop
 8006922:	bf00      	nop
 8006924:	e7fd      	b.n	8006922 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006926:	4b0f      	ldr	r3, [pc, #60]	@ (8006964 <vPortValidateInterruptPriority+0x7c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800692e:	4b0e      	ldr	r3, [pc, #56]	@ (8006968 <vPortValidateInterruptPriority+0x80>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d90b      	bls.n	800694e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	603b      	str	r3, [r7, #0]
}
 8006948:	bf00      	nop
 800694a:	bf00      	nop
 800694c:	e7fd      	b.n	800694a <vPortValidateInterruptPriority+0x62>
	}
 800694e:	bf00      	nop
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	e000e3f0 	.word	0xe000e3f0
 8006960:	20000654 	.word	0x20000654
 8006964:	e000ed0c 	.word	0xe000ed0c
 8006968:	20000658 	.word	0x20000658

0800696c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b08a      	sub	sp, #40	@ 0x28
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006974:	2300      	movs	r3, #0
 8006976:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006978:	f7ff f8e0 	bl	8005b3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800697c:	4b5c      	ldr	r3, [pc, #368]	@ (8006af0 <pvPortMalloc+0x184>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006984:	f000 f924 	bl	8006bd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006988:	4b5a      	ldr	r3, [pc, #360]	@ (8006af4 <pvPortMalloc+0x188>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4013      	ands	r3, r2
 8006990:	2b00      	cmp	r3, #0
 8006992:	f040 8095 	bne.w	8006ac0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01e      	beq.n	80069da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800699c:	2208      	movs	r2, #8
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4413      	add	r3, r2
 80069a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f003 0307 	and.w	r3, r3, #7
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d015      	beq.n	80069da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f023 0307 	bic.w	r3, r3, #7
 80069b4:	3308      	adds	r3, #8
 80069b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00b      	beq.n	80069da <pvPortMalloc+0x6e>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	617b      	str	r3, [r7, #20]
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	e7fd      	b.n	80069d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d06f      	beq.n	8006ac0 <pvPortMalloc+0x154>
 80069e0:	4b45      	ldr	r3, [pc, #276]	@ (8006af8 <pvPortMalloc+0x18c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d86a      	bhi.n	8006ac0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069ea:	4b44      	ldr	r3, [pc, #272]	@ (8006afc <pvPortMalloc+0x190>)
 80069ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069ee:	4b43      	ldr	r3, [pc, #268]	@ (8006afc <pvPortMalloc+0x190>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069f4:	e004      	b.n	8006a00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d903      	bls.n	8006a12 <pvPortMalloc+0xa6>
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f1      	bne.n	80069f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a12:	4b37      	ldr	r3, [pc, #220]	@ (8006af0 <pvPortMalloc+0x184>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d051      	beq.n	8006ac0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2208      	movs	r2, #8
 8006a22:	4413      	add	r3, r2
 8006a24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	1ad2      	subs	r2, r2, r3
 8006a36:	2308      	movs	r3, #8
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d920      	bls.n	8006a80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4413      	add	r3, r2
 8006a44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00b      	beq.n	8006a68 <pvPortMalloc+0xfc>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	613b      	str	r3, [r7, #16]
}
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	e7fd      	b.n	8006a64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	1ad2      	subs	r2, r2, r3
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a7a:	69b8      	ldr	r0, [r7, #24]
 8006a7c:	f000 f90a 	bl	8006c94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a80:	4b1d      	ldr	r3, [pc, #116]	@ (8006af8 <pvPortMalloc+0x18c>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006af8 <pvPortMalloc+0x18c>)
 8006a8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006af8 <pvPortMalloc+0x18c>)
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4b1b      	ldr	r3, [pc, #108]	@ (8006b00 <pvPortMalloc+0x194>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d203      	bcs.n	8006aa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a9a:	4b17      	ldr	r3, [pc, #92]	@ (8006af8 <pvPortMalloc+0x18c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a18      	ldr	r2, [pc, #96]	@ (8006b00 <pvPortMalloc+0x194>)
 8006aa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	4b13      	ldr	r3, [pc, #76]	@ (8006af4 <pvPortMalloc+0x188>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ab6:	4b13      	ldr	r3, [pc, #76]	@ (8006b04 <pvPortMalloc+0x198>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3301      	adds	r3, #1
 8006abc:	4a11      	ldr	r2, [pc, #68]	@ (8006b04 <pvPortMalloc+0x198>)
 8006abe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ac0:	f7ff f84a 	bl	8005b58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	f003 0307 	and.w	r3, r3, #7
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00b      	beq.n	8006ae6 <pvPortMalloc+0x17a>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	60fb      	str	r3, [r7, #12]
}
 8006ae0:	bf00      	nop
 8006ae2:	bf00      	nop
 8006ae4:	e7fd      	b.n	8006ae2 <pvPortMalloc+0x176>
	return pvReturn;
 8006ae6:	69fb      	ldr	r3, [r7, #28]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3728      	adds	r7, #40	@ 0x28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20004264 	.word	0x20004264
 8006af4:	20004278 	.word	0x20004278
 8006af8:	20004268 	.word	0x20004268
 8006afc:	2000425c 	.word	0x2000425c
 8006b00:	2000426c 	.word	0x2000426c
 8006b04:	20004270 	.word	0x20004270

08006b08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d04f      	beq.n	8006bba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b1a:	2308      	movs	r3, #8
 8006b1c:	425b      	negs	r3, r3
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4413      	add	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	4b25      	ldr	r3, [pc, #148]	@ (8006bc4 <vPortFree+0xbc>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10b      	bne.n	8006b4e <vPortFree+0x46>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	60fb      	str	r3, [r7, #12]
}
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	e7fd      	b.n	8006b4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00b      	beq.n	8006b6e <vPortFree+0x66>
	__asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	60bb      	str	r3, [r7, #8]
}
 8006b68:	bf00      	nop
 8006b6a:	bf00      	nop
 8006b6c:	e7fd      	b.n	8006b6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	4b14      	ldr	r3, [pc, #80]	@ (8006bc4 <vPortFree+0xbc>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4013      	ands	r3, r2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01e      	beq.n	8006bba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d11a      	bne.n	8006bba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	4b0e      	ldr	r3, [pc, #56]	@ (8006bc4 <vPortFree+0xbc>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	43db      	mvns	r3, r3
 8006b8e:	401a      	ands	r2, r3
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b94:	f7fe ffd2 	bl	8005b3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc8 <vPortFree+0xc0>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	4a09      	ldr	r2, [pc, #36]	@ (8006bc8 <vPortFree+0xc0>)
 8006ba4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ba6:	6938      	ldr	r0, [r7, #16]
 8006ba8:	f000 f874 	bl	8006c94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006bac:	4b07      	ldr	r3, [pc, #28]	@ (8006bcc <vPortFree+0xc4>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	4a06      	ldr	r2, [pc, #24]	@ (8006bcc <vPortFree+0xc4>)
 8006bb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bb6:	f7fe ffcf 	bl	8005b58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bba:	bf00      	nop
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20004278 	.word	0x20004278
 8006bc8:	20004268 	.word	0x20004268
 8006bcc:	20004274 	.word	0x20004274

08006bd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bd6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006bda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bdc:	4b27      	ldr	r3, [pc, #156]	@ (8006c7c <prvHeapInit+0xac>)
 8006bde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00c      	beq.n	8006c04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3307      	adds	r3, #7
 8006bee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 0307 	bic.w	r3, r3, #7
 8006bf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8006c7c <prvHeapInit+0xac>)
 8006c00:	4413      	add	r3, r2
 8006c02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c08:	4a1d      	ldr	r2, [pc, #116]	@ (8006c80 <prvHeapInit+0xb0>)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8006c80 <prvHeapInit+0xb0>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	4413      	add	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c1c:	2208      	movs	r2, #8
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	1a9b      	subs	r3, r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0307 	bic.w	r3, r3, #7
 8006c2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4a15      	ldr	r2, [pc, #84]	@ (8006c84 <prvHeapInit+0xb4>)
 8006c30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c32:	4b14      	ldr	r3, [pc, #80]	@ (8006c84 <prvHeapInit+0xb4>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2200      	movs	r2, #0
 8006c38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c3a:	4b12      	ldr	r3, [pc, #72]	@ (8006c84 <prvHeapInit+0xb4>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	1ad2      	subs	r2, r2, r3
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c50:	4b0c      	ldr	r3, [pc, #48]	@ (8006c84 <prvHeapInit+0xb4>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c88 <prvHeapInit+0xb8>)
 8006c5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	4a09      	ldr	r2, [pc, #36]	@ (8006c8c <prvHeapInit+0xbc>)
 8006c66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c68:	4b09      	ldr	r3, [pc, #36]	@ (8006c90 <prvHeapInit+0xc0>)
 8006c6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c6e:	601a      	str	r2, [r3, #0]
}
 8006c70:	bf00      	nop
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	2000065c 	.word	0x2000065c
 8006c80:	2000425c 	.word	0x2000425c
 8006c84:	20004264 	.word	0x20004264
 8006c88:	2000426c 	.word	0x2000426c
 8006c8c:	20004268 	.word	0x20004268
 8006c90:	20004278 	.word	0x20004278

08006c94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c9c:	4b28      	ldr	r3, [pc, #160]	@ (8006d40 <prvInsertBlockIntoFreeList+0xac>)
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	e002      	b.n	8006ca8 <prvInsertBlockIntoFreeList+0x14>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d8f7      	bhi.n	8006ca2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d108      	bne.n	8006cd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	441a      	add	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	441a      	add	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d118      	bne.n	8006d1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	4b15      	ldr	r3, [pc, #84]	@ (8006d44 <prvInsertBlockIntoFreeList+0xb0>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d00d      	beq.n	8006d12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	441a      	add	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	e008      	b.n	8006d24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d12:	4b0c      	ldr	r3, [pc, #48]	@ (8006d44 <prvInsertBlockIntoFreeList+0xb0>)
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	e003      	b.n	8006d24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d002      	beq.n	8006d32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d32:	bf00      	nop
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	2000425c 	.word	0x2000425c
 8006d44:	20004264 	.word	0x20004264

08006d48 <siprintf>:
 8006d48:	b40e      	push	{r1, r2, r3}
 8006d4a:	b510      	push	{r4, lr}
 8006d4c:	b09d      	sub	sp, #116	@ 0x74
 8006d4e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006d50:	9002      	str	r0, [sp, #8]
 8006d52:	9006      	str	r0, [sp, #24]
 8006d54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d58:	480a      	ldr	r0, [pc, #40]	@ (8006d84 <siprintf+0x3c>)
 8006d5a:	9107      	str	r1, [sp, #28]
 8006d5c:	9104      	str	r1, [sp, #16]
 8006d5e:	490a      	ldr	r1, [pc, #40]	@ (8006d88 <siprintf+0x40>)
 8006d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d64:	9105      	str	r1, [sp, #20]
 8006d66:	2400      	movs	r4, #0
 8006d68:	a902      	add	r1, sp, #8
 8006d6a:	6800      	ldr	r0, [r0, #0]
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006d70:	f000 fa10 	bl	8007194 <_svfiprintf_r>
 8006d74:	9b02      	ldr	r3, [sp, #8]
 8006d76:	701c      	strb	r4, [r3, #0]
 8006d78:	b01d      	add	sp, #116	@ 0x74
 8006d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d7e:	b003      	add	sp, #12
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20000070 	.word	0x20000070
 8006d88:	ffff0208 	.word	0xffff0208

08006d8c <memcmp>:
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	3901      	subs	r1, #1
 8006d90:	4402      	add	r2, r0
 8006d92:	4290      	cmp	r0, r2
 8006d94:	d101      	bne.n	8006d9a <memcmp+0xe>
 8006d96:	2000      	movs	r0, #0
 8006d98:	e005      	b.n	8006da6 <memcmp+0x1a>
 8006d9a:	7803      	ldrb	r3, [r0, #0]
 8006d9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d001      	beq.n	8006da8 <memcmp+0x1c>
 8006da4:	1b18      	subs	r0, r3, r4
 8006da6:	bd10      	pop	{r4, pc}
 8006da8:	3001      	adds	r0, #1
 8006daa:	e7f2      	b.n	8006d92 <memcmp+0x6>

08006dac <memset>:
 8006dac:	4402      	add	r2, r0
 8006dae:	4603      	mov	r3, r0
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d100      	bne.n	8006db6 <memset+0xa>
 8006db4:	4770      	bx	lr
 8006db6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dba:	e7f9      	b.n	8006db0 <memset+0x4>

08006dbc <_reclaim_reent>:
 8006dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8006e74 <_reclaim_reent+0xb8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4283      	cmp	r3, r0
 8006dc2:	b570      	push	{r4, r5, r6, lr}
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	d053      	beq.n	8006e70 <_reclaim_reent+0xb4>
 8006dc8:	69c3      	ldr	r3, [r0, #28]
 8006dca:	b31b      	cbz	r3, 8006e14 <_reclaim_reent+0x58>
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	b163      	cbz	r3, 8006dea <_reclaim_reent+0x2e>
 8006dd0:	2500      	movs	r5, #0
 8006dd2:	69e3      	ldr	r3, [r4, #28]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	5959      	ldr	r1, [r3, r5]
 8006dd8:	b9b1      	cbnz	r1, 8006e08 <_reclaim_reent+0x4c>
 8006dda:	3504      	adds	r5, #4
 8006ddc:	2d80      	cmp	r5, #128	@ 0x80
 8006dde:	d1f8      	bne.n	8006dd2 <_reclaim_reent+0x16>
 8006de0:	69e3      	ldr	r3, [r4, #28]
 8006de2:	4620      	mov	r0, r4
 8006de4:	68d9      	ldr	r1, [r3, #12]
 8006de6:	f000 f881 	bl	8006eec <_free_r>
 8006dea:	69e3      	ldr	r3, [r4, #28]
 8006dec:	6819      	ldr	r1, [r3, #0]
 8006dee:	b111      	cbz	r1, 8006df6 <_reclaim_reent+0x3a>
 8006df0:	4620      	mov	r0, r4
 8006df2:	f000 f87b 	bl	8006eec <_free_r>
 8006df6:	69e3      	ldr	r3, [r4, #28]
 8006df8:	689d      	ldr	r5, [r3, #8]
 8006dfa:	b15d      	cbz	r5, 8006e14 <_reclaim_reent+0x58>
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	4620      	mov	r0, r4
 8006e00:	682d      	ldr	r5, [r5, #0]
 8006e02:	f000 f873 	bl	8006eec <_free_r>
 8006e06:	e7f8      	b.n	8006dfa <_reclaim_reent+0x3e>
 8006e08:	680e      	ldr	r6, [r1, #0]
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f000 f86e 	bl	8006eec <_free_r>
 8006e10:	4631      	mov	r1, r6
 8006e12:	e7e1      	b.n	8006dd8 <_reclaim_reent+0x1c>
 8006e14:	6961      	ldr	r1, [r4, #20]
 8006e16:	b111      	cbz	r1, 8006e1e <_reclaim_reent+0x62>
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 f867 	bl	8006eec <_free_r>
 8006e1e:	69e1      	ldr	r1, [r4, #28]
 8006e20:	b111      	cbz	r1, 8006e28 <_reclaim_reent+0x6c>
 8006e22:	4620      	mov	r0, r4
 8006e24:	f000 f862 	bl	8006eec <_free_r>
 8006e28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006e2a:	b111      	cbz	r1, 8006e32 <_reclaim_reent+0x76>
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 f85d 	bl	8006eec <_free_r>
 8006e32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e34:	b111      	cbz	r1, 8006e3c <_reclaim_reent+0x80>
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 f858 	bl	8006eec <_free_r>
 8006e3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006e3e:	b111      	cbz	r1, 8006e46 <_reclaim_reent+0x8a>
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 f853 	bl	8006eec <_free_r>
 8006e46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006e48:	b111      	cbz	r1, 8006e50 <_reclaim_reent+0x94>
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f000 f84e 	bl	8006eec <_free_r>
 8006e50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006e52:	b111      	cbz	r1, 8006e5a <_reclaim_reent+0x9e>
 8006e54:	4620      	mov	r0, r4
 8006e56:	f000 f849 	bl	8006eec <_free_r>
 8006e5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006e5c:	b111      	cbz	r1, 8006e64 <_reclaim_reent+0xa8>
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f000 f844 	bl	8006eec <_free_r>
 8006e64:	6a23      	ldr	r3, [r4, #32]
 8006e66:	b11b      	cbz	r3, 8006e70 <_reclaim_reent+0xb4>
 8006e68:	4620      	mov	r0, r4
 8006e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e6e:	4718      	bx	r3
 8006e70:	bd70      	pop	{r4, r5, r6, pc}
 8006e72:	bf00      	nop
 8006e74:	20000070 	.word	0x20000070

08006e78 <__errno>:
 8006e78:	4b01      	ldr	r3, [pc, #4]	@ (8006e80 <__errno+0x8>)
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	20000070 	.word	0x20000070

08006e84 <__libc_init_array>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	4d0d      	ldr	r5, [pc, #52]	@ (8006ebc <__libc_init_array+0x38>)
 8006e88:	4c0d      	ldr	r4, [pc, #52]	@ (8006ec0 <__libc_init_array+0x3c>)
 8006e8a:	1b64      	subs	r4, r4, r5
 8006e8c:	10a4      	asrs	r4, r4, #2
 8006e8e:	2600      	movs	r6, #0
 8006e90:	42a6      	cmp	r6, r4
 8006e92:	d109      	bne.n	8006ea8 <__libc_init_array+0x24>
 8006e94:	4d0b      	ldr	r5, [pc, #44]	@ (8006ec4 <__libc_init_array+0x40>)
 8006e96:	4c0c      	ldr	r4, [pc, #48]	@ (8006ec8 <__libc_init_array+0x44>)
 8006e98:	f000 fc64 	bl	8007764 <_init>
 8006e9c:	1b64      	subs	r4, r4, r5
 8006e9e:	10a4      	asrs	r4, r4, #2
 8006ea0:	2600      	movs	r6, #0
 8006ea2:	42a6      	cmp	r6, r4
 8006ea4:	d105      	bne.n	8006eb2 <__libc_init_array+0x2e>
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eac:	4798      	blx	r3
 8006eae:	3601      	adds	r6, #1
 8006eb0:	e7ee      	b.n	8006e90 <__libc_init_array+0xc>
 8006eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb6:	4798      	blx	r3
 8006eb8:	3601      	adds	r6, #1
 8006eba:	e7f2      	b.n	8006ea2 <__libc_init_array+0x1e>
 8006ebc:	08007940 	.word	0x08007940
 8006ec0:	08007940 	.word	0x08007940
 8006ec4:	08007940 	.word	0x08007940
 8006ec8:	08007944 	.word	0x08007944

08006ecc <__retarget_lock_acquire_recursive>:
 8006ecc:	4770      	bx	lr

08006ece <__retarget_lock_release_recursive>:
 8006ece:	4770      	bx	lr

08006ed0 <memcpy>:
 8006ed0:	440a      	add	r2, r1
 8006ed2:	4291      	cmp	r1, r2
 8006ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ed8:	d100      	bne.n	8006edc <memcpy+0xc>
 8006eda:	4770      	bx	lr
 8006edc:	b510      	push	{r4, lr}
 8006ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ee6:	4291      	cmp	r1, r2
 8006ee8:	d1f9      	bne.n	8006ede <memcpy+0xe>
 8006eea:	bd10      	pop	{r4, pc}

08006eec <_free_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4605      	mov	r5, r0
 8006ef0:	2900      	cmp	r1, #0
 8006ef2:	d041      	beq.n	8006f78 <_free_r+0x8c>
 8006ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ef8:	1f0c      	subs	r4, r1, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bfb8      	it	lt
 8006efe:	18e4      	addlt	r4, r4, r3
 8006f00:	f000 f8e0 	bl	80070c4 <__malloc_lock>
 8006f04:	4a1d      	ldr	r2, [pc, #116]	@ (8006f7c <_free_r+0x90>)
 8006f06:	6813      	ldr	r3, [r2, #0]
 8006f08:	b933      	cbnz	r3, 8006f18 <_free_r+0x2c>
 8006f0a:	6063      	str	r3, [r4, #4]
 8006f0c:	6014      	str	r4, [r2, #0]
 8006f0e:	4628      	mov	r0, r5
 8006f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f14:	f000 b8dc 	b.w	80070d0 <__malloc_unlock>
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	d908      	bls.n	8006f2e <_free_r+0x42>
 8006f1c:	6820      	ldr	r0, [r4, #0]
 8006f1e:	1821      	adds	r1, r4, r0
 8006f20:	428b      	cmp	r3, r1
 8006f22:	bf01      	itttt	eq
 8006f24:	6819      	ldreq	r1, [r3, #0]
 8006f26:	685b      	ldreq	r3, [r3, #4]
 8006f28:	1809      	addeq	r1, r1, r0
 8006f2a:	6021      	streq	r1, [r4, #0]
 8006f2c:	e7ed      	b.n	8006f0a <_free_r+0x1e>
 8006f2e:	461a      	mov	r2, r3
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	b10b      	cbz	r3, 8006f38 <_free_r+0x4c>
 8006f34:	42a3      	cmp	r3, r4
 8006f36:	d9fa      	bls.n	8006f2e <_free_r+0x42>
 8006f38:	6811      	ldr	r1, [r2, #0]
 8006f3a:	1850      	adds	r0, r2, r1
 8006f3c:	42a0      	cmp	r0, r4
 8006f3e:	d10b      	bne.n	8006f58 <_free_r+0x6c>
 8006f40:	6820      	ldr	r0, [r4, #0]
 8006f42:	4401      	add	r1, r0
 8006f44:	1850      	adds	r0, r2, r1
 8006f46:	4283      	cmp	r3, r0
 8006f48:	6011      	str	r1, [r2, #0]
 8006f4a:	d1e0      	bne.n	8006f0e <_free_r+0x22>
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	6053      	str	r3, [r2, #4]
 8006f52:	4408      	add	r0, r1
 8006f54:	6010      	str	r0, [r2, #0]
 8006f56:	e7da      	b.n	8006f0e <_free_r+0x22>
 8006f58:	d902      	bls.n	8006f60 <_free_r+0x74>
 8006f5a:	230c      	movs	r3, #12
 8006f5c:	602b      	str	r3, [r5, #0]
 8006f5e:	e7d6      	b.n	8006f0e <_free_r+0x22>
 8006f60:	6820      	ldr	r0, [r4, #0]
 8006f62:	1821      	adds	r1, r4, r0
 8006f64:	428b      	cmp	r3, r1
 8006f66:	bf04      	itt	eq
 8006f68:	6819      	ldreq	r1, [r3, #0]
 8006f6a:	685b      	ldreq	r3, [r3, #4]
 8006f6c:	6063      	str	r3, [r4, #4]
 8006f6e:	bf04      	itt	eq
 8006f70:	1809      	addeq	r1, r1, r0
 8006f72:	6021      	streq	r1, [r4, #0]
 8006f74:	6054      	str	r4, [r2, #4]
 8006f76:	e7ca      	b.n	8006f0e <_free_r+0x22>
 8006f78:	bd38      	pop	{r3, r4, r5, pc}
 8006f7a:	bf00      	nop
 8006f7c:	200043c0 	.word	0x200043c0

08006f80 <sbrk_aligned>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	4e0f      	ldr	r6, [pc, #60]	@ (8006fc0 <sbrk_aligned+0x40>)
 8006f84:	460c      	mov	r4, r1
 8006f86:	6831      	ldr	r1, [r6, #0]
 8006f88:	4605      	mov	r5, r0
 8006f8a:	b911      	cbnz	r1, 8006f92 <sbrk_aligned+0x12>
 8006f8c:	f000 fba4 	bl	80076d8 <_sbrk_r>
 8006f90:	6030      	str	r0, [r6, #0]
 8006f92:	4621      	mov	r1, r4
 8006f94:	4628      	mov	r0, r5
 8006f96:	f000 fb9f 	bl	80076d8 <_sbrk_r>
 8006f9a:	1c43      	adds	r3, r0, #1
 8006f9c:	d103      	bne.n	8006fa6 <sbrk_aligned+0x26>
 8006f9e:	f04f 34ff 	mov.w	r4, #4294967295
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	bd70      	pop	{r4, r5, r6, pc}
 8006fa6:	1cc4      	adds	r4, r0, #3
 8006fa8:	f024 0403 	bic.w	r4, r4, #3
 8006fac:	42a0      	cmp	r0, r4
 8006fae:	d0f8      	beq.n	8006fa2 <sbrk_aligned+0x22>
 8006fb0:	1a21      	subs	r1, r4, r0
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f000 fb90 	bl	80076d8 <_sbrk_r>
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d1f2      	bne.n	8006fa2 <sbrk_aligned+0x22>
 8006fbc:	e7ef      	b.n	8006f9e <sbrk_aligned+0x1e>
 8006fbe:	bf00      	nop
 8006fc0:	200043bc 	.word	0x200043bc

08006fc4 <_malloc_r>:
 8006fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc8:	1ccd      	adds	r5, r1, #3
 8006fca:	f025 0503 	bic.w	r5, r5, #3
 8006fce:	3508      	adds	r5, #8
 8006fd0:	2d0c      	cmp	r5, #12
 8006fd2:	bf38      	it	cc
 8006fd4:	250c      	movcc	r5, #12
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	4606      	mov	r6, r0
 8006fda:	db01      	blt.n	8006fe0 <_malloc_r+0x1c>
 8006fdc:	42a9      	cmp	r1, r5
 8006fde:	d904      	bls.n	8006fea <_malloc_r+0x26>
 8006fe0:	230c      	movs	r3, #12
 8006fe2:	6033      	str	r3, [r6, #0]
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070c0 <_malloc_r+0xfc>
 8006fee:	f000 f869 	bl	80070c4 <__malloc_lock>
 8006ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ff6:	461c      	mov	r4, r3
 8006ff8:	bb44      	cbnz	r4, 800704c <_malloc_r+0x88>
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f7ff ffbf 	bl	8006f80 <sbrk_aligned>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	4604      	mov	r4, r0
 8007006:	d158      	bne.n	80070ba <_malloc_r+0xf6>
 8007008:	f8d8 4000 	ldr.w	r4, [r8]
 800700c:	4627      	mov	r7, r4
 800700e:	2f00      	cmp	r7, #0
 8007010:	d143      	bne.n	800709a <_malloc_r+0xd6>
 8007012:	2c00      	cmp	r4, #0
 8007014:	d04b      	beq.n	80070ae <_malloc_r+0xea>
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	4639      	mov	r1, r7
 800701a:	4630      	mov	r0, r6
 800701c:	eb04 0903 	add.w	r9, r4, r3
 8007020:	f000 fb5a 	bl	80076d8 <_sbrk_r>
 8007024:	4581      	cmp	r9, r0
 8007026:	d142      	bne.n	80070ae <_malloc_r+0xea>
 8007028:	6821      	ldr	r1, [r4, #0]
 800702a:	1a6d      	subs	r5, r5, r1
 800702c:	4629      	mov	r1, r5
 800702e:	4630      	mov	r0, r6
 8007030:	f7ff ffa6 	bl	8006f80 <sbrk_aligned>
 8007034:	3001      	adds	r0, #1
 8007036:	d03a      	beq.n	80070ae <_malloc_r+0xea>
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	442b      	add	r3, r5
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	f8d8 3000 	ldr.w	r3, [r8]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	bb62      	cbnz	r2, 80070a0 <_malloc_r+0xdc>
 8007046:	f8c8 7000 	str.w	r7, [r8]
 800704a:	e00f      	b.n	800706c <_malloc_r+0xa8>
 800704c:	6822      	ldr	r2, [r4, #0]
 800704e:	1b52      	subs	r2, r2, r5
 8007050:	d420      	bmi.n	8007094 <_malloc_r+0xd0>
 8007052:	2a0b      	cmp	r2, #11
 8007054:	d917      	bls.n	8007086 <_malloc_r+0xc2>
 8007056:	1961      	adds	r1, r4, r5
 8007058:	42a3      	cmp	r3, r4
 800705a:	6025      	str	r5, [r4, #0]
 800705c:	bf18      	it	ne
 800705e:	6059      	strne	r1, [r3, #4]
 8007060:	6863      	ldr	r3, [r4, #4]
 8007062:	bf08      	it	eq
 8007064:	f8c8 1000 	streq.w	r1, [r8]
 8007068:	5162      	str	r2, [r4, r5]
 800706a:	604b      	str	r3, [r1, #4]
 800706c:	4630      	mov	r0, r6
 800706e:	f000 f82f 	bl	80070d0 <__malloc_unlock>
 8007072:	f104 000b 	add.w	r0, r4, #11
 8007076:	1d23      	adds	r3, r4, #4
 8007078:	f020 0007 	bic.w	r0, r0, #7
 800707c:	1ac2      	subs	r2, r0, r3
 800707e:	bf1c      	itt	ne
 8007080:	1a1b      	subne	r3, r3, r0
 8007082:	50a3      	strne	r3, [r4, r2]
 8007084:	e7af      	b.n	8006fe6 <_malloc_r+0x22>
 8007086:	6862      	ldr	r2, [r4, #4]
 8007088:	42a3      	cmp	r3, r4
 800708a:	bf0c      	ite	eq
 800708c:	f8c8 2000 	streq.w	r2, [r8]
 8007090:	605a      	strne	r2, [r3, #4]
 8007092:	e7eb      	b.n	800706c <_malloc_r+0xa8>
 8007094:	4623      	mov	r3, r4
 8007096:	6864      	ldr	r4, [r4, #4]
 8007098:	e7ae      	b.n	8006ff8 <_malloc_r+0x34>
 800709a:	463c      	mov	r4, r7
 800709c:	687f      	ldr	r7, [r7, #4]
 800709e:	e7b6      	b.n	800700e <_malloc_r+0x4a>
 80070a0:	461a      	mov	r2, r3
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	42a3      	cmp	r3, r4
 80070a6:	d1fb      	bne.n	80070a0 <_malloc_r+0xdc>
 80070a8:	2300      	movs	r3, #0
 80070aa:	6053      	str	r3, [r2, #4]
 80070ac:	e7de      	b.n	800706c <_malloc_r+0xa8>
 80070ae:	230c      	movs	r3, #12
 80070b0:	6033      	str	r3, [r6, #0]
 80070b2:	4630      	mov	r0, r6
 80070b4:	f000 f80c 	bl	80070d0 <__malloc_unlock>
 80070b8:	e794      	b.n	8006fe4 <_malloc_r+0x20>
 80070ba:	6005      	str	r5, [r0, #0]
 80070bc:	e7d6      	b.n	800706c <_malloc_r+0xa8>
 80070be:	bf00      	nop
 80070c0:	200043c0 	.word	0x200043c0

080070c4 <__malloc_lock>:
 80070c4:	4801      	ldr	r0, [pc, #4]	@ (80070cc <__malloc_lock+0x8>)
 80070c6:	f7ff bf01 	b.w	8006ecc <__retarget_lock_acquire_recursive>
 80070ca:	bf00      	nop
 80070cc:	200043b8 	.word	0x200043b8

080070d0 <__malloc_unlock>:
 80070d0:	4801      	ldr	r0, [pc, #4]	@ (80070d8 <__malloc_unlock+0x8>)
 80070d2:	f7ff befc 	b.w	8006ece <__retarget_lock_release_recursive>
 80070d6:	bf00      	nop
 80070d8:	200043b8 	.word	0x200043b8

080070dc <__ssputs_r>:
 80070dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e0:	688e      	ldr	r6, [r1, #8]
 80070e2:	461f      	mov	r7, r3
 80070e4:	42be      	cmp	r6, r7
 80070e6:	680b      	ldr	r3, [r1, #0]
 80070e8:	4682      	mov	sl, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	4690      	mov	r8, r2
 80070ee:	d82d      	bhi.n	800714c <__ssputs_r+0x70>
 80070f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80070f8:	d026      	beq.n	8007148 <__ssputs_r+0x6c>
 80070fa:	6965      	ldr	r5, [r4, #20]
 80070fc:	6909      	ldr	r1, [r1, #16]
 80070fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007102:	eba3 0901 	sub.w	r9, r3, r1
 8007106:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800710a:	1c7b      	adds	r3, r7, #1
 800710c:	444b      	add	r3, r9
 800710e:	106d      	asrs	r5, r5, #1
 8007110:	429d      	cmp	r5, r3
 8007112:	bf38      	it	cc
 8007114:	461d      	movcc	r5, r3
 8007116:	0553      	lsls	r3, r2, #21
 8007118:	d527      	bpl.n	800716a <__ssputs_r+0x8e>
 800711a:	4629      	mov	r1, r5
 800711c:	f7ff ff52 	bl	8006fc4 <_malloc_r>
 8007120:	4606      	mov	r6, r0
 8007122:	b360      	cbz	r0, 800717e <__ssputs_r+0xa2>
 8007124:	6921      	ldr	r1, [r4, #16]
 8007126:	464a      	mov	r2, r9
 8007128:	f7ff fed2 	bl	8006ed0 <memcpy>
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007136:	81a3      	strh	r3, [r4, #12]
 8007138:	6126      	str	r6, [r4, #16]
 800713a:	6165      	str	r5, [r4, #20]
 800713c:	444e      	add	r6, r9
 800713e:	eba5 0509 	sub.w	r5, r5, r9
 8007142:	6026      	str	r6, [r4, #0]
 8007144:	60a5      	str	r5, [r4, #8]
 8007146:	463e      	mov	r6, r7
 8007148:	42be      	cmp	r6, r7
 800714a:	d900      	bls.n	800714e <__ssputs_r+0x72>
 800714c:	463e      	mov	r6, r7
 800714e:	6820      	ldr	r0, [r4, #0]
 8007150:	4632      	mov	r2, r6
 8007152:	4641      	mov	r1, r8
 8007154:	f000 faa6 	bl	80076a4 <memmove>
 8007158:	68a3      	ldr	r3, [r4, #8]
 800715a:	1b9b      	subs	r3, r3, r6
 800715c:	60a3      	str	r3, [r4, #8]
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	4433      	add	r3, r6
 8007162:	6023      	str	r3, [r4, #0]
 8007164:	2000      	movs	r0, #0
 8007166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716a:	462a      	mov	r2, r5
 800716c:	f000 fac4 	bl	80076f8 <_realloc_r>
 8007170:	4606      	mov	r6, r0
 8007172:	2800      	cmp	r0, #0
 8007174:	d1e0      	bne.n	8007138 <__ssputs_r+0x5c>
 8007176:	6921      	ldr	r1, [r4, #16]
 8007178:	4650      	mov	r0, sl
 800717a:	f7ff feb7 	bl	8006eec <_free_r>
 800717e:	230c      	movs	r3, #12
 8007180:	f8ca 3000 	str.w	r3, [sl]
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800718a:	81a3      	strh	r3, [r4, #12]
 800718c:	f04f 30ff 	mov.w	r0, #4294967295
 8007190:	e7e9      	b.n	8007166 <__ssputs_r+0x8a>
	...

08007194 <_svfiprintf_r>:
 8007194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007198:	4698      	mov	r8, r3
 800719a:	898b      	ldrh	r3, [r1, #12]
 800719c:	061b      	lsls	r3, r3, #24
 800719e:	b09d      	sub	sp, #116	@ 0x74
 80071a0:	4607      	mov	r7, r0
 80071a2:	460d      	mov	r5, r1
 80071a4:	4614      	mov	r4, r2
 80071a6:	d510      	bpl.n	80071ca <_svfiprintf_r+0x36>
 80071a8:	690b      	ldr	r3, [r1, #16]
 80071aa:	b973      	cbnz	r3, 80071ca <_svfiprintf_r+0x36>
 80071ac:	2140      	movs	r1, #64	@ 0x40
 80071ae:	f7ff ff09 	bl	8006fc4 <_malloc_r>
 80071b2:	6028      	str	r0, [r5, #0]
 80071b4:	6128      	str	r0, [r5, #16]
 80071b6:	b930      	cbnz	r0, 80071c6 <_svfiprintf_r+0x32>
 80071b8:	230c      	movs	r3, #12
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	f04f 30ff 	mov.w	r0, #4294967295
 80071c0:	b01d      	add	sp, #116	@ 0x74
 80071c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c6:	2340      	movs	r3, #64	@ 0x40
 80071c8:	616b      	str	r3, [r5, #20]
 80071ca:	2300      	movs	r3, #0
 80071cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ce:	2320      	movs	r3, #32
 80071d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80071d8:	2330      	movs	r3, #48	@ 0x30
 80071da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007378 <_svfiprintf_r+0x1e4>
 80071de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071e2:	f04f 0901 	mov.w	r9, #1
 80071e6:	4623      	mov	r3, r4
 80071e8:	469a      	mov	sl, r3
 80071ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071ee:	b10a      	cbz	r2, 80071f4 <_svfiprintf_r+0x60>
 80071f0:	2a25      	cmp	r2, #37	@ 0x25
 80071f2:	d1f9      	bne.n	80071e8 <_svfiprintf_r+0x54>
 80071f4:	ebba 0b04 	subs.w	fp, sl, r4
 80071f8:	d00b      	beq.n	8007212 <_svfiprintf_r+0x7e>
 80071fa:	465b      	mov	r3, fp
 80071fc:	4622      	mov	r2, r4
 80071fe:	4629      	mov	r1, r5
 8007200:	4638      	mov	r0, r7
 8007202:	f7ff ff6b 	bl	80070dc <__ssputs_r>
 8007206:	3001      	adds	r0, #1
 8007208:	f000 80a7 	beq.w	800735a <_svfiprintf_r+0x1c6>
 800720c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800720e:	445a      	add	r2, fp
 8007210:	9209      	str	r2, [sp, #36]	@ 0x24
 8007212:	f89a 3000 	ldrb.w	r3, [sl]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 809f 	beq.w	800735a <_svfiprintf_r+0x1c6>
 800721c:	2300      	movs	r3, #0
 800721e:	f04f 32ff 	mov.w	r2, #4294967295
 8007222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007226:	f10a 0a01 	add.w	sl, sl, #1
 800722a:	9304      	str	r3, [sp, #16]
 800722c:	9307      	str	r3, [sp, #28]
 800722e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007232:	931a      	str	r3, [sp, #104]	@ 0x68
 8007234:	4654      	mov	r4, sl
 8007236:	2205      	movs	r2, #5
 8007238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800723c:	484e      	ldr	r0, [pc, #312]	@ (8007378 <_svfiprintf_r+0x1e4>)
 800723e:	f7f8 ffcf 	bl	80001e0 <memchr>
 8007242:	9a04      	ldr	r2, [sp, #16]
 8007244:	b9d8      	cbnz	r0, 800727e <_svfiprintf_r+0xea>
 8007246:	06d0      	lsls	r0, r2, #27
 8007248:	bf44      	itt	mi
 800724a:	2320      	movmi	r3, #32
 800724c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007250:	0711      	lsls	r1, r2, #28
 8007252:	bf44      	itt	mi
 8007254:	232b      	movmi	r3, #43	@ 0x2b
 8007256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800725a:	f89a 3000 	ldrb.w	r3, [sl]
 800725e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007260:	d015      	beq.n	800728e <_svfiprintf_r+0xfa>
 8007262:	9a07      	ldr	r2, [sp, #28]
 8007264:	4654      	mov	r4, sl
 8007266:	2000      	movs	r0, #0
 8007268:	f04f 0c0a 	mov.w	ip, #10
 800726c:	4621      	mov	r1, r4
 800726e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007272:	3b30      	subs	r3, #48	@ 0x30
 8007274:	2b09      	cmp	r3, #9
 8007276:	d94b      	bls.n	8007310 <_svfiprintf_r+0x17c>
 8007278:	b1b0      	cbz	r0, 80072a8 <_svfiprintf_r+0x114>
 800727a:	9207      	str	r2, [sp, #28]
 800727c:	e014      	b.n	80072a8 <_svfiprintf_r+0x114>
 800727e:	eba0 0308 	sub.w	r3, r0, r8
 8007282:	fa09 f303 	lsl.w	r3, r9, r3
 8007286:	4313      	orrs	r3, r2
 8007288:	9304      	str	r3, [sp, #16]
 800728a:	46a2      	mov	sl, r4
 800728c:	e7d2      	b.n	8007234 <_svfiprintf_r+0xa0>
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	1d19      	adds	r1, r3, #4
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	9103      	str	r1, [sp, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	bfbb      	ittet	lt
 800729a:	425b      	neglt	r3, r3
 800729c:	f042 0202 	orrlt.w	r2, r2, #2
 80072a0:	9307      	strge	r3, [sp, #28]
 80072a2:	9307      	strlt	r3, [sp, #28]
 80072a4:	bfb8      	it	lt
 80072a6:	9204      	strlt	r2, [sp, #16]
 80072a8:	7823      	ldrb	r3, [r4, #0]
 80072aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80072ac:	d10a      	bne.n	80072c4 <_svfiprintf_r+0x130>
 80072ae:	7863      	ldrb	r3, [r4, #1]
 80072b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80072b2:	d132      	bne.n	800731a <_svfiprintf_r+0x186>
 80072b4:	9b03      	ldr	r3, [sp, #12]
 80072b6:	1d1a      	adds	r2, r3, #4
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	9203      	str	r2, [sp, #12]
 80072bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072c0:	3402      	adds	r4, #2
 80072c2:	9305      	str	r3, [sp, #20]
 80072c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007388 <_svfiprintf_r+0x1f4>
 80072c8:	7821      	ldrb	r1, [r4, #0]
 80072ca:	2203      	movs	r2, #3
 80072cc:	4650      	mov	r0, sl
 80072ce:	f7f8 ff87 	bl	80001e0 <memchr>
 80072d2:	b138      	cbz	r0, 80072e4 <_svfiprintf_r+0x150>
 80072d4:	9b04      	ldr	r3, [sp, #16]
 80072d6:	eba0 000a 	sub.w	r0, r0, sl
 80072da:	2240      	movs	r2, #64	@ 0x40
 80072dc:	4082      	lsls	r2, r0
 80072de:	4313      	orrs	r3, r2
 80072e0:	3401      	adds	r4, #1
 80072e2:	9304      	str	r3, [sp, #16]
 80072e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e8:	4824      	ldr	r0, [pc, #144]	@ (800737c <_svfiprintf_r+0x1e8>)
 80072ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072ee:	2206      	movs	r2, #6
 80072f0:	f7f8 ff76 	bl	80001e0 <memchr>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d036      	beq.n	8007366 <_svfiprintf_r+0x1d2>
 80072f8:	4b21      	ldr	r3, [pc, #132]	@ (8007380 <_svfiprintf_r+0x1ec>)
 80072fa:	bb1b      	cbnz	r3, 8007344 <_svfiprintf_r+0x1b0>
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	3307      	adds	r3, #7
 8007300:	f023 0307 	bic.w	r3, r3, #7
 8007304:	3308      	adds	r3, #8
 8007306:	9303      	str	r3, [sp, #12]
 8007308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730a:	4433      	add	r3, r6
 800730c:	9309      	str	r3, [sp, #36]	@ 0x24
 800730e:	e76a      	b.n	80071e6 <_svfiprintf_r+0x52>
 8007310:	fb0c 3202 	mla	r2, ip, r2, r3
 8007314:	460c      	mov	r4, r1
 8007316:	2001      	movs	r0, #1
 8007318:	e7a8      	b.n	800726c <_svfiprintf_r+0xd8>
 800731a:	2300      	movs	r3, #0
 800731c:	3401      	adds	r4, #1
 800731e:	9305      	str	r3, [sp, #20]
 8007320:	4619      	mov	r1, r3
 8007322:	f04f 0c0a 	mov.w	ip, #10
 8007326:	4620      	mov	r0, r4
 8007328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800732c:	3a30      	subs	r2, #48	@ 0x30
 800732e:	2a09      	cmp	r2, #9
 8007330:	d903      	bls.n	800733a <_svfiprintf_r+0x1a6>
 8007332:	2b00      	cmp	r3, #0
 8007334:	d0c6      	beq.n	80072c4 <_svfiprintf_r+0x130>
 8007336:	9105      	str	r1, [sp, #20]
 8007338:	e7c4      	b.n	80072c4 <_svfiprintf_r+0x130>
 800733a:	fb0c 2101 	mla	r1, ip, r1, r2
 800733e:	4604      	mov	r4, r0
 8007340:	2301      	movs	r3, #1
 8007342:	e7f0      	b.n	8007326 <_svfiprintf_r+0x192>
 8007344:	ab03      	add	r3, sp, #12
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	462a      	mov	r2, r5
 800734a:	4b0e      	ldr	r3, [pc, #56]	@ (8007384 <_svfiprintf_r+0x1f0>)
 800734c:	a904      	add	r1, sp, #16
 800734e:	4638      	mov	r0, r7
 8007350:	f3af 8000 	nop.w
 8007354:	1c42      	adds	r2, r0, #1
 8007356:	4606      	mov	r6, r0
 8007358:	d1d6      	bne.n	8007308 <_svfiprintf_r+0x174>
 800735a:	89ab      	ldrh	r3, [r5, #12]
 800735c:	065b      	lsls	r3, r3, #25
 800735e:	f53f af2d 	bmi.w	80071bc <_svfiprintf_r+0x28>
 8007362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007364:	e72c      	b.n	80071c0 <_svfiprintf_r+0x2c>
 8007366:	ab03      	add	r3, sp, #12
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	462a      	mov	r2, r5
 800736c:	4b05      	ldr	r3, [pc, #20]	@ (8007384 <_svfiprintf_r+0x1f0>)
 800736e:	a904      	add	r1, sp, #16
 8007370:	4638      	mov	r0, r7
 8007372:	f000 f879 	bl	8007468 <_printf_i>
 8007376:	e7ed      	b.n	8007354 <_svfiprintf_r+0x1c0>
 8007378:	08007904 	.word	0x08007904
 800737c:	0800790e 	.word	0x0800790e
 8007380:	00000000 	.word	0x00000000
 8007384:	080070dd 	.word	0x080070dd
 8007388:	0800790a 	.word	0x0800790a

0800738c <_printf_common>:
 800738c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007390:	4616      	mov	r6, r2
 8007392:	4698      	mov	r8, r3
 8007394:	688a      	ldr	r2, [r1, #8]
 8007396:	690b      	ldr	r3, [r1, #16]
 8007398:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800739c:	4293      	cmp	r3, r2
 800739e:	bfb8      	it	lt
 80073a0:	4613      	movlt	r3, r2
 80073a2:	6033      	str	r3, [r6, #0]
 80073a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073a8:	4607      	mov	r7, r0
 80073aa:	460c      	mov	r4, r1
 80073ac:	b10a      	cbz	r2, 80073b2 <_printf_common+0x26>
 80073ae:	3301      	adds	r3, #1
 80073b0:	6033      	str	r3, [r6, #0]
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	0699      	lsls	r1, r3, #26
 80073b6:	bf42      	ittt	mi
 80073b8:	6833      	ldrmi	r3, [r6, #0]
 80073ba:	3302      	addmi	r3, #2
 80073bc:	6033      	strmi	r3, [r6, #0]
 80073be:	6825      	ldr	r5, [r4, #0]
 80073c0:	f015 0506 	ands.w	r5, r5, #6
 80073c4:	d106      	bne.n	80073d4 <_printf_common+0x48>
 80073c6:	f104 0a19 	add.w	sl, r4, #25
 80073ca:	68e3      	ldr	r3, [r4, #12]
 80073cc:	6832      	ldr	r2, [r6, #0]
 80073ce:	1a9b      	subs	r3, r3, r2
 80073d0:	42ab      	cmp	r3, r5
 80073d2:	dc26      	bgt.n	8007422 <_printf_common+0x96>
 80073d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073d8:	6822      	ldr	r2, [r4, #0]
 80073da:	3b00      	subs	r3, #0
 80073dc:	bf18      	it	ne
 80073de:	2301      	movne	r3, #1
 80073e0:	0692      	lsls	r2, r2, #26
 80073e2:	d42b      	bmi.n	800743c <_printf_common+0xb0>
 80073e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073e8:	4641      	mov	r1, r8
 80073ea:	4638      	mov	r0, r7
 80073ec:	47c8      	blx	r9
 80073ee:	3001      	adds	r0, #1
 80073f0:	d01e      	beq.n	8007430 <_printf_common+0xa4>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	6922      	ldr	r2, [r4, #16]
 80073f6:	f003 0306 	and.w	r3, r3, #6
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	bf02      	ittt	eq
 80073fe:	68e5      	ldreq	r5, [r4, #12]
 8007400:	6833      	ldreq	r3, [r6, #0]
 8007402:	1aed      	subeq	r5, r5, r3
 8007404:	68a3      	ldr	r3, [r4, #8]
 8007406:	bf0c      	ite	eq
 8007408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800740c:	2500      	movne	r5, #0
 800740e:	4293      	cmp	r3, r2
 8007410:	bfc4      	itt	gt
 8007412:	1a9b      	subgt	r3, r3, r2
 8007414:	18ed      	addgt	r5, r5, r3
 8007416:	2600      	movs	r6, #0
 8007418:	341a      	adds	r4, #26
 800741a:	42b5      	cmp	r5, r6
 800741c:	d11a      	bne.n	8007454 <_printf_common+0xc8>
 800741e:	2000      	movs	r0, #0
 8007420:	e008      	b.n	8007434 <_printf_common+0xa8>
 8007422:	2301      	movs	r3, #1
 8007424:	4652      	mov	r2, sl
 8007426:	4641      	mov	r1, r8
 8007428:	4638      	mov	r0, r7
 800742a:	47c8      	blx	r9
 800742c:	3001      	adds	r0, #1
 800742e:	d103      	bne.n	8007438 <_printf_common+0xac>
 8007430:	f04f 30ff 	mov.w	r0, #4294967295
 8007434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007438:	3501      	adds	r5, #1
 800743a:	e7c6      	b.n	80073ca <_printf_common+0x3e>
 800743c:	18e1      	adds	r1, r4, r3
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	2030      	movs	r0, #48	@ 0x30
 8007442:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007446:	4422      	add	r2, r4
 8007448:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800744c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007450:	3302      	adds	r3, #2
 8007452:	e7c7      	b.n	80073e4 <_printf_common+0x58>
 8007454:	2301      	movs	r3, #1
 8007456:	4622      	mov	r2, r4
 8007458:	4641      	mov	r1, r8
 800745a:	4638      	mov	r0, r7
 800745c:	47c8      	blx	r9
 800745e:	3001      	adds	r0, #1
 8007460:	d0e6      	beq.n	8007430 <_printf_common+0xa4>
 8007462:	3601      	adds	r6, #1
 8007464:	e7d9      	b.n	800741a <_printf_common+0x8e>
	...

08007468 <_printf_i>:
 8007468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800746c:	7e0f      	ldrb	r7, [r1, #24]
 800746e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007470:	2f78      	cmp	r7, #120	@ 0x78
 8007472:	4691      	mov	r9, r2
 8007474:	4680      	mov	r8, r0
 8007476:	460c      	mov	r4, r1
 8007478:	469a      	mov	sl, r3
 800747a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800747e:	d807      	bhi.n	8007490 <_printf_i+0x28>
 8007480:	2f62      	cmp	r7, #98	@ 0x62
 8007482:	d80a      	bhi.n	800749a <_printf_i+0x32>
 8007484:	2f00      	cmp	r7, #0
 8007486:	f000 80d1 	beq.w	800762c <_printf_i+0x1c4>
 800748a:	2f58      	cmp	r7, #88	@ 0x58
 800748c:	f000 80b8 	beq.w	8007600 <_printf_i+0x198>
 8007490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007494:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007498:	e03a      	b.n	8007510 <_printf_i+0xa8>
 800749a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800749e:	2b15      	cmp	r3, #21
 80074a0:	d8f6      	bhi.n	8007490 <_printf_i+0x28>
 80074a2:	a101      	add	r1, pc, #4	@ (adr r1, 80074a8 <_printf_i+0x40>)
 80074a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074a8:	08007501 	.word	0x08007501
 80074ac:	08007515 	.word	0x08007515
 80074b0:	08007491 	.word	0x08007491
 80074b4:	08007491 	.word	0x08007491
 80074b8:	08007491 	.word	0x08007491
 80074bc:	08007491 	.word	0x08007491
 80074c0:	08007515 	.word	0x08007515
 80074c4:	08007491 	.word	0x08007491
 80074c8:	08007491 	.word	0x08007491
 80074cc:	08007491 	.word	0x08007491
 80074d0:	08007491 	.word	0x08007491
 80074d4:	08007613 	.word	0x08007613
 80074d8:	0800753f 	.word	0x0800753f
 80074dc:	080075cd 	.word	0x080075cd
 80074e0:	08007491 	.word	0x08007491
 80074e4:	08007491 	.word	0x08007491
 80074e8:	08007635 	.word	0x08007635
 80074ec:	08007491 	.word	0x08007491
 80074f0:	0800753f 	.word	0x0800753f
 80074f4:	08007491 	.word	0x08007491
 80074f8:	08007491 	.word	0x08007491
 80074fc:	080075d5 	.word	0x080075d5
 8007500:	6833      	ldr	r3, [r6, #0]
 8007502:	1d1a      	adds	r2, r3, #4
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6032      	str	r2, [r6, #0]
 8007508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800750c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007510:	2301      	movs	r3, #1
 8007512:	e09c      	b.n	800764e <_printf_i+0x1e6>
 8007514:	6833      	ldr	r3, [r6, #0]
 8007516:	6820      	ldr	r0, [r4, #0]
 8007518:	1d19      	adds	r1, r3, #4
 800751a:	6031      	str	r1, [r6, #0]
 800751c:	0606      	lsls	r6, r0, #24
 800751e:	d501      	bpl.n	8007524 <_printf_i+0xbc>
 8007520:	681d      	ldr	r5, [r3, #0]
 8007522:	e003      	b.n	800752c <_printf_i+0xc4>
 8007524:	0645      	lsls	r5, r0, #25
 8007526:	d5fb      	bpl.n	8007520 <_printf_i+0xb8>
 8007528:	f9b3 5000 	ldrsh.w	r5, [r3]
 800752c:	2d00      	cmp	r5, #0
 800752e:	da03      	bge.n	8007538 <_printf_i+0xd0>
 8007530:	232d      	movs	r3, #45	@ 0x2d
 8007532:	426d      	negs	r5, r5
 8007534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007538:	4858      	ldr	r0, [pc, #352]	@ (800769c <_printf_i+0x234>)
 800753a:	230a      	movs	r3, #10
 800753c:	e011      	b.n	8007562 <_printf_i+0xfa>
 800753e:	6821      	ldr	r1, [r4, #0]
 8007540:	6833      	ldr	r3, [r6, #0]
 8007542:	0608      	lsls	r0, r1, #24
 8007544:	f853 5b04 	ldr.w	r5, [r3], #4
 8007548:	d402      	bmi.n	8007550 <_printf_i+0xe8>
 800754a:	0649      	lsls	r1, r1, #25
 800754c:	bf48      	it	mi
 800754e:	b2ad      	uxthmi	r5, r5
 8007550:	2f6f      	cmp	r7, #111	@ 0x6f
 8007552:	4852      	ldr	r0, [pc, #328]	@ (800769c <_printf_i+0x234>)
 8007554:	6033      	str	r3, [r6, #0]
 8007556:	bf14      	ite	ne
 8007558:	230a      	movne	r3, #10
 800755a:	2308      	moveq	r3, #8
 800755c:	2100      	movs	r1, #0
 800755e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007562:	6866      	ldr	r6, [r4, #4]
 8007564:	60a6      	str	r6, [r4, #8]
 8007566:	2e00      	cmp	r6, #0
 8007568:	db05      	blt.n	8007576 <_printf_i+0x10e>
 800756a:	6821      	ldr	r1, [r4, #0]
 800756c:	432e      	orrs	r6, r5
 800756e:	f021 0104 	bic.w	r1, r1, #4
 8007572:	6021      	str	r1, [r4, #0]
 8007574:	d04b      	beq.n	800760e <_printf_i+0x1a6>
 8007576:	4616      	mov	r6, r2
 8007578:	fbb5 f1f3 	udiv	r1, r5, r3
 800757c:	fb03 5711 	mls	r7, r3, r1, r5
 8007580:	5dc7      	ldrb	r7, [r0, r7]
 8007582:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007586:	462f      	mov	r7, r5
 8007588:	42bb      	cmp	r3, r7
 800758a:	460d      	mov	r5, r1
 800758c:	d9f4      	bls.n	8007578 <_printf_i+0x110>
 800758e:	2b08      	cmp	r3, #8
 8007590:	d10b      	bne.n	80075aa <_printf_i+0x142>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	07df      	lsls	r7, r3, #31
 8007596:	d508      	bpl.n	80075aa <_printf_i+0x142>
 8007598:	6923      	ldr	r3, [r4, #16]
 800759a:	6861      	ldr	r1, [r4, #4]
 800759c:	4299      	cmp	r1, r3
 800759e:	bfde      	ittt	le
 80075a0:	2330      	movle	r3, #48	@ 0x30
 80075a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075aa:	1b92      	subs	r2, r2, r6
 80075ac:	6122      	str	r2, [r4, #16]
 80075ae:	f8cd a000 	str.w	sl, [sp]
 80075b2:	464b      	mov	r3, r9
 80075b4:	aa03      	add	r2, sp, #12
 80075b6:	4621      	mov	r1, r4
 80075b8:	4640      	mov	r0, r8
 80075ba:	f7ff fee7 	bl	800738c <_printf_common>
 80075be:	3001      	adds	r0, #1
 80075c0:	d14a      	bne.n	8007658 <_printf_i+0x1f0>
 80075c2:	f04f 30ff 	mov.w	r0, #4294967295
 80075c6:	b004      	add	sp, #16
 80075c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	f043 0320 	orr.w	r3, r3, #32
 80075d2:	6023      	str	r3, [r4, #0]
 80075d4:	4832      	ldr	r0, [pc, #200]	@ (80076a0 <_printf_i+0x238>)
 80075d6:	2778      	movs	r7, #120	@ 0x78
 80075d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	6831      	ldr	r1, [r6, #0]
 80075e0:	061f      	lsls	r7, r3, #24
 80075e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80075e6:	d402      	bmi.n	80075ee <_printf_i+0x186>
 80075e8:	065f      	lsls	r7, r3, #25
 80075ea:	bf48      	it	mi
 80075ec:	b2ad      	uxthmi	r5, r5
 80075ee:	6031      	str	r1, [r6, #0]
 80075f0:	07d9      	lsls	r1, r3, #31
 80075f2:	bf44      	itt	mi
 80075f4:	f043 0320 	orrmi.w	r3, r3, #32
 80075f8:	6023      	strmi	r3, [r4, #0]
 80075fa:	b11d      	cbz	r5, 8007604 <_printf_i+0x19c>
 80075fc:	2310      	movs	r3, #16
 80075fe:	e7ad      	b.n	800755c <_printf_i+0xf4>
 8007600:	4826      	ldr	r0, [pc, #152]	@ (800769c <_printf_i+0x234>)
 8007602:	e7e9      	b.n	80075d8 <_printf_i+0x170>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	f023 0320 	bic.w	r3, r3, #32
 800760a:	6023      	str	r3, [r4, #0]
 800760c:	e7f6      	b.n	80075fc <_printf_i+0x194>
 800760e:	4616      	mov	r6, r2
 8007610:	e7bd      	b.n	800758e <_printf_i+0x126>
 8007612:	6833      	ldr	r3, [r6, #0]
 8007614:	6825      	ldr	r5, [r4, #0]
 8007616:	6961      	ldr	r1, [r4, #20]
 8007618:	1d18      	adds	r0, r3, #4
 800761a:	6030      	str	r0, [r6, #0]
 800761c:	062e      	lsls	r6, r5, #24
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	d501      	bpl.n	8007626 <_printf_i+0x1be>
 8007622:	6019      	str	r1, [r3, #0]
 8007624:	e002      	b.n	800762c <_printf_i+0x1c4>
 8007626:	0668      	lsls	r0, r5, #25
 8007628:	d5fb      	bpl.n	8007622 <_printf_i+0x1ba>
 800762a:	8019      	strh	r1, [r3, #0]
 800762c:	2300      	movs	r3, #0
 800762e:	6123      	str	r3, [r4, #16]
 8007630:	4616      	mov	r6, r2
 8007632:	e7bc      	b.n	80075ae <_printf_i+0x146>
 8007634:	6833      	ldr	r3, [r6, #0]
 8007636:	1d1a      	adds	r2, r3, #4
 8007638:	6032      	str	r2, [r6, #0]
 800763a:	681e      	ldr	r6, [r3, #0]
 800763c:	6862      	ldr	r2, [r4, #4]
 800763e:	2100      	movs	r1, #0
 8007640:	4630      	mov	r0, r6
 8007642:	f7f8 fdcd 	bl	80001e0 <memchr>
 8007646:	b108      	cbz	r0, 800764c <_printf_i+0x1e4>
 8007648:	1b80      	subs	r0, r0, r6
 800764a:	6060      	str	r0, [r4, #4]
 800764c:	6863      	ldr	r3, [r4, #4]
 800764e:	6123      	str	r3, [r4, #16]
 8007650:	2300      	movs	r3, #0
 8007652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007656:	e7aa      	b.n	80075ae <_printf_i+0x146>
 8007658:	6923      	ldr	r3, [r4, #16]
 800765a:	4632      	mov	r2, r6
 800765c:	4649      	mov	r1, r9
 800765e:	4640      	mov	r0, r8
 8007660:	47d0      	blx	sl
 8007662:	3001      	adds	r0, #1
 8007664:	d0ad      	beq.n	80075c2 <_printf_i+0x15a>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	079b      	lsls	r3, r3, #30
 800766a:	d413      	bmi.n	8007694 <_printf_i+0x22c>
 800766c:	68e0      	ldr	r0, [r4, #12]
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	4298      	cmp	r0, r3
 8007672:	bfb8      	it	lt
 8007674:	4618      	movlt	r0, r3
 8007676:	e7a6      	b.n	80075c6 <_printf_i+0x15e>
 8007678:	2301      	movs	r3, #1
 800767a:	4632      	mov	r2, r6
 800767c:	4649      	mov	r1, r9
 800767e:	4640      	mov	r0, r8
 8007680:	47d0      	blx	sl
 8007682:	3001      	adds	r0, #1
 8007684:	d09d      	beq.n	80075c2 <_printf_i+0x15a>
 8007686:	3501      	adds	r5, #1
 8007688:	68e3      	ldr	r3, [r4, #12]
 800768a:	9903      	ldr	r1, [sp, #12]
 800768c:	1a5b      	subs	r3, r3, r1
 800768e:	42ab      	cmp	r3, r5
 8007690:	dcf2      	bgt.n	8007678 <_printf_i+0x210>
 8007692:	e7eb      	b.n	800766c <_printf_i+0x204>
 8007694:	2500      	movs	r5, #0
 8007696:	f104 0619 	add.w	r6, r4, #25
 800769a:	e7f5      	b.n	8007688 <_printf_i+0x220>
 800769c:	08007915 	.word	0x08007915
 80076a0:	08007926 	.word	0x08007926

080076a4 <memmove>:
 80076a4:	4288      	cmp	r0, r1
 80076a6:	b510      	push	{r4, lr}
 80076a8:	eb01 0402 	add.w	r4, r1, r2
 80076ac:	d902      	bls.n	80076b4 <memmove+0x10>
 80076ae:	4284      	cmp	r4, r0
 80076b0:	4623      	mov	r3, r4
 80076b2:	d807      	bhi.n	80076c4 <memmove+0x20>
 80076b4:	1e43      	subs	r3, r0, #1
 80076b6:	42a1      	cmp	r1, r4
 80076b8:	d008      	beq.n	80076cc <memmove+0x28>
 80076ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076c2:	e7f8      	b.n	80076b6 <memmove+0x12>
 80076c4:	4402      	add	r2, r0
 80076c6:	4601      	mov	r1, r0
 80076c8:	428a      	cmp	r2, r1
 80076ca:	d100      	bne.n	80076ce <memmove+0x2a>
 80076cc:	bd10      	pop	{r4, pc}
 80076ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076d6:	e7f7      	b.n	80076c8 <memmove+0x24>

080076d8 <_sbrk_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4d06      	ldr	r5, [pc, #24]	@ (80076f4 <_sbrk_r+0x1c>)
 80076dc:	2300      	movs	r3, #0
 80076de:	4604      	mov	r4, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	602b      	str	r3, [r5, #0]
 80076e4:	f7f9 fab6 	bl	8000c54 <_sbrk>
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	d102      	bne.n	80076f2 <_sbrk_r+0x1a>
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	b103      	cbz	r3, 80076f2 <_sbrk_r+0x1a>
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	200043b4 	.word	0x200043b4

080076f8 <_realloc_r>:
 80076f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076fc:	4607      	mov	r7, r0
 80076fe:	4614      	mov	r4, r2
 8007700:	460d      	mov	r5, r1
 8007702:	b921      	cbnz	r1, 800770e <_realloc_r+0x16>
 8007704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007708:	4611      	mov	r1, r2
 800770a:	f7ff bc5b 	b.w	8006fc4 <_malloc_r>
 800770e:	b92a      	cbnz	r2, 800771c <_realloc_r+0x24>
 8007710:	f7ff fbec 	bl	8006eec <_free_r>
 8007714:	4625      	mov	r5, r4
 8007716:	4628      	mov	r0, r5
 8007718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800771c:	f000 f81a 	bl	8007754 <_malloc_usable_size_r>
 8007720:	4284      	cmp	r4, r0
 8007722:	4606      	mov	r6, r0
 8007724:	d802      	bhi.n	800772c <_realloc_r+0x34>
 8007726:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800772a:	d8f4      	bhi.n	8007716 <_realloc_r+0x1e>
 800772c:	4621      	mov	r1, r4
 800772e:	4638      	mov	r0, r7
 8007730:	f7ff fc48 	bl	8006fc4 <_malloc_r>
 8007734:	4680      	mov	r8, r0
 8007736:	b908      	cbnz	r0, 800773c <_realloc_r+0x44>
 8007738:	4645      	mov	r5, r8
 800773a:	e7ec      	b.n	8007716 <_realloc_r+0x1e>
 800773c:	42b4      	cmp	r4, r6
 800773e:	4622      	mov	r2, r4
 8007740:	4629      	mov	r1, r5
 8007742:	bf28      	it	cs
 8007744:	4632      	movcs	r2, r6
 8007746:	f7ff fbc3 	bl	8006ed0 <memcpy>
 800774a:	4629      	mov	r1, r5
 800774c:	4638      	mov	r0, r7
 800774e:	f7ff fbcd 	bl	8006eec <_free_r>
 8007752:	e7f1      	b.n	8007738 <_realloc_r+0x40>

08007754 <_malloc_usable_size_r>:
 8007754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007758:	1f18      	subs	r0, r3, #4
 800775a:	2b00      	cmp	r3, #0
 800775c:	bfbc      	itt	lt
 800775e:	580b      	ldrlt	r3, [r1, r0]
 8007760:	18c0      	addlt	r0, r0, r3
 8007762:	4770      	bx	lr

08007764 <_init>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr

08007770 <_fini>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr
