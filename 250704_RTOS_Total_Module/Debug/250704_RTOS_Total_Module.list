
250704_RTOS_Total_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000839c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800853c  0800853c  0000953c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087e8  080087e8  0000a0c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080087e8  080087e8  000097e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087f0  080087f0  0000a0c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087f0  080087f0  000097f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087f4  080087f4  000097f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  080087f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004410  200000c4  080088bc  0000a0c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044d4  080088bc  0000a4d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1f4  00000000  00000000  0000a0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006207  00000000  00000000  000272e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  0002d4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001248  00000000  00000000  0002ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da93  00000000  00000000  0002ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000269a8  00000000  00000000  0004da0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098e54  00000000  00000000  000743b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061bc  00000000  00000000  0010d24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00113408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c4 	.word	0x200000c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008524 	.word	0x08008524

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c8 	.word	0x200000c8
 80001dc:	08008524 	.word	0x08008524

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200000f0 	.word	0x200000f0
 80005dc:	20000190 	.word	0x20000190

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b09c      	sub	sp, #112	@ 0x70
 80005e4:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e6:	4b30      	ldr	r3, [pc, #192]	@ (80006a8 <MX_FREERTOS_Init+0xc8>)
 80005e8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f004 fdb4 	bl	800516e <osThreadCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	4a28      	ldr	r2, [pc, #160]	@ (80006ac <MX_FREERTOS_Init+0xcc>)
 800060a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myListenerTask */
  osThreadDef(myListenerTask, StartListenerTask, osPriorityNormal, 0, 128);
 800060c:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <MX_FREERTOS_Init+0xd0>)
 800060e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myListenerTaskHandle = osThreadCreate(osThread(myListenerTask), NULL);
 8000620:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fda1 	bl	800516e <osThreadCreate>
 800062c:	4603      	mov	r3, r0
 800062e:	4a21      	ldr	r2, [pc, #132]	@ (80006b4 <MX_FREERTOS_Init+0xd4>)
 8000630:	6013      	str	r3, [r2, #0]

  /* definition and creation of myControllerTas */
  osThreadDef(myControllerTas, StartControllerTask, osPriorityNormal, 0, 128);
 8000632:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <MX_FREERTOS_Init+0xd8>)
 8000634:	f107 041c 	add.w	r4, r7, #28
 8000638:	461d      	mov	r5, r3
 800063a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myControllerTasHandle = osThreadCreate(osThread(myControllerTas), NULL);
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f004 fd8e 	bl	800516e <osThreadCreate>
 8000652:	4603      	mov	r3, r0
 8000654:	4a19      	ldr	r2, [pc, #100]	@ (80006bc <MX_FREERTOS_Init+0xdc>)
 8000656:	6013      	str	r3, [r2, #0]

  /* definition and creation of myPresenterTask */
  osThreadDef(myPresenterTask, StartPresenterTask, osPriorityNormal, 0, 128);
 8000658:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_FREERTOS_Init+0xe0>)
 800065a:	463c      	mov	r4, r7
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myPresenterTaskHandle = osThreadCreate(osThread(myPresenterTask), NULL);
 800066a:	463b      	mov	r3, r7
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fd7d 	bl	800516e <osThreadCreate>
 8000674:	4603      	mov	r3, r0
 8000676:	4a13      	ldr	r2, [pc, #76]	@ (80006c4 <MX_FREERTOS_Init+0xe4>)
 8000678:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	Model_ModeInit();
 800067a:	f001 facd 	bl	8001c18 <Model_ModeInit>
	Model_TimeWatchInit();
 800067e:	f001 fb47 	bl	8001d10 <Model_TimeWatchInit>
	Model_StopWatchInit();
 8000682:	f001 faf5 	bl	8001c70 <Model_StopWatchInit>
	Model_DistanceInit();
 8000686:	f001 faad 	bl	8001be4 <Model_DistanceInit>
	Model_TempHumiInit();
 800068a:	f001 fb27 	bl	8001cdc <Model_TempHumiInit>
	HAL_TIM_Base_Start_IT(&htim2);
 800068e:	480e      	ldr	r0, [pc, #56]	@ (80006c8 <MX_FREERTOS_Init+0xe8>)
 8000690:	f004 f958 	bl	8004944 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim4);
 8000694:	480d      	ldr	r0, [pc, #52]	@ (80006cc <MX_FREERTOS_Init+0xec>)
 8000696:	f004 f8d3 	bl	8004840 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 800069a:	480d      	ldr	r0, [pc, #52]	@ (80006d0 <MX_FREERTOS_Init+0xf0>)
 800069c:	f004 f8d0 	bl	8004840 <HAL_TIM_Base_Start>
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006a0:	bf00      	nop
 80006a2:	3770      	adds	r7, #112	@ 0x70
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bdb0      	pop	{r4, r5, r7, pc}
 80006a8:	08008548 	.word	0x08008548
 80006ac:	200000e0 	.word	0x200000e0
 80006b0:	08008574 	.word	0x08008574
 80006b4:	200000e4 	.word	0x200000e4
 80006b8:	080085a0 	.word	0x080085a0
 80006bc:	200000e8 	.word	0x200000e8
 80006c0:	080085cc 	.word	0x080085cc
 80006c4:	200000ec 	.word	0x200000ec
 80006c8:	20000430 	.word	0x20000430
 80006cc:	200004c0 	.word	0x200004c0
 80006d0:	20000478 	.word	0x20000478

080006d4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80006dc:	2001      	movs	r0, #1
 80006de:	f004 fd92 	bl	8005206 <osDelay>
 80006e2:	e7fb      	b.n	80006dc <StartDefaultTask+0x8>

080006e4 <StartListenerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartListenerTask */
void StartListenerTask(void const * argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartListenerTask */
	Listener_Init();
 80006ec:	f001 f936 	bl	800195c <Listener_Init>
	/* Infinite loop */
	for(;;)
	{
		Listener_Execute();
 80006f0:	f001 f94a 	bl	8001988 <Listener_Execute>
		osDelay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f004 fd86 	bl	8005206 <osDelay>
		Listener_Execute();
 80006fa:	bf00      	nop
 80006fc:	e7f8      	b.n	80006f0 <StartListenerTask+0xc>

080006fe <StartControllerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControllerTask */
void StartControllerTask(void const * argument)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerTask */
	Controller_Init();
 8000706:	f000 fcd2 	bl	80010ae <Controller_Init>
	/* Infinite loop */
	for(;;)
	{
		Controller_Execute();
 800070a:	f000 fcdd 	bl	80010c8 <Controller_Execute>
		osDelay(1);
 800070e:	2001      	movs	r0, #1
 8000710:	f004 fd79 	bl	8005206 <osDelay>
		Controller_Execute();
 8000714:	bf00      	nop
 8000716:	e7f8      	b.n	800070a <StartControllerTask+0xc>

08000718 <StartPresenterTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPresenterTask */
void StartPresenterTask(void const * argument)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPresenterTask */
	Presenter_Init();
 8000720:	f001 fb2c 	bl	8001d7c <Presenter_Init>
	/* Infinite loop */
	for(;;)
	{
		Presenter_Execute();
 8000724:	f001 fb36 	bl	8001d94 <Presenter_Execute>
		osDelay(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f004 fd6c 	bl	8005206 <osDelay>
		Presenter_Execute();
 800072e:	bf00      	nop
 8000730:	e7f8      	b.n	8000724 <StartPresenterTask+0xc>
	...

08000734 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b54      	ldr	r3, [pc, #336]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a53      	ldr	r2, [pc, #332]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b51      	ldr	r3, [pc, #324]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b4d      	ldr	r3, [pc, #308]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a4c      	ldr	r2, [pc, #304]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b4a      	ldr	r3, [pc, #296]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b46      	ldr	r3, [pc, #280]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a45      	ldr	r2, [pc, #276]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b43      	ldr	r3, [pc, #268]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b3f      	ldr	r3, [pc, #252]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a3e      	ldr	r2, [pc, #248]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b3c      	ldr	r3, [pc, #240]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007ba:	2200      	movs	r2, #0
 80007bc:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80007c0:	4838      	ldr	r0, [pc, #224]	@ (80008a4 <MX_GPIO_Init+0x170>)
 80007c2:	f002 fe47 	bl	8003454 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 80007c6:	2200      	movs	r2, #0
 80007c8:	f641 0113 	movw	r1, #6163	@ 0x1813
 80007cc:	4836      	ldr	r0, [pc, #216]	@ (80008a8 <MX_GPIO_Init+0x174>)
 80007ce:	f002 fe41 	bl	8003454 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80007d2:	2200      	movs	r2, #0
 80007d4:	f24f 0107 	movw	r1, #61447	@ 0xf007
 80007d8:	4834      	ldr	r0, [pc, #208]	@ (80008ac <MX_GPIO_Init+0x178>)
 80007da:	f002 fe3b 	bl	8003454 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007de:	f240 13ff 	movw	r3, #511	@ 0x1ff
 80007e2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	482b      	ldr	r0, [pc, #172]	@ (80008a4 <MX_GPIO_Init+0x170>)
 80007f8:	f002 fc90 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 80007fc:	f641 0313 	movw	r3, #6163	@ 0x1813
 8000800:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4824      	ldr	r0, [pc, #144]	@ (80008a8 <MX_GPIO_Init+0x174>)
 8000816:	f002 fc81 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800081a:	f24f 0307 	movw	r3, #61447	@ 0xf007
 800081e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	481e      	ldr	r0, [pc, #120]	@ (80008ac <MX_GPIO_Init+0x178>)
 8000834:	f002 fc72 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000838:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800083e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4817      	ldr	r0, [pc, #92]	@ (80008ac <MX_GPIO_Init+0x178>)
 8000850:	f002 fc64 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000854:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	480f      	ldr	r0, [pc, #60]	@ (80008a8 <MX_GPIO_Init+0x174>)
 800086a:	f002 fc57 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 800086e:	2368      	movs	r3, #104	@ 0x68
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	480a      	ldr	r0, [pc, #40]	@ (80008ac <MX_GPIO_Init+0x178>)
 8000882:	f002 fc4b 	bl	800311c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2105      	movs	r1, #5
 800088a:	2028      	movs	r0, #40	@ 0x28
 800088c:	f002 fc00 	bl	8003090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000890:	2028      	movs	r0, #40	@ 0x28
 8000892:	f002 fc19 	bl	80030c8 <HAL_NVIC_EnableIRQ>

}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40020400 	.word	0x40020400

080008b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <MX_I2C1_Init+0x50>)
 80008b6:	4a13      	ldr	r2, [pc, #76]	@ (8000904 <MX_I2C1_Init+0x54>)
 80008b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_I2C1_Init+0x50>)
 80008bc:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <MX_I2C1_Init+0x58>)
 80008be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_I2C1_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_I2C1_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_I2C1_Init+0x50>)
 80008ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <MX_I2C1_Init+0x50>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_I2C1_Init+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	@ (8000900 <MX_I2C1_Init+0x50>)
 80008ee:	f002 fdef 	bl	80034d0 <HAL_I2C_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f8:	f000 f8ec 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000390 	.word	0x20000390
 8000904:	40005400 	.word	0x40005400
 8000908:	000186a0 	.word	0x000186a0

0800090c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	@ 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a19      	ldr	r2, [pc, #100]	@ (8000990 <HAL_I2C_MspInit+0x84>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d12c      	bne.n	8000988 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <HAL_I2C_MspInit+0x88>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a17      	ldr	r2, [pc, #92]	@ (8000994 <HAL_I2C_MspInit+0x88>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <HAL_I2C_MspInit+0x88>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800094a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800094e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000950:	2312      	movs	r3, #18
 8000952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000958:	2303      	movs	r3, #3
 800095a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095c:	2304      	movs	r3, #4
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	480c      	ldr	r0, [pc, #48]	@ (8000998 <HAL_I2C_MspInit+0x8c>)
 8000968:	f002 fbd8 	bl	800311c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <HAL_I2C_MspInit+0x88>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000974:	4a07      	ldr	r2, [pc, #28]	@ (8000994 <HAL_I2C_MspInit+0x88>)
 8000976:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800097a:	6413      	str	r3, [r2, #64]	@ 0x40
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <HAL_I2C_MspInit+0x88>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	@ 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40005400 	.word	0x40005400
 8000994:	40023800 	.word	0x40023800
 8000998:	40020400 	.word	0x40020400

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a0:	f002 fa16 	bl	8002dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a4:	f000 f812 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a8:	f7ff fec4 	bl	8000734 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009ac:	f7ff ff80 	bl	80008b0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80009b0:	f000 f9b6 	bl	8000d20 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009b4:	f000 fa00 	bl	8000db8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009b8:	f000 fa4c 	bl	8000e54 <MX_TIM4_Init>
  MX_TIM5_Init();
 80009bc:	f000 fa98 	bl	8000ef0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80009c0:	f7ff fe0e 	bl	80005e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009c4:	f004 fbcc 	bl	8005160 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <main+0x2c>

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b094      	sub	sp, #80	@ 0x50
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0320 	add.w	r3, r7, #32
 80009d6:	2230      	movs	r2, #48	@ 0x30
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f007 f8c6 	bl	8007b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <SystemClock_Config+0xc8>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	4a26      	ldr	r2, [pc, #152]	@ (8000a94 <SystemClock_Config+0xc8>)
 80009fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a00:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <SystemClock_Config+0xc8>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <SystemClock_Config+0xcc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a20      	ldr	r2, [pc, #128]	@ (8000a98 <SystemClock_Config+0xcc>)
 8000a16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <SystemClock_Config+0xcc>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a32:	2302      	movs	r3, #2
 8000a34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a36:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a40:	2364      	movs	r3, #100	@ 0x64
 8000a42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 f9db 	bl	8003e0c <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a5c:	f000 f83a 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a60:	230f      	movs	r3, #15
 8000a62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a64:	2302      	movs	r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 fc3d 	bl	80042fc <HAL_RCC_ClockConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a88:	f000 f824 	bl	8000ad4 <Error_Handler>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3750      	adds	r7, #80	@ 0x50
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a09      	ldr	r2, [pc, #36]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d101      	bne.n	8000ab2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000aae:	f002 f9b1 	bl	8002e14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2) {
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aba:	d105      	bne.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		FND_DispDataCallBack();
 8000abc:	f001 fdf4 	bl	80026a8 <FND_DispDataCallBack>
		TimeWatch_IncTimeCallBack();
 8000ac0:	f000 ff0a 	bl	80018d8 <TimeWatch_IncTimeCallBack>
		StopWatch_IncTimeCallBack();
 8000ac4:	f000 fcec 	bl	80014a0 <StopWatch_IncTimeCallBack>
	}
  /* USER CODE END Callback 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40014800 	.word	0x40014800

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <Error_Handler+0x8>

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <HAL_MspInit+0x54>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aee:	4a11      	ldr	r2, [pc, #68]	@ (8000b34 <HAL_MspInit+0x54>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <HAL_MspInit+0x54>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <HAL_MspInit+0x54>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <HAL_MspInit+0x54>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_MspInit+0x54>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	210f      	movs	r1, #15
 8000b22:	f06f 0001 	mvn.w	r0, #1
 8000b26:	f002 fab3 	bl	8003090 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	@ 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c08 <HAL_InitTick+0xd0>)
 8000b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b50:	4a2d      	ldr	r2, [pc, #180]	@ (8000c08 <HAL_InitTick+0xd0>)
 8000b52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b56:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b58:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <HAL_InitTick+0xd0>)
 8000b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b64:	f107 020c 	add.w	r2, r7, #12
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f003 fde4 	bl	800473c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b74:	f003 fdce 	bl	8004714 <HAL_RCC_GetPCLK2Freq>
 8000b78:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b7c:	4a23      	ldr	r2, [pc, #140]	@ (8000c0c <HAL_InitTick+0xd4>)
 8000b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b82:	0c9b      	lsrs	r3, r3, #18
 8000b84:	3b01      	subs	r3, #1
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000b88:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000b8a:	4a22      	ldr	r2, [pc, #136]	@ (8000c14 <HAL_InitTick+0xdc>)
 8000b8c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000b8e:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000b90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b94:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000b96:	4a1e      	ldr	r2, [pc, #120]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000bae:	4818      	ldr	r0, [pc, #96]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000bb0:	f003 fdf6 	bl	80047a0 <HAL_TIM_Base_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d11b      	bne.n	8000bfa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000bc2:	4813      	ldr	r0, [pc, #76]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000bc4:	f003 febe 	bl	8004944 <HAL_TIM_Base_Start_IT>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d111      	bne.n	8000bfa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000bd6:	201a      	movs	r0, #26
 8000bd8:	f002 fa76 	bl	80030c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	d808      	bhi.n	8000bf4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000be2:	2200      	movs	r2, #0
 8000be4:	6879      	ldr	r1, [r7, #4]
 8000be6:	201a      	movs	r0, #26
 8000be8:	f002 fa52 	bl	8003090 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bec:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <HAL_InitTick+0xe0>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e002      	b.n	8000bfa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3730      	adds	r7, #48	@ 0x30
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	431bde83 	.word	0x431bde83
 8000c10:	200003e4 	.word	0x200003e4
 8000c14:	40014800 	.word	0x40014800
 8000c18:	20000068 	.word	0x20000068

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <NMI_Handler+0x4>

08000c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <MemManage_Handler+0x4>

08000c34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000c58:	4802      	ldr	r0, [pc, #8]	@ (8000c64 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000c5a:	f003 fed5 	bl	8004a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200003e4 	.word	0x200003e4

08000c68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c6c:	4802      	ldr	r0, [pc, #8]	@ (8000c78 <TIM2_IRQHandler+0x10>)
 8000c6e:	f003 fecb 	bl	8004a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000430 	.word	0x20000430

08000c7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000c80:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000c84:	f002 fc00 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  DHT11_EXTI_Callback();
 8000c88:	f001 fc74 	bl	8002574 <DHT11_EXTI_Callback>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	@ (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	@ (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	@ (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d207      	bcs.n	8000cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc0:	f006 ffba 	bl	8007c38 <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	e009      	b.n	8000ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a05      	ldr	r2, [pc, #20]	@ (8000cf4 <_sbrk+0x64>)
 8000ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20020000 	.word	0x20020000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	2000042c 	.word	0x2000042c
 8000cf8:	200044d8 	.word	0x200044d8

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <MX_TIM2_Init+0x94>)
 8000d3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <MX_TIM2_Init+0x94>)
 8000d46:	2263      	movs	r2, #99	@ 0x63
 8000d48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <MX_TIM2_Init+0x94>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <MX_TIM2_Init+0x94>)
 8000d52:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <MX_TIM2_Init+0x94>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <MX_TIM2_Init+0x94>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d64:	4813      	ldr	r0, [pc, #76]	@ (8000db4 <MX_TIM2_Init+0x94>)
 8000d66:	f003 fd1b 	bl	80047a0 <HAL_TIM_Base_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d70:	f7ff feb0 	bl	8000ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480c      	ldr	r0, [pc, #48]	@ (8000db4 <MX_TIM2_Init+0x94>)
 8000d82:	f003 ff31 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d8c:	f7ff fea2 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_TIM2_Init+0x94>)
 8000d9e:	f004 f933 	bl	8005008 <HAL_TIMEx_MasterConfigSynchronization>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000da8:	f7ff fe94 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000430 	.word	0x20000430

08000db8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e50 <MX_TIM3_Init+0x98>)
 8000dd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000ddc:	2263      	movs	r2, #99	@ 0x63
 8000dde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000de6:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000de8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dee:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df4:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dfa:	4814      	ldr	r0, [pc, #80]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000dfc:	f003 fcd0 	bl	80047a0 <HAL_TIM_Base_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e06:	f7ff fe65 	bl	8000ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	4619      	mov	r1, r3
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000e18:	f003 fee6 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e22:	f7ff fe57 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000e34:	f004 f8e8 	bl	8005008 <HAL_TIMEx_MasterConfigSynchronization>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e3e:	f7ff fe49 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000478 	.word	0x20000478
 8000e50:	40000400 	.word	0x40000400

08000e54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	463b      	mov	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee8 <MX_TIM4_Init+0x94>)
 8000e72:	4a1e      	ldr	r2, [pc, #120]	@ (8000eec <MX_TIM4_Init+0x98>)
 8000e74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <MX_TIM4_Init+0x94>)
 8000e78:	2263      	movs	r2, #99	@ 0x63
 8000e7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee8 <MX_TIM4_Init+0x94>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e82:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <MX_TIM4_Init+0x94>)
 8000e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <MX_TIM4_Init+0x94>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e90:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <MX_TIM4_Init+0x94>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e96:	4814      	ldr	r0, [pc, #80]	@ (8000ee8 <MX_TIM4_Init+0x94>)
 8000e98:	f003 fc82 	bl	80047a0 <HAL_TIM_Base_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ea2:	f7ff fe17 	bl	8000ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <MX_TIM4_Init+0x94>)
 8000eb4:	f003 fe98 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000ebe:	f7ff fe09 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <MX_TIM4_Init+0x94>)
 8000ed0:	f004 f89a 	bl	8005008 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000eda:	f7ff fdfb 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200004c0 	.word	0x200004c0
 8000eec:	40000800 	.word	0x40000800

08000ef0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f84 <MX_TIM5_Init+0x94>)
 8000f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000f88 <MX_TIM5_Init+0x98>)
 8000f10:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000f12:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <MX_TIM5_Init+0x94>)
 8000f14:	2263      	movs	r2, #99	@ 0x63
 8000f16:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <MX_TIM5_Init+0x94>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65355;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <MX_TIM5_Init+0x94>)
 8000f20:	f64f 724b 	movw	r2, #65355	@ 0xff4b
 8000f24:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f26:	4b17      	ldr	r3, [pc, #92]	@ (8000f84 <MX_TIM5_Init+0x94>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f2c:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <MX_TIM5_Init+0x94>)
 8000f2e:	2280      	movs	r2, #128	@ 0x80
 8000f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f32:	4814      	ldr	r0, [pc, #80]	@ (8000f84 <MX_TIM5_Init+0x94>)
 8000f34:	f003 fc34 	bl	80047a0 <HAL_TIM_Base_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000f3e:	f7ff fdc9 	bl	8000ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480d      	ldr	r0, [pc, #52]	@ (8000f84 <MX_TIM5_Init+0x94>)
 8000f50:	f003 fe4a 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000f5a:	f7ff fdbb 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4806      	ldr	r0, [pc, #24]	@ (8000f84 <MX_TIM5_Init+0x94>)
 8000f6c:	f004 f84c 	bl	8005008 <HAL_TIMEx_MasterConfigSynchronization>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000f76:	f7ff fdad 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000508 	.word	0x20000508
 8000f88:	40000c00 	.word	0x40000c00

08000f8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f9c:	d116      	bne.n	8000fcc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800104c <HAL_TIM_Base_MspInit+0xc0>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	4a29      	ldr	r2, [pc, #164]	@ (800104c <HAL_TIM_Base_MspInit+0xc0>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fae:	4b27      	ldr	r3, [pc, #156]	@ (800104c <HAL_TIM_Base_MspInit+0xc0>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2105      	movs	r1, #5
 8000fbe:	201c      	movs	r0, #28
 8000fc0:	f002 f866 	bl	8003090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fc4:	201c      	movs	r0, #28
 8000fc6:	f002 f87f 	bl	80030c8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000fca:	e03a      	b.n	8001042 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001050 <HAL_TIM_Base_MspInit+0xc4>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d10e      	bne.n	8000ff4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <HAL_TIM_Base_MspInit+0xc0>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	4a1b      	ldr	r2, [pc, #108]	@ (800104c <HAL_TIM_Base_MspInit+0xc0>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe6:	4b19      	ldr	r3, [pc, #100]	@ (800104c <HAL_TIM_Base_MspInit+0xc0>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
}
 8000ff2:	e026      	b.n	8001042 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a16      	ldr	r2, [pc, #88]	@ (8001054 <HAL_TIM_Base_MspInit+0xc8>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d10e      	bne.n	800101c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b12      	ldr	r3, [pc, #72]	@ (800104c <HAL_TIM_Base_MspInit+0xc0>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	4a11      	ldr	r2, [pc, #68]	@ (800104c <HAL_TIM_Base_MspInit+0xc0>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6413      	str	r3, [r2, #64]	@ 0x40
 800100e:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <HAL_TIM_Base_MspInit+0xc0>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
}
 800101a:	e012      	b.n	8001042 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <HAL_TIM_Base_MspInit+0xcc>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d10d      	bne.n	8001042 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	4b08      	ldr	r3, [pc, #32]	@ (800104c <HAL_TIM_Base_MspInit+0xc0>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	4a07      	ldr	r2, [pc, #28]	@ (800104c <HAL_TIM_Base_MspInit+0xc0>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	6413      	str	r3, [r2, #64]	@ 0x40
 8001036:	4b05      	ldr	r3, [pc, #20]	@ (800104c <HAL_TIM_Base_MspInit+0xc0>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800
 8001050:	40000400 	.word	0x40000400
 8001054:	40000800 	.word	0x40000800
 8001058:	40000c00 	.word	0x40000c00

0800105c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800105c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001094 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001060:	f7ff fe4c 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001064:	480c      	ldr	r0, [pc, #48]	@ (8001098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001066:	490d      	ldr	r1, [pc, #52]	@ (800109c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001068:	4a0d      	ldr	r2, [pc, #52]	@ (80010a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800107c:	4c0a      	ldr	r4, [pc, #40]	@ (80010a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108a:	f006 fddb 	bl	8007c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108e:	f7ff fc85 	bl	800099c <main>
  bx  lr    
 8001092:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001094:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800109c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80010a0:	080087f8 	.word	0x080087f8
  ldr r2, =_sbss
 80010a4:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80010a8:	200044d4 	.word	0x200044d4

080010ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC_IRQHandler>

080010ae <Controller_Init>:
 */

#include "Controller.h"

void Controller_Init()
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
	TimeWatch_Init();
 80010b2:	f000 fabb 	bl	800162c <TimeWatch_Init>
	StopWatch_Init();
 80010b6:	f000 f919 	bl	80012ec <StopWatch_Init>
	Distance_Init();
 80010ba:	f000 f8bb 	bl	8001234 <Distance_Init>
	TempHumi_Init();
 80010be:	f000 fa35 	bl	800152c <TempHumi_Init>
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <Controller_Execute>:

void Controller_Execute()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	eModeState_t state = Model_GetModeState();
 80010ce:	f000 fdc3 	bl	8001c58 <Model_GetModeState>
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]

	switch (state)
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d817      	bhi.n	800110c <Controller_Execute+0x44>
 80010dc:	a201      	add	r2, pc, #4	@ (adr r2, 80010e4 <Controller_Execute+0x1c>)
 80010de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e2:	bf00      	nop
 80010e4:	080010f5 	.word	0x080010f5
 80010e8:	080010fb 	.word	0x080010fb
 80010ec:	08001101 	.word	0x08001101
 80010f0:	08001107 	.word	0x08001107
	{
	case S_TIME_WATCH_MODE : TimeWatch_Execute();
 80010f4:	f000 fac4 	bl	8001680 <TimeWatch_Execute>
		break;
 80010f8:	e008      	b.n	800110c <Controller_Execute+0x44>
	case S_STOP_WATCH_MODE : StopWatch_Execute();
 80010fa:	f000 f921 	bl	8001340 <StopWatch_Execute>
		break;
 80010fe:	e005      	b.n	800110c <Controller_Execute+0x44>
	case S_DISTANCE_MODE : Distance_Execute();
 8001100:	f000 f8b8 	bl	8001274 <Distance_Execute>
		break;
 8001104:	e002      	b.n	800110c <Controller_Execute+0x44>
	case S_TEMP_HUMI_MODE : TempHumi_Execute();
 8001106:	f000 fa31 	bl	800156c <TempHumi_Execute>
		break;
 800110a:	bf00      	nop
	}
	Controller_CheckEventMode();
 800110c:	f000 f804 	bl	8001118 <Controller_CheckEventMode>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <Controller_CheckEventMode>:

void Controller_CheckEventMode()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(modeEventMsgBox, 0);
 800111e:	4b3c      	ldr	r3, [pc, #240]	@ (8001210 <Controller_CheckEventMode+0xf8>)
 8001120:	6819      	ldr	r1, [r3, #0]
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f004 f9ea 	bl	8005500 <osMessageGet>
	uint16_t evtState;

	if (evt.status == osEventMessage) {
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	2b10      	cmp	r3, #16
 8001130:	d16b      	bne.n	800120a <Controller_CheckEventMode+0xf2>
		evtState = evt.value.v;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	83fb      	strh	r3, [r7, #30]
		if (evtState != EVENT_MODE) {
 8001136:	8bfb      	ldrh	r3, [r7, #30]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d165      	bne.n	8001208 <Controller_CheckEventMode+0xf0>
			return;
		}

		eModeState_t state = Model_GetModeState();
 800113c:	f000 fd8c 	bl	8001c58 <Model_GetModeState>
 8001140:	4603      	mov	r3, r0
 8001142:	777b      	strb	r3, [r7, #29]

		if (state == S_TIME_WATCH_MODE) {
 8001144:	7f7b      	ldrb	r3, [r7, #29]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d115      	bne.n	8001176 <Controller_CheckEventMode+0x5e>
			Model_SetModeState(S_STOP_WATCH_MODE);
 800114a:	2001      	movs	r0, #1
 800114c:	f000 fd74 	bl	8001c38 <Model_SetModeState>

			stopWatch_t *pStopWatchData = osMailAlloc(stopWatchDataMailBox, 0);
 8001150:	4b30      	ldr	r3, [pc, #192]	@ (8001214 <Controller_CheckEventMode+0xfc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f004 fa9e 	bl	8005698 <osMailAlloc>
 800115c:	60f8      	str	r0, [r7, #12]
			memcpy(pStopWatchData, &stopWatchData, sizeof(stopWatch_t));
 800115e:	2206      	movs	r2, #6
 8001160:	492d      	ldr	r1, [pc, #180]	@ (8001218 <Controller_CheckEventMode+0x100>)
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f006 fd94 	bl	8007c90 <memcpy>
			osMailPut(stopWatchDataMailBox, pStopWatchData);
 8001168:	4b2a      	ldr	r3, [pc, #168]	@ (8001214 <Controller_CheckEventMode+0xfc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68f9      	ldr	r1, [r7, #12]
 800116e:	4618      	mov	r0, r3
 8001170:	f004 faa8 	bl	80056c4 <osMailPut>
 8001174:	e049      	b.n	800120a <Controller_CheckEventMode+0xf2>
		}
		else if (state == S_STOP_WATCH_MODE) {
 8001176:	7f7b      	ldrb	r3, [r7, #29]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d115      	bne.n	80011a8 <Controller_CheckEventMode+0x90>
			Model_SetModeState(S_DISTANCE_MODE);
 800117c:	2002      	movs	r0, #2
 800117e:	f000 fd5b 	bl	8001c38 <Model_SetModeState>

			timeWatch_t *pTimeWatchData = osMailAlloc(timeWatchDataMailBox, 0);
 8001182:	4b26      	ldr	r3, [pc, #152]	@ (800121c <Controller_CheckEventMode+0x104>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f004 fa85 	bl	8005698 <osMailAlloc>
 800118e:	6138      	str	r0, [r7, #16]
			memcpy(pTimeWatchData, &timeWatchData, sizeof(timeWatch_t));
 8001190:	2206      	movs	r2, #6
 8001192:	4923      	ldr	r1, [pc, #140]	@ (8001220 <Controller_CheckEventMode+0x108>)
 8001194:	6938      	ldr	r0, [r7, #16]
 8001196:	f006 fd7b 	bl	8007c90 <memcpy>
			osMailPut(timeWatchDataMailBox, pTimeWatchData);
 800119a:	4b20      	ldr	r3, [pc, #128]	@ (800121c <Controller_CheckEventMode+0x104>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6939      	ldr	r1, [r7, #16]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 fa8f 	bl	80056c4 <osMailPut>
 80011a6:	e030      	b.n	800120a <Controller_CheckEventMode+0xf2>
		}
		else if (state == S_DISTANCE_MODE) {
 80011a8:	7f7b      	ldrb	r3, [r7, #29]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d114      	bne.n	80011d8 <Controller_CheckEventMode+0xc0>
			Model_SetModeState(S_TEMP_HUMI_MODE);
 80011ae:	2003      	movs	r0, #3
 80011b0:	f000 fd42 	bl	8001c38 <Model_SetModeState>

			Distance_t *pDistanceData = osMailAlloc(DistanceDataMailBox, 0);
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <Controller_CheckEventMode+0x10c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f004 fa6c 	bl	8005698 <osMailAlloc>
 80011c0:	6178      	str	r0, [r7, #20]
			memcpy(pDistanceData, &distanceData, sizeof(Distance_t));
 80011c2:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <Controller_CheckEventMode+0x110>)
 80011c4:	881a      	ldrh	r2, [r3, #0]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	801a      	strh	r2, [r3, #0]
			osMailPut(DistanceDataMailBox, pDistanceData);
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <Controller_CheckEventMode+0x10c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6979      	ldr	r1, [r7, #20]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 fa77 	bl	80056c4 <osMailPut>
 80011d6:	e018      	b.n	800120a <Controller_CheckEventMode+0xf2>
		}
		else if (state == S_TEMP_HUMI_MODE) {
 80011d8:	7f7b      	ldrb	r3, [r7, #29]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d115      	bne.n	800120a <Controller_CheckEventMode+0xf2>
			Model_SetModeState(S_TIME_WATCH_MODE);
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 fd2a 	bl	8001c38 <Model_SetModeState>

			TempHumi_t *pTempHumiData = osMailAlloc(TempHumiDataMailBox, 0);
 80011e4:	4b11      	ldr	r3, [pc, #68]	@ (800122c <Controller_CheckEventMode+0x114>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f004 fa54 	bl	8005698 <osMailAlloc>
 80011f0:	61b8      	str	r0, [r7, #24]
			memcpy(pTempHumiData, &TempHumiData, sizeof(TempHumi_t));
 80011f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <Controller_CheckEventMode+0x118>)
 80011f4:	881a      	ldrh	r2, [r3, #0]
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	801a      	strh	r2, [r3, #0]
			osMailPut(TempHumiDataMailBox, pTempHumiData);
 80011fa:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <Controller_CheckEventMode+0x114>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	69b9      	ldr	r1, [r7, #24]
 8001200:	4618      	mov	r0, r3
 8001202:	f004 fa5f 	bl	80056c4 <osMailPut>
 8001206:	e000      	b.n	800120a <Controller_CheckEventMode+0xf2>
			return;
 8001208:	bf00      	nop
		}
	}
}
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200005e0 	.word	0x200005e0
 8001214:	200005ec 	.word	0x200005ec
 8001218:	20000554 	.word	0x20000554
 800121c:	20000604 	.word	0x20000604
 8001220:	20000568 	.word	0x20000568
 8001224:	200005d4 	.word	0x200005d4
 8001228:	20000550 	.word	0x20000550
 800122c:	200005f4 	.word	0x200005f4
 8001230:	20000564 	.word	0x20000564

08001234 <Distance_Init>:

Distance_t distanceData;
extern UltraSonic_TypeDef sensor;

void Distance_Init()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
	distanceData.distance = 0;
 800123a:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <Distance_Init+0x38>)
 800123c:	2200      	movs	r2, #0
 800123e:	801a      	strh	r2, [r3, #0]

	Distance_t *pDistanceData = osMailAlloc(DistanceDataMailBox, 0);
 8001240:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <Distance_Init+0x3c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f004 fa26 	bl	8005698 <osMailAlloc>
 800124c:	6078      	str	r0, [r7, #4]
	memcpy(pDistanceData, &distanceData, sizeof(Distance_t));
 800124e:	4b07      	ldr	r3, [pc, #28]	@ (800126c <Distance_Init+0x38>)
 8001250:	881a      	ldrh	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	801a      	strh	r2, [r3, #0]
	osMailPut(DistanceDataMailBox, pDistanceData);
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <Distance_Init+0x3c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4618      	mov	r0, r3
 800125e:	f004 fa31 	bl	80056c4 <osMailPut>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000550 	.word	0x20000550
 8001270:	200005d4 	.word	0x200005d4

08001274 <Distance_Execute>:

void Distance_Execute()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	Distance_Measurement();
 8001278:	f000 f802 	bl	8001280 <Distance_Measurement>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <Distance_Measurement>:

void Distance_Measurement()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(DistanceEventMsgBox, 0);
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <Distance_Measurement+0x5c>)
 8001288:	6819      	ldr	r1, [r3, #0]
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f004 f936 	bl	8005500 <osMessageGet>
	uint16_t evtState;

	if (evt.status == osEventMessage) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b10      	cmp	r3, #16
 8001298:	d11c      	bne.n	80012d4 <Distance_Measurement+0x54>
		evtState = evt.value.v;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	82fb      	strh	r3, [r7, #22]

		if (evtState == EVENT_DISTANCE) {
 800129e:	8afb      	ldrh	r3, [r7, #22]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d117      	bne.n	80012d4 <Distance_Measurement+0x54>
			distanceData.distance = UltraSonic_GetDistance(&sensor);
 80012a4:	480e      	ldr	r0, [pc, #56]	@ (80012e0 <Distance_Measurement+0x60>)
 80012a6:	f001 fd2b 	bl	8002d00 <UltraSonic_GetDistance>
 80012aa:	4603      	mov	r3, r0
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <Distance_Measurement+0x64>)
 80012b0:	801a      	strh	r2, [r3, #0]

			Distance_t *pDistanceData = osMailAlloc(DistanceDataMailBox, 0);
 80012b2:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <Distance_Measurement+0x68>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f004 f9ed 	bl	8005698 <osMailAlloc>
 80012be:	6138      	str	r0, [r7, #16]
			memcpy(pDistanceData, &distanceData, sizeof(Distance_t));
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <Distance_Measurement+0x64>)
 80012c2:	881a      	ldrh	r2, [r3, #0]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	801a      	strh	r2, [r3, #0]
			osMailPut(DistanceDataMailBox, pDistanceData);
 80012c8:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <Distance_Measurement+0x68>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6939      	ldr	r1, [r7, #16]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f004 f9f8 	bl	80056c4 <osMailPut>
		}
	}
}
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200005dc 	.word	0x200005dc
 80012e0:	20000588 	.word	0x20000588
 80012e4:	20000550 	.word	0x20000550
 80012e8:	200005d4 	.word	0x200005d4

080012ec <StopWatch_Init>:
#include <string.h>

stopWatch_t stopWatchData;

void StopWatch_Init()
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
	stopWatchData.hour = 0;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <StopWatch_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
	stopWatchData.min = 0;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <StopWatch_Init+0x4c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	705a      	strb	r2, [r3, #1]
	stopWatchData.sec = 0;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <StopWatch_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	709a      	strb	r2, [r3, #2]
	stopWatchData.msec = 0;
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <StopWatch_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	809a      	strh	r2, [r3, #4]

	stopWatch_t *pStopWatchData = osMailAlloc(stopWatchDataMailBox, 0);
 800130a:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <StopWatch_Init+0x50>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f004 f9c1 	bl	8005698 <osMailAlloc>
 8001316:	6078      	str	r0, [r7, #4]
	memcpy(pStopWatchData, &stopWatchData, sizeof(stopWatch_t));
 8001318:	2206      	movs	r2, #6
 800131a:	4907      	ldr	r1, [pc, #28]	@ (8001338 <StopWatch_Init+0x4c>)
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f006 fcb7 	bl	8007c90 <memcpy>
	osMailPut(stopWatchDataMailBox, pStopWatchData);
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <StopWatch_Init+0x50>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	f004 f9cb 	bl	80056c4 <osMailPut>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000554 	.word	0x20000554
 800133c:	200005ec 	.word	0x200005ec

08001340 <StopWatch_Execute>:

void StopWatch_Execute()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	eStopWatchState_t state = Model_GetStopWatchState();
 8001346:	f000 fcbd 	bl	8001cc4 <Model_GetStopWatchState>
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]

	switch(state)
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d00c      	beq.n	800136e <StopWatch_Execute+0x2e>
 8001354:	2b02      	cmp	r3, #2
 8001356:	dc0d      	bgt.n	8001374 <StopWatch_Execute+0x34>
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <StopWatch_Execute+0x22>
 800135c:	2b01      	cmp	r3, #1
 800135e:	d003      	beq.n	8001368 <StopWatch_Execute+0x28>
		break;
	case S_STOPWATCH_CLEAR:
		StopWatch_Clear();
		break;
	default:
		break;
 8001360:	e008      	b.n	8001374 <StopWatch_Execute+0x34>
		StopWatch_Stop();
 8001362:	f000 f80d 	bl	8001380 <StopWatch_Stop>
		break;
 8001366:	e006      	b.n	8001376 <StopWatch_Execute+0x36>
		StopWatch_Run();
 8001368:	f000 f82c 	bl	80013c4 <StopWatch_Run>
		break;
 800136c:	e003      	b.n	8001376 <StopWatch_Execute+0x36>
		StopWatch_Clear();
 800136e:	f000 f86b 	bl	8001448 <StopWatch_Clear>
		break;
 8001372:	e000      	b.n	8001376 <StopWatch_Execute+0x36>
		break;
 8001374:	bf00      	nop
	}
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <StopWatch_Stop>:

void StopWatch_Stop()
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(stopWatchEventMsgBox, 0);
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <StopWatch_Stop+0x40>)
 8001388:	6819      	ldr	r1, [r3, #0]
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f004 f8b6 	bl	8005500 <osMessageGet>
	uint16_t evtState;

	if (evt.status == osEventMessage) {
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	2b10      	cmp	r3, #16
 8001398:	d10e      	bne.n	80013b8 <StopWatch_Stop+0x38>
		evtState = evt.value.v; // 메세지가 들어있다면 값을 받아오겠다.
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	81fb      	strh	r3, [r7, #14]

		if (evtState == EVENT_RUN_STOP) {
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d103      	bne.n	80013ac <StopWatch_Stop+0x2c>
			Model_SetStopWatchState(S_STOPWATCH_RUN);
 80013a4:	2001      	movs	r0, #1
 80013a6:	f000 fc7d 	bl	8001ca4 <Model_SetStopWatchState>
		}
		else if (evtState == EVENT_CLEAR) {
			Model_SetStopWatchState(S_STOPWATCH_CLEAR);
		}
	}
}
 80013aa:	e005      	b.n	80013b8 <StopWatch_Stop+0x38>
		else if (evtState == EVENT_CLEAR) {
 80013ac:	89fb      	ldrh	r3, [r7, #14]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d102      	bne.n	80013b8 <StopWatch_Stop+0x38>
			Model_SetStopWatchState(S_STOPWATCH_CLEAR);
 80013b2:	2002      	movs	r0, #2
 80013b4:	f000 fc76 	bl	8001ca4 <Model_SetStopWatchState>
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200005e8 	.word	0x200005e8

080013c4 <StopWatch_Run>:

void StopWatch_Run()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(stopWatchEventMsgBox, 0);
 80013ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <StopWatch_Run+0x74>)
 80013cc:	6819      	ldr	r1, [r3, #0]
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 f894 	bl	8005500 <osMessageGet>
	uint16_t evtState;

	if (evt.status == osEventMessage) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b10      	cmp	r3, #16
 80013dc:	d107      	bne.n	80013ee <StopWatch_Run+0x2a>
		evtState = evt.value.v;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	82fb      	strh	r3, [r7, #22]

		if (evtState == EVENT_RUN_STOP) {
 80013e2:	8afb      	ldrh	r3, [r7, #22]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <StopWatch_Run+0x2a>
			Model_SetStopWatchState(S_STOPWATCH_STOP);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f000 fc5b 	bl	8001ca4 <Model_SetStopWatchState>
		}
	}
	static stopWatch_t prevStopWatchData;
	// RUN은 메모리가 계속 바뀌니까 값이 바뀔때마다 읽어주기
	if (memcmp(&stopWatchData, &prevStopWatchData,sizeof(stopWatch_t))) {
 80013ee:	2206      	movs	r2, #6
 80013f0:	4912      	ldr	r1, [pc, #72]	@ (800143c <StopWatch_Run+0x78>)
 80013f2:	4813      	ldr	r0, [pc, #76]	@ (8001440 <StopWatch_Run+0x7c>)
 80013f4:	f006 fbaa 	bl	8007b4c <memcmp>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d018      	beq.n	8001430 <StopWatch_Run+0x6c>
		memcpy(&prevStopWatchData, &stopWatchData, sizeof(stopWatch_t));
 80013fe:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <StopWatch_Run+0x78>)
 8001400:	4a0f      	ldr	r2, [pc, #60]	@ (8001440 <StopWatch_Run+0x7c>)
 8001402:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001406:	6018      	str	r0, [r3, #0]
 8001408:	3304      	adds	r3, #4
 800140a:	8019      	strh	r1, [r3, #0]
		stopWatch_t *pStopWatchData = osMailAlloc(stopWatchDataMailBox, 0);
 800140c:	4b0d      	ldr	r3, [pc, #52]	@ (8001444 <StopWatch_Run+0x80>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f004 f940 	bl	8005698 <osMailAlloc>
 8001418:	6138      	str	r0, [r7, #16]
		memcpy(pStopWatchData, &stopWatchData, sizeof(stopWatch_t));
 800141a:	2206      	movs	r2, #6
 800141c:	4908      	ldr	r1, [pc, #32]	@ (8001440 <StopWatch_Run+0x7c>)
 800141e:	6938      	ldr	r0, [r7, #16]
 8001420:	f006 fc36 	bl	8007c90 <memcpy>
		osMailPut(stopWatchDataMailBox, pStopWatchData);
 8001424:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <StopWatch_Run+0x80>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6939      	ldr	r1, [r7, #16]
 800142a:	4618      	mov	r0, r3
 800142c:	f004 f94a 	bl	80056c4 <osMailPut>
	}
}
 8001430:	bf00      	nop
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200005e8 	.word	0x200005e8
 800143c:	2000055c 	.word	0x2000055c
 8001440:	20000554 	.word	0x20000554
 8001444:	200005ec 	.word	0x200005ec

08001448 <StopWatch_Clear>:

void StopWatch_Clear()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
	Model_SetStopWatchState(S_STOPWATCH_STOP);
 800144e:	2000      	movs	r0, #0
 8001450:	f000 fc28 	bl	8001ca4 <Model_SetStopWatchState>

	stopWatchData.hour = 0;
 8001454:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <StopWatch_Clear+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
	stopWatchData.min = 0;
 800145a:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <StopWatch_Clear+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	705a      	strb	r2, [r3, #1]
	stopWatchData.sec = 0;
 8001460:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <StopWatch_Clear+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	709a      	strb	r2, [r3, #2]
	stopWatchData.msec = 0;
 8001466:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <StopWatch_Clear+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	809a      	strh	r2, [r3, #4]

	stopWatch_t *pStopWatchData = osMailAlloc(stopWatchDataMailBox, 0);
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <StopWatch_Clear+0x54>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f004 f910 	bl	8005698 <osMailAlloc>
 8001478:	6078      	str	r0, [r7, #4]
	memcpy(pStopWatchData, &stopWatchData, sizeof(stopWatch_t));
 800147a:	2206      	movs	r2, #6
 800147c:	4906      	ldr	r1, [pc, #24]	@ (8001498 <StopWatch_Clear+0x50>)
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f006 fc06 	bl	8007c90 <memcpy>
	osMailPut(stopWatchDataMailBox, pStopWatchData);
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <StopWatch_Clear+0x54>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4618      	mov	r0, r3
 800148c:	f004 f91a 	bl	80056c4 <osMailPut>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000554 	.word	0x20000554
 800149c:	200005ec 	.word	0x200005ec

080014a0 <StopWatch_IncTimeCallBack>:

void StopWatch_IncTimeCallBack()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	if (Model_GetStopWatchState() != S_STOPWATCH_RUN) {
 80014a4:	f000 fc0e 	bl	8001cc4 <Model_GetStopWatchState>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d13a      	bne.n	8001524 <StopWatch_IncTimeCallBack+0x84>
		return;
	}

	if (stopWatchData.msec != 1000-1) {
 80014ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 80014b0:	889b      	ldrh	r3, [r3, #4]
 80014b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d006      	beq.n	80014c8 <StopWatch_IncTimeCallBack+0x28>
		stopWatchData.msec++;
 80014ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 80014bc:	889b      	ldrh	r3, [r3, #4]
 80014be:	3301      	adds	r3, #1
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 80014c4:	809a      	strh	r2, [r3, #4]
		return;
 80014c6:	e02e      	b.n	8001526 <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.msec = 0;
 80014c8:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	809a      	strh	r2, [r3, #4]

	if (stopWatchData.sec != 60-1) {
 80014ce:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 80014d0:	789b      	ldrb	r3, [r3, #2]
 80014d2:	2b3b      	cmp	r3, #59	@ 0x3b
 80014d4:	d006      	beq.n	80014e4 <StopWatch_IncTimeCallBack+0x44>
		stopWatchData.sec++;
 80014d6:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 80014d8:	789b      	ldrb	r3, [r3, #2]
 80014da:	3301      	adds	r3, #1
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 80014e0:	709a      	strb	r2, [r3, #2]
		return;
 80014e2:	e020      	b.n	8001526 <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.sec = 0;
 80014e4:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	709a      	strb	r2, [r3, #2]

	if (stopWatchData.min != 60-1) {
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 80014ec:	785b      	ldrb	r3, [r3, #1]
 80014ee:	2b3b      	cmp	r3, #59	@ 0x3b
 80014f0:	d006      	beq.n	8001500 <StopWatch_IncTimeCallBack+0x60>
		stopWatchData.min++;
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 80014f4:	785b      	ldrb	r3, [r3, #1]
 80014f6:	3301      	adds	r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 80014fc:	705a      	strb	r2, [r3, #1]
		return;
 80014fe:	e012      	b.n	8001526 <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.min = 0;
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 8001502:	2200      	movs	r2, #0
 8001504:	705a      	strb	r2, [r3, #1]

	if (stopWatchData.hour != 24-1) {
 8001506:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b17      	cmp	r3, #23
 800150c:	d006      	beq.n	800151c <StopWatch_IncTimeCallBack+0x7c>
		stopWatchData.hour++;
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 8001518:	701a      	strb	r2, [r3, #0]
		return;
 800151a:	e004      	b.n	8001526 <StopWatch_IncTimeCallBack+0x86>
	}
	stopWatchData.hour = 0;
 800151c:	4b02      	ldr	r3, [pc, #8]	@ (8001528 <StopWatch_IncTimeCallBack+0x88>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	e000      	b.n	8001526 <StopWatch_IncTimeCallBack+0x86>
		return;
 8001524:	bf00      	nop
}
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000554 	.word	0x20000554

0800152c <TempHumi_Init>:
#include <string.h>

TempHumi_t TempHumiData;

void TempHumi_Init()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
	TempHumiData.TempHumi = 0;
 8001532:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <TempHumi_Init+0x38>)
 8001534:	2200      	movs	r2, #0
 8001536:	801a      	strh	r2, [r3, #0]

	TempHumi_t *pTempHumiData = osMailAlloc(TempHumiDataMailBox, 0);
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <TempHumi_Init+0x3c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f004 f8aa 	bl	8005698 <osMailAlloc>
 8001544:	6078      	str	r0, [r7, #4]
	memcpy(pTempHumiData, &TempHumiData, sizeof(TempHumi_t));
 8001546:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <TempHumi_Init+0x38>)
 8001548:	881a      	ldrh	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	801a      	strh	r2, [r3, #0]
	osMailPut(TempHumiDataMailBox, pTempHumiData);
 800154e:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <TempHumi_Init+0x3c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	f004 f8b5 	bl	80056c4 <osMailPut>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000564 	.word	0x20000564
 8001568:	200005f4 	.word	0x200005f4

0800156c <TempHumi_Execute>:

void TempHumi_Execute()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	TempHumi_Measurement();
 8001570:	f000 f802 	bl	8001578 <TempHumi_Measurement>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <TempHumi_Measurement>:

void TempHumi_Measurement()
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(TempHumiEventMsgBox, 0);
 800157e:	4b26      	ldr	r3, [pc, #152]	@ (8001618 <TempHumi_Measurement+0xa0>)
 8001580:	6819      	ldr	r1, [r3, #0]
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2200      	movs	r2, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f003 ffba 	bl	8005500 <osMessageGet>
	uint8_t evtState;
	uint8_t temp = 0, humi = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	70fb      	strb	r3, [r7, #3]
 8001590:	2300      	movs	r3, #0
 8001592:	70bb      	strb	r3, [r7, #2]

	if (evt.status == osEventMessage) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b10      	cmp	r3, #16
 8001598:	d13a      	bne.n	8001610 <TempHumi_Measurement+0x98>
	    evtState = evt.value.v;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	75fb      	strb	r3, [r7, #23]

	    if (evtState == EVENT_TEMPHUMI) {
 800159e:	7dfb      	ldrb	r3, [r7, #23]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d130      	bne.n	8001606 <TempHumi_Measurement+0x8e>

	        DHT11_ReadData(&humi, &temp);
 80015a4:	1cfa      	adds	r2, r7, #3
 80015a6:	1cbb      	adds	r3, r7, #2
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 ffc4 	bl	8002538 <DHT11_ReadData>
	        TempHumiData.TempHumi = (temp * 100) + humi;
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	461a      	mov	r2, r3
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	461a      	mov	r2, r3
 80015ba:	0091      	lsls	r1, r2, #2
 80015bc:	461a      	mov	r2, r3
 80015be:	460b      	mov	r3, r1
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	78ba      	ldrb	r2, [r7, #2]
 80015c8:	4413      	add	r3, r2
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4b13      	ldr	r3, [pc, #76]	@ (800161c <TempHumi_Measurement+0xa4>)
 80015ce:	801a      	strh	r2, [r3, #0]

	        TempHumi_t *pTempHumiData = osMailAlloc(TempHumiDataMailBox, 0);
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <TempHumi_Measurement+0xa8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f004 f85e 	bl	8005698 <osMailAlloc>
 80015dc:	6138      	str	r0, [r7, #16]
	        if (pTempHumiData != NULL) {
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00a      	beq.n	80015fa <TempHumi_Measurement+0x82>
	            memcpy(pTempHumiData, &TempHumiData, sizeof(TempHumi_t));
 80015e4:	4b0d      	ldr	r3, [pc, #52]	@ (800161c <TempHumi_Measurement+0xa4>)
 80015e6:	881a      	ldrh	r2, [r3, #0]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	801a      	strh	r2, [r3, #0]
	            osMailPut(TempHumiDataMailBox, pTempHumiData);
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <TempHumi_Measurement+0xa8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6939      	ldr	r1, [r7, #16]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 f866 	bl	80056c4 <osMailPut>
	        }
	    } else {
	        LCD_writeStringXY(0, 0, "error");
	    }
	}
}
 80015f8:	e00a      	b.n	8001610 <TempHumi_Measurement+0x98>
	            LCD_writeStringXY(0, 0, "fail");
 80015fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <TempHumi_Measurement+0xac>)
 80015fc:	2100      	movs	r1, #0
 80015fe:	2000      	movs	r0, #0
 8001600:	f001 fb33 	bl	8002c6a <LCD_writeStringXY>
}
 8001604:	e004      	b.n	8001610 <TempHumi_Measurement+0x98>
	        LCD_writeStringXY(0, 0, "error");
 8001606:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <TempHumi_Measurement+0xb0>)
 8001608:	2100      	movs	r1, #0
 800160a:	2000      	movs	r0, #0
 800160c:	f001 fb2d 	bl	8002c6a <LCD_writeStringXY>
}
 8001610:	bf00      	nop
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200005fc 	.word	0x200005fc
 800161c:	20000564 	.word	0x20000564
 8001620:	200005f4 	.word	0x200005f4
 8001624:	080085e8 	.word	0x080085e8
 8001628:	080085f0 	.word	0x080085f0

0800162c <TimeWatch_Init>:
#include <string.h>

timeWatch_t timeWatchData;

void TimeWatch_Init()
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
	timeWatchData.hour = 12;
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <TimeWatch_Init+0x4c>)
 8001634:	220c      	movs	r2, #12
 8001636:	701a      	strb	r2, [r3, #0]
	timeWatchData.min  = 0;
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <TimeWatch_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	705a      	strb	r2, [r3, #1]
	timeWatchData.sec  = 0;
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <TimeWatch_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	709a      	strb	r2, [r3, #2]
	timeWatchData.msec = 0;
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <TimeWatch_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	809a      	strh	r2, [r3, #4]

	timeWatch_t *pTimeWatchData = osMailAlloc(timeWatchDataMailBox, 0);
 800164a:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <TimeWatch_Init+0x50>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f004 f821 	bl	8005698 <osMailAlloc>
 8001656:	6078      	str	r0, [r7, #4]
	memcpy(pTimeWatchData, &timeWatchData, sizeof(timeWatch_t));
 8001658:	2206      	movs	r2, #6
 800165a:	4907      	ldr	r1, [pc, #28]	@ (8001678 <TimeWatch_Init+0x4c>)
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f006 fb17 	bl	8007c90 <memcpy>
	osMailPut(timeWatchDataMailBox, pTimeWatchData);
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <TimeWatch_Init+0x50>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4618      	mov	r0, r3
 800166a:	f004 f82b 	bl	80056c4 <osMailPut>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000568 	.word	0x20000568
 800167c:	20000604 	.word	0x20000604

08001680 <TimeWatch_Execute>:

void TimeWatch_Execute()
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	eTimeWatchState_t state = Model_GetTimeWatchState();
 8001686:	f000 fb6d 	bl	8001d64 <Model_GetTimeWatchState>
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]

	switch(state)
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b03      	cmp	r3, #3
 8001692:	d817      	bhi.n	80016c4 <TimeWatch_Execute+0x44>
 8001694:	a201      	add	r2, pc, #4	@ (adr r2, 800169c <TimeWatch_Execute+0x1c>)
 8001696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169a:	bf00      	nop
 800169c:	080016ad 	.word	0x080016ad
 80016a0:	080016b3 	.word	0x080016b3
 80016a4:	080016b9 	.word	0x080016b9
 80016a8:	080016bf 	.word	0x080016bf
	{
	case S_TIMEWATCH_NORMAL:
		TimeWatch_Normal();
 80016ac:	f000 f810 	bl	80016d0 <TimeWatch_Normal>
		break;
 80016b0:	e009      	b.n	80016c6 <TimeWatch_Execute+0x46>
	case S_TIMEWATCH_MODIFY_HOUR:
		TimeWatch_ModifyHour();
 80016b2:	f000 f84d 	bl	8001750 <TimeWatch_ModifyHour>
		break;
 80016b6:	e006      	b.n	80016c6 <TimeWatch_Execute+0x46>
	case S_TIMEWATCH_MODIFY_MIN:
		TimeWatch_ModifyMin();
 80016b8:	f000 f88e 	bl	80017d8 <TimeWatch_ModifyMin>
		break;
 80016bc:	e003      	b.n	80016c6 <TimeWatch_Execute+0x46>
	case S_TIMEWATCH_MODIFY_SEC:
		TimeWatch_ModifySec();
 80016be:	f000 f8cf 	bl	8001860 <TimeWatch_ModifySec>
		break;
 80016c2:	e000      	b.n	80016c6 <TimeWatch_Execute+0x46>
	default:
		break;
 80016c4:	bf00      	nop
	}
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop

080016d0 <TimeWatch_Normal>:

void TimeWatch_Normal()
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
	static uint8_t prevMilSec = 0;
	if (prevMilSec == timeWatchData.msec) {
 80016d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <TimeWatch_Normal+0x70>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <TimeWatch_Normal+0x74>)
 80016de:	889b      	ldrh	r3, [r3, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d029      	beq.n	8001738 <TimeWatch_Normal+0x68>
		return;
	}
	prevMilSec = timeWatchData.msec;
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <TimeWatch_Normal+0x74>)
 80016e6:	889b      	ldrh	r3, [r3, #4]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <TimeWatch_Normal+0x70>)
 80016ec:	701a      	strb	r2, [r3, #0]

	timeWatch_t *pTimeWatchData = osMailAlloc(timeWatchDataMailBox, 0);
 80016ee:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <TimeWatch_Normal+0x78>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 ffcf 	bl	8005698 <osMailAlloc>
 80016fa:	6178      	str	r0, [r7, #20]
	memcpy(pTimeWatchData, &timeWatchData, sizeof(timeWatch_t));
 80016fc:	2206      	movs	r2, #6
 80016fe:	4911      	ldr	r1, [pc, #68]	@ (8001744 <TimeWatch_Normal+0x74>)
 8001700:	6978      	ldr	r0, [r7, #20]
 8001702:	f006 fac5 	bl	8007c90 <memcpy>
	osMailPut(timeWatchDataMailBox, pTimeWatchData);
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <TimeWatch_Normal+0x78>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6979      	ldr	r1, [r7, #20]
 800170c:	4618      	mov	r0, r3
 800170e:	f003 ffd9 	bl	80056c4 <osMailPut>

	osEvent evt = osMessageGet(timeWatchEventMsgBox, 0);
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <TimeWatch_Normal+0x7c>)
 8001714:	6819      	ldr	r1, [r3, #0]
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2200      	movs	r2, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f003 fef0 	bl	8005500 <osMessageGet>
	uint16_t evtState;

	if (evt.status == osEventMessage) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b10      	cmp	r3, #16
 8001724:	d109      	bne.n	800173a <TimeWatch_Normal+0x6a>
		evtState = evt.value.v;
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	827b      	strh	r3, [r7, #18]

		if (evtState == EVENT_TIME_MODIFY) {
 800172a:	8a7b      	ldrh	r3, [r7, #18]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d104      	bne.n	800173a <TimeWatch_Normal+0x6a>
			Model_SetTimeWatchState(S_TIMEWATCH_MODIFY_HOUR);
 8001730:	2001      	movs	r0, #1
 8001732:	f000 fb07 	bl	8001d44 <Model_SetTimeWatchState>
 8001736:	e000      	b.n	800173a <TimeWatch_Normal+0x6a>
		return;
 8001738:	bf00      	nop
		}
	}
}
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000056e 	.word	0x2000056e
 8001744:	20000568 	.word	0x20000568
 8001748:	20000604 	.word	0x20000604
 800174c:	2000060c 	.word	0x2000060c

08001750 <TimeWatch_ModifyHour>:

void TimeWatch_ModifyHour()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(timeWatchEventMsgBox, 0);
 8001756:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <TimeWatch_ModifyHour+0x7c>)
 8001758:	6819      	ldr	r1, [r3, #0]
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2200      	movs	r2, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f003 fece 	bl	8005500 <osMessageGet>
	uint16_t evtState;

	if (evt.status == osEventMessage) {
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b10      	cmp	r3, #16
 8001768:	d12b      	bne.n	80017c2 <TimeWatch_ModifyHour+0x72>
		evtState = evt.value.v;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	82fb      	strh	r3, [r7, #22]

		if (evtState == EVENT_TIME_MODIFY) {
 800176e:	8afb      	ldrh	r3, [r7, #22]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d103      	bne.n	800177c <TimeWatch_ModifyHour+0x2c>
			Model_SetTimeWatchState(S_TIMEWATCH_MODIFY_MIN);
 8001774:	2002      	movs	r0, #2
 8001776:	f000 fae5 	bl	8001d44 <Model_SetTimeWatchState>
 800177a:	e010      	b.n	800179e <TimeWatch_ModifyHour+0x4e>
		}
		else if (evtState == EVENT_TIME_SET) {
 800177c:	8afb      	ldrh	r3, [r7, #22]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d10d      	bne.n	800179e <TimeWatch_ModifyHour+0x4e>
			if (timeWatchData.hour == 23) {
 8001782:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <TimeWatch_ModifyHour+0x80>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b17      	cmp	r3, #23
 8001788:	d103      	bne.n	8001792 <TimeWatch_ModifyHour+0x42>
				timeWatchData.hour = 0;
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <TimeWatch_ModifyHour+0x80>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e005      	b.n	800179e <TimeWatch_ModifyHour+0x4e>
			}
			else {
				timeWatchData.hour++;
 8001792:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <TimeWatch_ModifyHour+0x80>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b0d      	ldr	r3, [pc, #52]	@ (80017d0 <TimeWatch_ModifyHour+0x80>)
 800179c:	701a      	strb	r2, [r3, #0]
			}
			// Presenter에서 반영되도록
		}
			timeWatch_t *pTimeWatchData = osMailAlloc(timeWatchDataMailBox, 0);
 800179e:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <TimeWatch_ModifyHour+0x84>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f003 ff77 	bl	8005698 <osMailAlloc>
 80017aa:	6138      	str	r0, [r7, #16]
			memcpy(pTimeWatchData, &timeWatchData, sizeof(timeWatch_t));
 80017ac:	2206      	movs	r2, #6
 80017ae:	4908      	ldr	r1, [pc, #32]	@ (80017d0 <TimeWatch_ModifyHour+0x80>)
 80017b0:	6938      	ldr	r0, [r7, #16]
 80017b2:	f006 fa6d 	bl	8007c90 <memcpy>
			osMailPut(timeWatchDataMailBox, pTimeWatchData);
 80017b6:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <TimeWatch_ModifyHour+0x84>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6939      	ldr	r1, [r7, #16]
 80017bc:	4618      	mov	r0, r3
 80017be:	f003 ff81 	bl	80056c4 <osMailPut>
	}

}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000060c 	.word	0x2000060c
 80017d0:	20000568 	.word	0x20000568
 80017d4:	20000604 	.word	0x20000604

080017d8 <TimeWatch_ModifyMin>:

void TimeWatch_ModifyMin()
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(timeWatchEventMsgBox, 0);
 80017de:	4b1d      	ldr	r3, [pc, #116]	@ (8001854 <TimeWatch_ModifyMin+0x7c>)
 80017e0:	6819      	ldr	r1, [r3, #0]
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2200      	movs	r2, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fe8a 	bl	8005500 <osMessageGet>
	uint16_t evtState;

	if (evt.status == osEventMessage) {
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b10      	cmp	r3, #16
 80017f0:	d12b      	bne.n	800184a <TimeWatch_ModifyMin+0x72>
		evtState = evt.value.v;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	82fb      	strh	r3, [r7, #22]

		if (evtState == EVENT_TIME_MODIFY) {
 80017f6:	8afb      	ldrh	r3, [r7, #22]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d103      	bne.n	8001804 <TimeWatch_ModifyMin+0x2c>
			Model_SetTimeWatchState(S_TIMEWATCH_MODIFY_SEC);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 faa1 	bl	8001d44 <Model_SetTimeWatchState>
 8001802:	e010      	b.n	8001826 <TimeWatch_ModifyMin+0x4e>
		}
		else if (evtState == EVENT_TIME_SET) {
 8001804:	8afb      	ldrh	r3, [r7, #22]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d10d      	bne.n	8001826 <TimeWatch_ModifyMin+0x4e>
			if (timeWatchData.min == 60) {
 800180a:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <TimeWatch_ModifyMin+0x80>)
 800180c:	785b      	ldrb	r3, [r3, #1]
 800180e:	2b3c      	cmp	r3, #60	@ 0x3c
 8001810:	d103      	bne.n	800181a <TimeWatch_ModifyMin+0x42>
				timeWatchData.min = 0;
 8001812:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <TimeWatch_ModifyMin+0x80>)
 8001814:	2200      	movs	r2, #0
 8001816:	705a      	strb	r2, [r3, #1]
 8001818:	e005      	b.n	8001826 <TimeWatch_ModifyMin+0x4e>
			}
			else {
				timeWatchData.min++;
 800181a:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <TimeWatch_ModifyMin+0x80>)
 800181c:	785b      	ldrb	r3, [r3, #1]
 800181e:	3301      	adds	r3, #1
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4b0d      	ldr	r3, [pc, #52]	@ (8001858 <TimeWatch_ModifyMin+0x80>)
 8001824:	705a      	strb	r2, [r3, #1]
			}
			// Presenter에서 반영되도록
		}
			timeWatch_t *pTimeWatchData = osMailAlloc(timeWatchDataMailBox, 0);
 8001826:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <TimeWatch_ModifyMin+0x84>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f003 ff33 	bl	8005698 <osMailAlloc>
 8001832:	6138      	str	r0, [r7, #16]
			memcpy(pTimeWatchData, &timeWatchData, sizeof(timeWatch_t));
 8001834:	2206      	movs	r2, #6
 8001836:	4908      	ldr	r1, [pc, #32]	@ (8001858 <TimeWatch_ModifyMin+0x80>)
 8001838:	6938      	ldr	r0, [r7, #16]
 800183a:	f006 fa29 	bl	8007c90 <memcpy>
			osMailPut(timeWatchDataMailBox, pTimeWatchData);
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <TimeWatch_ModifyMin+0x84>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6939      	ldr	r1, [r7, #16]
 8001844:	4618      	mov	r0, r3
 8001846:	f003 ff3d 	bl	80056c4 <osMailPut>
	}
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000060c 	.word	0x2000060c
 8001858:	20000568 	.word	0x20000568
 800185c:	20000604 	.word	0x20000604

08001860 <TimeWatch_ModifySec>:

void TimeWatch_ModifySec()
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(timeWatchEventMsgBox, 0);
 8001866:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <TimeWatch_ModifySec+0x6c>)
 8001868:	6819      	ldr	r1, [r3, #0]
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f003 fe46 	bl	8005500 <osMessageGet>
	uint16_t evtState;

	if (evt.status == osEventMessage) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b10      	cmp	r3, #16
 8001878:	d123      	bne.n	80018c2 <TimeWatch_ModifySec+0x62>
		evtState = evt.value.v;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	82fb      	strh	r3, [r7, #22]

		if (evtState == EVENT_TIME_MODIFY) {
 800187e:	8afb      	ldrh	r3, [r7, #22]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d103      	bne.n	800188c <TimeWatch_ModifySec+0x2c>
			Model_SetTimeWatchState(S_TIMEWATCH_NORMAL);
 8001884:	2000      	movs	r0, #0
 8001886:	f000 fa5d 	bl	8001d44 <Model_SetTimeWatchState>
 800188a:	e008      	b.n	800189e <TimeWatch_ModifySec+0x3e>
		}
		else if (evtState == EVENT_TIME_SET) {
 800188c:	8afb      	ldrh	r3, [r7, #22]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d105      	bne.n	800189e <TimeWatch_ModifySec+0x3e>
			timeWatchData.sec = 0;
 8001892:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <TimeWatch_ModifySec+0x70>)
 8001894:	2200      	movs	r2, #0
 8001896:	709a      	strb	r2, [r3, #2]
			timeWatchData.msec = 0;
 8001898:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <TimeWatch_ModifySec+0x70>)
 800189a:	2200      	movs	r2, #0
 800189c:	809a      	strh	r2, [r3, #4]
			// Presenter에서 반영되도록
		}
			timeWatch_t *pTimeWatchData = osMailAlloc(timeWatchDataMailBox, 0);
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <TimeWatch_ModifySec+0x74>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 fef7 	bl	8005698 <osMailAlloc>
 80018aa:	6138      	str	r0, [r7, #16]
			memcpy(pTimeWatchData, &timeWatchData, sizeof(timeWatch_t));
 80018ac:	2206      	movs	r2, #6
 80018ae:	4908      	ldr	r1, [pc, #32]	@ (80018d0 <TimeWatch_ModifySec+0x70>)
 80018b0:	6938      	ldr	r0, [r7, #16]
 80018b2:	f006 f9ed 	bl	8007c90 <memcpy>
			osMailPut(timeWatchDataMailBox, pTimeWatchData);
 80018b6:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <TimeWatch_ModifySec+0x74>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6939      	ldr	r1, [r7, #16]
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 ff01 	bl	80056c4 <osMailPut>
	}
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000060c 	.word	0x2000060c
 80018d0:	20000568 	.word	0x20000568
 80018d4:	20000604 	.word	0x20000604

080018d8 <TimeWatch_IncTimeCallBack>:

void TimeWatch_IncTimeCallBack()
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	if (timeWatchData.msec <= 1000-1) {
 80018dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 80018de:	889b      	ldrh	r3, [r3, #4]
 80018e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018e4:	d206      	bcs.n	80018f4 <TimeWatch_IncTimeCallBack+0x1c>
		timeWatchData.msec++;
 80018e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 80018e8:	889b      	ldrh	r3, [r3, #4]
 80018ea:	3301      	adds	r3, #1
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 80018f0:	809a      	strh	r2, [r3, #4]
		return;
 80018f2:	e02c      	b.n	800194e <TimeWatch_IncTimeCallBack+0x76>
	}
	else {
		timeWatchData.msec = 0;
 80018f4:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	809a      	strh	r2, [r3, #4]
	}

	if (timeWatchData.sec <= 60-1) {
 80018fa:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 80018fc:	789b      	ldrb	r3, [r3, #2]
 80018fe:	2b3b      	cmp	r3, #59	@ 0x3b
 8001900:	d806      	bhi.n	8001910 <TimeWatch_IncTimeCallBack+0x38>
		timeWatchData.sec++;
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 8001904:	789b      	ldrb	r3, [r3, #2]
 8001906:	3301      	adds	r3, #1
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 800190c:	709a      	strb	r2, [r3, #2]
		return;
 800190e:	e01e      	b.n	800194e <TimeWatch_IncTimeCallBack+0x76>
	}
	else {
		timeWatchData.sec = 0;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 8001912:	2200      	movs	r2, #0
 8001914:	709a      	strb	r2, [r3, #2]
	}

	if (timeWatchData.min <= 60-1) {
 8001916:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 8001918:	785b      	ldrb	r3, [r3, #1]
 800191a:	2b3b      	cmp	r3, #59	@ 0x3b
 800191c:	d806      	bhi.n	800192c <TimeWatch_IncTimeCallBack+0x54>
		timeWatchData.min++;
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 8001920:	785b      	ldrb	r3, [r3, #1]
 8001922:	3301      	adds	r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 8001928:	705a      	strb	r2, [r3, #1]
		return;
 800192a:	e010      	b.n	800194e <TimeWatch_IncTimeCallBack+0x76>
	}
	else {
		timeWatchData.min = 0;
 800192c:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 800192e:	2200      	movs	r2, #0
 8001930:	705a      	strb	r2, [r3, #1]
	}

	if (timeWatchData.hour <= 24-1) {
 8001932:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b17      	cmp	r3, #23
 8001938:	d806      	bhi.n	8001948 <TimeWatch_IncTimeCallBack+0x70>
		timeWatchData.hour++;
 800193a:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 8001944:	701a      	strb	r2, [r3, #0]
		return;
 8001946:	e002      	b.n	800194e <TimeWatch_IncTimeCallBack+0x76>
	}
	else {
		timeWatchData.hour = 0;
 8001948:	4b03      	ldr	r3, [pc, #12]	@ (8001958 <TimeWatch_IncTimeCallBack+0x80>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
	}
}
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000568 	.word	0x20000568

0800195c <Listener_Init>:
#include "Listener.h"

Button_TypeDef hbtnMode;

void Listener_Init()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	Button_Init(&hbtnMode, GPIOB, GPIO_PIN_5);
 8001960:	2220      	movs	r2, #32
 8001962:	4907      	ldr	r1, [pc, #28]	@ (8001980 <Listener_Init+0x24>)
 8001964:	4807      	ldr	r0, [pc, #28]	@ (8001984 <Listener_Init+0x28>)
 8001966:	f000 fd07 	bl	8002378 <Button_Init>
	Listener_TimeWatchInit();
 800196a:	f000 f8f7 	bl	8001b5c <Listener_TimeWatchInit>
	Listener_StopWatchInit();
 800196e:	f000 f883 	bl	8001a78 <Listener_StopWatchInit>
	Listener_DistanceInit();
 8001972:	f000 f847 	bl	8001a04 <Listener_DistanceInit>
	Listener_TempHumiInit();
 8001976:	f000 f8c3 	bl	8001b00 <Listener_TempHumiInit>
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40020400 	.word	0x40020400
 8001984:	20000570 	.word	0x20000570

08001988 <Listener_Execute>:

void Listener_Execute()
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
	eModeState_t state = Model_GetModeState();
 800198e:	f000 f963 	bl	8001c58 <Model_GetModeState>
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]

	switch(state)
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d817      	bhi.n	80019cc <Listener_Execute+0x44>
 800199c:	a201      	add	r2, pc, #4	@ (adr r2, 80019a4 <Listener_Execute+0x1c>)
 800199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a2:	bf00      	nop
 80019a4:	080019b5 	.word	0x080019b5
 80019a8:	080019bb 	.word	0x080019bb
 80019ac:	080019c1 	.word	0x080019c1
 80019b0:	080019c7 	.word	0x080019c7
	{
	case S_TIME_WATCH_MODE : Listener_TimeWatchExecute();
 80019b4:	f000 f8ea 	bl	8001b8c <Listener_TimeWatchExecute>
		break;
 80019b8:	e008      	b.n	80019cc <Listener_Execute+0x44>
	case S_STOP_WATCH_MODE : Listener_StopWatchExecute();
 80019ba:	f000 f875 	bl	8001aa8 <Listener_StopWatchExecute>
		break;
 80019be:	e005      	b.n	80019cc <Listener_Execute+0x44>
	case S_DISTANCE_MODE : Listener_DistanceExecute();
 80019c0:	f000 f83e 	bl	8001a40 <Listener_DistanceExecute>
		break;
 80019c4:	e002      	b.n	80019cc <Listener_Execute+0x44>
	case S_TEMP_HUMI_MODE : Listener_TempHumiExecute();
 80019c6:	f000 f8ad 	bl	8001b24 <Listener_TempHumiExecute>
		break;
 80019ca:	bf00      	nop
	}
	Listener_CheckButton();
 80019cc:	f000 f804 	bl	80019d8 <Listener_CheckButton>
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <Listener_CheckButton>:

void Listener_CheckButton()
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	if (Button_GetState(&hbtnMode) == ACT_RELEASED) {
 80019dc:	4807      	ldr	r0, [pc, #28]	@ (80019fc <Listener_CheckButton+0x24>)
 80019de:	f000 fce1 	bl	80023a4 <Button_GetState>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d106      	bne.n	80019f6 <Listener_CheckButton+0x1e>
		osMessagePut(modeEventMsgBox, EVENT_MODE, 0);
 80019e8:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <Listener_CheckButton+0x28>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f003 fd45 	bl	8005480 <osMessagePut>
	}
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000570 	.word	0x20000570
 8001a00:	200005e0 	.word	0x200005e0

08001a04 <Listener_DistanceInit>:

Button_TypeDef hbtnDistance;
UltraSonic_TypeDef sensor;

void Listener_DistanceInit()
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af02      	add	r7, sp, #8
	Button_Init(&hbtnDistance, GPIOB, GPIO_PIN_3);
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	4907      	ldr	r1, [pc, #28]	@ (8001a2c <Listener_DistanceInit+0x28>)
 8001a0e:	4808      	ldr	r0, [pc, #32]	@ (8001a30 <Listener_DistanceInit+0x2c>)
 8001a10:	f000 fcb2 	bl	8002378 <Button_Init>
	UltraSonic_Init(&sensor, GPIOC, GPIO_PIN_7, GPIOA, GPIO_PIN_9);
 8001a14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <Listener_DistanceInit+0x30>)
 8001a1c:	2280      	movs	r2, #128	@ 0x80
 8001a1e:	4906      	ldr	r1, [pc, #24]	@ (8001a38 <Listener_DistanceInit+0x34>)
 8001a20:	4806      	ldr	r0, [pc, #24]	@ (8001a3c <Listener_DistanceInit+0x38>)
 8001a22:	f001 f953 	bl	8002ccc <UltraSonic_Init>
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	2000057c 	.word	0x2000057c
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	20000588 	.word	0x20000588

08001a40 <Listener_DistanceExecute>:

void Listener_DistanceExecute()
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	Listener_Distance_CheckButton();
 8001a44:	f000 f802 	bl	8001a4c <Listener_Distance_CheckButton>
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <Listener_Distance_CheckButton>:

void Listener_Distance_CheckButton()
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	if (Button_GetState(&hbtnDistance) == ACT_RELEASED) {
 8001a50:	4807      	ldr	r0, [pc, #28]	@ (8001a70 <Listener_Distance_CheckButton+0x24>)
 8001a52:	f000 fca7 	bl	80023a4 <Button_GetState>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d106      	bne.n	8001a6a <Listener_Distance_CheckButton+0x1e>
		osMessagePut(DistanceEventMsgBox, EVENT_DISTANCE, 0);
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <Listener_Distance_CheckButton+0x28>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f003 fd0b 	bl	8005480 <osMessagePut>
	}
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000057c 	.word	0x2000057c
 8001a74:	200005dc 	.word	0x200005dc

08001a78 <Listener_StopWatchInit>:

Button_TypeDef hbtnRunStop;
Button_TypeDef hbtnClear;

void Listener_StopWatchInit()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	// button init
	Button_Init(&hbtnRunStop, GPIOB, GPIO_PIN_3);
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	4906      	ldr	r1, [pc, #24]	@ (8001a98 <Listener_StopWatchInit+0x20>)
 8001a80:	4806      	ldr	r0, [pc, #24]	@ (8001a9c <Listener_StopWatchInit+0x24>)
 8001a82:	f000 fc79 	bl	8002378 <Button_Init>
	Button_Init(&hbtnClear, GPIOA, GPIO_PIN_10);
 8001a86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a8a:	4905      	ldr	r1, [pc, #20]	@ (8001aa0 <Listener_StopWatchInit+0x28>)
 8001a8c:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <Listener_StopWatchInit+0x2c>)
 8001a8e:	f000 fc73 	bl	8002378 <Button_Init>
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	20000598 	.word	0x20000598
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	200005a4 	.word	0x200005a4

08001aa8 <Listener_StopWatchExecute>:

void Listener_StopWatchExecute()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	// check button event
	Listener_StopWatch_CheckButton();
 8001aac:	f000 f802 	bl	8001ab4 <Listener_StopWatch_CheckButton>
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <Listener_StopWatch_CheckButton>:

void Listener_StopWatch_CheckButton()
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	if (Button_GetState(&hbtnRunStop) == ACT_PUSHED) {
 8001ab8:	480e      	ldr	r0, [pc, #56]	@ (8001af4 <Listener_StopWatch_CheckButton+0x40>)
 8001aba:	f000 fc73 	bl	80023a4 <Button_GetState>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d107      	bne.n	8001ad4 <Listener_StopWatch_CheckButton+0x20>
		osMessagePut(stopWatchEventMsgBox, EVENT_RUN_STOP, 0);
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <Listener_StopWatch_CheckButton+0x44>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 fcd7 	bl	8005480 <osMessagePut>
	}
	else if (Button_GetState(&hbtnClear) == ACT_PUSHED) {
		osMessagePut(stopWatchEventMsgBox, EVENT_CLEAR, 0);
	}
}
 8001ad2:	e00c      	b.n	8001aee <Listener_StopWatch_CheckButton+0x3a>
	else if (Button_GetState(&hbtnClear) == ACT_PUSHED) {
 8001ad4:	4809      	ldr	r0, [pc, #36]	@ (8001afc <Listener_StopWatch_CheckButton+0x48>)
 8001ad6:	f000 fc65 	bl	80023a4 <Button_GetState>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d106      	bne.n	8001aee <Listener_StopWatch_CheckButton+0x3a>
		osMessagePut(stopWatchEventMsgBox, EVENT_CLEAR, 0);
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <Listener_StopWatch_CheckButton+0x44>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f003 fcc9 	bl	8005480 <osMessagePut>
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000598 	.word	0x20000598
 8001af8:	200005e8 	.word	0x200005e8
 8001afc:	200005a4 	.word	0x200005a4

08001b00 <Listener_TempHumiInit>:

Button_TypeDef hbtnTempHumi;


void Listener_TempHumiInit()
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	Button_Init(&hbtnTempHumi, GPIOB, GPIO_PIN_3);
 8001b04:	2208      	movs	r2, #8
 8001b06:	4904      	ldr	r1, [pc, #16]	@ (8001b18 <Listener_TempHumiInit+0x18>)
 8001b08:	4804      	ldr	r0, [pc, #16]	@ (8001b1c <Listener_TempHumiInit+0x1c>)
 8001b0a:	f000 fc35 	bl	8002378 <Button_Init>
	HAL_TIM_Base_Start(&htim5);
 8001b0e:	4804      	ldr	r0, [pc, #16]	@ (8001b20 <Listener_TempHumiInit+0x20>)
 8001b10:	f002 fe96 	bl	8004840 <HAL_TIM_Base_Start>
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40020400 	.word	0x40020400
 8001b1c:	200005b0 	.word	0x200005b0
 8001b20:	20000508 	.word	0x20000508

08001b24 <Listener_TempHumiExecute>:

void Listener_TempHumiExecute()
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	Listener_TempHumi_CheckButton();
 8001b28:	f000 f802 	bl	8001b30 <Listener_TempHumi_CheckButton>
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <Listener_TempHumi_CheckButton>:

void Listener_TempHumi_CheckButton()
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	if (Button_GetState(&hbtnTempHumi) == ACT_RELEASED) {
 8001b34:	4807      	ldr	r0, [pc, #28]	@ (8001b54 <Listener_TempHumi_CheckButton+0x24>)
 8001b36:	f000 fc35 	bl	80023a4 <Button_GetState>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d106      	bne.n	8001b4e <Listener_TempHumi_CheckButton+0x1e>
		osMessagePut(TempHumiEventMsgBox, EVENT_TEMPHUMI, 0);
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <Listener_TempHumi_CheckButton+0x28>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 fc99 	bl	8005480 <osMessagePut>
	}
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200005b0 	.word	0x200005b0
 8001b58:	200005fc 	.word	0x200005fc

08001b5c <Listener_TimeWatchInit>:

Button_TypeDef hbtnTimeModify;
Button_TypeDef hbtnTimeSet;

void Listener_TimeWatchInit()
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	Button_Init(&hbtnTimeModify, GPIOB, GPIO_PIN_3);
 8001b60:	2208      	movs	r2, #8
 8001b62:	4906      	ldr	r1, [pc, #24]	@ (8001b7c <Listener_TimeWatchInit+0x20>)
 8001b64:	4806      	ldr	r0, [pc, #24]	@ (8001b80 <Listener_TimeWatchInit+0x24>)
 8001b66:	f000 fc07 	bl	8002378 <Button_Init>
	Button_Init(&hbtnTimeSet, GPIOA, GPIO_PIN_10);
 8001b6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b6e:	4905      	ldr	r1, [pc, #20]	@ (8001b84 <Listener_TimeWatchInit+0x28>)
 8001b70:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <Listener_TimeWatchInit+0x2c>)
 8001b72:	f000 fc01 	bl	8002378 <Button_Init>
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	200005bc 	.word	0x200005bc
 8001b84:	40020000 	.word	0x40020000
 8001b88:	200005c8 	.word	0x200005c8

08001b8c <Listener_TimeWatchExecute>:

void Listener_TimeWatchExecute()
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	Listener_TimeWatch_CheckButton();
 8001b90:	f000 f802 	bl	8001b98 <Listener_TimeWatch_CheckButton>
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <Listener_TimeWatch_CheckButton>:

void Listener_TimeWatch_CheckButton()
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
	if (Button_GetState(&hbtnTimeModify) == ACT_RELEASED) {
 8001b9c:	480e      	ldr	r0, [pc, #56]	@ (8001bd8 <Listener_TimeWatch_CheckButton+0x40>)
 8001b9e:	f000 fc01 	bl	80023a4 <Button_GetState>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d107      	bne.n	8001bb8 <Listener_TimeWatch_CheckButton+0x20>
		osMessagePut(timeWatchEventMsgBox, EVENT_TIME_MODIFY, 0);
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <Listener_TimeWatch_CheckButton+0x44>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2200      	movs	r2, #0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 fc65 	bl	8005480 <osMessagePut>
	}
	else if (Button_GetState(&hbtnTimeSet) == ACT_RELEASED) {
		osMessagePut(timeWatchEventMsgBox, EVENT_TIME_SET, 0);
	}
}
 8001bb6:	e00c      	b.n	8001bd2 <Listener_TimeWatch_CheckButton+0x3a>
	else if (Button_GetState(&hbtnTimeSet) == ACT_RELEASED) {
 8001bb8:	4809      	ldr	r0, [pc, #36]	@ (8001be0 <Listener_TimeWatch_CheckButton+0x48>)
 8001bba:	f000 fbf3 	bl	80023a4 <Button_GetState>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d106      	bne.n	8001bd2 <Listener_TimeWatch_CheckButton+0x3a>
		osMessagePut(timeWatchEventMsgBox, EVENT_TIME_SET, 0);
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <Listener_TimeWatch_CheckButton+0x44>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2101      	movs	r1, #1
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 fc57 	bl	8005480 <osMessagePut>
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200005bc 	.word	0x200005bc
 8001bdc:	2000060c 	.word	0x2000060c
 8001be0:	200005c8 	.word	0x200005c8

08001be4 <Model_DistanceInit>:

osMessageQId DistanceEventMsgBox;
osMessageQDef(DistanceEventQueue, 4, uint16_t);

void Model_DistanceInit()
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
	DistanceEventMsgBox = osMessageCreate(osMessageQ(DistanceEventQueue), NULL);
 8001be8:	2100      	movs	r1, #0
 8001bea:	4807      	ldr	r0, [pc, #28]	@ (8001c08 <Model_DistanceInit+0x24>)
 8001bec:	f003 fc1f 	bl	800542e <osMessageCreate>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4a06      	ldr	r2, [pc, #24]	@ (8001c0c <Model_DistanceInit+0x28>)
 8001bf4:	6013      	str	r3, [r2, #0]
	DistanceDataMailBox = osMailCreate(osMailQ(DistanceDataQueue), NULL);
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <Model_DistanceInit+0x2c>)
 8001bfa:	f003 fcf5 	bl	80055e8 <osMailCreate>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <Model_DistanceInit+0x30>)
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	08008740 	.word	0x08008740
 8001c0c:	200005dc 	.word	0x200005dc
 8001c10:	08008734 	.word	0x08008734
 8001c14:	200005d4 	.word	0x200005d4

08001c18 <Model_ModeInit>:

osMessageQId modeEventMsgBox;
osMessageQDef(modeEventQueue, 4, uint16_t);

void Model_ModeInit()
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	modeEventMsgBox = osMessageCreate(osMessageQ(modeEventQueue), NULL);
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4804      	ldr	r0, [pc, #16]	@ (8001c30 <Model_ModeInit+0x18>)
 8001c20:	f003 fc05 	bl	800542e <osMessageCreate>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4a03      	ldr	r2, [pc, #12]	@ (8001c34 <Model_ModeInit+0x1c>)
 8001c28:	6013      	str	r3, [r2, #0]
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	08008750 	.word	0x08008750
 8001c34:	200005e0 	.word	0x200005e0

08001c38 <Model_SetModeState>:

void Model_SetModeState(eModeState_t state)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
	modeState = state;
 8001c42:	4a04      	ldr	r2, [pc, #16]	@ (8001c54 <Model_SetModeState+0x1c>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	7013      	strb	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	20000004 	.word	0x20000004

08001c58 <Model_GetModeState>:

eModeState_t Model_GetModeState()
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
	return modeState;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	@ (8001c6c <Model_GetModeState+0x14>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000004 	.word	0x20000004

08001c70 <Model_StopWatchInit>:

osMailQId stopWatchDataMailBox;
osMailQDef(stopWatchDataQueue, 4, stopWatch_t);

void Model_StopWatchInit()
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	stopWatchEventMsgBox = osMessageCreate(osMessageQ(stopWatchEventQueue), NULL);
 8001c74:	2100      	movs	r1, #0
 8001c76:	4807      	ldr	r0, [pc, #28]	@ (8001c94 <Model_StopWatchInit+0x24>)
 8001c78:	f003 fbd9 	bl	800542e <osMessageCreate>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4a06      	ldr	r2, [pc, #24]	@ (8001c98 <Model_StopWatchInit+0x28>)
 8001c80:	6013      	str	r3, [r2, #0]
	stopWatchDataMailBox = osMailCreate(osMailQ(stopWatchDataQueue), NULL);
 8001c82:	2100      	movs	r1, #0
 8001c84:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <Model_StopWatchInit+0x2c>)
 8001c86:	f003 fcaf 	bl	80055e8 <osMailCreate>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ca0 <Model_StopWatchInit+0x30>)
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	08008760 	.word	0x08008760
 8001c98:	200005e8 	.word	0x200005e8
 8001c9c:	08008770 	.word	0x08008770
 8001ca0:	200005ec 	.word	0x200005ec

08001ca4 <Model_SetStopWatchState>:

void Model_SetStopWatchState(eStopWatchState_t state)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
	stopWatchState = state;
 8001cae:	4a04      	ldr	r2, [pc, #16]	@ (8001cc0 <Model_SetStopWatchState+0x1c>)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	7013      	strb	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	200005e4 	.word	0x200005e4

08001cc4 <Model_GetStopWatchState>:

eStopWatchState_t Model_GetStopWatchState()
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
	return stopWatchState;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	@ (8001cd8 <Model_GetStopWatchState+0x14>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	200005e4 	.word	0x200005e4

08001cdc <Model_TempHumiInit>:

osMessageQId TempHumiEventMsgBox;
osMessageQDef(TempHumiEventQueue, 4, uint16_t);

void Model_TempHumiInit()
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	TempHumiEventMsgBox = osMessageCreate(osMessageQ(TempHumiEventQueue), NULL);
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4807      	ldr	r0, [pc, #28]	@ (8001d00 <Model_TempHumiInit+0x24>)
 8001ce4:	f003 fba3 	bl	800542e <osMessageCreate>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4a06      	ldr	r2, [pc, #24]	@ (8001d04 <Model_TempHumiInit+0x28>)
 8001cec:	6013      	str	r3, [r2, #0]
	TempHumiDataMailBox = osMailCreate(osMailQ(TempHumiDataQueue), NULL);
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <Model_TempHumiInit+0x2c>)
 8001cf2:	f003 fc79 	bl	80055e8 <osMailCreate>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <Model_TempHumiInit+0x30>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	08008788 	.word	0x08008788
 8001d04:	200005fc 	.word	0x200005fc
 8001d08:	0800877c 	.word	0x0800877c
 8001d0c:	200005f4 	.word	0x200005f4

08001d10 <Model_TimeWatchInit>:

osMessageQId timeWatchEventMsgBox;
osMessageQDef(timeWatchEventQueue, 4, uint16_t);

void Model_TimeWatchInit()
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	timeWatchEventMsgBox = osMessageCreate(osMessageQ(timeWatchEventQueue), NULL);
 8001d14:	2100      	movs	r1, #0
 8001d16:	4807      	ldr	r0, [pc, #28]	@ (8001d34 <Model_TimeWatchInit+0x24>)
 8001d18:	f003 fb89 	bl	800542e <osMessageCreate>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a06      	ldr	r2, [pc, #24]	@ (8001d38 <Model_TimeWatchInit+0x28>)
 8001d20:	6013      	str	r3, [r2, #0]
	timeWatchDataMailBox = osMailCreate(osMailQ(timeWatchDataQueue), NULL);
 8001d22:	2100      	movs	r1, #0
 8001d24:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <Model_TimeWatchInit+0x2c>)
 8001d26:	f003 fc5f 	bl	80055e8 <osMailCreate>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <Model_TimeWatchInit+0x30>)
 8001d2e:	6013      	str	r3, [r2, #0]
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	080087a4 	.word	0x080087a4
 8001d38:	2000060c 	.word	0x2000060c
 8001d3c:	08008798 	.word	0x08008798
 8001d40:	20000604 	.word	0x20000604

08001d44 <Model_SetTimeWatchState>:

void Model_SetTimeWatchState(eTimeWatchState_t state)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
	timeWatchState = state;
 8001d4e:	4a04      	ldr	r2, [pc, #16]	@ (8001d60 <Model_SetTimeWatchState+0x1c>)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	7013      	strb	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	20000600 	.word	0x20000600

08001d64 <Model_GetTimeWatchState>:

eTimeWatchState_t Model_GetTimeWatchState()
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
	return timeWatchState;
 8001d68:	4b03      	ldr	r3, [pc, #12]	@ (8001d78 <Model_GetTimeWatchState+0x14>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000600 	.word	0x20000600

08001d7c <Presenter_Init>:
 *      Author: kccistc
 */
#include "Presenter.h"

void Presenter_Init()
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	Presenter_TimeWatchInit();
 8001d80:	f000 f9fa 	bl	8002178 <Presenter_TimeWatchInit>
	Presenter_StopWatchInit();
 8001d84:	f000 f890 	bl	8001ea8 <Presenter_StopWatchInit>
	Presenter_DistanceInit();
 8001d88:	f000 f82a 	bl	8001de0 <Presenter_DistanceInit>
	Presenter_TempHumiInit();
 8001d8c:	f000 f97e 	bl	800208c <Presenter_TempHumiInit>
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <Presenter_Execute>:
void Presenter_Execute()
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
	eModeState_t state = Model_GetModeState();
 8001d9a:	f7ff ff5d 	bl	8001c58 <Model_GetModeState>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
	switch(state)
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d817      	bhi.n	8001dd8 <Presenter_Execute+0x44>
 8001da8:	a201      	add	r2, pc, #4	@ (adr r2, 8001db0 <Presenter_Execute+0x1c>)
 8001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dae:	bf00      	nop
 8001db0:	08001dc1 	.word	0x08001dc1
 8001db4:	08001dc7 	.word	0x08001dc7
 8001db8:	08001dcd 	.word	0x08001dcd
 8001dbc:	08001dd3 	.word	0x08001dd3
	{
	case S_TIME_WATCH_MODE:
		Presenter_TimeWatchExecute();
 8001dc0:	f000 f9e2 	bl	8002188 <Presenter_TimeWatchExecute>
		break;
 8001dc4:	e008      	b.n	8001dd8 <Presenter_Execute+0x44>
	case S_STOP_WATCH_MODE:
		Presenter_StopWatchExecute();
 8001dc6:	f000 f879 	bl	8001ebc <Presenter_StopWatchExecute>
		break;
 8001dca:	e005      	b.n	8001dd8 <Presenter_Execute+0x44>
	case S_DISTANCE_MODE:
		Presenter_DistanceExecute();
 8001dcc:	f000 f812 	bl	8001df4 <Presenter_DistanceExecute>
		break;
 8001dd0:	e002      	b.n	8001dd8 <Presenter_Execute+0x44>
	case S_TEMP_HUMI_MODE:
		Presenter_TempHumiExecute();
 8001dd2:	f000 f965 	bl	80020a0 <Presenter_TempHumiExecute>
		break;
 8001dd6:	bf00      	nop
	}
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <Presenter_DistanceInit>:
#include "Presenter_Distance.h"
#include <string.h>
#include <stdio.h>

void Presenter_DistanceInit()
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 8001de4:	4802      	ldr	r0, [pc, #8]	@ (8001df0 <Presenter_DistanceInit+0x10>)
 8001de6:	f000 fdf1 	bl	80029cc <LCD_Init>
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000390 	.word	0x20000390

08001df4 <Presenter_DistanceExecute>:
void Presenter_DistanceExecute()
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
	Distance_t DistanceData;
	Distance_t *pDistanceData;

	osEvent evt = osMailGet(DistanceDataMailBox, 0);
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <Presenter_DistanceExecute+0x48>)
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2200      	movs	r2, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fc9c 	bl	8005740 <osMailGet>
	if (evt.status == osEventMail) {
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	d111      	bne.n	8001e32 <Presenter_DistanceExecute+0x3e>
		pDistanceData = evt.value.p;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	617b      	str	r3, [r7, #20]
		memcpy(&DistanceData, pDistanceData, sizeof(Distance_t));
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	823b      	strh	r3, [r7, #16]
		osMailFree(DistanceDataMailBox, pDistanceData);
 8001e1a:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <Presenter_DistanceExecute+0x48>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6979      	ldr	r1, [r7, #20]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 fd01 	bl	8005828 <osMailFree>

		Presenter_Distance_FND(DistanceData);
 8001e26:	8a38      	ldrh	r0, [r7, #16]
 8001e28:	f000 f80a 	bl	8001e40 <Presenter_Distance_FND>
		Presenter_Distance_LCD(DistanceData);
 8001e2c:	8a38      	ldrh	r0, [r7, #16]
 8001e2e:	f000 f813 	bl	8001e58 <Presenter_Distance_LCD>
	}
}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200005d4 	.word	0x200005d4

08001e40 <Presenter_Distance_FND>:

void Presenter_Distance_FND(Distance_t distanceData)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	80b8      	strh	r0, [r7, #4]
	FND_WriteData(distanceData.distance);
 8001e48:	88bb      	ldrh	r3, [r7, #4]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fc1c 	bl	8002688 <FND_WriteData>

}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <Presenter_Distance_LCD>:

void Presenter_Distance_LCD(Distance_t distanceData)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b09c      	sub	sp, #112	@ 0x70
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	80b8      	strh	r0, [r7, #4]
	char str[50];
	char str1[50];
	sprintf(str, "Distance : %02d   ", distanceData.distance);
 8001e60:	88bb      	ldrh	r3, [r7, #4]
 8001e62:	461a      	mov	r2, r3
 8001e64:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001e68:	490d      	ldr	r1, [pc, #52]	@ (8001ea0 <Presenter_Distance_LCD+0x48>)
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f005 fe4c 	bl	8007b08 <siprintf>
	sprintf(str1, "                 ");
 8001e70:	f107 0308 	add.w	r3, r7, #8
 8001e74:	490b      	ldr	r1, [pc, #44]	@ (8001ea4 <Presenter_Distance_LCD+0x4c>)
 8001e76:	4618      	mov	r0, r3
 8001e78:	f005 fe46 	bl	8007b08 <siprintf>
	LCD_writeStringXY(0, 0, str);
 8001e7c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001e80:	461a      	mov	r2, r3
 8001e82:	2100      	movs	r1, #0
 8001e84:	2000      	movs	r0, #0
 8001e86:	f000 fef0 	bl	8002c6a <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, str1);
 8001e8a:	f107 0308 	add.w	r3, r7, #8
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2100      	movs	r1, #0
 8001e92:	2001      	movs	r0, #1
 8001e94:	f000 fee9 	bl	8002c6a <LCD_writeStringXY>
}
 8001e98:	bf00      	nop
 8001e9a:	3770      	adds	r7, #112	@ 0x70
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	080085f8 	.word	0x080085f8
 8001ea4:	0800860c 	.word	0x0800860c

08001ea8 <Presenter_StopWatchInit>:
 */

#include "Presenter_StopWatch.h"

void Presenter_StopWatchInit()
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 8001eac:	4802      	ldr	r0, [pc, #8]	@ (8001eb8 <Presenter_StopWatchInit+0x10>)
 8001eae:	f000 fd8d 	bl	80029cc <LCD_Init>
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000390 	.word	0x20000390

08001ebc <Presenter_StopWatchExecute>:

void Presenter_StopWatchExecute()
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
	stopWatch_t stopWatchData;
	stopWatch_t *pStopWatchData;
	osEvent evt = osMailGet(stopWatchDataMailBox, 0);
 8001ec2:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <Presenter_StopWatchExecute+0x58>)
 8001ec4:	6819      	ldr	r1, [r3, #0]
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 fc38 	bl	8005740 <osMailGet>
	if (evt.status == osEventMail) {
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	d11a      	bne.n	8001f0c <Presenter_StopWatchExecute+0x50>
		pStopWatchData = evt.value.p;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	617b      	str	r3, [r7, #20]
		memcpy(&stopWatchData, pStopWatchData, sizeof(stopWatch_t));
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	2206      	movs	r2, #6
 8001ee0:	6979      	ldr	r1, [r7, #20]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f005 fed4 	bl	8007c90 <memcpy>
		osMailFree(stopWatchDataMailBox, pStopWatchData);
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <Presenter_StopWatchExecute+0x58>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6979      	ldr	r1, [r7, #20]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 fc9a 	bl	8005828 <osMailFree>
		Presenter_StopWatch_FND(stopWatchData);
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001efc:	f000 f80c 	bl	8001f18 <Presenter_StopWatch_FND>
		Presenter_StopWatch_LCD(stopWatchData);
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f08:	f000 f86c 	bl	8001fe4 <Presenter_StopWatch_LCD>
	}
}
 8001f0c:	bf00      	nop
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200005ec 	.word	0x200005ec

08001f18 <Presenter_StopWatch_FND>:

void Presenter_StopWatch_FND(stopWatch_t stopWatchData)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	463b      	mov	r3, r7
 8001f20:	e883 0003 	stmia.w	r3, {r0, r1}
	FND_WriteData(stopWatchData.min%10*1000 + stopWatchData.sec%100*10 + stopWatchData.msec/100);
 8001f24:	787a      	ldrb	r2, [r7, #1]
 8001f26:	4b2d      	ldr	r3, [pc, #180]	@ (8001fdc <Presenter_StopWatch_FND+0xc4>)
 8001f28:	fba3 1302 	umull	r1, r3, r3, r2
 8001f2c:	08d9      	lsrs	r1, r3, #3
 8001f2e:	460b      	mov	r3, r1
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	0152      	lsls	r2, r2, #5
 8001f3e:	1ad2      	subs	r2, r2, r3
 8001f40:	0092      	lsls	r2, r2, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	78bb      	ldrb	r3, [r7, #2]
 8001f4a:	4925      	ldr	r1, [pc, #148]	@ (8001fe0 <Presenter_StopWatch_FND+0xc8>)
 8001f4c:	fba1 0103 	umull	r0, r1, r1, r3
 8001f50:	0949      	lsrs	r1, r1, #5
 8001f52:	2064      	movs	r0, #100	@ 0x64
 8001f54:	fb00 f101 	mul.w	r1, r0, r1
 8001f58:	1a5b      	subs	r3, r3, r1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	0089      	lsls	r1, r1, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	88bb      	ldrh	r3, [r7, #4]
 8001f6c:	491c      	ldr	r1, [pc, #112]	@ (8001fe0 <Presenter_StopWatch_FND+0xc8>)
 8001f6e:	fba1 1303 	umull	r1, r3, r1, r3
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4413      	add	r3, r2
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fb84 	bl	8002688 <FND_WriteData>
	FND_WriteDp(FND_DP_1, FND_DP_OFF);
 8001f80:	2100      	movs	r1, #0
 8001f82:	2001      	movs	r0, #1
 8001f84:	f000 fb58 	bl	8002638 <FND_WriteDp>
	FND_WriteDp(FND_DP_100, FND_DP_OFF);
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2004      	movs	r0, #4
 8001f8c:	f000 fb54 	bl	8002638 <FND_WriteDp>
	if (stopWatchData.msec%100 <50) {
 8001f90:	88bb      	ldrh	r3, [r7, #4]
 8001f92:	4a13      	ldr	r2, [pc, #76]	@ (8001fe0 <Presenter_StopWatch_FND+0xc8>)
 8001f94:	fba2 1203 	umull	r1, r2, r2, r3
 8001f98:	0952      	lsrs	r2, r2, #5
 8001f9a:	2164      	movs	r1, #100	@ 0x64
 8001f9c:	fb01 f202 	mul.w	r2, r1, r2
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	2b31      	cmp	r3, #49	@ 0x31
 8001fa6:	d804      	bhi.n	8001fb2 <Presenter_StopWatch_FND+0x9a>
		FND_WriteDp(FND_DP_10, FND_DP_ON);
 8001fa8:	2101      	movs	r1, #1
 8001faa:	2002      	movs	r0, #2
 8001fac:	f000 fb44 	bl	8002638 <FND_WriteDp>
 8001fb0:	e003      	b.n	8001fba <Presenter_StopWatch_FND+0xa2>
	}
	else {
		FND_WriteDp(FND_DP_10, FND_DP_OFF);
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f000 fb3f 	bl	8002638 <FND_WriteDp>
	}

	if (stopWatchData.msec <500) {
 8001fba:	88bb      	ldrh	r3, [r7, #4]
 8001fbc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001fc0:	d204      	bcs.n	8001fcc <Presenter_StopWatch_FND+0xb4>
		FND_WriteDp(FND_DP_1000, FND_DP_ON);
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	2008      	movs	r0, #8
 8001fc6:	f000 fb37 	bl	8002638 <FND_WriteDp>
	}
	else {
		FND_WriteDp(FND_DP_1000, FND_DP_OFF);
	}
}
 8001fca:	e003      	b.n	8001fd4 <Presenter_StopWatch_FND+0xbc>
		FND_WriteDp(FND_DP_1000, FND_DP_OFF);
 8001fcc:	2100      	movs	r1, #0
 8001fce:	2008      	movs	r0, #8
 8001fd0:	f000 fb32 	bl	8002638 <FND_WriteDp>
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	cccccccd 	.word	0xcccccccd
 8001fe0:	51eb851f 	.word	0x51eb851f

08001fe4 <Presenter_StopWatch_LCD>:

void Presenter_StopWatch_LCD(stopWatch_t stopWatchData)
{
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b09f      	sub	sp, #124	@ 0x7c
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	463b      	mov	r3, r7
 8001fec:	e883 0003 	stmia.w	r3, {r0, r1}
	char str2[50];
	static uint32_t clearDispTime = 0;
	static uint8_t clearDispFlag = 0;

	eStopWatchState_t state;
	sprintf(str, "%02d:%02d:%02d.%03d          ", stopWatchData.hour, stopWatchData.min, stopWatchData.sec, stopWatchData.msec);
 8001ff0:	783b      	ldrb	r3, [r7, #0]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	787b      	ldrb	r3, [r7, #1]
 8001ff6:	461c      	mov	r4, r3
 8001ff8:	78bb      	ldrb	r3, [r7, #2]
 8001ffa:	88ba      	ldrh	r2, [r7, #4]
 8001ffc:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002000:	9201      	str	r2, [sp, #4]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	4623      	mov	r3, r4
 8002006:	460a      	mov	r2, r1
 8002008:	491c      	ldr	r1, [pc, #112]	@ (800207c <Presenter_StopWatch_LCD+0x98>)
 800200a:	f005 fd7d 	bl	8007b08 <siprintf>
	LCD_writeStringXY(1, 0, str);
 800200e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002012:	461a      	mov	r2, r3
 8002014:	2100      	movs	r1, #0
 8002016:	2001      	movs	r0, #1
 8002018:	f000 fe27 	bl	8002c6a <LCD_writeStringXY>
	state = Model_GetStopWatchState();
 800201c:	f7ff fe52 	bl	8001cc4 <Model_GetStopWatchState>
 8002020:	4603      	mov	r3, r0
 8002022:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	if (state == S_STOPWATCH_RUN) {
 8002026:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800202a:	2b01      	cmp	r3, #1
 800202c:	d106      	bne.n	800203c <Presenter_StopWatch_LCD+0x58>
		sprintf(str2, "StopWatch : RUN ");
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	4913      	ldr	r1, [pc, #76]	@ (8002080 <Presenter_StopWatch_LCD+0x9c>)
 8002034:	4618      	mov	r0, r3
 8002036:	f005 fd67 	bl	8007b08 <siprintf>
 800203a:	e014      	b.n	8002066 <Presenter_StopWatch_LCD+0x82>
	}
	else if (state == S_STOPWATCH_STOP) {
 800203c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002040:	2b00      	cmp	r3, #0
 8002042:	d106      	bne.n	8002052 <Presenter_StopWatch_LCD+0x6e>
		sprintf(str2, "StopWatch : STOP");
 8002044:	f107 0308 	add.w	r3, r7, #8
 8002048:	490e      	ldr	r1, [pc, #56]	@ (8002084 <Presenter_StopWatch_LCD+0xa0>)
 800204a:	4618      	mov	r0, r3
 800204c:	f005 fd5c 	bl	8007b08 <siprintf>
 8002050:	e009      	b.n	8002066 <Presenter_StopWatch_LCD+0x82>
	}
	else if (state == S_STOPWATCH_CLEAR) {
 8002052:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002056:	2b02      	cmp	r3, #2
 8002058:	d105      	bne.n	8002066 <Presenter_StopWatch_LCD+0x82>
		sprintf(str2, "StopWatch : CLEAR");
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	490a      	ldr	r1, [pc, #40]	@ (8002088 <Presenter_StopWatch_LCD+0xa4>)
 8002060:	4618      	mov	r0, r3
 8002062:	f005 fd51 	bl	8007b08 <siprintf>
	}
	LCD_writeStringXY(0, 0, str2);
 8002066:	f107 0308 	add.w	r3, r7, #8
 800206a:	461a      	mov	r2, r3
 800206c:	2100      	movs	r1, #0
 800206e:	2000      	movs	r0, #0
 8002070:	f000 fdfb 	bl	8002c6a <LCD_writeStringXY>
}
 8002074:	bf00      	nop
 8002076:	3774      	adds	r7, #116	@ 0x74
 8002078:	46bd      	mov	sp, r7
 800207a:	bd90      	pop	{r4, r7, pc}
 800207c:	08008620 	.word	0x08008620
 8002080:	08008640 	.word	0x08008640
 8002084:	08008654 	.word	0x08008654
 8002088:	08008668 	.word	0x08008668

0800208c <Presenter_TempHumiInit>:
#include "Presenter_TempHumi.h"
#include <string.h>
#include <stdio.h>

void Presenter_TempHumiInit()
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 8002090:	4802      	ldr	r0, [pc, #8]	@ (800209c <Presenter_TempHumiInit+0x10>)
 8002092:	f000 fc9b 	bl	80029cc <LCD_Init>
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000390 	.word	0x20000390

080020a0 <Presenter_TempHumiExecute>:

void Presenter_TempHumiExecute()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
	TempHumi_t TempHumiData;
	TempHumi_t *pTempHumiData;

	osEvent evt = osMailGet(TempHumiDataMailBox, 0);
 80020a6:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <Presenter_TempHumiExecute+0x48>)
 80020a8:	6819      	ldr	r1, [r3, #0]
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2200      	movs	r2, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f003 fb46 	bl	8005740 <osMailGet>
	if (evt.status == osEventMail) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d111      	bne.n	80020de <Presenter_TempHumiExecute+0x3e>
		pTempHumiData = evt.value.p;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	617b      	str	r3, [r7, #20]
		memcpy(&TempHumiData, pTempHumiData, sizeof(TempHumi_t));
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	823b      	strh	r3, [r7, #16]
		osMailFree(TempHumiDataMailBox, pTempHumiData);
 80020c6:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <Presenter_TempHumiExecute+0x48>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6979      	ldr	r1, [r7, #20]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 fbab 	bl	8005828 <osMailFree>

		Presenter_TempHumi_FND(TempHumiData);
 80020d2:	8a38      	ldrh	r0, [r7, #16]
 80020d4:	f000 f80a 	bl	80020ec <Presenter_TempHumi_FND>
		Presenter_TempHumi_LCD(TempHumiData);
 80020d8:	8a38      	ldrh	r0, [r7, #16]
 80020da:	f000 f813 	bl	8002104 <Presenter_TempHumi_LCD>
	}
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200005f4 	.word	0x200005f4

080020ec <Presenter_TempHumi_FND>:

void Presenter_TempHumi_FND(TempHumi_t TempHumiData)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	80b8      	strh	r0, [r7, #4]
	FND_WriteData(TempHumiData.TempHumi);
 80020f4:	88bb      	ldrh	r3, [r7, #4]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fac6 	bl	8002688 <FND_WriteData>

}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <Presenter_TempHumi_LCD>:

void Presenter_TempHumi_LCD(TempHumi_t TempHumiData)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b09d      	sub	sp, #116	@ 0x74
 8002108:	af00      	add	r7, sp, #0
 800210a:	80b8      	strh	r0, [r7, #4]
	char str[50];
	char str1[50];

	sprintf(str, "T : %02d H : %02d  ", (TempHumiData.TempHumi)/100, (TempHumiData.TempHumi)%100);
 800210c:	88bb      	ldrh	r3, [r7, #4]
 800210e:	4a17      	ldr	r2, [pc, #92]	@ (800216c <Presenter_TempHumi_LCD+0x68>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	b29b      	uxth	r3, r3
 8002118:	461c      	mov	r4, r3
 800211a:	88bb      	ldrh	r3, [r7, #4]
 800211c:	4a13      	ldr	r2, [pc, #76]	@ (800216c <Presenter_TempHumi_LCD+0x68>)
 800211e:	fba2 1203 	umull	r1, r2, r2, r3
 8002122:	0952      	lsrs	r2, r2, #5
 8002124:	2164      	movs	r1, #100	@ 0x64
 8002126:	fb01 f202 	mul.w	r2, r1, r2
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	b29b      	uxth	r3, r3
 800212e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002132:	4622      	mov	r2, r4
 8002134:	490e      	ldr	r1, [pc, #56]	@ (8002170 <Presenter_TempHumi_LCD+0x6c>)
 8002136:	f005 fce7 	bl	8007b08 <siprintf>
	LCD_writeStringXY(0, 0, str);
 800213a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800213e:	461a      	mov	r2, r3
 8002140:	2100      	movs	r1, #0
 8002142:	2000      	movs	r0, #0
 8002144:	f000 fd91 	bl	8002c6a <LCD_writeStringXY>
	sprintf(str1, "                 ");
 8002148:	f107 0308 	add.w	r3, r7, #8
 800214c:	4909      	ldr	r1, [pc, #36]	@ (8002174 <Presenter_TempHumi_LCD+0x70>)
 800214e:	4618      	mov	r0, r3
 8002150:	f005 fcda 	bl	8007b08 <siprintf>
	LCD_writeStringXY(1, 0, str1);
 8002154:	f107 0308 	add.w	r3, r7, #8
 8002158:	461a      	mov	r2, r3
 800215a:	2100      	movs	r1, #0
 800215c:	2001      	movs	r0, #1
 800215e:	f000 fd84 	bl	8002c6a <LCD_writeStringXY>
}
 8002162:	bf00      	nop
 8002164:	3774      	adds	r7, #116	@ 0x74
 8002166:	46bd      	mov	sp, r7
 8002168:	bd90      	pop	{r4, r7, pc}
 800216a:	bf00      	nop
 800216c:	51eb851f 	.word	0x51eb851f
 8002170:	0800867c 	.word	0x0800867c
 8002174:	08008690 	.word	0x08008690

08002178 <Presenter_TimeWatchInit>:
#include "Presenter_TimeWatch.h"
#include <string.h>
#include <stdio.h>

void Presenter_TimeWatchInit()
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <Presenter_TimeWatchExecute>:

void Presenter_TimeWatchExecute()
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
	timeWatch_t timeWatchData;
	timeWatch_t *pTimeWatchData;

	osEvent evt = osMailGet(timeWatchDataMailBox, 0);
 800218e:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <Presenter_TimeWatchExecute+0x58>)
 8002190:	6819      	ldr	r1, [r3, #0]
 8002192:	463b      	mov	r3, r7
 8002194:	2200      	movs	r2, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f003 fad2 	bl	8005740 <osMailGet>
	if (evt.status == osEventMail) {
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b20      	cmp	r3, #32
 80021a0:	d11a      	bne.n	80021d8 <Presenter_TimeWatchExecute+0x50>
		pTimeWatchData = evt.value.p;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	617b      	str	r3, [r7, #20]
		memcpy(&timeWatchData, pTimeWatchData, sizeof(timeWatch_t));
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	2206      	movs	r2, #6
 80021ac:	6979      	ldr	r1, [r7, #20]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f005 fd6e 	bl	8007c90 <memcpy>
		osMailFree(timeWatchDataMailBox, pTimeWatchData);
 80021b4:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <Presenter_TimeWatchExecute+0x58>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6979      	ldr	r1, [r7, #20]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 fb34 	bl	8005828 <osMailFree>

		Presenter_TimeWatch_FND(timeWatchData);
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021c8:	f000 f80c 	bl	80021e4 <Presenter_TimeWatch_FND>
		Presenter_TimeWatch_LCD(timeWatchData);
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021d4:	f000 f83a 	bl	800224c <Presenter_TimeWatch_LCD>
	}

}
 80021d8:	bf00      	nop
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000604 	.word	0x20000604

080021e4 <Presenter_TimeWatch_FND>:

void Presenter_TimeWatch_FND(timeWatch_t timeWatchData)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	463b      	mov	r3, r7
 80021ec:	e883 0003 	stmia.w	r3, {r0, r1}
	FND_WriteData(timeWatchData.hour*100 + timeWatchData.min);
 80021f0:	783b      	ldrb	r3, [r7, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	0092      	lsls	r2, r2, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	0091      	lsls	r1, r2, #2
 80021fc:	461a      	mov	r2, r3
 80021fe:	460b      	mov	r3, r1
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	b29b      	uxth	r3, r3
 8002206:	787a      	ldrb	r2, [r7, #1]
 8002208:	4413      	add	r3, r2
 800220a:	b29b      	uxth	r3, r3
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fa3b 	bl	8002688 <FND_WriteData>
	FND_WriteDp(FND_DP_1, FND_DP_OFF);
 8002212:	2100      	movs	r1, #0
 8002214:	2001      	movs	r0, #1
 8002216:	f000 fa0f 	bl	8002638 <FND_WriteDp>
	FND_WriteDp(FND_DP_10, FND_DP_OFF);
 800221a:	2100      	movs	r1, #0
 800221c:	2002      	movs	r0, #2
 800221e:	f000 fa0b 	bl	8002638 <FND_WriteDp>
	FND_WriteDp(FND_DP_1000, FND_DP_OFF);
 8002222:	2100      	movs	r1, #0
 8002224:	2008      	movs	r0, #8
 8002226:	f000 fa07 	bl	8002638 <FND_WriteDp>

	if (timeWatchData.msec <500) {
 800222a:	88bb      	ldrh	r3, [r7, #4]
 800222c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002230:	d204      	bcs.n	800223c <Presenter_TimeWatch_FND+0x58>
		FND_WriteDp(FND_DP_100, FND_DP_ON);
 8002232:	2101      	movs	r1, #1
 8002234:	2004      	movs	r0, #4
 8002236:	f000 f9ff 	bl	8002638 <FND_WriteDp>
	}
	else {
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
	}
}
 800223a:	e003      	b.n	8002244 <Presenter_TimeWatch_FND+0x60>
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
 800223c:	2100      	movs	r1, #0
 800223e:	2004      	movs	r0, #4
 8002240:	f000 f9fa 	bl	8002638 <FND_WriteDp>
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <Presenter_TimeWatch_LCD>:


void Presenter_TimeWatch_LCD(timeWatch_t timeWatchData)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b092      	sub	sp, #72	@ 0x48
 8002250:	af02      	add	r7, sp, #8
 8002252:	463b      	mov	r3, r7
 8002254:	e883 0003 	stmia.w	r3, {r0, r1}

	static uint16_t state = S_TIMEWATCH_NORMAL;
	static uint16_t prevstate = S_TIMEWATCH_MODIFY_MIN;


	sprintf(str, "TimeWatch        ");
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	493c      	ldr	r1, [pc, #240]	@ (8002350 <Presenter_TimeWatch_LCD+0x104>)
 800225e:	4618      	mov	r0, r3
 8002260:	f005 fc52 	bl	8007b08 <siprintf>
	LCD_writeStringXY(0, 0, str);
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	461a      	mov	r2, r3
 800226a:	2100      	movs	r1, #0
 800226c:	2000      	movs	r0, #0
 800226e:	f000 fcfc 	bl	8002c6a <LCD_writeStringXY>



	if (timeWatchData.msec < 300 || timeWatchData.msec > 700) {
 8002272:	88bb      	ldrh	r3, [r7, #4]
 8002274:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002278:	d303      	bcc.n	8002282 <Presenter_TimeWatch_LCD+0x36>
 800227a:	88bb      	ldrh	r3, [r7, #4]
 800227c:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8002280:	d90c      	bls.n	800229c <Presenter_TimeWatch_LCD+0x50>
		sprintf(str, "%02d:%02d:%02d     ", timeWatchData.hour, timeWatchData.min, timeWatchData.sec);
 8002282:	783b      	ldrb	r3, [r7, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	787b      	ldrb	r3, [r7, #1]
 8002288:	4619      	mov	r1, r3
 800228a:	78bb      	ldrb	r3, [r7, #2]
 800228c:	f107 000c 	add.w	r0, r7, #12
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	460b      	mov	r3, r1
 8002294:	492f      	ldr	r1, [pc, #188]	@ (8002354 <Presenter_TimeWatch_LCD+0x108>)
 8002296:	f005 fc37 	bl	8007b08 <siprintf>
 800229a:	e00b      	b.n	80022b4 <Presenter_TimeWatch_LCD+0x68>
	}
	else {
		sprintf(str, "%02d %02d %02d     ", timeWatchData.hour, timeWatchData.min, timeWatchData.sec);
 800229c:	783b      	ldrb	r3, [r7, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	787b      	ldrb	r3, [r7, #1]
 80022a2:	4619      	mov	r1, r3
 80022a4:	78bb      	ldrb	r3, [r7, #2]
 80022a6:	f107 000c 	add.w	r0, r7, #12
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	460b      	mov	r3, r1
 80022ae:	492a      	ldr	r1, [pc, #168]	@ (8002358 <Presenter_TimeWatch_LCD+0x10c>)
 80022b0:	f005 fc2a 	bl	8007b08 <siprintf>


//	sprintf(str, "%02d:%02d:%02d     ", timeWatchData.hour, timeWatchData.min, timeWatchData.sec);
//	LCD_clear();

	LCD_writeStringXY(1, 0, str);
 80022b4:	f107 030c 	add.w	r3, r7, #12
 80022b8:	461a      	mov	r2, r3
 80022ba:	2100      	movs	r1, #0
 80022bc:	2001      	movs	r0, #1
 80022be:	f000 fcd4 	bl	8002c6a <LCD_writeStringXY>

	state = Model_GetTimeWatchState();
 80022c2:	f7ff fd4f 	bl	8001d64 <Model_GetTimeWatchState>
 80022c6:	4603      	mov	r3, r0
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b24      	ldr	r3, [pc, #144]	@ (800235c <Presenter_TimeWatch_LCD+0x110>)
 80022cc:	801a      	strh	r2, [r3, #0]


	switch (state) {
 80022ce:	4b23      	ldr	r3, [pc, #140]	@ (800235c <Presenter_TimeWatch_LCD+0x110>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d826      	bhi.n	8002324 <Presenter_TimeWatch_LCD+0xd8>
 80022d6:	a201      	add	r2, pc, #4	@ (adr r2, 80022dc <Presenter_TimeWatch_LCD+0x90>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	080022ed 	.word	0x080022ed
 80022e0:	080022fb 	.word	0x080022fb
 80022e4:	08002309 	.word	0x08002309
 80022e8:	08002317 	.word	0x08002317
	    case S_TIMEWATCH_NORMAL:
	        sprintf(str, "NORMAL ");
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	491b      	ldr	r1, [pc, #108]	@ (8002360 <Presenter_TimeWatch_LCD+0x114>)
 80022f2:	4618      	mov	r0, r3
 80022f4:	f005 fc08 	bl	8007b08 <siprintf>
	        break;
 80022f8:	e01b      	b.n	8002332 <Presenter_TimeWatch_LCD+0xe6>

	    case S_TIMEWATCH_MODIFY_HOUR:
	        sprintf(str, "HOUR   ");
 80022fa:	f107 030c 	add.w	r3, r7, #12
 80022fe:	4919      	ldr	r1, [pc, #100]	@ (8002364 <Presenter_TimeWatch_LCD+0x118>)
 8002300:	4618      	mov	r0, r3
 8002302:	f005 fc01 	bl	8007b08 <siprintf>
	        break;
 8002306:	e014      	b.n	8002332 <Presenter_TimeWatch_LCD+0xe6>

	    case S_TIMEWATCH_MODIFY_MIN:
	        sprintf(str, "MIN   ");
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	4916      	ldr	r1, [pc, #88]	@ (8002368 <Presenter_TimeWatch_LCD+0x11c>)
 800230e:	4618      	mov	r0, r3
 8002310:	f005 fbfa 	bl	8007b08 <siprintf>
	        break;
 8002314:	e00d      	b.n	8002332 <Presenter_TimeWatch_LCD+0xe6>

	    case S_TIMEWATCH_MODIFY_SEC:
	        sprintf(str, "SEC   ");
 8002316:	f107 030c 	add.w	r3, r7, #12
 800231a:	4914      	ldr	r1, [pc, #80]	@ (800236c <Presenter_TimeWatch_LCD+0x120>)
 800231c:	4618      	mov	r0, r3
 800231e:	f005 fbf3 	bl	8007b08 <siprintf>
	        break;
 8002322:	e006      	b.n	8002332 <Presenter_TimeWatch_LCD+0xe6>

	    default:
	        sprintf(str, "UNKNOWN");
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	4911      	ldr	r1, [pc, #68]	@ (8002370 <Presenter_TimeWatch_LCD+0x124>)
 800232a:	4618      	mov	r0, r3
 800232c:	f005 fbec 	bl	8007b08 <siprintf>
	        break;
 8002330:	bf00      	nop
	}



 LCD_writeStringXY(1, 10, str);
 8002332:	f107 030c 	add.w	r3, r7, #12
 8002336:	461a      	mov	r2, r3
 8002338:	210a      	movs	r1, #10
 800233a:	2001      	movs	r0, #1
 800233c:	f000 fc95 	bl	8002c6a <LCD_writeStringXY>
 prevstate = state;
 8002340:	4b06      	ldr	r3, [pc, #24]	@ (800235c <Presenter_TimeWatch_LCD+0x110>)
 8002342:	881a      	ldrh	r2, [r3, #0]
 8002344:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <Presenter_TimeWatch_LCD+0x128>)
 8002346:	801a      	strh	r2, [r3, #0]

}
 8002348:	bf00      	nop
 800234a:	3740      	adds	r7, #64	@ 0x40
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	080086a4 	.word	0x080086a4
 8002354:	080086b8 	.word	0x080086b8
 8002358:	080086cc 	.word	0x080086cc
 800235c:	20000610 	.word	0x20000610
 8002360:	080086e0 	.word	0x080086e0
 8002364:	080086e8 	.word	0x080086e8
 8002368:	080086f0 	.word	0x080086f0
 800236c:	080086f8 	.word	0x080086f8
 8002370:	08008700 	.word	0x08008700
 8002374:	20000006 	.word	0x20000006

08002378 <Button_Init>:
// 입력값이 0이면 눌린 상태 (풀업 기준)
#define BUTTON_PRESSED   0
#define BUTTON_RELEASED  1

void Button_Init(Button_TypeDef *hbtn, GPIO_TypeDef *GPIOx, uint16_t pinNum)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	4613      	mov	r3, r2
 8002384:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	88fa      	ldrh	r2, [r7, #6]
 8002390:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = BUTTON_RELEASED;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2201      	movs	r2, #1
 8002396:	609a      	str	r2, [r3, #8]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <Button_GetState>:

button_state_t Button_GetState(Button_TypeDef *hbtn)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
    uint32_t curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	889b      	ldrh	r3, [r3, #4]
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f001 f834 	bl	8003424 <HAL_GPIO_ReadPin>
 80023bc:	4603      	mov	r3, r0
 80023be:	60bb      	str	r3, [r7, #8]

    button_state_t result = NO_ACT;
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]

    if (hbtn->prevState == BUTTON_RELEASED && curState == BUTTON_PRESSED) {
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d113      	bne.n	80023f4 <Button_GetState+0x50>
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d110      	bne.n	80023f4 <Button_GetState+0x50>
		HAL_Delay(2); // debounce
 80023d2:	2002      	movs	r0, #2
 80023d4:	f000 fd3e 	bl	8002e54 <HAL_Delay>
		if (HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum) == BUTTON_PRESSED) {
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	889b      	ldrh	r3, [r3, #4]
 80023e0:	4619      	mov	r1, r3
 80023e2:	4610      	mov	r0, r2
 80023e4:	f001 f81e 	bl	8003424 <HAL_GPIO_ReadPin>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d119      	bne.n	8002422 <Button_GetState+0x7e>
			result = ACT_PUSHED;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
		if (HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum) == BUTTON_PRESSED) {
 80023f2:	e016      	b.n	8002422 <Button_GetState+0x7e>
    	}
    }
    else if (hbtn->prevState == BUTTON_PRESSED && curState == BUTTON_RELEASED) {
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d112      	bne.n	8002422 <Button_GetState+0x7e>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10f      	bne.n	8002422 <Button_GetState+0x7e>
    	HAL_Delay(2); // debounce
 8002402:	2002      	movs	r0, #2
 8002404:	f000 fd26 	bl	8002e54 <HAL_Delay>
		if (HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum) == BUTTON_RELEASED) {
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	889b      	ldrh	r3, [r3, #4]
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f001 f806 	bl	8003424 <HAL_GPIO_ReadPin>
 8002418:	4603      	mov	r3, r0
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <Button_GetState+0x7e>
			result = ACT_RELEASED;
 800241e:	2302      	movs	r3, #2
 8002420:	73fb      	strb	r3, [r7, #15]
    	}
    }
    hbtn->prevState = curState;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	609a      	str	r2, [r3, #8]
    return result;
 8002428:	7bfb      	ldrb	r3, [r7, #15]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <DHT11_DelayUs>:
//   GPIO_InitStruct.Pull = GPIO_NOPULL;
//   HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
//}

void DHT11_DelayUs(uint32_t us)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
   __HAL_TIM_SET_COUNTER(&htim5, 0);
 800243c:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <DHT11_DelayUs+0x2c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2200      	movs	r2, #0
 8002442:	625a      	str	r2, [r3, #36]	@ 0x24
   while(__HAL_TIM_GET_COUNTER(&htim5) < us);
 8002444:	bf00      	nop
 8002446:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <DHT11_DelayUs+0x2c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	429a      	cmp	r2, r3
 8002450:	d8f9      	bhi.n	8002446 <DHT11_DelayUs+0x12>
}
 8002452:	bf00      	nop
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	20000508 	.word	0x20000508

08002464 <DHT11_SendStartSignal>:

// 18ms Low, 20~40us High
void DHT11_SendStartSignal()
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246a:	463b      	mov	r3, r7
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
   GPIO_InitStruct.Pin = DHT11_PIN;
 8002478:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800247c:	603b      	str	r3, [r7, #0]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800247e:	2311      	movs	r3, #17
 8002480:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
   HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8002486:	463b      	mov	r3, r7
 8002488:	4619      	mov	r1, r3
 800248a:	4825      	ldr	r0, [pc, #148]	@ (8002520 <DHT11_SendStartSignal+0xbc>)
 800248c:	f000 fe46 	bl	800311c <HAL_GPIO_Init>

   HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, RESET);   // Low 18ms 유지
 8002490:	2200      	movs	r2, #0
 8002492:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002496:	4822      	ldr	r0, [pc, #136]	@ (8002520 <DHT11_SendStartSignal+0xbc>)
 8002498:	f000 ffdc 	bl	8003454 <HAL_GPIO_WritePin>
   HAL_Delay(18);    // 18ms Low
 800249c:	2012      	movs	r0, #18
 800249e:	f000 fcd9 	bl	8002e54 <HAL_Delay>
   HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, SET);
 80024a2:	2201      	movs	r2, #1
 80024a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024a8:	481d      	ldr	r0, [pc, #116]	@ (8002520 <DHT11_SendStartSignal+0xbc>)
 80024aa:	f000 ffd3 	bl	8003454 <HAL_GPIO_WritePin>
   DHT11_DelayUs(30);
 80024ae:	201e      	movs	r0, #30
 80024b0:	f7ff ffc0 	bl	8002434 <DHT11_DelayUs>

   // Input Mode + Exti 설정 외부 인터럽트 가능하게 설정
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80024b4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80024b8:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
   HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 80024be:	463b      	mov	r3, r7
 80024c0:	4619      	mov	r1, r3
 80024c2:	4817      	ldr	r0, [pc, #92]	@ (8002520 <DHT11_SendStartSignal+0xbc>)
 80024c4:	f000 fe2a 	bl	800311c <HAL_GPIO_Init>

   HAL_TIM_Base_Stop(&htim5);
 80024c8:	4816      	ldr	r0, [pc, #88]	@ (8002524 <DHT11_SendStartSignal+0xc0>)
 80024ca:	f002 fa13 	bl	80048f4 <HAL_TIM_Base_Stop>
   __HAL_TIM_SET_COUNTER(&htim5, 0);
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <DHT11_SendStartSignal+0xc0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2200      	movs	r2, #0
 80024d4:	625a      	str	r2, [r3, #36]	@ 0x24
   HAL_TIM_Base_Start(&htim5);
 80024d6:	4813      	ldr	r0, [pc, #76]	@ (8002524 <DHT11_SendStartSignal+0xc0>)
 80024d8:	f002 f9b2 	bl	8004840 <HAL_TIM_Base_Start>

   // 수신 전에 초기화
   bit_index = 0;
 80024dc:	4b12      	ldr	r3, [pc, #72]	@ (8002528 <DHT11_SendStartSignal+0xc4>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
   last_time =0;
 80024e2:	4b12      	ldr	r3, [pc, #72]	@ (800252c <DHT11_SendStartSignal+0xc8>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

   for (int i = 0; i < 5; i++) {
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	e007      	b.n	80024fe <DHT11_SendStartSignal+0x9a>
      data[i] = 0;
 80024ee:	4a10      	ldr	r2, [pc, #64]	@ (8002530 <DHT11_SendStartSignal+0xcc>)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	4413      	add	r3, r2
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < 5; i++) {
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3301      	adds	r3, #1
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b04      	cmp	r3, #4
 8002502:	ddf4      	ble.n	80024ee <DHT11_SendStartSignal+0x8a>
   }

   __HAL_GPIO_EXTI_CLEAR_FLAG(DHT11_PIN);
 8002504:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <DHT11_SendStartSignal+0xd0>)
 8002506:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800250a:	615a      	str	r2, [r3, #20]
   HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800250c:	2028      	movs	r0, #40	@ 0x28
 800250e:	f000 fdf7 	bl	8003100 <HAL_NVIC_ClearPendingIRQ>
   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); //GPIO 10번에서 15번까지 인터럽트 처리
 8002512:	2028      	movs	r0, #40	@ 0x28
 8002514:	f000 fdd8 	bl	80030c8 <HAL_NVIC_EnableIRQ>
}
 8002518:	bf00      	nop
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40020400 	.word	0x40020400
 8002524:	20000508 	.word	0x20000508
 8002528:	20000618 	.word	0x20000618
 800252c:	20000614 	.word	0x20000614
 8002530:	2000061c 	.word	0x2000061c
 8002534:	40013c00 	.word	0x40013c00

08002538 <DHT11_ReadData>:

void DHT11_ReadData(uint8_t *humidity, uint8_t *temperature)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
   DHT11_SendStartSignal();
 8002542:	f7ff ff8f 	bl	8002464 <DHT11_SendStartSignal>

   HAL_Delay(5);  // 최대 4ms 정도 데이터 수신 시간 대기
 8002546:	2005      	movs	r0, #5
 8002548:	f000 fc84 	bl	8002e54 <HAL_Delay>

   HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800254c:	2028      	movs	r0, #40	@ 0x28
 800254e:	f000 fdc9 	bl	80030e4 <HAL_NVIC_DisableIRQ>

//   if (data[4] == (data[0] + data[1] + data[2] + data[3]))
//   {
      *humidity = data[0];
 8002552:	4b07      	ldr	r3, [pc, #28]	@ (8002570 <DHT11_ReadData+0x38>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	b2da      	uxtb	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	701a      	strb	r2, [r3, #0]
      *temperature = data[2];
 800255c:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <DHT11_ReadData+0x38>)
 800255e:	789b      	ldrb	r3, [r3, #2]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	701a      	strb	r2, [r3, #0]
//      return 1;
//   }
//   return 0;
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	2000061c 	.word	0x2000061c

08002574 <DHT11_EXTI_Callback>:

void DHT11_EXTI_Callback()
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
   uint32_t now = __HAL_TIM_GET_COUNTER(&htim5);
 800257a:	4b2a      	ldr	r3, [pc, #168]	@ (8002624 <DHT11_EXTI_Callback+0xb0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	60fb      	str	r3, [r7, #12]
   uint32_t duration = now - last_time;
 8002582:	4b29      	ldr	r3, [pc, #164]	@ (8002628 <DHT11_EXTI_Callback+0xb4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	60bb      	str	r3, [r7, #8]
   last_time = now;
 800258c:	4a26      	ldr	r2, [pc, #152]	@ (8002628 <DHT11_EXTI_Callback+0xb4>)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6013      	str	r3, [r2, #0]

   if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET)
 8002592:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002596:	4825      	ldr	r0, [pc, #148]	@ (800262c <DHT11_EXTI_Callback+0xb8>)
 8002598:	f000 ff44 	bl	8003424 <HAL_GPIO_ReadPin>
 800259c:	4603      	mov	r3, r0
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d03c      	beq.n	800261c <DHT11_EXTI_Callback+0xa8>
      // Rising edge
   }
   else
   {
      // Falling edge (bit 해석)
      if (bit_index == 0) {
 80025a2:	4b23      	ldr	r3, [pc, #140]	@ (8002630 <DHT11_EXTI_Callback+0xbc>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d028      	beq.n	80025fe <DHT11_EXTI_Callback+0x8a>
         }
//      } else if (bit_index == 1) {
//         if (duration < 70 || duration > 90) {
//            printf("DHT11 HIGH : %lu \n", duration);
//         }
      } else if (bit_index >= 1 && bit_index <= 40) {
 80025ac:	4b20      	ldr	r3, [pc, #128]	@ (8002630 <DHT11_EXTI_Callback+0xbc>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d023      	beq.n	80025fe <DHT11_EXTI_Callback+0x8a>
 80025b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002630 <DHT11_EXTI_Callback+0xbc>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b28      	cmp	r3, #40	@ 0x28
 80025be:	d81e      	bhi.n	80025fe <DHT11_EXTI_Callback+0x8a>
         // bit_index 1~40 이 실제 40bit 데이터
         uint8_t byte_idx = (bit_index - 1) / 8;
 80025c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002630 <DHT11_EXTI_Callback+0xbc>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	da00      	bge.n	80025ce <DHT11_EXTI_Callback+0x5a>
 80025cc:	3307      	adds	r3, #7
 80025ce:	10db      	asrs	r3, r3, #3
 80025d0:	71fb      	strb	r3, [r7, #7]

         data[byte_idx] <<= 1;
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	4a17      	ldr	r2, [pc, #92]	@ (8002634 <DHT11_EXTI_Callback+0xc0>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	0052      	lsls	r2, r2, #1
 80025de:	b2d1      	uxtb	r1, r2
 80025e0:	4a14      	ldr	r2, [pc, #80]	@ (8002634 <DHT11_EXTI_Callback+0xc0>)
 80025e2:	54d1      	strb	r1, [r2, r3]

         if (duration > 40)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b28      	cmp	r3, #40	@ 0x28
 80025e8:	d909      	bls.n	80025fe <DHT11_EXTI_Callback+0x8a>
            data[byte_idx] |= 1;
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	4a11      	ldr	r2, [pc, #68]	@ (8002634 <DHT11_EXTI_Callback+0xc0>)
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	b2d1      	uxtb	r1, r2
 80025fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002634 <DHT11_EXTI_Callback+0xc0>)
 80025fc:	54d1      	strb	r1, [r2, r3]

      }
      bit_index++;
 80025fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <DHT11_EXTI_Callback+0xbc>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	3301      	adds	r3, #1
 8002606:	b2da      	uxtb	r2, r3
 8002608:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <DHT11_EXTI_Callback+0xbc>)
 800260a:	701a      	strb	r2, [r3, #0]

      //40비트 수신 완료후 외부 인터럽트 비활성화
      if (bit_index > 40)
 800260c:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <DHT11_EXTI_Callback+0xbc>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b28      	cmp	r3, #40	@ 0x28
 8002614:	d902      	bls.n	800261c <DHT11_EXTI_Callback+0xa8>
      {
         HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002616:	2028      	movs	r0, #40	@ 0x28
 8002618:	f000 fd64 	bl	80030e4 <HAL_NVIC_DisableIRQ>
      }
   }
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000508 	.word	0x20000508
 8002628:	20000614 	.word	0x20000614
 800262c:	40020400 	.word	0x40020400
 8002630:	20000618 	.word	0x20000618
 8002634:	2000061c 	.word	0x2000061c

08002638 <FND_WriteDp>:

static uint16_t fndDispNum = 0; // fnd main data
static uint8_t fndDispDp = 0; // fnd dp data, xxxx1111

void FND_WriteDp(uint8_t dpData, uint8_t dpState)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	460a      	mov	r2, r1
 8002642:	71fb      	strb	r3, [r7, #7]
 8002644:	4613      	mov	r3, r2
 8002646:	71bb      	strb	r3, [r7, #6]
	if (dpState == FND_DP_ON)
 8002648:	79bb      	ldrb	r3, [r7, #6]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d107      	bne.n	800265e <FND_WriteDp+0x26>
		fndDispDp |= dpData;
 800264e:	4b0d      	ldr	r3, [pc, #52]	@ (8002684 <FND_WriteDp+0x4c>)
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	4313      	orrs	r3, r2
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <FND_WriteDp+0x4c>)
 800265a:	701a      	strb	r2, [r3, #0]
	else
		fndDispDp &= ~dpData;
}
 800265c:	e00b      	b.n	8002676 <FND_WriteDp+0x3e>
		fndDispDp &= ~dpData;
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	43db      	mvns	r3, r3
 8002664:	b25a      	sxtb	r2, r3
 8002666:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <FND_WriteDp+0x4c>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	b25b      	sxtb	r3, r3
 800266c:	4013      	ands	r3, r2
 800266e:	b25b      	sxtb	r3, r3
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4b04      	ldr	r3, [pc, #16]	@ (8002684 <FND_WriteDp+0x4c>)
 8002674:	701a      	strb	r2, [r3, #0]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	20000624 	.word	0x20000624

08002688 <FND_WriteData>:

void FND_WriteData(uint16_t data)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 8002692:	4a04      	ldr	r2, [pc, #16]	@ (80026a4 <FND_WriteData+0x1c>)
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	8013      	strh	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	20000622 	.word	0x20000622

080026a8 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 80026ac:	4b80      	ldr	r3, [pc, #512]	@ (80028b0 <FND_DispDataCallBack+0x208>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	425a      	negs	r2, r3
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	f002 0207 	and.w	r2, r2, #7
 80026bc:	bf58      	it	pl
 80026be:	4253      	negpl	r3, r2
 80026c0:	4a7b      	ldr	r2, [pc, #492]	@ (80028b0 <FND_DispDataCallBack+0x208>)
 80026c2:	6013      	str	r3, [r2, #0]
	switch(digitPos)
 80026c4:	4b7a      	ldr	r3, [pc, #488]	@ (80028b0 <FND_DispDataCallBack+0x208>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b07      	cmp	r3, #7
 80026ca:	f200 80ee 	bhi.w	80028aa <FND_DispDataCallBack+0x202>
 80026ce:	a201      	add	r2, pc, #4	@ (adr r2, 80026d4 <FND_DispDataCallBack+0x2c>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	080026f5 	.word	0x080026f5
 80026d8:	08002723 	.word	0x08002723
 80026dc:	0800275b 	.word	0x0800275b
 80026e0:	08002793 	.word	0x08002793
 80026e4:	080027cb 	.word	0x080027cb
 80026e8:	08002803 	.word	0x08002803
 80026ec:	0800283b 	.word	0x0800283b
 80026f0:	08002873 	.word	0x08002873
	{
	case DIGIT_1:
		FND_DispOffAll();
 80026f4:	f000 f8e8 	bl	80028c8 <FND_DispOffAll>
		FND_DispDigit(fndDispNum % 10);
 80026f8:	4b6e      	ldr	r3, [pc, #440]	@ (80028b4 <FND_DispDataCallBack+0x20c>)
 80026fa:	881a      	ldrh	r2, [r3, #0]
 80026fc:	4b6e      	ldr	r3, [pc, #440]	@ (80028b8 <FND_DispDataCallBack+0x210>)
 80026fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002702:	08d9      	lsrs	r1, r3, #3
 8002704:	460b      	mov	r3, r1
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	b29b      	uxth	r3, r3
 8002710:	4618      	mov	r0, r3
 8002712:	f000 f913 	bl	800293c <FND_DispDigit>
		FND_DispOn(digitPos);
 8002716:	4b66      	ldr	r3, [pc, #408]	@ (80028b0 <FND_DispDataCallBack+0x208>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f8f6 	bl	800290c <FND_DispOn>
		break;
 8002720:	e0c3      	b.n	80028aa <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		FND_DispOffAll();
 8002722:	f000 f8d1 	bl	80028c8 <FND_DispOffAll>
		FND_DispDigit(fndDispNum /10 % 10);
 8002726:	4b63      	ldr	r3, [pc, #396]	@ (80028b4 <FND_DispDataCallBack+0x20c>)
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	4a63      	ldr	r2, [pc, #396]	@ (80028b8 <FND_DispDataCallBack+0x210>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	08db      	lsrs	r3, r3, #3
 8002732:	b29a      	uxth	r2, r3
 8002734:	4b60      	ldr	r3, [pc, #384]	@ (80028b8 <FND_DispDataCallBack+0x210>)
 8002736:	fba3 1302 	umull	r1, r3, r3, r2
 800273a:	08d9      	lsrs	r1, r3, #3
 800273c:	460b      	mov	r3, r1
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	b29b      	uxth	r3, r3
 8002748:	4618      	mov	r0, r3
 800274a:	f000 f8f7 	bl	800293c <FND_DispDigit>
		FND_DispOn(digitPos);
 800274e:	4b58      	ldr	r3, [pc, #352]	@ (80028b0 <FND_DispDataCallBack+0x208>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f8da 	bl	800290c <FND_DispOn>
		break;
 8002758:	e0a7      	b.n	80028aa <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		FND_DispOffAll();
 800275a:	f000 f8b5 	bl	80028c8 <FND_DispOffAll>
		FND_DispDigit(fndDispNum /100 % 10);
 800275e:	4b55      	ldr	r3, [pc, #340]	@ (80028b4 <FND_DispDataCallBack+0x20c>)
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	4a56      	ldr	r2, [pc, #344]	@ (80028bc <FND_DispDataCallBack+0x214>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	b29a      	uxth	r2, r3
 800276c:	4b52      	ldr	r3, [pc, #328]	@ (80028b8 <FND_DispDataCallBack+0x210>)
 800276e:	fba3 1302 	umull	r1, r3, r3, r2
 8002772:	08d9      	lsrs	r1, r3, #3
 8002774:	460b      	mov	r3, r1
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	b29b      	uxth	r3, r3
 8002780:	4618      	mov	r0, r3
 8002782:	f000 f8db 	bl	800293c <FND_DispDigit>
		FND_DispOn(digitPos);
 8002786:	4b4a      	ldr	r3, [pc, #296]	@ (80028b0 <FND_DispDataCallBack+0x208>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f8be 	bl	800290c <FND_DispOn>
		break;
 8002790:	e08b      	b.n	80028aa <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		FND_DispOffAll();
 8002792:	f000 f899 	bl	80028c8 <FND_DispOffAll>
		FND_DispDigit(fndDispNum /1000 % 10);
 8002796:	4b47      	ldr	r3, [pc, #284]	@ (80028b4 <FND_DispDataCallBack+0x20c>)
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	4a49      	ldr	r2, [pc, #292]	@ (80028c0 <FND_DispDataCallBack+0x218>)
 800279c:	fba2 2303 	umull	r2, r3, r2, r3
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	4b44      	ldr	r3, [pc, #272]	@ (80028b8 <FND_DispDataCallBack+0x210>)
 80027a6:	fba3 1302 	umull	r1, r3, r3, r2
 80027aa:	08d9      	lsrs	r1, r3, #3
 80027ac:	460b      	mov	r3, r1
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f8bf 	bl	800293c <FND_DispDigit>
		FND_DispOn(digitPos);
 80027be:	4b3c      	ldr	r3, [pc, #240]	@ (80028b0 <FND_DispDataCallBack+0x208>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f8a2 	bl	800290c <FND_DispOn>
		break;
 80027c8:	e06f      	b.n	80028aa <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		FND_DispOffAll();
 80027ca:	f000 f87d 	bl	80028c8 <FND_DispOffAll>
		if (fndDispDp & (1<<0)) {
 80027ce:	4b3d      	ldr	r3, [pc, #244]	@ (80028c4 <FND_DispDataCallBack+0x21c>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 80027da:	200a      	movs	r0, #10
 80027dc:	f000 f8ae 	bl	800293c <FND_DispDigit>
 80027e0:	e002      	b.n	80027e8 <FND_DispDataCallBack+0x140>
		} else {
			FND_DispDigit(11); // ALL OFF
 80027e2:	200b      	movs	r0, #11
 80027e4:	f000 f8aa 	bl	800293c <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80027e8:	4b31      	ldr	r3, [pc, #196]	@ (80028b0 <FND_DispDataCallBack+0x208>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	425a      	negs	r2, r3
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	f002 0203 	and.w	r2, r2, #3
 80027f6:	bf58      	it	pl
 80027f8:	4253      	negpl	r3, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f886 	bl	800290c <FND_DispOn>
		break;
 8002800:	e053      	b.n	80028aa <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		FND_DispOffAll();
 8002802:	f000 f861 	bl	80028c8 <FND_DispOffAll>
		if (fndDispDp & (1<<1)) {
 8002806:	4b2f      	ldr	r3, [pc, #188]	@ (80028c4 <FND_DispDataCallBack+0x21c>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 8002812:	200a      	movs	r0, #10
 8002814:	f000 f892 	bl	800293c <FND_DispDigit>
 8002818:	e002      	b.n	8002820 <FND_DispDataCallBack+0x178>
		} else {
			FND_DispDigit(11); // ALL OFF
 800281a:	200b      	movs	r0, #11
 800281c:	f000 f88e 	bl	800293c <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002820:	4b23      	ldr	r3, [pc, #140]	@ (80028b0 <FND_DispDataCallBack+0x208>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	425a      	negs	r2, r3
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	f002 0203 	and.w	r2, r2, #3
 800282e:	bf58      	it	pl
 8002830:	4253      	negpl	r3, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f86a 	bl	800290c <FND_DispOn>
		break;
 8002838:	e037      	b.n	80028aa <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		FND_DispOffAll();
 800283a:	f000 f845 	bl	80028c8 <FND_DispOffAll>
		if (fndDispDp & (1<<2)) {
 800283e:	4b21      	ldr	r3, [pc, #132]	@ (80028c4 <FND_DispDataCallBack+0x21c>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 800284a:	200a      	movs	r0, #10
 800284c:	f000 f876 	bl	800293c <FND_DispDigit>
 8002850:	e002      	b.n	8002858 <FND_DispDataCallBack+0x1b0>
		} else {
			FND_DispDigit(11); // ALL OFF
 8002852:	200b      	movs	r0, #11
 8002854:	f000 f872 	bl	800293c <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002858:	4b15      	ldr	r3, [pc, #84]	@ (80028b0 <FND_DispDataCallBack+0x208>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	425a      	negs	r2, r3
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	f002 0203 	and.w	r2, r2, #3
 8002866:	bf58      	it	pl
 8002868:	4253      	negpl	r3, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f84e 	bl	800290c <FND_DispOn>
		break;
 8002870:	e01b      	b.n	80028aa <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		FND_DispOffAll();
 8002872:	f000 f829 	bl	80028c8 <FND_DispOffAll>
		if (fndDispDp & (1<<3)) {
 8002876:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <FND_DispDataCallBack+0x21c>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 8002882:	200a      	movs	r0, #10
 8002884:	f000 f85a 	bl	800293c <FND_DispDigit>
 8002888:	e002      	b.n	8002890 <FND_DispDataCallBack+0x1e8>
		} else {
			FND_DispDigit(11); // ALL OFF
 800288a:	200b      	movs	r0, #11
 800288c:	f000 f856 	bl	800293c <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002890:	4b07      	ldr	r3, [pc, #28]	@ (80028b0 <FND_DispDataCallBack+0x208>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	425a      	negs	r2, r3
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	f002 0203 	and.w	r2, r2, #3
 800289e:	bf58      	it	pl
 80028a0:	4253      	negpl	r3, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f832 	bl	800290c <FND_DispOn>
		break;
 80028a8:	bf00      	nop
	}
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000628 	.word	0x20000628
 80028b4:	20000622 	.word	0x20000622
 80028b8:	cccccccd 	.word	0xcccccccd
 80028bc:	51eb851f 	.word	0x51eb851f
 80028c0:	10624dd3 	.word	0x10624dd3
 80028c4:	20000624 	.word	0x20000624

080028c8 <FND_DispOffAll>:
	// GPIO_Write(GPIOx, Pin, RESET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
}

void FND_DispOffAll()
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
	// GPIO_Write(GPIOx, Pin, RESET);
	for (int i=0; i<4; i++) {
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	e010      	b.n	80028f6 <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 80028d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002908 <FND_DispOffAll+0x40>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80028dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002908 <FND_DispOffAll+0x40>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2201      	movs	r2, #1
 80028ea:	4619      	mov	r1, r3
 80028ec:	f000 fdb2 	bl	8003454 <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3301      	adds	r3, #1
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	ddeb      	ble.n	80028d4 <FND_DispOffAll+0xc>
	}
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000008 	.word	0x20000008

0800290c <FND_DispOn>:

void FND_DispOn(int fndPos)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, SET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8002914:	4a08      	ldr	r2, [pc, #32]	@ (8002938 <FND_DispOn+0x2c>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800291c:	4a06      	ldr	r2, [pc, #24]	@ (8002938 <FND_DispOn+0x2c>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	b29b      	uxth	r3, r3
 8002928:	2200      	movs	r2, #0
 800292a:	4619      	mov	r1, r3
 800292c:	f000 fd92 	bl	8003454 <HAL_GPIO_WritePin>
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000008 	.word	0x20000008

0800293c <FND_DispDigit>:


void FND_DispDigit(uint16_t digit)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	80fb      	strh	r3, [r7, #6]
	 const uint8_t segFont[12] = {
 8002946:	4a1f      	ldr	r2, [pc, #124]	@ (80029c4 <FND_DispDigit+0x88>)
 8002948:	f107 0308 	add.w	r3, r7, #8
 800294c:	ca07      	ldmia	r2, {r0, r1, r2}
 800294e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	         0x6F,  // 9 => 01101111
	         0x80,  // 10(dp) => 1000000
	       0x00,  // 11(off) => 0000000
	      };

	for (int i=0; i<8; i++) {
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e02c      	b.n	80029b2 <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	3318      	adds	r3, #24
 800295c:	443b      	add	r3, r7
 800295e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002962:	461a      	mov	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa42 f303 	asr.w	r3, r2, r3
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10e      	bne.n	8002990 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET); // 0 -> on
 8002972:	4a15      	ldr	r2, [pc, #84]	@ (80029c8 <FND_DispDigit+0x8c>)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800297a:	4a13      	ldr	r2, [pc, #76]	@ (80029c8 <FND_DispDigit+0x8c>)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	b29b      	uxth	r3, r3
 8002986:	2200      	movs	r2, #0
 8002988:	4619      	mov	r1, r3
 800298a:	f000 fd63 	bl	8003454 <HAL_GPIO_WritePin>
 800298e:	e00d      	b.n	80029ac <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET); // 1 -> off
 8002990:	4a0d      	ldr	r2, [pc, #52]	@ (80029c8 <FND_DispDigit+0x8c>)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002998:	4a0b      	ldr	r2, [pc, #44]	@ (80029c8 <FND_DispDigit+0x8c>)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2201      	movs	r2, #1
 80029a6:	4619      	mov	r1, r3
 80029a8:	f000 fd54 	bl	8003454 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	3301      	adds	r3, #1
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b07      	cmp	r3, #7
 80029b6:	ddcf      	ble.n	8002958 <FND_DispDigit+0x1c>
		}
	}
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	08008708 	.word	0x08008708
 80029c8:	20000028 	.word	0x20000028

080029cc <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 80029d4:	4a18      	ldr	r2, [pc, #96]	@ (8002a38 <LCD_Init+0x6c>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 80029da:	2032      	movs	r0, #50	@ 0x32
 80029dc:	f000 fa3a 	bl	8002e54 <HAL_Delay>
	LCD_cmdMode();
 80029e0:	f000 f852 	bl	8002a88 <LCD_cmdMode>
	LCD_writeMode();
 80029e4:	f000 f874 	bl	8002ad0 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 80029e8:	2030      	movs	r0, #48	@ 0x30
 80029ea:	f000 f8a7 	bl	8002b3c <LCD_sendNibbleData>
	HAL_Delay(5);
 80029ee:	2005      	movs	r0, #5
 80029f0:	f000 fa30 	bl	8002e54 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 80029f4:	2030      	movs	r0, #48	@ 0x30
 80029f6:	f000 f8a1 	bl	8002b3c <LCD_sendNibbleData>
	HAL_Delay(1);
 80029fa:	2001      	movs	r0, #1
 80029fc:	f000 fa2a 	bl	8002e54 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8002a00:	2030      	movs	r0, #48	@ 0x30
 8002a02:	f000 f89b 	bl	8002b3c <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 8002a06:	2020      	movs	r0, #32
 8002a08:	f000 f898 	bl	8002b3c <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 8002a0c:	2028      	movs	r0, #40	@ 0x28
 8002a0e:	f000 f8b9 	bl	8002b84 <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 8002a12:	2008      	movs	r0, #8
 8002a14:	f000 f8b6 	bl	8002b84 <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 8002a18:	2001      	movs	r0, #1
 8002a1a:	f000 f8b3 	bl	8002b84 <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 8002a1e:	2006      	movs	r0, #6
 8002a20:	f000 f8b0 	bl	8002b84 <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 8002a24:	200c      	movs	r0, #12
 8002a26:	f000 f8ad 	bl	8002b84 <LCD_sendData>
	LCD_backLightOn();
 8002a2a:	f000 f81d 	bl	8002a68 <LCD_backLightOn>
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000630 	.word	0x20000630

08002a3c <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 8002a46:	4b07      	ldr	r3, [pc, #28]	@ (8002a64 <LCD_sendI2C+0x28>)
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	1dfa      	adds	r2, r7, #7
 8002a4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2301      	movs	r3, #1
 8002a54:	214e      	movs	r1, #78	@ 0x4e
 8002a56:	f000 fe7f 	bl	8003758 <HAL_I2C_Master_Transmit>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000630 	.word	0x20000630

08002a68 <LCD_backLightOn>:

void LCD_backLightOn()
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8002a6c:	4b05      	ldr	r3, [pc, #20]	@ (8002a84 <LCD_backLightOn+0x1c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	f043 0308 	orr.w	r3, r3, #8
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4b03      	ldr	r3, [pc, #12]	@ (8002a84 <LCD_backLightOn+0x1c>)
 8002a78:	701a      	strb	r2, [r3, #0]
}
 8002a7a:	bf00      	nop
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	2000062c 	.word	0x2000062c

08002a88 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8002a8c:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <LCD_cmdMode+0x20>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <LCD_cmdMode+0x20>)
 8002a98:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002a9a:	4b03      	ldr	r3, [pc, #12]	@ (8002aa8 <LCD_cmdMode+0x20>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ffcc 	bl	8002a3c <LCD_sendI2C>
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	2000062c 	.word	0x2000062c

08002aac <LCD_charMode>:

void LCD_charMode()
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 8002ab0:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <LCD_charMode+0x20>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4b04      	ldr	r3, [pc, #16]	@ (8002acc <LCD_charMode+0x20>)
 8002abc:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002abe:	4b03      	ldr	r3, [pc, #12]	@ (8002acc <LCD_charMode+0x20>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ffba 	bl	8002a3c <LCD_sendI2C>
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	2000062c 	.word	0x2000062c

08002ad0 <LCD_writeMode>:
    HAL_Delay(2);
}


void LCD_writeMode()
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8002ad4:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <LCD_writeMode+0x20>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	f023 0302 	bic.w	r3, r3, #2
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <LCD_writeMode+0x20>)
 8002ae0:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002ae2:	4b03      	ldr	r3, [pc, #12]	@ (8002af0 <LCD_writeMode+0x20>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ffa8 	bl	8002a3c <LCD_sendI2C>
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	2000062c 	.word	0x2000062c

08002af4 <LCD_E_High>:

void LCD_E_High()
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8002af8:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <LCD_E_High+0x20>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <LCD_E_High+0x20>)
 8002b04:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002b06:	4b03      	ldr	r3, [pc, #12]	@ (8002b14 <LCD_E_High+0x20>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ff96 	bl	8002a3c <LCD_sendI2C>
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	2000062c 	.word	0x2000062c

08002b18 <LCD_E_Low>:

void LCD_E_Low()
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <LCD_E_Low+0x20>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	f023 0304 	bic.w	r3, r3, #4
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4b04      	ldr	r3, [pc, #16]	@ (8002b38 <LCD_E_Low+0x20>)
 8002b28:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002b2a:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <LCD_E_Low+0x20>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ff84 	bl	8002a3c <LCD_sendI2C>
}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	2000062c 	.word	0x2000062c

08002b3c <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8002b46:	f7ff ffd5 	bl	8002af4 <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	f023 030f 	bic.w	r3, r3, #15
 8002b52:	b25a      	sxtb	r2, r3
 8002b54:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <LCD_sendNibbleData+0x44>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	b25b      	sxtb	r3, r3
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	b25b      	sxtb	r3, r3
 8002b60:	4313      	orrs	r3, r2
 8002b62:	b25b      	sxtb	r3, r3
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <LCD_sendNibbleData+0x44>)
 8002b68:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002b6a:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <LCD_sendNibbleData+0x44>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ff64 	bl	8002a3c <LCD_sendI2C>
	LCD_E_Low();
 8002b74:	f7ff ffd0 	bl	8002b18 <LCD_E_Low>
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	2000062c 	.word	0x2000062c

08002b84 <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ffd3 	bl	8002b3c <LCD_sendNibbleData>

	data = data << 4;
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff ffcc 	bl	8002b3c <LCD_sendNibbleData>
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8002bb6:	f7ff ff8b 	bl	8002ad0 <LCD_writeMode>
	LCD_cmdMode();
 8002bba:	f7ff ff65 	bl	8002a88 <LCD_cmdMode>
	LCD_sendData(data);
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ffdf 	bl	8002b84 <LCD_sendData>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8002bd8:	f7ff ff7a 	bl	8002ad0 <LCD_writeMode>
	LCD_charMode();
 8002bdc:	f7ff ff66 	bl	8002aac <LCD_charMode>
	LCD_sendData(data);
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ffce 	bl	8002b84 <LCD_sendData>
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <LCD_writeString>:

void LCD_writeString(char *str)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++) {
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e009      	b.n	8002c12 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	4413      	add	r3, r2
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff ffe1 	bl	8002bce <LCD_writeCharData>
	for (int i=0; str[i]; i++) {
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4413      	add	r3, r2
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1ef      	bne.n	8002bfe <LCD_writeString+0xe>
	}
}
 8002c1e:	bf00      	nop
 8002c20:	bf00      	nop
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	460a      	mov	r2, r1
 8002c32:	71fb      	strb	r3, [r7, #7]
 8002c34:	4613      	mov	r3, r2
 8002c36:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8002c38:	79bb      	ldrb	r3, [r7, #6]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	019b      	lsls	r3, r3, #6
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	79bb      	ldrb	r3, [r7, #6]
 8002c50:	4413      	add	r3, r2
 8002c52:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	3b80      	subs	r3, #128	@ 0x80
 8002c58:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8002c5a:	7bbb      	ldrb	r3, [r7, #14]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ffa5 	bl	8002bac <LCD_writeCmdData>
}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	603a      	str	r2, [r7, #0]
 8002c74:	71fb      	strb	r3, [r7, #7]
 8002c76:	460b      	mov	r3, r1
 8002c78:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 8002c7a:	79ba      	ldrb	r2, [r7, #6]
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ffd1 	bl	8002c28 <LCD_gotoXY>
	LCD_writeString(str);
 8002c86:	6838      	ldr	r0, [r7, #0]
 8002c88:	f7ff ffb2 	bl	8002bf0 <LCD_writeString>
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <delay_us>:
#include "UltraSonic.h"
#define FILTER_SIZE 5


void delay_us(uint16_t us)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <delay_us+0x34>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim4);
 8002ca6:	4808      	ldr	r0, [pc, #32]	@ (8002cc8 <delay_us+0x34>)
 8002ca8:	f001 fdca 	bl	8004840 <HAL_TIM_Base_Start>

	while(__HAL_TIM_GET_COUNTER(&htim4) < us);
 8002cac:	bf00      	nop
 8002cae:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <delay_us+0x34>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d3f9      	bcc.n	8002cae <delay_us+0x1a>
	HAL_TIM_Base_Stop(&htim4);
 8002cba:	4803      	ldr	r0, [pc, #12]	@ (8002cc8 <delay_us+0x34>)
 8002cbc:	f001 fe1a 	bl	80048f4 <HAL_TIM_Base_Stop>
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	200004c0 	.word	0x200004c0

08002ccc <UltraSonic_Init>:

void UltraSonic_Init(UltraSonic_TypeDef *hultra, GPIO_TypeDef *Trig_GPIOx, uint16_t Trig_pinNum,  GPIO_TypeDef *Echo_GPIOx, uint16_t Echo_pinNum) {
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	80fb      	strh	r3, [r7, #6]
	hultra->Trig_GPIOx = Trig_GPIOx;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	601a      	str	r2, [r3, #0]
	hultra->Trig_pinNum = Trig_pinNum;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	88fa      	ldrh	r2, [r7, #6]
 8002ce6:	809a      	strh	r2, [r3, #4]
	hultra->Echo_GPIOx = Echo_GPIOx;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	609a      	str	r2, [r3, #8]
	hultra->Echo_pinNum = Echo_pinNum;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8b3a      	ldrh	r2, [r7, #24]
 8002cf2:	819a      	strh	r2, [r3, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <UltraSonic_GetDistance>:

int UltraSonic_GetDistance (UltraSonic_TypeDef *hultra)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	uint32_t count = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
	int distance = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]

	// trig
	HAL_GPIO_WritePin(hultra->Trig_GPIOx, hultra->Trig_pinNum, GPIO_PIN_SET);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	889b      	ldrh	r3, [r3, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f000 fb9a 	bl	8003454 <HAL_GPIO_WritePin>
	delay_us(10);
 8002d20:	200a      	movs	r0, #10
 8002d22:	f7ff ffb7 	bl	8002c94 <delay_us>
	HAL_GPIO_WritePin(hultra->Trig_GPIOx, hultra->Trig_pinNum, GPIO_PIN_RESET);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	889b      	ldrh	r3, [r3, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	4619      	mov	r1, r3
 8002d32:	f000 fb8f 	bl	8003454 <HAL_GPIO_WritePin>

	// wait echo -> high
	uint32_t timeout = 30000;
 8002d36:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002d3a:	617b      	str	r3, [r7, #20]
	while(!(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum)))
 8002d3c:	e008      	b.n	8002d50 <UltraSonic_GetDistance+0x50>
	{
		if (--timeout == 0)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d102      	bne.n	8002d50 <UltraSonic_GetDistance+0x50>
			return -1;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4e:	e037      	b.n	8002dc0 <UltraSonic_GetDistance+0xc0>
	while(!(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum)))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	899b      	ldrh	r3, [r3, #12]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	f000 fb62 	bl	8003424 <HAL_GPIO_ReadPin>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0eb      	beq.n	8002d3e <UltraSonic_GetDistance+0x3e>
	}

	// timer start
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002d66:	4b18      	ldr	r3, [pc, #96]	@ (8002dc8 <UltraSonic_GetDistance+0xc8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim4);
 8002d6e:	4816      	ldr	r0, [pc, #88]	@ (8002dc8 <UltraSonic_GetDistance+0xc8>)
 8002d70:	f001 fd66 	bl	8004840 <HAL_TIM_Base_Start>

	// wait echo -> low
	timeout = 30000;
 8002d74:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002d78:	617b      	str	r3, [r7, #20]
	while(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum))
 8002d7a:	e008      	b.n	8002d8e <UltraSonic_GetDistance+0x8e>
	{
		if (--timeout == 0)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d102      	bne.n	8002d8e <UltraSonic_GetDistance+0x8e>
			return -1;
 8002d88:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8c:	e018      	b.n	8002dc0 <UltraSonic_GetDistance+0xc0>
	while(HAL_GPIO_ReadPin(hultra->Echo_GPIOx, hultra->Echo_pinNum))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	899b      	ldrh	r3, [r3, #12]
 8002d96:	4619      	mov	r1, r3
 8002d98:	4610      	mov	r0, r2
 8002d9a:	f000 fb43 	bl	8003424 <HAL_GPIO_ReadPin>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1eb      	bne.n	8002d7c <UltraSonic_GetDistance+0x7c>
	}

	// timer stop
	HAL_TIM_Base_Stop(&htim4);
 8002da4:	4808      	ldr	r0, [pc, #32]	@ (8002dc8 <UltraSonic_GetDistance+0xc8>)
 8002da6:	f001 fda5 	bl	80048f4 <HAL_TIM_Base_Stop>
	count = __HAL_TIM_GET_COUNTER(&htim4);
 8002daa:	4b07      	ldr	r3, [pc, #28]	@ (8002dc8 <UltraSonic_GetDistance+0xc8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	613b      	str	r3, [r7, #16]

	distance = count / 58;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4a05      	ldr	r2, [pc, #20]	@ (8002dcc <UltraSonic_GetDistance+0xcc>)
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	60fb      	str	r3, [r7, #12]

	return distance;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	200004c0 	.word	0x200004c0
 8002dcc:	8d3dcb09 	.word	0x8d3dcb09

08002dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e10 <HAL_Init+0x40>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e10 <HAL_Init+0x40>)
 8002dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002de0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_Init+0x40>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0a      	ldr	r2, [pc, #40]	@ (8002e10 <HAL_Init+0x40>)
 8002de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dec:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <HAL_Init+0x40>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a07      	ldr	r2, [pc, #28]	@ (8002e10 <HAL_Init+0x40>)
 8002df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df8:	2003      	movs	r0, #3
 8002dfa:	f000 f93e 	bl	800307a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dfe:	200f      	movs	r0, #15
 8002e00:	f7fd fe9a 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e04:	f7fd fe6c 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023c00 	.word	0x40023c00

08002e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_IncTick+0x20>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <HAL_IncTick+0x24>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4413      	add	r3, r2
 8002e24:	4a04      	ldr	r2, [pc, #16]	@ (8002e38 <HAL_IncTick+0x24>)
 8002e26:	6013      	str	r3, [r2, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	2000006c 	.word	0x2000006c
 8002e38:	20000634 	.word	0x20000634

08002e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e40:	4b03      	ldr	r3, [pc, #12]	@ (8002e50 <HAL_GetTick+0x14>)
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000634 	.word	0x20000634

08002e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff ffee 	bl	8002e3c <HAL_GetTick>
 8002e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d005      	beq.n	8002e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e98 <HAL_Delay+0x44>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e7a:	bf00      	nop
 8002e7c:	f7ff ffde 	bl	8002e3c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d8f7      	bhi.n	8002e7c <HAL_Delay+0x28>
  {
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	2000006c 	.word	0x2000006c

08002e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ece:	4a04      	ldr	r2, [pc, #16]	@ (8002ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	60d3      	str	r3, [r2, #12]
}
 8002ed4:	bf00      	nop
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee8:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <__NVIC_GetPriorityGrouping+0x18>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	0a1b      	lsrs	r3, r3, #8
 8002eee:	f003 0307 	and.w	r3, r3, #7
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	db0b      	blt.n	8002f2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	f003 021f 	and.w	r2, r3, #31
 8002f18:	4907      	ldr	r1, [pc, #28]	@ (8002f38 <__NVIC_EnableIRQ+0x38>)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	2001      	movs	r0, #1
 8002f22:	fa00 f202 	lsl.w	r2, r0, r2
 8002f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	e000e100 	.word	0xe000e100

08002f3c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	db12      	blt.n	8002f74 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	490a      	ldr	r1, [pc, #40]	@ (8002f80 <__NVIC_DisableIRQ+0x44>)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f62:	3320      	adds	r3, #32
 8002f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f68:	f3bf 8f4f 	dsb	sy
}
 8002f6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f6e:	f3bf 8f6f 	isb	sy
}
 8002f72:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000e100 	.word	0xe000e100

08002f84 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	db0c      	blt.n	8002fb0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	4907      	ldr	r1, [pc, #28]	@ (8002fbc <__NVIC_ClearPendingIRQ+0x38>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002faa:	3360      	adds	r3, #96	@ 0x60
 8002fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000e100 	.word	0xe000e100

08002fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	6039      	str	r1, [r7, #0]
 8002fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	db0a      	blt.n	8002fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	490c      	ldr	r1, [pc, #48]	@ (800300c <__NVIC_SetPriority+0x4c>)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	0112      	lsls	r2, r2, #4
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe8:	e00a      	b.n	8003000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4908      	ldr	r1, [pc, #32]	@ (8003010 <__NVIC_SetPriority+0x50>)
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	3b04      	subs	r3, #4
 8002ff8:	0112      	lsls	r2, r2, #4
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	761a      	strb	r2, [r3, #24]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000e100 	.word	0xe000e100
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	@ 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f1c3 0307 	rsb	r3, r3, #7
 800302e:	2b04      	cmp	r3, #4
 8003030:	bf28      	it	cs
 8003032:	2304      	movcs	r3, #4
 8003034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3304      	adds	r3, #4
 800303a:	2b06      	cmp	r3, #6
 800303c:	d902      	bls.n	8003044 <NVIC_EncodePriority+0x30>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3b03      	subs	r3, #3
 8003042:	e000      	b.n	8003046 <NVIC_EncodePriority+0x32>
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	f04f 32ff 	mov.w	r2, #4294967295
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	401a      	ands	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800305c:	f04f 31ff 	mov.w	r1, #4294967295
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	43d9      	mvns	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	4313      	orrs	r3, r2
         );
}
 800306e:	4618      	mov	r0, r3
 8003070:	3724      	adds	r7, #36	@ 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ff0a 	bl	8002e9c <__NVIC_SetPriorityGrouping>
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a2:	f7ff ff1f 	bl	8002ee4 <__NVIC_GetPriorityGrouping>
 80030a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	6978      	ldr	r0, [r7, #20]
 80030ae:	f7ff ffb1 	bl	8003014 <NVIC_EncodePriority>
 80030b2:	4602      	mov	r2, r0
 80030b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ff80 	bl	8002fc0 <__NVIC_SetPriority>
}
 80030c0:	bf00      	nop
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ff12 	bl	8002f00 <__NVIC_EnableIRQ>
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff ff22 	bl	8002f3c <__NVIC_DisableIRQ>
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff38 	bl	8002f84 <__NVIC_ClearPendingIRQ>
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	@ 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	e159      	b.n	80033ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003138:	2201      	movs	r2, #1
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	429a      	cmp	r2, r3
 8003152:	f040 8148 	bne.w	80033e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d005      	beq.n	800316e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800316a:	2b02      	cmp	r3, #2
 800316c:	d130      	bne.n	80031d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	2203      	movs	r2, #3
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031a4:	2201      	movs	r2, #1
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 0201 	and.w	r2, r3, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d017      	beq.n	800320c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	2203      	movs	r2, #3
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d123      	bne.n	8003260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	08da      	lsrs	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3208      	adds	r2, #8
 8003220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	220f      	movs	r2, #15
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	08da      	lsrs	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3208      	adds	r2, #8
 800325a:	69b9      	ldr	r1, [r7, #24]
 800325c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2203      	movs	r2, #3
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0203 	and.w	r2, r3, #3
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80a2 	beq.w	80033e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	4b57      	ldr	r3, [pc, #348]	@ (8003404 <HAL_GPIO_Init+0x2e8>)
 80032a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032aa:	4a56      	ldr	r2, [pc, #344]	@ (8003404 <HAL_GPIO_Init+0x2e8>)
 80032ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032b2:	4b54      	ldr	r3, [pc, #336]	@ (8003404 <HAL_GPIO_Init+0x2e8>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032be:	4a52      	ldr	r2, [pc, #328]	@ (8003408 <HAL_GPIO_Init+0x2ec>)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3302      	adds	r3, #2
 80032c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	220f      	movs	r2, #15
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a49      	ldr	r2, [pc, #292]	@ (800340c <HAL_GPIO_Init+0x2f0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d019      	beq.n	800331e <HAL_GPIO_Init+0x202>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a48      	ldr	r2, [pc, #288]	@ (8003410 <HAL_GPIO_Init+0x2f4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_GPIO_Init+0x1fe>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a47      	ldr	r2, [pc, #284]	@ (8003414 <HAL_GPIO_Init+0x2f8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00d      	beq.n	8003316 <HAL_GPIO_Init+0x1fa>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a46      	ldr	r2, [pc, #280]	@ (8003418 <HAL_GPIO_Init+0x2fc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <HAL_GPIO_Init+0x1f6>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a45      	ldr	r2, [pc, #276]	@ (800341c <HAL_GPIO_Init+0x300>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <HAL_GPIO_Init+0x1f2>
 800330a:	2304      	movs	r3, #4
 800330c:	e008      	b.n	8003320 <HAL_GPIO_Init+0x204>
 800330e:	2307      	movs	r3, #7
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x204>
 8003312:	2303      	movs	r3, #3
 8003314:	e004      	b.n	8003320 <HAL_GPIO_Init+0x204>
 8003316:	2302      	movs	r3, #2
 8003318:	e002      	b.n	8003320 <HAL_GPIO_Init+0x204>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_GPIO_Init+0x204>
 800331e:	2300      	movs	r3, #0
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	f002 0203 	and.w	r2, r2, #3
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	4093      	lsls	r3, r2
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003330:	4935      	ldr	r1, [pc, #212]	@ (8003408 <HAL_GPIO_Init+0x2ec>)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3302      	adds	r3, #2
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800333e:	4b38      	ldr	r3, [pc, #224]	@ (8003420 <HAL_GPIO_Init+0x304>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003362:	4a2f      	ldr	r2, [pc, #188]	@ (8003420 <HAL_GPIO_Init+0x304>)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003368:	4b2d      	ldr	r3, [pc, #180]	@ (8003420 <HAL_GPIO_Init+0x304>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800338c:	4a24      	ldr	r2, [pc, #144]	@ (8003420 <HAL_GPIO_Init+0x304>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003392:	4b23      	ldr	r3, [pc, #140]	@ (8003420 <HAL_GPIO_Init+0x304>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003420 <HAL_GPIO_Init+0x304>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033bc:	4b18      	ldr	r3, [pc, #96]	@ (8003420 <HAL_GPIO_Init+0x304>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e0:	4a0f      	ldr	r2, [pc, #60]	@ (8003420 <HAL_GPIO_Init+0x304>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3301      	adds	r3, #1
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	f67f aea2 	bls.w	8003138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3724      	adds	r7, #36	@ 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800
 8003408:	40013800 	.word	0x40013800
 800340c:	40020000 	.word	0x40020000
 8003410:	40020400 	.word	0x40020400
 8003414:	40020800 	.word	0x40020800
 8003418:	40020c00 	.word	0x40020c00
 800341c:	40021000 	.word	0x40021000
 8003420:	40013c00 	.word	0x40013c00

08003424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	887b      	ldrh	r3, [r7, #2]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
 8003440:	e001      	b.n	8003446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003446:	7bfb      	ldrb	r3, [r7, #15]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	807b      	strh	r3, [r7, #2]
 8003460:	4613      	mov	r3, r2
 8003462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003464:	787b      	ldrb	r3, [r7, #1]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800346a:	887a      	ldrh	r2, [r7, #2]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003470:	e003      	b.n	800347a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003472:	887b      	ldrh	r3, [r7, #2]
 8003474:	041a      	lsls	r2, r3, #16
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	619a      	str	r2, [r3, #24]
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003492:	4b08      	ldr	r3, [pc, #32]	@ (80034b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d006      	beq.n	80034ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800349e:	4a05      	ldr	r2, [pc, #20]	@ (80034b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034a4:	88fb      	ldrh	r3, [r7, #6]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f806 	bl	80034b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40013c00 	.word	0x40013c00

080034b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e12b      	b.n	800373a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd fa08 	bl	800090c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2224      	movs	r2, #36	@ 0x24
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003532:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003534:	f001 f8da 	bl	80046ec <HAL_RCC_GetPCLK1Freq>
 8003538:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4a81      	ldr	r2, [pc, #516]	@ (8003744 <HAL_I2C_Init+0x274>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d807      	bhi.n	8003554 <HAL_I2C_Init+0x84>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a80      	ldr	r2, [pc, #512]	@ (8003748 <HAL_I2C_Init+0x278>)
 8003548:	4293      	cmp	r3, r2
 800354a:	bf94      	ite	ls
 800354c:	2301      	movls	r3, #1
 800354e:	2300      	movhi	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	e006      	b.n	8003562 <HAL_I2C_Init+0x92>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a7d      	ldr	r2, [pc, #500]	@ (800374c <HAL_I2C_Init+0x27c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	bf94      	ite	ls
 800355c:	2301      	movls	r3, #1
 800355e:	2300      	movhi	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0e7      	b.n	800373a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a78      	ldr	r2, [pc, #480]	@ (8003750 <HAL_I2C_Init+0x280>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	0c9b      	lsrs	r3, r3, #18
 8003574:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4a6a      	ldr	r2, [pc, #424]	@ (8003744 <HAL_I2C_Init+0x274>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d802      	bhi.n	80035a4 <HAL_I2C_Init+0xd4>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	3301      	adds	r3, #1
 80035a2:	e009      	b.n	80035b8 <HAL_I2C_Init+0xe8>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	4a69      	ldr	r2, [pc, #420]	@ (8003754 <HAL_I2C_Init+0x284>)
 80035b0:	fba2 2303 	umull	r2, r3, r2, r3
 80035b4:	099b      	lsrs	r3, r3, #6
 80035b6:	3301      	adds	r3, #1
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	430b      	orrs	r3, r1
 80035be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	495c      	ldr	r1, [pc, #368]	@ (8003744 <HAL_I2C_Init+0x274>)
 80035d4:	428b      	cmp	r3, r1
 80035d6:	d819      	bhi.n	800360c <HAL_I2C_Init+0x13c>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1e59      	subs	r1, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e6:	1c59      	adds	r1, r3, #1
 80035e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035ec:	400b      	ands	r3, r1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_I2C_Init+0x138>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1e59      	subs	r1, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003600:	3301      	adds	r3, #1
 8003602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003606:	e051      	b.n	80036ac <HAL_I2C_Init+0x1dc>
 8003608:	2304      	movs	r3, #4
 800360a:	e04f      	b.n	80036ac <HAL_I2C_Init+0x1dc>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d111      	bne.n	8003638 <HAL_I2C_Init+0x168>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1e58      	subs	r0, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	440b      	add	r3, r1
 8003622:	fbb0 f3f3 	udiv	r3, r0, r3
 8003626:	3301      	adds	r3, #1
 8003628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	e012      	b.n	800365e <HAL_I2C_Init+0x18e>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1e58      	subs	r0, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	0099      	lsls	r1, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	fbb0 f3f3 	udiv	r3, r0, r3
 800364e:	3301      	adds	r3, #1
 8003650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Init+0x196>
 8003662:	2301      	movs	r3, #1
 8003664:	e022      	b.n	80036ac <HAL_I2C_Init+0x1dc>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10e      	bne.n	800368c <HAL_I2C_Init+0x1bc>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1e58      	subs	r0, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	440b      	add	r3, r1
 800367c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003680:	3301      	adds	r3, #1
 8003682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800368a:	e00f      	b.n	80036ac <HAL_I2C_Init+0x1dc>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1e58      	subs	r0, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	0099      	lsls	r1, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a2:	3301      	adds	r3, #1
 80036a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	6809      	ldr	r1, [r1, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69da      	ldr	r2, [r3, #28]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6911      	ldr	r1, [r2, #16]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68d2      	ldr	r2, [r2, #12]
 80036e6:	4311      	orrs	r1, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	000186a0 	.word	0x000186a0
 8003748:	001e847f 	.word	0x001e847f
 800374c:	003d08ff 	.word	0x003d08ff
 8003750:	431bde83 	.word	0x431bde83
 8003754:	10624dd3 	.word	0x10624dd3

08003758 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	461a      	mov	r2, r3
 8003764:	460b      	mov	r3, r1
 8003766:	817b      	strh	r3, [r7, #10]
 8003768:	4613      	mov	r3, r2
 800376a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800376c:	f7ff fb66 	bl	8002e3c <HAL_GetTick>
 8003770:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b20      	cmp	r3, #32
 800377c:	f040 80e0 	bne.w	8003940 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	2319      	movs	r3, #25
 8003786:	2201      	movs	r2, #1
 8003788:	4970      	ldr	r1, [pc, #448]	@ (800394c <HAL_I2C_Master_Transmit+0x1f4>)
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 f964 	bl	8003a58 <I2C_WaitOnFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003796:	2302      	movs	r3, #2
 8003798:	e0d3      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_I2C_Master_Transmit+0x50>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e0cc      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d007      	beq.n	80037ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2221      	movs	r2, #33	@ 0x21
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2210      	movs	r2, #16
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	893a      	ldrh	r2, [r7, #8]
 80037fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4a50      	ldr	r2, [pc, #320]	@ (8003950 <HAL_I2C_Master_Transmit+0x1f8>)
 800380e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003810:	8979      	ldrh	r1, [r7, #10]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	6a3a      	ldr	r2, [r7, #32]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f89c 	bl	8003954 <I2C_MasterRequestWrite>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e08d      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800383c:	e066      	b.n	800390c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	6a39      	ldr	r1, [r7, #32]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 fa22 	bl	8003c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00d      	beq.n	800386a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	2b04      	cmp	r3, #4
 8003854:	d107      	bne.n	8003866 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e06b      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d11b      	bne.n	80038e0 <HAL_I2C_Master_Transmit+0x188>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d017      	beq.n	80038e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	6a39      	ldr	r1, [r7, #32]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fa19 	bl	8003d1c <I2C_WaitOnBTFFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00d      	beq.n	800390c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d107      	bne.n	8003908 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003906:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e01a      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003910:	2b00      	cmp	r3, #0
 8003912:	d194      	bne.n	800383e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	00100002 	.word	0x00100002
 8003950:	ffff0000 	.word	0xffff0000

08003954 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	607a      	str	r2, [r7, #4]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	460b      	mov	r3, r1
 8003962:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003968:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b08      	cmp	r3, #8
 800396e:	d006      	beq.n	800397e <I2C_MasterRequestWrite+0x2a>
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d003      	beq.n	800397e <I2C_MasterRequestWrite+0x2a>
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800397c:	d108      	bne.n	8003990 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	e00b      	b.n	80039a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003994:	2b12      	cmp	r3, #18
 8003996:	d107      	bne.n	80039a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f84f 	bl	8003a58 <I2C_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00d      	beq.n	80039dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ce:	d103      	bne.n	80039d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e035      	b.n	8003a48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039e4:	d108      	bne.n	80039f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039e6:	897b      	ldrh	r3, [r7, #10]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039f4:	611a      	str	r2, [r3, #16]
 80039f6:	e01b      	b.n	8003a30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039f8:	897b      	ldrh	r3, [r7, #10]
 80039fa:	11db      	asrs	r3, r3, #7
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f003 0306 	and.w	r3, r3, #6
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f063 030f 	orn	r3, r3, #15
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	490e      	ldr	r1, [pc, #56]	@ (8003a50 <I2C_MasterRequestWrite+0xfc>)
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f898 	bl	8003b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e010      	b.n	8003a48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a26:	897b      	ldrh	r3, [r7, #10]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4907      	ldr	r1, [pc, #28]	@ (8003a54 <I2C_MasterRequestWrite+0x100>)
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f888 	bl	8003b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	00010008 	.word	0x00010008
 8003a54:	00010002 	.word	0x00010002

08003a58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a68:	e048      	b.n	8003afc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a70:	d044      	beq.n	8003afc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a72:	f7ff f9e3 	bl	8002e3c <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d302      	bcc.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d139      	bne.n	8003afc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	0c1b      	lsrs	r3, r3, #16
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d10d      	bne.n	8003aae <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	43da      	mvns	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	e00c      	b.n	8003ac8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d116      	bne.n	8003afc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	f043 0220 	orr.w	r2, r3, #32
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e023      	b.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	0c1b      	lsrs	r3, r3, #16
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d10d      	bne.n	8003b22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	43da      	mvns	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4013      	ands	r3, r2
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	e00c      	b.n	8003b3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d093      	beq.n	8003a6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b5a:	e071      	b.n	8003c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b6a:	d123      	bne.n	8003bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba0:	f043 0204 	orr.w	r2, r3, #4
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e067      	b.n	8003c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d041      	beq.n	8003c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbc:	f7ff f93e 	bl	8002e3c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d302      	bcc.n	8003bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d136      	bne.n	8003c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	0c1b      	lsrs	r3, r3, #16
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d10c      	bne.n	8003bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	43da      	mvns	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4013      	ands	r3, r2
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	bf14      	ite	ne
 8003bee:	2301      	movne	r3, #1
 8003bf0:	2300      	moveq	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	e00b      	b.n	8003c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4013      	ands	r3, r2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2c:	f043 0220 	orr.w	r2, r3, #32
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e021      	b.n	8003c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	0c1b      	lsrs	r3, r3, #16
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d10c      	bne.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	43da      	mvns	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	4013      	ands	r3, r2
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf14      	ite	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	2300      	moveq	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e00b      	b.n	8003c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	43da      	mvns	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f47f af6d 	bne.w	8003b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c98:	e034      	b.n	8003d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 f886 	bl	8003dac <I2C_IsAcknowledgeFailed>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e034      	b.n	8003d14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d028      	beq.n	8003d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb2:	f7ff f8c3 	bl	8002e3c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d302      	bcc.n	8003cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d11d      	bne.n	8003d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd2:	2b80      	cmp	r3, #128	@ 0x80
 8003cd4:	d016      	beq.n	8003d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e007      	b.n	8003d14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0e:	2b80      	cmp	r3, #128	@ 0x80
 8003d10:	d1c3      	bne.n	8003c9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d28:	e034      	b.n	8003d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f83e 	bl	8003dac <I2C_IsAcknowledgeFailed>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e034      	b.n	8003da4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d028      	beq.n	8003d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d42:	f7ff f87b 	bl	8002e3c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d302      	bcc.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d11d      	bne.n	8003d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d016      	beq.n	8003d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e007      	b.n	8003da4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d1c3      	bne.n	8003d2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dc2:	d11b      	bne.n	8003dfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de8:	f043 0204 	orr.w	r2, r3, #4
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e267      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d075      	beq.n	8003f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e2a:	4b88      	ldr	r3, [pc, #544]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d00c      	beq.n	8003e50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e36:	4b85      	ldr	r3, [pc, #532]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d112      	bne.n	8003e68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e42:	4b82      	ldr	r3, [pc, #520]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e4e:	d10b      	bne.n	8003e68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	4b7e      	ldr	r3, [pc, #504]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d05b      	beq.n	8003f14 <HAL_RCC_OscConfig+0x108>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d157      	bne.n	8003f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e242      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e70:	d106      	bne.n	8003e80 <HAL_RCC_OscConfig+0x74>
 8003e72:	4b76      	ldr	r3, [pc, #472]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a75      	ldr	r2, [pc, #468]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e01d      	b.n	8003ebc <HAL_RCC_OscConfig+0xb0>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x98>
 8003e8a:	4b70      	ldr	r3, [pc, #448]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a6f      	ldr	r2, [pc, #444]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	4b6d      	ldr	r3, [pc, #436]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a6c      	ldr	r2, [pc, #432]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e00b      	b.n	8003ebc <HAL_RCC_OscConfig+0xb0>
 8003ea4:	4b69      	ldr	r3, [pc, #420]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a68      	ldr	r2, [pc, #416]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	4b66      	ldr	r3, [pc, #408]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a65      	ldr	r2, [pc, #404]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d013      	beq.n	8003eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fe ffba 	bl	8002e3c <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ecc:	f7fe ffb6 	bl	8002e3c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	@ 0x64
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e207      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ede:	4b5b      	ldr	r3, [pc, #364]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0xc0>
 8003eea:	e014      	b.n	8003f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eec:	f7fe ffa6 	bl	8002e3c <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef4:	f7fe ffa2 	bl	8002e3c <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	@ 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e1f3      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f06:	4b51      	ldr	r3, [pc, #324]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xe8>
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d063      	beq.n	8003fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f22:	4b4a      	ldr	r3, [pc, #296]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f2e:	4b47      	ldr	r3, [pc, #284]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d11c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f3a:	4b44      	ldr	r3, [pc, #272]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d116      	bne.n	8003f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f46:	4b41      	ldr	r3, [pc, #260]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_RCC_OscConfig+0x152>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d001      	beq.n	8003f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e1c7      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4937      	ldr	r1, [pc, #220]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f72:	e03a      	b.n	8003fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d020      	beq.n	8003fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f7c:	4b34      	ldr	r3, [pc, #208]	@ (8004050 <HAL_RCC_OscConfig+0x244>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f82:	f7fe ff5b 	bl	8002e3c <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8a:	f7fe ff57 	bl	8002e3c <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e1a8      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa8:	4b28      	ldr	r3, [pc, #160]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4925      	ldr	r1, [pc, #148]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	600b      	str	r3, [r1, #0]
 8003fbc:	e015      	b.n	8003fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fbe:	4b24      	ldr	r3, [pc, #144]	@ (8004050 <HAL_RCC_OscConfig+0x244>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fe ff3a 	bl	8002e3c <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fcc:	f7fe ff36 	bl	8002e3c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e187      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fde:	4b1b      	ldr	r3, [pc, #108]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d036      	beq.n	8004064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d016      	beq.n	800402c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ffe:	4b15      	ldr	r3, [pc, #84]	@ (8004054 <HAL_RCC_OscConfig+0x248>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004004:	f7fe ff1a 	bl	8002e3c <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800400c:	f7fe ff16 	bl	8002e3c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e167      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800401e:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8004020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0x200>
 800402a:	e01b      	b.n	8004064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800402c:	4b09      	ldr	r3, [pc, #36]	@ (8004054 <HAL_RCC_OscConfig+0x248>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004032:	f7fe ff03 	bl	8002e3c <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004038:	e00e      	b.n	8004058 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403a:	f7fe feff 	bl	8002e3c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d907      	bls.n	8004058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e150      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
 800404c:	40023800 	.word	0x40023800
 8004050:	42470000 	.word	0x42470000
 8004054:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004058:	4b88      	ldr	r3, [pc, #544]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 800405a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1ea      	bne.n	800403a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 8097 	beq.w	80041a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004072:	2300      	movs	r3, #0
 8004074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004076:	4b81      	ldr	r3, [pc, #516]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10f      	bne.n	80040a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	4b7d      	ldr	r3, [pc, #500]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	4a7c      	ldr	r2, [pc, #496]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 800408c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004090:	6413      	str	r3, [r2, #64]	@ 0x40
 8004092:	4b7a      	ldr	r3, [pc, #488]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409a:	60bb      	str	r3, [r7, #8]
 800409c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800409e:	2301      	movs	r3, #1
 80040a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a2:	4b77      	ldr	r3, [pc, #476]	@ (8004280 <HAL_RCC_OscConfig+0x474>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d118      	bne.n	80040e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ae:	4b74      	ldr	r3, [pc, #464]	@ (8004280 <HAL_RCC_OscConfig+0x474>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a73      	ldr	r2, [pc, #460]	@ (8004280 <HAL_RCC_OscConfig+0x474>)
 80040b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ba:	f7fe febf 	bl	8002e3c <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c2:	f7fe febb 	bl	8002e3c <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e10c      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004280 <HAL_RCC_OscConfig+0x474>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d106      	bne.n	80040f6 <HAL_RCC_OscConfig+0x2ea>
 80040e8:	4b64      	ldr	r3, [pc, #400]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ec:	4a63      	ldr	r2, [pc, #396]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f4:	e01c      	b.n	8004130 <HAL_RCC_OscConfig+0x324>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b05      	cmp	r3, #5
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x30c>
 80040fe:	4b5f      	ldr	r3, [pc, #380]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004102:	4a5e      	ldr	r2, [pc, #376]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004104:	f043 0304 	orr.w	r3, r3, #4
 8004108:	6713      	str	r3, [r2, #112]	@ 0x70
 800410a:	4b5c      	ldr	r3, [pc, #368]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410e:	4a5b      	ldr	r2, [pc, #364]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	6713      	str	r3, [r2, #112]	@ 0x70
 8004116:	e00b      	b.n	8004130 <HAL_RCC_OscConfig+0x324>
 8004118:	4b58      	ldr	r3, [pc, #352]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411c:	4a57      	ldr	r2, [pc, #348]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 800411e:	f023 0301 	bic.w	r3, r3, #1
 8004122:	6713      	str	r3, [r2, #112]	@ 0x70
 8004124:	4b55      	ldr	r3, [pc, #340]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004128:	4a54      	ldr	r2, [pc, #336]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 800412a:	f023 0304 	bic.w	r3, r3, #4
 800412e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d015      	beq.n	8004164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004138:	f7fe fe80 	bl	8002e3c <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413e:	e00a      	b.n	8004156 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f7fe fe7c 	bl	8002e3c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e0cb      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004156:	4b49      	ldr	r3, [pc, #292]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ee      	beq.n	8004140 <HAL_RCC_OscConfig+0x334>
 8004162:	e014      	b.n	800418e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004164:	f7fe fe6a 	bl	8002e3c <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800416a:	e00a      	b.n	8004182 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416c:	f7fe fe66 	bl	8002e3c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e0b5      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004182:	4b3e      	ldr	r3, [pc, #248]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1ee      	bne.n	800416c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d105      	bne.n	80041a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004194:	4b39      	ldr	r3, [pc, #228]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	4a38      	ldr	r2, [pc, #224]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 800419a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800419e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80a1 	beq.w	80042ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041aa:	4b34      	ldr	r3, [pc, #208]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d05c      	beq.n	8004270 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d141      	bne.n	8004242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041be:	4b31      	ldr	r3, [pc, #196]	@ (8004284 <HAL_RCC_OscConfig+0x478>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c4:	f7fe fe3a 	bl	8002e3c <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fe fe36 	bl	8002e3c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e087      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041de:	4b27      	ldr	r3, [pc, #156]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69da      	ldr	r2, [r3, #28]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	019b      	lsls	r3, r3, #6
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	3b01      	subs	r3, #1
 8004204:	041b      	lsls	r3, r3, #16
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	061b      	lsls	r3, r3, #24
 800420e:	491b      	ldr	r1, [pc, #108]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004210:	4313      	orrs	r3, r2
 8004212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004214:	4b1b      	ldr	r3, [pc, #108]	@ (8004284 <HAL_RCC_OscConfig+0x478>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421a:	f7fe fe0f 	bl	8002e3c <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004222:	f7fe fe0b 	bl	8002e3c <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e05c      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004234:	4b11      	ldr	r3, [pc, #68]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x416>
 8004240:	e054      	b.n	80042ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004242:	4b10      	ldr	r3, [pc, #64]	@ (8004284 <HAL_RCC_OscConfig+0x478>)
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fe fdf8 	bl	8002e3c <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004250:	f7fe fdf4 	bl	8002e3c <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e045      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004262:	4b06      	ldr	r3, [pc, #24]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0x444>
 800426e:	e03d      	b.n	80042ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d107      	bne.n	8004288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e038      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
 800427c:	40023800 	.word	0x40023800
 8004280:	40007000 	.word	0x40007000
 8004284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004288:	4b1b      	ldr	r3, [pc, #108]	@ (80042f8 <HAL_RCC_OscConfig+0x4ec>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d028      	beq.n	80042e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d121      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d11a      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042b8:	4013      	ands	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d111      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	3b01      	subs	r3, #1
 80042d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800

080042fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0cc      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004310:	4b68      	ldr	r3, [pc, #416]	@ (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d90c      	bls.n	8004338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431e:	4b65      	ldr	r3, [pc, #404]	@ (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b63      	ldr	r3, [pc, #396]	@ (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0b8      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d020      	beq.n	8004386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004350:	4b59      	ldr	r3, [pc, #356]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a58      	ldr	r2, [pc, #352]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800435a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004368:	4b53      	ldr	r3, [pc, #332]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4a52      	ldr	r2, [pc, #328]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004374:	4b50      	ldr	r3, [pc, #320]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	494d      	ldr	r1, [pc, #308]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d044      	beq.n	800441c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d107      	bne.n	80043aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	4b47      	ldr	r3, [pc, #284]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d119      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e07f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d003      	beq.n	80043ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ba:	4b3f      	ldr	r3, [pc, #252]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e06f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ca:	4b3b      	ldr	r3, [pc, #236]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e067      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043da:	4b37      	ldr	r3, [pc, #220]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f023 0203 	bic.w	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4934      	ldr	r1, [pc, #208]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043ec:	f7fe fd26 	bl	8002e3c <HAL_GetTick>
 80043f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f2:	e00a      	b.n	800440a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f4:	f7fe fd22 	bl	8002e3c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e04f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	4b2b      	ldr	r3, [pc, #172]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 020c 	and.w	r2, r3, #12
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	429a      	cmp	r2, r3
 800441a:	d1eb      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800441c:	4b25      	ldr	r3, [pc, #148]	@ (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d20c      	bcs.n	8004444 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b22      	ldr	r3, [pc, #136]	@ (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b20      	ldr	r3, [pc, #128]	@ (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e032      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004450:	4b19      	ldr	r3, [pc, #100]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4916      	ldr	r1, [pc, #88]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800446e:	4b12      	ldr	r3, [pc, #72]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	490e      	ldr	r1, [pc, #56]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004482:	f000 f821 	bl	80044c8 <HAL_RCC_GetSysClockFreq>
 8004486:	4602      	mov	r2, r0
 8004488:	4b0b      	ldr	r3, [pc, #44]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	490a      	ldr	r1, [pc, #40]	@ (80044bc <HAL_RCC_ClockConfig+0x1c0>)
 8004494:	5ccb      	ldrb	r3, [r1, r3]
 8004496:	fa22 f303 	lsr.w	r3, r2, r3
 800449a:	4a09      	ldr	r2, [pc, #36]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800449e:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fc fb48 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40023c00 	.word	0x40023c00
 80044b8:	40023800 	.word	0x40023800
 80044bc:	0800871c 	.word	0x0800871c
 80044c0:	20000000 	.word	0x20000000
 80044c4:	20000068 	.word	0x20000068

080044c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044cc:	b094      	sub	sp, #80	@ 0x50
 80044ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044e0:	4b79      	ldr	r3, [pc, #484]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 030c 	and.w	r3, r3, #12
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d00d      	beq.n	8004508 <HAL_RCC_GetSysClockFreq+0x40>
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	f200 80e1 	bhi.w	80046b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0x34>
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d003      	beq.n	8004502 <HAL_RCC_GetSysClockFreq+0x3a>
 80044fa:	e0db      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044fc:	4b73      	ldr	r3, [pc, #460]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x204>)
 80044fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004500:	e0db      	b.n	80046ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004502:	4b73      	ldr	r3, [pc, #460]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004504:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004506:	e0d8      	b.n	80046ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004508:	4b6f      	ldr	r3, [pc, #444]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004510:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004512:	4b6d      	ldr	r3, [pc, #436]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d063      	beq.n	80045e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800451e:	4b6a      	ldr	r3, [pc, #424]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	099b      	lsrs	r3, r3, #6
 8004524:	2200      	movs	r2, #0
 8004526:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004528:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800452a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004530:	633b      	str	r3, [r7, #48]	@ 0x30
 8004532:	2300      	movs	r3, #0
 8004534:	637b      	str	r3, [r7, #52]	@ 0x34
 8004536:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800453a:	4622      	mov	r2, r4
 800453c:	462b      	mov	r3, r5
 800453e:	f04f 0000 	mov.w	r0, #0
 8004542:	f04f 0100 	mov.w	r1, #0
 8004546:	0159      	lsls	r1, r3, #5
 8004548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800454c:	0150      	lsls	r0, r2, #5
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4621      	mov	r1, r4
 8004554:	1a51      	subs	r1, r2, r1
 8004556:	6139      	str	r1, [r7, #16]
 8004558:	4629      	mov	r1, r5
 800455a:	eb63 0301 	sbc.w	r3, r3, r1
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800456c:	4659      	mov	r1, fp
 800456e:	018b      	lsls	r3, r1, #6
 8004570:	4651      	mov	r1, sl
 8004572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004576:	4651      	mov	r1, sl
 8004578:	018a      	lsls	r2, r1, #6
 800457a:	4651      	mov	r1, sl
 800457c:	ebb2 0801 	subs.w	r8, r2, r1
 8004580:	4659      	mov	r1, fp
 8004582:	eb63 0901 	sbc.w	r9, r3, r1
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800459a:	4690      	mov	r8, r2
 800459c:	4699      	mov	r9, r3
 800459e:	4623      	mov	r3, r4
 80045a0:	eb18 0303 	adds.w	r3, r8, r3
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	462b      	mov	r3, r5
 80045a8:	eb49 0303 	adc.w	r3, r9, r3
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045ba:	4629      	mov	r1, r5
 80045bc:	024b      	lsls	r3, r1, #9
 80045be:	4621      	mov	r1, r4
 80045c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045c4:	4621      	mov	r1, r4
 80045c6:	024a      	lsls	r2, r1, #9
 80045c8:	4610      	mov	r0, r2
 80045ca:	4619      	mov	r1, r3
 80045cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ce:	2200      	movs	r2, #0
 80045d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045d8:	f7fb fe52 	bl	8000280 <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4613      	mov	r3, r2
 80045e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045e4:	e058      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e6:	4b38      	ldr	r3, [pc, #224]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	099b      	lsrs	r3, r3, #6
 80045ec:	2200      	movs	r2, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	4611      	mov	r1, r2
 80045f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045f6:	623b      	str	r3, [r7, #32]
 80045f8:	2300      	movs	r3, #0
 80045fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004600:	4642      	mov	r2, r8
 8004602:	464b      	mov	r3, r9
 8004604:	f04f 0000 	mov.w	r0, #0
 8004608:	f04f 0100 	mov.w	r1, #0
 800460c:	0159      	lsls	r1, r3, #5
 800460e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004612:	0150      	lsls	r0, r2, #5
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4641      	mov	r1, r8
 800461a:	ebb2 0a01 	subs.w	sl, r2, r1
 800461e:	4649      	mov	r1, r9
 8004620:	eb63 0b01 	sbc.w	fp, r3, r1
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004630:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004634:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004638:	ebb2 040a 	subs.w	r4, r2, sl
 800463c:	eb63 050b 	sbc.w	r5, r3, fp
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	00eb      	lsls	r3, r5, #3
 800464a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464e:	00e2      	lsls	r2, r4, #3
 8004650:	4614      	mov	r4, r2
 8004652:	461d      	mov	r5, r3
 8004654:	4643      	mov	r3, r8
 8004656:	18e3      	adds	r3, r4, r3
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	464b      	mov	r3, r9
 800465c:	eb45 0303 	adc.w	r3, r5, r3
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800466e:	4629      	mov	r1, r5
 8004670:	028b      	lsls	r3, r1, #10
 8004672:	4621      	mov	r1, r4
 8004674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004678:	4621      	mov	r1, r4
 800467a:	028a      	lsls	r2, r1, #10
 800467c:	4610      	mov	r0, r2
 800467e:	4619      	mov	r1, r3
 8004680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004682:	2200      	movs	r2, #0
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	61fa      	str	r2, [r7, #28]
 8004688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800468c:	f7fb fdf8 	bl	8000280 <__aeabi_uldivmod>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4613      	mov	r3, r2
 8004696:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004698:	4b0b      	ldr	r3, [pc, #44]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	3301      	adds	r3, #1
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80046a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046b2:	e002      	b.n	80046ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046b4:	4b05      	ldr	r3, [pc, #20]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x204>)
 80046b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3750      	adds	r7, #80	@ 0x50
 80046c0:	46bd      	mov	sp, r7
 80046c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800
 80046cc:	00f42400 	.word	0x00f42400
 80046d0:	007a1200 	.word	0x007a1200

080046d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d8:	4b03      	ldr	r3, [pc, #12]	@ (80046e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000000 	.word	0x20000000

080046ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046f0:	f7ff fff0 	bl	80046d4 <HAL_RCC_GetHCLKFreq>
 80046f4:	4602      	mov	r2, r0
 80046f6:	4b05      	ldr	r3, [pc, #20]	@ (800470c <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	0a9b      	lsrs	r3, r3, #10
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	4903      	ldr	r1, [pc, #12]	@ (8004710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004702:	5ccb      	ldrb	r3, [r1, r3]
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40023800 	.word	0x40023800
 8004710:	0800872c 	.word	0x0800872c

08004714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004718:	f7ff ffdc 	bl	80046d4 <HAL_RCC_GetHCLKFreq>
 800471c:	4602      	mov	r2, r0
 800471e:	4b05      	ldr	r3, [pc, #20]	@ (8004734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	0b5b      	lsrs	r3, r3, #13
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	4903      	ldr	r1, [pc, #12]	@ (8004738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800472a:	5ccb      	ldrb	r3, [r1, r3]
 800472c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004730:	4618      	mov	r0, r3
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40023800 	.word	0x40023800
 8004738:	0800872c 	.word	0x0800872c

0800473c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	220f      	movs	r2, #15
 800474a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800474c:	4b12      	ldr	r3, [pc, #72]	@ (8004798 <HAL_RCC_GetClockConfig+0x5c>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 0203 	and.w	r2, r3, #3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004758:	4b0f      	ldr	r3, [pc, #60]	@ (8004798 <HAL_RCC_GetClockConfig+0x5c>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004764:	4b0c      	ldr	r3, [pc, #48]	@ (8004798 <HAL_RCC_GetClockConfig+0x5c>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004770:	4b09      	ldr	r3, [pc, #36]	@ (8004798 <HAL_RCC_GetClockConfig+0x5c>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	08db      	lsrs	r3, r3, #3
 8004776:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800477e:	4b07      	ldr	r3, [pc, #28]	@ (800479c <HAL_RCC_GetClockConfig+0x60>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0207 	and.w	r2, r3, #7
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	601a      	str	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800
 800479c:	40023c00 	.word	0x40023c00

080047a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e041      	b.n	8004836 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fc fbe0 	bl	8000f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3304      	adds	r3, #4
 80047dc:	4619      	mov	r1, r3
 80047de:	4610      	mov	r0, r2
 80047e0:	f000 faf2 	bl	8004dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	d001      	beq.n	8004858 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e03c      	b.n	80048d2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a1e      	ldr	r2, [pc, #120]	@ (80048e0 <HAL_TIM_Base_Start+0xa0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d018      	beq.n	800489c <HAL_TIM_Base_Start+0x5c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004872:	d013      	beq.n	800489c <HAL_TIM_Base_Start+0x5c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1a      	ldr	r2, [pc, #104]	@ (80048e4 <HAL_TIM_Base_Start+0xa4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00e      	beq.n	800489c <HAL_TIM_Base_Start+0x5c>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a19      	ldr	r2, [pc, #100]	@ (80048e8 <HAL_TIM_Base_Start+0xa8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d009      	beq.n	800489c <HAL_TIM_Base_Start+0x5c>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a17      	ldr	r2, [pc, #92]	@ (80048ec <HAL_TIM_Base_Start+0xac>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d004      	beq.n	800489c <HAL_TIM_Base_Start+0x5c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a16      	ldr	r2, [pc, #88]	@ (80048f0 <HAL_TIM_Base_Start+0xb0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d111      	bne.n	80048c0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b06      	cmp	r3, #6
 80048ac:	d010      	beq.n	80048d0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0201 	orr.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048be:	e007      	b.n	80048d0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40010000 	.word	0x40010000
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40000800 	.word	0x40000800
 80048ec:	40000c00 	.word	0x40000c00
 80048f0:	40014000 	.word	0x40014000

080048f4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6a1a      	ldr	r2, [r3, #32]
 8004902:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10f      	bne.n	800492c <HAL_TIM_Base_Stop+0x38>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6a1a      	ldr	r2, [r3, #32]
 8004912:	f240 4344 	movw	r3, #1092	@ 0x444
 8004916:	4013      	ands	r3, r2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d107      	bne.n	800492c <HAL_TIM_Base_Stop+0x38>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b01      	cmp	r3, #1
 8004956:	d001      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e044      	b.n	80049e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1e      	ldr	r2, [pc, #120]	@ (80049f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d018      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x6c>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004986:	d013      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x6c>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1a      	ldr	r2, [pc, #104]	@ (80049f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00e      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x6c>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a19      	ldr	r2, [pc, #100]	@ (80049fc <HAL_TIM_Base_Start_IT+0xb8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d009      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x6c>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a17      	ldr	r2, [pc, #92]	@ (8004a00 <HAL_TIM_Base_Start_IT+0xbc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x6c>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a16      	ldr	r2, [pc, #88]	@ (8004a04 <HAL_TIM_Base_Start_IT+0xc0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d111      	bne.n	80049d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b06      	cmp	r3, #6
 80049c0:	d010      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0201 	orr.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d2:	e007      	b.n	80049e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40010000 	.word	0x40010000
 80049f8:	40000400 	.word	0x40000400
 80049fc:	40000800 	.word	0x40000800
 8004a00:	40000c00 	.word	0x40000c00
 8004a04:	40014000 	.word	0x40014000

08004a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d020      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01b      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0202 	mvn.w	r2, #2
 8004a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f999 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f98b 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f99c 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d020      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0204 	mvn.w	r2, #4
 8004a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f973 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 8004aa4:	e005      	b.n	8004ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f965 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f976 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d020      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01b      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0208 	mvn.w	r2, #8
 8004ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2204      	movs	r2, #4
 8004ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f94d 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 8004af0:	e005      	b.n	8004afe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f93f 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f950 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d020      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01b      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0210 	mvn.w	r2, #16
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2208      	movs	r2, #8
 8004b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f927 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f919 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f92a 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00c      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0201 	mvn.w	r2, #1
 8004b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fb ff94 	bl	8000a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00c      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fab0 	bl	80050f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00c      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f8fb 	bl	8004db2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00c      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0220 	mvn.w	r2, #32
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fa82 	bl	80050e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIM_ConfigClockSource+0x1c>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e0b4      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x186>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c3c:	d03e      	beq.n	8004cbc <HAL_TIM_ConfigClockSource+0xd4>
 8004c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c42:	f200 8087 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4a:	f000 8086 	beq.w	8004d5a <HAL_TIM_ConfigClockSource+0x172>
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c52:	d87f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b70      	cmp	r3, #112	@ 0x70
 8004c56:	d01a      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0xa6>
 8004c58:	2b70      	cmp	r3, #112	@ 0x70
 8004c5a:	d87b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c5c:	2b60      	cmp	r3, #96	@ 0x60
 8004c5e:	d050      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x11a>
 8004c60:	2b60      	cmp	r3, #96	@ 0x60
 8004c62:	d877      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b50      	cmp	r3, #80	@ 0x50
 8004c66:	d03c      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c68:	2b50      	cmp	r3, #80	@ 0x50
 8004c6a:	d873      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b40      	cmp	r3, #64	@ 0x40
 8004c6e:	d058      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x13a>
 8004c70:	2b40      	cmp	r3, #64	@ 0x40
 8004c72:	d86f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b30      	cmp	r3, #48	@ 0x30
 8004c76:	d064      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c78:	2b30      	cmp	r3, #48	@ 0x30
 8004c7a:	d86b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d060      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d867      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d05c      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d05a      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c8c:	e062      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c9e:	f000 f993 	bl	8004fc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	609a      	str	r2, [r3, #8]
      break;
 8004cba:	e04f      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ccc:	f000 f97c 	bl	8004fc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cde:	609a      	str	r2, [r3, #8]
      break;
 8004ce0:	e03c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f000 f8f0 	bl	8004ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2150      	movs	r1, #80	@ 0x50
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 f949 	bl	8004f92 <TIM_ITRx_SetConfig>
      break;
 8004d00:	e02c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f000 f90f 	bl	8004f32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2160      	movs	r1, #96	@ 0x60
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 f939 	bl	8004f92 <TIM_ITRx_SetConfig>
      break;
 8004d20:	e01c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f000 f8d0 	bl	8004ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2140      	movs	r1, #64	@ 0x40
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f929 	bl	8004f92 <TIM_ITRx_SetConfig>
      break;
 8004d40:	e00c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f000 f920 	bl	8004f92 <TIM_ITRx_SetConfig>
      break;
 8004d52:	e003      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      break;
 8004d58:	e000      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a37      	ldr	r2, [pc, #220]	@ (8004eb8 <TIM_Base_SetConfig+0xf0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00f      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de6:	d00b      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a34      	ldr	r2, [pc, #208]	@ (8004ebc <TIM_Base_SetConfig+0xf4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a33      	ldr	r2, [pc, #204]	@ (8004ec0 <TIM_Base_SetConfig+0xf8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a32      	ldr	r2, [pc, #200]	@ (8004ec4 <TIM_Base_SetConfig+0xfc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d108      	bne.n	8004e12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a28      	ldr	r2, [pc, #160]	@ (8004eb8 <TIM_Base_SetConfig+0xf0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01b      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e20:	d017      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a25      	ldr	r2, [pc, #148]	@ (8004ebc <TIM_Base_SetConfig+0xf4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a24      	ldr	r2, [pc, #144]	@ (8004ec0 <TIM_Base_SetConfig+0xf8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00f      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a23      	ldr	r2, [pc, #140]	@ (8004ec4 <TIM_Base_SetConfig+0xfc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00b      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a22      	ldr	r2, [pc, #136]	@ (8004ec8 <TIM_Base_SetConfig+0x100>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a21      	ldr	r2, [pc, #132]	@ (8004ecc <TIM_Base_SetConfig+0x104>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d003      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a20      	ldr	r2, [pc, #128]	@ (8004ed0 <TIM_Base_SetConfig+0x108>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d108      	bne.n	8004e64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a0c      	ldr	r2, [pc, #48]	@ (8004eb8 <TIM_Base_SetConfig+0xf0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d103      	bne.n	8004e92 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f043 0204 	orr.w	r2, r3, #4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	601a      	str	r2, [r3, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40000800 	.word	0x40000800
 8004ec4:	40000c00 	.word	0x40000c00
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800

08004ed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f023 0201 	bic.w	r2, r3, #1
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f023 030a 	bic.w	r3, r3, #10
 8004f10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	621a      	str	r2, [r3, #32]
}
 8004f26:	bf00      	nop
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b087      	sub	sp, #28
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	f023 0210 	bic.w	r2, r3, #16
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	031b      	lsls	r3, r3, #12
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	621a      	str	r2, [r3, #32]
}
 8004f86:	bf00      	nop
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b085      	sub	sp, #20
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f043 0307 	orr.w	r3, r3, #7
 8004fb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	609a      	str	r2, [r3, #8]
}
 8004fbc:	bf00      	nop
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fe2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	021a      	lsls	r2, r3, #8
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	609a      	str	r2, [r3, #8]
}
 8004ffc:	bf00      	nop
 8004ffe:	371c      	adds	r7, #28
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800501c:	2302      	movs	r3, #2
 800501e:	e050      	b.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1c      	ldr	r2, [pc, #112]	@ (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d018      	beq.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800506c:	d013      	beq.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a18      	ldr	r2, [pc, #96]	@ (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00e      	beq.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a16      	ldr	r2, [pc, #88]	@ (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d009      	beq.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a15      	ldr	r2, [pc, #84]	@ (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d004      	beq.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a13      	ldr	r2, [pc, #76]	@ (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d10c      	bne.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800509c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40000c00 	.word	0x40000c00
 80050e0:	40014000 	.word	0x40014000

080050e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800511a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800511e:	2b84      	cmp	r3, #132	@ 0x84
 8005120:	d005      	beq.n	800512e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005122:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	3303      	adds	r3, #3
 800512c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800512e:	68fb      	ldr	r3, [r7, #12]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005142:	f3ef 8305 	mrs	r3, IPSR
 8005146:	607b      	str	r3, [r7, #4]
  return(result);
 8005148:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800514a:	2b00      	cmp	r3, #0
 800514c:	bf14      	ite	ne
 800514e:	2301      	movne	r3, #1
 8005150:	2300      	moveq	r3, #0
 8005152:	b2db      	uxtb	r3, r3
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005164:	f001 fb66 	bl	8006834 <vTaskStartScheduler>
  
  return osOK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	bd80      	pop	{r7, pc}

0800516e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800516e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005170:	b089      	sub	sp, #36	@ 0x24
 8005172:	af04      	add	r7, sp, #16
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d020      	beq.n	80051c2 <osThreadCreate+0x54>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01c      	beq.n	80051c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685c      	ldr	r4, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691e      	ldr	r6, [r3, #16]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff ffb6 	bl	800510c <makeFreeRtosPriority>
 80051a0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051aa:	9202      	str	r2, [sp, #8]
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	9100      	str	r1, [sp, #0]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	4632      	mov	r2, r6
 80051b4:	4629      	mov	r1, r5
 80051b6:	4620      	mov	r0, r4
 80051b8:	f001 f956 	bl	8006468 <xTaskCreateStatic>
 80051bc:	4603      	mov	r3, r0
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	e01c      	b.n	80051fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685c      	ldr	r4, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051ce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff ff98 	bl	800510c <makeFreeRtosPriority>
 80051dc:	4602      	mov	r2, r0
 80051de:	f107 030c 	add.w	r3, r7, #12
 80051e2:	9301      	str	r3, [sp, #4]
 80051e4:	9200      	str	r2, [sp, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	4632      	mov	r2, r6
 80051ea:	4629      	mov	r1, r5
 80051ec:	4620      	mov	r0, r4
 80051ee:	f001 f99b 	bl	8006528 <xTaskCreate>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d001      	beq.n	80051fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	e000      	b.n	80051fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80051fc:	68fb      	ldr	r3, [r7, #12]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005206 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <osDelay+0x16>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	e000      	b.n	800521e <osDelay+0x18>
 800521c:	2301      	movs	r3, #1
 800521e:	4618      	mov	r0, r3
 8005220:	f001 fad2 	bl	80067c8 <vTaskDelay>
  
  return osOK;
 8005224:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b086      	sub	sp, #24
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	3303      	adds	r3, #3
 800523c:	f023 0303 	bic.w	r3, r3, #3
 8005240:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8005242:	2014      	movs	r0, #20
 8005244:	f002 fa72 	bl	800772c <pvPortMalloc>
 8005248:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d046      	beq.n	80052de <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2200      	movs	r2, #0
 8005262:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4618      	mov	r0, r3
 800526a:	f002 fa5f 	bl	800772c <pvPortMalloc>
 800526e:	4602      	mov	r2, r0
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d02b      	beq.n	80052d4 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	fb02 f303 	mul.w	r3, r2, r3
 8005286:	4618      	mov	r0, r3
 8005288:	f002 fa50 	bl	800772c <pvPortMalloc>
 800528c:	4602      	mov	r2, r0
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d011      	beq.n	80052be <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	e008      	b.n	80052b2 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	3301      	adds	r3, #1
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d3f1      	bcc.n	80052a0 <osPoolCreate+0x72>
 80052bc:	e00f      	b.n	80052de <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f002 fb00 	bl	80078c8 <vPortFree>
        vPortFree(thePool);
 80052c8:	6978      	ldr	r0, [r7, #20]
 80052ca:	f002 fafd 	bl	80078c8 <vPortFree>
        thePool = NULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	e004      	b.n	80052de <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80052d4:	6978      	ldr	r0, [r7, #20]
 80052d6:	f002 faf7 	bl	80078c8 <vPortFree>
      thePool = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80052de:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08a      	sub	sp, #40	@ 0x28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 80052f4:	2300      	movs	r3, #0
 80052f6:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80052f8:	f7ff ff20 	bl	800513c <inHandlerMode>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00e      	beq.n	8005320 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005302:	f3ef 8211 	mrs	r2, BASEPRI
 8005306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	617a      	str	r2, [r7, #20]
 8005318:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800531a:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800531c:	627b      	str	r3, [r7, #36]	@ 0x24
 800531e:	e001      	b.n	8005324 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8005320:	f002 f8e2 	bl	80074e8 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005324:	2300      	movs	r3, #0
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	e029      	b.n	800537e <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691a      	ldr	r2, [r3, #16]
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6892      	ldr	r2, [r2, #8]
 8005336:	fbb3 f1f2 	udiv	r1, r3, r2
 800533a:	fb01 f202 	mul.w	r2, r1, r2
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	4413      	add	r3, r2
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d113      	bne.n	8005378 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	4413      	add	r3, r2
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4619      	mov	r1, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	fb02 f303 	mul.w	r3, r2, r3
 800536c:	440b      	add	r3, r1
 800536e:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	611a      	str	r2, [r3, #16]
      break;
 8005376:	e007      	b.n	8005388 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	3301      	adds	r3, #1
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	429a      	cmp	r2, r3
 8005386:	d3d0      	bcc.n	800532a <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8005388:	f7ff fed8 	bl	800513c <inHandlerMode>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d005      	beq.n	800539e <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800539c:	e001      	b.n	80053a2 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800539e:	f002 f8d5 	bl	800754c <vPortExitCritical>
  }
  
  return p;
 80053a2:	6a3b      	ldr	r3, [r7, #32]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3728      	adds	r7, #40	@ 0x28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <osPoolFree+0x14>
    return osErrorParameter;
 80053bc:	2380      	movs	r3, #128	@ 0x80
 80053be:	e030      	b.n	8005422 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <osPoolFree+0x1e>
    return osErrorParameter;
 80053c6:	2380      	movs	r3, #128	@ 0x80
 80053c8:	e02b      	b.n	8005422 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d201      	bcs.n	80053d8 <osPoolFree+0x2c>
    return osErrorParameter;
 80053d4:	2380      	movs	r3, #128	@ 0x80
 80053d6:	e024      	b.n	8005422 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	1a9b      	subs	r3, r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80053ec:	fb01 f202 	mul.w	r2, r1, r2
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <osPoolFree+0x4e>
    return osErrorParameter;
 80053f6:	2380      	movs	r3, #128	@ 0x80
 80053f8:	e013      	b.n	8005422 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	429a      	cmp	r2, r3
 800540e:	d301      	bcc.n	8005414 <osPoolFree+0x68>
    return osErrorParameter;
 8005410:	2380      	movs	r3, #128	@ 0x80
 8005412:	e006      	b.n	8005422 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800542e:	b590      	push	{r4, r7, lr}
 8005430:	b085      	sub	sp, #20
 8005432:	af02      	add	r7, sp, #8
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d011      	beq.n	8005464 <osMessageCreate+0x36>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00d      	beq.n	8005464 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6859      	ldr	r1, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	2400      	movs	r4, #0
 800545a:	9400      	str	r4, [sp, #0]
 800545c:	f000 fb18 	bl	8005a90 <xQueueGenericCreateStatic>
 8005460:	4603      	mov	r3, r0
 8005462:	e008      	b.n	8005476 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	4619      	mov	r1, r3
 8005470:	f000 fb8b 	bl	8005b8a <xQueueGenericCreate>
 8005474:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	bd90      	pop	{r4, r7, pc}
	...

08005480 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800548c:	2300      	movs	r3, #0
 800548e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <osMessagePut+0x1e>
    ticks = 1;
 800549a:	2301      	movs	r3, #1
 800549c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800549e:	f7ff fe4d 	bl	800513c <inHandlerMode>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d018      	beq.n	80054da <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80054a8:	f107 0210 	add.w	r2, r7, #16
 80054ac:	f107 0108 	add.w	r1, r7, #8
 80054b0:	2300      	movs	r3, #0
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 fcc6 	bl	8005e44 <xQueueGenericSendFromISR>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d001      	beq.n	80054c2 <osMessagePut+0x42>
      return osErrorOS;
 80054be:	23ff      	movs	r3, #255	@ 0xff
 80054c0:	e018      	b.n	80054f4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d014      	beq.n	80054f2 <osMessagePut+0x72>
 80054c8:	4b0c      	ldr	r3, [pc, #48]	@ (80054fc <osMessagePut+0x7c>)
 80054ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	e00b      	b.n	80054f2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80054da:	f107 0108 	add.w	r1, r7, #8
 80054de:	2300      	movs	r3, #0
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 fbac 	bl	8005c40 <xQueueGenericSend>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d001      	beq.n	80054f2 <osMessagePut+0x72>
      return osErrorOS;
 80054ee:	23ff      	movs	r3, #255	@ 0xff
 80054f0:	e000      	b.n	80054f4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	e000ed04 	.word	0xe000ed04

08005500 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005500:	b590      	push	{r4, r7, lr}
 8005502:	b08b      	sub	sp, #44	@ 0x2c
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10a      	bne.n	8005530 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800551a:	2380      	movs	r3, #128	@ 0x80
 800551c:	617b      	str	r3, [r7, #20]
    return event;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	461c      	mov	r4, r3
 8005522:	f107 0314 	add.w	r3, r7, #20
 8005526:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800552a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800552e:	e054      	b.n	80055da <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005530:	2300      	movs	r3, #0
 8005532:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553e:	d103      	bne.n	8005548 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005540:	f04f 33ff 	mov.w	r3, #4294967295
 8005544:	627b      	str	r3, [r7, #36]	@ 0x24
 8005546:	e009      	b.n	800555c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d006      	beq.n	800555c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <osMessageGet+0x5c>
      ticks = 1;
 8005558:	2301      	movs	r3, #1
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800555c:	f7ff fdee 	bl	800513c <inHandlerMode>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01c      	beq.n	80055a0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005566:	f107 0220 	add.w	r2, r7, #32
 800556a:	f107 0314 	add.w	r3, r7, #20
 800556e:	3304      	adds	r3, #4
 8005570:	4619      	mov	r1, r3
 8005572:	68b8      	ldr	r0, [r7, #8]
 8005574:	f000 fde6 	bl	8006144 <xQueueReceiveFromISR>
 8005578:	4603      	mov	r3, r0
 800557a:	2b01      	cmp	r3, #1
 800557c:	d102      	bne.n	8005584 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800557e:	2310      	movs	r3, #16
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	e001      	b.n	8005588 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d01d      	beq.n	80055ca <osMessageGet+0xca>
 800558e:	4b15      	ldr	r3, [pc, #84]	@ (80055e4 <osMessageGet+0xe4>)
 8005590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	e014      	b.n	80055ca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80055a0:	f107 0314 	add.w	r3, r7, #20
 80055a4:	3304      	adds	r3, #4
 80055a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a8:	4619      	mov	r1, r3
 80055aa:	68b8      	ldr	r0, [r7, #8]
 80055ac:	f000 fce8 	bl	8005f80 <xQueueReceive>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d102      	bne.n	80055bc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80055b6:	2310      	movs	r3, #16
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e006      	b.n	80055ca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80055bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <osMessageGet+0xc6>
 80055c2:	2300      	movs	r3, #0
 80055c4:	e000      	b.n	80055c8 <osMessageGet+0xc8>
 80055c6:	2340      	movs	r3, #64	@ 0x40
 80055c8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	461c      	mov	r4, r3
 80055ce:	f107 0314 	add.w	r3, r7, #20
 80055d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	372c      	adds	r7, #44	@ 0x2c
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd90      	pop	{r4, r7, pc}
 80055e2:	bf00      	nop
 80055e4:	e000ed04 	.word	0xe000ed04

080055e8 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80055e8:	b590      	push	{r4, r7, lr}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689c      	ldr	r4, [r3, #8]
 8005606:	200c      	movs	r0, #12
 8005608:	f002 f890 	bl	800772c <pvPortMalloc>
 800560c:	4603      	mov	r3, r0
 800560e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <osMailCreate+0x36>
    return NULL;
 800561a:	2300      	movs	r3, #0
 800561c:	e038      	b.n	8005690 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6818      	ldr	r0, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	681c      	ldr	r4, [r3, #0]
 8005632:	2200      	movs	r2, #0
 8005634:	2104      	movs	r1, #4
 8005636:	f000 faa8 	bl	8005b8a <xQueueGenericCreate>
 800563a:	4603      	mov	r3, r0
 800563c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d107      	bne.n	800565a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f002 f939 	bl	80078c8 <vPortFree>
    return NULL;
 8005656:	2300      	movs	r3, #0
 8005658:	e01a      	b.n	8005690 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	681c      	ldr	r4, [r3, #0]
 8005660:	f107 030c 	add.w	r3, r7, #12
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff fde2 	bl	800522e <osPoolCreate>
 800566a:	4603      	mov	r3, r0
 800566c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d107      	bne.n	800568a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4618      	mov	r0, r3
 8005682:	f002 f921 	bl	80078c8 <vPortFree>
    return NULL;
 8005686:	2300      	movs	r3, #0
 8005688:	e002      	b.n	8005690 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8005690:	4618      	mov	r0, r3
 8005692:	371c      	adds	r7, #28
 8005694:	46bd      	mov	sp, r7
 8005696:	bd90      	pop	{r4, r7, pc}

08005698 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <osMailAlloc+0x14>
    return NULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e006      	b.n	80056ba <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff fe19 	bl	80052e8 <osPoolAlloc>
 80056b6:	60f8      	str	r0, [r7, #12]
  
  return p;
 80056b8:	68fb      	ldr	r3, [r7, #12]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <osMailPut+0x14>
    return osErrorParameter;
 80056d4:	2380      	movs	r3, #128	@ 0x80
 80056d6:	e02c      	b.n	8005732 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80056dc:	f7ff fd2e 	bl	800513c <inHandlerMode>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d018      	beq.n	8005718 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6858      	ldr	r0, [r3, #4]
 80056ea:	f107 020c 	add.w	r2, r7, #12
 80056ee:	4639      	mov	r1, r7
 80056f0:	2300      	movs	r3, #0
 80056f2:	f000 fba7 	bl	8005e44 <xQueueGenericSendFromISR>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d001      	beq.n	8005700 <osMailPut+0x3c>
      return osErrorOS;
 80056fc:	23ff      	movs	r3, #255	@ 0xff
 80056fe:	e018      	b.n	8005732 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d014      	beq.n	8005730 <osMailPut+0x6c>
 8005706:	4b0d      	ldr	r3, [pc, #52]	@ (800573c <osMailPut+0x78>)
 8005708:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	e00b      	b.n	8005730 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6858      	ldr	r0, [r3, #4]
 800571c:	4639      	mov	r1, r7
 800571e:	2300      	movs	r3, #0
 8005720:	2200      	movs	r2, #0
 8005722:	f000 fa8d 	bl	8005c40 <xQueueGenericSend>
 8005726:	4603      	mov	r3, r0
 8005728:	2b01      	cmp	r3, #1
 800572a:	d001      	beq.n	8005730 <osMailPut+0x6c>
      return osErrorOS;
 800572c:	23ff      	movs	r3, #255	@ 0xff
 800572e:	e000      	b.n	8005732 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	e000ed04 	.word	0xe000ed04

08005740 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	b08b      	sub	sp, #44	@ 0x2c
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10a      	bne.n	800576c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8005756:	2380      	movs	r3, #128	@ 0x80
 8005758:	617b      	str	r3, [r7, #20]
    return event;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	461c      	mov	r4, r3
 800575e:	f107 0314 	add.w	r3, r7, #20
 8005762:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005766:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800576a:	e056      	b.n	800581a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800576c:	2300      	movs	r3, #0
 800576e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005770:	2300      	movs	r3, #0
 8005772:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577a:	d103      	bne.n	8005784 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800577c:	f04f 33ff 	mov.w	r3, #4294967295
 8005780:	627b      	str	r3, [r7, #36]	@ 0x24
 8005782:	e009      	b.n	8005798 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d006      	beq.n	8005798 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <osMailGet+0x58>
      ticks = 1;
 8005794:	2301      	movs	r3, #1
 8005796:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005798:	f7ff fcd0 	bl	800513c <inHandlerMode>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01d      	beq.n	80057de <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6858      	ldr	r0, [r3, #4]
 80057a6:	f107 0220 	add.w	r2, r7, #32
 80057aa:	f107 0314 	add.w	r3, r7, #20
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	f000 fcc7 	bl	8006144 <xQueueReceiveFromISR>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d102      	bne.n	80057c2 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 80057bc:	2320      	movs	r3, #32
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	e001      	b.n	80057c6 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01e      	beq.n	800580a <osMailGet+0xca>
 80057cc:	4b15      	ldr	r3, [pc, #84]	@ (8005824 <osMailGet+0xe4>)
 80057ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	e015      	b.n	800580a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6858      	ldr	r0, [r3, #4]
 80057e2:	f107 0314 	add.w	r3, r7, #20
 80057e6:	3304      	adds	r3, #4
 80057e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ea:	4619      	mov	r1, r3
 80057ec:	f000 fbc8 	bl	8005f80 <xQueueReceive>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d102      	bne.n	80057fc <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80057f6:	2320      	movs	r3, #32
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e006      	b.n	800580a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80057fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <osMailGet+0xc6>
 8005802:	2300      	movs	r3, #0
 8005804:	e000      	b.n	8005808 <osMailGet+0xc8>
 8005806:	2340      	movs	r3, #64	@ 0x40
 8005808:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	461c      	mov	r4, r3
 800580e:	f107 0314 	add.w	r3, r7, #20
 8005812:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005816:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	372c      	adds	r7, #44	@ 0x2c
 800581e:	46bd      	mov	sp, r7
 8005820:	bd90      	pop	{r4, r7, pc}
 8005822:	bf00      	nop
 8005824:	e000ed04 	.word	0xe000ed04

08005828 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <osMailFree+0x14>
    return osErrorParameter;
 8005838:	2380      	movs	r3, #128	@ 0x80
 800583a:	e006      	b.n	800584a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff fdb2 	bl	80053ac <osPoolFree>
 8005848:	4603      	mov	r3, r0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f103 0208 	add.w	r2, r3, #8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f04f 32ff 	mov.w	r2, #4294967295
 800586a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f103 0208 	add.w	r2, r3, #8
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f103 0208 	add.w	r2, r3, #8
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d103      	bne.n	8005914 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	e00c      	b.n	800592e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3308      	adds	r3, #8
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	e002      	b.n	8005922 <vListInsert+0x2e>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	429a      	cmp	r2, r3
 800592c:	d2f6      	bcs.n	800591c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	601a      	str	r2, [r3, #0]
}
 800595a:	bf00      	nop
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005966:	b480      	push	{r7}
 8005968:	b085      	sub	sp, #20
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6892      	ldr	r2, [r2, #8]
 800597c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6852      	ldr	r2, [r2, #4]
 8005986:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	429a      	cmp	r2, r3
 8005990:	d103      	bne.n	800599a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	1e5a      	subs	r2, r3, #1
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
	...

080059bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10b      	bne.n	80059e8 <xQueueGenericReset+0x2c>
	__asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	60bb      	str	r3, [r7, #8]
}
 80059e2:	bf00      	nop
 80059e4:	bf00      	nop
 80059e6:	e7fd      	b.n	80059e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80059e8:	f001 fd7e 	bl	80074e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f4:	68f9      	ldr	r1, [r7, #12]
 80059f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	441a      	add	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005a1e:	fb01 f303 	mul.w	r3, r1, r3
 8005a22:	441a      	add	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	22ff      	movs	r2, #255	@ 0xff
 8005a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	22ff      	movs	r2, #255	@ 0xff
 8005a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d114      	bne.n	8005a68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d01a      	beq.n	8005a7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3310      	adds	r3, #16
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f001 f94c 	bl	8006ce8 <xTaskRemoveFromEventList>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d012      	beq.n	8005a7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a56:	4b0d      	ldr	r3, [pc, #52]	@ (8005a8c <xQueueGenericReset+0xd0>)
 8005a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	e009      	b.n	8005a7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3310      	adds	r3, #16
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fef0 	bl	8005852 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3324      	adds	r3, #36	@ 0x24
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff feeb 	bl	8005852 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a7c:	f001 fd66 	bl	800754c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a80:	2301      	movs	r3, #1
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	e000ed04 	.word	0xe000ed04

08005a90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08e      	sub	sp, #56	@ 0x38
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10b      	bne.n	8005abc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ab6:	bf00      	nop
 8005ab8:	bf00      	nop
 8005aba:	e7fd      	b.n	8005ab8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10b      	bne.n	8005ada <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	e7fd      	b.n	8005ad6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <xQueueGenericCreateStatic+0x56>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <xQueueGenericCreateStatic+0x5a>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <xQueueGenericCreateStatic+0x5c>
 8005aea:	2300      	movs	r3, #0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10b      	bne.n	8005b08 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	623b      	str	r3, [r7, #32]
}
 8005b02:	bf00      	nop
 8005b04:	bf00      	nop
 8005b06:	e7fd      	b.n	8005b04 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d102      	bne.n	8005b14 <xQueueGenericCreateStatic+0x84>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <xQueueGenericCreateStatic+0x88>
 8005b14:	2301      	movs	r3, #1
 8005b16:	e000      	b.n	8005b1a <xQueueGenericCreateStatic+0x8a>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10b      	bne.n	8005b36 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	61fb      	str	r3, [r7, #28]
}
 8005b30:	bf00      	nop
 8005b32:	bf00      	nop
 8005b34:	e7fd      	b.n	8005b32 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b36:	2348      	movs	r3, #72	@ 0x48
 8005b38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2b48      	cmp	r3, #72	@ 0x48
 8005b3e:	d00b      	beq.n	8005b58 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	61bb      	str	r3, [r7, #24]
}
 8005b52:	bf00      	nop
 8005b54:	bf00      	nop
 8005b56:	e7fd      	b.n	8005b54 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00d      	beq.n	8005b80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f840 	bl	8005c00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3730      	adds	r7, #48	@ 0x30
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b08a      	sub	sp, #40	@ 0x28
 8005b8e:	af02      	add	r7, sp, #8
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	4613      	mov	r3, r2
 8005b96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10b      	bne.n	8005bb6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	613b      	str	r3, [r7, #16]
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	e7fd      	b.n	8005bb2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	3348      	adds	r3, #72	@ 0x48
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f001 fdb1 	bl	800772c <pvPortMalloc>
 8005bca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d011      	beq.n	8005bf6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	3348      	adds	r3, #72	@ 0x48
 8005bda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005be4:	79fa      	ldrb	r2, [r7, #7]
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	4613      	mov	r3, r2
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f805 	bl	8005c00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
	}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d103      	bne.n	8005c1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	e002      	b.n	8005c22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c2e:	2101      	movs	r1, #1
 8005c30:	69b8      	ldr	r0, [r7, #24]
 8005c32:	f7ff fec3 	bl	80059bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c36:	bf00      	nop
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08e      	sub	sp, #56	@ 0x38
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10b      	bne.n	8005c74 <xQueueGenericSend+0x34>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <xQueueGenericSend+0x42>
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <xQueueGenericSend+0x46>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <xQueueGenericSend+0x48>
 8005c86:	2300      	movs	r3, #0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10b      	bne.n	8005ca4 <xQueueGenericSend+0x64>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c9e:	bf00      	nop
 8005ca0:	bf00      	nop
 8005ca2:	e7fd      	b.n	8005ca0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d103      	bne.n	8005cb2 <xQueueGenericSend+0x72>
 8005caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d101      	bne.n	8005cb6 <xQueueGenericSend+0x76>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <xQueueGenericSend+0x78>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10b      	bne.n	8005cd4 <xQueueGenericSend+0x94>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	623b      	str	r3, [r7, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	e7fd      	b.n	8005cd0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cd4:	f001 f9ce 	bl	8007074 <xTaskGetSchedulerState>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d102      	bne.n	8005ce4 <xQueueGenericSend+0xa4>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <xQueueGenericSend+0xa8>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e000      	b.n	8005cea <xQueueGenericSend+0xaa>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10b      	bne.n	8005d06 <xQueueGenericSend+0xc6>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	61fb      	str	r3, [r7, #28]
}
 8005d00:	bf00      	nop
 8005d02:	bf00      	nop
 8005d04:	e7fd      	b.n	8005d02 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d06:	f001 fbef 	bl	80074e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d302      	bcc.n	8005d1c <xQueueGenericSend+0xdc>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d129      	bne.n	8005d70 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	68b9      	ldr	r1, [r7, #8]
 8005d20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d22:	f000 fa91 	bl	8006248 <prvCopyDataToQueue>
 8005d26:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d010      	beq.n	8005d52 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d32:	3324      	adds	r3, #36	@ 0x24
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 ffd7 	bl	8006ce8 <xTaskRemoveFromEventList>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d013      	beq.n	8005d68 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d40:	4b3f      	ldr	r3, [pc, #252]	@ (8005e40 <xQueueGenericSend+0x200>)
 8005d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	e00a      	b.n	8005d68 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d58:	4b39      	ldr	r3, [pc, #228]	@ (8005e40 <xQueueGenericSend+0x200>)
 8005d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d68:	f001 fbf0 	bl	800754c <vPortExitCritical>
				return pdPASS;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e063      	b.n	8005e38 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d103      	bne.n	8005d7e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d76:	f001 fbe9 	bl	800754c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e05c      	b.n	8005e38 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d106      	bne.n	8005d92 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d84:	f107 0314 	add.w	r3, r7, #20
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f001 f811 	bl	8006db0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d92:	f001 fbdb 	bl	800754c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d96:	f000 fdb7 	bl	8006908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d9a:	f001 fba5 	bl	80074e8 <vPortEnterCritical>
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005da4:	b25b      	sxtb	r3, r3
 8005da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005daa:	d103      	bne.n	8005db4 <xQueueGenericSend+0x174>
 8005dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dba:	b25b      	sxtb	r3, r3
 8005dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc0:	d103      	bne.n	8005dca <xQueueGenericSend+0x18a>
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dca:	f001 fbbf 	bl	800754c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dce:	1d3a      	adds	r2, r7, #4
 8005dd0:	f107 0314 	add.w	r3, r7, #20
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f001 f800 	bl	8006ddc <xTaskCheckForTimeOut>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d124      	bne.n	8005e2c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005de2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005de4:	f000 fb28 	bl	8006438 <prvIsQueueFull>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d018      	beq.n	8005e20 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df0:	3310      	adds	r3, #16
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	4611      	mov	r1, r2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 ff50 	bl	8006c9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005dfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dfe:	f000 fab3 	bl	8006368 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e02:	f000 fd8f 	bl	8006924 <xTaskResumeAll>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f47f af7c 	bne.w	8005d06 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e40 <xQueueGenericSend+0x200>)
 8005e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	e772      	b.n	8005d06 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e22:	f000 faa1 	bl	8006368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e26:	f000 fd7d 	bl	8006924 <xTaskResumeAll>
 8005e2a:	e76c      	b.n	8005d06 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e2e:	f000 fa9b 	bl	8006368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e32:	f000 fd77 	bl	8006924 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3738      	adds	r7, #56	@ 0x38
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	e000ed04 	.word	0xe000ed04

08005e44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b090      	sub	sp, #64	@ 0x40
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10b      	bne.n	8005e74 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	e7fd      	b.n	8005e70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d103      	bne.n	8005e82 <xQueueGenericSendFromISR+0x3e>
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <xQueueGenericSendFromISR+0x42>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <xQueueGenericSendFromISR+0x44>
 8005e86:	2300      	movs	r3, #0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10b      	bne.n	8005ea4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	e7fd      	b.n	8005ea0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d103      	bne.n	8005eb2 <xQueueGenericSendFromISR+0x6e>
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d101      	bne.n	8005eb6 <xQueueGenericSendFromISR+0x72>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e000      	b.n	8005eb8 <xQueueGenericSendFromISR+0x74>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10b      	bne.n	8005ed4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	623b      	str	r3, [r7, #32]
}
 8005ece:	bf00      	nop
 8005ed0:	bf00      	nop
 8005ed2:	e7fd      	b.n	8005ed0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ed4:	f001 fbe8 	bl	80076a8 <vPortValidateInterruptPriority>
	__asm volatile
 8005ed8:	f3ef 8211 	mrs	r2, BASEPRI
 8005edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	61fa      	str	r2, [r7, #28]
 8005eee:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ef2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d302      	bcc.n	8005f06 <xQueueGenericSendFromISR+0xc2>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d12f      	bne.n	8005f66 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005f1c:	f000 f994 	bl	8006248 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f20:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d112      	bne.n	8005f50 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d016      	beq.n	8005f60 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f34:	3324      	adds	r3, #36	@ 0x24
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fed6 	bl	8006ce8 <xTaskRemoveFromEventList>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00e      	beq.n	8005f60 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	e007      	b.n	8005f60 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f54:	3301      	adds	r3, #1
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	b25a      	sxtb	r2, r3
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005f60:	2301      	movs	r3, #1
 8005f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005f64:	e001      	b.n	8005f6a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f6c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f383 8811 	msr	BASEPRI, r3
}
 8005f74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3740      	adds	r7, #64	@ 0x40
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08c      	sub	sp, #48	@ 0x30
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10b      	bne.n	8005fb2 <xQueueReceive+0x32>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	623b      	str	r3, [r7, #32]
}
 8005fac:	bf00      	nop
 8005fae:	bf00      	nop
 8005fb0:	e7fd      	b.n	8005fae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d103      	bne.n	8005fc0 <xQueueReceive+0x40>
 8005fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <xQueueReceive+0x44>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <xQueueReceive+0x46>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10b      	bne.n	8005fe2 <xQueueReceive+0x62>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	61fb      	str	r3, [r7, #28]
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	e7fd      	b.n	8005fde <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fe2:	f001 f847 	bl	8007074 <xTaskGetSchedulerState>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <xQueueReceive+0x72>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <xQueueReceive+0x76>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <xQueueReceive+0x78>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10b      	bne.n	8006014 <xQueueReceive+0x94>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	61bb      	str	r3, [r7, #24]
}
 800600e:	bf00      	nop
 8006010:	bf00      	nop
 8006012:	e7fd      	b.n	8006010 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006014:	f001 fa68 	bl	80074e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800601e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01f      	beq.n	8006064 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006028:	f000 f978 	bl	800631c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	1e5a      	subs	r2, r3, #1
 8006030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006032:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00f      	beq.n	800605c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800603c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603e:	3310      	adds	r3, #16
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fe51 	bl	8006ce8 <xTaskRemoveFromEventList>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800604c:	4b3c      	ldr	r3, [pc, #240]	@ (8006140 <xQueueReceive+0x1c0>)
 800604e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800605c:	f001 fa76 	bl	800754c <vPortExitCritical>
				return pdPASS;
 8006060:	2301      	movs	r3, #1
 8006062:	e069      	b.n	8006138 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d103      	bne.n	8006072 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800606a:	f001 fa6f 	bl	800754c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800606e:	2300      	movs	r3, #0
 8006070:	e062      	b.n	8006138 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d106      	bne.n	8006086 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006078:	f107 0310 	add.w	r3, r7, #16
 800607c:	4618      	mov	r0, r3
 800607e:	f000 fe97 	bl	8006db0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006082:	2301      	movs	r3, #1
 8006084:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006086:	f001 fa61 	bl	800754c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800608a:	f000 fc3d 	bl	8006908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800608e:	f001 fa2b 	bl	80074e8 <vPortEnterCritical>
 8006092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006098:	b25b      	sxtb	r3, r3
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	d103      	bne.n	80060a8 <xQueueReceive+0x128>
 80060a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060ae:	b25b      	sxtb	r3, r3
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d103      	bne.n	80060be <xQueueReceive+0x13e>
 80060b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060be:	f001 fa45 	bl	800754c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060c2:	1d3a      	adds	r2, r7, #4
 80060c4:	f107 0310 	add.w	r3, r7, #16
 80060c8:	4611      	mov	r1, r2
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fe86 	bl	8006ddc <xTaskCheckForTimeOut>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d123      	bne.n	800611e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060d8:	f000 f998 	bl	800640c <prvIsQueueEmpty>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d017      	beq.n	8006112 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e4:	3324      	adds	r3, #36	@ 0x24
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	4611      	mov	r1, r2
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fdd6 	bl	8006c9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060f2:	f000 f939 	bl	8006368 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060f6:	f000 fc15 	bl	8006924 <xTaskResumeAll>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d189      	bne.n	8006014 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006100:	4b0f      	ldr	r3, [pc, #60]	@ (8006140 <xQueueReceive+0x1c0>)
 8006102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	e780      	b.n	8006014 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006114:	f000 f928 	bl	8006368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006118:	f000 fc04 	bl	8006924 <xTaskResumeAll>
 800611c:	e77a      	b.n	8006014 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800611e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006120:	f000 f922 	bl	8006368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006124:	f000 fbfe 	bl	8006924 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800612a:	f000 f96f 	bl	800640c <prvIsQueueEmpty>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	f43f af6f 	beq.w	8006014 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006136:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006138:	4618      	mov	r0, r3
 800613a:	3730      	adds	r7, #48	@ 0x30
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	e000ed04 	.word	0xe000ed04

08006144 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08e      	sub	sp, #56	@ 0x38
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	623b      	str	r3, [r7, #32]
}
 800616c:	bf00      	nop
 800616e:	bf00      	nop
 8006170:	e7fd      	b.n	800616e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d103      	bne.n	8006180 <xQueueReceiveFromISR+0x3c>
 8006178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <xQueueReceiveFromISR+0x40>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <xQueueReceiveFromISR+0x42>
 8006184:	2300      	movs	r3, #0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10b      	bne.n	80061a2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	61fb      	str	r3, [r7, #28]
}
 800619c:	bf00      	nop
 800619e:	bf00      	nop
 80061a0:	e7fd      	b.n	800619e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061a2:	f001 fa81 	bl	80076a8 <vPortValidateInterruptPriority>
	__asm volatile
 80061a6:	f3ef 8211 	mrs	r2, BASEPRI
 80061aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	61ba      	str	r2, [r7, #24]
 80061bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80061be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d02f      	beq.n	800622e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80061ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061dc:	f000 f89e 	bl	800631c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e2:	1e5a      	subs	r2, r3, #1
 80061e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80061e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f0:	d112      	bne.n	8006218 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d016      	beq.n	8006228 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fc:	3310      	adds	r3, #16
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fd72 	bl	8006ce8 <xTaskRemoveFromEventList>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00e      	beq.n	8006228 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00b      	beq.n	8006228 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	e007      	b.n	8006228 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800621c:	3301      	adds	r3, #1
 800621e:	b2db      	uxtb	r3, r3
 8006220:	b25a      	sxtb	r2, r3
 8006222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006228:	2301      	movs	r3, #1
 800622a:	637b      	str	r3, [r7, #52]	@ 0x34
 800622c:	e001      	b.n	8006232 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800622e:	2300      	movs	r3, #0
 8006230:	637b      	str	r3, [r7, #52]	@ 0x34
 8006232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006234:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f383 8811 	msr	BASEPRI, r3
}
 800623c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800623e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006240:	4618      	mov	r0, r3
 8006242:	3738      	adds	r7, #56	@ 0x38
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10d      	bne.n	8006282 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d14d      	bne.n	800630a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	4618      	mov	r0, r3
 8006274:	f000 ff1c 	bl	80070b0 <xTaskPriorityDisinherit>
 8006278:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	609a      	str	r2, [r3, #8]
 8006280:	e043      	b.n	800630a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d119      	bne.n	80062bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6858      	ldr	r0, [r3, #4]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006290:	461a      	mov	r2, r3
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	f001 fcfc 	bl	8007c90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a0:	441a      	add	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d32b      	bcc.n	800630a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	605a      	str	r2, [r3, #4]
 80062ba:	e026      	b.n	800630a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	68d8      	ldr	r0, [r3, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c4:	461a      	mov	r2, r3
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	f001 fce2 	bl	8007c90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d4:	425b      	negs	r3, r3
 80062d6:	441a      	add	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d207      	bcs.n	80062f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f0:	425b      	negs	r3, r3
 80062f2:	441a      	add	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d105      	bne.n	800630a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	3b01      	subs	r3, #1
 8006308:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006312:	697b      	ldr	r3, [r7, #20]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632a:	2b00      	cmp	r3, #0
 800632c:	d018      	beq.n	8006360 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006336:	441a      	add	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	429a      	cmp	r2, r3
 8006346:	d303      	bcc.n	8006350 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68d9      	ldr	r1, [r3, #12]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	461a      	mov	r2, r3
 800635a:	6838      	ldr	r0, [r7, #0]
 800635c:	f001 fc98 	bl	8007c90 <memcpy>
	}
}
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006370:	f001 f8ba 	bl	80074e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800637a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800637c:	e011      	b.n	80063a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006382:	2b00      	cmp	r3, #0
 8006384:	d012      	beq.n	80063ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3324      	adds	r3, #36	@ 0x24
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fcac 	bl	8006ce8 <xTaskRemoveFromEventList>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006396:	f000 fd85 	bl	8006ea4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	3b01      	subs	r3, #1
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	dce9      	bgt.n	800637e <prvUnlockQueue+0x16>
 80063aa:	e000      	b.n	80063ae <prvUnlockQueue+0x46>
					break;
 80063ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	22ff      	movs	r2, #255	@ 0xff
 80063b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80063b6:	f001 f8c9 	bl	800754c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80063ba:	f001 f895 	bl	80074e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063c6:	e011      	b.n	80063ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d012      	beq.n	80063f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3310      	adds	r3, #16
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fc87 	bl	8006ce8 <xTaskRemoveFromEventList>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80063e0:	f000 fd60 	bl	8006ea4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	dce9      	bgt.n	80063c8 <prvUnlockQueue+0x60>
 80063f4:	e000      	b.n	80063f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	22ff      	movs	r2, #255	@ 0xff
 80063fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006400:	f001 f8a4 	bl	800754c <vPortExitCritical>
}
 8006404:	bf00      	nop
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006414:	f001 f868 	bl	80074e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641c:	2b00      	cmp	r3, #0
 800641e:	d102      	bne.n	8006426 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006420:	2301      	movs	r3, #1
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e001      	b.n	800642a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006426:	2300      	movs	r3, #0
 8006428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800642a:	f001 f88f 	bl	800754c <vPortExitCritical>

	return xReturn;
 800642e:	68fb      	ldr	r3, [r7, #12]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006440:	f001 f852 	bl	80074e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644c:	429a      	cmp	r2, r3
 800644e:	d102      	bne.n	8006456 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006450:	2301      	movs	r3, #1
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e001      	b.n	800645a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800645a:	f001 f877 	bl	800754c <vPortExitCritical>

	return xReturn;
 800645e:	68fb      	ldr	r3, [r7, #12]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08e      	sub	sp, #56	@ 0x38
 800646c:	af04      	add	r7, sp, #16
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10b      	bne.n	8006494 <xTaskCreateStatic+0x2c>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	623b      	str	r3, [r7, #32]
}
 800648e:	bf00      	nop
 8006490:	bf00      	nop
 8006492:	e7fd      	b.n	8006490 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	61fb      	str	r3, [r7, #28]
}
 80064ac:	bf00      	nop
 80064ae:	bf00      	nop
 80064b0:	e7fd      	b.n	80064ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064b2:	23a0      	movs	r3, #160	@ 0xa0
 80064b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2ba0      	cmp	r3, #160	@ 0xa0
 80064ba:	d00b      	beq.n	80064d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	61bb      	str	r3, [r7, #24]
}
 80064ce:	bf00      	nop
 80064d0:	bf00      	nop
 80064d2:	e7fd      	b.n	80064d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01e      	beq.n	800651a <xTaskCreateStatic+0xb2>
 80064dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d01b      	beq.n	800651a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064f4:	2300      	movs	r3, #0
 80064f6:	9303      	str	r3, [sp, #12]
 80064f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fa:	9302      	str	r3, [sp, #8]
 80064fc:	f107 0314 	add.w	r3, r7, #20
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f851 	bl	80065b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006512:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006514:	f000 f8ee 	bl	80066f4 <prvAddNewTaskToReadyList>
 8006518:	e001      	b.n	800651e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800651e:	697b      	ldr	r3, [r7, #20]
	}
 8006520:	4618      	mov	r0, r3
 8006522:	3728      	adds	r7, #40	@ 0x28
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006528:	b580      	push	{r7, lr}
 800652a:	b08c      	sub	sp, #48	@ 0x30
 800652c:	af04      	add	r7, sp, #16
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	4613      	mov	r3, r2
 8006536:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006538:	88fb      	ldrh	r3, [r7, #6]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4618      	mov	r0, r3
 800653e:	f001 f8f5 	bl	800772c <pvPortMalloc>
 8006542:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00e      	beq.n	8006568 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800654a:	20a0      	movs	r0, #160	@ 0xa0
 800654c:	f001 f8ee 	bl	800772c <pvPortMalloc>
 8006550:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	631a      	str	r2, [r3, #48]	@ 0x30
 800655e:	e005      	b.n	800656c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006560:	6978      	ldr	r0, [r7, #20]
 8006562:	f001 f9b1 	bl	80078c8 <vPortFree>
 8006566:	e001      	b.n	800656c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006568:	2300      	movs	r3, #0
 800656a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d017      	beq.n	80065a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800657a:	88fa      	ldrh	r2, [r7, #6]
 800657c:	2300      	movs	r3, #0
 800657e:	9303      	str	r3, [sp, #12]
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	9302      	str	r3, [sp, #8]
 8006584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006586:	9301      	str	r3, [sp, #4]
 8006588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f80f 	bl	80065b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006596:	69f8      	ldr	r0, [r7, #28]
 8006598:	f000 f8ac 	bl	80066f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800659c:	2301      	movs	r3, #1
 800659e:	61bb      	str	r3, [r7, #24]
 80065a0:	e002      	b.n	80065a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065a2:	f04f 33ff 	mov.w	r3, #4294967295
 80065a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065a8:	69bb      	ldr	r3, [r7, #24]
	}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3720      	adds	r7, #32
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
	...

080065b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065cc:	3b01      	subs	r3, #1
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	f023 0307 	bic.w	r3, r3, #7
 80065da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00b      	beq.n	80065fe <prvInitialiseNewTask+0x4a>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	617b      	str	r3, [r7, #20]
}
 80065f8:	bf00      	nop
 80065fa:	bf00      	nop
 80065fc:	e7fd      	b.n	80065fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01f      	beq.n	8006644 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006604:	2300      	movs	r3, #0
 8006606:	61fb      	str	r3, [r7, #28]
 8006608:	e012      	b.n	8006630 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	4413      	add	r3, r2
 8006610:	7819      	ldrb	r1, [r3, #0]
 8006612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	4413      	add	r3, r2
 8006618:	3334      	adds	r3, #52	@ 0x34
 800661a:	460a      	mov	r2, r1
 800661c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	4413      	add	r3, r2
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d006      	beq.n	8006638 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	3301      	adds	r3, #1
 800662e:	61fb      	str	r3, [r7, #28]
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	2b0f      	cmp	r3, #15
 8006634:	d9e9      	bls.n	800660a <prvInitialiseNewTask+0x56>
 8006636:	e000      	b.n	800663a <prvInitialiseNewTask+0x86>
			{
				break;
 8006638:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800663a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006642:	e003      	b.n	800664c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800664c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664e:	2b06      	cmp	r3, #6
 8006650:	d901      	bls.n	8006656 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006652:	2306      	movs	r3, #6
 8006654:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800665a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800665c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006660:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006664:	2200      	movs	r2, #0
 8006666:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666a:	3304      	adds	r3, #4
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff f910 	bl	8005892 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006674:	3318      	adds	r3, #24
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff f90b 	bl	8005892 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800667c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006680:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006684:	f1c3 0207 	rsb	r2, r3, #7
 8006688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800668c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006690:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006694:	2200      	movs	r2, #0
 8006696:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800669a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669c:	2200      	movs	r2, #0
 800669e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a4:	334c      	adds	r3, #76	@ 0x4c
 80066a6:	224c      	movs	r2, #76	@ 0x4c
 80066a8:	2100      	movs	r1, #0
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 fa5e 	bl	8007b6c <memset>
 80066b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b2:	4a0d      	ldr	r2, [pc, #52]	@ (80066e8 <prvInitialiseNewTask+0x134>)
 80066b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80066b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b8:	4a0c      	ldr	r2, [pc, #48]	@ (80066ec <prvInitialiseNewTask+0x138>)
 80066ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80066bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066be:	4a0c      	ldr	r2, [pc, #48]	@ (80066f0 <prvInitialiseNewTask+0x13c>)
 80066c0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	68f9      	ldr	r1, [r7, #12]
 80066c6:	69b8      	ldr	r0, [r7, #24]
 80066c8:	f000 fde0 	bl	800728c <pxPortInitialiseStack>
 80066cc:	4602      	mov	r2, r0
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80066d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066de:	bf00      	nop
 80066e0:	3720      	adds	r7, #32
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	2000438c 	.word	0x2000438c
 80066ec:	200043f4 	.word	0x200043f4
 80066f0:	2000445c 	.word	0x2000445c

080066f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066fc:	f000 fef4 	bl	80074e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006700:	4b2a      	ldr	r3, [pc, #168]	@ (80067ac <prvAddNewTaskToReadyList+0xb8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3301      	adds	r3, #1
 8006706:	4a29      	ldr	r2, [pc, #164]	@ (80067ac <prvAddNewTaskToReadyList+0xb8>)
 8006708:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800670a:	4b29      	ldr	r3, [pc, #164]	@ (80067b0 <prvAddNewTaskToReadyList+0xbc>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d109      	bne.n	8006726 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006712:	4a27      	ldr	r2, [pc, #156]	@ (80067b0 <prvAddNewTaskToReadyList+0xbc>)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006718:	4b24      	ldr	r3, [pc, #144]	@ (80067ac <prvAddNewTaskToReadyList+0xb8>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d110      	bne.n	8006742 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006720:	f000 fbe4 	bl	8006eec <prvInitialiseTaskLists>
 8006724:	e00d      	b.n	8006742 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006726:	4b23      	ldr	r3, [pc, #140]	@ (80067b4 <prvAddNewTaskToReadyList+0xc0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d109      	bne.n	8006742 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800672e:	4b20      	ldr	r3, [pc, #128]	@ (80067b0 <prvAddNewTaskToReadyList+0xbc>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006738:	429a      	cmp	r2, r3
 800673a:	d802      	bhi.n	8006742 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800673c:	4a1c      	ldr	r2, [pc, #112]	@ (80067b0 <prvAddNewTaskToReadyList+0xbc>)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006742:	4b1d      	ldr	r3, [pc, #116]	@ (80067b8 <prvAddNewTaskToReadyList+0xc4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3301      	adds	r3, #1
 8006748:	4a1b      	ldr	r2, [pc, #108]	@ (80067b8 <prvAddNewTaskToReadyList+0xc4>)
 800674a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006750:	2201      	movs	r2, #1
 8006752:	409a      	lsls	r2, r3
 8006754:	4b19      	ldr	r3, [pc, #100]	@ (80067bc <prvAddNewTaskToReadyList+0xc8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4313      	orrs	r3, r2
 800675a:	4a18      	ldr	r2, [pc, #96]	@ (80067bc <prvAddNewTaskToReadyList+0xc8>)
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4a15      	ldr	r2, [pc, #84]	@ (80067c0 <prvAddNewTaskToReadyList+0xcc>)
 800676c:	441a      	add	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3304      	adds	r3, #4
 8006772:	4619      	mov	r1, r3
 8006774:	4610      	mov	r0, r2
 8006776:	f7ff f899 	bl	80058ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800677a:	f000 fee7 	bl	800754c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800677e:	4b0d      	ldr	r3, [pc, #52]	@ (80067b4 <prvAddNewTaskToReadyList+0xc0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00e      	beq.n	80067a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006786:	4b0a      	ldr	r3, [pc, #40]	@ (80067b0 <prvAddNewTaskToReadyList+0xbc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006790:	429a      	cmp	r2, r3
 8006792:	d207      	bcs.n	80067a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006794:	4b0b      	ldr	r3, [pc, #44]	@ (80067c4 <prvAddNewTaskToReadyList+0xd0>)
 8006796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067a4:	bf00      	nop
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20000738 	.word	0x20000738
 80067b0:	20000638 	.word	0x20000638
 80067b4:	20000744 	.word	0x20000744
 80067b8:	20000754 	.word	0x20000754
 80067bc:	20000740 	.word	0x20000740
 80067c0:	2000063c 	.word	0x2000063c
 80067c4:	e000ed04 	.word	0xe000ed04

080067c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067d0:	2300      	movs	r3, #0
 80067d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d018      	beq.n	800680c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067da:	4b14      	ldr	r3, [pc, #80]	@ (800682c <vTaskDelay+0x64>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00b      	beq.n	80067fa <vTaskDelay+0x32>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	60bb      	str	r3, [r7, #8]
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop
 80067f8:	e7fd      	b.n	80067f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80067fa:	f000 f885 	bl	8006908 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067fe:	2100      	movs	r1, #0
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fcdd 	bl	80071c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006806:	f000 f88d 	bl	8006924 <xTaskResumeAll>
 800680a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d107      	bne.n	8006822 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006812:	4b07      	ldr	r3, [pc, #28]	@ (8006830 <vTaskDelay+0x68>)
 8006814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006822:	bf00      	nop
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000760 	.word	0x20000760
 8006830:	e000ed04 	.word	0xe000ed04

08006834 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08a      	sub	sp, #40	@ 0x28
 8006838:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800683a:	2300      	movs	r3, #0
 800683c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800683e:	2300      	movs	r3, #0
 8006840:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006842:	463a      	mov	r2, r7
 8006844:	1d39      	adds	r1, r7, #4
 8006846:	f107 0308 	add.w	r3, r7, #8
 800684a:	4618      	mov	r0, r3
 800684c:	f7f9 feae 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	9202      	str	r2, [sp, #8]
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	2300      	movs	r3, #0
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	2300      	movs	r3, #0
 8006860:	460a      	mov	r2, r1
 8006862:	4921      	ldr	r1, [pc, #132]	@ (80068e8 <vTaskStartScheduler+0xb4>)
 8006864:	4821      	ldr	r0, [pc, #132]	@ (80068ec <vTaskStartScheduler+0xb8>)
 8006866:	f7ff fdff 	bl	8006468 <xTaskCreateStatic>
 800686a:	4603      	mov	r3, r0
 800686c:	4a20      	ldr	r2, [pc, #128]	@ (80068f0 <vTaskStartScheduler+0xbc>)
 800686e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006870:	4b1f      	ldr	r3, [pc, #124]	@ (80068f0 <vTaskStartScheduler+0xbc>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006878:	2301      	movs	r3, #1
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	e001      	b.n	8006882 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800687e:	2300      	movs	r3, #0
 8006880:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d11b      	bne.n	80068c0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	613b      	str	r3, [r7, #16]
}
 800689a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800689c:	4b15      	ldr	r3, [pc, #84]	@ (80068f4 <vTaskStartScheduler+0xc0>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	334c      	adds	r3, #76	@ 0x4c
 80068a2:	4a15      	ldr	r2, [pc, #84]	@ (80068f8 <vTaskStartScheduler+0xc4>)
 80068a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068a6:	4b15      	ldr	r3, [pc, #84]	@ (80068fc <vTaskStartScheduler+0xc8>)
 80068a8:	f04f 32ff 	mov.w	r2, #4294967295
 80068ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068ae:	4b14      	ldr	r3, [pc, #80]	@ (8006900 <vTaskStartScheduler+0xcc>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068b4:	4b13      	ldr	r3, [pc, #76]	@ (8006904 <vTaskStartScheduler+0xd0>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068ba:	f000 fd71 	bl	80073a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068be:	e00f      	b.n	80068e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c6:	d10b      	bne.n	80068e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	60fb      	str	r3, [r7, #12]
}
 80068da:	bf00      	nop
 80068dc:	bf00      	nop
 80068de:	e7fd      	b.n	80068dc <vTaskStartScheduler+0xa8>
}
 80068e0:	bf00      	nop
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	08008714 	.word	0x08008714
 80068ec:	08006ebd 	.word	0x08006ebd
 80068f0:	2000075c 	.word	0x2000075c
 80068f4:	20000638 	.word	0x20000638
 80068f8:	20000074 	.word	0x20000074
 80068fc:	20000758 	.word	0x20000758
 8006900:	20000744 	.word	0x20000744
 8006904:	2000073c 	.word	0x2000073c

08006908 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800690c:	4b04      	ldr	r3, [pc, #16]	@ (8006920 <vTaskSuspendAll+0x18>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3301      	adds	r3, #1
 8006912:	4a03      	ldr	r2, [pc, #12]	@ (8006920 <vTaskSuspendAll+0x18>)
 8006914:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006916:	bf00      	nop
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	20000760 	.word	0x20000760

08006924 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800692e:	2300      	movs	r3, #0
 8006930:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006932:	4b42      	ldr	r3, [pc, #264]	@ (8006a3c <xTaskResumeAll+0x118>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10b      	bne.n	8006952 <xTaskResumeAll+0x2e>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	603b      	str	r3, [r7, #0]
}
 800694c:	bf00      	nop
 800694e:	bf00      	nop
 8006950:	e7fd      	b.n	800694e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006952:	f000 fdc9 	bl	80074e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006956:	4b39      	ldr	r3, [pc, #228]	@ (8006a3c <xTaskResumeAll+0x118>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3b01      	subs	r3, #1
 800695c:	4a37      	ldr	r2, [pc, #220]	@ (8006a3c <xTaskResumeAll+0x118>)
 800695e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006960:	4b36      	ldr	r3, [pc, #216]	@ (8006a3c <xTaskResumeAll+0x118>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d161      	bne.n	8006a2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006968:	4b35      	ldr	r3, [pc, #212]	@ (8006a40 <xTaskResumeAll+0x11c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d05d      	beq.n	8006a2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006970:	e02e      	b.n	80069d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006972:	4b34      	ldr	r3, [pc, #208]	@ (8006a44 <xTaskResumeAll+0x120>)
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3318      	adds	r3, #24
 800697e:	4618      	mov	r0, r3
 8006980:	f7fe fff1 	bl	8005966 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3304      	adds	r3, #4
 8006988:	4618      	mov	r0, r3
 800698a:	f7fe ffec 	bl	8005966 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006992:	2201      	movs	r2, #1
 8006994:	409a      	lsls	r2, r3
 8006996:	4b2c      	ldr	r3, [pc, #176]	@ (8006a48 <xTaskResumeAll+0x124>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4313      	orrs	r3, r2
 800699c:	4a2a      	ldr	r2, [pc, #168]	@ (8006a48 <xTaskResumeAll+0x124>)
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069a4:	4613      	mov	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4a27      	ldr	r2, [pc, #156]	@ (8006a4c <xTaskResumeAll+0x128>)
 80069ae:	441a      	add	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3304      	adds	r3, #4
 80069b4:	4619      	mov	r1, r3
 80069b6:	4610      	mov	r0, r2
 80069b8:	f7fe ff78 	bl	80058ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c0:	4b23      	ldr	r3, [pc, #140]	@ (8006a50 <xTaskResumeAll+0x12c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d302      	bcc.n	80069d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80069ca:	4b22      	ldr	r3, [pc, #136]	@ (8006a54 <xTaskResumeAll+0x130>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006a44 <xTaskResumeAll+0x120>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1cc      	bne.n	8006972 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069de:	f000 fb29 	bl	8007034 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80069e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a58 <xTaskResumeAll+0x134>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d010      	beq.n	8006a10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069ee:	f000 f837 	bl	8006a60 <xTaskIncrementTick>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80069f8:	4b16      	ldr	r3, [pc, #88]	@ (8006a54 <xTaskResumeAll+0x130>)
 80069fa:	2201      	movs	r2, #1
 80069fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1f1      	bne.n	80069ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006a0a:	4b13      	ldr	r3, [pc, #76]	@ (8006a58 <xTaskResumeAll+0x134>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a10:	4b10      	ldr	r3, [pc, #64]	@ (8006a54 <xTaskResumeAll+0x130>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d009      	beq.n	8006a2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006a5c <xTaskResumeAll+0x138>)
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a2c:	f000 fd8e 	bl	800754c <vPortExitCritical>

	return xAlreadyYielded;
 8006a30:	68bb      	ldr	r3, [r7, #8]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000760 	.word	0x20000760
 8006a40:	20000738 	.word	0x20000738
 8006a44:	200006f8 	.word	0x200006f8
 8006a48:	20000740 	.word	0x20000740
 8006a4c:	2000063c 	.word	0x2000063c
 8006a50:	20000638 	.word	0x20000638
 8006a54:	2000074c 	.word	0x2000074c
 8006a58:	20000748 	.word	0x20000748
 8006a5c:	e000ed04 	.word	0xe000ed04

08006a60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a66:	2300      	movs	r3, #0
 8006a68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a6a:	4b4f      	ldr	r3, [pc, #316]	@ (8006ba8 <xTaskIncrementTick+0x148>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f040 808f 	bne.w	8006b92 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a74:	4b4d      	ldr	r3, [pc, #308]	@ (8006bac <xTaskIncrementTick+0x14c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a7c:	4a4b      	ldr	r2, [pc, #300]	@ (8006bac <xTaskIncrementTick+0x14c>)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d121      	bne.n	8006acc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a88:	4b49      	ldr	r3, [pc, #292]	@ (8006bb0 <xTaskIncrementTick+0x150>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00b      	beq.n	8006aaa <xTaskIncrementTick+0x4a>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	603b      	str	r3, [r7, #0]
}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop
 8006aa8:	e7fd      	b.n	8006aa6 <xTaskIncrementTick+0x46>
 8006aaa:	4b41      	ldr	r3, [pc, #260]	@ (8006bb0 <xTaskIncrementTick+0x150>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	4b40      	ldr	r3, [pc, #256]	@ (8006bb4 <xTaskIncrementTick+0x154>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a3e      	ldr	r2, [pc, #248]	@ (8006bb0 <xTaskIncrementTick+0x150>)
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	4a3e      	ldr	r2, [pc, #248]	@ (8006bb4 <xTaskIncrementTick+0x154>)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	4b3e      	ldr	r3, [pc, #248]	@ (8006bb8 <xTaskIncrementTick+0x158>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	4a3c      	ldr	r2, [pc, #240]	@ (8006bb8 <xTaskIncrementTick+0x158>)
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	f000 fab4 	bl	8007034 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006acc:	4b3b      	ldr	r3, [pc, #236]	@ (8006bbc <xTaskIncrementTick+0x15c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d348      	bcc.n	8006b68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ad6:	4b36      	ldr	r3, [pc, #216]	@ (8006bb0 <xTaskIncrementTick+0x150>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae0:	4b36      	ldr	r3, [pc, #216]	@ (8006bbc <xTaskIncrementTick+0x15c>)
 8006ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae6:	601a      	str	r2, [r3, #0]
					break;
 8006ae8:	e03e      	b.n	8006b68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aea:	4b31      	ldr	r3, [pc, #196]	@ (8006bb0 <xTaskIncrementTick+0x150>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d203      	bcs.n	8006b0a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b02:	4a2e      	ldr	r2, [pc, #184]	@ (8006bbc <xTaskIncrementTick+0x15c>)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b08:	e02e      	b.n	8006b68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe ff29 	bl	8005966 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d004      	beq.n	8006b26 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	3318      	adds	r3, #24
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe ff20 	bl	8005966 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	409a      	lsls	r2, r3
 8006b2e:	4b24      	ldr	r3, [pc, #144]	@ (8006bc0 <xTaskIncrementTick+0x160>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	4a22      	ldr	r2, [pc, #136]	@ (8006bc0 <xTaskIncrementTick+0x160>)
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4a1f      	ldr	r2, [pc, #124]	@ (8006bc4 <xTaskIncrementTick+0x164>)
 8006b46:	441a      	add	r2, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	f7fe feac 	bl	80058ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b58:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc8 <xTaskIncrementTick+0x168>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d3b9      	bcc.n	8006ad6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006b62:	2301      	movs	r3, #1
 8006b64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b66:	e7b6      	b.n	8006ad6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b68:	4b17      	ldr	r3, [pc, #92]	@ (8006bc8 <xTaskIncrementTick+0x168>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b6e:	4915      	ldr	r1, [pc, #84]	@ (8006bc4 <xTaskIncrementTick+0x164>)
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	440b      	add	r3, r1
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d901      	bls.n	8006b84 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006b80:	2301      	movs	r3, #1
 8006b82:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b84:	4b11      	ldr	r3, [pc, #68]	@ (8006bcc <xTaskIncrementTick+0x16c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d007      	beq.n	8006b9c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	e004      	b.n	8006b9c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b92:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd0 <xTaskIncrementTick+0x170>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3301      	adds	r3, #1
 8006b98:	4a0d      	ldr	r2, [pc, #52]	@ (8006bd0 <xTaskIncrementTick+0x170>)
 8006b9a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b9c:	697b      	ldr	r3, [r7, #20]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000760 	.word	0x20000760
 8006bac:	2000073c 	.word	0x2000073c
 8006bb0:	200006f0 	.word	0x200006f0
 8006bb4:	200006f4 	.word	0x200006f4
 8006bb8:	20000750 	.word	0x20000750
 8006bbc:	20000758 	.word	0x20000758
 8006bc0:	20000740 	.word	0x20000740
 8006bc4:	2000063c 	.word	0x2000063c
 8006bc8:	20000638 	.word	0x20000638
 8006bcc:	2000074c 	.word	0x2000074c
 8006bd0:	20000748 	.word	0x20000748

08006bd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bda:	4b2a      	ldr	r3, [pc, #168]	@ (8006c84 <vTaskSwitchContext+0xb0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006be2:	4b29      	ldr	r3, [pc, #164]	@ (8006c88 <vTaskSwitchContext+0xb4>)
 8006be4:	2201      	movs	r2, #1
 8006be6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006be8:	e045      	b.n	8006c76 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006bea:	4b27      	ldr	r3, [pc, #156]	@ (8006c88 <vTaskSwitchContext+0xb4>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf0:	4b26      	ldr	r3, [pc, #152]	@ (8006c8c <vTaskSwitchContext+0xb8>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	fab3 f383 	clz	r3, r3
 8006bfc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006bfe:	7afb      	ldrb	r3, [r7, #11]
 8006c00:	f1c3 031f 	rsb	r3, r3, #31
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	4922      	ldr	r1, [pc, #136]	@ (8006c90 <vTaskSwitchContext+0xbc>)
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	440b      	add	r3, r1
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10b      	bne.n	8006c32 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	607b      	str	r3, [r7, #4]
}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	e7fd      	b.n	8006c2e <vTaskSwitchContext+0x5a>
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4a14      	ldr	r2, [pc, #80]	@ (8006c90 <vTaskSwitchContext+0xbc>)
 8006c3e:	4413      	add	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	605a      	str	r2, [r3, #4]
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	3308      	adds	r3, #8
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d104      	bne.n	8006c62 <vTaskSwitchContext+0x8e>
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	605a      	str	r2, [r3, #4]
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	4a0a      	ldr	r2, [pc, #40]	@ (8006c94 <vTaskSwitchContext+0xc0>)
 8006c6a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c6c:	4b09      	ldr	r3, [pc, #36]	@ (8006c94 <vTaskSwitchContext+0xc0>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	334c      	adds	r3, #76	@ 0x4c
 8006c72:	4a09      	ldr	r2, [pc, #36]	@ (8006c98 <vTaskSwitchContext+0xc4>)
 8006c74:	6013      	str	r3, [r2, #0]
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20000760 	.word	0x20000760
 8006c88:	2000074c 	.word	0x2000074c
 8006c8c:	20000740 	.word	0x20000740
 8006c90:	2000063c 	.word	0x2000063c
 8006c94:	20000638 	.word	0x20000638
 8006c98:	20000074 	.word	0x20000074

08006c9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10b      	bne.n	8006cc4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	60fb      	str	r3, [r7, #12]
}
 8006cbe:	bf00      	nop
 8006cc0:	bf00      	nop
 8006cc2:	e7fd      	b.n	8006cc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cc4:	4b07      	ldr	r3, [pc, #28]	@ (8006ce4 <vTaskPlaceOnEventList+0x48>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3318      	adds	r3, #24
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7fe fe11 	bl	80058f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	6838      	ldr	r0, [r7, #0]
 8006cd6:	f000 fa73 	bl	80071c0 <prvAddCurrentTaskToDelayedList>
}
 8006cda:	bf00      	nop
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000638 	.word	0x20000638

08006ce8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10b      	bne.n	8006d16 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	60fb      	str	r3, [r7, #12]
}
 8006d10:	bf00      	nop
 8006d12:	bf00      	nop
 8006d14:	e7fd      	b.n	8006d12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	3318      	adds	r3, #24
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fe23 	bl	8005966 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d20:	4b1d      	ldr	r3, [pc, #116]	@ (8006d98 <xTaskRemoveFromEventList+0xb0>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d11c      	bne.n	8006d62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fe1a 	bl	8005966 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d36:	2201      	movs	r2, #1
 8006d38:	409a      	lsls	r2, r3
 8006d3a:	4b18      	ldr	r3, [pc, #96]	@ (8006d9c <xTaskRemoveFromEventList+0xb4>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	4a16      	ldr	r2, [pc, #88]	@ (8006d9c <xTaskRemoveFromEventList+0xb4>)
 8006d42:	6013      	str	r3, [r2, #0]
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d48:	4613      	mov	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4a13      	ldr	r2, [pc, #76]	@ (8006da0 <xTaskRemoveFromEventList+0xb8>)
 8006d52:	441a      	add	r2, r3
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	3304      	adds	r3, #4
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	f7fe fda6 	bl	80058ac <vListInsertEnd>
 8006d60:	e005      	b.n	8006d6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	3318      	adds	r3, #24
 8006d66:	4619      	mov	r1, r3
 8006d68:	480e      	ldr	r0, [pc, #56]	@ (8006da4 <xTaskRemoveFromEventList+0xbc>)
 8006d6a:	f7fe fd9f 	bl	80058ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d72:	4b0d      	ldr	r3, [pc, #52]	@ (8006da8 <xTaskRemoveFromEventList+0xc0>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d905      	bls.n	8006d88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d80:	4b0a      	ldr	r3, [pc, #40]	@ (8006dac <xTaskRemoveFromEventList+0xc4>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	e001      	b.n	8006d8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d8c:	697b      	ldr	r3, [r7, #20]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000760 	.word	0x20000760
 8006d9c:	20000740 	.word	0x20000740
 8006da0:	2000063c 	.word	0x2000063c
 8006da4:	200006f8 	.word	0x200006f8
 8006da8:	20000638 	.word	0x20000638
 8006dac:	2000074c 	.word	0x2000074c

08006db0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006db8:	4b06      	ldr	r3, [pc, #24]	@ (8006dd4 <vTaskInternalSetTimeOutState+0x24>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006dc0:	4b05      	ldr	r3, [pc, #20]	@ (8006dd8 <vTaskInternalSetTimeOutState+0x28>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	605a      	str	r2, [r3, #4]
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	20000750 	.word	0x20000750
 8006dd8:	2000073c 	.word	0x2000073c

08006ddc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	613b      	str	r3, [r7, #16]
}
 8006dfe:	bf00      	nop
 8006e00:	bf00      	nop
 8006e02:	e7fd      	b.n	8006e00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10b      	bne.n	8006e22 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	60fb      	str	r3, [r7, #12]
}
 8006e1c:	bf00      	nop
 8006e1e:	bf00      	nop
 8006e20:	e7fd      	b.n	8006e1e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006e22:	f000 fb61 	bl	80074e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e26:	4b1d      	ldr	r3, [pc, #116]	@ (8006e9c <xTaskCheckForTimeOut+0xc0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3e:	d102      	bne.n	8006e46 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e40:	2300      	movs	r3, #0
 8006e42:	61fb      	str	r3, [r7, #28]
 8006e44:	e023      	b.n	8006e8e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	4b15      	ldr	r3, [pc, #84]	@ (8006ea0 <xTaskCheckForTimeOut+0xc4>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d007      	beq.n	8006e62 <xTaskCheckForTimeOut+0x86>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d302      	bcc.n	8006e62 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	e015      	b.n	8006e8e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d20b      	bcs.n	8006e84 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	1ad2      	subs	r2, r2, r3
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7ff ff99 	bl	8006db0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61fb      	str	r3, [r7, #28]
 8006e82:	e004      	b.n	8006e8e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e8e:	f000 fb5d 	bl	800754c <vPortExitCritical>

	return xReturn;
 8006e92:	69fb      	ldr	r3, [r7, #28]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3720      	adds	r7, #32
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	2000073c 	.word	0x2000073c
 8006ea0:	20000750 	.word	0x20000750

08006ea4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ea8:	4b03      	ldr	r3, [pc, #12]	@ (8006eb8 <vTaskMissedYield+0x14>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	601a      	str	r2, [r3, #0]
}
 8006eae:	bf00      	nop
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	2000074c 	.word	0x2000074c

08006ebc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ec4:	f000 f852 	bl	8006f6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ec8:	4b06      	ldr	r3, [pc, #24]	@ (8006ee4 <prvIdleTask+0x28>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d9f9      	bls.n	8006ec4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ed0:	4b05      	ldr	r3, [pc, #20]	@ (8006ee8 <prvIdleTask+0x2c>)
 8006ed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ee0:	e7f0      	b.n	8006ec4 <prvIdleTask+0x8>
 8006ee2:	bf00      	nop
 8006ee4:	2000063c 	.word	0x2000063c
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	607b      	str	r3, [r7, #4]
 8006ef6:	e00c      	b.n	8006f12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4a12      	ldr	r2, [pc, #72]	@ (8006f4c <prvInitialiseTaskLists+0x60>)
 8006f04:	4413      	add	r3, r2
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe fca3 	bl	8005852 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	607b      	str	r3, [r7, #4]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b06      	cmp	r3, #6
 8006f16:	d9ef      	bls.n	8006ef8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f18:	480d      	ldr	r0, [pc, #52]	@ (8006f50 <prvInitialiseTaskLists+0x64>)
 8006f1a:	f7fe fc9a 	bl	8005852 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f1e:	480d      	ldr	r0, [pc, #52]	@ (8006f54 <prvInitialiseTaskLists+0x68>)
 8006f20:	f7fe fc97 	bl	8005852 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f24:	480c      	ldr	r0, [pc, #48]	@ (8006f58 <prvInitialiseTaskLists+0x6c>)
 8006f26:	f7fe fc94 	bl	8005852 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f2a:	480c      	ldr	r0, [pc, #48]	@ (8006f5c <prvInitialiseTaskLists+0x70>)
 8006f2c:	f7fe fc91 	bl	8005852 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f30:	480b      	ldr	r0, [pc, #44]	@ (8006f60 <prvInitialiseTaskLists+0x74>)
 8006f32:	f7fe fc8e 	bl	8005852 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f36:	4b0b      	ldr	r3, [pc, #44]	@ (8006f64 <prvInitialiseTaskLists+0x78>)
 8006f38:	4a05      	ldr	r2, [pc, #20]	@ (8006f50 <prvInitialiseTaskLists+0x64>)
 8006f3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f68 <prvInitialiseTaskLists+0x7c>)
 8006f3e:	4a05      	ldr	r2, [pc, #20]	@ (8006f54 <prvInitialiseTaskLists+0x68>)
 8006f40:	601a      	str	r2, [r3, #0]
}
 8006f42:	bf00      	nop
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	2000063c 	.word	0x2000063c
 8006f50:	200006c8 	.word	0x200006c8
 8006f54:	200006dc 	.word	0x200006dc
 8006f58:	200006f8 	.word	0x200006f8
 8006f5c:	2000070c 	.word	0x2000070c
 8006f60:	20000724 	.word	0x20000724
 8006f64:	200006f0 	.word	0x200006f0
 8006f68:	200006f4 	.word	0x200006f4

08006f6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f72:	e019      	b.n	8006fa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f74:	f000 fab8 	bl	80074e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f78:	4b10      	ldr	r3, [pc, #64]	@ (8006fbc <prvCheckTasksWaitingTermination+0x50>)
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3304      	adds	r3, #4
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7fe fcee 	bl	8005966 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc0 <prvCheckTasksWaitingTermination+0x54>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	4a0b      	ldr	r2, [pc, #44]	@ (8006fc0 <prvCheckTasksWaitingTermination+0x54>)
 8006f92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f94:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc4 <prvCheckTasksWaitingTermination+0x58>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8006fc4 <prvCheckTasksWaitingTermination+0x58>)
 8006f9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f9e:	f000 fad5 	bl	800754c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f810 	bl	8006fc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fa8:	4b06      	ldr	r3, [pc, #24]	@ (8006fc4 <prvCheckTasksWaitingTermination+0x58>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e1      	bne.n	8006f74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fb0:	bf00      	nop
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	2000070c 	.word	0x2000070c
 8006fc0:	20000738 	.word	0x20000738
 8006fc4:	20000720 	.word	0x20000720

08006fc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	334c      	adds	r3, #76	@ 0x4c
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 fdd1 	bl	8007b7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d108      	bne.n	8006ff6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fc6d 	bl	80078c8 <vPortFree>
				vPortFree( pxTCB );
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fc6a 	bl	80078c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ff4:	e019      	b.n	800702a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d103      	bne.n	8007008 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fc61 	bl	80078c8 <vPortFree>
	}
 8007006:	e010      	b.n	800702a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800700e:	2b02      	cmp	r3, #2
 8007010:	d00b      	beq.n	800702a <prvDeleteTCB+0x62>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	60fb      	str	r3, [r7, #12]
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	e7fd      	b.n	8007026 <prvDeleteTCB+0x5e>
	}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800703a:	4b0c      	ldr	r3, [pc, #48]	@ (800706c <prvResetNextTaskUnblockTime+0x38>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d104      	bne.n	800704e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007044:	4b0a      	ldr	r3, [pc, #40]	@ (8007070 <prvResetNextTaskUnblockTime+0x3c>)
 8007046:	f04f 32ff 	mov.w	r2, #4294967295
 800704a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800704c:	e008      	b.n	8007060 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800704e:	4b07      	ldr	r3, [pc, #28]	@ (800706c <prvResetNextTaskUnblockTime+0x38>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	4a04      	ldr	r2, [pc, #16]	@ (8007070 <prvResetNextTaskUnblockTime+0x3c>)
 800705e:	6013      	str	r3, [r2, #0]
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	200006f0 	.word	0x200006f0
 8007070:	20000758 	.word	0x20000758

08007074 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800707a:	4b0b      	ldr	r3, [pc, #44]	@ (80070a8 <xTaskGetSchedulerState+0x34>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d102      	bne.n	8007088 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007082:	2301      	movs	r3, #1
 8007084:	607b      	str	r3, [r7, #4]
 8007086:	e008      	b.n	800709a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007088:	4b08      	ldr	r3, [pc, #32]	@ (80070ac <xTaskGetSchedulerState+0x38>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d102      	bne.n	8007096 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007090:	2302      	movs	r3, #2
 8007092:	607b      	str	r3, [r7, #4]
 8007094:	e001      	b.n	800709a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007096:	2300      	movs	r3, #0
 8007098:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800709a:	687b      	ldr	r3, [r7, #4]
	}
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	20000744 	.word	0x20000744
 80070ac:	20000760 	.word	0x20000760

080070b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070bc:	2300      	movs	r3, #0
 80070be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d070      	beq.n	80071a8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070c6:	4b3b      	ldr	r3, [pc, #236]	@ (80071b4 <xTaskPriorityDisinherit+0x104>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d00b      	beq.n	80070e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	60fb      	str	r3, [r7, #12]
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	60bb      	str	r3, [r7, #8]
}
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	e7fd      	b.n	8007104 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800710c:	1e5a      	subs	r2, r3, #1
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800711a:	429a      	cmp	r2, r3
 800711c:	d044      	beq.n	80071a8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007122:	2b00      	cmp	r3, #0
 8007124:	d140      	bne.n	80071a8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	3304      	adds	r3, #4
 800712a:	4618      	mov	r0, r3
 800712c:	f7fe fc1b 	bl	8005966 <uxListRemove>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d115      	bne.n	8007162 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713a:	491f      	ldr	r1, [pc, #124]	@ (80071b8 <xTaskPriorityDisinherit+0x108>)
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	440b      	add	r3, r1
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <xTaskPriorityDisinherit+0xb2>
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007150:	2201      	movs	r2, #1
 8007152:	fa02 f303 	lsl.w	r3, r2, r3
 8007156:	43da      	mvns	r2, r3
 8007158:	4b18      	ldr	r3, [pc, #96]	@ (80071bc <xTaskPriorityDisinherit+0x10c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4013      	ands	r3, r2
 800715e:	4a17      	ldr	r2, [pc, #92]	@ (80071bc <xTaskPriorityDisinherit+0x10c>)
 8007160:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716e:	f1c3 0207 	rsb	r2, r3, #7
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717a:	2201      	movs	r2, #1
 800717c:	409a      	lsls	r2, r3
 800717e:	4b0f      	ldr	r3, [pc, #60]	@ (80071bc <xTaskPriorityDisinherit+0x10c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4313      	orrs	r3, r2
 8007184:	4a0d      	ldr	r2, [pc, #52]	@ (80071bc <xTaskPriorityDisinherit+0x10c>)
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800718c:	4613      	mov	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4a08      	ldr	r2, [pc, #32]	@ (80071b8 <xTaskPriorityDisinherit+0x108>)
 8007196:	441a      	add	r2, r3
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	3304      	adds	r3, #4
 800719c:	4619      	mov	r1, r3
 800719e:	4610      	mov	r0, r2
 80071a0:	f7fe fb84 	bl	80058ac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071a4:	2301      	movs	r3, #1
 80071a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071a8:	697b      	ldr	r3, [r7, #20]
	}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20000638 	.word	0x20000638
 80071b8:	2000063c 	.word	0x2000063c
 80071bc:	20000740 	.word	0x20000740

080071c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071ca:	4b29      	ldr	r3, [pc, #164]	@ (8007270 <prvAddCurrentTaskToDelayedList+0xb0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071d0:	4b28      	ldr	r3, [pc, #160]	@ (8007274 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3304      	adds	r3, #4
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe fbc5 	bl	8005966 <uxListRemove>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10b      	bne.n	80071fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80071e2:	4b24      	ldr	r3, [pc, #144]	@ (8007274 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e8:	2201      	movs	r2, #1
 80071ea:	fa02 f303 	lsl.w	r3, r2, r3
 80071ee:	43da      	mvns	r2, r3
 80071f0:	4b21      	ldr	r3, [pc, #132]	@ (8007278 <prvAddCurrentTaskToDelayedList+0xb8>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4013      	ands	r3, r2
 80071f6:	4a20      	ldr	r2, [pc, #128]	@ (8007278 <prvAddCurrentTaskToDelayedList+0xb8>)
 80071f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007200:	d10a      	bne.n	8007218 <prvAddCurrentTaskToDelayedList+0x58>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d007      	beq.n	8007218 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007208:	4b1a      	ldr	r3, [pc, #104]	@ (8007274 <prvAddCurrentTaskToDelayedList+0xb4>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3304      	adds	r3, #4
 800720e:	4619      	mov	r1, r3
 8007210:	481a      	ldr	r0, [pc, #104]	@ (800727c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007212:	f7fe fb4b 	bl	80058ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007216:	e026      	b.n	8007266 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007220:	4b14      	ldr	r3, [pc, #80]	@ (8007274 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	429a      	cmp	r2, r3
 800722e:	d209      	bcs.n	8007244 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007230:	4b13      	ldr	r3, [pc, #76]	@ (8007280 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	4b0f      	ldr	r3, [pc, #60]	@ (8007274 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3304      	adds	r3, #4
 800723a:	4619      	mov	r1, r3
 800723c:	4610      	mov	r0, r2
 800723e:	f7fe fb59 	bl	80058f4 <vListInsert>
}
 8007242:	e010      	b.n	8007266 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007244:	4b0f      	ldr	r3, [pc, #60]	@ (8007284 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	4b0a      	ldr	r3, [pc, #40]	@ (8007274 <prvAddCurrentTaskToDelayedList+0xb4>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3304      	adds	r3, #4
 800724e:	4619      	mov	r1, r3
 8007250:	4610      	mov	r0, r2
 8007252:	f7fe fb4f 	bl	80058f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007256:	4b0c      	ldr	r3, [pc, #48]	@ (8007288 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	429a      	cmp	r2, r3
 800725e:	d202      	bcs.n	8007266 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007260:	4a09      	ldr	r2, [pc, #36]	@ (8007288 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	6013      	str	r3, [r2, #0]
}
 8007266:	bf00      	nop
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	2000073c 	.word	0x2000073c
 8007274:	20000638 	.word	0x20000638
 8007278:	20000740 	.word	0x20000740
 800727c:	20000724 	.word	0x20000724
 8007280:	200006f4 	.word	0x200006f4
 8007284:	200006f0 	.word	0x200006f0
 8007288:	20000758 	.word	0x20000758

0800728c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3b04      	subs	r3, #4
 800729c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80072a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3b04      	subs	r3, #4
 80072aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f023 0201 	bic.w	r2, r3, #1
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3b04      	subs	r3, #4
 80072ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072bc:	4a0c      	ldr	r2, [pc, #48]	@ (80072f0 <pxPortInitialiseStack+0x64>)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3b14      	subs	r3, #20
 80072c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3b04      	subs	r3, #4
 80072d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f06f 0202 	mvn.w	r2, #2
 80072da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3b20      	subs	r3, #32
 80072e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072e2:	68fb      	ldr	r3, [r7, #12]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	080072f5 	.word	0x080072f5

080072f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072fe:	4b13      	ldr	r3, [pc, #76]	@ (800734c <prvTaskExitError+0x58>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007306:	d00b      	beq.n	8007320 <prvTaskExitError+0x2c>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	60fb      	str	r3, [r7, #12]
}
 800731a:	bf00      	nop
 800731c:	bf00      	nop
 800731e:	e7fd      	b.n	800731c <prvTaskExitError+0x28>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	60bb      	str	r3, [r7, #8]
}
 8007332:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007334:	bf00      	nop
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0fc      	beq.n	8007336 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800733c:	bf00      	nop
 800733e:	bf00      	nop
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	20000070 	.word	0x20000070

08007350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007350:	4b07      	ldr	r3, [pc, #28]	@ (8007370 <pxCurrentTCBConst2>)
 8007352:	6819      	ldr	r1, [r3, #0]
 8007354:	6808      	ldr	r0, [r1, #0]
 8007356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735a:	f380 8809 	msr	PSP, r0
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f04f 0000 	mov.w	r0, #0
 8007366:	f380 8811 	msr	BASEPRI, r0
 800736a:	4770      	bx	lr
 800736c:	f3af 8000 	nop.w

08007370 <pxCurrentTCBConst2>:
 8007370:	20000638 	.word	0x20000638
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop

08007378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007378:	4808      	ldr	r0, [pc, #32]	@ (800739c <prvPortStartFirstTask+0x24>)
 800737a:	6800      	ldr	r0, [r0, #0]
 800737c:	6800      	ldr	r0, [r0, #0]
 800737e:	f380 8808 	msr	MSP, r0
 8007382:	f04f 0000 	mov.w	r0, #0
 8007386:	f380 8814 	msr	CONTROL, r0
 800738a:	b662      	cpsie	i
 800738c:	b661      	cpsie	f
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	df00      	svc	0
 8007398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800739a:	bf00      	nop
 800739c:	e000ed08 	.word	0xe000ed08

080073a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073a6:	4b47      	ldr	r3, [pc, #284]	@ (80074c4 <xPortStartScheduler+0x124>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a47      	ldr	r2, [pc, #284]	@ (80074c8 <xPortStartScheduler+0x128>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d10b      	bne.n	80073c8 <xPortStartScheduler+0x28>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	60fb      	str	r3, [r7, #12]
}
 80073c2:	bf00      	nop
 80073c4:	bf00      	nop
 80073c6:	e7fd      	b.n	80073c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073c8:	4b3e      	ldr	r3, [pc, #248]	@ (80074c4 <xPortStartScheduler+0x124>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a3f      	ldr	r2, [pc, #252]	@ (80074cc <xPortStartScheduler+0x12c>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d10b      	bne.n	80073ea <xPortStartScheduler+0x4a>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	613b      	str	r3, [r7, #16]
}
 80073e4:	bf00      	nop
 80073e6:	bf00      	nop
 80073e8:	e7fd      	b.n	80073e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073ea:	4b39      	ldr	r3, [pc, #228]	@ (80074d0 <xPortStartScheduler+0x130>)
 80073ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	22ff      	movs	r2, #255	@ 0xff
 80073fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007404:	78fb      	ldrb	r3, [r7, #3]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800740c:	b2da      	uxtb	r2, r3
 800740e:	4b31      	ldr	r3, [pc, #196]	@ (80074d4 <xPortStartScheduler+0x134>)
 8007410:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007412:	4b31      	ldr	r3, [pc, #196]	@ (80074d8 <xPortStartScheduler+0x138>)
 8007414:	2207      	movs	r2, #7
 8007416:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007418:	e009      	b.n	800742e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800741a:	4b2f      	ldr	r3, [pc, #188]	@ (80074d8 <xPortStartScheduler+0x138>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3b01      	subs	r3, #1
 8007420:	4a2d      	ldr	r2, [pc, #180]	@ (80074d8 <xPortStartScheduler+0x138>)
 8007422:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	b2db      	uxtb	r3, r3
 800742c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	b2db      	uxtb	r3, r3
 8007432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007436:	2b80      	cmp	r3, #128	@ 0x80
 8007438:	d0ef      	beq.n	800741a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800743a:	4b27      	ldr	r3, [pc, #156]	@ (80074d8 <xPortStartScheduler+0x138>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f1c3 0307 	rsb	r3, r3, #7
 8007442:	2b04      	cmp	r3, #4
 8007444:	d00b      	beq.n	800745e <xPortStartScheduler+0xbe>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	60bb      	str	r3, [r7, #8]
}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	e7fd      	b.n	800745a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800745e:	4b1e      	ldr	r3, [pc, #120]	@ (80074d8 <xPortStartScheduler+0x138>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	021b      	lsls	r3, r3, #8
 8007464:	4a1c      	ldr	r2, [pc, #112]	@ (80074d8 <xPortStartScheduler+0x138>)
 8007466:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007468:	4b1b      	ldr	r3, [pc, #108]	@ (80074d8 <xPortStartScheduler+0x138>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007470:	4a19      	ldr	r2, [pc, #100]	@ (80074d8 <xPortStartScheduler+0x138>)
 8007472:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	b2da      	uxtb	r2, r3
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800747c:	4b17      	ldr	r3, [pc, #92]	@ (80074dc <xPortStartScheduler+0x13c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a16      	ldr	r2, [pc, #88]	@ (80074dc <xPortStartScheduler+0x13c>)
 8007482:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007486:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007488:	4b14      	ldr	r3, [pc, #80]	@ (80074dc <xPortStartScheduler+0x13c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a13      	ldr	r2, [pc, #76]	@ (80074dc <xPortStartScheduler+0x13c>)
 800748e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007492:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007494:	f000 f8da 	bl	800764c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007498:	4b11      	ldr	r3, [pc, #68]	@ (80074e0 <xPortStartScheduler+0x140>)
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800749e:	f000 f8f9 	bl	8007694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074a2:	4b10      	ldr	r3, [pc, #64]	@ (80074e4 <xPortStartScheduler+0x144>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a0f      	ldr	r2, [pc, #60]	@ (80074e4 <xPortStartScheduler+0x144>)
 80074a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80074ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074ae:	f7ff ff63 	bl	8007378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074b2:	f7ff fb8f 	bl	8006bd4 <vTaskSwitchContext>
	prvTaskExitError();
 80074b6:	f7ff ff1d 	bl	80072f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	e000ed00 	.word	0xe000ed00
 80074c8:	410fc271 	.word	0x410fc271
 80074cc:	410fc270 	.word	0x410fc270
 80074d0:	e000e400 	.word	0xe000e400
 80074d4:	20000764 	.word	0x20000764
 80074d8:	20000768 	.word	0x20000768
 80074dc:	e000ed20 	.word	0xe000ed20
 80074e0:	20000070 	.word	0x20000070
 80074e4:	e000ef34 	.word	0xe000ef34

080074e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	607b      	str	r3, [r7, #4]
}
 8007500:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007502:	4b10      	ldr	r3, [pc, #64]	@ (8007544 <vPortEnterCritical+0x5c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3301      	adds	r3, #1
 8007508:	4a0e      	ldr	r2, [pc, #56]	@ (8007544 <vPortEnterCritical+0x5c>)
 800750a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800750c:	4b0d      	ldr	r3, [pc, #52]	@ (8007544 <vPortEnterCritical+0x5c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d110      	bne.n	8007536 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007514:	4b0c      	ldr	r3, [pc, #48]	@ (8007548 <vPortEnterCritical+0x60>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00b      	beq.n	8007536 <vPortEnterCritical+0x4e>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	603b      	str	r3, [r7, #0]
}
 8007530:	bf00      	nop
 8007532:	bf00      	nop
 8007534:	e7fd      	b.n	8007532 <vPortEnterCritical+0x4a>
	}
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20000070 	.word	0x20000070
 8007548:	e000ed04 	.word	0xe000ed04

0800754c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007552:	4b12      	ldr	r3, [pc, #72]	@ (800759c <vPortExitCritical+0x50>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10b      	bne.n	8007572 <vPortExitCritical+0x26>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	607b      	str	r3, [r7, #4]
}
 800756c:	bf00      	nop
 800756e:	bf00      	nop
 8007570:	e7fd      	b.n	800756e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007572:	4b0a      	ldr	r3, [pc, #40]	@ (800759c <vPortExitCritical+0x50>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3b01      	subs	r3, #1
 8007578:	4a08      	ldr	r2, [pc, #32]	@ (800759c <vPortExitCritical+0x50>)
 800757a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800757c:	4b07      	ldr	r3, [pc, #28]	@ (800759c <vPortExitCritical+0x50>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d105      	bne.n	8007590 <vPortExitCritical+0x44>
 8007584:	2300      	movs	r3, #0
 8007586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f383 8811 	msr	BASEPRI, r3
}
 800758e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	20000070 	.word	0x20000070

080075a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075a0:	f3ef 8009 	mrs	r0, PSP
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	4b15      	ldr	r3, [pc, #84]	@ (8007600 <pxCurrentTCBConst>)
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	f01e 0f10 	tst.w	lr, #16
 80075b0:	bf08      	it	eq
 80075b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ba:	6010      	str	r0, [r2, #0]
 80075bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80075c4:	f380 8811 	msr	BASEPRI, r0
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f7ff fb00 	bl	8006bd4 <vTaskSwitchContext>
 80075d4:	f04f 0000 	mov.w	r0, #0
 80075d8:	f380 8811 	msr	BASEPRI, r0
 80075dc:	bc09      	pop	{r0, r3}
 80075de:	6819      	ldr	r1, [r3, #0]
 80075e0:	6808      	ldr	r0, [r1, #0]
 80075e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e6:	f01e 0f10 	tst.w	lr, #16
 80075ea:	bf08      	it	eq
 80075ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075f0:	f380 8809 	msr	PSP, r0
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	f3af 8000 	nop.w

08007600 <pxCurrentTCBConst>:
 8007600:	20000638 	.word	0x20000638
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop

08007608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	607b      	str	r3, [r7, #4]
}
 8007620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007622:	f7ff fa1d 	bl	8006a60 <xTaskIncrementTick>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800762c:	4b06      	ldr	r3, [pc, #24]	@ (8007648 <SysTick_Handler+0x40>)
 800762e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	2300      	movs	r3, #0
 8007636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	f383 8811 	msr	BASEPRI, r3
}
 800763e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	e000ed04 	.word	0xe000ed04

0800764c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800764c:	b480      	push	{r7}
 800764e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007650:	4b0b      	ldr	r3, [pc, #44]	@ (8007680 <vPortSetupTimerInterrupt+0x34>)
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007656:	4b0b      	ldr	r3, [pc, #44]	@ (8007684 <vPortSetupTimerInterrupt+0x38>)
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800765c:	4b0a      	ldr	r3, [pc, #40]	@ (8007688 <vPortSetupTimerInterrupt+0x3c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a0a      	ldr	r2, [pc, #40]	@ (800768c <vPortSetupTimerInterrupt+0x40>)
 8007662:	fba2 2303 	umull	r2, r3, r2, r3
 8007666:	099b      	lsrs	r3, r3, #6
 8007668:	4a09      	ldr	r2, [pc, #36]	@ (8007690 <vPortSetupTimerInterrupt+0x44>)
 800766a:	3b01      	subs	r3, #1
 800766c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800766e:	4b04      	ldr	r3, [pc, #16]	@ (8007680 <vPortSetupTimerInterrupt+0x34>)
 8007670:	2207      	movs	r2, #7
 8007672:	601a      	str	r2, [r3, #0]
}
 8007674:	bf00      	nop
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	e000e010 	.word	0xe000e010
 8007684:	e000e018 	.word	0xe000e018
 8007688:	20000000 	.word	0x20000000
 800768c:	10624dd3 	.word	0x10624dd3
 8007690:	e000e014 	.word	0xe000e014

08007694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007694:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80076a4 <vPortEnableVFP+0x10>
 8007698:	6801      	ldr	r1, [r0, #0]
 800769a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800769e:	6001      	str	r1, [r0, #0]
 80076a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076a2:	bf00      	nop
 80076a4:	e000ed88 	.word	0xe000ed88

080076a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076ae:	f3ef 8305 	mrs	r3, IPSR
 80076b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b0f      	cmp	r3, #15
 80076b8:	d915      	bls.n	80076e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076ba:	4a18      	ldr	r2, [pc, #96]	@ (800771c <vPortValidateInterruptPriority+0x74>)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4413      	add	r3, r2
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076c4:	4b16      	ldr	r3, [pc, #88]	@ (8007720 <vPortValidateInterruptPriority+0x78>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	7afa      	ldrb	r2, [r7, #11]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d20b      	bcs.n	80076e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	607b      	str	r3, [r7, #4]
}
 80076e0:	bf00      	nop
 80076e2:	bf00      	nop
 80076e4:	e7fd      	b.n	80076e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007724 <vPortValidateInterruptPriority+0x7c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80076ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007728 <vPortValidateInterruptPriority+0x80>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d90b      	bls.n	800770e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	603b      	str	r3, [r7, #0]
}
 8007708:	bf00      	nop
 800770a:	bf00      	nop
 800770c:	e7fd      	b.n	800770a <vPortValidateInterruptPriority+0x62>
	}
 800770e:	bf00      	nop
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	e000e3f0 	.word	0xe000e3f0
 8007720:	20000764 	.word	0x20000764
 8007724:	e000ed0c 	.word	0xe000ed0c
 8007728:	20000768 	.word	0x20000768

0800772c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08a      	sub	sp, #40	@ 0x28
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007734:	2300      	movs	r3, #0
 8007736:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007738:	f7ff f8e6 	bl	8006908 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800773c:	4b5c      	ldr	r3, [pc, #368]	@ (80078b0 <pvPortMalloc+0x184>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007744:	f000 f924 	bl	8007990 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007748:	4b5a      	ldr	r3, [pc, #360]	@ (80078b4 <pvPortMalloc+0x188>)
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4013      	ands	r3, r2
 8007750:	2b00      	cmp	r3, #0
 8007752:	f040 8095 	bne.w	8007880 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d01e      	beq.n	800779a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800775c:	2208      	movs	r2, #8
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4413      	add	r3, r2
 8007762:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	2b00      	cmp	r3, #0
 800776c:	d015      	beq.n	800779a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f023 0307 	bic.w	r3, r3, #7
 8007774:	3308      	adds	r3, #8
 8007776:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f003 0307 	and.w	r3, r3, #7
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00b      	beq.n	800779a <pvPortMalloc+0x6e>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	617b      	str	r3, [r7, #20]
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop
 8007798:	e7fd      	b.n	8007796 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d06f      	beq.n	8007880 <pvPortMalloc+0x154>
 80077a0:	4b45      	ldr	r3, [pc, #276]	@ (80078b8 <pvPortMalloc+0x18c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d86a      	bhi.n	8007880 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077aa:	4b44      	ldr	r3, [pc, #272]	@ (80078bc <pvPortMalloc+0x190>)
 80077ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077ae:	4b43      	ldr	r3, [pc, #268]	@ (80078bc <pvPortMalloc+0x190>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077b4:	e004      	b.n	80077c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80077b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d903      	bls.n	80077d2 <pvPortMalloc+0xa6>
 80077ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1f1      	bne.n	80077b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077d2:	4b37      	ldr	r3, [pc, #220]	@ (80078b0 <pvPortMalloc+0x184>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077d8:	429a      	cmp	r2, r3
 80077da:	d051      	beq.n	8007880 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2208      	movs	r2, #8
 80077e2:	4413      	add	r3, r2
 80077e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	1ad2      	subs	r2, r2, r3
 80077f6:	2308      	movs	r3, #8
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d920      	bls.n	8007840 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4413      	add	r3, r2
 8007804:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <pvPortMalloc+0xfc>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	613b      	str	r3, [r7, #16]
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	e7fd      	b.n	8007824 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	1ad2      	subs	r2, r2, r3
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800783a:	69b8      	ldr	r0, [r7, #24]
 800783c:	f000 f90a 	bl	8007a54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007840:	4b1d      	ldr	r3, [pc, #116]	@ (80078b8 <pvPortMalloc+0x18c>)
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	4a1b      	ldr	r2, [pc, #108]	@ (80078b8 <pvPortMalloc+0x18c>)
 800784c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800784e:	4b1a      	ldr	r3, [pc, #104]	@ (80078b8 <pvPortMalloc+0x18c>)
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	4b1b      	ldr	r3, [pc, #108]	@ (80078c0 <pvPortMalloc+0x194>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d203      	bcs.n	8007862 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800785a:	4b17      	ldr	r3, [pc, #92]	@ (80078b8 <pvPortMalloc+0x18c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a18      	ldr	r2, [pc, #96]	@ (80078c0 <pvPortMalloc+0x194>)
 8007860:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	4b13      	ldr	r3, [pc, #76]	@ (80078b4 <pvPortMalloc+0x188>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	431a      	orrs	r2, r3
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007872:	2200      	movs	r2, #0
 8007874:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007876:	4b13      	ldr	r3, [pc, #76]	@ (80078c4 <pvPortMalloc+0x198>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3301      	adds	r3, #1
 800787c:	4a11      	ldr	r2, [pc, #68]	@ (80078c4 <pvPortMalloc+0x198>)
 800787e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007880:	f7ff f850 	bl	8006924 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00b      	beq.n	80078a6 <pvPortMalloc+0x17a>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	60fb      	str	r3, [r7, #12]
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	e7fd      	b.n	80078a2 <pvPortMalloc+0x176>
	return pvReturn;
 80078a6:	69fb      	ldr	r3, [r7, #28]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3728      	adds	r7, #40	@ 0x28
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	20004374 	.word	0x20004374
 80078b4:	20004388 	.word	0x20004388
 80078b8:	20004378 	.word	0x20004378
 80078bc:	2000436c 	.word	0x2000436c
 80078c0:	2000437c 	.word	0x2000437c
 80078c4:	20004380 	.word	0x20004380

080078c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d04f      	beq.n	800797a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078da:	2308      	movs	r3, #8
 80078dc:	425b      	negs	r3, r3
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	4413      	add	r3, r2
 80078e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	4b25      	ldr	r3, [pc, #148]	@ (8007984 <vPortFree+0xbc>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4013      	ands	r3, r2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10b      	bne.n	800790e <vPortFree+0x46>
	__asm volatile
 80078f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	60fb      	str	r3, [r7, #12]
}
 8007908:	bf00      	nop
 800790a:	bf00      	nop
 800790c:	e7fd      	b.n	800790a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00b      	beq.n	800792e <vPortFree+0x66>
	__asm volatile
 8007916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	60bb      	str	r3, [r7, #8]
}
 8007928:	bf00      	nop
 800792a:	bf00      	nop
 800792c:	e7fd      	b.n	800792a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	4b14      	ldr	r3, [pc, #80]	@ (8007984 <vPortFree+0xbc>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4013      	ands	r3, r2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d01e      	beq.n	800797a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d11a      	bne.n	800797a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	4b0e      	ldr	r3, [pc, #56]	@ (8007984 <vPortFree+0xbc>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	43db      	mvns	r3, r3
 800794e:	401a      	ands	r2, r3
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007954:	f7fe ffd8 	bl	8006908 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	4b0a      	ldr	r3, [pc, #40]	@ (8007988 <vPortFree+0xc0>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4413      	add	r3, r2
 8007962:	4a09      	ldr	r2, [pc, #36]	@ (8007988 <vPortFree+0xc0>)
 8007964:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007966:	6938      	ldr	r0, [r7, #16]
 8007968:	f000 f874 	bl	8007a54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800796c:	4b07      	ldr	r3, [pc, #28]	@ (800798c <vPortFree+0xc4>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3301      	adds	r3, #1
 8007972:	4a06      	ldr	r2, [pc, #24]	@ (800798c <vPortFree+0xc4>)
 8007974:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007976:	f7fe ffd5 	bl	8006924 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800797a:	bf00      	nop
 800797c:	3718      	adds	r7, #24
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20004388 	.word	0x20004388
 8007988:	20004378 	.word	0x20004378
 800798c:	20004384 	.word	0x20004384

08007990 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007996:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800799a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800799c:	4b27      	ldr	r3, [pc, #156]	@ (8007a3c <prvHeapInit+0xac>)
 800799e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f003 0307 	and.w	r3, r3, #7
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00c      	beq.n	80079c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3307      	adds	r3, #7
 80079ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f023 0307 	bic.w	r3, r3, #7
 80079b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	4a1f      	ldr	r2, [pc, #124]	@ (8007a3c <prvHeapInit+0xac>)
 80079c0:	4413      	add	r3, r2
 80079c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a40 <prvHeapInit+0xb0>)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079ce:	4b1c      	ldr	r3, [pc, #112]	@ (8007a40 <prvHeapInit+0xb0>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	4413      	add	r3, r2
 80079da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079dc:	2208      	movs	r2, #8
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	1a9b      	subs	r3, r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f023 0307 	bic.w	r3, r3, #7
 80079ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4a15      	ldr	r2, [pc, #84]	@ (8007a44 <prvHeapInit+0xb4>)
 80079f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079f2:	4b14      	ldr	r3, [pc, #80]	@ (8007a44 <prvHeapInit+0xb4>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2200      	movs	r2, #0
 80079f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079fa:	4b12      	ldr	r3, [pc, #72]	@ (8007a44 <prvHeapInit+0xb4>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	1ad2      	subs	r2, r2, r3
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a10:	4b0c      	ldr	r3, [pc, #48]	@ (8007a44 <prvHeapInit+0xb4>)
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8007a48 <prvHeapInit+0xb8>)
 8007a1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	4a09      	ldr	r2, [pc, #36]	@ (8007a4c <prvHeapInit+0xbc>)
 8007a26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a28:	4b09      	ldr	r3, [pc, #36]	@ (8007a50 <prvHeapInit+0xc0>)
 8007a2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007a2e:	601a      	str	r2, [r3, #0]
}
 8007a30:	bf00      	nop
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	2000076c 	.word	0x2000076c
 8007a40:	2000436c 	.word	0x2000436c
 8007a44:	20004374 	.word	0x20004374
 8007a48:	2000437c 	.word	0x2000437c
 8007a4c:	20004378 	.word	0x20004378
 8007a50:	20004388 	.word	0x20004388

08007a54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a5c:	4b28      	ldr	r3, [pc, #160]	@ (8007b00 <prvInsertBlockIntoFreeList+0xac>)
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	e002      	b.n	8007a68 <prvInsertBlockIntoFreeList+0x14>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	60fb      	str	r3, [r7, #12]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d8f7      	bhi.n	8007a62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d108      	bne.n	8007a96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	441a      	add	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	441a      	add	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d118      	bne.n	8007adc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	4b15      	ldr	r3, [pc, #84]	@ (8007b04 <prvInsertBlockIntoFreeList+0xb0>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d00d      	beq.n	8007ad2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	441a      	add	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	e008      	b.n	8007ae4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8007b04 <prvInsertBlockIntoFreeList+0xb0>)
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	e003      	b.n	8007ae4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d002      	beq.n	8007af2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	2000436c 	.word	0x2000436c
 8007b04:	20004374 	.word	0x20004374

08007b08 <siprintf>:
 8007b08:	b40e      	push	{r1, r2, r3}
 8007b0a:	b510      	push	{r4, lr}
 8007b0c:	b09d      	sub	sp, #116	@ 0x74
 8007b0e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007b10:	9002      	str	r0, [sp, #8]
 8007b12:	9006      	str	r0, [sp, #24]
 8007b14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b18:	480a      	ldr	r0, [pc, #40]	@ (8007b44 <siprintf+0x3c>)
 8007b1a:	9107      	str	r1, [sp, #28]
 8007b1c:	9104      	str	r1, [sp, #16]
 8007b1e:	490a      	ldr	r1, [pc, #40]	@ (8007b48 <siprintf+0x40>)
 8007b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b24:	9105      	str	r1, [sp, #20]
 8007b26:	2400      	movs	r4, #0
 8007b28:	a902      	add	r1, sp, #8
 8007b2a:	6800      	ldr	r0, [r0, #0]
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007b30:	f000 fa10 	bl	8007f54 <_svfiprintf_r>
 8007b34:	9b02      	ldr	r3, [sp, #8]
 8007b36:	701c      	strb	r4, [r3, #0]
 8007b38:	b01d      	add	sp, #116	@ 0x74
 8007b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b3e:	b003      	add	sp, #12
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	20000074 	.word	0x20000074
 8007b48:	ffff0208 	.word	0xffff0208

08007b4c <memcmp>:
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	3901      	subs	r1, #1
 8007b50:	4402      	add	r2, r0
 8007b52:	4290      	cmp	r0, r2
 8007b54:	d101      	bne.n	8007b5a <memcmp+0xe>
 8007b56:	2000      	movs	r0, #0
 8007b58:	e005      	b.n	8007b66 <memcmp+0x1a>
 8007b5a:	7803      	ldrb	r3, [r0, #0]
 8007b5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	d001      	beq.n	8007b68 <memcmp+0x1c>
 8007b64:	1b18      	subs	r0, r3, r4
 8007b66:	bd10      	pop	{r4, pc}
 8007b68:	3001      	adds	r0, #1
 8007b6a:	e7f2      	b.n	8007b52 <memcmp+0x6>

08007b6c <memset>:
 8007b6c:	4402      	add	r2, r0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d100      	bne.n	8007b76 <memset+0xa>
 8007b74:	4770      	bx	lr
 8007b76:	f803 1b01 	strb.w	r1, [r3], #1
 8007b7a:	e7f9      	b.n	8007b70 <memset+0x4>

08007b7c <_reclaim_reent>:
 8007b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8007c34 <_reclaim_reent+0xb8>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4283      	cmp	r3, r0
 8007b82:	b570      	push	{r4, r5, r6, lr}
 8007b84:	4604      	mov	r4, r0
 8007b86:	d053      	beq.n	8007c30 <_reclaim_reent+0xb4>
 8007b88:	69c3      	ldr	r3, [r0, #28]
 8007b8a:	b31b      	cbz	r3, 8007bd4 <_reclaim_reent+0x58>
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	b163      	cbz	r3, 8007baa <_reclaim_reent+0x2e>
 8007b90:	2500      	movs	r5, #0
 8007b92:	69e3      	ldr	r3, [r4, #28]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	5959      	ldr	r1, [r3, r5]
 8007b98:	b9b1      	cbnz	r1, 8007bc8 <_reclaim_reent+0x4c>
 8007b9a:	3504      	adds	r5, #4
 8007b9c:	2d80      	cmp	r5, #128	@ 0x80
 8007b9e:	d1f8      	bne.n	8007b92 <_reclaim_reent+0x16>
 8007ba0:	69e3      	ldr	r3, [r4, #28]
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	68d9      	ldr	r1, [r3, #12]
 8007ba6:	f000 f881 	bl	8007cac <_free_r>
 8007baa:	69e3      	ldr	r3, [r4, #28]
 8007bac:	6819      	ldr	r1, [r3, #0]
 8007bae:	b111      	cbz	r1, 8007bb6 <_reclaim_reent+0x3a>
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 f87b 	bl	8007cac <_free_r>
 8007bb6:	69e3      	ldr	r3, [r4, #28]
 8007bb8:	689d      	ldr	r5, [r3, #8]
 8007bba:	b15d      	cbz	r5, 8007bd4 <_reclaim_reent+0x58>
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	682d      	ldr	r5, [r5, #0]
 8007bc2:	f000 f873 	bl	8007cac <_free_r>
 8007bc6:	e7f8      	b.n	8007bba <_reclaim_reent+0x3e>
 8007bc8:	680e      	ldr	r6, [r1, #0]
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 f86e 	bl	8007cac <_free_r>
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	e7e1      	b.n	8007b98 <_reclaim_reent+0x1c>
 8007bd4:	6961      	ldr	r1, [r4, #20]
 8007bd6:	b111      	cbz	r1, 8007bde <_reclaim_reent+0x62>
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 f867 	bl	8007cac <_free_r>
 8007bde:	69e1      	ldr	r1, [r4, #28]
 8007be0:	b111      	cbz	r1, 8007be8 <_reclaim_reent+0x6c>
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 f862 	bl	8007cac <_free_r>
 8007be8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007bea:	b111      	cbz	r1, 8007bf2 <_reclaim_reent+0x76>
 8007bec:	4620      	mov	r0, r4
 8007bee:	f000 f85d 	bl	8007cac <_free_r>
 8007bf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bf4:	b111      	cbz	r1, 8007bfc <_reclaim_reent+0x80>
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f000 f858 	bl	8007cac <_free_r>
 8007bfc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007bfe:	b111      	cbz	r1, 8007c06 <_reclaim_reent+0x8a>
 8007c00:	4620      	mov	r0, r4
 8007c02:	f000 f853 	bl	8007cac <_free_r>
 8007c06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007c08:	b111      	cbz	r1, 8007c10 <_reclaim_reent+0x94>
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f000 f84e 	bl	8007cac <_free_r>
 8007c10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007c12:	b111      	cbz	r1, 8007c1a <_reclaim_reent+0x9e>
 8007c14:	4620      	mov	r0, r4
 8007c16:	f000 f849 	bl	8007cac <_free_r>
 8007c1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007c1c:	b111      	cbz	r1, 8007c24 <_reclaim_reent+0xa8>
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 f844 	bl	8007cac <_free_r>
 8007c24:	6a23      	ldr	r3, [r4, #32]
 8007c26:	b11b      	cbz	r3, 8007c30 <_reclaim_reent+0xb4>
 8007c28:	4620      	mov	r0, r4
 8007c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c2e:	4718      	bx	r3
 8007c30:	bd70      	pop	{r4, r5, r6, pc}
 8007c32:	bf00      	nop
 8007c34:	20000074 	.word	0x20000074

08007c38 <__errno>:
 8007c38:	4b01      	ldr	r3, [pc, #4]	@ (8007c40 <__errno+0x8>)
 8007c3a:	6818      	ldr	r0, [r3, #0]
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	20000074 	.word	0x20000074

08007c44 <__libc_init_array>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	4d0d      	ldr	r5, [pc, #52]	@ (8007c7c <__libc_init_array+0x38>)
 8007c48:	4c0d      	ldr	r4, [pc, #52]	@ (8007c80 <__libc_init_array+0x3c>)
 8007c4a:	1b64      	subs	r4, r4, r5
 8007c4c:	10a4      	asrs	r4, r4, #2
 8007c4e:	2600      	movs	r6, #0
 8007c50:	42a6      	cmp	r6, r4
 8007c52:	d109      	bne.n	8007c68 <__libc_init_array+0x24>
 8007c54:	4d0b      	ldr	r5, [pc, #44]	@ (8007c84 <__libc_init_array+0x40>)
 8007c56:	4c0c      	ldr	r4, [pc, #48]	@ (8007c88 <__libc_init_array+0x44>)
 8007c58:	f000 fc64 	bl	8008524 <_init>
 8007c5c:	1b64      	subs	r4, r4, r5
 8007c5e:	10a4      	asrs	r4, r4, #2
 8007c60:	2600      	movs	r6, #0
 8007c62:	42a6      	cmp	r6, r4
 8007c64:	d105      	bne.n	8007c72 <__libc_init_array+0x2e>
 8007c66:	bd70      	pop	{r4, r5, r6, pc}
 8007c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6c:	4798      	blx	r3
 8007c6e:	3601      	adds	r6, #1
 8007c70:	e7ee      	b.n	8007c50 <__libc_init_array+0xc>
 8007c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c76:	4798      	blx	r3
 8007c78:	3601      	adds	r6, #1
 8007c7a:	e7f2      	b.n	8007c62 <__libc_init_array+0x1e>
 8007c7c:	080087f0 	.word	0x080087f0
 8007c80:	080087f0 	.word	0x080087f0
 8007c84:	080087f0 	.word	0x080087f0
 8007c88:	080087f4 	.word	0x080087f4

08007c8c <__retarget_lock_acquire_recursive>:
 8007c8c:	4770      	bx	lr

08007c8e <__retarget_lock_release_recursive>:
 8007c8e:	4770      	bx	lr

08007c90 <memcpy>:
 8007c90:	440a      	add	r2, r1
 8007c92:	4291      	cmp	r1, r2
 8007c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c98:	d100      	bne.n	8007c9c <memcpy+0xc>
 8007c9a:	4770      	bx	lr
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ca6:	4291      	cmp	r1, r2
 8007ca8:	d1f9      	bne.n	8007c9e <memcpy+0xe>
 8007caa:	bd10      	pop	{r4, pc}

08007cac <_free_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	4605      	mov	r5, r0
 8007cb0:	2900      	cmp	r1, #0
 8007cb2:	d041      	beq.n	8007d38 <_free_r+0x8c>
 8007cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cb8:	1f0c      	subs	r4, r1, #4
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	bfb8      	it	lt
 8007cbe:	18e4      	addlt	r4, r4, r3
 8007cc0:	f000 f8e0 	bl	8007e84 <__malloc_lock>
 8007cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8007d3c <_free_r+0x90>)
 8007cc6:	6813      	ldr	r3, [r2, #0]
 8007cc8:	b933      	cbnz	r3, 8007cd8 <_free_r+0x2c>
 8007cca:	6063      	str	r3, [r4, #4]
 8007ccc:	6014      	str	r4, [r2, #0]
 8007cce:	4628      	mov	r0, r5
 8007cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cd4:	f000 b8dc 	b.w	8007e90 <__malloc_unlock>
 8007cd8:	42a3      	cmp	r3, r4
 8007cda:	d908      	bls.n	8007cee <_free_r+0x42>
 8007cdc:	6820      	ldr	r0, [r4, #0]
 8007cde:	1821      	adds	r1, r4, r0
 8007ce0:	428b      	cmp	r3, r1
 8007ce2:	bf01      	itttt	eq
 8007ce4:	6819      	ldreq	r1, [r3, #0]
 8007ce6:	685b      	ldreq	r3, [r3, #4]
 8007ce8:	1809      	addeq	r1, r1, r0
 8007cea:	6021      	streq	r1, [r4, #0]
 8007cec:	e7ed      	b.n	8007cca <_free_r+0x1e>
 8007cee:	461a      	mov	r2, r3
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	b10b      	cbz	r3, 8007cf8 <_free_r+0x4c>
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	d9fa      	bls.n	8007cee <_free_r+0x42>
 8007cf8:	6811      	ldr	r1, [r2, #0]
 8007cfa:	1850      	adds	r0, r2, r1
 8007cfc:	42a0      	cmp	r0, r4
 8007cfe:	d10b      	bne.n	8007d18 <_free_r+0x6c>
 8007d00:	6820      	ldr	r0, [r4, #0]
 8007d02:	4401      	add	r1, r0
 8007d04:	1850      	adds	r0, r2, r1
 8007d06:	4283      	cmp	r3, r0
 8007d08:	6011      	str	r1, [r2, #0]
 8007d0a:	d1e0      	bne.n	8007cce <_free_r+0x22>
 8007d0c:	6818      	ldr	r0, [r3, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	6053      	str	r3, [r2, #4]
 8007d12:	4408      	add	r0, r1
 8007d14:	6010      	str	r0, [r2, #0]
 8007d16:	e7da      	b.n	8007cce <_free_r+0x22>
 8007d18:	d902      	bls.n	8007d20 <_free_r+0x74>
 8007d1a:	230c      	movs	r3, #12
 8007d1c:	602b      	str	r3, [r5, #0]
 8007d1e:	e7d6      	b.n	8007cce <_free_r+0x22>
 8007d20:	6820      	ldr	r0, [r4, #0]
 8007d22:	1821      	adds	r1, r4, r0
 8007d24:	428b      	cmp	r3, r1
 8007d26:	bf04      	itt	eq
 8007d28:	6819      	ldreq	r1, [r3, #0]
 8007d2a:	685b      	ldreq	r3, [r3, #4]
 8007d2c:	6063      	str	r3, [r4, #4]
 8007d2e:	bf04      	itt	eq
 8007d30:	1809      	addeq	r1, r1, r0
 8007d32:	6021      	streq	r1, [r4, #0]
 8007d34:	6054      	str	r4, [r2, #4]
 8007d36:	e7ca      	b.n	8007cce <_free_r+0x22>
 8007d38:	bd38      	pop	{r3, r4, r5, pc}
 8007d3a:	bf00      	nop
 8007d3c:	200044d0 	.word	0x200044d0

08007d40 <sbrk_aligned>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	4e0f      	ldr	r6, [pc, #60]	@ (8007d80 <sbrk_aligned+0x40>)
 8007d44:	460c      	mov	r4, r1
 8007d46:	6831      	ldr	r1, [r6, #0]
 8007d48:	4605      	mov	r5, r0
 8007d4a:	b911      	cbnz	r1, 8007d52 <sbrk_aligned+0x12>
 8007d4c:	f000 fba4 	bl	8008498 <_sbrk_r>
 8007d50:	6030      	str	r0, [r6, #0]
 8007d52:	4621      	mov	r1, r4
 8007d54:	4628      	mov	r0, r5
 8007d56:	f000 fb9f 	bl	8008498 <_sbrk_r>
 8007d5a:	1c43      	adds	r3, r0, #1
 8007d5c:	d103      	bne.n	8007d66 <sbrk_aligned+0x26>
 8007d5e:	f04f 34ff 	mov.w	r4, #4294967295
 8007d62:	4620      	mov	r0, r4
 8007d64:	bd70      	pop	{r4, r5, r6, pc}
 8007d66:	1cc4      	adds	r4, r0, #3
 8007d68:	f024 0403 	bic.w	r4, r4, #3
 8007d6c:	42a0      	cmp	r0, r4
 8007d6e:	d0f8      	beq.n	8007d62 <sbrk_aligned+0x22>
 8007d70:	1a21      	subs	r1, r4, r0
 8007d72:	4628      	mov	r0, r5
 8007d74:	f000 fb90 	bl	8008498 <_sbrk_r>
 8007d78:	3001      	adds	r0, #1
 8007d7a:	d1f2      	bne.n	8007d62 <sbrk_aligned+0x22>
 8007d7c:	e7ef      	b.n	8007d5e <sbrk_aligned+0x1e>
 8007d7e:	bf00      	nop
 8007d80:	200044cc 	.word	0x200044cc

08007d84 <_malloc_r>:
 8007d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d88:	1ccd      	adds	r5, r1, #3
 8007d8a:	f025 0503 	bic.w	r5, r5, #3
 8007d8e:	3508      	adds	r5, #8
 8007d90:	2d0c      	cmp	r5, #12
 8007d92:	bf38      	it	cc
 8007d94:	250c      	movcc	r5, #12
 8007d96:	2d00      	cmp	r5, #0
 8007d98:	4606      	mov	r6, r0
 8007d9a:	db01      	blt.n	8007da0 <_malloc_r+0x1c>
 8007d9c:	42a9      	cmp	r1, r5
 8007d9e:	d904      	bls.n	8007daa <_malloc_r+0x26>
 8007da0:	230c      	movs	r3, #12
 8007da2:	6033      	str	r3, [r6, #0]
 8007da4:	2000      	movs	r0, #0
 8007da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007daa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e80 <_malloc_r+0xfc>
 8007dae:	f000 f869 	bl	8007e84 <__malloc_lock>
 8007db2:	f8d8 3000 	ldr.w	r3, [r8]
 8007db6:	461c      	mov	r4, r3
 8007db8:	bb44      	cbnz	r4, 8007e0c <_malloc_r+0x88>
 8007dba:	4629      	mov	r1, r5
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	f7ff ffbf 	bl	8007d40 <sbrk_aligned>
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	d158      	bne.n	8007e7a <_malloc_r+0xf6>
 8007dc8:	f8d8 4000 	ldr.w	r4, [r8]
 8007dcc:	4627      	mov	r7, r4
 8007dce:	2f00      	cmp	r7, #0
 8007dd0:	d143      	bne.n	8007e5a <_malloc_r+0xd6>
 8007dd2:	2c00      	cmp	r4, #0
 8007dd4:	d04b      	beq.n	8007e6e <_malloc_r+0xea>
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	4639      	mov	r1, r7
 8007dda:	4630      	mov	r0, r6
 8007ddc:	eb04 0903 	add.w	r9, r4, r3
 8007de0:	f000 fb5a 	bl	8008498 <_sbrk_r>
 8007de4:	4581      	cmp	r9, r0
 8007de6:	d142      	bne.n	8007e6e <_malloc_r+0xea>
 8007de8:	6821      	ldr	r1, [r4, #0]
 8007dea:	1a6d      	subs	r5, r5, r1
 8007dec:	4629      	mov	r1, r5
 8007dee:	4630      	mov	r0, r6
 8007df0:	f7ff ffa6 	bl	8007d40 <sbrk_aligned>
 8007df4:	3001      	adds	r0, #1
 8007df6:	d03a      	beq.n	8007e6e <_malloc_r+0xea>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	442b      	add	r3, r5
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	bb62      	cbnz	r2, 8007e60 <_malloc_r+0xdc>
 8007e06:	f8c8 7000 	str.w	r7, [r8]
 8007e0a:	e00f      	b.n	8007e2c <_malloc_r+0xa8>
 8007e0c:	6822      	ldr	r2, [r4, #0]
 8007e0e:	1b52      	subs	r2, r2, r5
 8007e10:	d420      	bmi.n	8007e54 <_malloc_r+0xd0>
 8007e12:	2a0b      	cmp	r2, #11
 8007e14:	d917      	bls.n	8007e46 <_malloc_r+0xc2>
 8007e16:	1961      	adds	r1, r4, r5
 8007e18:	42a3      	cmp	r3, r4
 8007e1a:	6025      	str	r5, [r4, #0]
 8007e1c:	bf18      	it	ne
 8007e1e:	6059      	strne	r1, [r3, #4]
 8007e20:	6863      	ldr	r3, [r4, #4]
 8007e22:	bf08      	it	eq
 8007e24:	f8c8 1000 	streq.w	r1, [r8]
 8007e28:	5162      	str	r2, [r4, r5]
 8007e2a:	604b      	str	r3, [r1, #4]
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f000 f82f 	bl	8007e90 <__malloc_unlock>
 8007e32:	f104 000b 	add.w	r0, r4, #11
 8007e36:	1d23      	adds	r3, r4, #4
 8007e38:	f020 0007 	bic.w	r0, r0, #7
 8007e3c:	1ac2      	subs	r2, r0, r3
 8007e3e:	bf1c      	itt	ne
 8007e40:	1a1b      	subne	r3, r3, r0
 8007e42:	50a3      	strne	r3, [r4, r2]
 8007e44:	e7af      	b.n	8007da6 <_malloc_r+0x22>
 8007e46:	6862      	ldr	r2, [r4, #4]
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	bf0c      	ite	eq
 8007e4c:	f8c8 2000 	streq.w	r2, [r8]
 8007e50:	605a      	strne	r2, [r3, #4]
 8007e52:	e7eb      	b.n	8007e2c <_malloc_r+0xa8>
 8007e54:	4623      	mov	r3, r4
 8007e56:	6864      	ldr	r4, [r4, #4]
 8007e58:	e7ae      	b.n	8007db8 <_malloc_r+0x34>
 8007e5a:	463c      	mov	r4, r7
 8007e5c:	687f      	ldr	r7, [r7, #4]
 8007e5e:	e7b6      	b.n	8007dce <_malloc_r+0x4a>
 8007e60:	461a      	mov	r2, r3
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	42a3      	cmp	r3, r4
 8007e66:	d1fb      	bne.n	8007e60 <_malloc_r+0xdc>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	6053      	str	r3, [r2, #4]
 8007e6c:	e7de      	b.n	8007e2c <_malloc_r+0xa8>
 8007e6e:	230c      	movs	r3, #12
 8007e70:	6033      	str	r3, [r6, #0]
 8007e72:	4630      	mov	r0, r6
 8007e74:	f000 f80c 	bl	8007e90 <__malloc_unlock>
 8007e78:	e794      	b.n	8007da4 <_malloc_r+0x20>
 8007e7a:	6005      	str	r5, [r0, #0]
 8007e7c:	e7d6      	b.n	8007e2c <_malloc_r+0xa8>
 8007e7e:	bf00      	nop
 8007e80:	200044d0 	.word	0x200044d0

08007e84 <__malloc_lock>:
 8007e84:	4801      	ldr	r0, [pc, #4]	@ (8007e8c <__malloc_lock+0x8>)
 8007e86:	f7ff bf01 	b.w	8007c8c <__retarget_lock_acquire_recursive>
 8007e8a:	bf00      	nop
 8007e8c:	200044c8 	.word	0x200044c8

08007e90 <__malloc_unlock>:
 8007e90:	4801      	ldr	r0, [pc, #4]	@ (8007e98 <__malloc_unlock+0x8>)
 8007e92:	f7ff befc 	b.w	8007c8e <__retarget_lock_release_recursive>
 8007e96:	bf00      	nop
 8007e98:	200044c8 	.word	0x200044c8

08007e9c <__ssputs_r>:
 8007e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea0:	688e      	ldr	r6, [r1, #8]
 8007ea2:	461f      	mov	r7, r3
 8007ea4:	42be      	cmp	r6, r7
 8007ea6:	680b      	ldr	r3, [r1, #0]
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	460c      	mov	r4, r1
 8007eac:	4690      	mov	r8, r2
 8007eae:	d82d      	bhi.n	8007f0c <__ssputs_r+0x70>
 8007eb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007eb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007eb8:	d026      	beq.n	8007f08 <__ssputs_r+0x6c>
 8007eba:	6965      	ldr	r5, [r4, #20]
 8007ebc:	6909      	ldr	r1, [r1, #16]
 8007ebe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ec2:	eba3 0901 	sub.w	r9, r3, r1
 8007ec6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007eca:	1c7b      	adds	r3, r7, #1
 8007ecc:	444b      	add	r3, r9
 8007ece:	106d      	asrs	r5, r5, #1
 8007ed0:	429d      	cmp	r5, r3
 8007ed2:	bf38      	it	cc
 8007ed4:	461d      	movcc	r5, r3
 8007ed6:	0553      	lsls	r3, r2, #21
 8007ed8:	d527      	bpl.n	8007f2a <__ssputs_r+0x8e>
 8007eda:	4629      	mov	r1, r5
 8007edc:	f7ff ff52 	bl	8007d84 <_malloc_r>
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	b360      	cbz	r0, 8007f3e <__ssputs_r+0xa2>
 8007ee4:	6921      	ldr	r1, [r4, #16]
 8007ee6:	464a      	mov	r2, r9
 8007ee8:	f7ff fed2 	bl	8007c90 <memcpy>
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ef6:	81a3      	strh	r3, [r4, #12]
 8007ef8:	6126      	str	r6, [r4, #16]
 8007efa:	6165      	str	r5, [r4, #20]
 8007efc:	444e      	add	r6, r9
 8007efe:	eba5 0509 	sub.w	r5, r5, r9
 8007f02:	6026      	str	r6, [r4, #0]
 8007f04:	60a5      	str	r5, [r4, #8]
 8007f06:	463e      	mov	r6, r7
 8007f08:	42be      	cmp	r6, r7
 8007f0a:	d900      	bls.n	8007f0e <__ssputs_r+0x72>
 8007f0c:	463e      	mov	r6, r7
 8007f0e:	6820      	ldr	r0, [r4, #0]
 8007f10:	4632      	mov	r2, r6
 8007f12:	4641      	mov	r1, r8
 8007f14:	f000 faa6 	bl	8008464 <memmove>
 8007f18:	68a3      	ldr	r3, [r4, #8]
 8007f1a:	1b9b      	subs	r3, r3, r6
 8007f1c:	60a3      	str	r3, [r4, #8]
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	4433      	add	r3, r6
 8007f22:	6023      	str	r3, [r4, #0]
 8007f24:	2000      	movs	r0, #0
 8007f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2a:	462a      	mov	r2, r5
 8007f2c:	f000 fac4 	bl	80084b8 <_realloc_r>
 8007f30:	4606      	mov	r6, r0
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d1e0      	bne.n	8007ef8 <__ssputs_r+0x5c>
 8007f36:	6921      	ldr	r1, [r4, #16]
 8007f38:	4650      	mov	r0, sl
 8007f3a:	f7ff feb7 	bl	8007cac <_free_r>
 8007f3e:	230c      	movs	r3, #12
 8007f40:	f8ca 3000 	str.w	r3, [sl]
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f4a:	81a3      	strh	r3, [r4, #12]
 8007f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f50:	e7e9      	b.n	8007f26 <__ssputs_r+0x8a>
	...

08007f54 <_svfiprintf_r>:
 8007f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f58:	4698      	mov	r8, r3
 8007f5a:	898b      	ldrh	r3, [r1, #12]
 8007f5c:	061b      	lsls	r3, r3, #24
 8007f5e:	b09d      	sub	sp, #116	@ 0x74
 8007f60:	4607      	mov	r7, r0
 8007f62:	460d      	mov	r5, r1
 8007f64:	4614      	mov	r4, r2
 8007f66:	d510      	bpl.n	8007f8a <_svfiprintf_r+0x36>
 8007f68:	690b      	ldr	r3, [r1, #16]
 8007f6a:	b973      	cbnz	r3, 8007f8a <_svfiprintf_r+0x36>
 8007f6c:	2140      	movs	r1, #64	@ 0x40
 8007f6e:	f7ff ff09 	bl	8007d84 <_malloc_r>
 8007f72:	6028      	str	r0, [r5, #0]
 8007f74:	6128      	str	r0, [r5, #16]
 8007f76:	b930      	cbnz	r0, 8007f86 <_svfiprintf_r+0x32>
 8007f78:	230c      	movs	r3, #12
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f80:	b01d      	add	sp, #116	@ 0x74
 8007f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f86:	2340      	movs	r3, #64	@ 0x40
 8007f88:	616b      	str	r3, [r5, #20]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f8e:	2320      	movs	r3, #32
 8007f90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f94:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f98:	2330      	movs	r3, #48	@ 0x30
 8007f9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008138 <_svfiprintf_r+0x1e4>
 8007f9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fa2:	f04f 0901 	mov.w	r9, #1
 8007fa6:	4623      	mov	r3, r4
 8007fa8:	469a      	mov	sl, r3
 8007faa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fae:	b10a      	cbz	r2, 8007fb4 <_svfiprintf_r+0x60>
 8007fb0:	2a25      	cmp	r2, #37	@ 0x25
 8007fb2:	d1f9      	bne.n	8007fa8 <_svfiprintf_r+0x54>
 8007fb4:	ebba 0b04 	subs.w	fp, sl, r4
 8007fb8:	d00b      	beq.n	8007fd2 <_svfiprintf_r+0x7e>
 8007fba:	465b      	mov	r3, fp
 8007fbc:	4622      	mov	r2, r4
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	4638      	mov	r0, r7
 8007fc2:	f7ff ff6b 	bl	8007e9c <__ssputs_r>
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	f000 80a7 	beq.w	800811a <_svfiprintf_r+0x1c6>
 8007fcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fce:	445a      	add	r2, fp
 8007fd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 809f 	beq.w	800811a <_svfiprintf_r+0x1c6>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fe6:	f10a 0a01 	add.w	sl, sl, #1
 8007fea:	9304      	str	r3, [sp, #16]
 8007fec:	9307      	str	r3, [sp, #28]
 8007fee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ff2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ff4:	4654      	mov	r4, sl
 8007ff6:	2205      	movs	r2, #5
 8007ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ffc:	484e      	ldr	r0, [pc, #312]	@ (8008138 <_svfiprintf_r+0x1e4>)
 8007ffe:	f7f8 f8ef 	bl	80001e0 <memchr>
 8008002:	9a04      	ldr	r2, [sp, #16]
 8008004:	b9d8      	cbnz	r0, 800803e <_svfiprintf_r+0xea>
 8008006:	06d0      	lsls	r0, r2, #27
 8008008:	bf44      	itt	mi
 800800a:	2320      	movmi	r3, #32
 800800c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008010:	0711      	lsls	r1, r2, #28
 8008012:	bf44      	itt	mi
 8008014:	232b      	movmi	r3, #43	@ 0x2b
 8008016:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800801a:	f89a 3000 	ldrb.w	r3, [sl]
 800801e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008020:	d015      	beq.n	800804e <_svfiprintf_r+0xfa>
 8008022:	9a07      	ldr	r2, [sp, #28]
 8008024:	4654      	mov	r4, sl
 8008026:	2000      	movs	r0, #0
 8008028:	f04f 0c0a 	mov.w	ip, #10
 800802c:	4621      	mov	r1, r4
 800802e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008032:	3b30      	subs	r3, #48	@ 0x30
 8008034:	2b09      	cmp	r3, #9
 8008036:	d94b      	bls.n	80080d0 <_svfiprintf_r+0x17c>
 8008038:	b1b0      	cbz	r0, 8008068 <_svfiprintf_r+0x114>
 800803a:	9207      	str	r2, [sp, #28]
 800803c:	e014      	b.n	8008068 <_svfiprintf_r+0x114>
 800803e:	eba0 0308 	sub.w	r3, r0, r8
 8008042:	fa09 f303 	lsl.w	r3, r9, r3
 8008046:	4313      	orrs	r3, r2
 8008048:	9304      	str	r3, [sp, #16]
 800804a:	46a2      	mov	sl, r4
 800804c:	e7d2      	b.n	8007ff4 <_svfiprintf_r+0xa0>
 800804e:	9b03      	ldr	r3, [sp, #12]
 8008050:	1d19      	adds	r1, r3, #4
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	9103      	str	r1, [sp, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	bfbb      	ittet	lt
 800805a:	425b      	neglt	r3, r3
 800805c:	f042 0202 	orrlt.w	r2, r2, #2
 8008060:	9307      	strge	r3, [sp, #28]
 8008062:	9307      	strlt	r3, [sp, #28]
 8008064:	bfb8      	it	lt
 8008066:	9204      	strlt	r2, [sp, #16]
 8008068:	7823      	ldrb	r3, [r4, #0]
 800806a:	2b2e      	cmp	r3, #46	@ 0x2e
 800806c:	d10a      	bne.n	8008084 <_svfiprintf_r+0x130>
 800806e:	7863      	ldrb	r3, [r4, #1]
 8008070:	2b2a      	cmp	r3, #42	@ 0x2a
 8008072:	d132      	bne.n	80080da <_svfiprintf_r+0x186>
 8008074:	9b03      	ldr	r3, [sp, #12]
 8008076:	1d1a      	adds	r2, r3, #4
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	9203      	str	r2, [sp, #12]
 800807c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008080:	3402      	adds	r4, #2
 8008082:	9305      	str	r3, [sp, #20]
 8008084:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008148 <_svfiprintf_r+0x1f4>
 8008088:	7821      	ldrb	r1, [r4, #0]
 800808a:	2203      	movs	r2, #3
 800808c:	4650      	mov	r0, sl
 800808e:	f7f8 f8a7 	bl	80001e0 <memchr>
 8008092:	b138      	cbz	r0, 80080a4 <_svfiprintf_r+0x150>
 8008094:	9b04      	ldr	r3, [sp, #16]
 8008096:	eba0 000a 	sub.w	r0, r0, sl
 800809a:	2240      	movs	r2, #64	@ 0x40
 800809c:	4082      	lsls	r2, r0
 800809e:	4313      	orrs	r3, r2
 80080a0:	3401      	adds	r4, #1
 80080a2:	9304      	str	r3, [sp, #16]
 80080a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a8:	4824      	ldr	r0, [pc, #144]	@ (800813c <_svfiprintf_r+0x1e8>)
 80080aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080ae:	2206      	movs	r2, #6
 80080b0:	f7f8 f896 	bl	80001e0 <memchr>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d036      	beq.n	8008126 <_svfiprintf_r+0x1d2>
 80080b8:	4b21      	ldr	r3, [pc, #132]	@ (8008140 <_svfiprintf_r+0x1ec>)
 80080ba:	bb1b      	cbnz	r3, 8008104 <_svfiprintf_r+0x1b0>
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	3307      	adds	r3, #7
 80080c0:	f023 0307 	bic.w	r3, r3, #7
 80080c4:	3308      	adds	r3, #8
 80080c6:	9303      	str	r3, [sp, #12]
 80080c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080ca:	4433      	add	r3, r6
 80080cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ce:	e76a      	b.n	8007fa6 <_svfiprintf_r+0x52>
 80080d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80080d4:	460c      	mov	r4, r1
 80080d6:	2001      	movs	r0, #1
 80080d8:	e7a8      	b.n	800802c <_svfiprintf_r+0xd8>
 80080da:	2300      	movs	r3, #0
 80080dc:	3401      	adds	r4, #1
 80080de:	9305      	str	r3, [sp, #20]
 80080e0:	4619      	mov	r1, r3
 80080e2:	f04f 0c0a 	mov.w	ip, #10
 80080e6:	4620      	mov	r0, r4
 80080e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080ec:	3a30      	subs	r2, #48	@ 0x30
 80080ee:	2a09      	cmp	r2, #9
 80080f0:	d903      	bls.n	80080fa <_svfiprintf_r+0x1a6>
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d0c6      	beq.n	8008084 <_svfiprintf_r+0x130>
 80080f6:	9105      	str	r1, [sp, #20]
 80080f8:	e7c4      	b.n	8008084 <_svfiprintf_r+0x130>
 80080fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80080fe:	4604      	mov	r4, r0
 8008100:	2301      	movs	r3, #1
 8008102:	e7f0      	b.n	80080e6 <_svfiprintf_r+0x192>
 8008104:	ab03      	add	r3, sp, #12
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	462a      	mov	r2, r5
 800810a:	4b0e      	ldr	r3, [pc, #56]	@ (8008144 <_svfiprintf_r+0x1f0>)
 800810c:	a904      	add	r1, sp, #16
 800810e:	4638      	mov	r0, r7
 8008110:	f3af 8000 	nop.w
 8008114:	1c42      	adds	r2, r0, #1
 8008116:	4606      	mov	r6, r0
 8008118:	d1d6      	bne.n	80080c8 <_svfiprintf_r+0x174>
 800811a:	89ab      	ldrh	r3, [r5, #12]
 800811c:	065b      	lsls	r3, r3, #25
 800811e:	f53f af2d 	bmi.w	8007f7c <_svfiprintf_r+0x28>
 8008122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008124:	e72c      	b.n	8007f80 <_svfiprintf_r+0x2c>
 8008126:	ab03      	add	r3, sp, #12
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	462a      	mov	r2, r5
 800812c:	4b05      	ldr	r3, [pc, #20]	@ (8008144 <_svfiprintf_r+0x1f0>)
 800812e:	a904      	add	r1, sp, #16
 8008130:	4638      	mov	r0, r7
 8008132:	f000 f879 	bl	8008228 <_printf_i>
 8008136:	e7ed      	b.n	8008114 <_svfiprintf_r+0x1c0>
 8008138:	080087b4 	.word	0x080087b4
 800813c:	080087be 	.word	0x080087be
 8008140:	00000000 	.word	0x00000000
 8008144:	08007e9d 	.word	0x08007e9d
 8008148:	080087ba 	.word	0x080087ba

0800814c <_printf_common>:
 800814c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008150:	4616      	mov	r6, r2
 8008152:	4698      	mov	r8, r3
 8008154:	688a      	ldr	r2, [r1, #8]
 8008156:	690b      	ldr	r3, [r1, #16]
 8008158:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800815c:	4293      	cmp	r3, r2
 800815e:	bfb8      	it	lt
 8008160:	4613      	movlt	r3, r2
 8008162:	6033      	str	r3, [r6, #0]
 8008164:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008168:	4607      	mov	r7, r0
 800816a:	460c      	mov	r4, r1
 800816c:	b10a      	cbz	r2, 8008172 <_printf_common+0x26>
 800816e:	3301      	adds	r3, #1
 8008170:	6033      	str	r3, [r6, #0]
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	0699      	lsls	r1, r3, #26
 8008176:	bf42      	ittt	mi
 8008178:	6833      	ldrmi	r3, [r6, #0]
 800817a:	3302      	addmi	r3, #2
 800817c:	6033      	strmi	r3, [r6, #0]
 800817e:	6825      	ldr	r5, [r4, #0]
 8008180:	f015 0506 	ands.w	r5, r5, #6
 8008184:	d106      	bne.n	8008194 <_printf_common+0x48>
 8008186:	f104 0a19 	add.w	sl, r4, #25
 800818a:	68e3      	ldr	r3, [r4, #12]
 800818c:	6832      	ldr	r2, [r6, #0]
 800818e:	1a9b      	subs	r3, r3, r2
 8008190:	42ab      	cmp	r3, r5
 8008192:	dc26      	bgt.n	80081e2 <_printf_common+0x96>
 8008194:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008198:	6822      	ldr	r2, [r4, #0]
 800819a:	3b00      	subs	r3, #0
 800819c:	bf18      	it	ne
 800819e:	2301      	movne	r3, #1
 80081a0:	0692      	lsls	r2, r2, #26
 80081a2:	d42b      	bmi.n	80081fc <_printf_common+0xb0>
 80081a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081a8:	4641      	mov	r1, r8
 80081aa:	4638      	mov	r0, r7
 80081ac:	47c8      	blx	r9
 80081ae:	3001      	adds	r0, #1
 80081b0:	d01e      	beq.n	80081f0 <_printf_common+0xa4>
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	6922      	ldr	r2, [r4, #16]
 80081b6:	f003 0306 	and.w	r3, r3, #6
 80081ba:	2b04      	cmp	r3, #4
 80081bc:	bf02      	ittt	eq
 80081be:	68e5      	ldreq	r5, [r4, #12]
 80081c0:	6833      	ldreq	r3, [r6, #0]
 80081c2:	1aed      	subeq	r5, r5, r3
 80081c4:	68a3      	ldr	r3, [r4, #8]
 80081c6:	bf0c      	ite	eq
 80081c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081cc:	2500      	movne	r5, #0
 80081ce:	4293      	cmp	r3, r2
 80081d0:	bfc4      	itt	gt
 80081d2:	1a9b      	subgt	r3, r3, r2
 80081d4:	18ed      	addgt	r5, r5, r3
 80081d6:	2600      	movs	r6, #0
 80081d8:	341a      	adds	r4, #26
 80081da:	42b5      	cmp	r5, r6
 80081dc:	d11a      	bne.n	8008214 <_printf_common+0xc8>
 80081de:	2000      	movs	r0, #0
 80081e0:	e008      	b.n	80081f4 <_printf_common+0xa8>
 80081e2:	2301      	movs	r3, #1
 80081e4:	4652      	mov	r2, sl
 80081e6:	4641      	mov	r1, r8
 80081e8:	4638      	mov	r0, r7
 80081ea:	47c8      	blx	r9
 80081ec:	3001      	adds	r0, #1
 80081ee:	d103      	bne.n	80081f8 <_printf_common+0xac>
 80081f0:	f04f 30ff 	mov.w	r0, #4294967295
 80081f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f8:	3501      	adds	r5, #1
 80081fa:	e7c6      	b.n	800818a <_printf_common+0x3e>
 80081fc:	18e1      	adds	r1, r4, r3
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	2030      	movs	r0, #48	@ 0x30
 8008202:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008206:	4422      	add	r2, r4
 8008208:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800820c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008210:	3302      	adds	r3, #2
 8008212:	e7c7      	b.n	80081a4 <_printf_common+0x58>
 8008214:	2301      	movs	r3, #1
 8008216:	4622      	mov	r2, r4
 8008218:	4641      	mov	r1, r8
 800821a:	4638      	mov	r0, r7
 800821c:	47c8      	blx	r9
 800821e:	3001      	adds	r0, #1
 8008220:	d0e6      	beq.n	80081f0 <_printf_common+0xa4>
 8008222:	3601      	adds	r6, #1
 8008224:	e7d9      	b.n	80081da <_printf_common+0x8e>
	...

08008228 <_printf_i>:
 8008228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800822c:	7e0f      	ldrb	r7, [r1, #24]
 800822e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008230:	2f78      	cmp	r7, #120	@ 0x78
 8008232:	4691      	mov	r9, r2
 8008234:	4680      	mov	r8, r0
 8008236:	460c      	mov	r4, r1
 8008238:	469a      	mov	sl, r3
 800823a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800823e:	d807      	bhi.n	8008250 <_printf_i+0x28>
 8008240:	2f62      	cmp	r7, #98	@ 0x62
 8008242:	d80a      	bhi.n	800825a <_printf_i+0x32>
 8008244:	2f00      	cmp	r7, #0
 8008246:	f000 80d1 	beq.w	80083ec <_printf_i+0x1c4>
 800824a:	2f58      	cmp	r7, #88	@ 0x58
 800824c:	f000 80b8 	beq.w	80083c0 <_printf_i+0x198>
 8008250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008254:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008258:	e03a      	b.n	80082d0 <_printf_i+0xa8>
 800825a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800825e:	2b15      	cmp	r3, #21
 8008260:	d8f6      	bhi.n	8008250 <_printf_i+0x28>
 8008262:	a101      	add	r1, pc, #4	@ (adr r1, 8008268 <_printf_i+0x40>)
 8008264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008268:	080082c1 	.word	0x080082c1
 800826c:	080082d5 	.word	0x080082d5
 8008270:	08008251 	.word	0x08008251
 8008274:	08008251 	.word	0x08008251
 8008278:	08008251 	.word	0x08008251
 800827c:	08008251 	.word	0x08008251
 8008280:	080082d5 	.word	0x080082d5
 8008284:	08008251 	.word	0x08008251
 8008288:	08008251 	.word	0x08008251
 800828c:	08008251 	.word	0x08008251
 8008290:	08008251 	.word	0x08008251
 8008294:	080083d3 	.word	0x080083d3
 8008298:	080082ff 	.word	0x080082ff
 800829c:	0800838d 	.word	0x0800838d
 80082a0:	08008251 	.word	0x08008251
 80082a4:	08008251 	.word	0x08008251
 80082a8:	080083f5 	.word	0x080083f5
 80082ac:	08008251 	.word	0x08008251
 80082b0:	080082ff 	.word	0x080082ff
 80082b4:	08008251 	.word	0x08008251
 80082b8:	08008251 	.word	0x08008251
 80082bc:	08008395 	.word	0x08008395
 80082c0:	6833      	ldr	r3, [r6, #0]
 80082c2:	1d1a      	adds	r2, r3, #4
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6032      	str	r2, [r6, #0]
 80082c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082d0:	2301      	movs	r3, #1
 80082d2:	e09c      	b.n	800840e <_printf_i+0x1e6>
 80082d4:	6833      	ldr	r3, [r6, #0]
 80082d6:	6820      	ldr	r0, [r4, #0]
 80082d8:	1d19      	adds	r1, r3, #4
 80082da:	6031      	str	r1, [r6, #0]
 80082dc:	0606      	lsls	r6, r0, #24
 80082de:	d501      	bpl.n	80082e4 <_printf_i+0xbc>
 80082e0:	681d      	ldr	r5, [r3, #0]
 80082e2:	e003      	b.n	80082ec <_printf_i+0xc4>
 80082e4:	0645      	lsls	r5, r0, #25
 80082e6:	d5fb      	bpl.n	80082e0 <_printf_i+0xb8>
 80082e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082ec:	2d00      	cmp	r5, #0
 80082ee:	da03      	bge.n	80082f8 <_printf_i+0xd0>
 80082f0:	232d      	movs	r3, #45	@ 0x2d
 80082f2:	426d      	negs	r5, r5
 80082f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082f8:	4858      	ldr	r0, [pc, #352]	@ (800845c <_printf_i+0x234>)
 80082fa:	230a      	movs	r3, #10
 80082fc:	e011      	b.n	8008322 <_printf_i+0xfa>
 80082fe:	6821      	ldr	r1, [r4, #0]
 8008300:	6833      	ldr	r3, [r6, #0]
 8008302:	0608      	lsls	r0, r1, #24
 8008304:	f853 5b04 	ldr.w	r5, [r3], #4
 8008308:	d402      	bmi.n	8008310 <_printf_i+0xe8>
 800830a:	0649      	lsls	r1, r1, #25
 800830c:	bf48      	it	mi
 800830e:	b2ad      	uxthmi	r5, r5
 8008310:	2f6f      	cmp	r7, #111	@ 0x6f
 8008312:	4852      	ldr	r0, [pc, #328]	@ (800845c <_printf_i+0x234>)
 8008314:	6033      	str	r3, [r6, #0]
 8008316:	bf14      	ite	ne
 8008318:	230a      	movne	r3, #10
 800831a:	2308      	moveq	r3, #8
 800831c:	2100      	movs	r1, #0
 800831e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008322:	6866      	ldr	r6, [r4, #4]
 8008324:	60a6      	str	r6, [r4, #8]
 8008326:	2e00      	cmp	r6, #0
 8008328:	db05      	blt.n	8008336 <_printf_i+0x10e>
 800832a:	6821      	ldr	r1, [r4, #0]
 800832c:	432e      	orrs	r6, r5
 800832e:	f021 0104 	bic.w	r1, r1, #4
 8008332:	6021      	str	r1, [r4, #0]
 8008334:	d04b      	beq.n	80083ce <_printf_i+0x1a6>
 8008336:	4616      	mov	r6, r2
 8008338:	fbb5 f1f3 	udiv	r1, r5, r3
 800833c:	fb03 5711 	mls	r7, r3, r1, r5
 8008340:	5dc7      	ldrb	r7, [r0, r7]
 8008342:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008346:	462f      	mov	r7, r5
 8008348:	42bb      	cmp	r3, r7
 800834a:	460d      	mov	r5, r1
 800834c:	d9f4      	bls.n	8008338 <_printf_i+0x110>
 800834e:	2b08      	cmp	r3, #8
 8008350:	d10b      	bne.n	800836a <_printf_i+0x142>
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	07df      	lsls	r7, r3, #31
 8008356:	d508      	bpl.n	800836a <_printf_i+0x142>
 8008358:	6923      	ldr	r3, [r4, #16]
 800835a:	6861      	ldr	r1, [r4, #4]
 800835c:	4299      	cmp	r1, r3
 800835e:	bfde      	ittt	le
 8008360:	2330      	movle	r3, #48	@ 0x30
 8008362:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008366:	f106 36ff 	addle.w	r6, r6, #4294967295
 800836a:	1b92      	subs	r2, r2, r6
 800836c:	6122      	str	r2, [r4, #16]
 800836e:	f8cd a000 	str.w	sl, [sp]
 8008372:	464b      	mov	r3, r9
 8008374:	aa03      	add	r2, sp, #12
 8008376:	4621      	mov	r1, r4
 8008378:	4640      	mov	r0, r8
 800837a:	f7ff fee7 	bl	800814c <_printf_common>
 800837e:	3001      	adds	r0, #1
 8008380:	d14a      	bne.n	8008418 <_printf_i+0x1f0>
 8008382:	f04f 30ff 	mov.w	r0, #4294967295
 8008386:	b004      	add	sp, #16
 8008388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	f043 0320 	orr.w	r3, r3, #32
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	4832      	ldr	r0, [pc, #200]	@ (8008460 <_printf_i+0x238>)
 8008396:	2778      	movs	r7, #120	@ 0x78
 8008398:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	6831      	ldr	r1, [r6, #0]
 80083a0:	061f      	lsls	r7, r3, #24
 80083a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80083a6:	d402      	bmi.n	80083ae <_printf_i+0x186>
 80083a8:	065f      	lsls	r7, r3, #25
 80083aa:	bf48      	it	mi
 80083ac:	b2ad      	uxthmi	r5, r5
 80083ae:	6031      	str	r1, [r6, #0]
 80083b0:	07d9      	lsls	r1, r3, #31
 80083b2:	bf44      	itt	mi
 80083b4:	f043 0320 	orrmi.w	r3, r3, #32
 80083b8:	6023      	strmi	r3, [r4, #0]
 80083ba:	b11d      	cbz	r5, 80083c4 <_printf_i+0x19c>
 80083bc:	2310      	movs	r3, #16
 80083be:	e7ad      	b.n	800831c <_printf_i+0xf4>
 80083c0:	4826      	ldr	r0, [pc, #152]	@ (800845c <_printf_i+0x234>)
 80083c2:	e7e9      	b.n	8008398 <_printf_i+0x170>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	f023 0320 	bic.w	r3, r3, #32
 80083ca:	6023      	str	r3, [r4, #0]
 80083cc:	e7f6      	b.n	80083bc <_printf_i+0x194>
 80083ce:	4616      	mov	r6, r2
 80083d0:	e7bd      	b.n	800834e <_printf_i+0x126>
 80083d2:	6833      	ldr	r3, [r6, #0]
 80083d4:	6825      	ldr	r5, [r4, #0]
 80083d6:	6961      	ldr	r1, [r4, #20]
 80083d8:	1d18      	adds	r0, r3, #4
 80083da:	6030      	str	r0, [r6, #0]
 80083dc:	062e      	lsls	r6, r5, #24
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	d501      	bpl.n	80083e6 <_printf_i+0x1be>
 80083e2:	6019      	str	r1, [r3, #0]
 80083e4:	e002      	b.n	80083ec <_printf_i+0x1c4>
 80083e6:	0668      	lsls	r0, r5, #25
 80083e8:	d5fb      	bpl.n	80083e2 <_printf_i+0x1ba>
 80083ea:	8019      	strh	r1, [r3, #0]
 80083ec:	2300      	movs	r3, #0
 80083ee:	6123      	str	r3, [r4, #16]
 80083f0:	4616      	mov	r6, r2
 80083f2:	e7bc      	b.n	800836e <_printf_i+0x146>
 80083f4:	6833      	ldr	r3, [r6, #0]
 80083f6:	1d1a      	adds	r2, r3, #4
 80083f8:	6032      	str	r2, [r6, #0]
 80083fa:	681e      	ldr	r6, [r3, #0]
 80083fc:	6862      	ldr	r2, [r4, #4]
 80083fe:	2100      	movs	r1, #0
 8008400:	4630      	mov	r0, r6
 8008402:	f7f7 feed 	bl	80001e0 <memchr>
 8008406:	b108      	cbz	r0, 800840c <_printf_i+0x1e4>
 8008408:	1b80      	subs	r0, r0, r6
 800840a:	6060      	str	r0, [r4, #4]
 800840c:	6863      	ldr	r3, [r4, #4]
 800840e:	6123      	str	r3, [r4, #16]
 8008410:	2300      	movs	r3, #0
 8008412:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008416:	e7aa      	b.n	800836e <_printf_i+0x146>
 8008418:	6923      	ldr	r3, [r4, #16]
 800841a:	4632      	mov	r2, r6
 800841c:	4649      	mov	r1, r9
 800841e:	4640      	mov	r0, r8
 8008420:	47d0      	blx	sl
 8008422:	3001      	adds	r0, #1
 8008424:	d0ad      	beq.n	8008382 <_printf_i+0x15a>
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	079b      	lsls	r3, r3, #30
 800842a:	d413      	bmi.n	8008454 <_printf_i+0x22c>
 800842c:	68e0      	ldr	r0, [r4, #12]
 800842e:	9b03      	ldr	r3, [sp, #12]
 8008430:	4298      	cmp	r0, r3
 8008432:	bfb8      	it	lt
 8008434:	4618      	movlt	r0, r3
 8008436:	e7a6      	b.n	8008386 <_printf_i+0x15e>
 8008438:	2301      	movs	r3, #1
 800843a:	4632      	mov	r2, r6
 800843c:	4649      	mov	r1, r9
 800843e:	4640      	mov	r0, r8
 8008440:	47d0      	blx	sl
 8008442:	3001      	adds	r0, #1
 8008444:	d09d      	beq.n	8008382 <_printf_i+0x15a>
 8008446:	3501      	adds	r5, #1
 8008448:	68e3      	ldr	r3, [r4, #12]
 800844a:	9903      	ldr	r1, [sp, #12]
 800844c:	1a5b      	subs	r3, r3, r1
 800844e:	42ab      	cmp	r3, r5
 8008450:	dcf2      	bgt.n	8008438 <_printf_i+0x210>
 8008452:	e7eb      	b.n	800842c <_printf_i+0x204>
 8008454:	2500      	movs	r5, #0
 8008456:	f104 0619 	add.w	r6, r4, #25
 800845a:	e7f5      	b.n	8008448 <_printf_i+0x220>
 800845c:	080087c5 	.word	0x080087c5
 8008460:	080087d6 	.word	0x080087d6

08008464 <memmove>:
 8008464:	4288      	cmp	r0, r1
 8008466:	b510      	push	{r4, lr}
 8008468:	eb01 0402 	add.w	r4, r1, r2
 800846c:	d902      	bls.n	8008474 <memmove+0x10>
 800846e:	4284      	cmp	r4, r0
 8008470:	4623      	mov	r3, r4
 8008472:	d807      	bhi.n	8008484 <memmove+0x20>
 8008474:	1e43      	subs	r3, r0, #1
 8008476:	42a1      	cmp	r1, r4
 8008478:	d008      	beq.n	800848c <memmove+0x28>
 800847a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800847e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008482:	e7f8      	b.n	8008476 <memmove+0x12>
 8008484:	4402      	add	r2, r0
 8008486:	4601      	mov	r1, r0
 8008488:	428a      	cmp	r2, r1
 800848a:	d100      	bne.n	800848e <memmove+0x2a>
 800848c:	bd10      	pop	{r4, pc}
 800848e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008496:	e7f7      	b.n	8008488 <memmove+0x24>

08008498 <_sbrk_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	4d06      	ldr	r5, [pc, #24]	@ (80084b4 <_sbrk_r+0x1c>)
 800849c:	2300      	movs	r3, #0
 800849e:	4604      	mov	r4, r0
 80084a0:	4608      	mov	r0, r1
 80084a2:	602b      	str	r3, [r5, #0]
 80084a4:	f7f8 fbf4 	bl	8000c90 <_sbrk>
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	d102      	bne.n	80084b2 <_sbrk_r+0x1a>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	b103      	cbz	r3, 80084b2 <_sbrk_r+0x1a>
 80084b0:	6023      	str	r3, [r4, #0]
 80084b2:	bd38      	pop	{r3, r4, r5, pc}
 80084b4:	200044c4 	.word	0x200044c4

080084b8 <_realloc_r>:
 80084b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084bc:	4607      	mov	r7, r0
 80084be:	4614      	mov	r4, r2
 80084c0:	460d      	mov	r5, r1
 80084c2:	b921      	cbnz	r1, 80084ce <_realloc_r+0x16>
 80084c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084c8:	4611      	mov	r1, r2
 80084ca:	f7ff bc5b 	b.w	8007d84 <_malloc_r>
 80084ce:	b92a      	cbnz	r2, 80084dc <_realloc_r+0x24>
 80084d0:	f7ff fbec 	bl	8007cac <_free_r>
 80084d4:	4625      	mov	r5, r4
 80084d6:	4628      	mov	r0, r5
 80084d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084dc:	f000 f81a 	bl	8008514 <_malloc_usable_size_r>
 80084e0:	4284      	cmp	r4, r0
 80084e2:	4606      	mov	r6, r0
 80084e4:	d802      	bhi.n	80084ec <_realloc_r+0x34>
 80084e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084ea:	d8f4      	bhi.n	80084d6 <_realloc_r+0x1e>
 80084ec:	4621      	mov	r1, r4
 80084ee:	4638      	mov	r0, r7
 80084f0:	f7ff fc48 	bl	8007d84 <_malloc_r>
 80084f4:	4680      	mov	r8, r0
 80084f6:	b908      	cbnz	r0, 80084fc <_realloc_r+0x44>
 80084f8:	4645      	mov	r5, r8
 80084fa:	e7ec      	b.n	80084d6 <_realloc_r+0x1e>
 80084fc:	42b4      	cmp	r4, r6
 80084fe:	4622      	mov	r2, r4
 8008500:	4629      	mov	r1, r5
 8008502:	bf28      	it	cs
 8008504:	4632      	movcs	r2, r6
 8008506:	f7ff fbc3 	bl	8007c90 <memcpy>
 800850a:	4629      	mov	r1, r5
 800850c:	4638      	mov	r0, r7
 800850e:	f7ff fbcd 	bl	8007cac <_free_r>
 8008512:	e7f1      	b.n	80084f8 <_realloc_r+0x40>

08008514 <_malloc_usable_size_r>:
 8008514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008518:	1f18      	subs	r0, r3, #4
 800851a:	2b00      	cmp	r3, #0
 800851c:	bfbc      	itt	lt
 800851e:	580b      	ldrlt	r3, [r1, r0]
 8008520:	18c0      	addlt	r0, r0, r3
 8008522:	4770      	bx	lr

08008524 <_init>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr

08008530 <_fini>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	bf00      	nop
 8008534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008536:	bc08      	pop	{r3}
 8008538:	469e      	mov	lr, r3
 800853a:	4770      	bx	lr
